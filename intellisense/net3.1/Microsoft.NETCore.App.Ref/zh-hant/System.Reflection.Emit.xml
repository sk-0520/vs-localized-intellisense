<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary>定義及表示動態組件。</summary>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary>取得原先指定的組件位置 (例如在 <see cref="T:System.Reflection.AssemblyName" /> 物件中指定的位置)。</summary>
      <returns>原先指定的組件位置。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary>定義具有指定名稱和存取權限的動態組件。</summary>
      <param name="name">組件的名稱。</param>
      <param name="access">組件的存取權限。</param>
      <returns>表示新組件的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary>定義具有指定之名稱、存取權限及屬性的新組件。</summary>
      <param name="name">組件的名稱。</param>
      <param name="access">組件的存取權限。</param>
      <param name="assemblyAttributes">包含組件屬性的集合。</param>
      <returns>代表新組件的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary>定義這個組件中的具名暫時性 (Transient) 動態模組。</summary>
      <param name="name">動態模組的名稱。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.ModuleBuilder" />，代表定義的動態模組。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的開頭為空白字元。
-或-
<paramref name="name" /> 的長度為零。
-或-
<paramref name="name" /> 的長度大於系統定義的長度上限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.ExecutionEngineException">無法載入預設符號寫入器的組件。
-或-
找不到實作預設符號寫入器介面的類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary>傳回這個組件的進入點。</summary>
      <returns>這個組件的進入點。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary>傳回值，這個值表示這個執行個體是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary>取得目前動態組件的顯示名稱。</summary>
      <returns>目前動態組件的顯示名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自訂屬性。</summary>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>陣列，其中包含自訂屬性；如果沒有屬性，則陣列是空的。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 的所有自訂屬性，以及衍生自指定屬性類型的所有自訂屬性。</summary>
      <param name="attributeType">從中衍生屬性的基底類型。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>陣列，包含衍生自 <paramref name="attributeType" /> 任何層級的自訂屬性，如果沒有這類屬性則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary>傳回 <see cref="T:System.Reflection.CustomAttributeData" /> 物件，這些物件包含已套用至目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 之屬性的相關資訊。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前模組之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary>傳回具有指定名稱的動態模組。</summary>
      <param name="name">要求之動態模組的名稱。</param>
      <returns>ModuleBuilder 物件，表示要求的動態模組。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary>取得匯出型別，在這個組件中定義的。</summary>
      <returns>
        <see cref="T:System.Type" /> 陣列，包含在這個組件中定義的匯出型別。</returns>
      <exception cref="T:System.NotSupportedException">這個方法尚未實作。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary>取得指定之檔案的 <see cref="T:System.IO.FileStream" />，這個指定之檔案位於這個組件的資訊清單檔案表中。</summary>
      <param name="name">指定檔案的名稱。</param>
      <returns>若為指定的檔案，則為 <see cref="T:System.IO.FileStream" />，或者如果找不到此檔案，則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary>取得組件資訊清單檔案表中的檔案，指定是否要包含資源模組。</summary>
      <param name="getResourceModules">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.IO.FileStream" /> 物件的陣列。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary>傳回做為這個組件部分的所有載入模組，並選擇性地包含資源模組。</summary>
      <param name="getResourceModules">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>做為這個組件部分的載入模組。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary>傳回指定資源已保存方式的資訊。</summary>
      <param name="resourceName">資源名稱。</param>
      <returns>
        <see cref="T:System.Reflection.ManifestResourceInfo" />，使用資源拓撲的相關資訊填入，或為 <see langword="null" /> (如果找不到資源)。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary>載入來自這個組件的指定資訊清單資源。</summary>
      <returns>
        <see langword="String" /> 型別的陣列，包含所有資源的名稱。</returns>
      <exception cref="T:System.NotSupportedException">在動態組件上不支援這個方法。 若要取得資訊清單資源名稱，請使用 <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary>載入來自這個組件的指定資訊清單資源。</summary>
      <param name="name">所要求的資訊清單資源名稱。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 代表這個資訊清單資源。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary>從這個組件載入指定資訊清單資源，由指定類型的命名空間限定範圍。</summary>
      <param name="type">類型，其命名空間是用來限定資訊清單資源名稱的範圍。</param>
      <param name="name">所要求的資訊清單資源名稱。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 代表這個資訊清單資源。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary>取得這個組件中的指定模組。</summary>
      <param name="name">所要求的模組名稱。</param>
      <returns>正在接受要求的模組，如果找不到模組，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary>取得做為這個組件部分的所有模組，並選擇性地包含資源模組。</summary>
      <param name="getResourceModules">若要包含資源模組，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>做為這個組件部分的模組。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary>取得目前動態組件建立時所指定的 <see cref="T:System.Reflection.AssemblyName" />，並且依指定設定程式碼基底。</summary>
      <param name="copiedName">
        <see langword="true" /> 表示將程式碼基底設定為組件陰影複製以後的位置，<see langword="false" /> 表示將程式碼基底設定為原始位置。</param>
      <returns>動態組件名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary>取得這個 <see cref="T:System.Reflection.AssemblyName" /> 所參考組件之 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 物件的不完整清單。</summary>
      <returns>所參考組件的組件名稱陣列。 這個陣列不是完整的清單。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary>取得指定文化特性的附屬組件。</summary>
      <param name="culture">指定的文化特性。</param>
      <returns>指定的附屬組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到組件。</exception>
      <exception cref="T:System.IO.FileLoadException">找不到具有相符檔案名稱的附屬組件，但 <see langword="CultureInfo" /> 不符合所指定者。</exception>
      <exception cref="T:System.BadImageFormatException">此附屬組件不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary>取得指定文化特性的附屬組件指定版本。</summary>
      <param name="culture">指定的文化特性。</param>
      <param name="version">附屬組件的版本。</param>
      <returns>指定的附屬組件。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="culture" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileLoadException">已找到檔案名稱相符的附屬組件，但 <see langword="CultureInfo" /> 或版本不符合所指定者。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到組件。</exception>
      <exception cref="T:System.BadImageFormatException">此附屬組件不是有效的組件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>從目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中已定義及建立的型別，取得指定的型別。</summary>
      <param name="name">要搜尋的型別的名稱。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該型別時擲回例外狀況，否則為 <see langword="false" />。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示搜尋時忽略型別名稱的大小寫，否則為 <see langword="false" />。</param>
      <returns>如果此類型找不到或尚未建立，則為指定的類型或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>取得值，這個值表示組件是否從全域組件快取載入。</summary>
      <returns>一定是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary>取得建立動態組件所在的主機內容。</summary>
      <returns>指出建立動態組件所在之主機內容的值。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>取得 Common Language Runtime 的版本，其將儲存在含有資訊清單的檔案中。</summary>
      <returns>字串，表示 Common Language Runtime 版本。</returns>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>傳回值，這個值表示指定之屬性型別的一個或多個執行個體是否套用至此成員。</summary>
      <param name="attributeType">所要測試之屬性的型別。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>如果一個或多個 <paramref name="attributeType" /> 的執行個體套用至這個動態組件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary>取得值，這個值指出目前組件為動態組件。</summary>
      <returns>一定是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary>如果不是陰影複製，則取得包含資訊清單之已載入檔案的位置 (程式碼基底格式)。</summary>
      <returns>包含資訊清單之載入檔的位置。 如果載入檔是已經陰影複製的，則 <see langword="Location" /> 是陰影複製前檔案的位置。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary>取得目前 <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> 中包含組件資訊清單的模組。</summary>
      <returns>資訊清單模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary>取得值，其會表示此動態組件是否位於僅限反射內容中。</summary>
      <returns>如果此動態組件位於僅限反映的內容，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定這個組件上的自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="con" /> 不是 <see langword="RuntimeConstructorInfo" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定這個組件上的自訂屬性。</summary>
      <param name="customBuilder">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary>定義動態組件的存取模式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary>動態組件可以執行，但不能儲存。</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary>當無法再存取動態組件時，會自動卸載動態組件並回收其記憶體。</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary>定義及表示動態類別的建構函式。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary>取得這個建構函式的屬性。</summary>
      <returns>這個函數的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary>取得 <see cref="T:System.Reflection.CallingConventions" /> 值，該值取決於宣告的類型是否為泛型。</summary>
      <returns>如果宣告型別為泛型，則為 <see cref="F:System.Reflection.CallingConventions.HasThis" />，否則為 <see cref="F:System.Reflection.CallingConventions.Standard" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary>針對宣告此成員的類型，取得 <see cref="T:System.Type" /> 物件的參考。</summary>
      <returns>宣告這個成員的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>定義這個建構函式的參數。</summary>
      <param name="iSequence">在參數清單中參數的位置。 第一個參數的參數索引從數字 1 開始。</param>
      <param name="attributes">這個參數的屬性。</param>
      <param name="strParamName">參數名稱。 名稱可以是 null 字串。</param>
      <returns>物件，代表這個建構函式的新參數。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iSequence" /> 小於 0 (零) 或大於建構函式的參數數目。</exception>
      <exception cref="T:System.InvalidOperationException">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個建構函式定義的所有自訂屬性。</summary>
      <param name="inherit">控制基底類別自訂屬性的繼承。 這個參數已忽略。</param>
      <returns>物件陣列，代表這個 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 執行個體所代表的建構函式所有自訂屬性。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回指定型別所識別的自訂屬性。</summary>
      <param name="attributeType">自訂屬性型別。</param>
      <param name="inherit">控制自訂屬性來自基底類別的繼承。 這個參數已忽略。</param>
      <returns>物件陣列，代表這個建構函式的屬性。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary>取得這個建構函式的 <see cref="T:System.Reflection.Emit.ILGenerator" />。</summary>
      <returns>這個建構函式的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">此建構函式是無參數建構函式。
-或-
建構函式具有 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，表示它不應具有方法主體。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary>取得 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件，該物件具有指定的 MSIL 資料流大小，可用於建置這個建構函式的方法主體。</summary>
      <param name="streamSize">MSIL 緩衝區的大小，以位元組為單位。</param>
      <returns>這個建構函式的 <see cref="T:System.Reflection.Emit.ILGenerator" />。</returns>
      <exception cref="T:System.InvalidOperationException">此建構函式是無參數建構函式。
-或-
建構函式具有 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，表示它不該有方法主體。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary>傳回這個建構函式的方法實作 (Implementation) 旗標。</summary>
      <returns>這個建構函式的方法實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary>傳回這個建構函式的參數。</summary>
      <returns>陣列，代表這個建構函式的參數。</returns>
      <exception cref="T:System.InvalidOperationException">在 .NET Framework 1.0 和 1.1 版中，尚未針對這個建構函式類型呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
      <exception cref="T:System.NotSupportedException">在 .NET Framework 2.0 中，尚未在這個建構函式的型別上呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary>取得或設定這個建構函式中的本機變數是否應該以零初始化。</summary>
      <returns>讀取/寫入。 取得或設定用來判斷這個建構函式中的區域變數是否應為未初始化的值。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定引數，在指定 <see langword="Binder" /> 的約束下，動態叫用這個執行個體所反映的建構函式。</summary>
      <param name="obj">物件，需要重新初始化的。</param>
      <param name="invokeAttr">其中一個 <see langword="BindingFlags" /> 值，指定所要的繫結型別。</param>
      <param name="binder">
        <see langword="Binder" />，其定義一組屬性，並使用反映來啟用繫結、引數型別的強制型轉和成員引動過程。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用 Binder.DefaultBinding。</param>
      <param name="parameters">引數清單。 這是引數陣列，與要叫用的建構函式參數具有相同的數目、順序和型別。 如果沒有參數存在，則這應該是 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> ，用來管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>與建構函式相關聯的類別之執行個體。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 您可以使用 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 並在傳回的 <see cref="T:System.Reflection.ConstructorInfo" /> 呼叫 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />，藉此擷取建構函式。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>動態叫用這個執行個體在指定物件上代表的建構函式，並與指定參數一併依指定繫結器的條件約束傳遞。</summary>
      <param name="invokeAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，例如 InvokeMethod、NonPublic 等等。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters">引數清單。 這是引數陣列，其數目、順序和類型與要叫用的建構函式參數相同。 如果沒有任何參數，則這應該是 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。 (例如，這有必要將表示為 1000 的 <see cref="T:System.String" /> 轉換為 <see cref="T:System.Double" /> 值，因為 1000 在不同文化特性中有不同的表示方式)。</param>
      <returns>叫用的建構函式所傳回的值。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 您可以使用 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 並在傳回的 <see cref="T:System.Reflection.ConstructorInfo" /> 呼叫 <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" />，藉此擷取建構函式。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>檢查是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType">自訂屬性型別。</param>
      <param name="inherit">控制自訂屬性來自基底類別的繼承。 這個參數已忽略。</param>
      <returns>如果已定義指定的自訂屬性類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 您可以使用 <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取建構函式，並在傳回的 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 上呼叫 <see cref="T:System.Reflection.ConstructorInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary>取得方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</summary>
      <returns>方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">這個類別不支援這個屬性。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary>取得在其中定義這個建構函式的動態模組。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" /> 物件，代表在其中定義這個建構函式的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary>擷取這個建構函式的名稱。</summary>
      <returns>這個建構函式的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary>保留從中取得這個物件的 <see cref="T:System.Type" /> 物件參考。</summary>
      <returns>從中取得這個物件的 <see langword="Type" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>設定這個建構函式的方法實作旗標。</summary>
      <param name="attributes">方法實作旗標。</param>
      <exception cref="T:System.InvalidOperationException">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary>傳回這個 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 執行個體為 <see cref="T:System.String" />。</summary>
      <returns>字串，包含這個建構函式的名稱、屬性和例外狀況，後面接著目前的通用中間語言資料流。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary>描述並代表列舉類型。</summary>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary>擷取包含這個列舉定義的動態組件。</summary>
      <returns>唯讀。 包含這個列舉定義的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary>傳回父組件顯示名稱所限定這個列舉的完整路徑。</summary>
      <returns>唯讀。 父組件顯示名稱所限定之這個列舉的完整路徑。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary>傳回一定為 <see cref="T:System.Type" /> 類型的父代 <see cref="T:System.Enum" />。</summary>
      <returns>唯讀。 這個類型的父 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary>取得代表這種列舉的 <see cref="T:System.Reflection.TypeInfo" /> 物件。</summary>
      <returns>代表這種列舉的物件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary>傳回這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 宣告的類型。</summary>
      <returns>唯讀。 這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 宣告的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary>使用指定的常數值，定義列舉類型中具名的靜態欄位。</summary>
      <param name="literalName">靜態欄位的名稱。</param>
      <param name="literalValue">常值的常數值。</param>
      <returns>定義的欄位。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary>傳回這個列舉的完整路徑。</summary>
      <returns>唯讀。 這個列舉的完整路徑。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>依指定傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的公用和非公用建構函式。</summary>
      <param name="bindingAttr">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的指定建構函式。 如果未定義建構函式，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個建構函式定義的所有自訂屬性。</summary>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>傳回物件陣列，代表 <see cref="T:System.Reflection.Emit.ConstructorBuilder" /> 執行個體所代表之建構函式的所有自訂屬性。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回指定類型所識別的自訂屬性。</summary>
      <param name="attributeType">套用自訂屬性的 <see langword="Type" /> 物件。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>傳回物件陣列，代表屬於 <see cref="T:System.Type" /><paramref name="attributeType" /> 的這個建構函式屬性。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>不支援這個方法。 沒有傳回值。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary>傳回目前列舉的基礎整數類型，這是在定義列舉產生器時所設定的。</summary>
      <returns>基礎類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>傳回具有指定名稱的事件。</summary>
      <param name="name">要取得的事件名稱。</param>
      <param name="bindingAttr">這個引動過程屬性。 必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件，代表這個類型所宣告或繼承之具有指定名稱的事件。 如果沒有符合項目，會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary>傳回由這個方法所宣告或繼承之公用事件的事件。</summary>
      <returns>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用事件。 如果沒有任何公用事件，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告的公用和非公用事件。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <returns>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用事件。 依指定，如果沒有的任何事件，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回指定之名稱所指定的欄位。</summary>
      <param name="name">要取得的欄位名稱。</param>
      <param name="bindingAttr">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，代表此類別所宣告或繼承的欄位，並且具有指定的名稱和公用或非公用的修飾詞。 如果沒有符合項目，會傳回 null。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告的公用和非公用欄位。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，例如 InvokeMethod、NonPublic 等等。</param>
      <returns>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用欄位。 依指定，如果沒有的任何欄位，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary>傳回此類型 (直接或間接) 實作的介面，且具有指定的完整格式名稱。</summary>
      <param name="name">介面的名稱。</param>
      <param name="ignoreCase">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <returns>傳回 <see cref="T:System.Type" /> 物件，代表所實作的介面。 如果找不到符合名稱的介面，便傳回 null。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary>傳回所要求介面的介面對應。</summary>
      <param name="interfaceType">要擷取介面對應的介面類型。</param>
      <returns>要求的介面對應。</returns>
      <exception cref="T:System.ArgumentException">此類型未實作該介面。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary>傳回在這個類別及其基底類別上實作之所有介面的陣列。</summary>
      <returns>傳回 <see cref="T:System.Type" /> 物件的陣列，代表所實作的介面。 如果未定義，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>傳回具有這個類型所宣告或繼承的指定名稱、類型和繫結之所有成員。</summary>
      <param name="name">成員的名稱。</param>
      <param name="type">要傳回的成員類型。</param>
      <param name="bindingAttr">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用成員 ；否則只會傳回公用成員。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>傳回由這個方法所宣告或繼承的指定成員。</summary>
      <param name="bindingAttr">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用成員。 如果沒有任何成員符合，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>依指定傳回此類型所宣告或繼承的所有公用和非公用方法。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <returns>傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用方法 ；否則只會傳回公用方法。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告的指定巢狀類型。</summary>
      <param name="name">
        <see cref="T:System.String" />，其中包含要取得之巢狀類型的名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。
-或-
零，表示要針對公用方法執行區分大小寫的搜尋。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，表示符合指定之需求的巢狀型別 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告或繼承的公用和非公用巢狀類型。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，表示在目前 <see cref="T:System.Type" /> 內形成巢狀的所有型別皆符合指定的繫結條件約束。
如果沒有任何型別在目前 <see cref="T:System.Type" /> 內形成巢狀，或沒有巢狀型別符合繫結條件約束，則為 <see cref="T:System.Type" /> 型別的空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>依指定傳回這個類型所宣告或繼承的所有公用和非公用屬性。</summary>
      <param name="bindingAttr">這個引動過程屬性。 必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.PropertyInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用屬性；否則只會傳回公用屬性。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary>傳回這個列舉的 GUID。</summary>
      <returns>唯讀。 這個列舉的 GUID。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>叫用指定的成員。 根據指定繫結器和引動過程屬性的條件約束，所要叫用的方法必須可存取，並提供與指定引數清單最特定的符合項目。</summary>
      <param name="name">要叫用之成員的名稱。 可以是建構函式、方法、屬性或欄位。 您必須指定適當的引動過程屬性。 請注意，將空字串當做成員名稱傳遞，可叫用類別的預設成員。</param>
      <param name="invokeAttr">引動過程屬性。 必須是來自 <see langword="BindingFlags" /> 的位元旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target">要在其上叫用指定成員的物件。 如果是靜態成員，則會忽略這個參數。</param>
      <param name="args">引數清單。 這是物件陣列，其中包含所要叫用之成員的參數數目、順序和類型。 如果沒有任何參數，則這應該是 null。</param>
      <param name="modifiers">與 <paramref name="args" /> 長度相同的陣列，其中的項目代表與所要叫用的成員之引數關聯的屬性。 參數在中繼資料內具有與其相關聯的屬性。 許多互通性服務都會使用這些屬性。 如需詳細資訊，請參閱中繼資料規格。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see langword="CultureInfo" />。 (請注意，要將代表 1000 的字串轉換成雙精度值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 陣列中的每個參數會在 <paramref name="args" /> 陣列中取得對應項目的值。 如果 <paramref name="args" /> 的長度大於 <paramref name="namedParameters" /> 的長度，則會依序傳遞其餘引數值。</param>
      <returns>傳回所叫用之成員的傳回值。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns>如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>檢查是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType">套用自訂屬性的 <see langword="Type" /> 物件。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>如果將一個或多個 <see langword="true" /> 的執行個體定義於這個成員，則為 <paramref name="attributeType" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">不完整的類型目前不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</summary>
      <param name="rank">陣列的維度數目。 這個數字必須小於或等於 32。</param>
      <returns>物件，代表由目前類型組成且為指定維度個數的陣列。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 小於 1。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，當作 ref 參數 (在 Visual Basic 中為 ByRef) 傳遞時，代表目前的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，當作 ref 參數 (在 Visual Basic 中為 ByRef) 傳遞時，代表目前的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表指向目前類型的指標。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary>擷取包含這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 定義的動態模組。</summary>
      <returns>唯讀。 包含這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 定義的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary>傳回這個列舉的名稱。</summary>
      <returns>唯讀。 這個列舉的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary>傳回這個列舉的命名空間。</summary>
      <returns>唯讀。 這個列舉的命名空間。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary>傳回用來取得這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 的類型。</summary>
      <returns>唯讀。 用來取得這個 <see cref="T:System.Reflection.Emit.EnumBuilder" /> 的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary>擷取這個列舉的內部控制代碼。</summary>
      <returns>唯讀。 這個列舉的內部控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">這個屬性目前不支援。</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary>傳回這個列舉的基礎欄位。</summary>
      <returns>唯讀。 這個列舉的基礎欄位。</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary>傳回這個列舉的基礎系統類型。</summary>
      <returns>唯讀。 傳回基礎系統類型。</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary>定義類別的事件。</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>加入一個與這個事件相關聯的「其他」方法。 「其他」方法是指除了「on」和「raise」方法之外，與這個事件關聯的方法。 您可呼叫這個函式許多次，視需要加入許多「其他」方法。</summary>
      <param name="mdBuilder">表示另一個方法的 <see langword="MethodBuilder" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>設定用來訂閱這個事件的方法。</summary>
      <param name="mdBuilder">
        <see langword="MethodBuilder" /> 物件，表示用來訂閱這個事件的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">要描述自訂屬性之協助程式的類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>設定用來引發這個事件的方法。</summary>
      <param name="mdBuilder">
        <see langword="MethodBuilder" /> 物件，表示用來引發這個事件的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>設定用來取消訂閱這個事件的方法。</summary>
      <param name="mdBuilder">
        <see langword="MethodBuilder" /> 物件，表示用來取消訂閱這個事件的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary>定義和表示欄位。 這個類別無法被繼承。</summary>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary>指出這個欄位的屬性 (Attribute)。 這個屬性是唯讀的。</summary>
      <returns>這個欄位的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary>指出型別的 <see cref="T:System.Type" /> 物件參考，這個型別會宣告這個欄位。 這個屬性是唯讀的。</summary>
      <returns>型別的 <see cref="T:System.Type" /> 物件參考，這個型別會宣告這個欄位。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary>指出這個欄位的內部中繼資料 (Metadata) 控制代碼。 這個屬性是唯讀的。</summary>
      <returns>這個欄位的內部中繼資料控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary>指出 <see cref="T:System.Type" /> 物件，表示這個欄位的型別。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示這個欄位的型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個欄位定義的所有自訂屬性。</summary>
      <param name="inherit">控制自訂屬性來自基底類別的繼承。</param>
      <returns>
        <see cref="T:System.Object" /> 型別的陣列，表示這個 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 執行個體所表示的建構函式的所有自訂屬性。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回為這個欄位定義的所有自訂屬性，這個欄位由指定型別所識別。</summary>
      <param name="attributeType">自訂屬性類型。</param>
      <param name="inherit">控制自訂屬性來自基底類別的繼承。</param>
      <returns>
        <see cref="T:System.Object" /> 型別的陣列，表示這個 <see cref="T:System.Reflection.Emit.FieldBuilder" /> 執行個體所表示的建構函式的所有自訂屬性。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary>擷取欄位值，由指定物件所支援。</summary>
      <param name="obj">要在其上存取欄位的物件。</param>
      <returns>
        <see cref="T:System.Object" />，含有這個執行個體所反映的欄位值。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指出具有指定型別的屬性是否在欄位上定義。</summary>
      <param name="attributeType">屬性的型別。</param>
      <param name="inherit">控制自訂屬性來自基底類別的繼承。</param>
      <returns>如果 <paramref name="attributeType" /> 的一個或多個執行個體在這個欄位上定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> 擷取欄位，並在傳回 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 上呼叫 <see cref="T:System.Reflection.FieldInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary>取得模組，該型別包含定義這個欄位的型別。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" />，表示要在其中定義這個欄位的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary>指出這個欄位的名稱。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個欄位的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary>指出取得這個物件的 <see cref="T:System.Type" /> 物件參考。 這個屬性是唯讀的。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的參考，就是取得這個執行個體的物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary>設定這個欄位的預設值。</summary>
      <param name="defaultValue">這個欄位的新預設值。</param>
      <exception cref="T:System.InvalidOperationException">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <exception cref="T:System.ArgumentException">這個欄位並不是其中一個支援型別。
-或-
<paramref name="defaultValue" /> 的型別不符合欄位的型別。
-或-
欄位的型別是 <see cref="T:System.Object" /> 或其他參考型別、<paramref name="defaultValue" /> 不是 <see langword="null" />，而且無法將此值指派給參考型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">這個欄位的父型別是完整的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">這個欄位的父型別是完整的。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary>指定欄位配置。</summary>
      <param name="iOffset">型別中的欄位位移 (Offset)，型別包含這個欄位。</param>
      <exception cref="T:System.InvalidOperationException">已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="iOffset" /> 小於零。</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary>設定指定物件所支援的欄位值。</summary>
      <param name="obj">要在其上存取欄位的物件。</param>
      <param name="val">要指派給欄位的值。</param>
      <param name="invokeAttr">
        <see langword="IBinder" /> 的成員，指定所要的繫結型別 (例如，IBinder.CreateInstance、IBinder.ExactBinding)。</param>
      <param name="binder">屬性集和使用反映以啟用繫結、引數型別 (Argument Type) 的強制和成員引動過程。 如果繫結器 (Binder) 為 Null，則會使用 IBinder.DefaultBinding。</param>
      <param name="culture">特定文化特性 (Culture) 的軟體喜好設定。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary>為動態定義的泛型型別和方法定義並建立泛型型別參數。 這個類別無法被繼承。</summary>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary>取得 <see cref="T:System.Reflection.Assembly" /> 物件，表示包含目前型別參數所屬之泛型型別定義的動態組件。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> 物件，表示包含目前型別參數所屬之泛型型別定義的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary>取得所有情況下的 <see langword="null" />。</summary>
      <returns>所有情況下的 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary>取得目前泛型型別參數的基底類型條件約束。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表泛型型別參數的基底類型條件約束，或如果此類型參數沒有基底類型條件約束，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary>取得所有情況下的 <see langword="true" />。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary>如果目前的 <see cref="T:System.Reflection.MethodInfo" /> 表示泛型方法的型別參數，則取得表示宣告方法的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 表示泛型方法的型別參數，則為代表宣告方法的 <see cref="T:System.Reflection.MethodInfo" />；否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary>取得泛型型別參數所屬的泛型類型定義或泛型方法定義。</summary>
      <returns>如果型別參數屬於泛型類型，則 <see cref="T:System.Type" /> 物件代表該泛型類型；如果型別參數屬於泛型方法，則 <see cref="T:System.Type" /> 物件表示宣告該泛型方法的該類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary>測試指定的物件是否為 <see langword="EventToken" /> 的執行個體，以及是否等於目前執行個體。</summary>
      <param name="o">要與目前執行個體比較的物件。</param>
      <returns>如果 <paramref name="o" /> 為 <see langword="true" /> 的執行個體，並等於目前的執行個體，則為 <see langword="EventToken" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary>取得所有情況下的 <see langword="null" />。</summary>
      <returns>所有情況下的 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary>取得一組 <see cref="T:System.Reflection.GenericParameterAttributes" /> 旗標，敘述目前泛型類型參數的共變數與特殊條件約束。</summary>
      <returns>值的位元組合，描述目前泛型類型參數的共變數和特殊條件約束。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary>取得宣告參數的泛型型別或方法之型別參數清單中的型別參數位置。</summary>
      <returns>宣告參數的泛型型別或方法之型別參數清單中的型別參數位置。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="attributeType">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" /> 。</summary>
      <returns>目前陣列類型、指標類型或 <see langword="ByRef" /> 類型所參考的類型；如果目前類型不是陣列類型和指標類型，而且不是以傳址方式傳遞，則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="name">不支援。</param>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary>不支援不完整的泛型型別參數。</summary>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="name">不支援。</param>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary>對泛型型別參數無效。</summary>
      <returns>對泛型型別參數無效。</returns>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary>對泛型型別參數無效。</summary>
      <returns>對泛型型別參數無效。</returns>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary>傳回目前執行個體的 32 位元整數雜湊碼。</summary>
      <returns>32 位元整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="name">介面的名稱。</param>
      <param name="ignoreCase">
        <see langword="true" /> 表示搜尋時忽略大小寫，而 <see langword="false" /> 則表示執行區分大小寫的搜尋。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="interfaceType">
        <see cref="T:System.Type" /> 物件，表示要為其擷取對應的介面型別 (Interface Type)。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary>不支援不完整的泛型型別參數。</summary>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="name">不支援。</param>
      <param name="type">不支援。</param>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="name">不支援。</param>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="bindingAttr">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary>不支援不完整的泛型型別參數。</summary>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="name">不支援。</param>
      <param name="invokeAttr">不支援。</param>
      <param name="binder">不支援。</param>
      <param name="target">不支援。</param>
      <param name="args">不支援。</param>
      <param name="modifiers">不支援。</param>
      <param name="culture">不支援。</param>
      <param name="namedParameters">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</summary>
      <param name="c">要測試的物件。</param>
      <returns>在所有情況下都會擲回 <see cref="T:System.NotSupportedException" /> 例外狀況。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns>如果這個物件代表建構的泛型類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="attributeType">不支援。</param>
      <param name="inherit">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary>取得所有情況下的 <see langword="true" />。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary>在所有情況下都會傳回 <see langword="false" />。</summary>
      <returns>所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary>取得所有情況下的 <see langword="false" />。</summary>
      <returns>所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary>不支援不完整的泛型型別參數。</summary>
      <param name="c">不支援。</param>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary>傳回一維陣列型別，其元素型別為泛型型別參數。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，表示其元素型別為泛型型別參數的一維陣列型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary>傳回陣列型別，其元素型別為泛型型別參數，且具有指定的維度數目。</summary>
      <param name="rank">陣列的維度數目。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，代表陣列的類型，其項目類型是以維度數目指定的泛型型別參數。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 不是有效的維度數目。 例如，它的值小於 1。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，表示做為參考參數傳遞的目前泛型型別參數。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，在做為參考參數傳遞時代表目前的泛型型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary>對於不完整的泛型型別參數無效。</summary>
      <param name="typeArguments">類型引數的陣列。</param>
      <returns>這個方法對於不完整的泛型型別參數無效。</returns>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，表示目前泛型型別參數的指標。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表指向目前泛型型別參數的指標。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary>取得包含泛型型別參數的動態模組。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" /> 物件，表示包含泛型型別參數的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary>取得泛型型別參數的名稱。</summary>
      <returns>泛型型別參數的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary>取得所有情況下的 <see langword="null" />。</summary>
      <returns>所有情況下的 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary>取得用於取得 <see cref="T:System.Type" /> 的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件。</summary>
      <returns>用於取得 <see cref="T:System.Type" /> 的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary>設定基底類型必須繼承才能取代成類型參數的類型。</summary>
      <param name="baseTypeConstraint">
        <see cref="T:System.Type" />，要取代型別參數的型別必須繼承它。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">表示屬性的位元組 BLOB。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 為 <see langword="null" />。
-或-
<paramref name="binaryAttribute" /> 為 Null 參考。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">用來定義自訂屬性之 Helper 類別的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary>設定泛型參數的變異數特性和特殊條件約束，例如無參數建構函式條件約束。</summary>
      <param name="genericParameterAttributes">
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，表示泛型型別參數的變異數特性和特殊條件約束。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary>設定類型必須實作才能取代成型別參數的介面。</summary>
      <param name="interfaceConstraints">
        <see cref="T:System.Type" /> 物件的陣列，表示型別必須實作才可取代型別參數的介面。</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary>傳回目前泛型型別參數的字串表示。</summary>
      <returns>包含泛型型別參數名稱的字串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary>不支援不完整的泛型型別參數。</summary>
      <returns>不支援不完整的泛型型別參數。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。</exception>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary>取得目前的泛型型別參數。</summary>
      <returns>目前的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件。</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary>定義及表示動態類別上的方法 (或建構函式)。</summary>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary>擷取此方法的屬性。</summary>
      <returns>唯讀。 擷取此方法的 <see langword="MethodAttributes" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary>傳回方法的呼叫慣例。</summary>
      <returns>唯讀。 方法的呼叫慣例。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary>現在支援這種類型。</summary>
      <returns>不支援。</returns>
      <exception cref="T:System.NotSupportedException">基底類別不支援叫用的方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary>傳回宣告這個方法的類型。</summary>
      <returns>唯讀。 宣告這個方法的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary>設定目前方法的泛型類型參數數目、指定其名稱，並傳回可用來定義其條件約束的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件陣列。</summary>
      <param name="names">由字串組成的陣列，代表泛型類型參數的名稱。</param>
      <returns>由 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件組成的陣列，代表泛型方法的型別參數。</returns>
      <exception cref="T:System.InvalidOperationException">已定義這個方法的泛型型別參數。
-或-
這個方法已經完成。
-或-
已對目前的執行個體呼叫 <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> 為 <see langword="null" />。
-或-
<paramref name="names" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> 是空陣列。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>設定參數屬性和這個方法或這個方法傳回值的參數名稱。 傳回可用於套用自訂屬性的 ParameterBuilder。</summary>
      <param name="position">在參數清單中參數的位置。 第一個參數的參數索引從數字 1 開始，數字 0 表示方法的傳回值。</param>
      <param name="attributes">參數的參數屬性。</param>
      <param name="strParamName">參數名稱。 名稱可以是 null 字串。</param>
      <returns>傳回 <see langword="ParameterBuilder" /> 物件，其表示這個方法的參數或這個方法的傳回值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">這個方法沒有參數。
-或-
<paramref name="position" /> 小於零。
-或-
<paramref name="position" /> 大於方法參數的數目。</exception>
      <exception cref="T:System.InvalidOperationException">先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。
-或-
針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary>判斷指定的物件是否等於這個執行個體。</summary>
      <param name="obj">與這個 <see langword="MethodBuilder" /> 執行個體相互比較的物件。</param>
      <returns>如果 <see langword="true" /> 是 <paramref name="obj" /> 的執行個體，並且與這個物件相等，則為 <see langword="MethodBuilder" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary>傳回方法的基底實作。</summary>
      <returns>這個方法的基底實作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個方法定義的所有自訂屬性。</summary>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找自訂屬性。</param>
      <returns>傳回代表這個方法的所有自訂屬性的物件陣列。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 上呼叫 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回指定類型所識別的自訂屬性。</summary>
      <param name="attributeType">自訂屬性類型。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找自訂屬性。</param>
      <returns>傳回物件陣列，代表這個方法之屬性的類型為 <paramref name="attributeType" />。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 上呼叫 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary>如果它是泛型，則傳回 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列，代表此方法的型別參數。</summary>
      <returns>
        <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列，代表此類型參數，或者如果此方法不是泛型，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary>傳回這個方法。</summary>
      <returns>目前的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 執行個體。</returns>
      <exception cref="T:System.InvalidOperationException">目前的方法不是泛型。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性會傳回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary>取得這個方法的雜湊碼。</summary>
      <returns>這個方法的雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary>針對這個方法傳回具有 64 位元組之預設 Microsoft Intermediate Language (MSIL) 資料流大小的 <see langword="ILGenerator" />。</summary>
      <returns>傳回這個方法的 <see langword="ILGenerator" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">因為其 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，所以此方法不該有主體；例如因為它有 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 旗標。
-或-
此方法是泛型方法，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary>傳回具有指定之 Microsoft Intermediate Language (MSIL) 資料流大小的這個方法的 <see langword="ILGenerator" />。</summary>
      <param name="size">MSIL 資料流的大小，以位元組為單位。</param>
      <returns>傳回這個方法的 <see langword="ILGenerator" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">因為其 <see cref="T:System.Reflection.MethodAttributes" /> 或 <see cref="T:System.Reflection.MethodImplAttributes" /> 旗標，所以此方法不該有主體；例如因為它有 <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" /> 旗標。
-或-
此方法是泛型方法，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary>傳回方法的實作旗標。</summary>
      <returns>傳回方法的實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary>傳回這個方法的參數。</summary>
      <returns>
        <see langword="ParameterInfo" /> 物件的陣列，代表此方法的參數。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see langword="GetParameters" /> 上呼叫 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary>取得或設定布林值，指定在這個方法中的區域變數是否以零起始。 此屬性的預設值為 <see langword="true" />。</summary>
      <returns>如果在這個方法中的區域變數應該以零起始，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。 (Get 或 Set。)</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>動態叫用這個執行個體在指定物件上反映的方法，沿著指定參數，在指定繫結器的條件約束下傳遞。</summary>
      <param name="obj">要在其上叫用指定方法的物件。 如果是靜態方法，則會忽略這個參數。</param>
      <param name="invokeAttr">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <param name="binder">此物件能用來啟用繫結、引數的強制型轉、成員的引動過程，以及透過反映來擷取 MemberInfo 物件等功能。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 如需詳細資訊，請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters">引數清單。 這是引數陣列，其數目、順序和類型與要叫用的方法參數相同。 如果沒有任何參數，則這應該是 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。 (請注意，例如，要將代表 1000 的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.Double" /> 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <returns>傳回包含已叫用方法之傳回值的物件。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> 上呼叫 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>檢查是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType">自訂屬性類型。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找自訂屬性。</param>
      <returns>如果已定義指定的自訂屬性類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 上呼叫 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary>取得可指出此方法是否為泛型方法的值。</summary>
      <returns>如果方法是泛型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary>取得值，指出目前的 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 物件是否代表泛型方法的定義。</summary>
      <returns>如果目前的 <see langword="true" /> 物件代表泛型方法的定義，則為 <see cref="T:System.Reflection.Emit.MethodBuilder" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。 動態組件不支援這個屬性。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。 動態組件不支援這個屬性。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>在所有情況下都擲回 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">在所有情況下。 動態組件不支援這個屬性。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary>傳回使用指定的泛型類型引數，從目前的泛型方法定義建構的泛型方法。</summary>
      <param name="typeArguments">由 <see cref="T:System.Type" /> 物件組成的陣列，代表泛型方法的類型引數。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，代表使用指定的泛型型別引數，從目前的泛型方法定義建構的泛型方法。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary>擷取方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</summary>
      <returns>唯讀。 此方法的內部控制代碼。 使用此控制代碼來存取基礎中繼資料控制代碼。</returns>
      <exception cref="T:System.NotSupportedException">目前不支援這個方法。 使用 <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> 擷取方法並在傳回的 <see cref="P:System.Reflection.MethodBase.MethodHandle" /> 上呼叫 <see cref="T:System.Reflection.MethodInfo" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary>取得所要定義之目前方法中的模組。</summary>
      <returns>
        <see cref="T:System.Reflection.Module" />，其中的成員會以所要定義的目前 <see cref="T:System.Reflection.MemberInfo" /> 表示。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary>擷取這個方法的名稱。</summary>
      <returns>唯讀。 擷取含有這個方法之簡單名稱的字串。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary>取得用於反映中以取得方法的類別。</summary>
      <returns>唯讀。 用來取得這個方法的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary>取得 <see cref="T:System.Reflection.ParameterInfo" /> 物件，這個物件包含方法之傳回型別的相關資訊，例如傳回型別是否具有自訂修飾詞。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 物件，包含傳回型別的相關資訊。</returns>
      <exception cref="T:System.InvalidOperationException">尚未建立宣告類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary>取得這個 <see cref="T:System.Reflection.Emit.MethodBuilder" /> 所表示之方法的傳回型別。</summary>
      <returns>方法的傳回類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary>傳回方法之傳回類型的自訂屬性。</summary>
      <returns>唯讀。 方法之傳回型別的自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">要描述自訂屬性之協助程式的類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary>設定此方法的實作旗標。</summary>
      <param name="attributes">要設定的實作旗標。</param>
      <exception cref="T:System.InvalidOperationException">先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。
-或-
針對於目前的方法，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary>設定方法的參數類型與數量。</summary>
      <param name="parameterTypes">
        <see cref="T:System.Type" /> 物件的陣列，代參數類型。</param>
      <exception cref="T:System.InvalidOperationException">目前的方法是泛型，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary>設定方法的傳回型別。</summary>
      <param name="returnType">表示方法傳回型別的 <see cref="T:System.Type" /> 物件。</param>
      <exception cref="T:System.InvalidOperationException">目前的方法是泛型，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>設定方法簽章，包含傳回型別、參數類型和傳回型別及參數類型之必要與選擇性自訂修飾詞。</summary>
      <param name="returnType">方法的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes">方法的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <exception cref="T:System.InvalidOperationException">目前的方法是泛型，但不是泛型方法定義。 亦即，<see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" /> 屬性是 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" /> 屬性是 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary>傳回此 <see langword="MethodBuilder" /> 執行個體做為字串。</summary>
      <returns>傳回字串，包含此方法的名稱、屬性、方法簽章、例外狀況和本機簽章，後面接著目前的 Microsoft Intermediate Language (MSIL) 串流。</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary>定義及表示動態組件中的模組。</summary>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary>取得定義此 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 執行個體的動態組件。</summary>
      <returns>定義目前動態模組的動態組件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary>完成這個動態模組的全域函式定義和全域資料定義。</summary>
      <exception cref="T:System.InvalidOperationException">這個方法先前已呼叫過。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>定義列舉型別，此列舉型別為實值型別 (Value Type)，具有指定之型別的單一非靜態欄位 (稱為 <paramref name="value__" />)。</summary>
      <param name="name">列舉型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="visibility">列舉型別的型別屬性。 屬性是由 <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" /> 定義的任何位元。</param>
      <param name="underlyingType">列舉型別的基礎型別。 這必須是內建整數型別 (Integer Type)。</param>
      <returns>已定義的列舉型別。</returns>
      <exception cref="T:System.ArgumentException">提供可視性屬性 (Attribute) 以外的屬性。
-或-
具有指定名稱的列舉型別存在於這個模組的父組件中。
-或-
可視性屬性不符合列舉型別範圍。 例如，<see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> 已指定給 <paramref name="visibility" />，但是列舉型別並非巢狀型別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>使用指定的名稱、屬性、呼叫慣例、傳回型別和參數型別，來定義全域方法。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。 <paramref name="attributes" /> 必須包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <returns>已定義的全域方法。</returns>
      <exception cref="T:System.ArgumentException">這個方法不是靜態的。 也就是說，<paramref name="attributes" /> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。
-或-
<see cref="T:System.Type" /> 陣列中的元素為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>使用指定的名稱、屬性、呼叫慣例、傳回型別、傳回型別的自訂修飾詞、參數型別以及參數型別的自訂修飾詞，來定義全域方法。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能含有內嵌 null 字元。</param>
      <param name="attributes">方法的屬性。 <paramref name="attributes" /> 必須包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="requiredReturnTypeCustomModifiers">型別的陣列，表示傳回型別的必要自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="optionalReturnTypeCustomModifiers">型別的陣列，表示傳回型別的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" /> 或 <see cref="T:System.Runtime.CompilerServices.IsBoxed" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <param name="requiredParameterTypeCustomModifiers">類型陣列的陣列。 每一個型別陣列都表示全域方法之對應參數的必要自訂修飾詞。 如果特定引數沒有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果全域方法沒有任何引數，或者沒有任何引數具有必要的自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <param name="optionalParameterTypeCustomModifiers">類型陣列的陣列。 每一個型別陣列都表示對應參數的選擇性自訂修飾詞。 如果特定引數沒有選擇性的自訂修飾詞，請指定 <see langword="null" />，而不要指定型別的陣列。 如果全域方法沒有任何引數，或者沒有任何引數具有選擇性自訂修飾詞，請指定 <see langword="null" />，而不要指定陣列的陣列。</param>
      <returns>已定義的全域方法。</returns>
      <exception cref="T:System.ArgumentException">這個方法不是靜態的。 也就是說，<paramref name="attributes" /> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。
-或-
<see cref="T:System.Type" /> 陣列中的元素為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已呼叫 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> 方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>使用指定的名稱、屬性、傳回型別和參數型別，來定義全域方法。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。 <paramref name="attributes" /> 必須包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <returns>已定義的全域方法。</returns>
      <exception cref="T:System.ArgumentException">這個方法不是靜態的。 也就是說，<paramref name="attributes" /> 不包括 <see cref="F:System.Reflection.MethodAttributes.Static" />。
-或-
<paramref name="name" /> 的長度為零。
-或-
<see cref="T:System.Type" /> 陣列中的元素為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>在可攜式執行檔 (PE) 的 .sdata 區段中定義初始化的資料欄位。</summary>
      <param name="name">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="data">資料的二進位大型物件 (BLOB)。</param>
      <param name="attributes">欄位的屬性。 預設為 <see langword="Static" />。</param>
      <returns>要參考資料的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
<paramref name="data" /> 的大小是小於等於零，或大於等於 0x3f0000。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>使用指定的名稱、定義方法的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回型別、方法的參數型別和 <see langword="PInvoke" /> 旗標，來定義 <see langword="PInvoke" /> 方法。</summary>
      <param name="name">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <param name="nativeCallConv">原生呼叫慣例。</param>
      <param name="nativeCharSet">方法的原生字元集。</param>
      <returns>已定義的 <see langword="PInvoke" /> 方法。</returns>
      <exception cref="T:System.ArgumentException">方法不是靜態的，或者包含型別 (Containing Type) 是介面。
-或-
這是抽象方法。
-或-
方法之前已定義過。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">包含型別先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 來建立。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>使用指定的名稱、定義方法的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回型別、方法的參數型別和 <see langword="PInvoke" /> 旗標，來定義 <see langword="PInvoke" /> 方法。</summary>
      <param name="name">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="entryName">DLL 中的進入點名稱。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <param name="nativeCallConv">原生呼叫慣例。</param>
      <param name="nativeCharSet">方法的原生字元集。</param>
      <returns>已定義的 <see langword="PInvoke" /> 方法。</returns>
      <exception cref="T:System.ArgumentException">方法不是靜態的，或者如果包含型別是介面、方法是抽象的或方法是先前定義的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">包含型別先前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 來建立。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary>在這個模組中使用指定的名稱來建構私用型別的 <see langword="TypeBuilder" />。</summary>
      <param name="name">型別的完整路徑，包含命名空間。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <returns>具有指定之名稱的私用型別。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary>建構 <see langword="TypeBuilder" /> 需指定型別名稱和型別屬性。</summary>
      <param name="name">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">定義型別的屬性。</param>
      <returns>使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>建構 <see langword="TypeBuilder" /> 需指定型別名稱、其屬性和定義型別所擴充的型別。</summary>
      <param name="name">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">屬性，與型別相關聯。</param>
      <param name="parent">型別，定義型別所擴充的。</param>
      <returns>使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別和型別的總共大小。</summary>
      <param name="name">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">定義型別的屬性。</param>
      <param name="parent">型別，定義型別所擴充的。</param>
      <param name="typesize">型別的總大小。</param>
      <returns>
        <see langword="TypeBuilder" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別和型別的封裝大小。</summary>
      <param name="name">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">定義型別的屬性。</param>
      <param name="parent">型別，定義型別所擴充的。</param>
      <param name="packsize">類型的封裝大小。</param>
      <returns>
        <see langword="TypeBuilder" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別、定義型別的封裝大小和定義型別的總共大小。</summary>
      <param name="name">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">定義型別的屬性。</param>
      <param name="parent">型別，定義型別所擴充的。</param>
      <param name="packingSize">類型的封裝大小。</param>
      <param name="typesize">型別的總大小。</param>
      <returns>使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>建構 <see langword="TypeBuilder" /> 需指定型別名稱、屬性、定義型別所擴充的型別和定義型別實作的介面。</summary>
      <param name="name">型別的完整路徑。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">屬性，與型別相關聯。</param>
      <param name="parent">型別，定義型別所擴充的。</param>
      <param name="interfaces">介面清單，為型別所實作的。</param>
      <returns>使用所有要求的屬性建立的 <see langword="TypeBuilder" />。</returns>
      <exception cref="T:System.ArgumentException">具有指定名稱的型別存在於這個模組的父組件中。
-或-
巢狀型別 (Nested Type) 屬性 (Attribute) 要設定在沒有巢狀化的型別上。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>在可攜式執行檔 (PE) 的 .sdata 區段中定義未初始化的資料欄位。</summary>
      <param name="name">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="size">資料欄位的大小。</param>
      <param name="attributes">欄位的屬性。</param>
      <returns>要參考資料的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
<paramref name="size" /> 小於或等於零，或者大於或等於 0x003f0000。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已呼叫過 <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary>傳回值，這個值表示這個執行個體是否等於指定的物件。</summary>
      <param name="obj">與這個執行個體相比較的物件，或 <see langword="null" />。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary>取得 <see langword="String" />，表示這個模組的完整名稱和路徑。</summary>
      <returns>完整的模組名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>傳回陣列類別上的具名方法。</summary>
      <param name="arrayClass">陣列類別。</param>
      <param name="methodName">陣列類別上方法的名稱。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <returns>陣列類別上的具名方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayClass" /> 不是陣列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayClass" /> 或 <paramref name="methodName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回已套用至目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 的所有自訂屬性。</summary>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>陣列，其中包含自訂屬性；如果沒有屬性，則陣列是空的。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回已套用至目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 的所有自訂屬性，以及衍生自指定屬性類型的所有自訂屬性。</summary>
      <param name="attributeType">從中衍生屬性的基底類型。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>陣列，包含衍生自 <paramref name="attributeType" /> 任何層級的自訂屬性，如果沒有這類屬性則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary>傳回已套用至目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 之屬性的相關資訊，表示為 <see cref="T:System.Reflection.CustomAttributeData" /> 物件。</summary>
      <returns>
        <see cref="T:System.Reflection.CustomAttributeData" /> 物件的泛型清單，表示已套用至目前模組之屬性的資料。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回可攜式執行檔 (PE) 的 .sdata 區域中所定義、有指定之名稱和繫結屬性的模組層級欄位。</summary>
      <param name="name">欄位名稱。</param>
      <param name="bindingAttr">用來控制搜尋的 <see langword="BindingFlags" /> 位元旗標組合。</param>
      <returns>有指定之名稱和繫結屬性的欄位，如果欄位不存在，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回可攜式執行檔 (PE) 的 .sdata 區域中所定義、符合指定之繫結旗標的所有欄位。</summary>
      <param name="bindingFlags">用來控制搜尋的 <see langword="BindingFlags" /> 位元旗標組合。</param>
      <returns>符合指定之旗標的欄位陣列，如果這類欄位不存在則為空陣列。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>傳回為目前 <see cref="T:System.Reflection.Emit.ModuleBuilder" /> 在模組層級上已定義而且符合指定之繫結旗標的所有方法。</summary>
      <param name="bindingFlags">用來控制搜尋的 <see langword="BindingFlags" /> 位元旗標組合。</param>
      <returns>陣列，包含符合 <paramref name="bindingFlags" /> 的所有模組層級方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary>取得值組，表示模組中的程式碼性質，以及模組的目標平台。</summary>
      <param name="peKind">這個方法會傳回 <see cref="T:System.Reflection.PortableExecutableKinds" /> 值的組合，表示模組中的程式碼性質。</param>
      <param name="machine">這個方法會傳回其中一個 <see cref="T:System.Reflection.ImageFileMachine" /> 值，表示模組的目標平台。</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary>取得在模組中定義的具名型別。</summary>
      <param name="className">要取得的 <see cref="T:System.Type" /> 名稱。</param>
      <returns>如果此模組中已定義要求的型別則為該型別，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 的長度為零或大於 1023。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">要求的 <see cref="T:System.Type" /> 是非公用的，而且呼叫端並沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 來反映目前組件之外的非公用物件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">在載入 <see cref="T:System.Type" /> 時發生錯誤。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary>取得模組中定義的具名型別，選擇性地忽略型別名稱的大小寫。</summary>
      <param name="className">要取得的 <see cref="T:System.Type" /> 名稱。</param>
      <param name="ignoreCase">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <returns>如果此模組中已定義要求的型別則為該型別，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 的長度為零或大於 1023。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">要求的 <see cref="T:System.Type" /> 是非公用的，而且呼叫端並沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 來反映目前組件之外的非公用物件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>取得模組中定義的具名型別，選擇性地忽略型別名稱的大小寫。 如果找不到型別，則是選擇性的擲回例外狀況。</summary>
      <param name="className">要取得的 <see cref="T:System.Type" /> 名稱。</param>
      <param name="throwOnError">
        <see langword="true" /> 表示找不到該類型時擲回例外狀況，而 <see langword="false" /> 則表示傳回 <see langword="null" />。</param>
      <param name="ignoreCase">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <returns>如果此模組中已宣告指定的型別則為該型別，否則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="className" /> 的長度為零或大於 1023。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="className" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">要求的 <see cref="T:System.Type" /> 是非公用的，而且呼叫端並沒有 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 來反映目前組件之外的非公用物件。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">叫用類別初始設定式並擲回例外狀況。</exception>
      <exception cref="T:System.TypeLoadException">
        <paramref name="throwOnError" /> 為 <see langword="true" />，且找不到指定的型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary>傳回在這個模組中定義的所有類別。</summary>
      <returns>陣列，含有在這個執行個體反映的模組中定義的型別。</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">無法載入模組中的一或多個類別。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的使用權限。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>傳回值，這個值表示指定的屬性型別是否已套用至此模組。</summary>
      <param name="attributeType">所要測試之自訂屬性的型別。</param>
      <param name="inherit">這個類型的物件會忽略這個引數。</param>
      <returns>如果一個或多個 <paramref name="attributeType" /> 的執行個體已套用至這個模組，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="attributeType" /> 不是執行階段所提供的 <see cref="T:System.Type" /> 物件。 例如，<paramref name="attributeType" /> 是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary>取得值，指出物件是否為資源。</summary>
      <returns>如果物件為資源，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary>取得中繼資料流的版本。</summary>
      <returns>32 位元的整數，表示中繼資料流的版本。 高順序的兩位元表示主要的版本號碼，而低順序的兩位元則表示次要的版本號碼。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary>取得語彙基元，可識別中繼資料中的目前動態模組。</summary>
      <returns>整數語彙基元，可識別中繼資料中的目前模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary>取得可用來區別兩個模組版本的全域唯一識別碼 (UUID)。</summary>
      <returns>
        <see cref="T:System.Guid" />，可用來區別兩個模組版本。</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary>表示這是記憶體中模組的字串。</summary>
      <returns>表示這是記憶體中模組的文字。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的欄位。</summary>
      <param name="metadataToken">識別模組內欄位的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Reflection.FieldInfo" /> 物件，表示指定之中繼資料語彙基元所識別的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組範圍中不是欄位的語彙基元。
-或-
<paramref name="metadataToken" /> 可識別欄位，而此欄位的父代 <see langword="TypeSpec" /> 具有包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的必要泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別或成員。</summary>
      <param name="metadataToken">識別模組內型別或成員的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> 物件，表示指定之中繼資料語彙基元所識別的型別或成員。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別或成員的語彙基元。
-或-
<paramref name="metadataToken" /> 是 <see langword="MethodSpec" /> 或 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的必要泛型型別引數。
-或-
<paramref name="metadataToken" /> 識別屬性或事件。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的方法或建構函式。</summary>
      <param name="metadataToken">識別模組內方法或建構函式的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Reflection.MethodBase" /> 物件，表示指定之中繼資料語彙基元所識別的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是方法或建構函式的語彙基元。
-或-
<paramref name="metadataToken" /> 是 <see langword="MethodSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary>傳回中繼資料語彙基元所識別的簽章 Blob (二進位大型物件)。</summary>
      <param name="metadataToken">識別模組內簽章的中繼資料語彙基元。</param>
      <returns>位元組的陣列，表示簽章 Blob。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" />在目前模組的範圍中不是有效的 <see langword="MemberRef" />、<see langword="MethodDef" />、<see langword="TypeSpec" />、簽章或 <see langword="FieldDef" /> 語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary>傳回指定之中繼資料語彙基元所識別的字串。</summary>
      <param name="metadataToken">中繼資料語彙基元，可識別模組字串堆積中的字串。</param>
      <returns>
        <see cref="T:System.String" />，包含中繼資料字串堆積中的字串值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組範圍中不是字串的語彙基元。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary>以指定之泛型型別參數所定義的內容，傳回指定之中繼資料語彙基元所識別的型別。</summary>
      <param name="metadataToken">識別模組內型別的中繼資料語彙基元。</param>
      <param name="genericTypeArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之型別的泛型型別引數，如果該型別不是泛型，則為 <see langword="null" />。</param>
      <param name="genericMethodArguments">
        <see cref="T:System.Type" /> 物件的陣列，表示語彙基元在範圍中之方法的泛型型別引數，如果該方法不是泛型，則為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，表示指定之中繼資料語彙基元所識別的型別。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="metadataToken" /> 在目前模組的範圍中不是型別的語彙基元。
-或-
<paramref name="metadataToken" /> 是 <see langword="TypeSpec" />，其簽章包含項目型別 <see langword="var" /> (泛型型別的型別參數) 或 <see langword="mvar" /> (泛型方法的型別參數)，且未提供 <paramref name="genericTypeArguments" /> 和 <paramref name="genericMethodArguments" /> 其一或兩者的泛型型別引數。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="metadataToken" /> 在目前模組的範圍中是無效的語彙基元。</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary>取得表示動態模組名稱的字串。</summary>
      <returns>動態模組的名稱。</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>將自訂屬性套用至這個模組，方式是使用指定的二進位大型物件 (BLOB) 表示該屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">表示屬性的位元組 BLOB。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器，將自訂屬性套用至這個模組。</summary>
      <param name="customBuilder">用來指定所要套用的自訂屬性的 Helper 類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary>定義型別的屬性。</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>加入其中一個與這個屬性相關聯的其他方法。</summary>
      <param name="mdBuilder">表示另一個方法的 <see langword="MethodBuilder" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary>取得這個屬性 (Property) 的屬性 (Attribute)。</summary>
      <returns>這個屬性 (Property) 的屬性 (Attribute)。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary>取得值，指出是否可讀取屬性。</summary>
      <returns>如果可讀取這個屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary>取得值，指出是否可寫入屬性。</summary>
      <returns>如果可寫入屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary>取得宣告這個成員的類別。</summary>
      <returns>宣告這個成員之類別的 <see langword="Type" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary>傳回這個屬性上的公用 (Public) 和非公用 <see langword="get" /> 和 <see langword="set" /> 存取子的陣列。</summary>
      <param name="nonPublic">指示非公用方法是否應傳回到 <see langword="MethodInfo" /> 陣列中。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see langword="MethodInfo" /> 型別陣列 (包含相符的公用或非公用存取子) 或空陣列 (如果這個屬性上不存在相符的存取子)。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回這個屬性 (Property) 的所有自訂屬性 (Attribute) 陣列。</summary>
      <param name="inherit">如果為 <see langword="true" />，則沿著這個屬性 (Property) 的繼承 (Inheritance) 鏈結往上尋找自訂屬性 (Attribute)</param>
      <returns>所有自訂屬性的陣列。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回由 <see cref="T:System.Type" /> 識別的自訂屬性陣列。</summary>
      <param name="attributeType">由型別識別的自訂屬性陣列。</param>
      <param name="inherit">如果為 <see langword="true" />，則沿著這個屬性 (Property) 的繼承鍊結往上尋找自訂屬性 (Attribute)。</param>
      <returns>在這個反映成員上定義的自訂屬性陣列，或 <see langword="null" /> (如果這個成員上沒有定義任何屬性)。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary>傳回這個屬性的公用和非公用 get 存取子。</summary>
      <param name="nonPublic">表示是否應傳回非公用 get 存取子。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see langword="MethodInfo" /> 物件，表示這個屬性的 get 存取子 (如果 <paramref name="nonPublic" /> 為 <see langword="true" />)。 如果 <paramref name="nonPublic" /> 為 <see langword="null" />，並且 get 存取子為非公用，或者，如果 <paramref name="nonPublic" /> 為 <see langword="false" />，但 get 存取子不存在，則傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary>傳回屬性的所有索引參數陣列。</summary>
      <returns>
        <see langword="ParameterInfo" /> 類型的陣列，包含索引的參數。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary>傳回這個屬性的 set 存取子。</summary>
      <param name="nonPublic">指出若為非公用存取子，是否應該傳回。 如果非公用方法要包含在內，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>這個屬性的 <see langword="Set" /> 方法或 <see langword="null" />，如下表所示。
  值 
  條件 
  <see cref="T:System.Reflection.MethodInfo" /> 物件，表示這個屬性的 Set 方法。  
  
  set 存取子為公用。  
  
 <paramref name="nonPublic" /> 為 true，可傳回非公用方法。  
  
  null 
 <paramref name="nonPublic" /> 為 true，但屬性為唯讀。  
  
 <paramref name="nonPublic" /> 為 false，且 set 存取子為非公用。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary>藉由呼叫屬性的 getter 方法，取得索引屬性的值。</summary>
      <param name="obj">其屬性值將被傳回的物件。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <returns>指定的索引屬性值。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>取得屬性值，其具有指定繫結、索引和 <see langword="CultureInfo" />。</summary>
      <param name="obj">其屬性值將被傳回的物件。</param>
      <param name="invokeAttr">引動過程屬性。 這必須是 <see langword="BindingFlags" /> 中的位元旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 如果將要叫用靜態成員，則必須設定 <see langword="Static" /> 的 <see langword="BindingFlags" /> 旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 物件，表示資源將要為其當地語系化的文化特性。 請注意，如果並未為這個文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 <see langword="CultureInfo.Parent" /> 方法。 如果這個值為 <see langword="null" />，則 <see langword="CultureInfo" /> 是取自 <see langword="CultureInfo.CurrentUICulture" /> 屬性。</param>
      <returns>
        <paramref name="obj" /> 的屬性值。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>指出 <paramref name="attributeType" /> 的一或多個執行個體是否定義在這個屬性上。</summary>
      <param name="attributeType">套用自訂屬性的 <see langword="Type" /> 物件。</param>
      <param name="inherit">指定是否要沿著這個屬性 (Property) 的繼承鏈結，往上尋找自訂屬性 (Attribute)。</param>
      <returns>如果 <paramref name="attributeType" /> 的一或多個執行個體定義在這個屬性上，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary>取得用於定義型別的模組，該型別宣告目前的屬性。</summary>
      <returns>在 <see cref="T:System.Reflection.Module" /> 中定義型別，該型別宣告目前的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary>取得這個成員的名稱。</summary>
      <returns>含有這個成員名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary>取得這個屬性的欄位型別。</summary>
      <returns>這個屬性的型別。</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary>取得類別物件，是用來取得這個 <see langword="MemberInfo" /> 的執行個體。</summary>
      <returns>
        <see langword="Type" /> 物件，用來取得這個 <see langword="MemberInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary>設定這個屬性的預設值。</summary>
      <param name="defaultValue">這個屬性的預設值。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
      <exception cref="T:System.ArgumentException">這個屬性並不是其中一個支援型別。
-或-
<paramref name="defaultValue" /> 的型別不符合屬性的型別。
-或-
屬性的型別是 <see cref="T:System.Object" /> 或其他參考型別、<paramref name="defaultValue" /> 不是 <see langword="null" />，而且無法將此值指派給參考型別。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">如果 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>設定會取得屬性值的方法。</summary>
      <param name="mdBuilder">
        <see langword="MethodBuilder" /> 物件，表示取得屬性值的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary>設定會設定屬性值的方法。</summary>
      <param name="mdBuilder">
        <see langword="MethodBuilder" /> 物件，表示設定屬性值的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mdBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 已在封入型別上被呼叫。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary>使用索引屬性的選擇性索引值設定屬性值。</summary>
      <param name="obj">將設定其屬性值的物件。</param>
      <param name="value">這個屬性的新值。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>設定指定物件的屬性值為指定值。</summary>
      <param name="obj">其屬性值將被傳回的物件。</param>
      <param name="value">這個屬性的新值。</param>
      <param name="invokeAttr">引動過程屬性。 這必須是 <see langword="BindingFlags" /> 中的位元旗標：<see langword="InvokeMethod" />、<see langword="CreateInstance" />、<see langword="Static" />、<see langword="GetField" />、<see langword="SetField" />、<see langword="GetProperty" /> 或 <see langword="SetProperty" />。 您必須指定適當的引動過程屬性。 如果將要叫用靜態成員，則必須設定 <see langword="Static" /> 的 <see langword="BindingFlags" /> 旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。</param>
      <param name="index">索引屬性的選擇性索引值。 非索引屬性的這個值應為 <see langword="null" />。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 物件，表示資源將要為其當地語系化的文化特性。 請注意，如果並未為這個文化特性將資源當地語系化，則將在搜尋相符項目時持續呼叫 <see langword="CultureInfo.Parent" /> 方法。 如果這個值為 <see langword="null" />，則 <see langword="CultureInfo" /> 是取自 <see langword="CultureInfo.CurrentUICulture" /> 屬性。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary>在執行階段定義和建立類別的新執行個體。</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary>加入這個類型所實作的介面。</summary>
      <param name="interfaceType">這個類型所實作的介面。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary>擷取包含這個類型定義的動態組件。</summary>
      <returns>唯讀。 擷取包含這個類型定義的動態組件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary>傳回這個類型的完整名稱，該名稱是由組件的顯示名稱所限定。</summary>
      <returns>唯讀。 這個類型的完整名稱，該名稱是由組件的顯示名稱所限定。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary>擷取這個類型的基底類型。</summary>
      <returns>唯讀。 擷取這個類型的基底類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary>建立這個類別的 <see cref="T:System.Type" /> 物件。 定義類別上的欄位和方法之後，呼叫 <see langword="CreateType" /> 以載入其 <see langword="Type" /> 物件。</summary>
      <returns>傳回這個類別的新 <see cref="T:System.Type" /> 物件。</returns>
      <exception cref="T:System.InvalidOperationException">尚未建立封入類型。
-或-
這個類型為非抽象，而且包含抽象方法。
-或-
這個類型不是抽象類別或介面，而且包含沒有方法主體的方法。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Reflection.Emit.ILGenerator" /> 中的錯誤標籤內容：您已定義標籤，但未呼叫 <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)" />。</exception>
      <exception cref="T:System.NotSupportedException">這個類型包含無效的 Microsoft Intermediate Language (MSIL) 程式碼。
-或-
使用 1 個位元組位移指定分支目標，但目標與分支的距離大於 127 個位元組。</exception>
      <exception cref="T:System.TypeLoadException">無法載入這個類型。 例如，其包含的 <see langword="static" /> 方法具有呼叫慣例 <see cref="F:System.Reflection.CallingConventions.HasThis" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary>取得代表這個類型的 <see cref="T:System.Reflection.TypeInfo" /> 物件。</summary>
      <returns>代表這個類型的物件。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary>取得宣告目前泛型型別參數的方法。</summary>
      <returns>如果目前的類型是泛型類型參數，<see cref="T:System.Reflection.MethodBase" /> 表示宣告目前類型的方法；否則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary>傳回宣告這個類型的類型。</summary>
      <returns>唯讀。 宣告這個類型的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary>將新的建構函式加入此類型，並指定屬性和簽章。</summary>
      <param name="attributes">建構函式的屬性。</param>
      <param name="callingConvention">建構函式的呼叫慣例。</param>
      <param name="parameterTypes">建構函式的參數類型。</param>
      <returns>定義的建構函式。</returns>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary>將新的建構函式加入此類型，並指定屬性、簽章和自訂修飾詞。</summary>
      <param name="attributes">建構函式的屬性。</param>
      <param name="callingConvention">建構函式的呼叫慣例。</param>
      <param name="parameterTypes">建構函式的參數類型。</param>
      <param name="requiredCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="optionalCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <returns>定義的建構函式。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="requiredCustomModifiers" /> 或 <paramref name="optionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary>定義無參數建構函式。 這裡所定義建構函式只會呼叫父代的無參數建構函式。</summary>
      <param name="attributes">表示要套用至建構函式之屬性的 <see langword="MethodAttributes" /> 物件。</param>
      <returns>傳回建構函式。</returns>
      <exception cref="T:System.NotSupportedException">父類型 (基底類型) 沒有無參數建構函式。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary>將新事件加入此類型，並指定其名稱、屬性和事件類型。</summary>
      <param name="name">事件的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">事件的屬性。</param>
      <param name="eventtype">事件的類型。</param>
      <returns>定義的事件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="eventtype" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary>將新欄位加入類型，指定其名稱、屬性和欄位類型。</summary>
      <param name="fieldName">欄位的名稱。 <paramref name="fieldName" /> 不能包含內嵌的 null。</param>
      <param name="type">欄位的類型</param>
      <param name="attributes">欄位的屬性。</param>
      <returns>定義的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> 的長度為零。
-或-
<paramref name="type" /> 為 System.Void。
-或-
為這個欄位的父類別指定了總大小。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary>將新欄位加入此類型，並指定其名稱、屬性、欄位類型和自訂修飾詞。</summary>
      <param name="fieldName">欄位的名稱。 <paramref name="fieldName" /> 不能包含內嵌的 null。</param>
      <param name="type">欄位的類型</param>
      <param name="requiredCustomModifiers">類型陣列，代表欄位的必要自訂修飾詞，例如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</param>
      <param name="optionalCustomModifiers">類型陣列，代表欄位的選擇性自訂修飾詞，例如 <see cref="T:Microsoft.VisualC.IsConstModifier" />。</param>
      <param name="attributes">欄位的屬性。</param>
      <returns>定義的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fieldName" /> 的長度為零。
-或-
<paramref name="type" /> 為 System.Void。
-或-
為這個欄位的父類別指定了總大小。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fieldName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary>定義目前類型的泛型類型參數，即指定其數目和名稱，並傳回可設定其條件約束的 <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列。</summary>
      <param name="names">泛型類型參數的名稱陣列。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> 物件的陣列可用來定義目前類型的泛型型別參數的條件約束。</returns>
      <exception cref="T:System.InvalidOperationException">已定義這個類型的泛型型別參數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="names" /> 為 <see langword="null" />。
-或-
<paramref name="names" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> 是空陣列。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary>在可攜式執行檔 (PE) 的 .sdata 區段中定義初始化資料欄位。</summary>
      <param name="name">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="data">資料的 blob。</param>
      <param name="attributes">欄位的屬性。</param>
      <returns>要參考資料的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
資料的大小小於或等於零，或者大於或等於 0x3f0000。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已呼叫過 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary>將新方法加入此類型，並指定其名稱和方法屬性。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary>將新方法加入類型，並指定其名稱、方法屬性和呼叫慣例。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>將新方法加入此類型，含指定名稱、方法屬性、呼叫慣例和方法簽章。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法的參數類型。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 代表新定義的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>將新方法加入此類型，含指定名稱、方法屬性、呼叫慣例、方法簽章和自訂修飾詞。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes">方法的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" /> 物件，代表新加入的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。
-或-
<paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary>將新方法加入此類型中，含指定名稱、方法屬性和方法簽章。</summary>
      <param name="name">方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法的參數類型。</param>
      <returns>已定義的方法。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
這個方法的父類型是介面，且這個方法不是虛擬 (在 Visual Basic 中為 <see langword="Overridable" />)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary>指定實作給定方法宣告的給定方法主體，可能會使用其他名稱。</summary>
      <param name="methodInfoBody">要使用的方法主體。 應該是 <see langword="MethodBuilder" /> 物件。</param>
      <param name="methodInfoDeclaration">要使用其宣告的方法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodInfoBody" /> 不屬於這個類別。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="methodInfoBody" /> 或 <paramref name="methodInfoDeclaration" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
<paramref name="methodInfoBody" /> 的宣告類型不是 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 所表示的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary>定義巢狀類型，並指定其名稱。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <returns>定義的巢狀型別。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零或大於 1023。
-或-
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary>定義巢狀類型，並指定其名稱及屬性。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">類型的屬性。</param>
      <returns>定義的巢狀型別。</returns>
      <exception cref="T:System.ArgumentException">未指定巢狀屬性。
-或-
這個類型已密封。
-或-
這個型別是陣列。
-或-
這個型別是介面，但巢狀型別不是介面。
-或-
<paramref name="name" /> 的長度為零或大於 1023。
-或-
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary>定義巢狀類型，並指定其名稱、屬性和擴充的類型。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">類型的屬性。</param>
      <param name="parent">巢狀型別所擴充的型別。</param>
      <returns>定義的巢狀型別。</returns>
      <exception cref="T:System.ArgumentException">未指定巢狀屬性。
-或-
這個類型已密封。
-或-
這個型別是陣列。
-或-
這個型別是介面，但巢狀型別不是介面。
-或-
<paramref name="name" /> 的長度為零或大於 1023。
-或-
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary>定義巢狀型別，指定其名稱、屬性、型別的總大小及其擴充的型別。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">類型的屬性。</param>
      <param name="parent">巢狀型別所擴充的型別。</param>
      <param name="typeSize">型別的總大小。</param>
      <returns>定義的巢狀型別。</returns>
      <exception cref="T:System.ArgumentException">未指定巢狀屬性。
-或-
這個類型已密封。
-或-
這個型別是陣列。
-或-
這個型別是介面，但巢狀型別不是介面。
-或-
<paramref name="name" /> 的長度為零或大於 1023。
-或-
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary>定義巢狀類型，並指定其名稱、屬性、擴充的類型和封裝大小。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">類型的屬性。</param>
      <param name="parent">巢狀型別所擴充的型別。</param>
      <param name="packSize">類型的封裝大小。</param>
      <returns>定義的巢狀型別。</returns>
      <exception cref="T:System.ArgumentException">未指定巢狀屬性。
-或-
這個類型已密封。
-或-
這個型別是陣列。
-或-
這個型別是介面，但巢狀型別不是介面。
-或-
<paramref name="name" /> 的長度為零或大於 1023。
-或-
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary>定義巢狀類型，並指定其名稱、屬性、大小和擴充的類型。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null 值。</param>
      <param name="attr">類型的屬性。</param>
      <param name="parent">巢狀型別所擴充的型別。</param>
      <param name="packSize">類型的封裝大小。</param>
      <param name="typeSize">型別的總大小。</param>
      <returns>定義的巢狀型別。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary>定義巢狀類型，並指定其名稱、屬性、擴充的類型和實作的介面。</summary>
      <param name="name">型別的簡短名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attr">類型的屬性。</param>
      <param name="parent">巢狀型別所擴充的型別。</param>
      <param name="interfaces">巢狀類型實作的介面。</param>
      <returns>定義的巢狀型別。</returns>
      <exception cref="T:System.ArgumentException">未指定巢狀屬性。
-或-
這個類型已密封。
-或-
這個型別是陣列。
-或-
這個型別是介面，但巢狀型別不是介面。
-或-
<paramref name="name" /> 的長度為零或大於 1023。
-或-
這項作業會以目前組件中的重複 <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> 來建立類型。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="interfaces" /> 陣列的項目是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>定義 <see langword="PInvoke" /> 方法指定名稱、方法定義所在的 DLL 名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型和 <see langword="PInvoke" /> 旗標。</summary>
      <param name="name">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <param name="nativeCallConv">原生呼叫慣例。</param>
      <param name="nativeCharSet">方法的原生字元集。</param>
      <returns>已定義的 <see langword="PInvoke" /> 方法。</returns>
      <exception cref="T:System.ArgumentException">這個方法不是靜態的。
-或-
父類型是介面。
-或-
這是抽象方法。
-或-
方法之前已定義過。
-或-
<paramref name="name" /> 或 <paramref name="dllName" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 或 <paramref name="dllName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary>定義 <see langword="PInvoke" /> 方法指定名稱、方法定義所在的 DLL 名稱、進入點名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型和 <see langword="PInvoke" /> 旗標。</summary>
      <param name="name">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="entryName">DLL 中的進入點名稱。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <param name="nativeCallConv">原生呼叫慣例。</param>
      <param name="nativeCharSet">方法的原生字元集。</param>
      <returns>已定義的 <see langword="PInvoke" /> 方法。</returns>
      <exception cref="T:System.ArgumentException">這個方法不是靜態的。
-或-
父類型是介面。
-或-
這是抽象方法。
-或-
方法之前已定義過。
-或-
<paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />
        <paramref name="dllName" /> 或 <paramref name="entryName" /> 是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][])">
      <summary>定義 <see langword="PInvoke" /> 方法，方法是指定其名稱、方法定義所在的 DLL 名稱、進入點名稱、方法的屬性、方法的呼叫慣例、方法的傳回類型、方法的參數類型、<see langword="PInvoke" /> 旗標和這些參數與傳回類型的自訂修飾詞。</summary>
      <param name="name">
        <see langword="PInvoke" /> 方法的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="dllName">
        <see langword="PInvoke" /> 方法定義所在的 DLL 名稱。</param>
      <param name="parameterTypeOptionalCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="nativeCallConv">原生呼叫慣例。</param>
      <param name="nativeCharSet">方法的原生字元集。</param>
      <param name="entryName">DLL 中的進入點名稱。</param>
      <param name="attributes">方法的屬性。</param>
      <param name="callingConvention">方法的呼叫慣例。</param>
      <param name="returnType">方法的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers">一種類型陣列，用來為方法的傳回類型指出必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers">一種類型陣列，用來為方法的傳回類型指出選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes">方法參數的類型。</param>
      <param name="parameterTypeRequiredCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <returns>
        <see cref="T:System.Reflection.Emit.MethodBuilder" />，代表定義的 <see langword="PInvoke" /> 方法。</returns>
      <exception cref="T:System.ArgumentException">這個方法不是靜態的。
-或-
父類型是介面。
-或-
這是抽象方法。
-或-
方法之前已定義過。
-或-
<paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 的長度為零。
-或-
<paramref name="parameterTypeRequiredCustomModifiers" /> 或 <paramref name="parameterTypeOptionalCustomModifiers" /> 的大小不等於 <paramref name="parameterTypes" /> 的大小。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />、<paramref name="dllName" /> 或 <paramref name="entryName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary>將新屬性加入具有指定名稱、屬性、呼叫慣例和屬性簽章的類型。</summary>
      <param name="name">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="callingConvention">屬性存取子的呼叫慣例。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="parameterTypes">屬性的參數類型。</param>
      <returns>定義的屬性。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>將新屬性加入具有指定名稱、呼叫慣例、屬性簽章和自訂修飾詞的類型。</summary>
      <param name="name">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="callingConvention">屬性存取子的呼叫慣例。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers">代表該屬性傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers">代表該屬性傳回型別之選擇性自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes">屬性的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <returns>定義的屬性。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary>以指定名稱和屬性簽章將新屬性加入此類型。</summary>
      <param name="name">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="parameterTypes">屬性的參數類型。</param>
      <returns>定義的屬性。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary>將新屬性加入具有指定名稱、屬性簽章和自訂修飾詞的類型。</summary>
      <param name="name">屬性的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="attributes">這個屬性 (Property) 的屬性 (Attribute)。</param>
      <param name="returnType">屬性的傳回類型。</param>
      <param name="returnTypeRequiredCustomModifiers">代表該屬性傳回類型之必要自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有必要的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="returnTypeOptionalCustomModifiers">代表該屬性傳回型別之選擇性自訂修飾詞的類型陣列，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果傳回類型沒有選擇性的自訂修飾詞，則指定 <see langword="null" />。</param>
      <param name="parameterTypes">屬性的參數類型。</param>
      <param name="parameterTypeRequiredCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數必要的自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有必要的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <param name="parameterTypeOptionalCustomModifiers">類型陣列的陣列。 每個類型陣列都代表其對應參數的選擇性自訂修飾詞，例如 <see cref="T:System.Runtime.CompilerServices.IsConst" />。 如果特定的參數沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非類型陣列。 如果這些參數都沒有選擇性的自訂修飾詞，則指定 <see langword="null" />，而非陣列的陣列。</param>
      <returns>定義的屬性。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 <see langword="null" />
-或-
<paramref name="parameterTypes" /> 陣列的所有項目都是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary>定義這個類型的初始設定式。</summary>
      <returns>傳回類型初始設定式。</returns>
      <exception cref="T:System.InvalidOperationException">之前已使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立包含類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary>在可攜式執行檔 (PE) 的 <see langword=".sdata" /> 區段中定義未初始化的資料欄位。</summary>
      <param name="name">用來參考資料的名稱。 <paramref name="name" /> 不能包含內嵌的 null。</param>
      <param name="size">資料欄位的大小。</param>
      <param name="attributes">欄位的屬性。</param>
      <returns>要參考資料的欄位。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 的長度為零。
-或-
<paramref name="size" /> 小於或等於零，或者大於或等於 0x003f0000。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary>擷取這個類型的完整路徑。</summary>
      <returns>唯讀。 擷取這個類型的完整路徑。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary>取得值，指出目前泛型類型參數的共變數與特殊條件約束。</summary>
      <returns>
        <see cref="T:System.Reflection.GenericParameterAttributes" /> 值的位元組合，描述目前泛型類型參數的共變數和特殊條件約束。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary>取得型別參數在宣告參數的泛型類型之型別參數清單中的位置。</summary>
      <returns>當目前 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件表示泛型類型參數時，在宣告參數的泛型類型之類型參數清單中，類型參數的位置：否則為未定義。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary>傳回指定建構泛型類型的建構函式，其對應於泛型類型定義的指定建構函式。</summary>
      <param name="type">傳回的是建構泛型類型的建構函式。</param>
      <param name="constructor">指定要傳回哪個 <paramref name="type" /> 建構函式 <paramref name="type" /> 之泛型類型定義的建構函式。</param>
      <returns>表示對應 <paramref name="constructor" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的建構函式) 的 <paramref name="type" /> 建構函式的 <see cref="T:System.Reflection.ConstructorInfo" /> 物件，。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不代表泛型類型。
-或-
<paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />型別。
-或-
<paramref name="constructor" /> 的宣告類型不是泛型類型定義。
-或-
<paramref name="constructor" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary>依指定傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的公用和非公用建構函式。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <returns>傳回 <see cref="T:System.Reflection.ConstructorInfo" /> 物件的陣列，代表為這個類別所定義的指定建構函式。 如果未定義建構函式，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個類型定義的所有自訂屬性。</summary>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>傳回代表這個類型的所有自訂屬性的物件陣列。</returns>
      <exception cref="T:System.NotSupportedException">這個方法目前不支援不完整的類型。 使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回可指派給指定類型之目前類型的所有自訂屬性。</summary>
      <param name="attributeType">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>在目前類型上定義的自訂屬性陣列。</returns>
      <exception cref="T:System.NotSupportedException">這個方法目前不支援不完整的類型。 使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">類型必須是基礎執行階段系統所提供的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>不支援這個方法。 沒有傳回值。</returns>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary>傳回具有指定名稱的事件。</summary>
      <param name="name">要搜尋的事件名稱。</param>
      <param name="bindingAttr">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <returns>
        <see cref="T:System.Reflection.EventInfo" /> 物件，代表這個類型所宣告或繼承之具有指定名稱的事件；如果沒有相符的項目，則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary>傳回由這個方法所宣告或繼承的公用事件。</summary>
      <returns>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用事件。 如果沒有任何公用事件，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告的公用和非公用事件。</summary>
      <param name="bindingAttr">限制搜尋範圍之 <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <returns>傳回 <see cref="T:System.Reflection.EventInfo" /> 物件的陣列，代表符合指定繫結旗標的這個類型所宣告或繼承的事件。 如果沒有任何事件符合，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary>傳回指定之名稱所指定的欄位。</summary>
      <param name="name">要取得的欄位名稱。</param>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <returns>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件，代表此類別所宣告或繼承的欄位，並且具有指定的名稱和公用或非公用的修飾詞。 如果沒有符合項目，會傳回 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary>傳回對應至泛型類型定義指定欄位的指定建構泛型類型的欄位。</summary>
      <param name="type">傳回欄位的建構泛型類別。</param>
      <param name="field">有關 <paramref name="type" /> 的泛型類型定義欄位，指定要傳回的 <paramref name="type" /> 欄位。</param>
      <returns>代表對應 <paramref name="field" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的欄位) 的 <paramref name="type" /> 欄位的 <see cref="T:System.Reflection.FieldInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不代表泛型類型。
-或-
<paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />型別。
-或-
<paramref name="field" /> 的宣告類型不是泛型類型定義。
-或-
<paramref name="field" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告的公用和非公用欄位。</summary>
      <param name="bindingAttr">必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see cref="T:System.Reflection.FieldInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用欄位。 依指定，如果沒有的任何欄位，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary>傳回 <see cref="T:System.Type" /> 物件的陣列，這些物件代表泛型類型的型別引數，或泛型類型定義的型別參數。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列。 陣列的項目代表泛型類型的型別引數，或泛型類型定義的型別參數。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表可從中取得目前類型的泛型類型定義。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表可從中取得目前類型的泛型類型定義。</returns>
      <exception cref="T:System.InvalidOperationException">目前的類型不是泛型。 亦即，<see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 會傳回 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary>傳回此類別所 (直接或間接) 實作的介面，且完整格式名稱符合指定的介面名稱。</summary>
      <param name="name">介面的名稱。</param>
      <param name="ignoreCase">如果為 <see langword="true" />，搜尋不區分大小寫。 如果為 <see langword="false" />，搜尋會區分大小寫。</param>
      <returns>傳回 <see cref="T:System.Type" /> 物件，代表所實作的介面。 如果找不到符合名稱的介面，便傳回 null。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary>傳回所要求介面的介面對應。</summary>
      <param name="interfaceType">要為其擷取對應之介面的 <see cref="T:System.Type" />。</param>
      <returns>傳回要求的介面對應。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary>傳回在這個類型及其基底類型上實作之所有介面的陣列。</summary>
      <returns>傳回 <see cref="T:System.Type" /> 物件的陣列，代表所實作的介面。 如果未定義，則會傳回空陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary>依指定傳回此類型所宣告或繼承的所有公用和非公用成員。</summary>
      <param name="name">成員的名稱。</param>
      <param name="type">要傳回的成員類型。</param>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <returns>傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用成員 ；否則只會傳回公用成員。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告或繼承的公用和非公用成員之成員。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等。</param>
      <returns>傳回 <see cref="T:System.Reflection.MemberInfo" /> 物件的陣列，代表這個類型所宣告或繼承的公用和非公用成員。 如果沒有任何成員符合，則會傳回空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary>傳回對應至泛型類型定義指定方法的指定建構泛型類型的方法。</summary>
      <param name="type">傳回方法的建構泛型類別。</param>
      <param name="method">有關 <paramref name="type" /> 的泛型類型定義方法，指定要傳回的 <paramref name="type" /> 方法。</param>
      <returns>表示對應 <paramref name="method" /> (其指定屬於 <paramref name="type" /> 泛型類型定義的方法) 的 <paramref name="type" /> 方法的 <see cref="T:System.Reflection.MethodInfo" /> 物件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 是非泛型方法定義的泛型方法。
-或-
<paramref name="type" /> 不代表泛型類型。
-或-
<paramref name="type" /> 不是 <see cref="T:System.Reflection.Emit.TypeBuilder" />型別。
-或-
<paramref name="method" /> 的宣告類型不是泛型類型定義。
-或-
<paramref name="method" /> 的宣告類型不是 <paramref name="type" /> 的泛型類型定義。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary>依指定傳回此類型所宣告或繼承的所有公用和非公用方法。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <returns>傳回 <see cref="T:System.Reflection.MethodInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用方法 ；否則只會傳回公用方法。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告的公用和非公用巢狀類型。</summary>
      <param name="name">
        <see cref="T:System.String" />，其中包含要取得之巢狀類型的名稱。</param>
      <param name="bindingAttr">位元遮罩，由一或多個 <see cref="T:System.Reflection.BindingFlags" /> 組成，而這些旗標會指定執行搜尋的方式。
-或-
零，表示要針對公用方法執行區分大小寫的搜尋。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，表示符合指定之需求的巢狀型別 (如有找到)；否則為 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary>傳回這個類型所宣告或繼承的公用和非公用巢狀類型。</summary>
      <param name="bindingAttr">這必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標，像是在 <see langword="InvokeMethod" />、<see langword="NonPublic" /> 等等一樣。</param>
      <returns>
        <see cref="T:System.Type" /> 物件的陣列，表示在目前 <see cref="T:System.Type" /> 內形成巢狀的所有型別皆符合指定的繫結條件約束。
如果沒有任何型別在目前 <see cref="T:System.Type" /> 內形成巢狀，或沒有巢狀型別符合繫結條件約束，則為 <see cref="T:System.Type" /> 型別的空陣列。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary>依指定傳回這個類型所宣告或繼承的所有公用和非公用屬性。</summary>
      <param name="bindingAttr">這個引動過程屬性。 必須是來自 <see cref="T:System.Reflection.BindingFlags" /> 的位元旗標：<see langword="InvokeMethod" />、<see langword="NonPublic" /> 等。</param>
      <returns>傳回 <see langword="PropertyInfo" /> 物件的陣列，如果使用了 <paramref name="nonPublic" />，則會代表這個類型上定義的公用和非公用屬性；否則只會傳回公用屬性。</returns>
      <exception cref="T:System.NotSupportedException">不會為不完整的類型實作此方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary>擷取這個類型的 GUID。</summary>
      <returns>唯讀。 擷取這個類型的 GUID。</returns>
      <exception cref="T:System.NotSupportedException">這個方法目前不支援不完整的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary>叫用指定的成員。 根據指定繫結器和引動過程屬性的條件約束，所要叫用的方法必須可存取，並提供與指定引數清單最特定的符合項目。</summary>
      <param name="name">要叫用之成員的名稱。 可以是建構函式、方法、屬性或欄位。 您必須指定適當的引動過程屬性。 請注意，將空字串當做成員名稱傳遞，可叫用類別的預設成員。</param>
      <param name="invokeAttr">引動過程屬性。 必須是來自 <see langword="BindingFlags" /> 的位元旗標。</param>
      <param name="binder">使用反映來啟用繫結、強制引數的類型、成員的引動過程，和擷取 <see langword="MemberInfo" /> 物件的物件。 如果繫結器為 <see langword="null" />，則會使用預設繫結器。 請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="target">要在其上叫用指定成員的物件。 如果是靜態成員，則會忽略這個參數。</param>
      <param name="args">引數清單。 這是物件陣列，其中包含所要叫用之成員的參數數目、順序和類型。 如果沒有任何參數，則這應該是 null。</param>
      <param name="modifiers">與 <paramref name="args" /> 長度相同的陣列，其中的項目代表與所要叫用的成員之引數關聯的屬性。 參數在中繼資料內具有與其相關聯的屬性。 許多互通性服務都會使用這些屬性。 如需詳細資訊，請參閱中繼資料規格。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 null，會使用目前執行緒的 <see langword="CultureInfo" />。 (請注意，要將代表 1000 的 String 轉換成 Double 值時，這是必要的，因為 1000 的表示方式會因不同文化特性而有所不同)。</param>
      <param name="namedParameters">
        <paramref name="namedParameters" /> 陣列中的每個參數會在 <paramref name="args" /> 陣列中取得對應項目的值。 如果 <paramref name="args" /> 的長度大於 <paramref name="namedParameters" /> 的長度，則會依序傳遞其餘引數值。</param>
      <returns>傳回所叫用之成員的傳回值。</returns>
      <exception cref="T:System.NotSupportedException">這個方法目前不支援不完整的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary>取得值，指出是否可以將指定的 <see cref="T:System.Type" /> 指派給這個物件。</summary>
      <param name="c">要測試的物件。</param>
      <returns>如果 <paramref name="c" /> 參數和目前的類型代表相同的類型、目前的類型位於 <paramref name="c" /> 的繼承階層架構中，或者目前的類型位於 <paramref name="c" /> 支援的介面中，則為 <see langword="true" />。 如果以上條件都不成立，或者 <paramref name="c" /> 為 <see langword="null" />，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary>取得值，指出這個物件是否表示建構的泛型類型。</summary>
      <returns>如果這個物件代表建構的泛型類型，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary>傳回表示是否已建立目前動態類型的值。</summary>
      <returns>如已呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary>決定是否要將自訂屬性套用至目前的類型。</summary>
      <param name="attributeType">要搜尋的屬性類型。 只會傳回可指派給這種類型的屬性。</param>
      <param name="inherit">指定是否要搜尋這個成員的繼承鏈結以尋找屬性。</param>
      <returns>如果一或多個執行個體的 <paramref name="attributeType" />，或衍生自 <paramref name="attributeType" /> 的屬性在此類型定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">這個方法目前不支援不完整的類型。 使用 <see cref="M:System.Type.GetType" /> 擷取類型，並在傳回的 <see cref="T:System.Type" /> 上呼叫 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />。</exception>
      <exception cref="T:System.ArgumentException">未定義<paramref name="attributeType" /> 。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary>取得值，指出目前類型是否為泛型類型參數。</summary>
      <returns>如果目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件代表泛型類型參數，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary>取得值，指出目前類型是否為泛型類型。</summary>
      <returns>如果由目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件所代表的類型為泛型，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary>取得值，指出目前的 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 是否代表可用於建構其他泛型類型的泛型類型定義。</summary>
      <returns>如果這個 <see cref="T:System.Reflection.Emit.TypeBuilder" /> 物件代表泛型類型定義，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary>取得值，這個值表示目前類型是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</summary>
      <returns>如果目前類型為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是安全性透明，則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary>取得值，這個值表示目前類型是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</summary>
      <returns>如果目前類型為安全性安全關鍵，則為 <see langword="true" />，如果是安全性關鍵或安全性透明，則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary>取得值，這個值表示目前類型是否為透明，因此無法執行重要作業。</summary>
      <returns>如果類型為安全性透明，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
      <exception cref="T:System.NotSupportedException">尚未呼叫 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 方法建立目前動態類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary>判斷此類型是否衍生自指定的類型。</summary>
      <param name="c">要檢查的 <see cref="T:System.Type" />。</param>
      <returns>唯讀。 如果此類型與類型 <paramref name="c" /> 相同，或為類型 <paramref name="c" /> 的子類型，則傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成的一維陣列，其下限為零。</summary>
      <returns>代表一維陣列類型的 <see cref="T:System.Type" /> 物件，其項目類型是目前的類型，下限為零。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表由目前類型組成且為指定維度個數的陣列。</summary>
      <param name="rank">陣列的維度數目。</param>
      <returns>
        <see cref="T:System.Type" /> 物件，代表目前類型的一維陣列。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="rank" /> 不是有效的陣列維度。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為<see langword="ByRef" /> ) 傳遞時，代表目前的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，當做 <see langword="ref" /> 參數 (在 Visual Basic 中為 <see langword="ByRef" />) 傳遞時，代表目前的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary>用類型陣列的項目取代目前泛型類型定義的類型參數，並傳回產生的建構類型。</summary>
      <param name="typeArguments">由類型組成的陣列，用來取代目前泛型類型定義的類型參數。</param>
      <returns>
        <see cref="T:System.Type" />，表示用 <paramref name="typeArguments" /> 的項目取代目前泛型類型之類型參數所得到的建構類型。</returns>
      <exception cref="T:System.InvalidOperationException">目前類型不代表泛型類型的定義。 亦即， <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 傳回 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArguments" /> 為 <see langword="null" />。
-或-
<paramref name="typeArguments" /> 的項目是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArguments" /> 的任何項目之 <see cref="P:System.Type.Module" /> 屬性是 <see langword="null" />。
-或-
<paramref name="typeArguments" /> 的任何項目模組之 <see cref="P:System.Reflection.Module.Assembly" /> 屬性是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary>傳回 <see cref="T:System.Type" /> 物件，代表指向目前類型之 Unmanaged 指標的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 物件，代表指向目前類型之 Unmanaged 指標的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary>擷取包含這個類型定義的動態模組。</summary>
      <returns>唯讀。 擷取包含這個類型定義的動態模組。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary>擷取這個類型的名稱。</summary>
      <returns>唯讀。 擷取這個類型的 <see cref="T:System.String" /> 名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary>擷取定義這個 <see langword="TypeBuilder" /> 的命名空間。</summary>
      <returns>唯讀。 擷取定義這個 <see langword="TypeBuilder" /> 的命名空間。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary>擷取這個類型的封裝大小。</summary>
      <returns>唯讀。 擷取這個類型的封裝大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary>傳回用來取得這個類型的類型。</summary>
      <returns>唯讀。 用來取得這個類型的類型。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary>使用指定的自訂屬性 Blob 來設定自訂屬性。</summary>
      <param name="con">自訂屬性的建構函式。</param>
      <param name="binaryAttribute">代表屬性的位元組 Blob。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="con" /> 或 <paramref name="binaryAttribute" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary>使用自訂屬性產生器來設定自訂屬性。</summary>
      <param name="customBuilder">定義自訂屬性的協助程式類別執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customBuilder" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary>設定目前建構中之類型的基底類型。</summary>
      <param name="parent">新的基底類型。</param>
      <exception cref="T:System.InvalidOperationException">先前使用 <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> 建立的類型。
-或-
<paramref name="parent" /> 為 <see langword="null" />，而且目前的執行個體代表其屬性不包含 <see cref="F:System.Reflection.TypeAttributes.Abstract" /> 的介面。
-或-
目前動態類型的 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> 屬性為 <see langword="true" />，但 <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> 屬性為 <see langword="false" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parent" /> 是介面。 這是 .NET Framework 2.0 版的新例外狀況條件。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary>擷取類型的總大小。</summary>
      <returns>唯讀。 抓取此類型的總大小。</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary>傳回不含命名空間的類型名稱。</summary>
      <returns>唯讀。 不含命名空間的類型名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary>在動態模組中不支援。</summary>
      <returns>唯讀。</returns>
      <exception cref="T:System.NotSupportedException">在動態模組中不支援。</exception>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary>傳回這個 <see langword="TypeBuilder" /> 的基礎系統類型。</summary>
      <returns>唯讀。 傳回基礎系統類型。</returns>
      <exception cref="T:System.InvalidOperationException">這個類型是一種列舉，但沒有基礎系統類型。</exception>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary>代表未指定該類型的總大小。</summary>
    </member>
  </members>
</doc>
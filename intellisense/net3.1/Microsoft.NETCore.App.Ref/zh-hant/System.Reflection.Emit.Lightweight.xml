<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>提供產生動態方法之 Microsoft Intermediate Language (MSIL) 和中繼資料 (Metadata) 的替代方式支援，包括用以建立語彙基元 (Token) 和插入程式碼的方法、例外狀況處理 (Exception Handling) 以及區域變數簽章 Blob (二進位大型物件)。</summary>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>取得動態方法，其主體是由目前的執行個體所產生。</summary>
      <returns>
        <see cref="T:System.Reflection.Emit.DynamicMethod" /> 物件，表示目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件產生程式碼所針對的動態方法。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示關聯動態方法的簽章。</summary>
      <param name="signature">包含簽章的陣列。</param>
      <returns>語彙基元，可嵌入關聯動態方法的中繼資料和 MSIL 資料流中。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的方法呼叫的動態方法。</summary>
      <param name="method">要呼叫的動態方法。</param>
      <returns>語彙基元，可當做 MSIL 指令的目標，嵌入關聯動態方法的 MSIL 資料流中。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的欄位。</summary>
      <param name="field">要存取的欄位。</param>
      <returns>語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做存取欄位之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的欄位；該欄位是在指定的泛型型別上。</summary>
      <param name="field">要存取的欄位。</param>
      <param name="contextType">欄位所屬的泛型型別。</param>
      <returns>語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做存取欄位之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要從關聯的動態方法存取的方法。</summary>
      <param name="method">要存取的方法。</param>
      <returns>語彙基元，可在目前 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 物件的範圍內，當做存取方法 (例如 <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 或 <see cref="T:System.Reflection.Emit.DynamicILInfo" />) 之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示泛型型別的方法。</summary>
      <param name="method">方法。</param>
      <param name="contextType">方法所屬的泛型型別。</param>
      <returns>語彙基元，可在目前 <see cref="F:System.Reflection.Emit.OpCodes.Call" /> 物件的範圍內，當做存取方法 (例如 <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> 或 <see cref="T:System.Reflection.Emit.DynamicILInfo" />) 之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要用於關聯的動態方法中的型別。</summary>
      <param name="type">要使用的型別。</param>
      <returns>語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做需要型別之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>取得在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 範圍內有效的語彙基元，表示要用於關聯的動態方法中的字串常值 (String Literal)。</summary>
      <param name="literal">要使用的字串。</param>
      <returns>語彙基元，可在目前 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件的範圍內，當做需要字串之 MSIL 指令的運算元。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>設定關聯之動態方法的程式碼主體。</summary>
      <param name="code">指標，指向包含 MSIL 資料流的位元組陣列。</param>
      <param name="codeSize">在 MSIL 資料流中的位元組數目。</param>
      <param name="maxStackSize">執行此方法時，運算元堆疊上的最大項目數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> 為 <see langword="null" /> 且 <paramref name="codeSize" /> 大於 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> 小於 0。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>設定關聯之動態方法的程式碼主體。</summary>
      <param name="code">包含 MSIL 資料流的陣列。</param>
      <param name="maxStackSize">執行此方法時，運算元堆疊上的最大項目數。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>設定關聯之動態方法的例外狀況中繼資料。</summary>
      <param name="exceptions">指標，指向包含例外狀況中繼資料的位元組陣列。</param>
      <param name="exceptionsSize">例外狀況中繼資料的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> 為 <see langword="null" /> 且 <paramref name="exceptionSize" /> 大於 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> 小於 0。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>設定關聯之動態方法的例外狀況中繼資料。</summary>
      <param name="exceptions">包含例外狀況中繼資料的陣列。</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>設定區域變數簽章，描述關聯之動態方法的區域變數配置。</summary>
      <param name="localSignature">陣列，其中包含相關 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 之區域變數的配置。</param>
      <param name="signatureSize">簽章中的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> 為 <see langword="null" /> 且 <paramref name="signatureSize" /> 大於 0。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> 小於 0。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>設定區域變數簽章，描述關聯之動態方法的區域變數配置。</summary>
      <param name="localSignature">陣列，其中包含相關 <see cref="T:System.Reflection.Emit.DynamicMethod" /> 之區域變數的配置。</param>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>定義及代表可以編譯、執行和捨棄的動態方法。 已捨棄的方法可供記憶體回收所用。</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>建立對模組而言全域的動態方法，並指定方法名稱、屬性、呼叫慣例、傳回類型、參數類型、模組，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="attributes">指定動態方法屬性的 <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合。 唯一允許的組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention">動態方法的的呼叫慣例。 必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />，代表動態方法在邏輯上相關聯的模組。</param>
      <param name="skipVisibility">
        <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。
-或-
<paramref name="m" /> 是為動態方法提供匿名裝載的模組。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="m" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> 是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外的旗標組合。
-或-
<paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。
-或-
<paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>建立動態方法、指定方法名稱、屬性、呼叫慣例、傳回類型、參數類型、動態方法在邏輯上相關聯的類型，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="attributes">指定動態方法屬性的 <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合。 唯一允許的組合是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" />。</param>
      <param name="callingConvention">動態方法的的呼叫慣例。 必須是 <see cref="F:System.Reflection.CallingConventions.Standard" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="owner">動態方法在邏輯方面相關聯的 <see cref="T:System.Type" />。 動態方法可存取該類型的所有成員。</param>
      <param name="skipVisibility">
        <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。
-或-
<paramref name="owner" /> 是介面、陣列、開放式泛型類型，或者是泛型類型或方法的類型參數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="owner" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> 是 <see cref="F:System.Reflection.MethodAttributes.Public" /> 和 <see cref="F:System.Reflection.MethodAttributes.Static" /> 以外的旗標組合。
-或-
<paramref name="callingConvention" /> 不是 <see cref="F:System.Reflection.CallingConventions.Standard" />。
-或-
<paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>初始化匿名裝載的動態方法，並指定方法名稱、傳回型別和參數類型。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>初始化匿名裝載的動態方法，並指定方法名稱、傳回類型、參數類型、以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="restrictedSkipVisibility">
        <see langword="true" /> 則略過對動態方法的 MSIL 所存取之類型和成員的 JIT 可視性檢查，但有此限制：包含這些類型和成員的組件的信任層級，必須等於或小於發出動態方法的呼叫堆疊的信任層級；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>建立對模組通用的動態方法，並指定方法名稱、傳回型別、參數類型和模組。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />，代表動態方法在邏輯上相關聯的模組。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。
-或-
<paramref name="m" /> 是為動態方法提供匿名裝載的模組。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="m" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>建立對模組而言全域的動態方法，並指定方法名稱、傳回類型、參數類型、模組，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="m">
        <see cref="T:System.Reflection.Module" />，代表動態方法在邏輯上相關聯的模組。</param>
      <param name="skipVisibility">
        <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。
-或-
<paramref name="m" /> 是為動態方法提供匿名裝載的模組。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="m" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 類型是 <see cref="P:System.Type.IsByRef" /> 傳回 <see langword="true" /> 的對象。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>建立動態方法，指定方法名稱、傳回類型、參數類型及與動態方法在邏輯上相關聯的類型。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="owner">動態方法在邏輯方面相關聯的 <see cref="T:System.Type" />。 動態方法可存取該類型的所有成員。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。
-或-
<paramref name="owner" /> 是介面、陣列、開放式泛型類型，或者是泛型類型或方法的類型參數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="owner" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 為 <see langword="null" />，或屬於 <see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" /> 的類型。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>建立動態方法，並指定方法名稱、傳回型別、參數類型、動態方法在邏輯上相關聯的類型，以及是否應該略過動態方法的 Microsoft Intermediate Language (MSIL) 所存取之類型和成員的 Just-In-Time (JIT) 可見度檢查。</summary>
      <param name="name">動態方法的名稱。 這可以是零長度的字串，但不能是 <see langword="null" />。</param>
      <param name="returnType">指定動態方法之傳回類型的 <see cref="T:System.Type" /> 物件；如果方法沒有傳回類型，則為 <see langword="null" />。</param>
      <param name="parameterTypes">指定動態方法之參數類型的 <see cref="T:System.Type" /> 物件陣列；如果方法沒有參數，則為 <see langword="null" />。</param>
      <param name="owner">動態方法在邏輯方面相關聯的 <see cref="T:System.Type" />。 動態方法可存取該類型的所有成員。</param>
      <param name="skipVisibility">
        <see langword="true" /> 表示要略過動態方法的 MSIL 所存取之類型和成員的 JIT 可見度檢查，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameterTypes" /> 的項目為 <see langword="null" /> 或 <see cref="T:System.Void" />。
-或-
<paramref name="owner" /> 是介面、陣列、開放式泛型類型，或者是泛型類型或方法的類型參數。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。
-或-
<paramref name="owner" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> 為 <see langword="null" />，或屬於 <see cref="P:System.Type.IsByRef" /> 會傳回 <see langword="true" /> 的類型。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>取得建立動態方法時所指定的屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodAttributes" /> 值的位元組合，代表此方法的屬性。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>取得建立動態方法時所指定的呼叫慣例。</summary>
      <returns>
        <see cref="T:System.Reflection.CallingConventions" /> 值的其中一個，表示該方法的呼叫慣例。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>完成動態方法並建立可以用來執行它的委派。</summary>
      <param name="delegateType">一種委派類型，其簽章符合動態方法。</param>
      <returns>指定類型的委派，可用於執行動態方法。</returns>
      <exception cref="T:System.InvalidOperationException">此動態方法沒有任何方法主體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 的參數數目錯誤或參數類型錯誤。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>完成動態方法並建立可以用來執行它的委派，同時指定委派類型和委派繫結至的物件。</summary>
      <param name="delegateType">一種委派類型，其簽章符合減去第一個參數的動態方法簽章。</param>
      <param name="target">委派繫結至的物件。 必須是與動態方法的第一個參數相同類型。</param>
      <returns>指定類型的委派，可用於對指定目標物件執行動態方法。</returns>
      <exception cref="T:System.InvalidOperationException">此動態方法沒有任何方法主體。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 與動態方法的第一個參數不是相同類型，且無法指派給該類型。
-或-
<paramref name="delegateType" /> 的參數數目錯誤或參數類型錯誤。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>取得宣告方法的類型，如果是動態方法，則一律為 <see langword="null" />。</summary>
      <returns>一定是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>定義動態方法的參數。</summary>
      <param name="position">在參數清單中參數的位置。 第一個參數的參數索引從數字 1 開始。</param>
      <param name="attributes">指定參數屬性的 <see cref="T:System.Reflection.ParameterAttributes" /> 值的位元組合。</param>
      <param name="parameterName">參數名稱。 名稱可以是零長度字串。</param>
      <returns>一律傳回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">這個方法沒有參數。
-或-
<paramref name="position" /> 小於 0。
-或-
<paramref name="position" /> 大於方法參數的數目。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>傳回此方法的基底實作。</summary>
      <returns>此方法的基底實作。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>傳回為這個方法定義的所有自訂屬性。</summary>
      <param name="inherit">
        <see langword="true" /> 表示要搜尋方法的繼承鏈結以尋找自訂屬性；<see langword="false" /> 表示只會檢查目前的方法。</param>
      <returns>代表這個方法所有自訂屬性的物件陣列。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>傳回已套用至該方法之指定類型的自訂屬性。</summary>
      <param name="attributeType">
        <see cref="T:System.Type" />，代表要傳回的自訂屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示要搜尋方法的繼承鏈結以尋找自訂屬性；<see langword="false" /> 表示只會檢查目前的方法。</param>
      <returns>代表此方法屬性的物件陣列之類型為 <paramref name="attributeType" /> 或衍生自類型 <paramref name="attributeType" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>傳回 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件，其可用於從中繼資料語彙基元、範圍以及 Microsoft 中繼語言 (MSIL) 資料流中產生方法主體。</summary>
      <returns>可用於從中繼資料語彙基元、範圍及 MSIL 資料流中產生方法主體的 <see cref="T:System.Reflection.Emit.DynamicILInfo" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>針對方法，傳回具有預設 Microsoft Intermediate Language (MSIL) 資料流大小 64 位元組的 MSIL 產生器。</summary>
      <returns>方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>針對方法，傳回具有指定 Microsoft Intermediate Language (MSIL) 資料流大小的 MSIL 產生器。</summary>
      <param name="streamSize">MSIL 資料流的大小，以位元組為單位。</param>
      <returns>方法的 <see cref="T:System.Reflection.Emit.ILGenerator" /> 物件，具有指定的 MSIL 資料流大小。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>傳回方法的實作旗標。</summary>
      <returns>
        <see cref="T:System.Reflection.MethodImplAttributes" /> 值的位元組合，代表此方法的實作旗標。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>傳回動態方法的參數。</summary>
      <returns>
        <see cref="T:System.Reflection.ParameterInfo" /> 物件的陣列，代表動態方法的參數。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>取得或設定值，表示在此方法中的區域變數是否以零起始。</summary>
      <returns>如果在此方法中的區域變數以零起始，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>使用指定的文化特性資訊，在指定繫結器的條件約束下，以指定的參數叫用動態方法。</summary>
      <param name="obj">由於這個參數是靜態的，因此動態方法會予以忽略。 請指定 <see langword="null" />。</param>
      <param name="invokeAttr">
        <see cref="T:System.Reflection.BindingFlags" /> 值的位元組合。</param>
      <param name="binder">
        <see cref="T:System.Reflection.Binder" /> 物件能用來啟用繫結、引數類型的強制型轉、成員的引動過程，以及透過反映來擷取 <see cref="T:System.Reflection.MemberInfo" /> 物件等功能。 如果 <paramref name="binder" /> 為 <see langword="null" />，則會使用預設繫結器。 如需詳細資訊，請參閱 <see cref="T:System.Reflection.Binder" />。</param>
      <param name="parameters">引數清單。 這是引數陣列，其數目、順序和類型與要叫用的方法參數相同。 如果沒有任何參數，這個參數應該為 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 的執行個體，用於管理類型的強制型轉。 如果這是 <see langword="null" />，會使用目前執行緒的 <see cref="T:System.Globalization.CultureInfo" />。 例如，若要將代表 1000 的 <see cref="T:System.String" /> 正確轉換成 <see cref="T:System.Double" /> 值，需要這項資訊，因為 1000 的表示方式會因不同文化特性而有所不同。</param>
      <returns>
        <see cref="T:System.Object" />，其中包含已叫用之方法的傳回值。</returns>
      <exception cref="T:System.NotSupportedException">不支援 <see cref="F:System.Reflection.CallingConventions.VarArgs" /> 呼叫慣例。</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">
        <paramref name="parameters" /> 中的項目數不符合動態方法中的參數數目。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 的一或多個項目類型不符合動態方法的對應參數類型。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">動態方法已與模組建立關聯、不是匿名裝載，而且建構時已將 <paramref name="skipVisibility" /> 設定為 <see langword="false" />，但動態方法所存取的成員卻不是 <see langword="public" /> 或 <see langword="internal" /> (在 Visual Basic 中為 <see langword="Friend" />)。
-或-
動態方法已匿名裝載，而且建構已將 <paramref name="skipVisibility" /> 設定為 <see langword="false" />，但其所存取的成員不是 <see langword="public" />。
-或-
動態方法含有未經驗證的程式碼。 如需了解 <see cref="T:System.Reflection.Emit.DynamicMethod" />，請參閱＜備註＞中的＜驗證＞一節。</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>指出是否已定義指定的自訂屬性類型。</summary>
      <param name="attributeType">
        <see cref="T:System.Type" />，代表要搜尋的自訂屬性類型。</param>
      <param name="inherit">
        <see langword="true" /> 表示要搜尋方法的繼承鏈結以尋找自訂屬性；<see langword="false" /> 表示只會檢查目前的方法。</param>
      <returns>如果已定義指定的自訂屬性類型，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>取得值，這個值表示目前動態方法是否為安全性關鍵或安全性安全關鍵，因而可以執行重要的作業。</summary>
      <returns>如果目前動態方法為安全性關鍵或安全性安全關鍵，則為 <see langword="true" />，如果是安全性透明，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此動態方法沒有方法主體。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>取得值，這個值表示目前動態方法在目前信任層級上是否為安全性安全關鍵，也就是說，它是否能執行重要作業並由安全性透明的程式碼存取。</summary>
      <returns>如果動態方法在目前信任層級上為安全性安全關鍵，則為 <see langword="true" />；如果為安全性關鍵或安全性透明，則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此動態方法沒有方法主體。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>取得值，這個值表示目前動態方法在目前信任層級上是否為安全性透明，因此無法執行重要作業。</summary>
      <returns>如果動態方法在目前信任層級上為安全性透明，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
      <exception cref="T:System.InvalidOperationException">此動態方法沒有方法主體。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>不支援動態方法。</summary>
      <returns>不支援動態方法。</returns>
      <exception cref="T:System.InvalidOperationException">不允許動態方法。</exception>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>取得動態方法在邏輯上相關聯的模組。</summary>
      <returns>與目前的動態方法關聯的 <see cref="T:System.Reflection.Module" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>取得動態方法的名稱。</summary>
      <returns>方法的簡單名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>取得用於反映中以取得方法的類別。</summary>
      <returns>一定是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>取得動態方法的傳回參數。</summary>
      <returns>一定是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>取得此動態方法傳回值的類型。</summary>
      <returns>
        <see cref="T:System.Type" /> 代表目前方法之傳回值的類型；如果此方法沒有傳回類型，則為 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>取得動態方法之傳回類型的自訂屬性。</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 表示動態方法之傳回類型的自訂屬性。</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>傳回方法的簽章，以字串表示。</summary>
      <returns>表示方法簽章的字串。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Permissions</name>
  </assembly>
  <members>
    <member name="T:System.ApplicationIdentity">
      <summary>提供唯一标识清单激活的应用程序的能力。 此类不能被继承。</summary>
    </member>
    <member name="M:System.ApplicationIdentity.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ApplicationIdentity" /> 类的新实例。</summary>
      <param name="applicationIdentityFullName">应用程序的全名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="applicationIdentityFullName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ApplicationIdentity.CodeBase">
      <summary>获取作为 URL 的部署清单的位置。</summary>
      <returns>部署清单的 URL。</returns>
    </member>
    <member name="P:System.ApplicationIdentity.FullName">
      <summary>获取应用程序的全名。</summary>
      <returns>应用程序的全名，也称为显示名称。</returns>
    </member>
    <member name="M:System.ApplicationIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">序列化的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构。</param>
    </member>
    <member name="M:System.ApplicationIdentity.ToString">
      <summary>返回清单激活的应用程序的全名。</summary>
      <returns>清单激活的应用程序的全名。</returns>
    </member>
    <member name="T:System.Configuration.ConfigurationPermission">
      <summary>提供允许方法或类访问配置文件的权限结构。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPermission" /> 类的新实例。</summary>
      <param name="state">要授予的权限级别。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 的值不是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />，也不是 <see cref="F:System.Security.Permissions.PermissionState.None" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Copy">
      <summary>返回具有相同权限级别的新的 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象。</summary>
      <returns>具有相同权限级别的新的 <see cref="T:System.Configuration.ConfigurationPermission" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 读取权限状态值。</summary>
      <param name="securityElement">从中读取权限状态的配置元素。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">给定 <paramref name="securityElement" /> 的 <see langword="unrestricted" /> 特性既不是 <see langword="true" />，也不是 <see langword="false" />。
或
给定 <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 不等于“IPermission”。
或
给定 <paramref name="securityElement " /> 的 <see langword="class" /> 特性是 <see langword="null" /> 或不是 <see cref="T:System.Configuration.ConfigurationPermission" /> 的类型名称。
或
给定 <paramref name="securityElement" /> 的 <see langword="version" /> 特性不等于 1。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Intersect(System.Security.IPermission)">
      <summary>返回 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象与实现 <see cref="T:System.Security.IPermission" /> 接口的给定对象的逻辑交集。</summary>
      <param name="target">包含用于执行交集的权限的对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationPermission" /> 与实现 <see cref="T:System.Security.IPermission" /> 的给定对象的逻辑交集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型不是 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>将 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象与实现 <see cref="T:System.Security.IPermission" /> 接口的对象进行比较。</summary>
      <param name="target">要比较的对象。</param>
      <returns>如果权限状态相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型不是 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.IsUnrestricted">
      <summary>指示 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象的权限状态是否为 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 枚举的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</summary>
      <returns>如果 <see cref="T:System.Configuration.ConfigurationPermission" /> 的权限状态是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 的 <see cref="T:System.Security.Permissions.PermissionState" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.ToXml">
      <summary>返回一个 <see cref="T:System.Security.SecurityElement" /> 对象，其特性值取决于当前 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" />，其特性值取决于当前 <see cref="T:System.Configuration.ConfigurationPermission" />。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationPermission.Union(System.Security.IPermission)">
      <summary>返回 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象与实现 <see cref="T:System.Security.IPermission" /> 接口的对象的逻辑并集。</summary>
      <param name="target">用于执行该并集的对象。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationPermission" /> 与实现 <see cref="T:System.Security.IPermission" /> 的对象的逻辑并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 的类型不是 <see cref="T:System.Configuration.ConfigurationPermission" />。</exception>
    </member>
    <member name="T:System.Configuration.ConfigurationPermissionAttribute">
      <summary>创建一个 <see cref="T:System.Configuration.ConfigurationPermission" /> 对象，该对象授予或拒绝访问配置文件节的标记了的目标权限。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 的枚举成员表示的安全操作。 确定特性的权限状态。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationPermissionAttribute.CreatePermission">
      <summary>创建和返回实现 <see cref="T:System.Security.IPermission" /> 接口的对象。</summary>
      <returns>实现 <see cref="T:System.Security.IPermission" /> 的对象。</returns>
    </member>
    <member name="T:System.Data.Common.DBDataPermission">
      <summary>启用一个 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问数据。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor">
      <summary>初始化 <see langword="DBDataPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermission)">
      <summary>使用现有的 <see langword="DBDataPermission" /> 初始化 <see langword="DBDataPermission" /> 类的新实例。</summary>
      <param name="permission">用于创建新 <see langword="DBDataPermission" /> 的现有 <see langword="DBDataPermission" />。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Data.Common.DBDataPermissionAttribute)">
      <summary>用指定的 <see langword="DBDataPermission" /> 初始化 <see langword="DBDataPermissionAttribute" /> 类的新实例。</summary>
      <param name="permissionAttribute">与自定义安全特性相关的安全操作。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 值初始化 <see langword="DBDataPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 值和指示是否允许空白密码的值初始化 <see langword="DBDataPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">
        <see langword="true" /> 表示允许使用空白密码；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>将指定连接字符串的访问权限添加到 <see langword="DBDataPermission" /> 的现有状态。</summary>
      <param name="connectionString">允许的连接字符串。</param>
      <param name="restrictions">标识允许使用或禁用的连接字符串参数的字符串。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 属性之一。</param>
    </member>
    <member name="P:System.Data.Common.DBDataPermission.AllowBlankPassword">
      <summary>获取一个值，该值指示是否允许使用空白密码。</summary>
      <returns>如果允许使用空白密码，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Clear">
      <summary>移除以前使用 <see cref="M:System.Data.Common.DBDataPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)" /> 方法添加的所有权限。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Copy">
      <summary>创建并返回与当前权限对象相同的副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.CreateInstance">
      <summary>创建 <see langword="DBDataPermission" /> 类的新实例。</summary>
      <returns>一个新 <see langword="DBDataPermission" /> 对象。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Intersect(System.Security.IPermission)">
      <summary>返回表示当前权限对象和指定权限对象的交集的新权限对象。</summary>
      <param name="target">与当前的权限对象相交的权限对象。 它必须与当前权限对象的类型相同。</param>
      <returns>表示当前权限对象和指定权限对象的交集的新权限对象。 如果交集为空，则此新权限对象是一个 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是 null 引用（在 Visual Basic 中为 <see langword="Nothing" />），并且不是与当前权限对象相同的类的实例。</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前的权限对象是否为指定权限对象的一个子集。</summary>
      <param name="target">将用于测试子集关系的权限对象。 该对象必须与当前权限对象的类型相同。</param>
      <returns>如果当前权限对象是指定权限对象的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数是一个与当前权限对象的类型不同的对象。</exception>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.IsUnrestricted">
      <summary>返回一个值，该值指示在不了解权限语义的情况下是否可以将权限表示为无限制。</summary>
      <returns>如果可以将权限表示为无限制，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermission.Union(System.Security.IPermission)">
      <summary>返回一个新的权限对象，它是当前权限对象和指定权限对象的并集。</summary>
      <param name="target">要与当前的权限对象合并的权限对象。 它必须与当前权限对象的类型相同。</param>
      <returns>新权限对象，它表示当前权限对象和指定权限对象的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 对象与当前权限对象不属于同一类型。</exception>
    </member>
    <member name="T:System.Data.Common.DBDataPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.Common.DBDataPermissionAttribute" /> 的新实例。</summary>
      <param name="action">安全操作值之一，它表示可以由声明性安全执行的操作。</param>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.AllowBlankPassword">
      <summary>获取或设置一个值，该值指示是否允许使用空白密码。</summary>
      <returns>如果允许使用空白密码，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.ConnectionString">
      <summary>获取或设置允许的连接字符串。</summary>
      <returns>允许的连接字符串。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictionBehavior">
      <summary>标识由 <see cref="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions" /> 属性标识的连接字符串参数列表是否为所唯一允许的连接字符串参数。</summary>
      <returns>
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.Common.DBDataPermissionAttribute.KeyRestrictions">
      <summary>获取或设置允许或不允许的连接字符串参数。</summary>
      <returns>允许或不允许的一个和多个连接字符串参数。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeConnectionString">
      <summary>标识特性是否应序列化连接字符串。</summary>
      <returns>如果特性应序列化连接字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.Common.DBDataPermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>标识特性是否应序列化键限制集合。</summary>
      <returns>如果特性应序列化键限制集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermission">
      <summary>启用用于 ODBC 的 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问 ODBC 数据源。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用其中一个 <see cref="T:System.Security.Permissions.PermissionState" /> 值初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.Odbc.OdbcPermission" /> 类的新实例。</summary>
      <param name="state">
        <see langword="System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>将指定连接字符串的访问权限添加到现有权限状态。</summary>
      <param name="connectionString">允许的连接字符串。</param>
      <param name="restrictions">标识允许使用或禁用的连接字符串参数的字符串。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 值之一。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermission.Copy">
      <summary>以 <see cref="T:System.Data.Odbc.OdbcPermission" /> 形式返回 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="T:System.Data.Odbc.OdbcPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用其中一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值初始化 <see cref="T:System.Data.Odbc.OdbcPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值，其表示可使用声明性安全执行的操作。</param>
    </member>
    <member name="M:System.Data.Odbc.OdbcPermissionAttribute.CreatePermission">
      <summary>返回一个根据特性属性配置的 <see cref="T:System.Data.Odbc.OdbcPermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.Odbc.OdbcPermission" /> 对象。</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermission">
      <summary>启用用于 OLE DB 的 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问 OLE DB 数据源。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermission.Copy">
      <summary>以 <see cref="T:System.Data.OleDb.OleDbPermission" /> 形式返回 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermission.Provider">
      <summary>此属性已被标记为过时。 设置此属性将不会产生任何作用。</summary>
      <returns>此属性已被标记为过时。 设置此属性将不会产生任何作用。</returns>
    </member>
    <member name="T:System.Data.OleDb.OleDbPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.OleDb.OleDbPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值，其表示可使用声明性安全执行的操作。</param>
    </member>
    <member name="M:System.Data.OleDb.OleDbPermissionAttribute.CreatePermission">
      <summary>返回一个根据特性属性配置的 <see cref="T:System.Data.OleDb.OleDbPermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.OleDb.OleDbPermission" /> 对象。</returns>
    </member>
    <member name="P:System.Data.OleDb.OleDbPermissionAttribute.Provider">
      <summary>获取或设置包含受支持的提供程序的列表的逗号分隔字符串。</summary>
      <returns>该安全策略所允许的提供程序的逗号分隔列表。</returns>
    </member>
    <member name="T:System.Data.OracleClient.OraclePermission">
      <summary>启用用于 Oracle 的 .NET Framework 数据提供程序，以帮助确保用户具有足够的安全级别来访问 Oracle 数据库。</summary>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用其中一个 <see cref="T:System.Security.Permissions.PermissionState" /> 值初始化 <see cref="T:System.Data.OracleClient.OraclePermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>创建一组新的权限。</summary>
      <param name="connectionString">连接字符串。</param>
      <param name="restrictions">关键限制。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 枚举之一。</param>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermission.AllowBlankPassword">
      <summary>获取一个值，该值指示是否允许使用空白密码。</summary>
      <returns>如果允许使用空白密码，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Copy">
      <summary>由派生类实现时，创建并返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.FromXml(System.Security.SecurityElement)">
      <summary>当在派生类中替代时，用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" /> 表达式。</param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Intersect(System.Security.IPermission)">
      <summary>通过派生类实现时，创建和返回是当前权限和指定权限的交集的权限。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>通过派生类实现时，确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.IsUnrestricted">
      <summary>返回一个值，该值指示在不了解权限语义的情况下是否可以将权限表示为无限制。</summary>
      <returns>如果可以将权限表示为无限制，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="T:System.Data.OracleClient.OraclePermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.OracleClient.OraclePermissionAttribute" /> 类的新实例。</summary>
      <param name="action">一个表示可以使用声明性安全执行的操作的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.AllowBlankPassword">
      <summary>获取或设置一个值，该值指示是否允许使用空白密码。</summary>
      <returns>如果允许使用空白密码，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.ConnectionString">
      <summary>获取或设置允许的连接字符串。</summary>
      <returns>允许的连接字符串。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.CreatePermission">
      <summary>返回一个根据特性属性配置的 <see cref="T:System.Data.OracleClient.OraclePermission" /> 对象。</summary>
      <returns>
        <see cref="T:System.Data.OracleClient.OraclePermission" /> 对象。</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictionBehavior">
      <summary>标识由 <see cref="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictions" /> 属性标识的连接字符串参数列表是否为所唯一允许的连接字符串参数。</summary>
      <returns>
        <see cref="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictionBehavior" /> 值之一。</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictions">
      <summary>获取或设置允许或不允许的连接字符串参数。</summary>
      <returns>允许或不允许的一个和多个连接字符串参数。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.ShouldSerializeConnectionString">
      <summary>标识特性是否应序列化连接字符串。</summary>
      <returns>如果特性应序列化连接字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>标识特性是否应序列化键限制集合。</summary>
      <returns>如果特性应序列化键限制集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermission">
      <summary>启用用于 SQL Server 的 .NET Framework 数据提供程序，帮助确保用户具有足够的安全级别来访问数据源。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.#ctor(System.Security.Permissions.PermissionState,System.Boolean)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <param name="allowBlankPassword">指示是否允许空白密码。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>向 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象添加新的连接字符串和一组限制性关键字。</summary>
      <param name="connectionString">连接字符串。</param>
      <param name="restrictions">关键限制。</param>
      <param name="behavior">
        <see cref="T:System.Data.KeyRestrictionBehavior" /> 枚举之一。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermission.Copy">
      <summary>以 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 形式返回 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="T:System.Data.SqlClient.SqlClientPermissionAttribute">
      <summary>将某安全操作与自定义安全特性相关联。</summary>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Data.SqlClient.SqlClientPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值，其表示可使用声明性安全执行的操作。</param>
    </member>
    <member name="M:System.Data.SqlClient.SqlClientPermissionAttribute.CreatePermission">
      <summary>返回一个 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象，该对象是根据特性属性配置的。</summary>
      <returns>一个 <see cref="T:System.Data.SqlClient.SqlClientPermission" /> 对象。</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermission">
      <summary>控制事件日志的代码访问权限。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>用指定的访问级别和要使用的计算机的名称，初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
      <param name="permissionAccess">用于指定访问级别的枚举值之一。</param>
      <param name="machineName">在其上读取或写入事件的计算机的名称。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>用指定的权限项初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
      <param name="permissionAccessEntries">表示权限项对象的数组。 <see cref="P:System.Diagnostics.EventLogPermission.PermissionEntries" /> 属性被设置为该值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
      <param name="state">枚举值之一，指定权限状态（对资源完全访问或无权访问）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个集合，它包含此权限请求的权限项。</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAccess">
      <summary>定义 <see cref="T:System.Diagnostics.EventLog" /> 权限类使用的访问级别。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Administer">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以创建事件源、读取现有的日志、删除事件源或日志、对项作出响应、清除事件日志、侦听事件和访问所有事件日志的集合。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Audit">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取现有的日志、删除事件源或日志、对项作出响应、清除事件日志、侦听事件和访问所有事件日志的集合。 <see langword="Note" />此成员现在已过时，请使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /> 代替。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Browse">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取现有的日志。 <see langword="Note" />此成员现在已过时，请使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /> 代替。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Instrument">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取或写入到现有的日志，还可以创建事件源和日志。 <see langword="Note" />此成员现在已过时，请使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /> 代替。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.None">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 没有权限。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Write">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以写入到现有的日志，还可以创建事件源和日志。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAttribute">
      <summary>允许对事件日志进行声明性权限检查。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.CreatePermission">
      <summary>基于 <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName" /> 属性和请求的访问级别（通过特性上的 <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess" /> 属性设置）创建权限。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.MachineName">
      <summary>获取或设置在其上可以读取事件的计算机的名称。</summary>
      <returns>在其上可以读取事件的计算机的名称。 默认值是“.”。</returns>
      <exception cref="T:System.ArgumentException">计算机名称无效。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。 默认值为 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" />。</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntry">
      <summary>定义为 <see cref="T:System.Diagnostics.EventLog" /> 设置的代码访问安全性权限的最小单位。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntry.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。 <see cref="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess" /> 属性被设置为该值。</param>
      <param name="machineName">在其上读取或写入事件的计算机的名称。 <see cref="P:System.Diagnostics.EventLogPermissionEntry.MachineName" /> 属性被设置为该值。</param>
      <exception cref="T:System.ArgumentException">计算机名称无效。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.MachineName">
      <summary>获取在其上读取或写入事件的计算机的名称。</summary>
      <returns>在其上读取或写入事件的计算机的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess">
      <summary>获取在权限请求中使用的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntryCollection">
      <summary>包含 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Add(System.Diagnostics.EventLogPermissionEntry)">
      <summary>向此集合添加指定的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</summary>
      <param name="value">要添加的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</param>
      <returns>所添加的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类型对象的数组，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntryCollection)">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection" />，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Contains(System.Diagnostics.EventLogPermissionEntry)">
      <summary>确定该集合是否包含指定的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</summary>
      <param name="value">要查找的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</param>
      <returns>如果指定的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 属于该集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(System.Diagnostics.EventLogPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组中（从数组中特定的索引开始复制）。</summary>
      <param name="array">接收该集合权限项的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类型的数组。</param>
      <param name="index">从零开始的索引，将从此索引位置开始复制权限项。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(System.Diagnostics.EventLogPermissionEntry)">
      <summary>确定指定权限项在此集合中的索引。</summary>
      <param name="value">要搜索的权限项。</param>
      <returns>指定权限项的从零开始的索引；或者，如果集合中未找到该权限项，则为 -1。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.EventLogPermissionEntry)">
      <summary>将权限项插入此集合中指定的索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入权限项。</param>
      <param name="value">将插入此集合中的权限项。</param>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引位置的对象。</summary>
      <param name="index">集合中从零开始的索引。</param>
      <returns>位于指定索引位置的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnClear">
      <summary>在清除此集合内容之后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的权限项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。</param>
      <param name="value">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从此集合中移除一个新的权限项时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。</param>
      <param name="value">要从 <paramref name="index" /> 处移除的权限项。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在此集合中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。</param>
      <param name="newValue">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Remove(System.Diagnostics.EventLogPermissionEntry)">
      <summary>从此集合中移除指定的权限项。</summary>
      <param name="value">要移除的权限项。</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermission">
      <summary>允许控制 <see cref="T:System.Diagnostics.PerformanceCounter" /> 的代码访问权限。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>使用指定的访问级别、要使用的计算机的名称以及与性能计数器关联的类别来初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值之一。</param>
      <param name="machineName">性能计数器及其关联类别所驻留的服务器。</param>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>使用指定的权限访问级别项初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
      <param name="permissionAccessEntries">一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象数组。 <see cref="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries" /> 属性被设置为该值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" />，它包含此权限请求的权限项。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAccess">
      <summary>定义 <see cref="T:System.Diagnostics.PerformanceCounter" /> 权限类使用的访问级别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取、写入和创建类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Browse">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Instrument">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取和写入类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.None">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 没有权限。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以写入类别。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAttribute">
      <summary>允许声明性性能计数器权限检查。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName">
      <summary>获取或设置性能计数器类别的名称。</summary>
      <returns>性能计数器类别（性能对象）的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission">
      <summary>根据请求的访问级别创建权限，这些访问级别是通过特性上的 <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess" /> 属性设置的。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName">
      <summary>获取或设置性能计数器的计算机名称。</summary>
      <returns>性能计数器类别驻留的服务器。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName" /> 格式无效。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。 默认值为 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" />。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntry">
      <summary>定义为 <see cref="T:System.Diagnostics.PerformanceCounter" /> 设置的代码访问安全性权限的最小单位。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntry.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。 <see cref="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess" /> 属性被设置为该值。</param>
      <param name="machineName">性能计数器类别驻留的服务器。</param>
      <param name="categoryName">此性能计数器关联的性能计数器类别（性能对象）的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 <see langword="null" />。
或
<paramref name="machineName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="permissionAccess" /> 不是有效的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值。
或
<paramref name="machineName" /> 不是有效的计算机名称。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.CategoryName">
      <summary>获取性能计数器类别（性能对象）的名称。</summary>
      <returns>性能计数器类别（性能对象）的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.MachineName">
      <summary>获取性能计数器的类别所驻留的服务器的名称。</summary>
      <returns>类别所驻留的服务器的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess">
      <summary>获取该项的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection">
      <summary>包含 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>向此集合添加指定的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" />。</summary>
      <param name="value">要添加的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</param>
      <returns>所添加的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类型对象的数组，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" />，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>确定此集合是否包含指定的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</summary>
      <param name="value">要查找的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象属于此集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(System.Diagnostics.PerformanceCounterPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组中（从数组中特定的索引开始复制）。</summary>
      <param name="array">接收该集合权限项的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类型的数组。</param>
      <param name="index">从零开始的索引，将从此索引位置开始复制权限项。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>确定指定权限项在此集合中的索引。</summary>
      <param name="value">要搜索的权限项。</param>
      <returns>指定权限项的从零开始的索引；或者，如果集合中未找到该权限项，则为 -1。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>将权限项插入此集合中指定的索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入权限项。</param>
      <param name="value">将插入此集合中的权限项。</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引位置的对象。</summary>
      <param name="index">集合中从零开始的索引。</param>
      <returns>位于指定索引位置的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnClear">
      <summary>在清除此集合内容之后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的权限项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。</param>
      <param name="value">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从此集合中移除一个新的权限项时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。</param>
      <param name="value">要从 <paramref name="index" /> 处移除的权限项。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在此集合中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。</param>
      <param name="newValue">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>从此集合中移除指定的权限项。</summary>
      <param name="value">要移除的权限项。</param>
    </member>
    <member name="T:System.Drawing.Printing.PrintingPermission">
      <summary>控制对打印机的访问。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.#ctor(System.Drawing.Printing.PrintingPermissionLevel)">
      <summary>使用指定的打印访问级别初始化 <see cref="T:System.Drawing.Printing.PrintingPermission" /> 类的新实例。</summary>
      <param name="printingLevel">
        <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" /> 值之一。</param>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用完全限制或不受限制的访问初始化 <see cref="T:System.Drawing.Printing.PrintingPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" />。</exception>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.Copy">
      <summary>创建并返回与当前权限对象相同的副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="element">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回当前权限对象和目标权限对象的交集权限。</summary>
      <param name="target">与当前权限对象类型相同的权限对象。</param>
      <returns>表示当前对象和指定目标交集的新权限对象。 如果交集为空，则此对象为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是与当前权限对象不属于同一类型的对象。</exception>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限对象是否是指定权限的子集。</summary>
      <param name="target">将用于测试子集关系的权限对象。 该对象必须与当前权限对象的类型相同。</param>
      <returns>如果当前权限对象是 <paramref name="target" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是与当前权限对象不属于同一类型的对象。</exception>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.IsUnrestricted">
      <summary>获取一个值，该值指示该权限是否不受限制。</summary>
      <returns>如果权限不受限制，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Drawing.Printing.PrintingPermission.Level">
      <summary>获取或设置代码的打印访问级别。</summary>
      <returns>
        <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" /> 值之一。</returns>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermission.Union(System.Security.IPermission)">
      <summary>创建一个将权限对象和目标权限对象组合在一起的权限。</summary>
      <param name="target">与当前权限对象类型相同的权限对象。</param>
      <returns>新权限对象，它表示当前权限对象和指定权限对象的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 是与当前权限对象不属于同一类型的对象。</exception>
    </member>
    <member name="T:System.Drawing.Printing.PrintingPermissionAttribute">
      <summary>允许进行声明打印权限检查。</summary>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Drawing.Printing.PrintingPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Drawing.Printing.PrintingPermissionAttribute.CreatePermission">
      <summary>根据请求的访问级别创建权限，这些访问级别是通过特性上的 <see cref="P:System.Drawing.Printing.PrintingPermissionAttribute.Level" /> 属性设置的。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
    </member>
    <member name="P:System.Drawing.Printing.PrintingPermissionAttribute.Level">
      <summary>设置或获取允许的打印类型。</summary>
      <returns>
        <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" /> 值之一。</returns>
      <exception cref="T:System.ArgumentException">该值不是 <see cref="T:System.Drawing.Printing.PrintingPermissionLevel" /> 值之一。</exception>
    </member>
    <member name="T:System.Drawing.Printing.PrintingPermissionLevel">
      <summary>指定允许代码进行的打印类型。</summary>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting">
      <summary>提供对所有打印机的完全访问。</summary>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting">
      <summary>提供到默认打印机的编程打印，以及通过一个半限制对话框进行的安全打印。 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /> 是 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.AllPrinting" /> 的子集。</summary>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.NoPrinting">
      <summary>禁止对打印机的访问。 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.NoPrinting" /> 是 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" /> 的子集。</summary>
    </member>
    <member name="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting">
      <summary>仅允许从受限制的对话框中提供打印。 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.SafePrinting" /> 是 <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /> 的子集。</summary>
    </member>
    <member name="T:System.Net.DnsPermission">
      <summary>控制对网络上域名系统 (DNS) 服务器的访问权限。</summary>
    </member>
    <member name="M:System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>创建 <see cref="T:System.Net.DnsPermission" /> 类的新实例，该类或者允许无限制的 DNS 访问，或者不允许 DNS 访问。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Copy">
      <summary>创建当前权限实例的相同副本。</summary>
      <returns>
        <see cref="T:System.Net.DnsPermission" /> 类的新实例，是当前实例的相同副本。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.FromXml(System.Security.SecurityElement)">
      <summary>以 XML 编码重新构造 <see cref="T:System.Net.DnsPermission" /> 实例。</summary>
      <param name="securityElement">用于重新构造 <see cref="T:System.Net.DnsPermission" /> 实例的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是一个 <see cref="T:System.Net.DnsPermission" /> 元素。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Intersect(System.Security.IPermission)">
      <summary>创建一个是当前权限实例与指定权限实例的交集的权限实例。</summary>
      <param name="target">要与当前实例求交的 <see cref="T:System.Net.DnsPermission" /> 实例。</param>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 实例，表示当前 <see cref="T:System.Net.DnsPermission" /> 实例与指定 <see cref="T:System.Net.DnsPermission" /> 实例的交集；如果交集为空，则为 <see langword="null" />。 如果当前实例和 <paramref name="target" /> 都是不受限制的，则该方法将返回一个不受限制的、新的 <see cref="T:System.Net.DnsPermission" /> 实例；否则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" />，也不是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限实例是否是指定权限实例的子集。</summary>
      <param name="target">第二个需测试子集关系的 <see cref="T:System.Net.DnsPermission" /> 实例。</param>
      <returns>如果当前实例是不受限制的，并且 <paramref name="target" /> 或者为 <see langword="false" /> 或者是不受限制的，则为 <see langword="null" />；否则，为 <see langword="true" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" />，也不是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsUnrestricted">
      <summary>检查对象的整体权限状态。</summary>
      <returns>如果 <see cref="T:System.Net.DnsPermission" /> 实例是使用 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 创建的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.DnsPermission" /> 实例及其当前状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" /> 实例，包含安全对象的 XML 编码表示形式，包括状态信息。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.Union(System.Security.IPermission)">
      <summary>创建一个是当前权限实例与指定权限实例的并集的权限实例。</summary>
      <param name="target">要与当前实例组合的 <see cref="T:System.Net.DnsPermission" /> 实例。</param>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 实例，表示当前 <see cref="T:System.Net.DnsPermission" /> 实例与指定 <see cref="T:System.Net.DnsPermission" /> 实例的并集。 如果 <paramref name="target" /> 为 <see langword="null" />，则该方法将返回当前实例的一个副本。 如果当前实例或 <paramref name="target" /> 是不受限制的，则此方法返回不受限制的 <see cref="T:System.Net.DnsPermission" /> 实例；否则，返回受限制的 <see cref="T:System.Net.DnsPermission" /> 实例。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" />，也不是 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Net.DnsPermissionAttribute">
      <summary>指定从域名服务器中请求信息的权限。</summary>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Net.DnsPermissionAttribute" /> 值初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Net.DnsPermission" /> 类的新实例。</summary>
      <returns>与安全性声明相对应的 <see cref="T:System.Net.DnsPermission" />。</returns>
    </member>
    <member name="T:System.Net.EndpointPermission">
      <summary>定义由 <see cref="T:System.Net.SocketPermission" /> 实例授权的终结点。</summary>
    </member>
    <member name="M:System.Net.EndpointPermission.Equals(System.Object)">
      <summary>确定指定的 <see langword="Object" /> 是否等同于当前的 <see langword="Object" />。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Object" /> 进行比较的 <see langword="Object" />。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see langword="Object" />，则为 <see langword="Object" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.EndpointPermission.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Hostname">
      <summary>获取与此终结点关联的服务器的 DNS 主机名或 IP 地址。</summary>
      <returns>包含服务器的 DNS 主机名或 IP 地址的字符串。</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Port">
      <summary>获取与此终结点关联的网络端口号。</summary>
      <returns>与此请求关联的网络端口号，或 <see cref="F:System.Net.SocketPermission.AllPorts" />。</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Transport">
      <summary>获取与此终结点关联的传输类型。</summary>
      <returns>
        <see cref="T:System.Net.TransportType" /> 值之一。</returns>
    </member>
    <member name="T:System.Net.Mail.SmtpAccess">
      <summary>指定允许的简单邮件传输协议 (SMTP) 服务器访问级别。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.Connect">
      <summary>连接到默认端口（端口 25）上的 SMTP 主机。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort">
      <summary>连接到任何端口上的 SMTP 主机。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.None">
      <summary>不能访问 SMTP 主机。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpPermission">
      <summary>控制对简单邮件传输协议 (SMTP) 服务器的访问。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Boolean)">
      <summary>使用指定的状态初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类的新实例。</summary>
      <param name="unrestricted">如果新权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Net.Mail.SmtpAccess)">
      <summary>使用指定的访问级别初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的权限状态值初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="P:System.Net.Mail.SmtpPermission.Access">
      <summary>获取由权限控制的 SMTP 服务器的访问级别。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.AddPermission(System.Net.Mail.SmtpAccess)">
      <summary>将指定的访问级别值添加到权限。</summary>
      <param name="access">
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpPermission" />，与当前权限相同。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.FromXml(System.Security.SecurityElement)">
      <summary>使用指定的 XML 编码设置权限的状态。</summary>
      <param name="securityElement">用于设置当前权限的状态的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不描述 <see cref="T:System.Net.Mail.SmtpPermission" /> 对象。

或 -
<paramref name="securityElement" /> 不包含重建权限所需的状态信息。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">与当前权限相交的 <see cref="T:System.Security.IPermission" />。 它必须与当前权限属于同一类型。</param>
      <returns>
        <see cref="T:System.Net.Mail.SmtpPermission" />，表示当前权限与指定权限的交集。 如果交集为空或 <see langword="null" /> 为 <paramref name="target" />，则返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前权限是否为指定权限的一个子集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" />，将对其进行测试以确定子集关系。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.ToXml">
      <summary>创建权限状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" />，包含当前权限的 XML 编码。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的 <see cref="T:System.Security.IPermission" />。</param>
      <returns>表示同时兼具当前权限和指定权限的新 <see cref="T:System.Net.Mail.SmtpPermission" /> 权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="T:System.Net.Mail.SmtpPermissionAttribute">
      <summary>控制对简单邮件传输协议 (SMTP) 服务器的访问。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一，用于指定权限行为。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpPermissionAttribute.Access">
      <summary>获取或设置由该特性控制的对 SMTP 服务器的访问级别。</summary>
      <returns>一个 <see cref="T:System.String" /> 值。 有效值为 "Connect" 和 "None"。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.CreatePermission">
      <summary>创建可以与 <see cref="T:System.Security.Permissions.SecurityAction" /> 一起存储在程序集的元数据中的权限对象。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.SmtpPermission" /> 实例。</returns>
    </member>
    <member name="T:System.Net.NetworkAccess">
      <summary>指定网络访问权限。</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Accept">
      <summary>指示允许应用程序在本地资源上接受来自 Internet 的连接。 请注意，这是对本地主机的保护，这种保护使用 Accept 为本地资源（地址/端口）授予访问权限。 当套接字尝试绑定到此本地资源时，将执行权限检查以确定资源上是否存在 Accept。</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Connect">
      <summary>指示允许应用程序连接到特定的 Internet 资源。 请注意，对于远程主机资源，不执行任何确定 Connect 权限是否存在的检查。 这是因为连接远程主机的端口是未知的，而且无法预先生成合适的权限。 应用程序负责检查尝试连接到侦听套接字的远程主机的权限。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationAccess">
      <summary>指定访问网络接口信息和通信统计数据的权限。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.None">
      <summary>不能访问网络信息。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping">
      <summary>对网络信息的 Ping 访问。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Read">
      <summary>可以读取网络信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermission">
      <summary>控制对本地计算机的网络信息和通信统计信息的访问。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>使用指定的 <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermission.Access">
      <summary>获取对此权限控制的网络信息的访问级别。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.AddPermission(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>将指定的值添加到此权限中。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Copy">
      <summary>创建并返回此权限的完全相同副本。</summary>
      <returns>与当前权限完全相同的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.FromXml(System.Security.SecurityElement)">
      <summary>使用指定的 XML 编码设置此权限的状态。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" />，包含用于设置当前权限状态的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是权限编码。
或
<paramref name="securityElement" /> 不是 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 的编码。
或
<paramref name="securityElement" /> 有无效的 <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的交集。</summary>
      <param name="target">与当前权限相交的 <see cref="T:System.Security.IPermission" />。 它必须与当前权限属于同一类型。</param>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />，表示当前权限与指定权限的交集。 如果交集为空或 <paramref name="target" /> 为 <see langword="null" />，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" />，将对其进行测试以确定子集关系。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.ToXml">
      <summary>创建此权限状态的 XML 编码。</summary>
      <returns>包含当前权限的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是此权限与指定权限的并集。</summary>
      <param name="target">要与当前权限合并的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 权限。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 执行安全操作。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">指定权限行为的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.Access">
      <summary>获取或设置网络信息访问级别。</summary>
      <returns>指定访问级别的字符串。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 对象。</summary>
      <returns>与此属性对应的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</returns>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission">
      <summary>指定用于定义 <see cref="N:System.Net.PeerToPeer.Collaboration" /> 对象权限或在这些权限中使用的值。</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 的新实例。 调用构造函数时，将传递此实例的初始 <see cref="T:System.Security.Permissions.PermissionState" />。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举中的值之一。</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Copy">
      <summary>创建并返回当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 的一个副本。</summary>
      <returns>一个 <see cref="T:System.Object" />，其中包含当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 实例的一个副本。</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.FromXml(System.Security.SecurityElement)">
      <summary>表示用于对安全对象进行编码的 XML 对象模型。</summary>
      <param name="e">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">该参数为无效权限元素。
或
该参数不包含有效类型或类。
或
不支持该参数的版本号。</exception>
      <exception cref="T:System.ArgumentNullException">该参数为 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 与指定 <paramref name="target" /> 权限的交集。</summary>
      <param name="target">要与当前权限求 <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Intersect(System.Security.IPermission)" /> 的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，表示当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 与指定 <paramref name="target" /> 权限的交集。 如果交集为空，则此新权限是一个 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
      <exception cref="T:System.ArgumentException">目标参数不是一个 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />），并且不是与当前权限相同的类的实例。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 是否为指定 <paramref name="target" /> 权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">该参数为 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.IsUnrestricted">
      <summary>返回一个值，指定当前的 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 与指定 <paramref name="target" /> 权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，表示当前 <see cref="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission.Union(System.Security.IPermission)" /> 与指定权限的 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" />。</returns>
      <exception cref="T:System.ArgumentException">该参数为 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission" /> 执行安全操作。 无法继承此类。</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">指定一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</param>
    </member>
    <member name="M:System.Net.PeerToPeer.Collaboration.PeerCollaborationPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>一个新 <see cref="T:System.Security.IPermission" /> 对象。</returns>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpPermission">
      <summary>指定在 <see cref="N:System.Net.PeerToPeer" /> 对象权限中使用的值。</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化具有所提供的初始权限状态的 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举中的值之一。</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Copy">
      <summary>创建并返回当前 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 的一个相同副本。</summary>
      <returns>具有 IPermission 接口的对象，其实例包含 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 的当前实例的副本。</returns>
      <exception cref="T:System.ArgumentException">参数不是有效的 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 元素。
或
不支持该参数的版本号。</exception>
      <exception cref="T:System.ArgumentNullException">该参数为 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">参数不是有效的 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 元素。
或
不支持该参数的版本号。</exception>
      <exception cref="T:System.ArgumentNullException">该参数为 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 与指定权限的交集。</summary>
      <param name="target">与当前权限 <see cref="M:System.Net.PeerToPeer.PnrpPermission.Intersect(System.Security.IPermission)" /> 的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，它表示当前 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 与指定权限的交集。 如果交集为空，则此新权限是一个 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
      <exception cref="T:System.ArgumentException">目标参数不是一个 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />），并且不是与当前权限相同的类的实例。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">目标参数不是一个 <see langword="null" /> 引用（在 Visual Basic 中为 <see langword="Nothing" />），并且不是与当前权限相同的类的实例。</exception>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.IsUnrestricted">
      <summary>返回一个值，指定当前的 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> 对象，该对象包含权限的 XML 编码（包括任何状态信息）。</returns>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，表示当前 <see cref="M:System.Net.PeerToPeer.PnrpPermission.Union(System.Security.IPermission)" /> 与指定权限的 <see cref="T:System.Net.PeerToPeer.PnrpPermission" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数无效。</exception>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Net.PeerToPeer.PnrpPermission" /> 执行安全操作。</summary>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Net.PeerToPeer.PnrpPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Net.PeerToPeer.PnrpPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.IPermission" />。</summary>
      <returns>一个新 <see cref="T:System.Security.IPermission" /> 对象。</returns>
    </member>
    <member name="T:System.Net.PeerToPeer.PnrpScope">
      <summary>指定 PNRP 群的不同范围。</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.All">
      <summary>允许所有 IP 地址向 PNRP <see cref="T:System.Net.PeerToPeer.Cloud" /> 进行注册。 任一范围和所有范围之间没有任何区别。</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.Global">
      <summary>该范围是全局范围；允许所有有效的 IP 地址向 PNRP <see cref="T:System.Net.PeerToPeer.Cloud" /> 进行注册。</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.LinkLocal">
      <summary>该范围是链接本地范围；只有为本地局域子网定义的 IP 地址才能向 PNRP <see cref="T:System.Net.PeerToPeer.Cloud" /> 进行注册。</summary>
    </member>
    <member name="F:System.Net.PeerToPeer.PnrpScope.SiteLocal">
      <summary>该范围是站点本地范围；只有为站点定义的 IP 地址才能向 PNRP 进行注册。</summary>
    </member>
    <member name="T:System.Net.SocketPermission">
      <summary>控制在传输地址上建立或接受连接的权利。</summary>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>用指定的权限初始化给定传输地址的 <see cref="T:System.Net.SocketPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkAccess" /> 值之一。</param>
      <param name="transport">
        <see cref="T:System.Net.TransportType" /> 值之一。</param>
      <param name="hostName">该传输地址的主机名。</param>
      <param name="portNumber">该传输地址的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Net.SocketPermission" /> 类的新实例，该类允许对 <see cref="T:System.Net.Sockets.Socket" /> 的无限制访问或不允许对 <see cref="T:System.Net.Sockets.Socket" /> 的访问。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="P:System.Net.SocketPermission.AcceptList">
      <summary>获取标识在此权限实例下可以接受的终结点的 <see cref="T:System.Net.EndpointPermission" /> 实例列表。</summary>
      <returns>一个实例，它实现包含 <see cref="T:System.Collections.IEnumerator" /> 实例的 <see cref="T:System.Net.EndpointPermission" /> 接口。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.AddPermission(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>向传输地址的权限集添加权限。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkAccess" /> 值之一。</param>
      <param name="transport">
        <see cref="T:System.Net.TransportType" /> 值之一。</param>
      <param name="hostName">该传输地址的主机名。</param>
      <param name="portNumber">该传输地址的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="F:System.Net.SocketPermission.AllPorts">
      <summary>定义表示所有端口的常数。</summary>
    </member>
    <member name="P:System.Net.SocketPermission.ConnectList">
      <summary>获取标识在此权限实例下可以连接到的终结点的 <see cref="T:System.Net.EndpointPermission" /> 实例列表。</summary>
      <returns>一个实例，它实现包含 <see cref="T:System.Collections.IEnumerator" /> 实例的 <see cref="T:System.Net.EndpointPermission" /> 接口。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Copy">
      <summary>创建 <see cref="T:System.Net.SocketPermission" /> 实例的副本。</summary>
      <returns>
        <see cref="T:System.Net.SocketPermission" /> 类的新实例，是当前实例的副本。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造一个 <see cref="T:System.Net.SocketPermission" /> 实例用于 XML 编码。</summary>
      <param name="securityElement">用来重新构造 <see cref="T:System.Net.SocketPermission" /> 实例的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是此类型的权限元素。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.Intersect(System.Security.IPermission)">
      <summary>返回两个 <see cref="T:System.Net.SocketPermission" /> 实例的逻辑交集。</summary>
      <param name="target">要与当前实例求交的 <see cref="T:System.Net.SocketPermission" /> 实例。</param>
      <returns>表示两个 <see cref="T:System.Net.SocketPermission" /> 实例的交集的 <see cref="T:System.Net.SocketPermission" /> 实例。 如果该交集为空，则该方法返回 <see langword="null" />。 如果 <paramref name="target" /> 参数为空引用，则该方法返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是 <see cref="T:System.Net.SocketPermission" />。</exception>
      <exception cref="T:System.Security.SecurityException">没有向方法调用方授予 <see cref="T:System.Net.DnsPermission" />。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">
        <see cref="T:System.Net.SocketPermission" />，将对其进行测试以确定子集关系。</param>
      <returns>如果 <paramref name="target" /> 为 <see langword="null" />，而且当前实例没有定义权限，则此方法返回 <see langword="true" />；否则返回 <see langword="false" />。 如果 <paramref name="target" /> 不为 <see langword="null" />，而且当前实例定义了 <paramref name="target" /> 权限的子集，则该方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Sockets.SocketException" />。</exception>
      <exception cref="T:System.Security.SecurityException">没有向方法调用方授予 <see cref="T:System.Net.DnsPermission" />。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsUnrestricted">
      <summary>检查对象的整体权限状态。</summary>
      <returns>如果 <see cref="T:System.Net.SocketPermission" /> 实例是用来自 <see cref="T:System.Security.Permissions.PermissionState" /> 的 <see langword="true" /> 值创建的，则为 <see langword="Unrestricted" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.SocketPermission" /> 实例及其当前状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" /> 实例，包含 <see cref="T:System.Net.SocketPermission" /> 实例的 XML 编码表示形式（包括状态信息）。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Union(System.Security.IPermission)">
      <summary>返回两个 <see cref="T:System.Net.SocketPermission" /> 实例的逻辑并集。</summary>
      <param name="target">要与当前实例组合的 <see cref="T:System.Net.SocketPermission" /> 实例。</param>
      <returns>表示两个 <see cref="T:System.Net.SocketPermission" /> 实例的并集的 <see cref="T:System.Net.SocketPermission" /> 实例。 如果 <paramref name="target" /> 参数为 <see langword="null" />，则返回当前实例的副本。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.SocketPermission" />。</exception>
    </member>
    <member name="T:System.Net.SocketPermissionAttribute">
      <summary>指定安全操作以控制 <see cref="T:System.Net.Sockets.Socket" /> 连接。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值初始化 <see cref="T:System.Net.SocketPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Access">
      <summary>获取或设置该 <see cref="T:System.Net.SocketPermissionAttribute" /> 允许的网络访问方法。</summary>
      <returns>一个字符串，包含 <see cref="T:System.Net.SocketPermissionAttribute" /> 的该实例允许的网络访问方法。 有效值是“Accept”和“Connect”。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Access" /> 属性不为 <see langword="null" />。 若要指定多个 Access 方法，请额外使用一个特性声明语句。</exception>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Net.SocketPermission" /> 类的新实例。</summary>
      <returns>与安全声明对应的 <see cref="T:System.Net.SocketPermission" /> 类的实例。</returns>
      <exception cref="T:System.ArgumentException">一个或多个当前实例的 <see cref="P:System.Net.SocketPermissionAttribute.Access" />、<see cref="P:System.Net.SocketPermissionAttribute.Host" />、<see cref="P:System.Net.SocketPermissionAttribute.Transport" /> 或 <see cref="P:System.Net.SocketPermissionAttribute.Port" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Host">
      <summary>获取或设置此 <see cref="T:System.Net.SocketPermissionAttribute" /> 指定的 DNS 主机名或 IP 地址。</summary>
      <returns>一个字符串，包含与 <see cref="T:System.Net.SocketPermissionAttribute" /> 的该实例关联的 DNS 主机名或 IP 地址。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Host" /> 不为 <see langword="null" />。 若要指定多个主机，请使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Port">
      <summary>获取或设置与此 <see cref="T:System.Net.SocketPermissionAttribute" /> 关联的端口号。</summary>
      <returns>一个字符串，包含与 <see cref="T:System.Net.SocketPermissionAttribute" /> 的该实例关联的端口号。</returns>
      <exception cref="T:System.ArgumentException">尝试设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Port" /> 属性为 <see langword="null" />。 若要指定多个端口，请使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Transport">
      <summary>获取或设置此 <see cref="T:System.Net.TransportType" /> 指定的 <see cref="T:System.Net.SocketPermissionAttribute" />。</summary>
      <returns>一个字符串，包含与此 <see cref="T:System.Net.TransportType" /> 关联的 <see cref="T:System.Net.SocketPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.SocketPermissionAttribute.Transport" /> 不为 <see langword="null" />。 若要指定多个传输类型，请使用一个额外的特性声明语句。</exception>
    </member>
    <member name="T:System.Net.TransportType">
      <summary>为 <see cref="T:System.Net.SocketPermission" /> 和 <see cref="T:System.Net.Sockets.Socket" /> 类定义传输类型。</summary>
    </member>
    <member name="F:System.Net.TransportType.All">
      <summary>所有传输类型。</summary>
    </member>
    <member name="F:System.Net.TransportType.Connectionless">
      <summary>传输类型是无连接的，如 UDP。 指定该值的效果与指定 <see cref="F:System.Net.TransportType.Udp" /> 相同。</summary>
    </member>
    <member name="F:System.Net.TransportType.ConnectionOriented">
      <summary>传输是面向连接的，如 TCP。 指定该值的效果与指定 <see cref="F:System.Net.TransportType.Tcp" /> 相同。</summary>
    </member>
    <member name="F:System.Net.TransportType.Tcp">
      <summary>TCP 传输。</summary>
    </member>
    <member name="F:System.Net.TransportType.Udp">
      <summary>UDP 传输。</summary>
    </member>
    <member name="T:System.Net.WebPermission">
      <summary>控制访问 HTTP Internet 资源的权限。</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)">
      <summary>使用指定 URI 的指定访问权限初始化 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
      <param name="access">一个 NetworkAccess 值，指示向指定的 URI 授予哪种访问权限。 <see cref="F:System.Net.NetworkAccess.Accept" /> 指示允许应用程序在本地资源上接受来自 Internet 的连接。 <see cref="F:System.Net.NetworkAccess.Connect" /> 指示允许应用程序连接到特定的 Internet 资源。</param>
      <param name="uriString">向其授予访问权限的 URI 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>使用指定 URI 正则表达式的指定访问权限初始化 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
      <param name="access">一个 <see cref="T:System.Net.NetworkAccess" /> 值，指示向指定的 URI 授予哪种访问权限。 <see cref="F:System.Net.NetworkAccess.Accept" /> 指示允许应用程序在本地资源上接受来自 Internet 的连接。 <see cref="F:System.Net.NetworkAccess.Connect" /> 指示允许应用程序连接到特定的 Internet 资源。</param>
      <param name="uriRegex">一个正则表达式，描述要对其授予访问权限的 URI。</param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 类的新实例，该实例允许所有命令或禁止所有命令。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</param>
    </member>
    <member name="P:System.Net.WebPermission.AcceptList">
      <summary>此属性返回该 <see cref="T:System.Net.WebPermission" /> 持有的单个接受权限的枚举。 返回枚举中包含的可能对象类型是 <see cref="T:System.String" /> 和 <see cref="T:System.Text.RegularExpressions.Regex" />。</summary>
      <returns>包含 accept 权限的 <see cref="T:System.Collections.IEnumerator" /> 接口。</returns>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)">
      <summary>将具有指定访问权限的指定 URI 字符串添加到当前 <see cref="T:System.Net.WebPermission" />。</summary>
      <param name="access">指定授予 URI 的访问权限的 <see cref="T:System.Net.NetworkAccess" />。</param>
      <param name="uriString">一个字符串，描述向其授予访问权限的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>将具有指定访问权限的指定 URI 添加到当前 <see cref="T:System.Net.WebPermission" />。</summary>
      <param name="access">一个 NetworkAccess，指定授予 URI 的访问权限。</param>
      <param name="uriRegex">一个正则表达式，描述向其授予访问权限的 URI 集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriRegex" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Net.WebPermission.ConnectList">
      <summary>此属性返回该 <see cref="T:System.Net.WebPermission" /> 持有的单个连接权限的枚举。 返回枚举中包含的可能对象类型是 <see cref="T:System.String" /> 和 <see cref="T:System.Text.RegularExpressions.Regex" />。</summary>
      <returns>包含 connect 权限的 <see cref="T:System.Collections.IEnumerator" /> 接口。</returns>
    </member>
    <member name="M:System.Net.WebPermission.Copy">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 的副本。</summary>
      <returns>
        <see cref="T:System.Net.WebPermission" /> 类的新实例，该实例与原始对象具有相同的值。</returns>
    </member>
    <member name="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造 <see cref="T:System.Net.WebPermission" />。</summary>
      <param name="securityElement">通过其重新构造 <see cref="T:System.Net.WebPermission" /> 的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 参数为 <see langword="null." /></exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是此类型的权限元素。</exception>
    </member>
    <member name="M:System.Net.WebPermission.Intersect(System.Security.IPermission)">
      <summary>返回两个 <see cref="T:System.Net.WebPermission" /> 实例的逻辑交集。</summary>
      <param name="target">与当前实例进行比较的 <see cref="T:System.Net.WebPermission" />。</param>
      <returns>一个新的 <see cref="T:System.Net.WebPermission" />，表示当前实例和 <paramref name="target" /> 参数的交集。 如果该交集为空，则该方法返回 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" />，或者不是 <see cref="T:System.Net.WebPermission" /> 类型</exception>
    </member>
    <member name="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Net.WebPermission" /> 是否是指定对象的子集。</summary>
      <param name="target">要与当前 <see cref="T:System.Net.WebPermission" /> 进行比较的 <see cref="T:System.Net.WebPermission" />。</param>
      <returns>如果当前实例是 <see langword="true" /> 参数的子集，则为 <paramref name="target" />；否则为 <see langword="false" />。 如果目标为 <see langword="null" />，则对于受限制的、空的当前权限，该方法返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">目标参数不是 <see cref="T:System.Net.WebPermission" /> 的实例。</exception>
      <exception cref="T:System.NotSupportedException">当前实例包含 Regex 编码的权限，并且目标实例中未找到完全相同的权限。</exception>
    </member>
    <member name="M:System.Net.WebPermission.IsUnrestricted">
      <summary>检查 <see cref="T:System.Net.WebPermission" /> 的整体权限状态。</summary>
      <returns>如果 <see langword="true" /> 是使用 <see cref="T:System.Net.WebPermission" /><see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 创建的，则为 <see cref="T:System.Security.Permissions.PermissionState" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Net.WebPermission.ToXml">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" />，包含 <see cref="T:System.Net.WebPermission" />（包括状态信息）的 XML 编码表示形式。</returns>
    </member>
    <member name="M:System.Net.WebPermission.Union(System.Security.IPermission)">
      <summary>返回 <see cref="T:System.Net.WebPermission" /> 类的两个实例之间的逻辑并集。</summary>
      <param name="target">与当前 <see cref="T:System.Net.WebPermission" /> 进行合并的 <see cref="T:System.Net.WebPermission" />。</param>
      <returns>表示当前实例和 <see cref="T:System.Net.WebPermission" /> 参数的并集的 <paramref name="target" />。 如果其中任何一个 <see langword="WebPermission" /> 是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />，则该方法返回一个为 <see cref="T:System.Net.WebPermission" /> 的 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。 如果目标为 <see langword="null" />，则该方法将返回当前 <see cref="T:System.Net.WebPermission" /> 的副本。</returns>
      <exception cref="T:System.ArgumentException">目标不为 <see langword="null" />，也不是 <see cref="T:System.Net.WebPermission" /> 类型。</exception>
    </member>
    <member name="T:System.Net.WebPermissionAttribute">
      <summary>指定权限以访问 Internet 资源。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>用指定可在此类上执行的安全操作的值初始化 <see cref="T:System.Net.WebPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Accept">
      <summary>获取或设置当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI 字符串。</summary>
      <returns>一个字符串，包含当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.WebPermissionAttribute.Accept" /> 不为 <see langword="null" />。 如果希望指定多个 Accept URI，请使用附加的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.AcceptPattern">
      <summary>获取或设置正则表达式模式，该正则表达式模式描述当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI。</summary>
      <returns>一个字符串，包含描述当前 <see cref="T:System.Net.WebPermissionAttribute" /> 接受的 URI 的正则表达式模式。 必须根据对 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数字符串编码的规则对该字符串进行转义。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.WebPermissionAttribute.AcceptPattern" /> 不为 <see langword="null" />。 如果希望指定多个 Accept URI，请使用附加的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Connect">
      <summary>获取或设置当前 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接字符串。</summary>
      <returns>一个字符串，包含当前 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.WebPermissionAttribute.Connect" /> 不为 <see langword="null" />。 如果希望指定多个 Connect URI，请使用附加的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.ConnectPattern">
      <summary>获取或设置描述当前 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接的正则表达式模式。</summary>
      <returns>一个字符串，包含描述该 <see cref="T:System.Net.WebPermissionAttribute" /> 控制的 URI 连接的正则表达式模式。</returns>
      <exception cref="T:System.ArgumentException">当尝试设置该值时，<see cref="P:System.Net.WebPermissionAttribute.ConnectPattern" /> 不为 <see langword="null" />。 如果希望指定多个 Connect URI，请使用附加的特性声明语句。</exception>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
      <returns>与安全声明相对应的 <see cref="T:System.Net.WebPermission" />。</returns>
    </member>
    <member name="T:System.Security.CodeAccessPermission">
      <summary>定义所有代码访问权限的基础结构。</summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.#ctor">
      <summary>初始化 <see cref="T:System.Security.CodeAccessPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Assert">
      <summary>声明调用代码能够通过调用此方法的代码，访问受权限请求保护的资源，即使未对堆栈中处于较高位置的调用方授予访问该资源的权限。 使用 <see cref="M:System.Security.CodeAccessPermission.Assert" /> 会引起安全问题。</summary>
      <exception cref="T:System.Security.SecurityException">调用代码没有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />。

或 -
已存在一个用于当前帧的活动的 <see cref="M:System.Security.CodeAccessPermission.Assert" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Copy">
      <summary>由派生类实现时，创建并返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Demand">
      <summary>如果未对调用堆栈中处于较高位置的所有调用方授予当前实例所指定的权限，则在运行时强制 <see cref="T:System.Security.SecurityException" />。</summary>
      <exception cref="T:System.Security.SecurityException">调用堆栈中处于较高位置的调用方不具有当前实例所指定的权限。

或 -
调用堆栈中处于较高位置的调用方已经对当前权限对象调用了 <see cref="M:System.Security.CodeAccessPermission.Deny" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Deny">
      <summary>防止处于调用堆栈较高位置的调用函数使用可以调用此方法来访问当前实例指定资源的代码。</summary>
      <exception cref="T:System.Security.SecurityException">已存在一个用于当前帧的活动的 <see cref="M:System.Security.CodeAccessPermission.Deny" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.CodeAccessPermission" /> 对象是否等于当前的 <see cref="T:System.Security.CodeAccessPermission" />。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Security.CodeAccessPermission" /> 比较的 <see cref="T:System.Security.CodeAccessPermission" /> 对象。</param>
      <returns>如果指定的 <see langword="true" /> 对象等于当前的 <see cref="T:System.Security.CodeAccessPermission" />，则为 <see cref="T:System.Security.CodeAccessPermission" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)">
      <summary>当在派生类中替代时，用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="elem">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 参数不包含与当前实例类型相同的实例的 XML 编码。

或 -
不支持 <paramref name="elem" /> 参数的版本号。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.GetHashCode">
      <summary>获取 <see cref="T:System.Security.CodeAccessPermission" /> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Security.CodeAccessPermission" /> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)">
      <summary>由派生类实现时，创建并返回属于当前权限和指定权限的交集的权限。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且是与当前权限不属于同一类的实例。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>由派生类实现时，确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.PermitOnly">
      <summary>防止处于调用堆栈较高位置的调用函数使用此代码，此代码将调用此方法来访问除当前实例指定的资源以外的所有资源。</summary>
      <exception cref="T:System.Security.SecurityException">已存在一个用于当前帧的活动的 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertAll">
      <summary>导致当前帧以前所有的重写被删除且不再有效。</summary>
      <exception cref="T:System.InvalidOperationException">此当前帧没有以前的 <see cref="M:System.Security.CodeAccessPermission.Assert" />、<see cref="M:System.Security.CodeAccessPermission.Deny" /> 或 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertAssert">
      <summary>导致当前帧以前所有的 <see cref="M:System.Security.CodeAccessPermission.Assert" /> 被删除且不再有效。</summary>
      <exception cref="T:System.InvalidOperationException">当前帧不再具有以前的 <see cref="M:System.Security.CodeAccessPermission.Assert" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertDeny">
      <summary>导致当前帧以前所有的 <see cref="M:System.Security.CodeAccessPermission.Deny" /> 被删除且不再有效。</summary>
      <exception cref="T:System.InvalidOperationException">当前帧不再具有以前的 <see cref="M:System.Security.CodeAccessPermission.Deny" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.RevertPermitOnly">
      <summary>导致当前帧以前所有的 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> 被删除且不再有效。</summary>
      <exception cref="T:System.InvalidOperationException">当前帧不再具有以前的 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" />。</exception>
    </member>
    <member name="M:System.Security.CodeAccessPermission.ToString">
      <summary>创建并返回当前权限对象的字符串表示形式。</summary>
      <returns>当前权限对象的字符串表示形式。</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.ToXml">
      <summary>当在派生类中重写时，创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)">
      <summary>当在派生类中重写时，则创建属于当前权限与指定权限的并集的权限。</summary>
      <param name="other">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="other" /> 参数不是 <see langword="null" />。 当传递 <see langword="null" /> 时，此方法仅在此级别受支持。</exception>
    </member>
    <member name="T:System.Security.HostProtectionException">
      <summary>检测到被拒绝的主机资源时引发的异常。</summary>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Security.HostProtectionException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用提供的序列化信息和流上下文初始化 <see cref="T:System.Security.HostProtectionException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Security.HostProtectionException" /> 类的新实例。</summary>
      <param name="message">描述错误的消息。</param>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.HostProtectionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="e">导致当前异常的异常。 如果 <c>innerException</c> 参数不为 <see langword="null" />，则当前异常会在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="M:System.Security.HostProtectionException.#ctor(System.String,System.Security.Permissions.HostProtectionResource,System.Security.Permissions.HostProtectionResource)">
      <summary>用指定的错误消息、受保护的主机资源和导致引发异常的主机资源初始化 <see cref="T:System.Security.HostProtectionException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="protectedResources">枚举值的按位组合，这些值指定部分受信任的代码不可访问的主机资源。</param>
      <param name="demandedResources">枚举值的按位组合，这些值指定所需的主机资源。</param>
    </member>
    <member name="P:System.Security.HostProtectionException.DemandedResources">
      <summary>获取或设置导致引发异常的要求的主机保护资源。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.HostProtectionResource" /> 值的按位组合，用于标识导致引发异常的保护资源。 默认值为 <see cref="F:System.Security.Permissions.HostProtectionResource.None" />。</returns>
    </member>
    <member name="P:System.Security.HostProtectionException.ProtectedResources">
      <summary>获取或设置部分受信任的代码不可访问的主机保护资源。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.HostProtectionResource" /> 值的按位组合，用于标识不可访问的主机保护类别。 默认值为 <see cref="F:System.Security.Permissions.HostProtectionResource.None" />。</returns>
    </member>
    <member name="M:System.Security.HostProtectionException.ToString">
      <summary>返回当前主机保护异常的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.HostProtectionException" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Security.HostSecurityManager">
      <summary>允许控制和自定义应用程序域的安全行为。</summary>
    </member>
    <member name="M:System.Security.HostSecurityManager.#ctor">
      <summary>初始化 <see cref="T:System.Security.HostSecurityManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.HostSecurityManager.DetermineApplicationTrust(System.Security.Policy.Evidence,System.Security.Policy.Evidence,System.Security.Policy.TrustManagerContext)">
      <summary>决定是否应执行应用程序。</summary>
      <param name="applicationEvidence">要激活的应用程序的证据。</param>
      <param name="activatorEvidence">也可以是正在激活的应用程序域的证据。</param>
      <param name="context">信任上下文。</param>
      <returns>一个对象，包含有关应用程序的信任信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="applicationEvidence" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">未能在应用程序证据中找到 <see cref="T:System.Runtime.Hosting.ActivationArguments" /> 对象。
或
激活参数中的 <see cref="P:System.Runtime.Hosting.ActivationArguments.ActivationContext" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Security.Policy.ApplicationTrust" /> 授予集不包含由 <see cref="T:System.ActivationContext" /> 指定的最小请求集。</exception>
    </member>
    <member name="P:System.Security.HostSecurityManager.DomainPolicy">
      <summary>在派生类中重写时，获取当前应用程序域的安全策略。</summary>
      <returns>当前应用程序域的安全策略。 默认值为 <see langword="null" />。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="P:System.Security.HostSecurityManager.Flags">
      <summary>获取表示与主机相关的安全策略组件的标志。</summary>
      <returns>用于指定安全策略组件的枚举值之一。 默认值为 <see cref="F:System.Security.HostSecurityManagerOptions.AllFlags" />。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GenerateAppDomainEvidence(System.Type)">
      <summary>请求应用程序域的特定证据类型。</summary>
      <param name="evidenceType">证据类型。</param>
      <returns>请求的应用程序域证据。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GenerateAssemblyEvidence(System.Type,System.Reflection.Assembly)">
      <summary>请求程序集的特定证据类型。</summary>
      <param name="evidenceType">证据类型。</param>
      <param name="assembly">目标程序集。</param>
      <returns>请求的程序集证据。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GetHostSuppliedAppDomainEvidenceTypes">
      <summary>确定主机可以为应用程序域提供哪些证据类型（如果请求了证据类型）。</summary>
      <returns>证据类型的数组。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.GetHostSuppliedAssemblyEvidenceTypes(System.Reflection.Assembly)">
      <summary>确定主机可以为程序集提供哪些证据类型（如果请求了证据类型）。</summary>
      <param name="assembly">目标程序集。</param>
      <returns>证据类型的数组。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.ProvideAppDomainEvidence(System.Security.Policy.Evidence)">
      <summary>为正在加载的程序集提供应用程序域证据。</summary>
      <param name="inputEvidence">要添加到 <see cref="T:System.AppDomain" /> 证据中的附加证据。</param>
      <returns>要用于 <see cref="T:System.AppDomain" /> 的证据。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.ProvideAssemblyEvidence(System.Reflection.Assembly,System.Security.Policy.Evidence)">
      <summary>为正在加载的程序集提供程序集证据。</summary>
      <param name="loadedAssembly">加载的程序集。</param>
      <param name="inputEvidence">要添加到程序集证据中的附加证据。</param>
      <returns>要用于程序集的证据。</returns>
    </member>
    <member name="M:System.Security.HostSecurityManager.ResolvePolicy(System.Security.Policy.Evidence)">
      <summary>根据指定的证据确定向代码授予什么权限。</summary>
      <param name="evidence">用于评估策略的证据集。</param>
      <returns>可由安全系统授予的权限集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.HostSecurityManagerOptions">
      <summary>指定将由宿主安全管理器使用的安全策略组件。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.AllFlags">
      <summary>使用所有安全策略组件。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostAppDomainEvidence">
      <summary>使用应用程序域证据。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostAssemblyEvidence">
      <summary>使用程序集证据。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostDetermineApplicationTrust">
      <summary>将对 <see cref="M:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)" /> 方法的调用首先传送到 <see cref="M:System.Security.HostSecurityManager.DetermineApplicationTrust(System.Security.Policy.Evidence,System.Security.Policy.Evidence,System.Security.Policy.TrustManagerContext)" /> 方法。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostPolicyLevel">
      <summary>使用在 <see cref="P:System.Security.HostSecurityManager.DomainPolicy" /> 属性中指定的策略级别。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.HostResolvePolicy">
      <summary>使用 <see cref="M:System.Security.HostSecurityManager.ResolvePolicy(System.Security.Policy.Evidence)" /> 方法来解析应用程序证据。</summary>
    </member>
    <member name="F:System.Security.HostSecurityManagerOptions.None">
      <summary>不使用其中任何一个安全策略组件。</summary>
    </member>
    <member name="T:System.Security.IEvidenceFactory">
      <summary>获取对象的 <see cref="T:System.Security.Policy.Evidence" />。</summary>
    </member>
    <member name="P:System.Security.IEvidenceFactory.Evidence">
      <summary>获取验证当前对象标识的 <see cref="T:System.Security.Policy.Evidence" />。</summary>
      <returns>当前对象标识的 <see cref="T:System.Security.Policy.Evidence" />。</returns>
    </member>
    <member name="T:System.Security.ISecurityPolicyEncodable">
      <summary>支持使权限对象状态与 XML 元素表示形式进行相互转换的方法。</summary>
    </member>
    <member name="M:System.Security.ISecurityPolicyEncodable.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">解析命名权限集引用的策略级上下文。</param>
    </member>
    <member name="M:System.Security.ISecurityPolicyEncodable.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">解析命名权限集引用的策略级上下文。</param>
      <returns>策略对象的 XML 表示形式的根元素。</returns>
    </member>
    <member name="T:System.Security.NamedPermissionSet">
      <summary>定义具有名称以及相关说明的权限集。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.Security.NamedPermissionSet)">
      <summary>从另一个命名的权限集初始化 <see cref="T:System.Security.NamedPermissionSet" /> 类的新实例。</summary>
      <param name="permSet">从中创建新实例的命名的权限集。</param>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.Security.NamedPermissionSet" /> 类的新的空实例。</summary>
      <param name="name">新命名的权限集名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 <see langword="null" /> 或者是空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String,System.Security.Permissions.PermissionState)">
      <summary>在无限制状态或完全受限状态，用指定名称初始化 <see cref="T:System.Security.NamedPermissionSet" /> 类的新实例。</summary>
      <param name="name">新命名的权限集名。</param>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 <see langword="null" /> 或者是空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.#ctor(System.String,System.Security.PermissionSet)">
      <summary>用来自权限集的指定名称初始化 <see cref="T:System.Security.NamedPermissionSet" /> 类的新实例。</summary>
      <param name="name">命名的权限集的名称。</param>
      <param name="permSet">从中取得新命名的权限集的值的权限集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 <see langword="null" /> 或者是空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Copy">
      <summary>从命名的权限集创建权限集副本。</summary>
      <returns>作为命名的权限集内权限副本的权限集。</returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Copy(System.String)">
      <summary>用不同的名称但相同的权限创建一个命名的权限集副本。</summary>
      <param name="name">新命名的权限集名。</param>
      <returns>具有新名称的命名的权限集副本。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 <see langword="null" /> 或者是空字符串 ("")。</exception>
    </member>
    <member name="P:System.Security.NamedPermissionSet.Description">
      <summary>获取或设置当前命名的权限集的文本说明。</summary>
      <returns>命名的权限集的文本说明。</returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.NamedPermissionSet" /> 对象是否等于当前的 <see cref="T:System.Security.NamedPermissionSet" />。</summary>
      <param name="o">要与当前的 <see cref="T:System.Security.NamedPermissionSet" /> 比较的 <see cref="T:System.Security.NamedPermissionSet" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Security.NamedPermissionSet" /> 等于当前的 <see cref="T:System.Security.NamedPermissionSet" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码用指定的状态重新构造命名的权限集。</summary>
      <param name="et">包含命名的权限集 XML 表示形式的安全元素。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> 参数不是命名的权限集的有效表示形式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.GetHashCode">
      <summary>获取 <see cref="T:System.Security.NamedPermissionSet" /> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Security.NamedPermissionSet" /> 对象的哈希代码。</returns>
    </member>
    <member name="P:System.Security.NamedPermissionSet.Name">
      <summary>获取或设置当前命名的权限集的名称。</summary>
      <returns>命名的权限集的名称。</returns>
      <exception cref="T:System.ArgumentException">名称为 <see langword="null" /> 或者是一个空字符串（“”）。</exception>
    </member>
    <member name="M:System.Security.NamedPermissionSet.ToXml">
      <summary>创建命名权限集的 XML 元素说明。</summary>
      <returns>命名的权限集的 XML 表示形式。</returns>
    </member>
    <member name="T:System.Security.Permissions.DataProtectionPermission">
      <summary>控制访问加密数据和内存的权限。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.#ctor(System.Security.Permissions.DataProtectionPermissionFlags)">
      <summary>初始化具有指定权限标志的 <see cref="T:System.Security.Permissions.DataProtectionPermission" /> 类的新实例。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 不是有效的 <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" /> 值组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化具有指定权限状态的 <see cref="T:System.Security.Permissions.DataProtectionPermission" /> 类的一个新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="P:System.Security.Permissions.DataProtectionPermission.Flags">
      <summary>获取或设置数据和内存保护标志。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" /> 值的按位组合。</returns>
      <exception cref="T:System.ArgumentException">指定的值不是有效的 <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" /> 值组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有特定状态的权限。</summary>
      <param name="securityElement">一个 <see cref="T:System.Security.SecurityElement" />，其中包含用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是有效的权限元素。

或 -
不支持 <paramref name="securityElement" /> 的版本号。</exception>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，并且未指定同一类型的权限为当前权限。</exception>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，并且未指定同一类型的权限为当前权限。</exception>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限及状态信息的 XML 编码。</returns>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，并且未指定同一类型的权限为当前权限。</exception>
    </member>
    <member name="T:System.Security.Permissions.DataProtectionPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.DataProtectionPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.DataProtectionPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.DataProtectionPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.DataProtectionPermission" />。</summary>
      <returns>与此特性对应的 <see cref="T:System.Security.Permissions.DataProtectionPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.DataProtectionPermissionAttribute.Flags">
      <summary>获取或设置数据保护权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.DataProtectionPermissionFlags" /> 值的按位组合。 默认值为 <see cref="F:System.Security.Permissions.DataProtectionPermissionFlags.NoFlags" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.DataProtectionPermissionAttribute.ProtectData">
      <summary>获取或设置一个值，该值指示是否可使用 <see cref="T:System.Security.Cryptography.ProtectedData" /> 类来加密数据。</summary>
      <returns>如果可以加密数据，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.DataProtectionPermissionAttribute.ProtectMemory">
      <summary>获取或设置一个值，该值指示是否可使用 <see cref="T:System.Security.Cryptography.ProtectedMemory" /> 类来加密内存。</summary>
      <returns>如果可以加密内存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.DataProtectionPermissionAttribute.UnprotectData">
      <summary>获取或设置一个值，该值指示是否可使用 <see cref="T:System.Security.Cryptography.ProtectedData" /> 类解密数据。</summary>
      <returns>如果数据可以解密，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.DataProtectionPermissionAttribute.UnprotectMemory">
      <summary>获取或设置一个值，该值指示是否可使用 <see cref="T:System.Security.Cryptography.ProtectedMemory" /> 类解密内存。</summary>
      <returns>如果内存可以解密，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.DataProtectionPermissionFlags">
      <summary>指定加密数据和内存的访问权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.DataProtectionPermissionFlags.AllFlags">
      <summary>加密数据，加密内存，解密数据，解密内存的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.DataProtectionPermissionFlags.NoFlags">
      <summary>没有保护能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.DataProtectionPermissionFlags.ProtectData">
      <summary>加密数据的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.DataProtectionPermissionFlags.ProtectMemory">
      <summary>加密内存的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.DataProtectionPermissionFlags.UnprotectData">
      <summary>解密数据的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.DataProtectionPermissionFlags.UnprotectMemory">
      <summary>解密内存的能力。</summary>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermission">
      <summary>控件访问系统和用户环境变量。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.#ctor(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>初始化对指定环境变量具有指定访问权限的 <see cref="T:System.Security.Permissions.EnvironmentPermission" /> 类的新实例。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 值之一。</param>
      <param name="pathList">向其授予访问权限的环境变量的列表（用分号分隔）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pathList" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 参数不是 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.EnvironmentPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.AddPathList(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>将指定的环境变量的访问权限添加到现有的权限状态中。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 值之一。</param>
      <param name="pathList">环境变量列表（用分号分隔）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pathList" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 参数不是 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 获取所有环境变量。</summary>
      <param name="flag">其中一个 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 值，表示环境变量访问的单一类型。</param>
      <returns>针对所选标识的环境变量（以分号分隔）列表。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 不是 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 的一个有效值。

或 -
<paramref name="flag" /> 是 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" />，表示环境变量访问的多个类型，或 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.NoAccess" />，它不表示任何类型的环境变量的访问。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.SetPathList(System.Security.Permissions.EnvironmentPermissionAccess,System.String)">
      <summary>将指定的环境变量的指定访问权限设置为该权限的现有状态。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 值之一。</param>
      <param name="pathList">环境变量列表（用分号分隔）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pathList" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 参数不是 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="other">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermissionAccess">
      <summary>指定可访问环境变量。</summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess">
      <summary>对环境变量的 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Read" /> 和 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.Write" /> 访问权限。 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.AllAccess" /> 表示多个 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 值，如果将它用作 <see cref="T:System.ArgumentException" /> 方法的 <paramref name="flag" /> 参数（它需要单一值），则引发 <see cref="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.NoAccess">
      <summary>没有对环境变量的访问权限。 <see cref="F:System.Security.Permissions.EnvironmentPermissionAccess.NoAccess" /> 不表示有效的 <see cref="T:System.Security.Permissions.EnvironmentPermissionAccess" /> 值，如果将它用作 <see cref="T:System.ArgumentException" /> 的参数（它需要单一值），则引发 <see cref="M:System.Security.Permissions.EnvironmentPermission.GetPathList(System.Security.Permissions.EnvironmentPermissionAccess)" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.Read">
      <summary>只指定了环境变量的读访问权限。 此访问级别不包含环境变量的更改、删除和创建。</summary>
    </member>
    <member name="F:System.Security.Permissions.EnvironmentPermissionAccess.Write">
      <summary>只指定了环境变量的写访问权限。 写访问权限包括创建和删除环境变量，也包括更改它们的现有值。 此访问级别不包括读取环境变量。</summary>
    </member>
    <member name="T:System.Security.Permissions.EnvironmentPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.EnvironmentPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.EnvironmentPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是 <see cref="T:System.Security.Permissions.SecurityAction" /> 的有效值。</exception>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.All">
      <summary>为该字符串值所指定的环境变量设置完全访问权限。</summary>
      <returns>可以完全访问的环境变量列表。</returns>
      <exception cref="T:System.NotSupportedException">此属性不支持 get 方法。</exception>
    </member>
    <member name="M:System.Security.Permissions.EnvironmentPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.EnvironmentPermission" />。</summary>
      <returns>与此特性对应的 <see cref="T:System.Security.Permissions.EnvironmentPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.Read">
      <summary>获取或设置该字符串值所指定环境变量的读访问权限。</summary>
      <returns>可以读访问的环境变量列表。</returns>
    </member>
    <member name="P:System.Security.Permissions.EnvironmentPermissionAttribute.Write">
      <summary>获取或设置该字符串值所指定环境变量的写访问权限。</summary>
      <returns>可以写访问的环境变量列表。</returns>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermission">
      <summary>控制通过“文件”对话框访问文件或文件夹的能力。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.#ctor(System.Security.Permissions.FileDialogPermissionAccess)">
      <summary>使用指定的访问权限初始化 <see cref="T:System.Security.Permissions.FileDialogPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileDialogPermissionAccess" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileDialogPermissionAccess" /> 值的有效组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.FileDialogPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一（<see langword="Unrestricted" /> 或 <see langword="None" />）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermission.Access">
      <summary>获取或设置对文件的允许访问权限。</summary>
      <returns>对文件的允许访问权限。</returns>
      <exception cref="T:System.ArgumentException">试图将 <paramref name="access" /> 参数设置为 <see cref="T:System.Security.Permissions.FileDialogPermissionAccess" /> 值的非有效组合的值。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。
或
不支持 <paramref name="esd" /> 参数的版本号。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限及状态信息的 XML 编码。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermissionAccess">
      <summary>指定允许通过“文件”对话框访问文件的类型。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.None">
      <summary>没有通过“文件”对话框访问文件的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.Open">
      <summary>可以通过“文件”对话框打开文件。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.OpenSave">
      <summary>可以通过“文件”对话框打开并保存文件。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileDialogPermissionAccess.Save">
      <summary>可以通过“文件”对话框保存文件。</summary>
    </member>
    <member name="T:System.Security.Permissions.FileDialogPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.FileDialogPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.FileDialogPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.FileDialogPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.FileDialogPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.FileDialogPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermissionAttribute.Open">
      <summary>获取或设置一个值，该值指示是否声明了通过文件对话框打开文件的权限。</summary>
      <returns>如果声明了通过文件对话框打开文件的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileDialogPermissionAttribute.Save">
      <summary>获取或设置一个值，该值指示是否声明了通过文件对话框保存文件的权限。</summary>
      <returns>如果声明了通过文件对话框保存文件的权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermission">
      <summary>控制文件和文件夹的访问权限。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
      <summary>使用对指定文件或目录的指定访问权限和对文件控制信息的指定访问权限初始化 <see cref="T:System.Security.Permissions.FileIOPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 枚举值的按位组合。</param>
      <param name="actions">
        <see cref="T:System.Security.AccessControl.AccessControlActions" /> 枚举值的按位组合。</param>
      <param name="path">文件或目录的绝对路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="path" /> 参数不是有效的字符串。

或 -
<paramref name="path" /> 参数未指定文件或目录的绝对路径。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])">
      <summary>使用对指定文件和目录的指定访问权限和对文件控制信息的指定访问权限初始化 <see cref="T:System.Security.Permissions.FileIOPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 枚举值的按位组合。</param>
      <param name="actions">
        <see cref="T:System.Security.AccessControl.AccessControlActions" /> 枚举值的按位组合。</param>
      <param name="pathList">包含文件和目录的绝对路径的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 数组中的条目不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>初始化对指定文件或目录具有指定访问权限的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 枚举值的按位组合。</param>
      <param name="path">文件或目录的绝对路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="path" /> 参数不是有效的字符串。

或 -
<paramref name="path" /> 参数未指定文件或目录的绝对路径。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>初始化对指定文件和目录具有指定访问权限的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 枚举值的按位组合。</param>
      <param name="pathList">包含文件和目录的绝对路径的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 数组中的条目不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用完全受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.FileIOPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>将指定文件或目录的访问权限添加到现有的权限状态。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值的按位组合。</param>
      <param name="path">文件或目录的绝对路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="path" /> 参数不是有效的字符串。

或 -
<paramref name="path" /> 参数未指定文件或目录的绝对路径。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="path" /> 参数的格式无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>将指定文件和目录的访问权限添加到现有的权限状态中。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值的按位组合。</param>
      <param name="pathList">包含文件和目录的绝对路径的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 数组中的条目无效。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pathList" /> 数组中的条目具有无效的格式。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pathList" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermission.AllFiles">
      <summary>获取或设置对所有文件的允许访问权限。</summary>
      <returns>所有文件的文件 I/O 标志集合。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermission.AllLocalFiles">
      <summary>获取或设置对所有本地文件的允许访问权限。</summary>
      <returns>所有本地文件的文件 I/O 标志集合。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 对象是否等于当前的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</summary>
      <param name="o">要与当前的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 比较的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 对象。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 对象，则为 <see cref="T:System.Security.Permissions.FileIOPermission" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号不兼容。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.GetHashCode">
      <summary>获取 <see cref="T:System.Security.Permissions.FileIOPermission" /> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Security.Permissions.FileIOPermission" /> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 权限获取所有文件和目录。</summary>
      <param name="access">表示文件的单一类型访问的一个 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的值。</param>
      <returns>一个数组，此数组包含了一组文件和文件夹的路径，所赋予的对这些文件和文件夹的访问权限由 <paramref name="access" /> 参数指定。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的一个有效值。

或 -
<paramref name="access" /> 的值是 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> ，表示多种文件访问类型，或为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />，表示任何文件访问类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)">
      <summary>设置指定文件或目录的特定访问权限，以替换现有的权限状态。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值的按位组合。</param>
      <param name="path">文件或目录的绝对路径。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="path" /> 参数不是有效的字符串。

或 -
<paramref name="path" /> 参数未指定文件或目录的绝对路径。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])">
      <summary>设置对指定文件和目录的指定访问权限，同时用一组新路径替换指定访问权限的当前状态。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值的按位组合。</param>
      <param name="pathList">包含文件和目录的绝对路径的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 参数中的某一项不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="other">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermissionAccess">
      <summary>指定所请求的文件访问权限的类型。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess">
      <summary>对一个文件或目录的 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Append" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />、<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" /> 访问权限。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> 表示多个 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值，如果将它用作 <see cref="T:System.ArgumentException" /> 方法的 <paramref name="access" /> 参数（它需要单一值），则引发 <see cref="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Append">
      <summary>向文件或目录追加内容的访问权限。 <see langword="FileIOPermissionAccess.Append" /> 访问权限包括创建新的文件和目录的能力。 要创建文件，还必须同时向代码授予 <see langword="Append" /> 权限和 <see langword="Write" /> 或 <see langword="Read" /> 权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess">
      <summary>没有对文件和目录的访问权限。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" /> 不表示有效的 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值，如果将它用作 <see cref="T:System.ArgumentException" /> 的参数（它需要单一值），则引发 <see cref="M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery">
      <summary>对路径本身中的信息的访问权限。 这可以保护路径中的敏感信息（如用户名）以及有关路径中显示的目录结构的信息。 此值不授予对路径所指代的文件或文件夹的访问权限。
出于性能原因，应仅向目录授予 <see langword="PathDiscovery" />，而不向文件授予该权限。 例如，应向诸如 C:\test 和 C:\test\\ 等路径授予 <see langword="PathDiscovery" /> 权限，而不向 C:\test\example.txt 授予该权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Read">
      <summary>从文件或目录中读取的访问权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.FileIOPermissionAccess.Write">
      <summary>写入或删除文件或目录的访问权限。 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" /> 访问权限包括对文件和目录的删除和覆盖。</summary>
    </member>
    <member name="T:System.Security.Permissions.FileIOPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.FileIOPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.FileIOPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.All">
      <summary>获取或设置对字符串值所指定的文件或目录的完全访问权限。</summary>
      <returns>用于完全访问的文件或目录的绝对路径。</returns>
      <exception cref="T:System.NotSupportedException">此属性不支持 get 方法。</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.AllFiles">
      <summary>获取或设置对所有文件的允许访问权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值的按位组合，表示所有文件的权限。 默认值为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.AllLocalFiles">
      <summary>获取或设置对所有本地文件的允许访问权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值的按位组合，它表示所有本地文件的权限。 默认值为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.NoAccess" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Append">
      <summary>获取或设置对字符串值所指定的文件或目录的追加访问权限。</summary>
      <returns>用于追加访问的文件或目录的绝对路径。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.ChangeAccessControl">
      <summary>获取或设置可在其中更改访问控制信息的文件或目录。</summary>
      <returns>可在其中更改访问控制信息的文件或目录的绝对路径。</returns>
    </member>
    <member name="M:System.Security.Permissions.FileIOPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</returns>
      <exception cref="T:System.ArgumentException">要保护访问安全的文件或目录的路径信息包含无效的字符或通配说明符。</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.PathDiscovery">
      <summary>获取或设置针对其授予路径发现权限的文件或目录。</summary>
      <returns>文件或目录的绝对路径。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Read">
      <summary>获取或设置对字符串值所指定的文件或目录的读访问权限。</summary>
      <returns>用于读访问的文件或目录的绝对路径。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.ViewAccessControl">
      <summary>获取或设置可在其中查看访问控制信息的文件或目录。</summary>
      <returns>可在其中查看访问控制信息的文件或目录的绝对路径。</returns>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.ViewAndModify">
      <summary>获取或设置可在其中查看并修改文件数据的文件或目录。</summary>
      <returns>可在其中查看并修改文件数据的文件或目录的绝对路径。</returns>
      <exception cref="T:System.NotSupportedException">
        <see langword="get" /> 访问器被调用。 提供访问器是为了与 C# 编译器兼容。</exception>
    </member>
    <member name="P:System.Security.Permissions.FileIOPermissionAttribute.Write">
      <summary>获取或设置对字符串值所指定的文件或目录的写访问权限。</summary>
      <returns>用于写访问的文件或目录的绝对路径。</returns>
    </member>
    <member name="T:System.Security.Permissions.GacIdentityPermission">
      <summary>定义从全局程序集缓存中产生的文件的标识权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.GacIdentityPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用完全受限制的 <see cref="T:System.Security.Permissions.GacIdentityPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码创建权限。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" />，包含用于创建权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是一个有效的权限元素。
或
<paramref name="securityElement" /> 的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，它表示当前权限与指定权限的交集。 如果交集为空，则新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，而且与当前权限不是同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>指示当前权限是否为指定权限的子集。</summary>
      <param name="target">要测试子集关系的权限对象。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，而且与当前权限不是同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>
        <see cref="T:System.Security.SecurityElement" />，表示权限的 XML 编码（包括任何状态信息）。</returns>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermission.Union(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限和指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，而且与当前权限不是同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.GacIdentityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.GacIdentityPermission" /> 执行安全操作。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.GacIdentityPermissionAttribute" /> 值初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.GacIdentityPermissionAttribute.CreatePermission">
      <summary>创建一个新的 <see cref="T:System.Security.Permissions.GacIdentityPermission" /> 对象。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.GacIdentityPermission" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.HostProtectionAttribute">
      <summary>允许使用声明性安全操作来确定宿主保护要求。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.HostProtectionAttribute.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Security.Permissions.HostProtectionAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.HostProtectionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.HostProtectionAttribute" /> 值初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是 <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.HostProtectionAttribute.CreatePermission">
      <summary>创建并返回一个新的宿主保护权限。</summary>
      <returns>与当前特性对应的 <see cref="T:System.Security.IPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt">
      <summary>获取或设置一个值，该值指示是否公开外部进程管理。</summary>
      <returns>如果公开外部进程管理，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.ExternalThreading">
      <summary>获取或设置一个值，该值指示是否公开外部线程处理。</summary>
      <returns>如果公开外部线程处理，则为 <see langword="true" />;否则，<see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort">
      <summary>获取或设置一个值，该值指示当操作被终止时资源是否可能泄漏内存。</summary>
      <returns>如果操作终止时资源可能泄漏内存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.Resources">
      <summary>获取或设置标志，这些标志指定可能对宿主有害的功能类别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.HostProtectionResource" /> 值的按位组合。 默认值为 <see cref="F:System.Security.Permissions.HostProtectionResource.None" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure">
      <summary>获取或设置一个值，该值指示是否公开安全基础结构。</summary>
      <returns>如果公开安全基础结构，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt">
      <summary>获取或设置一个值，该值指示是否公开自影响的进程管理。</summary>
      <returns>如果公开自影响的进程管理，则 <see langword="true" />;否则，<see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading">
      <summary>获取或设置一个值，该值指示是否公开自影响的线程处理。</summary>
      <returns>如果公开自影响的线程处理，则为 <see langword="true" />;否则，<see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.SharedState">
      <summary>获取或设置一个值，该值指示是否公开共享状态。</summary>
      <returns>如果公开共享状态，则为 <see langword="true" />;否则，<see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.Synchronization">
      <summary>获取或设置一个值，该值指示是否公开同步。</summary>
      <returns>如果公开同步，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.HostProtectionAttribute.UI">
      <summary>获取或设置一个值，该值指示是否公开用户界面。</summary>
      <returns>如果公开用户界面，则 <see langword="true" />;否则，<see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.HostProtectionResource">
      <summary>指定若由方法或类调用，可能对宿主有害的功能的类别。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.All">
      <summary>公开所有宿主资源。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.ExternalProcessMgmt">
      <summary>可以创建或销毁其他进程。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.ExternalThreading">
      <summary>创建或操作除本身以外的其他线程可能对宿主有害。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.MayLeakOnAbort">
      <summary>如果没有安全句柄的保护，或者没有其他方法来确保资源的释放，也许将在终止时导致资源泄漏。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.None">
      <summary>不公开宿主资源。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SecurityInfrastructure">
      <summary>公开安全性基础结构。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SelfAffectingProcessMgmt">
      <summary>可以退出当前进程，终止服务器。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SelfAffectingThreading">
      <summary>以只影响用户代码的方式操作线程。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.SharedState">
      <summary>公开可能在线程间共享的状态。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.Synchronization">
      <summary>公开同步。</summary>
    </member>
    <member name="F:System.Security.Permissions.HostProtectionResource.UI">
      <summary>公开用户界面。</summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageContainment">
      <summary>指定独立存储区所允许的用途。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AdministerIsolatedStorageByUser">
      <summary>对用户存储区的无限制的管理能力。 允许浏览和删除整个用户存储区，但除用户自己的域/程序集标识外，不允许进行读访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.ApplicationIsolationByMachine">
      <summary>存储首先按计算机隔离，然后按应用程序隔离。 这为在任何域上下文中均可访问的应用程序提供了数据存储区。 基于应用程序的数据隔离舱需要额外的信任，原因是数据隔离舱可能会在应用程序之间提供“隧道”，从而危及特定网站中应用程序的数据隔离。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.ApplicationIsolationByRoamingUser">
      <summary>存储首先按用户隔离，然后按应用程序证据隔离。 当启用 Windows 用户数据漫游时，存储将漫游。 这为在任何域上下文中均可访问的应用程序提供了数据存储区。 基于应用程序的数据隔离舱需要额外的信任，原因是数据隔离舱可能会在应用程序之间提供“隧道”，从而危及特定网站中应用程序的数据隔离。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.ApplicationIsolationByUser">
      <summary>存储首先按用户隔离，然后按应用程序隔离。 存储也被计算机隔离。 这为在任何域上下文中均可访问的应用程序提供了数据存储区。 基于应用程序的数据隔离舱需要额外的信任，原因是数据隔离舱可能会在应用程序之间提供“隧道”，从而危及特定网站中应用程序的数据隔离。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByMachine">
      <summary>存储首先按计算机隔离，然后按代码程序集隔离。 这为在任何域上下文中都可访问的程序集提供了数据存储区。 基于程序集的数据室需要额外的信任，因为它可能在应用程序之间提供“隧道”，该隧道会危及特定网站中应用程序的数据隔离。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByRoamingUser">
      <summary>存储首先按用户隔离，然后按程序集证据隔离。 当启用 Windows 用户数据漫游时，存储将漫游。 这为在任何域上下文中都可访问的程序集提供了数据存储区。 基于程序集的数据室需要额外的信任，因为它可能在应用程序之间提供“隧道”，该隧道会危及特定网站中应用程序的数据隔离。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.AssemblyIsolationByUser">
      <summary>存储首先按用户隔离，然后按代码程序集隔离。 存储也被计算机隔离。 这为在任何域上下文中都可访问的程序集提供了数据存储区。 基于程序集的数据室需要额外的信任，因为它可能在应用程序之间提供“隧道”，该隧道会危及特定网站中应用程序的数据隔离。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByMachine">
      <summary>存储首先按计算机隔离，然后按域和程序集隔离。 只有在相同应用程序的上下文内并且仅在相同的计算机上运行时，才可访问数据。 这在第三方程序集想要保留私有数据存储区时很有用。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByRoamingUser">
      <summary>存储首先按用户隔离，然后按域和程序集隔离。 当启用 Windows 用户数据漫游时，存储将漫游。 只有在相同应用程序的上下文内并且仅由相同用户运行时，才可访问数据。 这在第三方程序集想要保留私有数据存储区时很有用。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.DomainIsolationByUser">
      <summary>存储首先按用户隔离，然后按域和程序集隔离。 存储也被计算机隔离。 只有在相同应用程序的上下文内并且仅由相同用户运行时，才可访问数据。 这在第三方程序集想要保留私有数据存储区时很有用。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.None">
      <summary>不允许使用独立存储。</summary>
    </member>
    <member name="F:System.Security.Permissions.IsolatedStorageContainment.UnrestrictedIsolatedStorage">
      <summary>允许在没有任何限制的情况下使用独立存储。 代码对用户存储区的任何部分均有完全访问权限，而不管域或程序集的标识如何。 独立存储的这种使用允许对独立存储数据存储区中的内容进行枚举。</summary>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageFilePermission">
      <summary>指定允许使用私有虚拟文件系统。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用指定的完全受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">与当前权限对象相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStorageFilePermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.IsolatedStorageFilePermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStorageFilePermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" />。</summary>
      <returns>与此特性对应的 <see cref="T:System.Security.Permissions.IsolatedStorageFilePermission" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStoragePermission">
      <summary>表示对一般独立存储功能的访问权限。</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermission.UsageAllowed">
      <summary>获取或设置允许的独立存储包含的类型。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.IsolatedStorageContainment" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermission.UserQuota">
      <summary>获取或设置每位用户的总存储在总大小中的配额。</summary>
      <returns>给用户分配的资源的大小（以字节为单位）。</returns>
    </member>
    <member name="T:System.Security.Permissions.IsolatedStoragePermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.IsolatedStoragePermission" /> 执行安全操作。</summary>
    </member>
    <member name="M:System.Security.Permissions.IsolatedStoragePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.IsolatedStoragePermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UsageAllowed">
      <summary>获取或设置声明的独立存储级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.IsolatedStorageContainment" /> 值之一。</returns>
    </member>
    <member name="P:System.Security.Permissions.IsolatedStoragePermissionAttribute.UserQuota">
      <summary>获取或设置最大的用户存储配额大小。</summary>
      <returns>最大的用户存储配额大小（以字节为单位）。</returns>
    </member>
    <member name="T:System.Security.Permissions.IUnrestrictedPermission">
      <summary>允许一种权限公开其为无限制状态。</summary>
    </member>
    <member name="M:System.Security.Permissions.IUnrestrictedPermission.IsUnrestricted">
      <summary>获取一个值，该值指示是否允许对受权限保护的资源进行不受限制的访问。</summary>
      <returns>如果允许不受限制地使用受此权限所保护的资源，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermission">
      <summary>控制访问密钥容器的权限。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>使用指定的访问权限初始化 <see cref="T:System.Security.Permissions.KeyContainerPermission" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flags" /> 不是有效的 <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.KeyContainerPermissionFlags,System.Security.Permissions.KeyContainerPermissionAccessEntry[])">
      <summary>使用指定的全局访问权限和特定密钥容器访问权限初始化 <see cref="T:System.Security.Permissions.KeyContainerPermission" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。</param>
      <param name="accessList">标识特定密钥容器访问权限的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flags" /> 不是有效的 <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值组合。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="accessList" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.KeyContainerPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermission.AccessEntries">
      <summary>获取与当前权限相关联的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象的集合。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection" />，它包含此 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 的 <see cref="T:System.Security.Permissions.KeyContainerPermission" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermission.Flags">
      <summary>获取适用于与权限相关联的所有密钥容器的密钥容器权限标志。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">一个 <see cref="T:System.Security.SecurityElement" />，其中包含用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是有效的权限元素。

或 -
不支持 <paramref name="securityElement" /> 的版本号。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，并且未指定同一类型的权限为当前权限。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，并且未指定同一类型的权限为当前权限。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.IsUnrestricted">
      <summary>确定当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>包含权限及其状态信息的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see langword="null" />，并且未指定同一类型的权限为当前权限。</exception>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAccessEntry">
      <summary>为特定密钥容器指定访问权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.#ctor(System.Security.Cryptography.CspParameters,System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>使用指定的加密服务提供程序 (CSP) 参数和访问权限初始化 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 类的新实例。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.CspParameters" /> 对象，包含加密服务提供程序 (CSP) 参数。</param>
      <param name="flags">
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.#ctor(System.String,System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>使用指定的密钥容器名称和访问权限初始化 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 类的新实例。</summary>
      <param name="keyContainerName">密钥容器的名称。</param>
      <param name="flags">
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.#ctor(System.String,System.String,System.Int32,System.String,System.Int32,System.Security.Permissions.KeyContainerPermissionFlags)">
      <summary>使用指定的属性值初始化 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 类的新实例。</summary>
      <param name="keyStore">密钥存储区的名称。</param>
      <param name="providerName">提供程序的名称。</param>
      <param name="providerType">提供程序的类型代码。 请参见 <see cref="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderType" /> 属性获取相关的值。</param>
      <param name="keyContainerName">密钥容器的名称。</param>
      <param name="keySpec">密钥规范。 请参见 <see cref="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeySpec" /> 属性获取相关的值。</param>
      <param name="flags">
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象是否等于当前实例。</summary>
      <param name="o">要与当前实例进行比较的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 等于当前的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.Flags">
      <summary>获取或设置密钥容器权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。 默认值为 <see cref="F:System.Security.Permissions.KeyContainerPermissionFlags.NoFlags" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntry.GetHashCode">
      <summary>获取适合在哈希算法和类似哈希表的数据结构中使用的当前实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeyContainerName">
      <summary>获取或设置密钥容器名称。</summary>
      <returns>密钥容器的名称。</returns>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeySpec">
      <summary>获取或设置密钥规范。</summary>
      <returns>Wincrypt.h 头文件中定义的 AT_ 值之一。</returns>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.KeyStore">
      <summary>获取或设置密钥存储区的名称。</summary>
      <returns>密钥存储区的名称。</returns>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderName">
      <summary>获取或设置提供程序名称。</summary>
      <returns>提供程序的名称。</returns>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntry.ProviderType">
      <summary>获取或设置提供程序类型。</summary>
      <returns>Wincrypt.h 头文件中定义的 PROV_ 值之一。</returns>
      <exception cref="T:System.ArgumentException">对结果项的访问将不受限制。</exception>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection">
      <summary>表示 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.#ctor" />
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Add(System.Security.Permissions.KeyContainerPermissionAccessEntry)">
      <summary>将 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象添加到集合中。</summary>
      <param name="accessEntry">要添加的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="accessEntry" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Clear">
      <summary>从集合中移除所有 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.CopyTo(System.Array,System.Int32)">
      <param name="array" />
      <param name="index" />
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.CopyTo(System.Security.Permissions.KeyContainerPermissionAccessEntry[],System.Int32)">
      <summary>将集合中的元素复制到一个兼容的一维数组（从目标数组的指定索引处开始）。</summary>
      <param name="array">一维 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 数组，它是从当前集合复制的元素的目标位置。</param>
      <param name="index">
        <paramref name="array" /> 内的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
或
集合中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Count">
      <summary>获取集合中的项数。</summary>
      <returns>集合中 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象的数目。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.GetEnumerator">
      <summary>返回 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator" /> 对象，该对象可用于循环访问集合中的对象。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.IndexOf(System.Security.Permissions.KeyContainerPermissionAccessEntry)">
      <summary>获取指定的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象在该集合中的索引（如果它在该集合中存在）。</summary>
      <param name="accessEntry">要定位的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</param>
      <returns>该集合中指定的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象的索引，或者如果未找到匹配项则为 -1。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.IsSynchronized">
      <summary>获取一个值，该值指示集合是否是同步的（线程安全）。</summary>
      <returns>在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Item(System.Int32)">
      <summary>获取集合中指定索引处的项。</summary>
      <param name="index">要访问的元素从零开始的索引。</param>
      <returns>集合中指定索引处的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 大于或等于集合计数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="index" /> 为负数。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.Remove(System.Security.Permissions.KeyContainerPermissionAccessEntry)">
      <summary>从集合中移除指定的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</summary>
      <param name="accessEntry">要移除的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="accessEntry" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator" /> 对象，该对象可用于循环访问集合中的对象。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator" /> 对象。</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator">
      <summary>表示 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 中的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection" /> 对象的枚举数。</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.#ctor" />
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current">
      <summary>获取集合中的当前项。</summary>
      <returns>集合中当前的 <see cref="T:System.Security.Permissions.KeyContainerPermissionAccessEntry" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">在第一次调用 <see cref="P:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current" /> 方法之前会访问 <see cref="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext" /> 属性。 光标位于集合中的第一个对象之前。

或 -
在调用 <see cref="P:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current" /> 方法返回 <see langword="false" />（这表明光标位于集合的最后一个对象之后）后会访问 <see cref="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext" /> 属性。</exception>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext">
      <summary>移至集合中的下一元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset">
      <summary>将枚举数重置到集合的开头。</summary>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取集合中的当前对象。</summary>
      <returns>集合中的当前对象。</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.KeyContainerPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的安全操作初始化 <see cref="T:System.Security.Permissions.KeyContainerPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.KeyContainerPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.KeyContainerPermission" />。</summary>
      <returns>与此特性对应的 <see cref="T:System.Security.Permissions.KeyContainerPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.Flags">
      <summary>获取或设置密钥容器权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.KeyContainerPermissionFlags" /> 值的按位组合。 默认值为 <see cref="F:System.Security.Permissions.KeyContainerPermissionFlags.NoFlags" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeyContainerName">
      <summary>获取或设置密钥容器的名称。</summary>
      <returns>密钥容器的名称。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeySpec">
      <summary>获取或设置密钥规范。</summary>
      <returns>Wincrypt.h 头文件中定义的 AT_ 值之一。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.KeyStore">
      <summary>获取或设置密钥存储区的名称。</summary>
      <returns>密钥存储区的名称。 默认为“*”。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.ProviderName">
      <summary>获取或设置提供程序名称。</summary>
      <returns>提供程序的名称。</returns>
    </member>
    <member name="P:System.Security.Permissions.KeyContainerPermissionAttribute.ProviderType">
      <summary>获取或设置提供程序类型。</summary>
      <returns>Wincrypt.h 头文件中定义的 PROV_ 值之一。</returns>
    </member>
    <member name="T:System.Security.Permissions.KeyContainerPermissionFlags">
      <summary>指定允许的密钥容器访问类型。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.AllFlags">
      <summary>创建、解密、删除、打开密钥容器；导出、导入密钥；使用密钥给文件签名；查看并更改密钥容器的访问控制列表。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.ChangeAcl">
      <summary>更改密钥容器的访问控制列表 (ACL)。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Create">
      <summary>创建密钥容器。
创建密钥容器时还会在磁盘上创建一个文件。 请务必注意，创建的任何密钥容器都将在不再使用时删除，这一点非常重要。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Decrypt">
      <summary>解密密钥容器。
解密是一项特权操作，因为需要使用私钥。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Delete">
      <summary>删除密钥容器。
删除密钥容器可能导致拒绝服务攻击，因为删除密钥容器会阻止使用经密钥加密或签名的文件。 因此，删除是一项特权操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Export">
      <summary>从密钥容器导出密钥。
导出密钥的功能可能是有害的，因为它会破坏该密钥的唯一性。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Import">
      <summary>将密钥导入密钥容器。类似于删除容器的功能，导入密钥的功能同样可能有害，因为向已命名的密钥容器导入密钥会替换已有的密钥。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.NoFlags">
      <summary>不能访问密钥容器。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Open">
      <summary>打开一个密钥容器并使用公钥。

<see langword="Open" /> 不授予使用私钥对文件进行签名或解密的权限，但允许用户验证文件签名和加密文件。 只有密钥所有者可以使用私钥对这些文件进行解密。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.Sign">
      <summary>使用密钥给文件签名。
对文件进行签名的功能可能是有害的，因为该功能可以让用户使用其他用户的密钥对文件进行签名。</summary>
    </member>
    <member name="F:System.Security.Permissions.KeyContainerPermissionFlags.ViewAcl">
      <summary>查看密钥容器的访问控制列表 (ACL)。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermission" /> 描述一组安全权限，该权限用于控制音频、图像和视频媒体在不完全可信的 Windows Presentation Foundation (WPF) 应用程序中的运行能力。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>通过指定音频权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。</summary>
      <param name="permissionAudio">
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>通过指定音频、视频和图像权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的新实例。</summary>
      <param name="permissionAudio">
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的枚举值。</param>
      <param name="permissionVideo">
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的枚举值。</param>
      <param name="permissionImage">
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>通过指定一个图像权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="permissionImage">
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>通过指定视频权限级别初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="permissionVideo">
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>通过指定一个权限状态，初始化 <see cref="T:System.Security.Permissions.MediaPermission" /> 类的一个新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 的枚举值。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>获取音频权限级别的当前值。</summary>
      <returns>音频权限级别。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">用于重新构造权限的 XML 编码。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>获取图像权限级别的当前值。</summary>
      <returns>图像权限级别。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>两个权限的交集是对它们共同描述的状态进行描述的权限。 对于相交的权限，只有同时满足两个原始权限的请求才是有效的。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果音频、图像和视频权限全部不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>获取视频权限级别的当前值。</summary>
      <returns>媒体权限级别。</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.MediaPermission" /> 执行安全操作。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的音频权限级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> 的状态。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.MediaPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.MediaPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 的图像权限级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> 的状态。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>为 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> 获取或设置视频权限级别。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> 的状态。</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>指定音频的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>允许播放不受限制音频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>拒绝播放所有音频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>允许播放安全、有限制音频的权限，该权限包括拒绝对图像文件的流访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>只允许对位于应用程序源站点的文件进行音频播放的权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>指定图像的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>允许显示不受限制图像的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>拒绝显示所有图像的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>允许显示安全、有限制图像的权限，该权限包括拒绝对图像文件的流访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>只允许显示位于应用程序源站点的图像的权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>指定视频的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>允许播放不受限制视频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>拒绝播放所有视频的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>允许播放安全、有限制视频的权限，该权限包括拒绝对图像文件的流访问。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>只允许对位于应用程序源站点的文件进行视频播放的权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.PermissionSetAttribute">
      <summary>允许对使用声明安全性应用到代码中的 <see cref="T:System.Security.PermissionSet" /> 进行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的安全操作初始化 <see cref="T:System.Security.Permissions.PermissionSetAttribute" /> 类的新实例。</summary>
      <param name="action">指定安全操作的枚举值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.CreatePermission">
      <summary>未使用此方法。</summary>
      <returns>在所有情况下均为 null 引用（在 Visual Basic 中为 <see langword="nothing" />）。</returns>
    </member>
    <member name="M:System.Security.Permissions.PermissionSetAttribute.CreatePermissionSet">
      <summary>创建并返回基于此权限集特性对象的新权限集。</summary>
      <returns>新权限集。</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.File">
      <summary>获取或设置一个文件，该文件包含要声明的自定义权限集的 XML 表示形式。</summary>
      <returns>包含该权限集 XML 表示形式的文件的物理路径。</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.Hex">
      <summary>获取或设置 XML 编码的权限集的十六进制表示形式。</summary>
      <returns>XML 编码的权限集的十六进制表示形式。</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.Name">
      <summary>获取或设置权限集的名称。</summary>
      <returns>不可更改的 <see cref="T:System.Security.NamedPermissionSet" /> 的名称（它是包含在默认策略中的多个权限集之一，而且不能更改）。</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.UnicodeEncoded">
      <summary>获取或设置一个值，该值指示 <see cref="P:System.Security.Permissions.PermissionSetAttribute.File" /> 所指定的文件是 Unicode 编码还是 ASCII 编码。</summary>
      <returns>如果文件是 Unicode 编码，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.PermissionSetAttribute.XML">
      <summary>获取或设置权限集的 XML 表示形式。</summary>
      <returns>权限集的 XML 表示形式。</returns>
    </member>
    <member name="T:System.Security.Permissions.PrincipalPermission">
      <summary>允许使用为声明性和命令性安全操作定义的语言构造对活动主体执行检查（请参阅 <see cref="T:System.Security.Principal.IPrincipal" />）。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是有效的 <see cref="T:System.Security.Permissions.PermissionState" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String)">
      <summary>为指定的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 和 <paramref name="name" /> 初始化 <paramref name="role" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Security.Principal.IPrincipal" /> 对象的用户的名称。</param>
      <param name="role">
        <see cref="T:System.Security.Principal.IPrincipal" /> 对象的用户的角色（例如，管理员）。</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.#ctor(System.String,System.String,System.Boolean)">
      <summary>为指定的 <see cref="T:System.Security.Permissions.PrincipalPermission" />、<paramref name="name" /> 和身份验证状态初始化 <paramref name="role" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Security.Principal.IPrincipal" /> 对象的用户的名称。</param>
      <param name="role">
        <see cref="T:System.Security.Principal.IPrincipal" /> 对象的用户的角色（例如，管理员）。</param>
      <param name="isAuthenticated">
        <see langword="true" /> 表示用户已经过身份验证；否则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Demand">
      <summary>在运行时确定当前主体是否与当前权限指定的主体相匹配。</summary>
      <exception cref="T:System.Security.SecurityException">当前主体未通过当前权限指定的主体的安全检查。

或 -
当前的 <see cref="T:System.Security.Principal.IPrincipal" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 对象是否等于当前的 <see cref="T:System.Security.Permissions.PrincipalPermission" />。</summary>
      <param name="o">要与当前的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 比较的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 对象。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 对象，则为 <see cref="T:System.Security.Permissions.PrincipalPermission" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="elem">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 参数不是有效的权限元素。

或 -
<paramref name="elem" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.GetHashCode">
      <summary>获取 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 对象的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限将为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且是与当前权限不属于同一类的实例。</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数是一个对象，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.ToString">
      <summary>创建并返回表示当前权限的字符串。</summary>
      <returns>当前权限的表示形式。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="other">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 参数是一个对象，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.PrincipalPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.PrincipalPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PrincipalPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Authenticated">
      <summary>获取或设置一个指示当前主题是否已经过基于角色的基础安全提供程序验证的值。</summary>
      <returns>如果当前用户的身份已经过验证，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.PrincipalPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.PrincipalPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.PrincipalPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Name">
      <summary>获取或设置与当前主体相关联的标识名称。</summary>
      <returns>要与基于角色的基础安全提供程序提供的名称相匹配的名称。</returns>
    </member>
    <member name="P:System.Security.Permissions.PrincipalPermissionAttribute.Role">
      <summary>获取或设置指定安全角色的成员条件。</summary>
      <returns>基于角色的基础安全提供程序中的角色名称。</returns>
    </member>
    <member name="T:System.Security.Permissions.PublisherIdentityPermission">
      <summary>表示软件发行者的身份标识。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>使用指定的 Authenticode X.509v3 证书初始化 <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> 类的新实例。</summary>
      <param name="certificate">X.509 证书表示软件发行者的身份标识。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> 参数不是有效的证书。</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermission.Certificate">
      <summary>获取或设置表示软件发行者身份标识的 Authenticode X.509v3 证书。</summary>
      <returns>表示软件发行者身份标识的 X.509 证书。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Permissions.PublisherIdentityPermission.Certificate" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Permissions.PublisherIdentityPermission.Certificate" /> 不是有效证书。</exception>
      <exception cref="T:System.NotSupportedException">无法设置该属性，因为其标识不明确。</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。
或
这两个权限不相等。</exception>
    </member>
    <member name="T:System.Security.Permissions.PublisherIdentityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PublisherIdentityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.CertFile">
      <summary>获取或设置包含 Authenticode X.509v3 证书的证书文件。</summary>
      <returns>X.509 证书文件（通常有 .cer 扩展名）的文件路径。</returns>
    </member>
    <member name="M:System.Security.Permissions.PublisherIdentityPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> 实例。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.PublisherIdentityPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.SignedFile">
      <summary>获取或设置一个已签名的文件，将从该文件提取 Authenticode X.509v3 证书。</summary>
      <returns>带有 Authenticode 签名的文件的文件路径。</returns>
    </member>
    <member name="P:System.Security.Permissions.PublisherIdentityPermissionAttribute.X509Certificate">
      <summary>获取或设置标识调用代码发行者的 Authenticode X.509v3 证书。</summary>
      <returns>X.509 证书的十六进制表示形式。</returns>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermission">
      <summary>通过 <see cref="N:System.Reflection" /> API，控制对非公共类型和成员的访问。 控制 <see cref="N:System.Reflection.Emit" /> API 的一些功能。</summary>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用完全受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.#ctor(System.Security.Permissions.ReflectionPermissionFlag)">
      <summary>使用指定的访问权限初始化 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 类的新实例。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 参数不是 <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermission.Flags">
      <summary>获取或设置允许用于当前权限的反射类型。</summary>
      <returns>当前权限的设置标志。</returns>
      <exception cref="T:System.ArgumentException">尝试将此属性设置为无效值。 有关有效值，请参阅 <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="other">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.ReflectionPermission" /> 执行安全操作。</summary>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.ReflectionPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.ReflectionPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.ReflectionPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.ReflectionPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.Flags">
      <summary>获取或设置当前允许使用的反射。</summary>
      <returns>一个或多个使用按位“或”组合在一起的 <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" /> 值。</returns>
      <exception cref="T:System.ArgumentException">试图将此属性设置为无效值。 有关有效值，请参阅 <see cref="T:System.Security.Permissions.ReflectionPermissionFlag" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.MemberAccess">
      <summary>获取或设置一个值，指示是否允许在非公共成员上调用操作。</summary>
      <returns>如果允许在非公共成员上调用操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.ReflectionEmit">
      <summary>获取或设置一个值，指示是否允许在 <see cref="N:System.Reflection.Emit" /> 中使用某些功能（例如发出调试符号）。</summary>
      <returns>如果允许使用受影响的功能，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.RestrictedMemberAccess">
      <summary>获取或设置一个值，指示是否允许非公共成员的受限制调用。 受限制调用意味着程序集的授予集（包含被调用的非公共成员）必须与调用程序集的授予集相同，或者前者是后者的子集。</summary>
      <returns>如果允许非公共成员的受限制调用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.ReflectionPermissionAttribute.TypeInformation">
      <summary>获取或设置一个值，指示是否允许在不可见的成员上反射。</summary>
      <returns>如果允许在不可见的成员上反射，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.ReflectionPermissionFlag">
      <summary>指定 <see cref="N:System.Reflection" /> 和 <see cref="N:System.Reflection.Emit" /> 命名空间的允许用法。</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags">
      <summary>对 <see langword="TypeInformation" />、<see langword="MemberAccess" /> 和 <see langword="ReflectionEmit" /> 进行了设置。 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.AllFlags" /> 不包括 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.MemberAccess">
      <summary>无论授予集是什么，都允许在所有成员上进行调用操作。 如果未设置此标志，则只允许在可见成员上进行调用操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags">
      <summary>允许对类型和成员进行枚举。 允许在可见类型和成员上进行调用操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit">
      <summary>允许发出调试符号。 从 .NET Framework 2.0 Service Pack 1 开始，发出代码时不再需要此标志。</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess">
      <summary>为部分受信任代码提供了受限成员访问。 部分受信任代码可以访问非公共类型和成员，但前提条件是部分受信任代码的授予集包括程序集（该程序集包含要访问的非公共类型和成员）的授予集内的所有权限。 此标志在 .NET Framework 2.0 SP1 中是新增标志。</summary>
    </member>
    <member name="F:System.Security.Permissions.ReflectionPermissionFlag.TypeInformation">
      <summary>此标志已过时。 枚举类型和成员以及检验它们的元数据时不需要任何标志。 请改用 <see cref="F:System.Security.Permissions.ReflectionPermissionFlag.NoFlags" />。</summary>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermission">
      <summary>控制访问注册表变量的能力。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用完全受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.RegistryPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
      <summary>使用对指定注册表变量的指定访问权限和对注册表控制信息的指定访问权限，初始化 <see cref="T:System.Security.Permissions.RegistryPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值之一。</param>
      <param name="control">
        <see cref="T:System.Security.AccessControl.AccessControlActions" /> 值的按位组合。</param>
      <param name="pathList">向其授予了访问权限的注册表变量的列表（以分号分隔）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 参数不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>通过对指定注册表变量的指定访问权限初始化 <see cref="T:System.Security.Permissions.RegistryPermission" /> 类的新实例。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值之一。</param>
      <param name="pathList">向其授予了访问权限的注册表变量的列表（以分号分隔）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 参数不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)">
      <summary>将指定注册表变量的访问权限添加到现有的权限状态中，同时指定注册表权限访问和访问控制操作。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值之一。</param>
      <param name="actions">
        <see cref="T:System.Security.AccessControl.AccessControlActions" /> 值之一。</param>
      <param name="pathList">注册表变量列表（用分号分隔）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 参数不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>将指定的注册表变量的访问权限添加到现有的权限状态中。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值之一。</param>
      <param name="pathList">注册表变量列表（用分号分隔）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 参数不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="elem">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 参数不是有效的权限元素。

或 -
<paramref name="elem" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)">
      <summary>获取具有指定 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的所有注册表变量的路径。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值之一，表示注册表变量访问的单一类型。</param>
      <returns>具有指定 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的注册表变量的列表（以分号分隔）。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 不是 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的一个有效值。

或 -
<paramref name="access" /> 是 <see cref="F:System.Security.Permissions.RegistryPermissionAccess.AllAccess" />，表示注册表变量访问的多个类型，或者是 <see cref="F:System.Security.Permissions.RegistryPermissionAccess.NoAccess" />，它不表示注册表变量访问的任何类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)">
      <summary>将指定的注册表变量名称的新访问权限设置为现有的权限状态。</summary>
      <param name="access">
        <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值之一。</param>
      <param name="pathList">注册表变量列表（用分号分隔）。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="access" /> 参数不是 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 的有效值。

或 -
<paramref name="pathList" /> 参数不是有效的字符串。</exception>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="other">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermissionAccess">
      <summary>指定允许的对注册表项和值的访问权。</summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.AllAccess">
      <summary>对注册表变量的 <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Create" />、<see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /> 和 <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Write" /> 访问权限。 <see cref="F:System.Security.Permissions.RegistryPermissionAccess.AllAccess" /> 表示多个 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值，如果将它用作 <see cref="T:System.ArgumentException" /> 方法的 <paramref name="access" /> 参数（它需要单一值），则引发 <see cref="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Create">
      <summary>可以创建注册表变量。</summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.NoAccess">
      <summary>没有对注册表变量的访问权限。 <see cref="F:System.Security.Permissions.RegistryPermissionAccess.NoAccess" /> 不表示有效的 <see cref="T:System.Security.Permissions.RegistryPermissionAccess" /> 值，如果将它用作 <see cref="T:System.ArgumentException" /> 的参数（它需要单一值），则引发 <see cref="M:System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)" />。</summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Read">
      <summary>可以读注册表变量。</summary>
    </member>
    <member name="F:System.Security.Permissions.RegistryPermissionAccess.Write">
      <summary>可以写注册表变量。</summary>
    </member>
    <member name="T:System.Security.Permissions.RegistryPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.RegistryPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.RegistryPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是有效的 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.All">
      <summary>获取或设置指定注册表项的完全访问权限。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供完全访问权限。</returns>
      <exception cref="T:System.NotSupportedException">调用 get 访问器；提供它仅为了与 C# 编译器兼容。</exception>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.ChangeAccessControl">
      <summary>获取或设置指定注册表项的更改访问控制。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供更改访问控制。 。</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Create">
      <summary>获取或设置指定注册表项的创建级别访问权限。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供创建级别访问权限。</returns>
    </member>
    <member name="M:System.Security.Permissions.RegistryPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.RegistryPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.RegistryPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Read">
      <summary>获取或设置指定注册表项的读访问权限。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供读取访问权限。</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.ViewAccessControl">
      <summary>获取或设置指定注册表项的查看访问控制。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供查看访问控制。</returns>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.ViewAndModify">
      <summary>获取或设置一组可以查看和修改的指定注册表项。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供创建、读取和写访问权限。</returns>
      <exception cref="T:System.NotSupportedException">调用 get 访问器；提供它仅为了与 C# 编译器兼容。</exception>
    </member>
    <member name="P:System.Security.Permissions.RegistryPermissionAttribute.Write">
      <summary>获取或设置指定注册表项的写访问权限。</summary>
      <returns>一个由分号分隔的注册表项路径列表，用于提供写访问权限。</returns>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBase">
      <summary>允许控制代码访问安全权限。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)">
      <summary>在创建过程中，用指定级别的资源访问权限初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>将权限项添加到权限。</summary>
      <param name="entry">要添加的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性中的元素数目不等于 <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames" /> 属性中的元素数目。
或
<see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 已经包含在权限中。</exception>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Any">
      <summary>指定要用来表示任何通配符的字符。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Clear">
      <summary>清除已添加的权限项的权限。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Copy">
      <summary>创建并返回与当前权限对象相同的副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 参数不是有效的权限元素。
或
不支持 <paramref name="securityElement" /> 参数的版本号。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries">
      <summary>返回已添加到此权限的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 对象的数组。</summary>
      <returns>已添加到此权限的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 对象的数组。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)">
      <summary>创建并返回作为当前权限对象和目标权限对象的交集的权限对象。</summary>
      <param name="target">与当前权限对象类型相同的权限对象。</param>
      <returns>表示当前对象和指定目标交集的新权限对象。 如果交集为空，则此对象为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">目标权限对象与当前权限对象不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限对象是否是指定权限的子集。</summary>
      <param name="target">将用于测试子集关系的权限对象。</param>
      <returns>如果当前权限对象是指定权限对象的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsUnrestricted">
      <summary>获取一个值，该值指示该权限是否不受限制。</summary>
      <returns>如果权限不受限制，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Local">
      <summary>指定要用来表示局部引用的字符。</summary>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType">
      <summary>获取或设置描述给予资源的访问权限类型的枚举值。</summary>
      <returns>枚举值，它从 <see cref="T:System.Type" /> 派生并描述给予资源的访问权限的类型。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">属性值不是枚举值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>从该权限中移除权限项。</summary>
      <param name="entry">要移除的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性中的元素数目不等于 <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames" /> 属性中的元素数目。
或
<see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 不在此权限中。</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.TagNames">
      <summary>获取或设置标识处于保护中的资源的字符串数组。</summary>
      <returns>标识处于保护中的资源的字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">数组的长度为 0。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.ToXml">
      <summary>创建并返回安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)">
      <summary>创建将当前权限对象与目标权限对象组合的权限对象。</summary>
      <param name="target">要与当前的权限对象合并的权限对象。 它必须与当前权限对象的类型相同。</param>
      <returns>新权限对象，它表示当前权限对象和指定权限对象的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 权限对象与当前权限对象不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBaseEntry">
      <summary>定义代码访问安全权限集的最小单位。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor(System.Int32,System.String[])">
      <summary>用指定的权限访问和权限访问路径初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">权限访问级别枚举值的整数表示形式。 <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess" /> 属性被设置为该值。</param>
      <param name="permissionAccessPath">标识处于保护中的资源的字符串数组。 <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性被设置为该值。</param>
      <exception cref="T:System.ArgumentNullException">指定的 <paramref name="permissionAccessPath" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess">
      <summary>获取访问级别枚举值的整数表示形式。</summary>
      <returns>访问级别枚举值。</returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath">
      <summary>获取标识处于保护中的资源的字符串数组。</summary>
      <returns>标识处于保护中的资源的字符串数组。</returns>
    </member>
    <member name="T:System.Security.Permissions.SecurityPermission">
      <summary>描述一组应用于代码的安全权限。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用受限制或不受限制的权限初始化 <see cref="T:System.Security.Permissions.SecurityPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.#ctor(System.Security.Permissions.SecurityPermissionFlag)">
      <summary>初始化具有指定标志初始设置状态的 <see cref="T:System.Security.Permissions.SecurityPermission" /> 类的一个新实例。</summary>
      <param name="flag">权限的初始状态使用由 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 定义的任何权限位的位 OR 组合来表示。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 参数不是 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="P:System.Security.Permissions.SecurityPermission.Flags">
      <summary>获取或设置安全权限标志。</summary>
      <returns>当前权限的状态，使用由 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> 定义的任何权限位的按位 OR 组合来表示。</returns>
      <exception cref="T:System.ArgumentException">尝试将此属性设置为无效值。 有关有效值，请参阅 <see cref="T:System.Security.Permissions.SecurityPermissionFlag" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
不支持 <paramref name="esd" /> 参数的版本号。</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的新权限对象。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.SecurityPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.SiteIdentityPermission">
      <summary>为作为代码来源地的网站定义标识权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> 类的新实例，以表示指定的站点标识。</summary>
      <param name="site">站点名称或通配符表达式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="site" /> 参数不是有效的字符串，也不与有效的通配符站点名称匹配。</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。
或
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="P:System.Security.Permissions.SiteIdentityPermission.Site">
      <summary>获取或设置当前站点。</summary>
      <returns>当前站点。</returns>
      <exception cref="T:System.NotSupportedException">无法检索该站点标识，因为其标识不明确。</exception>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。
或
这两个权限不相等，而且其中一个不是另一个的子集。</exception>
    </member>
    <member name="T:System.Security.Permissions.SiteIdentityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SiteIdentityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.SiteIdentityPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.SiteIdentityPermission" /> 实例。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.SiteIdentityPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.SiteIdentityPermissionAttribute.Site">
      <summary>获取或设置调用代码的站点名称。</summary>
      <returns>要与安全提供程序所指定站点名称相比较的站点名称。</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermission">
      <summary>控制对包含 X.509 证书的存储区的访问权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用完全受限制或无限制的权限状态初始化 <see cref="T:System.Security.Permissions.StorePermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.StorePermissionFlags)">
      <summary>使用指定的访问权限初始化 <see cref="T:System.Security.Permissions.StorePermission" /> 类的新实例。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 不是有效的 <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermission.Flags">
      <summary>获取或设置当前权限允许的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 访问的类型。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。</returns>
      <exception cref="T:System.ArgumentException">尝试将此属性设置为无效值。 有关有效值，请参阅 <see cref="T:System.Security.Permissions.StorePermissionFlags" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" />，包含用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是一个有效的权限元素。
或
<paramref name="securityElement" /> 中的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>包含权限及其任何状态信息的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.StorePermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的安全操作初始化 <see cref="T:System.Security.Permissions.StorePermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.AddToStore">
      <summary>获取或设置一个值，该值指示是否允许代码向存储区添加。</summary>
      <returns>如果允许向存储区添加，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.StorePermission" />。</summary>
      <returns>与此特性对应的 <see cref="T:System.Security.Permissions.StorePermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.CreateStore">
      <summary>获取或设置一个值，该值指示是否允许代码创建存储区。</summary>
      <returns>如果允许创建存储区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.DeleteStore">
      <summary>获取或设置一个值，该值指示是否允许代码删除存储区。</summary>
      <returns>如果允许删除存储区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateCertificates">
      <summary>获取或设置一个值，该值指示是否允许代码枚举存储区中的证书。</summary>
      <returns>如果允许枚举证书，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateStores">
      <summary>获取或设置一个值，该值指示是否允许代码枚举存储区。</summary>
      <returns>如果允许枚举存储区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.Flags">
      <summary>获取或设置存储区权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。 默认值为 <see cref="F:System.Security.Permissions.StorePermissionFlags.NoFlags" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.OpenStore">
      <summary>获取或设置一个值，该值指示是否允许代码打开存储区。</summary>
      <returns>如果允许打开存储区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.RemoveFromStore">
      <summary>获取或设置一个值，该值指示是否允许代码从存储区中移除证书。</summary>
      <returns>如果允许从存储区中移除证书，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionFlags">
      <summary>指定对 X.509 证书存储区的允许访问权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AddToStore">
      <summary>将证书添加到存储区的能力。
出于安全原因，应仅向高度受信任的代码授予此功能。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AllFlags">
      <summary>执行所有证书和存储区操作的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.CreateStore">
      <summary>新建存储区的能力。
新存储是通过调用 <see cref="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)" /> 方法创建而成的。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.DeleteStore">
      <summary>删除存储区的能力。
<see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类没有公开此功能。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates">
      <summary>枚举存储区中的证书的能力。
出于隐私原因，应仅向高度受信任的代码授予此功能。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateStores">
      <summary>枚举计算机上的存储区的能力。
<see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类没有公开此功能。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.NoFlags">
      <summary>未授予执行任何证书或存储区操作的权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.OpenStore">
      <summary>打开存储区的能力。
打开存储的功能不包括枚举证书（导致隐私问题）以及添加或删除证书（导致安全问题）的功能。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore">
      <summary>从存储区中移除证书的能力。
此功能应仅授予给高度受信任的代码，因为删除证书可能会导致拒绝服务。</summary>
    </member>
    <member name="T:System.Security.Permissions.StrongNameIdentityPermission">
      <summary>为强名称定义标识权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>为指定的强名称标识初始化 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 类的新实例。</summary>
      <param name="blob">定义强名称标识命名空间的公钥。</param>
      <param name="name">强名称标识中的简单名称部分。 这与程序集的名称对应。</param>
      <param name="version">标识的版本号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="blob" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="e">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的权限元素。
或
<paramref name="e" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，表示当前权限与指定权限的交集，或者若果交集为空，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.Name">
      <summary>获取或设置强名称标识的简单名称部分。</summary>
      <returns>标识的简单名称。</returns>
      <exception cref="T:System.ArgumentException">值为空字符串 ("")。</exception>
      <exception cref="T:System.NotSupportedException">无法检索此属性值，因为它包含的标识不明确。</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.PublicKey">
      <summary>获取或设置定义强名称标识命名空间的公钥 Blob。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> 包含标识的公钥，或 <see langword="null" />（如果没有密钥）。</returns>
      <exception cref="T:System.ArgumentNullException">该属性值被设置为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">无法检索该属性值，因为它包含不明确的标识。</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。
或
这两个权限不相等，而且其中一个是另一个的子集。</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermission.Version">
      <summary>获取或设置标识的版本号。</summary>
      <returns>标识的版本。</returns>
      <exception cref="T:System.NotSupportedException">无法检索此属性值，因为它包含的标识不明确。</exception>
    </member>
    <member name="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.StrongNameIdentityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.StrongNameIdentityPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />。</returns>
      <exception cref="T:System.ArgumentException">该方法失败，因为关键字为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Name">
      <summary>获取或设置强名称标识的名称。</summary>
      <returns>要与安全提供程序所指定名称相比较的名称。</returns>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.PublicKey">
      <summary>获取或设置用十六进制字符串表示的强名称标识的公钥值。</summary>
      <returns>用十六进制字符串表示的强名称标识的公钥值。</returns>
    </member>
    <member name="P:System.Security.Permissions.StrongNameIdentityPermissionAttribute.Version">
      <summary>获取或设置强名称标识的版本。</summary>
      <returns>强名称标识的版本号。</returns>
    </member>
    <member name="T:System.Security.Permissions.StrongNamePublicKeyBlob">
      <summary>表示强名称的公钥信息（称为 Blob）。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.#ctor(System.Byte[])">
      <summary>使用公钥 Blob 的原始字节初始化 <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> 类的新实例。</summary>
      <param name="publicKey">表示原始公钥数据的字节数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publicKey" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.Equals(System.Object)">
      <summary>获取或设置一个值，该值指示当前公钥 Blob 是否等于所指定的公钥 Blob。</summary>
      <param name="o">包含公钥 Blob 的对象。</param>
      <returns>如果当前对象的公钥 Blob 等于 <paramref name="o" /> 参数的公钥 Blob，则值为 <see langword="true" />，否则值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.GetHashCode">
      <summary>返回一个基于公钥的哈希代码。</summary>
      <returns>基于公钥的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Permissions.StrongNamePublicKeyBlob.ToString">
      <summary>创建并返回公钥 Blob 的字符串表示形式。</summary>
      <returns>公钥 Blob 的十六进制版本。</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermission">
      <summary>定义对 <see cref="T:System.ComponentModel.TypeDescriptor" /> 类的部分信任访问。</summary>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Security.Permissions.TypeDescriptorPermission" /> 类的新实例。</summary>
      <param name="state">要请求的 <see cref="T:System.Security.Permissions.PermissionState" />。 仅 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 和 <see cref="F:System.Security.Permissions.PermissionState.None" /> 有效。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的权限状态。 仅 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /> 和 <see cref="F:System.Security.Permissions.PermissionState.None" /> 有效。</exception>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.TypeDescriptorPermissionFlags)">
      <summary>使用指定的权限标志初始化 <see cref="T:System.Security.Permissions.TypeDescriptorPermission" /> 类的新实例。</summary>
      <param name="flag">要请求的权限标志。</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Copy">
      <summary>由派生类实现时，创建并返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermission.Flags">
      <summary>获取或设置该类型描述符的 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" />。</summary>
      <returns>该类型描述符的 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.FromXml(System.Security.SecurityElement)">
      <summary>在派生类中重写时，用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Intersect(System.Security.IPermission)">
      <summary>通过派生类实现时，创建和返回是当前权限和指定权限的交集的权限。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个新权限，它表示当前权限与指定权限的交集。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>通过派生类实现时，确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为<see langword="true" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsUnrestricted">
      <summary>获取一个值，该值指示是否可以从部分信任的代码调用类型描述符。</summary>
      <returns>如果 <see cref="P:System.Security.Permissions.TypeDescriptorPermission.Flags" /> 属性设置为 <see cref="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.ToXml">
      <summary>当在派生类中重写时，创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Union(System.Security.IPermission)">
      <summary>当在派生类中重写时，则创建属于当前权限与指定权限的并集的权限。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionAttribute">
      <summary>确定应用于 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的权限标志。</summary>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.CreatePermission">
      <summary>当在派生类中重写时，创建一个权限对象，随后可将其序列化为二进制形式并连同 <see cref="T:System.Security.Permissions.SecurityAction" /> 长久存储在程序集的元数据中。</summary>
      <returns>可序列化的权限对象。</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.Flags">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" /> 的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" /> 的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.RestrictedRegistrationAccess">
      <summary>获取或设置一个值，该值指示是否可以在部分信任模式下访问类型描述符。</summary>
      <returns>如果可在部分信任模式下访问类型描述符，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionFlags">
      <summary>定义类型描述符的权限设置。</summary>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.NoFlags">
      <summary>未对类型描述符设置权限标志。</summary>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess">
      <summary>可以从部分受信任的代码调用类型描述符。</summary>
    </member>
    <member name="T:System.Security.Permissions.UIPermission">
      <summary>控制与用户界面和剪贴板相关的权限。 无法继承此类。</summary>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>根据指定，使用完全限制或不受限制的访问初始化 <see cref="T:System.Security.Permissions.UIPermission" /> 类的新实例。</summary>
      <param name="state">枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是有效的 <see cref="T:System.Security.Permissions.PermissionState" />。</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionClipboard)">
      <summary>初始化具有剪贴板权限且无法访问 windows 的 <see cref="T:System.Security.Permissions.UIPermission" /> 类的新实例。</summary>
      <param name="clipboardFlag">枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="clipboardFlag" /> 参数不是有效的 <see cref="T:System.Security.Permissions.UIPermissionClipboard" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionWindow)">
      <summary>在具有使用窗口的权限，但没有对剪贴板的访问权限的情况下，初始化 <see cref="T:System.Security.Permissions.UIPermission" /> 类的新实例。</summary>
      <param name="windowFlag">枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="windowFlag" /> 参数不是有效的 <see cref="T:System.Security.Permissions.UIPermissionWindow" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.#ctor(System.Security.Permissions.UIPermissionWindow,System.Security.Permissions.UIPermissionClipboard)">
      <summary>使用指定的窗口和剪贴板权限初始化 <see cref="T:System.Security.Permissions.UIPermission" /> 类的新实例。</summary>
      <param name="windowFlag">枚举值之一。</param>
      <param name="clipboardFlag">枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="windowFlag" /> 参数不是有效的 <see cref="T:System.Security.Permissions.UIPermissionWindow" /> 值。

或 -
<paramref name="clipboardFlag" /> 参数不是有效的 <see cref="T:System.Security.Permissions.UIPermissionClipboard" /> 值。</exception>
    </member>
    <member name="P:System.Security.Permissions.UIPermission.Clipboard">
      <summary>获取或设置由该权限表示的剪贴板访问权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.UIPermissionClipboard" /> 值之一。</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，它是该权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="P:System.Security.Permissions.UIPermission.Window">
      <summary>获取或设置由权限表示的窗口访问。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.UIPermissionWindow" /> 值之一。</returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.UIPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.UIPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.UIPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="P:System.Security.Permissions.UIPermissionAttribute.Clipboard">
      <summary>获取或设置所允许的对剪贴板访问权限的类型。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.UIPermissionClipboard" /> 值之一。</returns>
    </member>
    <member name="M:System.Security.Permissions.UIPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.UIPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.UIPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.UIPermissionAttribute.Window">
      <summary>获取或设置所允许的对窗口资源访问权限的类型。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.UIPermissionWindow" /> 值之一。</returns>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionClipboard">
      <summary>指定允许调用代码的剪贴板访问权限的类型。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.AllClipboard">
      <summary>可以不受限制地使用剪贴板。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.NoClipboard">
      <summary>不能使用剪贴板。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionClipboard.OwnClipboard">
      <summary>在剪贴板上放置数据的能力 (<see langword="Copy" />、<see langword="Cut" />) 不受限制。 接受 <see langword="Paste" /> 的内部控件（例如文本框）可以接受剪贴板数据，但是必须以编程方式进行读取剪贴板的用户控件不能接受剪贴板数据。</summary>
    </member>
    <member name="T:System.Security.Permissions.UIPermissionWindow">
      <summary>指定允许使用代码的窗口的类型。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.AllWindows">
      <summary>用户可以不受限制地使用所有窗口和用户输入事件。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.NoWindows">
      <summary>用户不能使用任何窗口或用户界面事件。 不能使用任何用户界面。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows">
      <summary>用户只能使用 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> 进行绘图，并且只能对该子窗口中的用户界面使用用户输入事件。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> 的示例包括 <see cref="T:System.Windows.Forms.MessageBox" />、通用对话框控件和在浏览器中显示的控件。</summary>
    </member>
    <member name="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows">
      <summary>用户只能使用 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /> 和 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /> 进行绘图，并且只能对那些顶级窗口和子窗口中的用户界面使用用户输入事件。 有关详细信息，请参阅备注部分。</summary>
    </member>
    <member name="T:System.Security.Permissions.UrlIdentityPermission">
      <summary>为代码源自的 URL 定义标识权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> 类的新实例，以表示 <paramref name="site" /> 描述的 URL 标识。</summary>
      <param name="site">URL 或通配符表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="site" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="site" /> 参数的长度为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="site" /> 参数的 URL、目录或者站点部分无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。
或
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。
或
Url 属性不是有效的 URL。</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。

或 -
Url 属性不是有效的 URL。</exception>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。

或 -
<see cref="P:System.Security.Permissions.UrlIdentityPermission.Url" /> 属性不是有效的 URL。

或 -
两个权限不相等，而且其中一个不是另一个的子集。</exception>
      <exception cref="T:System.NotSupportedException">操作不明确，因为权限表示多个标识。</exception>
    </member>
    <member name="P:System.Security.Permissions.UrlIdentityPermission.Url">
      <summary>获取或设置表示 Internet 代码标识的 URL。</summary>
      <returns>表示 Internet 代码标识的 URL。</returns>
      <exception cref="T:System.NotSupportedException">无法检索该 URL，因为其标识不明确。</exception>
    </member>
    <member name="T:System.Security.Permissions.UrlIdentityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.UrlIdentityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.UrlIdentityPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.UrlIdentityPermissionAttribute.Url">
      <summary>获取或设置调用代码的完整 URL。</summary>
      <returns>要与主应用程序所指定 URL 匹配的 URL。</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 对象控制创建 WebBrowser 控件的能力。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>通过指定一个权限状态，初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的一个新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 的枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>通过指定 Web 浏览器的权限级别，初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的一个新实例。</summary>
      <param name="webBrowserPermissionLevel">
        <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" /> 的枚举值。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">用于重新构造权限的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>两个权限的交集是对它们共同描述的状态进行描述的权限。 对于相交的权限，只有同时满足两个原始权限的请求才是有效的。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果 <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> 属性设置为 <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>获取或设置 Web 浏览器权限级别的当前值。</summary>
      <returns>Web 浏览器权限级别的当前值。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 执行安全操作。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>创建并返回 <see cref="T:System.Security.Permissions.WebBrowserPermission" /> 类的新实例。</summary>
      <returns>与安全声明相对应的 <see cref="T:System.Security.Permissions.WebBrowserPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>为 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> 获取或设置当前 Web 浏览器权限级别。</summary>
      <returns>当前 Web 浏览器权限级别的状态。</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>指定 Web 浏览器的权限级别。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>无法将框架定位到 HTML 的 Web 浏览器。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>可以安全地将框架定位到 HTML（但需要满足若干个限制）的 Web 浏览器。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>可以不受限制地进行定位的 Web 浏览器。</summary>
    </member>
    <member name="T:System.Security.Permissions.ZoneIdentityPermission">
      <summary>为代码源自的区域定义标识权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.#ctor(System.Security.SecurityZone)">
      <summary>初始化 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> 类的新实例，以表示指定的区域标识。</summary>
      <param name="zone">区域标识符。</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="esd">用于重新构造权限的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="esd" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="esd" /> 参数不是有效的权限元素。

或 -
<paramref name="esd" /> 参数的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是 <see langword="null" />，此权限不表示 <see cref="F:System.Security.SecurityZone.NoZone" /> 安全区域，且指定的权限不等于当前的权限。</exception>
    </member>
    <member name="P:System.Security.Permissions.ZoneIdentityPermission.SecurityZone">
      <summary>获取或设置由当前 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> 表示的区域。</summary>
      <returns>
        <see cref="T:System.Security.SecurityZone" /> 值之一。</returns>
      <exception cref="T:System.ArgumentException">该参数值不是 <see cref="T:System.Security.SecurityZone" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>权限的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不为 <see langword="null" />，并且与当前权限不属于同一类型。

或 -
这两个权限不相等，而且当前权限不表示 <see cref="F:System.Security.SecurityZone.NoZone" /> 安全区域。</exception>
    </member>
    <member name="T:System.Security.Permissions.ZoneIdentityPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.ZoneIdentityPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.ZoneIdentityPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" />。</summary>
      <returns>与此属性对应的 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone">
      <summary>获取或设置属性值指定的内容区域中的成员身份。</summary>
      <returns>
        <see cref="T:System.Security.SecurityZone" /> 值之一。</returns>
    </member>
    <member name="T:System.Security.Policy.AllMembershipCondition">
      <summary>表示与所有代码匹配的成员条件。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.AllMembershipCondition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">证据集，将根据它进行测试。</param>
      <returns>总是为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.Equals(System.Object)">
      <summary>确定指定的成员条件是否为 <see cref="T:System.Security.Policy.AllMembershipCondition" />。</summary>
      <param name="o">要与 <see cref="T:System.Security.Policy.AllMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定的成员条件是 <see cref="T:System.Security.Policy.AllMembershipCondition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>成员条件的表示形式。</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.AllMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationDirectory">
      <summary>提供应用程序目录作为策略评估的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Security.Policy.ApplicationDirectory" /> 类的新实例。</summary>
      <param name="name">应用程序目录的路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.Copy">
      <summary>创建 <see cref="T:System.Security.Policy.ApplicationDirectory" /> 的新副本。</summary>
      <returns>
        <see cref="T:System.Security.Policy.ApplicationDirectory" /> 的相同的新副本。</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationDirectory.Directory">
      <summary>获取应用程序目录的路径。</summary>
      <returns>应用程序目录的路径。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.Equals(System.Object)">
      <summary>确定证据对象相同类型的实例是否是等效的。</summary>
      <param name="o">与当前证据对象类型相同的对象。</param>
      <returns>如果两个实例等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.GetHashCode">
      <summary>获取当前应用程序目录的哈希代码。</summary>
      <returns>当前应用程序目录的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectory.ToString">
      <summary>获取 <see cref="T:System.Security.Policy.ApplicationDirectory" /> 证据对象的状态的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Security.Policy.ApplicationDirectory" /> 证据对象的状态的字符串表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationDirectoryMembershipCondition">
      <summary>通过测试程序集的应用程序目录确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否满足成员条件。</summary>
      <param name="evidence">证据集，将根据它进行测试。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.Equals(System.Object)">
      <summary>确定指定的成员条件是否为 <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" />。</summary>
      <param name="o">要与 <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定的成员条件是 <see cref="T:System.Security.Policy.ApplicationDirectoryMembershipCondition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的应用程序目录成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">策略级别上下文，用于解析命名的权限集引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的应用程序目录成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>成员条件状态的字符串表示形式。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationDirectoryMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationTrust">
      <summary>封装关于应用程序的安全决策。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.ApplicationTrust" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.#ctor(System.ApplicationIdentity)">
      <summary>使用 <see cref="T:System.Security.Policy.ApplicationTrust" /> 初始化 <see cref="T:System.ApplicationIdentity" /> 类的新实例。</summary>
      <param name="identity">唯一标识应用程序的 <see cref="T:System.ApplicationIdentity" />。</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.#ctor(System.Security.PermissionSet,System.Collections.Generic.IEnumerable{System.Security.Policy.StrongName})">
      <summary>使用提供的授予集和完全信任程序集的集合，初始化 <see cref="T:System.Security.Policy.ApplicationTrust" /> 类的新实例。</summary>
      <param name="defaultGrantSet">一个默认权限集，被授予所有无特定权限的程序集。</param>
      <param name="fullTrustAssemblies">一组强名称，表示在应用程序域中应被认为完全受信任的程序集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fullTrustAssemblies" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fullTrustAssemblies" /> 包含不具有 <see cref="T:System.Security.Policy.StrongName" /> 的程序集。</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity">
      <summary>获取或设置应用程序信任对象的应用程序标识。</summary>
      <returns>应用程序信任对象的 <see cref="T:System.ApplicationIdentity" />。</returns>
      <exception cref="T:System.ArgumentNullException">无法设置 <see cref="T:System.ApplicationIdentity" />，因为它的值为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.DefaultGrantSet">
      <summary>获取或设置定义默认授予集的策略声明。</summary>
      <returns>描述默认授予的 <see cref="T:System.Security.Policy.PolicyStatement" />。</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.ExtraInfo">
      <summary>获取或设置有关应用程序的额外安全信息。</summary>
      <returns>包含有关应用程序的附加安全信息的对象。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有给定状态的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象。</summary>
      <param name="element">用于重新构造 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">用于 <paramref name="element" /> 的 XML 编码无效。</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.FullTrustAssemblies">
      <summary>获取此应用程序信任的完全信任程序集的列表。</summary>
      <returns>一个完全信任程序集的列表。</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun">
      <summary>获取或设置一个值，该值指示应用程序是否具有所需的权限授予并且受信任可运行。</summary>
      <returns>如果应用程序受信任可以运行，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrust.Persist">
      <summary>获取或设置一个值，该值指示是否保留应用程序信任信息。</summary>
      <returns>如果保留应用程序信任信息，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrust.ToXml">
      <summary>创建 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationTrustCollection">
      <summary>表示 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Add(System.Security.Policy.ApplicationTrust)">
      <summary>将一个元素添加到集合中。</summary>
      <param name="trust">要添加的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象。</param>
      <returns>新元素位置处插入的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trust" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="trust" /> 中指定的 <see cref="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity" /> 的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.AddRange(System.Security.Policy.ApplicationTrust[])">
      <summary>将指定的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 数组的元素复制到集合末尾。</summary>
      <param name="trusts">
        <see cref="T:System.Security.Policy.ApplicationTrust" /> 类型的数组，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trusts" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="trust" /> 中指定的 <see cref="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity" /> 的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.AddRange(System.Security.Policy.ApplicationTrustCollection)">
      <summary>将指定的 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 的元素复制到集合末尾。</summary>
      <param name="trusts">
        <see cref="T:System.Security.Policy.ApplicationTrustCollection" />，包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trusts" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="trust" /> 中指定的 <see cref="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity" /> 的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Clear">
      <summary>从集合中移除所有应用程序信任。</summary>
      <exception cref="T:System.ArgumentException">集合中某一项的 <see cref="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.CopyTo(System.Security.Policy.ApplicationTrust[],System.Int32)">
      <summary>从目标数组的指定索引处开始，将整个集合复制到兼容的一维数组。</summary>
      <param name="array">
        <see cref="T:System.Security.Policy.ApplicationTrust" /> 类型的一维数组，它是从当前集合复制的元素的目标数组。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。
或
该 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 中的元素数目大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.Count">
      <summary>获取集合中包含的项数。</summary>
      <returns>集合中包含的项数。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Find(System.ApplicationIdentity,System.Security.Policy.ApplicationVersionMatch)">
      <summary>获取集合中与指定应用程序标识匹配的应用程序信任。</summary>
      <param name="applicationIdentity">描述要查找的应用程序的 <see cref="T:System.ApplicationIdentity" /> 对象。</param>
      <param name="versionMatch">
        <see cref="T:System.Security.Policy.ApplicationVersionMatch" /> 值之一。</param>
      <returns>包含所有匹配的 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 对象的 <see cref="T:System.Security.Policy.ApplicationTrust" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.GetEnumerator">
      <summary>返回一个可用于循环访问该集合的对象。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Security.Policy.ApplicationTrustEnumerator" />。</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.Item(System.Int32)">
      <summary>获取集合中位于指定索引处的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象。</summary>
      <param name="index">对象在集合中的从零开始的索引。</param>
      <returns>集合中指定索引处的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 大于或等于集合中的对象数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="index" /> 为负数。</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.Item(System.String)">
      <summary>获取指定应用程序的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象。</summary>
      <param name="appFullName">应用程序的全名。</param>
      <returns>指定应用程序的 <see cref="T:System.Security.Policy.ApplicationTrust" />，如果无法找到该对象则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Remove(System.ApplicationIdentity,System.Security.Policy.ApplicationVersionMatch)">
      <summary>从集合中移除与指定条件匹配的所有应用程序信任对象。</summary>
      <param name="applicationIdentity">要移除的 <see cref="T:System.ApplicationIdentity" /> 对象的 <see cref="T:System.Security.Policy.ApplicationTrust" />。</param>
      <param name="versionMatch">
        <see cref="T:System.Security.Policy.ApplicationVersionMatch" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.Remove(System.Security.Policy.ApplicationTrust)">
      <summary>从集合中移除指定的应用程序信任。</summary>
      <param name="trust">要移除的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trust" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="trust" /> 指定的 <see cref="P:System.Security.Policy.ApplicationTrust.ApplicationIdentity" /> 对象的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.RemoveRange(System.Security.Policy.ApplicationTrust[])">
      <summary>从集合中移除指定数组中的应用程序信任对象。</summary>
      <param name="trusts">包含要从当前集合中移除的项的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 类型的一维数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trusts" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.RemoveRange(System.Security.Policy.ApplicationTrustCollection)">
      <summary>从集合中移除指定集合中的应用程序信任对象。</summary>
      <param name="trusts">一个 <see cref="T:System.Security.Policy.ApplicationTrustCollection" />，包含要从当前集合中移除的项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="trusts" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引开始，将 <see cref="T:System.Array" /> 的元素复制到指定的 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.ICollection" /> 所复制的元素的目标数组。 <see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。

或 -
源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="index" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationTrustEnumerator">
      <summary>表示 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 集合中的 <see cref="T:System.Security.Policy.ApplicationTrust" /> 对象的枚举数。</summary>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustEnumerator.Current">
      <summary>获取 <see cref="T:System.Security.Policy.ApplicationTrust" /> 集合中的当前 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.Policy.ApplicationTrust" /> 中的当前 <see cref="T:System.Security.Policy.ApplicationTrustCollection" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustEnumerator.MoveNext">
      <summary>移动到 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 集合中的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.ApplicationTrustEnumerator.Reset">
      <summary>将枚举数重置到 <see cref="T:System.Security.Policy.ApplicationTrustCollection" /> 集合的开头。</summary>
    </member>
    <member name="P:System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取 <see cref="T:System.Object" /> 集合中的当前 <see cref="T:System.Security.Policy.ApplicationTrustCollection" />。</summary>
      <returns>
        <see cref="T:System.Object" /> 中的当前 <see cref="T:System.Security.Policy.ApplicationTrustCollection" />。</returns>
    </member>
    <member name="T:System.Security.Policy.ApplicationVersionMatch">
      <summary>指定在集合中查找应用程序信任时如何匹配版本。</summary>
    </member>
    <member name="F:System.Security.Policy.ApplicationVersionMatch.MatchAllVersions">
      <summary>匹配所有版本。</summary>
    </member>
    <member name="F:System.Security.Policy.ApplicationVersionMatch.MatchExactVersion">
      <summary>匹配精确版本。</summary>
    </member>
    <member name="T:System.Security.Policy.CodeConnectAccess">
      <summary>指定授予代码的网络资源访问权限。</summary>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 类的新实例。</summary>
      <param name="allowScheme">当前实例表示的 URI 方案。</param>
      <param name="allowPort">当前实例表示的端口。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowScheme" /> 为 <see langword="null" />。

或 -
<paramref name="allowScheme" /> 为空字符串 ("")。

或
<paramref name="allowScheme" /> 包含方案中不允许的字符。
或
<paramref name="allowPort" /> 小于 0。
或
<paramref name="allowPort" /> 大于 65,535。</exception>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.AnyScheme">
      <summary>包含表示方案通配符的字符串值。</summary>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.CreateAnySchemeAccess(System.Int32)">
      <summary>返回一个 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例，该实例表示使用任何方案对指定端口的访问权限。</summary>
      <param name="allowPort">返回的实例表示的端口。</param>
      <returns>指定端口的 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowPort" /> 小于 0。

或 -
<paramref name="allowPort" /> 大于 65,535。</exception>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.CreateOriginSchemeAccess(System.Int32)">
      <summary>返回一个 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例，该实例表示使用代码的原始方案对指定端口的访问权限。</summary>
      <param name="allowPort">返回的实例表示的端口。</param>
      <returns>指定端口的 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 实例。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowPort" /> 小于 0。

或 -
<paramref name="allowPort" /> 大于 65,535。</exception>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.DefaultPort">
      <summary>包含用于表示默认端口的值。</summary>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.Equals(System.Object)">
      <summary>返回一个值，指示两个 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 对象是否表示相同的方案和端口。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.CodeConnectAccess" /> 对象进行比较的对象。</param>
      <returns>如果两个对象表示相同的方案和端口，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeConnectAccess.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.OriginPort">
      <summary>包含用于表示代码原始 URI 中的端口值的值。</summary>
    </member>
    <member name="F:System.Security.Policy.CodeConnectAccess.OriginScheme">
      <summary>包含用于表示代码原始 URL 中的方案的值。</summary>
    </member>
    <member name="P:System.Security.Policy.CodeConnectAccess.Port">
      <summary>获取当前实例表示的端口。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，标识与 <see cref="P:System.Security.Policy.CodeConnectAccess.Scheme" /> 属性一起使用的计算机端口。</returns>
    </member>
    <member name="P:System.Security.Policy.CodeConnectAccess.Scheme">
      <summary>获取当前实例表示的 URI 方案。</summary>
      <returns>标识 URI 方案的 <see cref="T:System.String" />，已转换为小写。</returns>
    </member>
    <member name="T:System.Security.Policy.CodeGroup">
      <summary>表示抽象基类，必须从该基类中导出代码组的所有实现。</summary>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>初始化 <see cref="T:System.Security.Policy.CodeGroup" /> 的新实例。</summary>
      <param name="membershipCondition">成员条件，它测试证据以确定此代码组是否应用策略。</param>
      <param name="policy">形式为权限集和特性的代码组的策略声明，这些权限集和特性将被授予匹配成员条件的代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="membershipCondition" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="membershipCondition" /> 参数的类型无效。
或
<paramref name="policy" /> 参数的类型无效。</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup)">
      <summary>将子代码组添加到当前代码组。</summary>
      <param name="group">要作为子级添加的代码组。 新的子代码组被添加到列表的末端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="group" /> 参数不是有效的代码组。</exception>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.AttributeString">
      <summary>获取代码组策略声明的特性的字符串表示形式。</summary>
      <returns>代码组策略声明的特性的字符串表示形式。</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Children">
      <summary>获取或设置代码组的子代码组的排序列表。</summary>
      <returns>子代码组的列表。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">尝试使用非 <see cref="T:System.Security.Policy.CodeGroup" /> 对象的子级列表设置此属性。</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Copy">
      <summary>当在派生类中被重写时，制作当前代码组的一个深层副本。</summary>
      <returns>当前代码组（包括其成员条件和子代码组）的等效副本。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>当在派生类中被重写时，序列化导出的代码组所特有的属性和内部状态，并将序列化添加到指定的 <see cref="T:System.Security.SecurityElement" />。</summary>
      <param name="element">向其中添加序列化的 XML 编码。</param>
      <param name="level">代码组所在的策略级别。</param>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Description">
      <summary>获取或设置代码组的说明。</summary>
      <returns>代码组的说明。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Equals(System.Object)">
      <summary>确定指定的代码组是否等效于当前代码组。</summary>
      <param name="o">要与当前代码组比较的代码组。</param>
      <returns>如果指定的代码组等效于当前代码组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup,System.Boolean)">
      <summary>确定指定的代码组是否等效于当前代码组，如果指定，还检查子代码组。</summary>
      <param name="cg">要与当前代码组比较的代码组。</param>
      <param name="compareChildren">为 <see langword="true" /> 则还比较子代码组；否则为 <see langword="false" />。</param>
      <returns>如果指定的代码组等效于当前代码组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有给定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>从 XML 编码重新构造具有给定的状态和策略级别的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">代码组所在的策略级别。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.GetHashCode">
      <summary>获取当前代码组的哈希代码。</summary>
      <returns>当前代码组的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.MembershipCondition">
      <summary>获取或设置代码组的成员条件。</summary>
      <returns>成员条件，它确定该代码组适用于哪个证据。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将该参数设置为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.MergeLogic">
      <summary>当在派生类中被重写时，获取该代码组的合并逻辑。</summary>
      <returns>该代码组合并逻辑的说明。</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.Name">
      <summary>获取或设置代码组的名称。</summary>
      <returns>代码组的名称。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>当在派生类中被重写时，从指定的 <see cref="T:System.Security.SecurityElement" /> 重新构造导出的代码组所特有的属性和内部状态。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">代码组所在的策略级别。</param>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.PermissionSetName">
      <summary>获取代码组的命名的权限集的名称。</summary>
      <returns>策略级别的命名的权限集的名称。</returns>
    </member>
    <member name="P:System.Security.Policy.CodeGroup.PolicyStatement">
      <summary>获取或设置与该代码组关联的策略声明。</summary>
      <returns>该代码组的策略声明。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup)">
      <summary>移除指定的子代码组。</summary>
      <param name="group">要作为子级移除的代码组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="group" /> 参数不是当前代码组的直接子代码组。</exception>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>当在派生类中被重写时，解析证据集的代码组及其子代的策略。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>由具有可选特性的代码组授予的权限组成的策略声明；或者，如果代码组不适用（成员条件与指定的证据不匹配），则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>当在派生类中被重写时，解析匹配的代码组。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>一个 <see cref="T:System.Security.Policy.CodeGroup" />，它是匹配代码组的树的根。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>创建安全对象、其当前状态以及代码所在策略级别的 XML 编码。</summary>
      <param name="level">代码组所在的策略级别。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.Policy.Evidence">
      <summary>定义组成对安全策略决策的输入的一组信息。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.Evidence" /> 类的新的空实例。</summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Object[],System.Object[])">
      <summary>依据多个主机和程序集证据集初始化 <see cref="T:System.Security.Policy.Evidence" /> 类的新实例。</summary>
      <param name="hostEvidence">创建新实例所依据的主机证据。</param>
      <param name="assemblyEvidence">创建新实例所依据的程序集证据。</param>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.Evidence)">
      <summary>从现有证据的浅表副本初始化 <see cref="T:System.Security.Policy.Evidence" /> 类的新实例。</summary>
      <param name="evidence">从其创建新实例的 <see cref="T:System.Security.Policy.Evidence" /> 实例。 此实例不是深层复制的。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="evidence" /> 参数不是 <see cref="T:System.Security.Policy.Evidence" /> 的有效实例。</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.#ctor(System.Security.Policy.EvidenceBase[],System.Security.Policy.EvidenceBase[])">
      <summary>依据多个主机和程序集证据集初始化 <see cref="T:System.Security.Policy.Evidence" /> 类的新实例。</summary>
      <param name="hostEvidence">创建新实例所依据的主机证据。</param>
      <param name="assemblyEvidence">创建新实例所依据的程序集证据。</param>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddAssembly(System.Object)">
      <summary>将指定的程序集证据添加到证据集。</summary>
      <param name="id">任意证据对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 不可序列化。</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddAssemblyEvidence``1(``0)">
      <summary>将指定类型的证据对象添加到程序集提供的证据列表。</summary>
      <param name="evidence">要添加的程序集证据。</param>
      <typeparam name="T">
        <paramref name="evidence" /> 中对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">类型 <paramref name="T" /> 的证据已在列表中。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="evidence" /> 不可序列化。</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddHost(System.Object)">
      <summary>将主机提供的指定证据添加到证据集。</summary>
      <param name="id">任意证据对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> 不可序列化。</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.AddHostEvidence``1(``0)">
      <summary>将指定类型的主机证据添加到主机证据集合。</summary>
      <param name="evidence">要添加的主机证据。</param>
      <typeparam name="T">
        <paramref name="evidence" /> 中对象的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">类型 <paramref name="T" /> 的证据已在列表中。</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.Clear">
      <summary>从证据集中移除主机和程序集证据。</summary>
    </member>
    <member name="M:System.Security.Policy.Evidence.Clone">
      <summary>返回此证据对象的重复副本。</summary>
      <returns>此证据对象的重复副本。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.CopyTo(System.Array,System.Int32)">
      <summary>将证据对象复制到 <see cref="T:System.Array" />。</summary>
      <param name="array">要向其复制证据对象的目标数组。</param>
      <param name="index">数组中从零开始的位置，从该位置开始向其复制证据对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 在目标数组的范围之外。</exception>
    </member>
    <member name="P:System.Security.Policy.Evidence.Count">
      <summary>获取证据集中证据对象的数目。</summary>
      <returns>证据集中证据对象的数目。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetAssemblyEnumerator">
      <summary>枚举程序集提供的证据。</summary>
      <returns>
        <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> 方法添加的证据的枚举数。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetAssemblyEvidence``1">
      <summary>从集合中获取指定类型的程序集证据。</summary>
      <typeparam name="T">要获取的证据的类型。</typeparam>
      <returns>程序集证据集合中 <paramref name="T" /> 类型的证据。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetEnumerator">
      <summary>枚举集合中的所有证据，包括由主机提供的证据和由程序集提供的证据。</summary>
      <returns>由 <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> 方法和 <see cref="M:System.Security.Policy.Evidence.AddAssembly(System.Object)" /> 方法添加的证据的枚举数。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetHostEnumerator">
      <summary>枚举由主机提供的证据。</summary>
      <returns>
        <see cref="M:System.Security.Policy.Evidence.AddHost(System.Object)" /> 方法添加的证据的枚举数。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.GetHostEvidence``1">
      <summary>从集合中获取指定类型的主机证据。</summary>
      <typeparam name="T">要获取的证据的类型。</typeparam>
      <returns>主机证据集合中 <paramref name="T" /> 类型的证据。</returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.IsReadOnly">
      <summary>获取一个值，该值指示证据集是否为只读。</summary>
      <returns>因为不支持只读证据集，所以总是为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.IsSynchronized">
      <summary>获取一个值，该值指示证据集是否线程安全。</summary>
      <returns>因为不支持线程安全证据集，所以总是为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.Evidence.Locked">
      <summary>获取或设置一个值，该值指示证据是否是锁定的。</summary>
      <returns>如果证据是锁定的，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence)">
      <summary>将指定的证据集合并到当前证据集。</summary>
      <param name="evidence">要合并到当前证据集的证据集。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="evidence" /> 参数不是 <see cref="T:System.Security.Policy.Evidence" /> 的有效实例。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="P:System.Security.Policy.Evidence.Locked" /> 为 <see langword="true" />，调用该方法的代码不具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />，并且 <paramref name="evidence" /> 参数具有一个不为空的主机列表。</exception>
    </member>
    <member name="M:System.Security.Policy.Evidence.RemoveType(System.Type)">
      <summary>从主机和程序集枚举中移除给定类型的证据。</summary>
      <param name="t">要移除的证据的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 为 null。</exception>
    </member>
    <member name="P:System.Security.Policy.Evidence.SyncRoot">
      <summary>获取同步根。</summary>
      <returns>因为不支持证据集的同步，所以总是为 <see langword="this" />（在 Visual Basic 中为 <see langword="Me" />）。</returns>
    </member>
    <member name="T:System.Security.Policy.EvidenceBase">
      <summary>提供一个基类，要用作证据的所有对象都必须派生自该类。</summary>
    </member>
    <member name="M:System.Security.Policy.EvidenceBase.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.EvidenceBase" /> 类的新实例。</summary>
      <exception cref="T:System.InvalidOperationException">要用作证据的对象不可序列化。</exception>
    </member>
    <member name="M:System.Security.Policy.EvidenceBase.Clone">
      <summary>创建作为当前实例的完整副本的新对象。</summary>
      <returns>此证据对象的重复副本。</returns>
    </member>
    <member name="T:System.Security.Policy.FileCodeGroup">
      <summary>向符合成员条件的代码程序集授予权限以操作位于代码程序集中的文件。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Permissions.FileIOPermissionAccess)">
      <summary>初始化 <see cref="T:System.Security.Policy.FileCodeGroup" /> 类的新实例。</summary>
      <param name="membershipCondition">成员条件，它测试证据以确定此代码组是否应用策略。</param>
      <param name="access">
        <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /> 值之一。 该值用于构造授予的 <see cref="T:System.Security.Permissions.FileIOPermission" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="membershipCondition" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="membershipCondition" /> 参数的类型无效。

或 -
<paramref name="access" /> 参数的类型无效。</exception>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.AttributeString">
      <summary>获取代码组策略声明的特性的字符串表示形式。</summary>
      <returns>总是为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Copy">
      <summary>生成当前代码组的深层副本。</summary>
      <returns>当前代码组（包括其成员条件和子代码组）的等效副本。</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Equals(System.Object)">
      <summary>确定指定的代码组是否等效于当前代码组。</summary>
      <param name="o">要与当前代码组比较的代码组。</param>
      <returns>如果指定的代码组等效于当前代码组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.GetHashCode">
      <summary>获取当前代码组的哈希代码。</summary>
      <returns>当前代码组的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.MergeLogic">
      <summary>获取合并逻辑。</summary>
      <returns>字符串“Union”。</returns>
    </member>
    <member name="P:System.Security.Policy.FileCodeGroup.PermissionSetName">
      <summary>获取代码组的命名的权限集的名称。</summary>
      <returns>字符串 "FileIO-" 和访问类型的串联。</returns>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>对一组证据解析代码组及其子代的策略。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>由具有可选特性的代码组授予的权限组成的策略声明；或者，如果代码组不适用（成员条件与指定的证据不匹配），则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">当前策略是 <see langword="null" />。

或 -
将不止一个代码组（包括父代码组和所有子代码组）标记为 <see cref="F:System.Security.Policy.PolicyStatementAttribute.Exclusive" />。</exception>
    </member>
    <member name="M:System.Security.Policy.FileCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>解析匹配的代码组。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>一个 <see cref="T:System.Security.Policy.CodeGroup" />，它是匹配代码组的树的根。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Policy.FirstMatchCodeGroup">
      <summary>允许由代码组的策略声明和第一个匹配的子代码组的策略声明的联合来定义安全策略。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>初始化 <see cref="T:System.Security.Policy.FirstMatchCodeGroup" /> 类的新实例。</summary>
      <param name="membershipCondition">成员条件，它测试证据以确定此代码组是否应用策略。</param>
      <param name="policy">形式为权限集和特性的代码组的策略声明，这些权限集和特性将被授予匹配成员条件的代码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="membershipCondition" /> 参数的类型无效。
或
<paramref name="policy" /> 参数的类型无效。</exception>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.Copy">
      <summary>生成代码组的深层副本。</summary>
      <returns>代码组（包括其成员条件和子代码组）的等效副本。</returns>
    </member>
    <member name="P:System.Security.Policy.FirstMatchCodeGroup.MergeLogic">
      <summary>获取合并逻辑。</summary>
      <returns>字符串“First Match”。</returns>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>对一组证据解析代码组及其子代的策略。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>由具有可选特性的代码组授予的权限组成的策略声明；或者，如果代码组不适用（成员条件与指定的证据不匹配），则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">将不止一个代码组（包括父代码组和任何子代码组）标记为 <see cref="F:System.Security.Policy.PolicyStatementAttribute.Exclusive" />。</exception>
    </member>
    <member name="M:System.Security.Policy.FirstMatchCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>解析匹配的代码组。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>一个 <see cref="T:System.Security.Policy.CodeGroup" />，它是匹配代码组的树的根。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Policy.GacInstalled">
      <summary>确认一个代码程序集在全局程序集缓存 (GAC) 中以策略评估证据的形式产生。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.GacInstalled" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.Copy">
      <summary>创建当前对象的等效副本。</summary>
      <returns>
        <see cref="T:System.Security.Policy.GacInstalled" /> 的一个等效副本。</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建与当前对象对应的新标识权限。</summary>
      <param name="evidence">构造标识权限所依据的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>与当前对象对应的新标识权限。</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.Equals(System.Object)">
      <summary>指示当前对象是否等效于指定的对象。</summary>
      <param name="o">要与当前对象进行比较的对象。</param>
      <returns>如果 <paramref name="o" /> 是 <see cref="T:System.Security.Policy.GacInstalled" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.GetHashCode">
      <summary>返回当前对象的哈希代码。</summary>
      <returns>当前对象的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Policy.GacInstalled.ToString">
      <summary>返回当前对象的字符串表示形式。</summary>
      <returns>当前对象的字符串表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.GacMembershipCondition">
      <summary>通过测试程序集的全局程序集缓存成员资格，确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.GacMembershipCondition" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>指示指定的证据是否满足成员条件。</summary>
      <param name="evidence">进行测试所依据的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>一个新 <see cref="T:System.Security.Policy.GacMembershipCondition" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.Equals(System.Object)">
      <summary>指示当前对象是否等效于指定的对象。</summary>
      <param name="o">要与当前对象进行比较的对象。</param>
      <returns>如果 <paramref name="o" /> 为 <see cref="T:System.Security.Policy.GacMembershipCondition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>使用指定的 XML 编码重新构造安全对象。</summary>
      <param name="e">包含用于重新构造安全对象的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 XML 编码，利用指定的策略级别上下文重新构造安全对象。</summary>
      <param name="e">包含用于重新构造安全对象的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</param>
      <param name="level">用于解析 <see cref="T:System.Security.Policy.PolicyLevel" /> 引用的 <see cref="T:System.Security.NamedPermissionSet" /> 上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.GetHashCode">
      <summary>获取当前成员资格条件的哈希代码。</summary>
      <returns>0（零）。</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.ToString">
      <summary>返回成员条件的字符串表示形式。</summary>
      <returns>成员条件的字符串表示形式。</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>包含安全对象的 XML 编码（包括所有状态信息）的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Security.Policy.GacMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的策略级别上下文创建安全对象的 XML 编码及其当前状态。</summary>
      <param name="level">用于解析 <see cref="T:System.Security.Policy.PolicyLevel" /> 引用的 <see cref="T:System.Security.NamedPermissionSet" /> 上下文。</param>
      <returns>包含安全对象的 XML 编码（包括所有状态信息）的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="T:System.Security.Policy.Hash">
      <summary>提供有关程序集的哈希值的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.Hash.#ctor(System.Reflection.Assembly)">
      <summary>初始化 <see cref="T:System.Security.Policy.Hash" /> 类的新实例。</summary>
      <param name="assembly">计算其哈希值的程序集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> 不是运行时 <see cref="T:System.Reflection.Assembly" /> 对象。</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.CreateMD5(System.Byte[])">
      <summary>创建一个包含 <see cref="T:System.Security.Policy.Hash" /> 哈希值的 <see cref="T:System.Security.Cryptography.MD5" /> 对象。</summary>
      <param name="md5">一个包含 <see cref="T:System.Security.Cryptography.MD5" /> 哈希值的字节数组。</param>
      <returns>一个对象，包含由 <paramref name="md5" /> 参数提供的哈希值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="md5" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.CreateSHA1(System.Byte[])">
      <summary>创建一个包含 <see cref="T:System.Security.Policy.Hash" /> 哈希值的 <see cref="T:System.Security.Cryptography.SHA1" /> 对象。</summary>
      <param name="sha1">一个包含 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希值的字节数组。</param>
      <returns>一个对象，包含由 <paramref name="sha1" /> 参数提供的哈希值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sha1" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.CreateSHA256(System.Byte[])">
      <summary>创建一个包含 <see cref="T:System.Security.Policy.Hash" /> 哈希值的 <see cref="T:System.Security.Cryptography.SHA256" /> 对象。</summary>
      <param name="sha256">一个包含 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希值的字节数组。</param>
      <returns>一个哈希对象，包含由 <paramref name="sha256" /> 参数提供的哈希值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sha256" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.GenerateHash(System.Security.Cryptography.HashAlgorithm)">
      <summary>使用指定的哈希算法计算程序集的哈希值。</summary>
      <param name="hashAlg">将用于计算程序集的哈希值的哈希算法。</param>
      <returns>一个字节数组，它表示程序集的哈希值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hashAlg" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException">无法生成程序集的哈希值。</exception>
    </member>
    <member name="M:System.Security.Policy.Hash.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>获取带有参数名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="P:System.Security.Policy.Hash.MD5">
      <summary>获取程序集的 <see cref="T:System.Security.Cryptography.MD5" /> 哈希值。</summary>
      <returns>一个字节数组，表示程序集的 <see cref="T:System.Security.Cryptography.MD5" /> 哈希值。</returns>
    </member>
    <member name="P:System.Security.Policy.Hash.SHA1">
      <summary>获取程序集的 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希值。</summary>
      <returns>一个字节数组，表示程序集的 <see cref="T:System.Security.Cryptography.SHA1" /> 哈希值。</returns>
    </member>
    <member name="P:System.Security.Policy.Hash.SHA256">
      <summary>获取程序集的 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希值。</summary>
      <returns>一个字节数组，表示程序集的 <see cref="T:System.Security.Cryptography.SHA256" /> 哈希值。</returns>
    </member>
    <member name="M:System.Security.Policy.Hash.ToString">
      <summary>返回当前 <see cref="T:System.Security.Policy.Hash" /> 的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.Hash" /> 的表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.HashMembershipCondition">
      <summary>通过测试程序集的哈希值确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>用确定成员身份的哈希算法和哈希值初始化 <see cref="T:System.Security.Policy.HashMembershipCondition" /> 类的新实例。</summary>
      <param name="hashAlg">将用于计算程序集的哈希值的哈希算法。</param>
      <param name="value">要进行测试的哈希值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hashAlg" /> 参数为 <see langword="null" />。
或
<paramref name="value" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlg" /> 参数不是有效的哈希算法。</exception>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">证据集，将根据它进行测试。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.Equals(System.Object)">
      <summary>确定指定对象中的 <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> 和 <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> 是否等效于包含在当前 <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> 中的 <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> 和 <see cref="T:System.Security.Policy.HashMembershipCondition" />。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.HashMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定对象中的 <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> 和 <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> 等效于包含在当前 <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> 中的 <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> 和 <see cref="T:System.Security.Policy.HashMembershipCondition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">策略级别上下文，用于解析命名的权限集引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm">
      <summary>获取或设置用于成员条件的哈希算法。</summary>
      <returns>用于成员条件的哈希算法。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Security.Policy.HashMembershipCondition.HashAlgorithm" /> 设置为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.HashMembershipCondition.HashValue">
      <summary>获取或设置要针对其测试成员条件的哈希值。</summary>
      <returns>要针对其测试成员条件的哈希值。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Security.Policy.HashMembershipCondition.HashValue" /> 设置为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>在整个对象图形已经反序列化时运行。</summary>
      <param name="sender">开始回调的对象。 当前未实现该参数的功能。</param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">此序列化的目标 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>成员条件状态的字符串表示形式。</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.HashMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.Policy.IIdentityPermissionFactory">
      <summary>定义创建新标识权限的方法。</summary>
    </member>
    <member name="M:System.Security.Policy.IIdentityPermissionFactory.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建指定证据的新标识权限。</summary>
      <param name="evidence">创建新标识权限所依据的证据。</param>
      <returns>新标识权限。</returns>
    </member>
    <member name="T:System.Security.Policy.IMembershipCondition">
      <summary>定义测试以确定代码程序集是否是代码组的成员。</summary>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">证据集，将根据它进行测试。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Object" />。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Object" />，则为 <see cref="T:System.Object" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.IMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>当前成员条件状态的字符串表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.NetCodeGroup">
      <summary>向从其下载程序集的站点授予 Web 权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.#ctor(System.Security.Policy.IMembershipCondition)">
      <summary>初始化 <see cref="T:System.Security.Policy.NetCodeGroup" /> 类的新实例。</summary>
      <param name="membershipCondition">成员条件，它测试证据以确定此代码组是否应用代码访问安全策略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="membershipCondition" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="membershipCondition" /> 参数的类型无效。</exception>
    </member>
    <member name="F:System.Security.Policy.NetCodeGroup.AbsentOriginScheme">
      <summary>包含一个值，该值用于为具有未知或未能识别的原始方案的代码指定连接访问权限。</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.AddConnectAccess(System.String,System.Security.Policy.CodeConnectAccess)">
      <summary>将指定的连接访问权限添加到当前代码组。</summary>
      <param name="originScheme">一个 <see cref="T:System.String" />，包含要与代码的方案进行匹配的方案。</param>
      <param name="connectAccess">一个 <see cref="T:System.Security.Policy.CodeConnectAccess" />，指定代码可用来连接回其原始服务器的方案和端口。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="originScheme" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="originScheme" /> 包含方案中不允许的字符。
或
<paramref name="originScheme" /> = <see cref="F:System.Security.Policy.NetCodeGroup.AbsentOriginScheme" /> 和 <paramref name="connectAccess" /> 指定 <see cref="F:System.Security.Policy.CodeConnectAccess.OriginScheme" /> 作为其方案。</exception>
    </member>
    <member name="F:System.Security.Policy.NetCodeGroup.AnyOtherOriginScheme">
      <summary>包含一个值，用于指定任何其他未指定的原始方案。</summary>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.AttributeString">
      <summary>获取代码组策略声明的特性的字符串表示形式。</summary>
      <returns>总是为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Copy">
      <summary>生成当前代码组的深层副本。</summary>
      <returns>当前代码组（包括其成员条件和子代码组）的等效副本。</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Equals(System.Object)">
      <summary>确定指定的代码组是否等效于当前代码组。</summary>
      <param name="o">要与当前代码组进行比较的 <see cref="T:System.Security.Policy.NetCodeGroup" /> 对象。</param>
      <returns>如果指定的代码组等效于当前代码组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.GetConnectAccessRules">
      <summary>获取当前代码组的连接访问权限信息。</summary>
      <returns>一个 <see cref="T:System.Collections.DictionaryEntry" /> 数组，包含连接访问权限信息。</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.GetHashCode">
      <summary>获取当前代码组的哈希代码。</summary>
      <returns>当前代码组的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.MergeLogic">
      <summary>获取用于合并组的逻辑。</summary>
      <returns>字符串“Union”。</returns>
    </member>
    <member name="P:System.Security.Policy.NetCodeGroup.PermissionSetName">
      <summary>获取该代码组的 <see cref="T:System.Security.NamedPermissionSet" /> 的名称。</summary>
      <returns>始终为字符串“Same site Web”。</returns>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResetConnectAccess">
      <summary>移除当前代码组的所有连接访问权限信息。</summary>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>对一组证据解析代码组及其子代的策略。</summary>
      <param name="evidence">程序集的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>由具有可选特性的代码组授予的权限组成的 <see cref="T:System.Security.Policy.PolicyStatement" />；或者，如果代码组不适用（成员条件与指定的证据不匹配），则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">将不止一个代码组（包括父代码组和任何子代码组）标记为 <see cref="F:System.Security.Policy.PolicyStatementAttribute.Exclusive" />。</exception>
    </member>
    <member name="M:System.Security.Policy.NetCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>解析匹配的代码组。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>证据匹配的完整代码组集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Policy.PermissionRequestEvidence">
      <summary>定义表示权限请求的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.#ctor(System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet)">
      <summary>用代码程序集的权限请求初始化 <see cref="T:System.Security.Policy.PermissionRequestEvidence" /> 类的新实例。</summary>
      <param name="request">代码运行所需的最小权限。</param>
      <param name="optional">（如果授予）代码可以使用的（但不是必需的）权限。</param>
      <param name="denied">代码明确请求不要授予的权限。</param>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.Copy">
      <summary>创建当前 <see cref="T:System.Security.Policy.PermissionRequestEvidence" /> 的等效副本。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.PermissionRequestEvidence" /> 的等效副本。</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.DeniedPermissions">
      <summary>获取代码明确请求不要授予的权限。</summary>
      <returns>代码明确请求不要授予的权限。</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.OptionalPermissions">
      <summary>获取（如果授予）代码可以使用的（但不是必需的）权限。</summary>
      <returns>（如果授予）代码可以使用的（但不是必需的）权限。</returns>
    </member>
    <member name="P:System.Security.Policy.PermissionRequestEvidence.RequestedPermissions">
      <summary>获取代码运行所需的最小权限。</summary>
      <returns>代码运行所需的最小权限。</returns>
    </member>
    <member name="M:System.Security.Policy.PermissionRequestEvidence.ToString">
      <summary>获取 <see cref="T:System.Security.Policy.PermissionRequestEvidence" /> 状态的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Security.Policy.PermissionRequestEvidence" /> 状态的字符串表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyException">
      <summary>当策略禁止代码运行时引发的异常。</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.Policy.PolicyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Security.Policy.PolicyException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Security.Policy.PolicyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Security.Policy.PolicyException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.Policy.PolicyException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="exception">导致当前异常的异常。 如果 <paramref name="exception" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.Security.Policy.PolicyLevel">
      <summary>表示公共语言运行时的安全策略级别。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>将与指定的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 对应的 <see cref="T:System.Security.Policy.StrongName" /> 添加到 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 对象列表中，这些对象用于确定程序集是否为不应评估的程序集组的成员。</summary>
      <param name="sn">用于创建要添加到 <see cref="T:System.Security.Policy.StrongName" /> 对象（这些对象用于确定程序集是否为不应评估的程序集组的成员）列表的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sn" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sn" /> 参数指定的 <see cref="T:System.Security.Policy.StrongName" /> 已获得完全信任。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>将指定的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 添加到 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 对象（这些对象用于确定程序集是否为不应评估的程序集组的成员）的列表中。</summary>
      <param name="snMC">要添加到 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 对象（这些对象用于确定程序集是否为不应评估的程序集组的成员）的列表中的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="snMC" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="snMC" /> 参数指定的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 已获得完全信任。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>将 <see cref="T:System.Security.NamedPermissionSet" /> 添加到当前的策略级别中。</summary>
      <param name="permSet">要添加到当前策略级别中的 <see cref="T:System.Security.NamedPermissionSet" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permSet" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="permSet" /> 参数与 <see cref="T:System.Security.NamedPermissionSet" /> 中的现有 <see cref="T:System.Security.Policy.PolicyLevel" /> 具有相同的名称。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(System.String,System.Security.PermissionSet)">
      <summary>用指定的 <see cref="T:System.Security.NamedPermissionSet" /> 替换当前策略级别中的 <see cref="T:System.Security.PermissionSet" />。</summary>
      <param name="name">要替换的 <see cref="T:System.Security.NamedPermissionSet" /> 的名称。</param>
      <param name="pSet">用于替换 <paramref name="name" /> 参数所指定的 <see cref="T:System.Security.PermissionSet" /> 的 <see cref="T:System.Security.NamedPermissionSet" />。</param>
      <returns>已替换的 <see cref="T:System.Security.NamedPermissionSet" /> 的副本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。
或
<paramref name="pSet" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数等于保留权限集的名称。
或
找不到 <paramref name="pSet" /> 参数所指定的 <see cref="T:System.Security.PermissionSet" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.CreateAppDomainLevel">
      <summary>创建供在应用程序域策略级别使用的新的策略级别。</summary>
      <returns>新创建的 <see cref="T:System.Security.Policy.PolicyLevel" />。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有给定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数所指定的 <see cref="T:System.Security.SecurityElement" /> 无效。</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.FullTrustAssemblies">
      <summary>获取 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 对象列表，这些对象用于确定程序集是否为用于评估安全策略的程序集组的成员。</summary>
      <returns>
        <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 对象列表，这些对象用于确定程序集是否为用于评估安全策略的程序集组的成员。 在对列表中没有的程序集进行安全策略评估的过程中，这些程序集被授予完全信任。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.GetNamedPermissionSet(System.String)">
      <summary>返回具有指定名称的当前策略级别中的 <see cref="T:System.Security.NamedPermissionSet" />。</summary>
      <param name="name">要查找的 <see cref="T:System.Security.NamedPermissionSet" /> 的名称。</param>
      <returns>如果找到，则为具有指定名称的当前策略级别中的 <see cref="T:System.Security.NamedPermissionSet" />；否则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Label">
      <summary>获取策略级别的描述性标签。</summary>
      <returns>与该策略级别关联的标签。</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.NamedPermissionSets">
      <summary>获取为策略级别定义的命名权限集的列表。</summary>
      <returns>为策略级别定义的命名权限集的列表。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Recover">
      <summary>用上一次的备份（反映上一次保存之前的策略状态）替换此 <see cref="T:System.Security.Policy.PolicyLevel" /> 的配置文件，并将它返回到上一次保存的状态。</summary>
      <exception cref="T:System.Security.Policy.PolicyException">该策略级别没有有效的配置文件。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName)">
      <summary>将具有指定 <see cref="T:System.Security.Policy.StrongName" /> 的程序集从策略级别用来评估策略的程序集列表中移除。</summary>
      <param name="sn">要从用于评估策略的程序集列表中移除的程序集的 <see cref="T:System.Security.Policy.StrongName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sn" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">具有 <paramref name="sn" /> 参数所指定的 <see cref="T:System.Security.Policy.StrongName" /> 的程序集未获得完全信任。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition)">
      <summary>将具有指定 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的程序集从策略级别用来评估策略的程序集列表中移除。</summary>
      <param name="snMC">要从用于评估策略的程序集列表中移除的程序集的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="snMC" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="snMC" /> 参数所指定的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 未获得完全信任。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet)">
      <summary>从当前策略级别中移除指定的 <see cref="T:System.Security.NamedPermissionSet" />。</summary>
      <param name="permSet">要从当前策略级别中移除的 <see cref="T:System.Security.NamedPermissionSet" />。</param>
      <returns>已移除的 <see cref="T:System.Security.NamedPermissionSet" />。</returns>
      <exception cref="T:System.ArgumentException">未找到 <paramref name="permSet" /> 参数所指定的 <see cref="T:System.Security.NamedPermissionSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permSet" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.String)">
      <summary>从当前策略级别中移除具有指定名称的 <see cref="T:System.Security.NamedPermissionSet" />。</summary>
      <param name="name">要移除的 <see cref="T:System.Security.NamedPermissionSet" /> 的名称。</param>
      <returns>已移除的 <see cref="T:System.Security.NamedPermissionSet" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数等于保留权限集的名称。
或
找不到具有指定名称的 <see cref="T:System.Security.NamedPermissionSet" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Reset">
      <summary>将当前策略级别返回到默认状态。</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence)">
      <summary>根据策略级别的证据移除策略，并返回产生的 <see cref="T:System.Security.Policy.PolicyStatement" />。</summary>
      <param name="evidence">用于解析 <see cref="T:System.Security.Policy.Evidence" /> 的 <see cref="T:System.Security.Policy.PolicyLevel" />。</param>
      <returns>生成的 <see cref="T:System.Security.Policy.PolicyStatement" />。</returns>
      <exception cref="T:System.Security.Policy.PolicyException">策略级别包含多个标记为独占的匹配代码组。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>解析策略级别的策略并返回与证据匹配的代码组树的根。</summary>
      <param name="evidence">用于解析策略的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>
        <see cref="T:System.Security.Policy.CodeGroup" />，表示与指定证据匹配的代码组树的根。</returns>
      <exception cref="T:System.Security.Policy.PolicyException">策略级别包含多个标记为独占的匹配代码组。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.RootCodeGroup">
      <summary>获取或设置策略级别的根代码组。</summary>
      <returns>
        <see cref="T:System.Security.Policy.CodeGroup" />，它是策略级别代码组的树的根。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PolicyLevel.RootCodeGroup" /> 的值为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.StoreLocation">
      <summary>获取存储策略文件的路径。</summary>
      <returns>存储策略文件的路径，或者 <see langword="null" />（如果 <see cref="T:System.Security.Policy.PolicyLevel" /> 没有存储位置）。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyLevel.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyLevel.Type">
      <summary>获取策略级别的类型。</summary>
      <returns>
        <see cref="T:System.Security.PolicyLevelType" /> 值之一。</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyStatement">
      <summary>表示描述权限和其他适用于具有特定证据集的代码的信息的 <see cref="T:System.Security.Policy.CodeGroup" /> 的语句。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyStatement" /> 初始化 <see cref="T:System.Security.PermissionSet" /> 类的新实例。</summary>
      <param name="permSet">用于初始化新实例的 <see cref="T:System.Security.PermissionSet" />。</param>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.#ctor(System.Security.PermissionSet,System.Security.Policy.PolicyStatementAttribute)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyStatement" /> 和特性初始化 <see cref="T:System.Security.PermissionSet" /> 类的新实例。</summary>
      <param name="permSet">用于初始化新实例的 <see cref="T:System.Security.PermissionSet" />。</param>
      <param name="attributes">
        <see cref="T:System.Security.Policy.PolicyStatementAttribute" /> 值的按位组合。</param>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.Attributes">
      <summary>获取或设置策略语句的特性。</summary>
      <returns>策略语句的特性。</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.AttributeString">
      <summary>获取策略语句的特性的字符串表示形式。</summary>
      <returns>表示策略语句的特性的文本字符串。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Copy">
      <summary>创建当前策略语句的等效副本。</summary>
      <returns>
        <see cref="T:System.Security.Policy.PolicyStatement" /> 的新副本，其 <see cref="P:System.Security.Policy.PolicyStatement.PermissionSet" /> 和 <see cref="P:System.Security.Policy.PolicyStatement.Attributes" /> 与当前 <see cref="T:System.Security.Policy.PolicyStatement" /> 的相同。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Security.Policy.PolicyStatement" /> 对象是否等于当前的 <see cref="T:System.Security.Policy.PolicyStatement" />。</summary>
      <param name="o">要与当前的 <see cref="T:System.Security.Policy.PolicyStatement" /> 比较的 <see cref="T:System.Security.Policy.PolicyStatement" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.Security.Policy.PolicyStatement" /> 等于当前的 <see cref="T:System.Security.Policy.PolicyStatement" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有给定状态的安全对象。</summary>
      <param name="et">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> 参数不是有效的 <see cref="T:System.Security.Policy.PolicyStatement" /> 编码。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>从 XML 编码重新构造具有给定状态的安全对象。</summary>
      <param name="et">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">用于查找 <see cref="T:System.Security.Policy.PolicyLevel" /> 值的 <see cref="T:System.Security.NamedPermissionSet" /> 上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="et" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="et" /> 参数不是有效的 <see cref="T:System.Security.Policy.PolicyStatement" /> 编码。</exception>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.GetHashCode">
      <summary>获取 <see cref="T:System.Security.Policy.PolicyStatement" /> 对象的哈希代码，此代码适合在哈希算法和数据结构（例如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.PolicyStatement" /> 对象的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.PolicyStatement.PermissionSet">
      <summary>获取或设置策略语句的 <see cref="T:System.Security.PermissionSet" />。</summary>
      <returns>策略语句的 <see cref="T:System.Security.PermissionSet" />。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.PolicyStatement.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">用于查找 <see cref="T:System.Security.Policy.PolicyLevel" /> 值的 <see cref="T:System.Security.NamedPermissionSet" /> 上下文。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="T:System.Security.Policy.PolicyStatementAttribute">
      <summary>为代码组上的安全策略定义特殊的特性标志。</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.All">
      <summary>设置所有的特性标志。</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Exclusive">
      <summary>独占代码组标志。 当代码组设置此标志时，只将与该代码组关联的权限授予属于代码组的代码。 至多可以将一个与给定代码段匹配的代码组设置为独占性的。</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.LevelFinal">
      <summary>标志，表示导致较低策略级别不被作为解析操作的一部分进行评估的策略语句，它实际上允许策略级别重写较低的级别。</summary>
    </member>
    <member name="F:System.Security.Policy.PolicyStatementAttribute.Nothing">
      <summary>不设置任何标志。</summary>
    </member>
    <member name="T:System.Security.Policy.Publisher">
      <summary>提供代码程序集的 Authenticode X.509v3 数字签名作为策略评估的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.Publisher.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>用包含发行者公钥的 Authenticode X.509v3 证书初始化 <see cref="T:System.Security.Policy.Publisher" /> 类的新实例。</summary>
      <param name="cert">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />，它包含软件发行者的公钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cert" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.Publisher.Certificate">
      <summary>获取发行者的 Authenticode X.509v3 证书。</summary>
      <returns>发行者的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Copy">
      <summary>创建 <see cref="T:System.Security.Policy.Publisher" /> 的等效副本。</summary>
      <returns>
        <see cref="T:System.Security.Policy.Publisher" /> 的相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建与 <see cref="T:System.Security.Policy.Publisher" /> 类的当前实例对应的标识权限。</summary>
      <param name="evidence">构造标识权限所依据的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>指定 <see cref="T:System.Security.Permissions.PublisherIdentityPermission" /> 的 <see cref="T:System.Security.Policy.Publisher" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.Equals(System.Object)">
      <summary>将当前 <see cref="T:System.Security.Policy.Publisher" /> 与指定的对象比较以判断它们是否等同。</summary>
      <param name="o">将测试是否与当前对象等同的 <see cref="T:System.Security.Policy.Publisher" />。</param>
      <returns>如果 <see cref="T:System.Security.Policy.Publisher" /> 类的两个实例相等，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 参数不是 <see cref="T:System.Security.Policy.Publisher" /> 对象。</exception>
    </member>
    <member name="M:System.Security.Policy.Publisher.GetHashCode">
      <summary>获取当前 <see cref="P:System.Security.Policy.Publisher.Certificate" /> 的哈希代码。</summary>
      <returns>当前 <see cref="P:System.Security.Policy.Publisher.Certificate" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Policy.Publisher.ToString">
      <summary>返回当前 <see cref="T:System.Security.Policy.Publisher" /> 的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.Publisher" /> 的表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.PublisherMembershipCondition">
      <summary>通过测试程序集的软件发行者 Authenticode X.509v3 证书确定程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>使用确定成员身份的 Authenticode X.509v3 证书初始化 <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> 类的新实例。</summary>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />，它包含软件发行者的公钥。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.PublisherMembershipCondition.Certificate">
      <summary>获取或设置要针对其测试成员条件的 Authenticode X.509v3 证书。</summary>
      <returns>要针对其测试成员条件的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">进行测试所依据的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.Equals(System.Object)">
      <summary>确定指定对象中的发行者证书是否等效于包含在当前 <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> 中的发行者证书。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定对象中的发行者证书等效于包含在当前 <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> 中的发行者证书，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">
        <see cref="T:System.Security.Policy.PolicyLevel" /> 上下文，它用于解析 <see cref="T:System.Security.NamedPermissionSet" /> 引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToString">
      <summary>创建并返回 <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> 的字符串表示形式。</summary>
      <returns>
        <see cref="T:System.Security.Policy.PublisherMembershipCondition" /> 的表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.PublisherMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">
        <see cref="T:System.Security.Policy.PolicyLevel" /> 上下文，它用于解析 <see cref="T:System.Security.NamedPermissionSet" /> 引用。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.PublisherMembershipCondition.Certificate" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Policy.Site">
      <summary>提供从其中产生代码程序集的网站作为策略评估的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.Site.#ctor(System.String)">
      <summary>用从其中产生代码程序集的网站初始化 <see cref="T:System.Security.Policy.Site" /> 类的新实例。</summary>
      <param name="name">关联代码程序集源的网站。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Site.Copy">
      <summary>创建当前 <see cref="T:System.Security.Policy.Site" /> 对象的等效副本。</summary>
      <returns>新对象与当前 <see cref="T:System.Security.Policy.Site" /> 对象相同。</returns>
    </member>
    <member name="M:System.Security.Policy.Site.CreateFromUrl(System.String)">
      <summary>从指定的 URL 创建新的 <see cref="T:System.Security.Policy.Site" /> 对象。</summary>
      <param name="url">用于创建新 <see cref="T:System.Security.Policy.Site" /> 对象的 URL 。</param>
      <returns>一个新的站点对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> 参数不是有效的 URL。

或 -
<paramref name="url" /> 参数是一个文件名。</exception>
    </member>
    <member name="M:System.Security.Policy.Site.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建与当前 <see cref="T:System.Security.Policy.Site" /> 对象对应的标识权限。</summary>
      <param name="evidence">用于构造标识权限的证据。</param>
      <returns>当前 <see cref="T:System.Security.Policy.Site" /> 对象的站点标识授予权限。</returns>
    </member>
    <member name="M:System.Security.Policy.Site.Equals(System.Object)">
      <summary>将当前 <see cref="T:System.Security.Policy.Site" /> 与指定的对象比较以判断它们是否等同。</summary>
      <param name="o">与当前对象等同的要测试的对象。</param>
      <returns>如果 <see cref="T:System.Security.Policy.Site" /> 类的两个实例相等，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Site.GetHashCode">
      <summary>返回当前网站名称的哈希代码。</summary>
      <returns>当前网站名称的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.Site.Name">
      <summary>获取或设置从其中产生代码程序集的网站。</summary>
      <returns>代码程序集出自的网站的名称。</returns>
    </member>
    <member name="M:System.Security.Policy.Site.ToString">
      <summary>返回当前 <see cref="T:System.Security.Policy.Site" /> 对象的字符串表示形式。</summary>
      <returns>当前站点的表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.SiteMembershipCondition">
      <summary>通过测试从其中产生程序集的站点确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.#ctor(System.String)">
      <summary>用确定成员身份的站点名称初始化 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 类的新实例。</summary>
      <param name="site">站点名称或通配符表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="site" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="site" /> 参数不是有效的 <see cref="T:System.Security.Policy.Site" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">进行测试所依据的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.Equals(System.Object)">
      <summary>确定指定 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 对象中的站点是否等效于包含在当前 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 中的站点。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 进行比较的 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 对象。</param>
      <returns>如果指定 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 对象中的站点等效于包含在当前 <see cref="T:System.Security.Policy.SiteMembershipCondition" /> 中的站点，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">当前对象或指定对象的 <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">
        <see cref="T:System.Security.Policy.PolicyLevel" /> 上下文，它用于解析 <see cref="T:System.Security.NamedPermissionSet" /> 引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.SiteMembershipCondition.Site">
      <summary>获取或设置要针对其测试成员条件的站点。</summary>
      <returns>要针对其测试成员条件的站点。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">尝试将 <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 设置为无效的 <see cref="T:System.Security.Policy.Site" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>成员条件的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.SiteMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">
        <see cref="T:System.Security.Policy.PolicyLevel" /> 上下文，它用于解析 <see cref="T:System.Security.NamedPermissionSet" /> 引用。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.SiteMembershipCondition.Site" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Policy.StrongName">
      <summary>提供代码程序集的强名称作为策略评估的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.StrongName.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>用强名称公钥 Blob、名称和版本初始化 <see cref="T:System.Security.Policy.StrongName" /> 类的新实例。</summary>
      <param name="blob">软件发行者的 <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" />。</param>
      <param name="name">强名称中的简单名称部分。</param>
      <param name="version">强名称的 <see cref="T:System.Version" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="blob" /> 参数为 <see langword="null" />。
或
<paramref name="name" /> 参数为 <see langword="null" />。
或
<paramref name="version" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.Policy.StrongName.Copy">
      <summary>创建当前 <see cref="T:System.Security.Policy.StrongName" /> 的等效副本。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongName" /> 的相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建与当前 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 对应的 <see cref="T:System.Security.Policy.StrongName" />。</summary>
      <param name="evidence">构造 <see cref="T:System.Security.Policy.Evidence" /> 所依据的 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />。</param>
      <returns>指定 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.Equals(System.Object)">
      <summary>确定指定的强名称是否等于当前强名称。</summary>
      <param name="o">与当前强名称进行比较的强名称。</param>
      <returns>如果指定的强名称等于当前强名称，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.GetHashCode">
      <summary>获取当前 <see cref="T:System.Security.Policy.StrongName" /> 的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongName" /> 的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.Name">
      <summary>获取当前 <see cref="T:System.Security.Policy.StrongName" /> 的简单名称。</summary>
      <returns>
        <see cref="T:System.Security.Policy.StrongName" /> 的简单名称部分。</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.PublicKey">
      <summary>获取当前 <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongName" /> 的 <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" />。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongName.ToString">
      <summary>创建当前 <see cref="T:System.Security.Policy.StrongName" /> 的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongName" /> 的表示形式。</returns>
    </member>
    <member name="P:System.Security.Policy.StrongName.Version">
      <summary>获取当前 <see cref="T:System.Version" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongName" /> 的 <see cref="T:System.Version" />。</returns>
    </member>
    <member name="T:System.Security.Policy.StrongNameMembershipCondition">
      <summary>通过测试程序集的强名称确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)">
      <summary>用确定成员身份的强名称公钥 Blob、名称和版本号初始化 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 类的新实例。</summary>
      <param name="blob">软件发行者的强名称公钥 Blob。</param>
      <param name="name">强名称中的简单名称部分。</param>
      <param name="version">强名称的版本号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="blob" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 参数为 <see langword="null" />。
或
<paramref name="name" /> 参数为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">进行测试所依据的 <see cref="T:System.Security.Policy.Evidence" />。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Copy">
      <summary>创建当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的等效副本。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.Equals(System.Object)">
      <summary>确定指定对象中的 <see cref="T:System.Security.Policy.StrongName" /> 是否等效于包含在当前 <see cref="T:System.Security.Policy.StrongName" /> 中的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定对象中的 <see cref="T:System.Security.Policy.StrongName" /> 等效于包含在当前 <see cref="T:System.Security.Policy.StrongName" /> 中的 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">当前对象或指定对象的 <see cref="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey" /> 属性是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">
        <see cref="T:System.Security.Policy.PolicyLevel" /> 上下文，它用于解析 <see cref="T:System.Security.NamedPermissionSet" /> 引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.GetHashCode">
      <summary>返回当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的哈希代码。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的哈希代码。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Name">
      <summary>获取或设置要针对其测试成员条件的 <see cref="T:System.Security.Policy.StrongName" /> 的简单名称。</summary>
      <returns>要针对其测试成员条件的 <see cref="T:System.Security.Policy.StrongName" /> 的简单名称。</returns>
      <exception cref="T:System.ArgumentException">该值为 <see langword="null" />。
或
该值是空字符串 ("")。</exception>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey">
      <summary>获取或设置要针对其测试成员条件的 <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</summary>
      <returns>要针对其测试成员条件的 <see cref="T:System.Security.Permissions.StrongNamePublicKeyBlob" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Security.Policy.StrongNameMembershipCondition.PublicKey" /> 设置为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToString">
      <summary>创建并返回当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.StrongNameMembershipCondition" /> 的表示形式。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.StrongNameMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">
        <see cref="T:System.Security.Policy.PolicyLevel" /> 上下文，它用于解析 <see cref="T:System.Security.NamedPermissionSet" /> 引用。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="P:System.Security.Policy.StrongNameMembershipCondition.Version">
      <summary>获取或设置要针对其测试成员条件的 <see cref="T:System.Version" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</summary>
      <returns>要针对其测试成员条件的 <see cref="T:System.Version" /> 的 <see cref="T:System.Security.Policy.StrongName" />。</returns>
    </member>
    <member name="T:System.Security.Policy.TrustManagerContext">
      <summary>表示作出决定以运行应用程序时和为新的 <see cref="T:System.AppDomain" />（要在其中运行应用程序）建立安全时，信任关系管理器要考虑的上下文。</summary>
    </member>
    <member name="M:System.Security.Policy.TrustManagerContext.#ctor">
      <summary>初始化 <see cref="T:System.Security.Policy.TrustManagerContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Policy.TrustManagerContext.#ctor(System.Security.Policy.TrustManagerUIContext)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.TrustManagerUIContext" /> 对象初始化 <see cref="T:System.Security.Policy.TrustManagerContext" /> 类的新实例。</summary>
      <param name="uiContext">
        <see cref="T:System.Security.Policy.TrustManagerUIContext" /> 值之一，该值指定要使用的信任关系管理器用户界面的类型。</param>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.IgnorePersistedDecision">
      <summary>获取或设置一个值，该值指示应用程序安全管理器是否应忽略任何保留的决定并调用信任关系管理器。</summary>
      <returns>如果调用信任关系管理器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.KeepAlive">
      <summary>获取或设置一个值，该值指示信任关系管理器是否应为此应用程序缓存状态，以便于将来的请求确定应用程序信任。</summary>
      <returns>如果缓存状态数据，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.NoPrompt">
      <summary>获取或设置一个值，该值指示信任关系管理器是否应提示用户以获取信任决定。</summary>
      <returns>如果不提示用户，则为 <see langword="true" />；如果提示用户，则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.Persist">
      <summary>获取或设置一个值，该值指示是否应保留用户对同意对话框的响应。</summary>
      <returns>如果缓存状态数据，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.PreviousApplicationIdentity">
      <summary>获取或设置上一个应用程序标识的标识。</summary>
      <returns>表示上一个 <see cref="T:System.ApplicationIdentity" /> 的 <see cref="T:System.ApplicationIdentity" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Policy.TrustManagerContext.UIContext">
      <summary>获取或设置信任关系管理器应显示的用户界面类型。</summary>
      <returns>
        <see cref="T:System.Security.Policy.TrustManagerUIContext" /> 值之一。 默认值为 <see cref="F:System.Security.Policy.TrustManagerUIContext.Run" />。</returns>
    </member>
    <member name="T:System.Security.Policy.TrustManagerUIContext">
      <summary>指定信任关系管理器应该用于作出信任决定的用户界面 (UI) 类型。</summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Install">
      <summary>安装 UI。</summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Run">
      <summary>运行 UI。</summary>
    </member>
    <member name="F:System.Security.Policy.TrustManagerUIContext.Upgrade">
      <summary>升级 UI。</summary>
    </member>
    <member name="T:System.Security.Policy.UnionCodeGroup">
      <summary>表示一个代码组，该代码组的策略声明是当前代码组的策略声明和所有其匹配的子代码组策略声明的联合。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.#ctor(System.Security.Policy.IMembershipCondition,System.Security.Policy.PolicyStatement)">
      <summary>初始化 <see cref="T:System.Security.Policy.UnionCodeGroup" /> 类的新实例。</summary>
      <param name="membershipCondition">成员条件，它测试证据以确定此代码组是否应用策略。</param>
      <param name="policy">形式为权限集和特性的代码组的策略声明，这些权限集和特性将被授予匹配成员条件的代码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="membershipCondition" /> 参数的类型无效。
或
<paramref name="policy" /> 参数的类型无效。</exception>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Copy">
      <summary>生成当前代码组的深层副本。</summary>
      <returns>当前代码组（包括其成员条件和子代码组）的等效副本。</returns>
    </member>
    <member name="P:System.Security.Policy.UnionCodeGroup.MergeLogic">
      <summary>获取合并逻辑。</summary>
      <returns>总是为字符串“Union”。</returns>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.Resolve(System.Security.Policy.Evidence)">
      <summary>对一组证据解析代码组及其子代的策略。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>由具有可选特性的代码组授予的权限组成的策略声明；或者，如果代码组不适用（成员条件与指定的证据不匹配），则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">将不止一个代码组（包括父代码组和任何子代码组）标记为 <see cref="F:System.Security.Policy.PolicyStatementAttribute.Exclusive" />。</exception>
    </member>
    <member name="M:System.Security.Policy.UnionCodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence)">
      <summary>解析匹配的代码组。</summary>
      <param name="evidence">程序集的证据。</param>
      <returns>证据匹配的完整代码组集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Policy.Url">
      <summary>提供从其中产生代码程序集的 URL 作为策略评估的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.Url.#ctor(System.String)">
      <summary>用从其中产生代码程序集的 URL 初始化 <see cref="T:System.Security.Policy.Url" /> 类的新实例。</summary>
      <param name="name">关联代码程序集源的 URL。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Url.Copy">
      <summary>创建证据对象的新副本。</summary>
      <returns>证据对象的完全相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.Url.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建与 <see cref="T:System.Security.Policy.Url" /> 证据类的当前实例对应的标识权限。</summary>
      <param name="evidence">构造标识权限所依据的证据集。</param>
      <returns>指定的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" /> 证据的 <see cref="T:System.Security.Policy.Url" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Url.Equals(System.Object)">
      <summary>将当前 <see cref="T:System.Security.Policy.Url" /> 证据对象与指定对象比较以判断它们是否等同。</summary>
      <param name="o">
        <see cref="T:System.Security.Policy.Url" /> 证据对象，将测试其是否与当前对象等同。</param>
      <returns>如果两个 <see cref="T:System.Security.Policy.Url" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Url.GetHashCode">
      <summary>获取当前 URL 的哈希代码。</summary>
      <returns>当前 URL 的哈希代码。</returns>
    </member>
    <member name="M:System.Security.Policy.Url.ToString">
      <summary>返回当前 <see cref="T:System.Security.Policy.Url" /> 的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.Url" /> 的表示形式。</returns>
    </member>
    <member name="P:System.Security.Policy.Url.Value">
      <summary>获取从其中产生代码程序集的 URL。</summary>
      <returns>从其中产生代码程序集的 URL。</returns>
    </member>
    <member name="T:System.Security.Policy.UrlMembershipCondition">
      <summary>通过测试程序集的 URL 确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.#ctor(System.String)">
      <summary>用确定成员身份的 URL 初始化 <see cref="T:System.Security.Policy.UrlMembershipCondition" /> 类的新实例。</summary>
      <param name="url">要对其进行测试的 URL。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="url" /> 必须为绝对 URL。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">证据集，将根据它进行测试。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.Equals(System.Object)">
      <summary>确定指定对象中的 URL 是否等效于包含在当前 <see cref="T:System.Security.Policy.UrlMembershipCondition" /> 中的 URL。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.UrlMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定对象中的 URL 等效于包含在当前 <see cref="T:System.Security.Policy.UrlMembershipCondition" /> 中的 URL，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">当前对象或指定对象的 <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 属性是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">策略级别上下文，用于解析命名的权限集引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>成员条件状态的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Policy.UrlMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 属性为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Policy.UrlMembershipCondition.Url">
      <summary>获取或设置要针对其测试成员条件的 URL。</summary>
      <returns>要针对其测试成员条件的 URL。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Security.Policy.UrlMembershipCondition.Url" /> 设置为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">值不是绝对 URL。</exception>
    </member>
    <member name="T:System.Security.Policy.Zone">
      <summary>提供代码程序集的安全区域作为策略评估的证据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.Zone.#ctor(System.Security.SecurityZone)">
      <summary>用从其中产生代码程序集的区域初始化 <see cref="T:System.Security.Policy.Zone" /> 类的新实例。</summary>
      <param name="zone">关联代码程序集源的区域。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="zone" /> 参数不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Zone.Copy">
      <summary>创建证据对象的等效副本。</summary>
      <returns>证据对象的完全相同的新副本。</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateFromUrl(System.String)">
      <summary>创建具有指定 URL 的新区域。</summary>
      <param name="url">在其中创建区域的 URL。</param>
      <returns>具有指定 URL 的新区域。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Policy.Zone.CreateIdentityPermission(System.Security.Policy.Evidence)">
      <summary>创建与 <see cref="T:System.Security.Policy.Zone" /> 证据类的当前实例对应的标识权限。</summary>
      <param name="evidence">构造标识权限所依据的证据集。</param>
      <returns>指定的 <see cref="T:System.Security.Permissions.ZoneIdentityPermission" /> 证据的 <see cref="T:System.Security.Policy.Zone" />。</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.Equals(System.Object)">
      <summary>将当前 <see cref="T:System.Security.Policy.Zone" /> 证据对象与指定对象比较以判断它们是否等同。</summary>
      <param name="o">
        <see cref="T:System.Security.Policy.Zone" /> 证据对象，将测试其是否与当前对象等同。</param>
      <returns>如果两个 <see cref="T:System.Security.Policy.Zone" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> 参数不是 <see cref="T:System.Security.Policy.Zone" /> 对象。</exception>
    </member>
    <member name="M:System.Security.Policy.Zone.GetHashCode">
      <summary>获取当前区域的哈希代码。</summary>
      <returns>当前区域的哈希代码。</returns>
    </member>
    <member name="P:System.Security.Policy.Zone.SecurityZone">
      <summary>获取从其中产生代码程序集的区域。</summary>
      <returns>从其中产生代码程序集的区域。</returns>
    </member>
    <member name="M:System.Security.Policy.Zone.ToString">
      <summary>返回当前 <see cref="T:System.Security.Policy.Zone" /> 的字符串表示形式。</summary>
      <returns>当前 <see cref="T:System.Security.Policy.Zone" /> 的表示形式。</returns>
    </member>
    <member name="T:System.Security.Policy.ZoneMembershipCondition">
      <summary>通过测试程序集的原始区域确定该程序集是否属于代码组。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.#ctor(System.Security.SecurityZone)">
      <summary>用确定成员身份的区域初始化 <see cref="T:System.Security.Policy.ZoneMembershipCondition" /> 类的新实例。</summary>
      <param name="zone">要对其进行测试的 <see cref="T:System.Security.SecurityZone" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="zone" /> 参数不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Check(System.Security.Policy.Evidence)">
      <summary>确定指定的证据是否能满足成员条件。</summary>
      <param name="evidence">证据集，将根据它进行测试。</param>
      <returns>如果指定的证据满足成员条件，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Copy">
      <summary>创建成员条件的等效副本。</summary>
      <returns>当前成员条件的完全相同的新副本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.Equals(System.Object)">
      <summary>确定指定对象中的区域是否等效于包含在当前 <see cref="T:System.Security.Policy.ZoneMembershipCondition" /> 中的区域。</summary>
      <param name="o">要与当前 <see cref="T:System.Security.Policy.ZoneMembershipCondition" /> 比较的对象。</param>
      <returns>如果指定对象中的区域等效于包含在当前 <see cref="T:System.Security.Policy.ZoneMembershipCondition" /> 中的区域，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">当前对象或指定对象的 <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">当前对象或指定对象的 <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.FromXml(System.Security.SecurityElement,System.Security.Policy.PolicyLevel)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="e">用于重新构造安全对象的 XML 编码。</param>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 参数不是有效的成员条件元素。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.GetHashCode">
      <summary>获取当前成员条件的哈希代码。</summary>
      <returns>当前成员条件的哈希代码。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone">
      <summary>获取或设置要针对其测试成员条件的区域。</summary>
      <returns>要针对其测试成员条件的区域。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">尝试将 <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 设置为无效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToString">
      <summary>创建并返回成员条件的字符串表示形式。</summary>
      <returns>成员条件状态的字符串表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="M:System.Security.Policy.ZoneMembershipCondition.ToXml(System.Security.Policy.PolicyLevel)">
      <summary>使用指定的 <see cref="T:System.Security.Policy.PolicyLevel" /> 创建安全对象及其当前状态的 XML 编码。</summary>
      <param name="level">用于解析命名的权限集引用的策略级别上下文。</param>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Policy.ZoneMembershipCondition.SecurityZone" /> 属性不是有效的 <see cref="T:System.Security.SecurityZone" />。</exception>
    </member>
    <member name="T:System.Security.PolicyLevelType">
      <summary>指定托管代码策略级别的类型。</summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.AppDomain">
      <summary>应用程序中所有托管代码的安全策略。</summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.Enterprise">
      <summary>企业中所有托管代码的安全策略。</summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.Machine">
      <summary>运行于计算机上的所有托管代码的安全策略。</summary>
    </member>
    <member name="F:System.Security.PolicyLevelType.User">
      <summary>由用户运行的所有托管代码的安全策略。</summary>
    </member>
    <member name="T:System.Security.SecurityContext">
      <summary>封装并传播在线程间传输的执行上下文的所有安全相关数据。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.SecurityContext.Capture">
      <summary>捕获当前线程的安全上下文。</summary>
      <returns>当前线程的安全上下文。</returns>
    </member>
    <member name="M:System.Security.SecurityContext.CreateCopy">
      <summary>创建当前安全上下文的副本。</summary>
      <returns>当前线程的安全上下文。</returns>
      <exception cref="T:System.InvalidOperationException">当前安全上下文以前已经使用过，在应用程序域间封送过或没有通过 <see cref="M:System.Security.SecurityContext.Capture" /> 方法获得过。</exception>
    </member>
    <member name="M:System.Security.SecurityContext.Dispose">
      <summary>释放 <see cref="T:System.Security.SecurityContext" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.SecurityContext.IsFlowSuppressed">
      <summary>确定是否已取消安全上下文的流动。</summary>
      <returns>如果已取消流动，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed">
      <summary>确定是否已取消当前安全上下文的 Windows 标识部分的流动。</summary>
      <returns>如果已取消流动，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityContext.RestoreFlow">
      <summary>在异步线程间恢复安全上下文的流动。</summary>
      <exception cref="T:System.InvalidOperationException">安全上下文为 <see langword="null" /> 或空字符串。</exception>
    </member>
    <member name="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)">
      <summary>在当前线程上指定的安全上下文中运行指定的方法。</summary>
      <param name="securityContext">要设置的安全上下文。</param>
      <param name="callback">表示要在指定的安全上下文中运行的方法的委托。</param>
      <param name="state">要传递给回调方法的对象。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="securityContext" /> 为 <see langword="null" />。
或
<paramref name="securityContext" /> 不是通过捕获操作获取的。
或
已经将 <paramref name="securityContext" /> 用作 <see cref="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)" /> 方法调用的参数。</exception>
    </member>
    <member name="M:System.Security.SecurityContext.SuppressFlow">
      <summary>在异步线程间取消安全上下文的流动。</summary>
      <returns>用于恢复流动的 <see cref="T:System.Threading.AsyncFlowControl" /> 结构。</returns>
    </member>
    <member name="M:System.Security.SecurityContext.SuppressFlowWindowsIdentity">
      <summary>在异步线程间取消当前安全上下文的 Windows 标识部分的流动。</summary>
      <returns>用于恢复流动的结构。</returns>
    </member>
    <member name="T:System.Security.SecurityContextSource">
      <summary>标识安全上下文的源。</summary>
    </member>
    <member name="F:System.Security.SecurityContextSource.CurrentAppDomain">
      <summary>当前的应用程序域是安全上下文的源。</summary>
    </member>
    <member name="F:System.Security.SecurityContextSource.CurrentAssembly">
      <summary>当前程序集是安全上下文的源。</summary>
    </member>
    <member name="T:System.Security.SecurityManager">
      <summary>对与安全系统交互的类提供主访问点。 此类不能被继承。</summary>
    </member>
    <member name="P:System.Security.SecurityManager.CheckExecutionRights">
      <summary>获取或设置一个值，该值指示代码是否必须具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> 才能执行。</summary>
      <returns>如果代码必须具有 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Execution" /> 才能执行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture">
      <summary>确定在必须在稍后的某个时间点重新创建当前线程的安全状态的情况下，当前线程是否需要安全上下文捕获。</summary>
      <returns>如果堆栈不包含部分信任的应用程序域、部分信任的程序集以及当前活动的 <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> 或 <see cref="M:System.Security.CodeAccessPermission.Deny" /> 修饰符，则为 <see langword="false" />；如果公共语言运行时无法保证堆栈不包含其中任一项，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)">
      <summary>获取一个权限集，对具有提供的证据的应用程序授予此权限集是安全的。</summary>
      <param name="evidence">要与某个权限集匹配的主机证据。</param>
      <returns>一个权限集，它可用作具有提供的证据的应用程序的权限集。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="evidence" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)">
      <summary>获取当前程序集的已授予的区域标识和 URL 标识权限集。</summary>
      <param name="zone">一个输出参数，它包含已授予的 <see cref="T:System.Collections.ArrayList" /> 对象的 <see cref="P:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone" />。</param>
      <param name="origin">一个输出参数，它包含已授予的 <see cref="T:System.Collections.ArrayList" /> 对象的 <see cref="T:System.Security.Permissions.UrlIdentityPermission" />。</param>
      <exception cref="T:System.Security.SecurityException">对 <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 的请求失败。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.IsGranted(System.Security.IPermission)">
      <summary>确定是否将权限授予调用方。</summary>
      <param name="perm">针对调用方的权限授予测试的权限。</param>
      <returns>如果授予调用方的权限包括权限 <paramref name="perm" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)">
      <summary>从指定的文件加载 <see cref="T:System.Security.Policy.PolicyLevel" />。</summary>
      <param name="path">包含安全策略信息的文件的物理文件路径。</param>
      <param name="type">一个枚举值，其指定要加载的策略级别类型。</param>
      <returns>已加载的策略级别。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">由 <paramref name="path" /> 参数指示的文件不存在。</exception>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。
或
调用此方法的代码不含 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。
或
调用此方法的代码不含 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。
或
调用此方法的代码不含 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery" />。</exception>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)">
      <summary>从指定的字符串加载 <see cref="T:System.Security.Policy.PolicyLevel" />。</summary>
      <param name="str">安全策略级别的 XML 表示形式，与它在配置文件出现的形式相同。</param>
      <param name="type">一个枚举值，其指定要加载的策略级别类型。</param>
      <returns>已加载的策略级别。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 参数无效。</exception>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.PolicyHierarchy">
      <summary>提供一个枚举器，以按等级访问安全策略层次结构，例如计算机策略和用户策略。</summary>
      <returns>构成安全策略层次结构的 <see cref="T:System.Security.Policy.PolicyLevel" /> 对象的枚举器。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)">
      <summary>根据指定的证据确定向代码授予什么权限。</summary>
      <param name="evidence">用于评估策略的证据集。</param>
      <returns>可由安全系统授予的一组权限。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)">
      <summary>根据指定的证据和请求确定向代码授予什么权限。</summary>
      <param name="evidence">用于评估策略的证据集。</param>
      <param name="reqdPset">该代码需要运行的所需权限。</param>
      <param name="optPset">将使用的可选权限（如授权），但运行代码不需要它。</param>
      <param name="denyPset">决不能授予代码的拒绝权限，即使策略允许。</param>
      <param name="denied">包含未授予的权限集的输出参数。</param>
      <returns>可由安全系统授予的一组权限。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
      <exception cref="T:System.Security.Policy.PolicyException">策略无法授予 <paramref name="reqdPset" /> 参数指定的所需最小权限。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])">
      <summary>根据指定的证据确定向代码授予什么权限。</summary>
      <param name="evidences">用于评估策略的证据对象的数组。</param>
      <returns>适用于所有提供的证据的权限集。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)">
      <summary>获取与指定证据相匹配的代码组集合。</summary>
      <param name="evidence">已评估策略的证据集。</param>
      <returns>与证据匹配的代码组集的枚举。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)">
      <summary>根据指定的证据确定授予代码的权限，不包括 <see cref="T:System.AppDomain" /> 级别的策略。</summary>
      <param name="evidence">用于评估策略的证据集。</param>
      <returns>可由安全系统授予的一组权限。</returns>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.SavePolicy">
      <summary>保存修改的安全策略状态。</summary>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
    </member>
    <member name="M:System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)">
      <summary>保存用 <see cref="M:System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)" /> 加载的已修改的安全策略级别。</summary>
      <param name="level">要保存的策略级别对象。</param>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
      <exception cref="T:System.NotSupportedException">此方法使用代码访问安全性 (CAS) 策略，该策略在 .NET Framework 4 中已过时。 若要使 CAS 策略与早期版本的 .NET Framework 兼容，请使用 &lt;legacyCasPolicy&gt; 元素。</exception>
    </member>
    <member name="P:System.Security.SecurityManager.SecurityEnabled">
      <summary>获取或设置指示是否启用安全的值。</summary>
      <returns>如果启用了安全，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.Security.SecurityException">调用此方法的代码不含 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />。</exception>
    </member>
    <member name="T:System.Security.SecurityState">
      <summary>提供一个基类，用于从 <see cref="T:System.AppDomainManager" /> 对象中请求操作的安全状态。</summary>
    </member>
    <member name="M:System.Security.SecurityState.#ctor">
      <summary>初始化 <see cref="T:System.Security.SecurityState" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.SecurityState.EnsureState">
      <summary>在派生类中重写时，确保由 <see cref="T:System.Security.SecurityState" /> 表示的状态在宿主上可用。</summary>
    </member>
    <member name="M:System.Security.SecurityState.IsStateAvailable">
      <summary>获取一个值，该值指示 <see cref="T:System.Security.SecurityState" /> 类的此实现的状态是否在当前宿主上可用。</summary>
      <returns>如果状态可用，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.SecurityZone">
      <summary>定义与安全策略所使用的安全区域相对应的整数值。</summary>
    </member>
    <member name="F:System.Security.SecurityZone.Internet">
      <summary>对于不属于另一区域的 Internet 上的网站，使用“Internet”区域。</summary>
    </member>
    <member name="F:System.Security.SecurityZone.Intranet">
      <summary>本地 Intranet 区域用于公司 Intranet 上的内容。 因为服务器和信息可能在公司的防火墙内，用户或公司可以给 Intranet 上的内容分配较高的信任级别。</summary>
    </member>
    <member name="F:System.Security.SecurityZone.MyComputer">
      <summary>本地计算机区域是一个隐式区域，用于用户计算机上存在的内容。</summary>
    </member>
    <member name="F:System.Security.SecurityZone.NoZone">
      <summary>未指定区域。</summary>
    </member>
    <member name="F:System.Security.SecurityZone.Trusted">
      <summary>受信任站点区域用于位于此类网站的内容，这些网站比 Internet 上的其他站点更可信或更值得信赖。 用户可以使用此区域向这些站点分配更高的信任级别，以最大限度地减少身份验证请求的数量。 这些受信任的网站的 URL 需要由用户映射到该区域中。</summary>
    </member>
    <member name="F:System.Security.SecurityZone.Untrusted">
      <summary>受限站点区域用于这样的网站，即，其所具有的内容在下载时已经导致过，或可能会导致问题。 这些不受信任的网站的 URL 需要由用户映射到该区域中。</summary>
    </member>
    <member name="T:System.Security.XmlSyntaxException">
      <summary>在 XML 语法分析中出现语法错误时引发的异常。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor">
      <summary>使用默认属性初始化 <see cref="T:System.Security.XmlSyntaxException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.Int32)">
      <summary>用检测到异常时的行号初始化 <see cref="T:System.Security.XmlSyntaxException" /> 类的新实例。</summary>
      <param name="lineNumber">XML 流的行号，在此行中检测到 XML 语法错误。</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.Int32,System.String)">
      <summary>用指定的错误信息和检测到异常时的行号初始化 <see cref="T:System.Security.XmlSyntaxException" /> 类的新实例。</summary>
      <param name="lineNumber">XML 流的行号，在此行中检测到 XML 语法错误。</param>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.Security.XmlSyntaxException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.Security.XmlSyntaxException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Security.XmlSyntaxException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="inner">导致当前异常的异常。 如果 <paramref name="inner" /> 参数不为 <see langword="null" />，则当前异常将在处理内部异常的 <see langword="catch" /> 块中引发。</param>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermission">
      <summary>允许服务控制器对代码访问安全权限的控制。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor">
      <summary>初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>用指定的对资源的访问权限初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor(System.ServiceProcess.ServiceControllerPermissionAccess,System.String,System.String)">
      <summary>用指定的权限访问级别、服务所驻留的计算机的名称和向系统标识该服务的简称初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.ServiceProcess.ServiceControllerPermissionAccess" /> 值之一。</param>
      <param name="machineName">服务所驻留的计算机的名称。</param>
      <param name="serviceName">向系统标识该服务的简称。</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermission.#ctor(System.ServiceProcess.ServiceControllerPermissionEntry[])">
      <summary>用指定的权限项初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermission" /> 类的新实例。</summary>
      <param name="permissionAccessEntries">一个 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象数组。 <see cref="P:System.ServiceProcess.ServiceControllerPermission.PermissionEntries" /> 属性被设置为该值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntryCollection" />，它包含此权限请求的权限项。</returns>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionAccess">
      <summary>定义 <see cref="T:System.ServiceProcess.ServiceController" /> 权限类使用的访问级别。</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerPermissionAccess.Browse">
      <summary>
        <see cref="T:System.ServiceProcess.ServiceController" /> 可以连接到现有服务，但不能控制现有服务。</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerPermissionAccess.Control">
      <summary>
        <see cref="T:System.ServiceProcess.ServiceController" /> 可以连接到并控制现有服务。</summary>
    </member>
    <member name="F:System.ServiceProcess.ServiceControllerPermissionAccess.None">
      <summary>
        <see cref="T:System.ServiceProcess.ServiceController" /> 没有权限。</summary>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionAttribute">
      <summary>允许声明性的服务控制器权限检查。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionAttribute.CreatePermission">
      <summary>根据请求的访问级别创建权限，这些访问级别是通过特性上的 <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.PermissionAccess" /> 属性设置的。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它表示创建的权限。</returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionAttribute.MachineName">
      <summary>获取或设置服务所驻留的计算机的名称。</summary>
      <returns>计算机的名称，该计算机正在运行与 <see cref="T:System.ServiceProcess.ServiceController" /> 关联的服务。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.MachineName" /> 语法无效。</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.ServiceProcess.ServiceControllerPermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionAttribute.ServiceName">
      <summary>获取或设置向系统标识该服务的简称。</summary>
      <returns>服务的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.ServiceName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.ServiceProcess.ServiceControllerPermissionAttribute.ServiceName" /> 属性的语法无效。</exception>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionEntry">
      <summary>定义为 <see cref="T:System.ServiceProcess.ServiceController" /> 设置的代码访问安全性权限的最小单位。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntry.#ctor">
      <summary>初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntry.#ctor(System.ServiceProcess.ServiceControllerPermissionAccess,System.String,System.String)">
      <summary>用指定的权限访问级别、计算机的名称和标识该服务的简称初始化 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.ServiceProcess.ServiceControllerPermissionAccess" /> 值之一。</param>
      <param name="machineName">服务所驻留的计算机的名称。</param>
      <param name="serviceName">向系统标识该服务的简称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 无效。
或
<paramref name="serviceName" /> 无效。</exception>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntry.MachineName">
      <summary>获取服务所驻留的计算机的名称。</summary>
      <returns>计算机的名称，该计算机正在运行与 <see cref="T:System.ServiceProcess.ServiceController" /> 关联的服务。</returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntry.PermissionAccess">
      <summary>获取权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.ServiceProcess.ServiceControllerPermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntry.ServiceName">
      <summary>获取向系统标识该服务的简称。</summary>
      <returns>服务的名称。</returns>
    </member>
    <member name="T:System.ServiceProcess.ServiceControllerPermissionEntryCollection">
      <summary>包含 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象的强类型集合。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Add(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>向此集合添加指定的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" />。</summary>
      <param name="value">要添加的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象。</param>
      <returns>所添加的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象的从零开始的索引。</returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.AddRange(System.ServiceProcess.ServiceControllerPermissionEntry[])">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">
        <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 类型对象的数组，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.AddRange(System.ServiceProcess.ServiceControllerPermissionEntryCollection)">
      <summary>向此集合中追加一组指定的权限项。</summary>
      <param name="value">一个 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntryCollection" />，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Contains(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>确定此集合是否包含指定的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象。</summary>
      <param name="value">要查找的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象。</param>
      <returns>如果指定的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象属于此集合，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.CopyTo(System.ServiceProcess.ServiceControllerPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组中（从数组中特定的索引开始复制）。</summary>
      <param name="array">
        <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 类型的数组，它接收复制的权限项。</param>
      <param name="index">从零开始的索引，将从此索引位置开始复制权限项。</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.IndexOf(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>确定指定权限项在此集合中的索引。</summary>
      <param name="value">要搜索的权限项。</param>
      <returns>指定权限项的从零开始的索引；或者，如果集合中未找到该权限项，则为 -1。</returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Insert(System.Int32,System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>将权限项插入此集合中指定的索引位置。</summary>
      <param name="index">集合的从零开始的索引，将在此索引位置插入权限项。</param>
      <param name="value">将插入此集合中的权限项。</param>
    </member>
    <member name="P:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引位置的对象。</summary>
      <param name="index">集合中从零开始的索引。</param>
      <returns>位于指定索引位置的 <see cref="T:System.ServiceProcess.ServiceControllerPermissionEntry" /> 对象。</returns>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.OnClear">
      <summary>在清除此集合内容之后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>在将一个新的权限项插入此集合之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在该处插入 <paramref name="value" />。</param>
      <param name="value">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从此集合中移除一个新的权限项时执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="value" />。</param>
      <param name="value">要从 <paramref name="index" /> 处移除的权限项。</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>当在此集合中设置值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，可在该位置找到 <paramref name="oldValue" />。</param>
      <param name="oldValue">要用 <paramref name="newValue" /> 替换的值。</param>
      <param name="newValue">在 <paramref name="index" /> 处的权限项的新值。</param>
    </member>
    <member name="M:System.ServiceProcess.ServiceControllerPermissionEntryCollection.Remove(System.ServiceProcess.ServiceControllerPermissionEntry)">
      <summary>从此集合中移除指定的权限项。</summary>
      <param name="value">要移除的权限项。</param>
    </member>
    <member name="T:System.Transactions.DistributedTransactionPermission">
      <summary>在事务的管理已升级到 MSDTC 时 <see cref="N:System.Transactions" /> 所要求的权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Transactions.DistributedTransactionPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">用于重新构造权限的 XML 编码。</param>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前权限是否为指定权限的一个子集。</summary>
      <param name="target">要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前 <see cref="T:System.Security.IPermission" /> 是指定 <see cref="T:System.Security.IPermission" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.IsUnrestricted">
      <summary>返回一个值，该值指示是否允许对受当前权限保护的资源进行不受限制地访问。</summary>
      <returns>如果允许不受限制地使用受此权限所保护的资源，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.ToXml">
      <summary>创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>包含安全对象的 XML 编码（包括所有状态信息）的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>代表当前权限和指定权限并集的 <see cref="T:System.Security.IPermission" />。</returns>
    </member>
    <member name="T:System.Transactions.DistributedTransactionPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Transactions.DistributedTransactionPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Transactions.DistributedTransactionPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Transactions.DistributedTransactionPermissionAttribute.CreatePermission">
      <summary>创建一个权限对象，该对象随后可序列化为二进制格式，并与 <see cref="T:System.Security.Permissions.SecurityAction" /> 一起持久地存储在程序集的元数据中。</summary>
      <returns>可序列化的权限对象。</returns>
    </member>
    <member name="P:System.Transactions.DistributedTransactionPermissionAttribute.Unrestricted">
      <summary>获取或设置一个值，该值指示是否声明了对受该特性保护的资源有完全（无限制的）权限。</summary>
      <returns>如果声明了对受保护资源的完全权限，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Web.AspNetHostingPermission">
      <summary>ASP.NET 寄宿的环境中的控件访问权限。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值初始化 <see cref="T:System.Web.AspNetHostingPermission" /> 类的新实例。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 未设置为 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值之一。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.#ctor(System.Web.AspNetHostingPermissionLevel)">
      <summary>使用指定的权限级别初始化 <see cref="T:System.Web.AspNetHostingPermission" /> 类的新实例。</summary>
      <param name="level">一个 <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值。</param>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Copy">
      <summary>由派生类实现时，创建并返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限对象。</summary>
      <param name="securityElement">包含用于重新构造权限对象的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 的 <see cref="P:System.Security.SecurityElement.Tag" /> 属性不等于“IPermission”。
或
<paramref name="securityElement" /> 的类 <see cref="M:System.Security.SecurityElement.Attribute(System.String)" /> 为 <see langword="null" /> 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Intersect(System.Security.IPermission)">
      <summary>由派生类实现时，创建并返回属于当前权限和指定权限的交集的权限。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限与指定权限的交集的 <see cref="T:System.Security.IPermission" />；如果交集为空，则为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前权限是否为指定权限的一个子集。</summary>
      <param name="target">与当前权限进行合并的 <see cref="T:System.Security.IPermission" />。 它必须与当前 <see cref="T:System.Security.IPermission" /> 属于同一类型。</param>
      <returns>如果当前 <see cref="T:System.Security.IPermission" /> 是指定 <see cref="T:System.Security.IPermission" /> 的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.IsUnrestricted">
      <summary>返回一个值，该值指示是否允许对受当前权限保护的资源进行不受限制地访问。</summary>
      <returns>如果允许不受限制的使用权限所保护的资源，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Web.AspNetHostingPermission.Level">
      <summary>获取或设置 ASP.NET 应用程序的当前宿主权限级别。</summary>
      <returns>
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值之一。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.ToXml">
      <summary>创建权限对象及其当前状态的 XML 编码。</summary>
      <returns>包含权限对象的 XML 编码的 <see cref="T:System.Security.SecurityElement" />，包括所有状态信息。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>代表当前权限和指定权限并集的 <see cref="T:System.Security.IPermission" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。</exception>
    </member>
    <member name="T:System.Web.AspNetHostingPermissionAttribute">
      <summary>允许对要使用声明性安全应用到代码中的 <see cref="T:System.Web.AspNetHostingPermission" /> 执行安全操作。 此类不能被继承。</summary>
    </member>
    <member name="M:System.Web.AspNetHostingPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Web.AspNetHostingPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 枚举值之一。</param>
    </member>
    <member name="M:System.Web.AspNetHostingPermissionAttribute.CreatePermission">
      <summary>使用先前由 <see cref="T:System.Web.AspNetHostingPermission" /> 属性设置的权限级别来创建新的 <see cref="P:System.Web.AspNetHostingPermissionAttribute.Level" />。</summary>
      <returns>一个 <see cref="T:System.Security.IPermission" />，它是新的 <see cref="T:System.Web.AspNetHostingPermission" />。</returns>
    </member>
    <member name="P:System.Web.AspNetHostingPermissionAttribute.Level">
      <summary>获取或设置当前宿主权限级别。</summary>
      <returns>
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值之一。</returns>
    </member>
    <member name="T:System.Web.AspNetHostingPermissionLevel">
      <summary>指定授予 ASP.NET Web 应用程序的信任级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.High">
      <summary>指示要求受到任何小于或等于 <see langword="High" /> 信任级别保护的功能将成功。 此级别适用于高度受信任、托管代码的应用程序，这些应用程序需要使用大多数支持不完全受信任的访问的托管权限。 它不会授予某些最高权限（例如，调用本机代码的能力），但它提供了一种使用最小特权运行受信任的应用程序的方法，或为高度受信任的应用程序提供某种程度上的约束。 通过在配置文件中的 trust 节中至少配置 <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /> 信任级别，以授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Low">
      <summary>指示要求受到任何小于或等于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 级别保护的功能将成功。 此级别旨在允许对受约束的环境中有限资源的只读访问。 通过在配置文件中的 trust 节中指定 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 信任级别，已授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Medium">
      <summary>指示要求受到任何小于或等于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 级别保护的功能将成功。 通过在配置文件中的 trust 节中至少配置 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信任级别，以授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Minimal">
      <summary>指示要求受到 <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> 级别保护的功能将成功。 此级别允许代码执行，但不能与系统上存在的资源进行交互。 通过使用配置文件中的 trust 节至少配置 <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> 信任级别，以授予此级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.None">
      <summary>指示不授予任何权限。 对 <see cref="T:System.Web.AspNetHostingPermission" /> 的所有要求都将失败。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Unrestricted">
      <summary>指示将授予使用应用程序的全部功能所要求的所有权限。 这相当于在配置文件的 trust 节中授予 <see langword="Full" /> 信任级别。</summary>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>定义对程序集和类型的访问控制以用于 XAML 加载。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>基于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 请求的程序集返回 <see cref="T:System.Reflection.Assembly" /> 实例。</summary>
      <param name="assembly">请求的程序集。</param>
      <returns>一个用 <paramref name="assembly" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>基于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 请求的程序集返回 <see cref="T:System.Reflection.AssemblyName" /> 实例。</summary>
      <param name="assemblyName">请求的程序集名称。</param>
      <returns>一个用 <paramref name="assemblyName" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完全限定程序集名称。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>获取权限由此 <see cref="T:System.Reflection.AssemblyName" /> 来确定的程序集的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</summary>
      <returns>权限由此 <see cref="T:System.Reflection.AssemblyName" /> 来确定的程序集的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>基于按限定名称指定的特定类型返回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 实例。</summary>
      <param name="assemblyQualifiedTypeName">一个作为程序集限定类型名称分析的字符串。</param>
      <returns>一个用 <paramref name="assemblyQualifiedTypeName" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />（由对类型的反射来确定）的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的程序集限定的类型名称。
或
<paramref name="assemblyQualifiedTypeName" /> 内的程序集名称不是有效的程序集名称。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>基于 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 指定的特定类型返回 <see cref="T:System.Type" /> 实例。</summary>
      <param name="type">请求对其进行访问的 <see cref="T:System.Type" />。</param>
      <returns>一个用 <paramref name="type" /> 值作为 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 和 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />（由对类型的反射来确定）的源信息的 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>获取权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的类型的非限定字符串名称。</summary>
      <returns>权限由此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 来确定的类型的非限定字符串名称。</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>声明权限，这些权限用于加载 XAML 读取器或编写器所使用的程序集中的类型。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>使用一组可枚举的特定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 类的新实例。</summary>
      <param name="allowedAccess">一组可枚举的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> 包含无效信息，例如 null 项。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用现有权限初始化 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 类的新实例。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>使用单一 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值初始化 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 类的新实例。</summary>
      <param name="allowedAccess">定义的 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>获取此 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 表示的所有 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 值的列表。</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 值的只读列表，或者为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>创建并返回当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的一个相同副本。</summary>
      <returns>当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的副本。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="elem">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> 不包含 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 编码。

或 -
<paramref name="elem" /> 中的版本特性不受支持。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>返回此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否在其 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 列表中包含指定的 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />。</summary>
      <param name="requestedAccess">要检查的特定 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />。</param>
      <returns>如果 <paramref name="requestedAccess" /> 是当前 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 列表中的一项，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> 为 null。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，这是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定权限的交集。</summary>
      <param name="target">要与当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 相交的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 <see langword="null" />。</param>
      <returns>一项新权限，表示当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的交集。 如果交集为空，则此新权限为 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 可以为 <see langword="null" />。</param>
      <returns>如果当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是指定权限的子集，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>返回此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 是否表示不受限制的权限。</summary>
      <returns>如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 表示不受限制的权限，则为 <see langword="true" />。 如果此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 在 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> 中具有特定访问级别限制，或者没有权限，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>创建此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 及其当前状态的 XML 编码。</summary>
      <returns>此 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 与指定权限的并集。</summary>
      <param name="other">要与当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 进行合并的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。 可以为 <see langword="null" />。</param>
      <returns>新的 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />，它表示当前 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 和指定 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> 不为 <see langword="null" /> 或不是 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />。</exception>
    </member>
  </members>
</doc>
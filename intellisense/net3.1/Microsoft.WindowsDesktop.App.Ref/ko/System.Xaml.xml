<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>XAML태그 확장 특성에 대한 레거시 보고의 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 특성에서 보고하는 반환 형식입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>이 특성에서 보고하는 반환 형식을 가져오거나 설정합니다.</summary>
      <returns>이 특성에서 보고하는 반환 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>속성이나 형식을 앰비언트로 처리하도록 지정합니다. 앰비언트 개념은 XAML 프로세서가 멤버의 형식 소유자를 결정하는 방법과 관련됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.AmbientAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>.NET Framework XAML 서비스에 대한 <see langword="x:Array" /> 지원을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ArrayExtension" /> 클래스의 새 인스턴스를 초기화합니다. 빈 배열을 만듭니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>제공된 원시 배열을 기반으로 하여 <see cref="T:System.Windows.Markup.ArrayExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="elements">만들어진 배열을 채우는 배열 내용입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.ArrayExtension" /> 클래스의 새 인스턴스를 초기화하고 배열 형식을 초기화합니다.</summary>
      <param name="arrayType">새 배열의 개체 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>배열의 끝에 제공된 개체를 추가합니다.</summary>
      <param name="value">배열의 끝에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>새 배열 항목으로 텍스트 노드를 추가합니다.</summary>
      <param name="text">배열의 끝에 추가할 텍스트입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>배열의 내용을 가져옵니다. XAML 컬렉션 구문을 통해 XAML에서 설정할 수 있습니다.</summary>
      <returns>배열 내용입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>
        <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 값에 제공된 개체 수에 맞는 크기의 배열을 반환합니다.</summary>
      <param name="serviceProvider">태그 확장명 서비스를 제공할 수 있는 개체입니다.</param>
      <returns>만들어진 배열이거나 null입니다.</returns>
      <exception cref="T:System.InvalidOperationException">유효한 <see cref="P:System.Windows.Markup.ArrayExtension.Type" />을 제공하지 않은 배열을 처리했습니다.
또는
선언된 배열의 <see cref="P:System.Windows.Markup.ArrayExtension.Type" /> 및 하나 이상의 <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> 값 사이에 형식이 일치하지 않습니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>
        <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" />를 호출할 때 만들 배열의 형식을 가져오거나 설정합니다.</summary>
      <returns>배열의 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>개체가 매개변수가 있는 생성자 구문을 사용하여 초기화될 수 있고 지정된 이름의 속성이 생성 정보를 제공한다는 것을 지정합니다.  이 정보는 주로 XAML serialization용입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="argumentName">연결된 속성을 초기화하는 생성자의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>연결된 속성을 초기화할 생성자의 이름 매개 변수를 가져옵니다.</summary>
      <returns>생성자의 이름입니다. CLR 백업이라고 가정할 경우 관련 생성자 매개 변수의 <see cref="P:System.Reflection.ParameterInfo.Name" />에 해당합니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>XAML 콘텐츠 속성인 형식의 속성을 나타냅니다. XAML 프로세서는 특성 형식 XAML 표현의 XAML 자식 요소를 처리할 때 이 정보를 사용합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">콘텐츠 속성인 속성의 속성 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>콘텐츠 속성인 속성의 이름을 가져옵니다.</summary>
      <returns>콘텐츠 속성인 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>외부 콘텐츠를 래핑하는 데 사용할 연결된 컬렉션 형식에 하나 이상의 형식을 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="contentWrapper">컬렉션 형식에 대한 콘텐츠 래퍼로 선언된 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>이 특성과 연결된 컬렉션 형식의 콘텐츠 래퍼로 선언된 형식을 가져옵니다.</summary>
      <returns>컬렉션 형식의 콘텐츠 래퍼로 선언된 형식입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>
        <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> 속성을 비교하여 지정된 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />가 이 <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" />와 동일한지 여부를 확인합니다.</summary>
      <param name="obj">비교할 <see cref="T:System.Windows.Markup.ContentWrapperAttribute" />입니다.</param>
      <returns>
        <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> 속성이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>이 특성에 대한 고유 식별자를 가져옵니다.</summary>
      <returns>특성에 대한 고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.DateTime" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />이 <see cref="T:System.DateTime" />의 인스턴스로 변환될 수 있는지 여부를 결정합니다.</summary>
      <param name="value">변환을 위해 평가할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>값을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정한 개체를 <see cref="T:System.String" />으로 변환할 수 있는지 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.DateTime" />으로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.DateTime" />으로 변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.DateTime" />의 새 인스턴스입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.DateTime" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.DateTime" />의 문자열 표현입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />가 <see cref="T:System.DateTime" />이 아니거나 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>특성 사용 속성이 다른 속성 값에 종속된다는 것을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.DependsOnAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">이 <see cref="T:System.Windows.Markup.DependsOnAttribute" />와 연결된 속성이 종속된 속성입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>
        <see cref="T:System.Windows.Markup.DependsOnAttribute" />에서 선언된 관련 속성의 이름을 가져옵니다.</summary>
      <returns>관련 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>이 <see cref="T:System.Windows.Markup.DependsOnAttribute" />에 대한 고유 식별자를 가져옵니다.</summary>
      <returns>고유 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>암시적 키 값을 제공하는 관련된 클래스의 속성을 지정합니다. 암시적 키는 <see cref="T:System.Collections.IDictionary" /> 컬렉션에 있는 항목의 XAML에 정의된 명시적 <see langword="x:Key" /> 특성이 아닌 키에 사용됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">암시적 키 값을 제공하는 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>암시적 키 값을 제공하는 속성의 이름을 가져옵니다.</summary>
      <returns>암시적 키 값을 제공하는 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>명명된 XAML 요소 및 이러한 요소에 이벤트 처리기를 연결하기 위한 태그 컴파일 및 도구 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>이벤트와 이름을 컴파일된 콘텐츠에 연결합니다.</summary>
      <param name="connectionId">호출을 구분할 식별자 토큰입니다.</param>
      <param name="target">이벤트 및 이름을 연결할 대상입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>구성 요소의 컴파일된 페이지를 로드합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>특정 XAML 이름 범위 내에서 요소의 이름에 액세스하는 방법과 해당 XAML 이름 범위 내에서 이름의 고유성을 적용하는 방법에 대한 계약을 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>제공된 식별 이름이 있는 개체를 반환합니다.</summary>
      <param name="name">요청하는 개체의 이름 식별자입니다.</param>
      <returns>개체입니다(있는 경우). 해당 이름의 개체가 없으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>제공된 이름을 현재 XAML 이름 범위로 등록합니다.</summary>
      <param name="name">등록할 이름입니다.</param>
      <param name="scopedElement">제공된 <paramref name="name" />이 참조하는 특정 요소입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>현재 XAML 이름 범위에서 제공된 이름의 등록을 취소합니다.</summary>
      <param name="name">등록을 취소할 이름입니다.</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>XAML 네임스페이스에서 이름 사전을 노출하는 데 유용한 열거 가능한 컬렉션 및 사전 지원을 통합합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>태그 확장명 평가를 위한 상황별 개체 속성 관계를 보고하는 서비스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>보고되는 대상 개체를 가져옵니다.</summary>
      <returns>보고되는 대상 개체입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>보고될 대상 속성에 대한 식별자를 가져옵니다.</summary>
      <returns>보고될 대상 속성에 대한 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>지정된 속성을 현재 범위에서 앰비언트로 처리해야 하는지 여부에 대한 쿼리입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>지정된 명명된 속성을 현재 범위에서 앰비언트로 간주할 수 있는지 여부에 대한 쿼리입니다.</summary>
      <param name="propertyName">앰비언트 상태를 확인할 속성의 이름입니다.</param>
      <returns>요청된 속성을 앰비언트로 간주할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>절대 URI에 대해 제공된 상대 URI를 확인하기 위해 애플리케이션 컨텍스트를 사용할 수 있는 서비스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>현재 애플리케이션 컨텍스트의 기본 URI를 가져오거나 설정합니다.</summary>
      <returns>애플리케이션 컨텍스트의 기본 URI입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>
        <see cref="T:System.Windows.Markup.ValueSerializer" />에 제공되는 컨텍스트를 정의합니다. 특수한 경우의 serialization이나 여러 다른 모드의 serialization을 설정하는 데 컨텍스트를 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 속성 설명자에 대한 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="descriptor">변환할 속성의 설명자입니다.</param>
      <returns>지정된 속성을 serialize할 수 있는 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>지정된 형식과 연결된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="type">변환되는 값의 형식입니다.</param>
      <returns>지정된 형식을 serialize할 수 있는 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>XAML 태그의 명명된 요소에서 적합한 CLR 형식으로 확인되는 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>명명된 XAML 형식을 해당하는 CLR <see cref="T:System.Type" />으로 확인합니다.</summary>
      <param name="qualifiedTypeName">확인할 XAML 형식 이름입니다. 이 형식 이름은 XML 네임스페이스의 접두사에 따라 선택적으로 정규화됩니다. 그렇지 않으면 현재 기본 XML 네임스페이스가 사용됩니다.</param>
      <returns>
        <paramref name="qualifiedTypeName" />이 확인되는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>.NET Framework XAML 서비스 및 기타 XAML 판독기와 XAML 작성기에서 지원할 수 있는 XAML 태그 확장 구현에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtension" />에서 파생된 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>파생 클래스에서 구현된 경우 이 태그 확장의 대상 개체 속성에 대한 값으로 제공된 개체를 반환합니다.</summary>
      <param name="serviceProvider">태그 확장에 대한 서비스를 제공할 수 있는 서비스 공급자 도우미입니다.</param>
      <returns>확장이 적용되는 속성에 설정할 개체 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute">
      <summary>태그 확장에서 반환할 수 있는 괄호 문자를 보고합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.#ctor(System.Char,System.Char)">
      <summary>제공된 문자를 사용하여 <see cref="T:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="openingBracket">여는 괄호 문자를 정의하는 <see cref="T:System.Char" />입니다.</param>
      <param name="closingBracket">닫는 괄호 문자를 정의하는 <see cref="T:System.Char" />입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.ClosingBracket">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtension" />에서 닫는 구분 기호로 사용할 문자를 지정합니다.</summary>
      <returns>문자를 나타내는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionBracketCharactersAttribute.OpeningBracket">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtension" />에서 여는 구분 기호로 사용할 문자를 지정합니다.</summary>
      <returns>문자를 나타내는 <see cref="T:System.Char" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>태그 확장에서 반환할 수 있는 형식을 보고합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>제공된 <see cref="T:System.Type" />을 사용하여 <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="returnType">이 특성에서 보고하는 반환 형식입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>사용되지 않습니다. 사용하지 마십시오.</summary>
      <param name="returnType">이 .NET Framework 특성가 보고하는 반환 형식입니다.</param>
      <param name="expressionType">사용되지 않습니다. 사용하지 마십시오.</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>사용되지 않습니다. 사용하지 마십시오.</summary>
      <returns>사용되지 않습니다. 사용하지 마십시오.</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>이 .NET Framework 특성가 보고하는 <see cref="T:System.Windows.Markup.MarkupExtension" /> 반환 형식을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> .NET Framework 특성 구현의 형식이 안전한 반환 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>선언적 XAML의 클래스 멤버를 정의하는 태그 기술에 사용되는 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.MemberDefinition" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>파생 클래스에서 구현되면 정의할 멤버의 이름을 가져오거나 설정합니다.</summary>
      <returns>정의할 멤버의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>문자열 이름을 해당 이름의 개체에 대한 개체 참조로 변환하거나 개체 그래프의 개체 이름을 반환하는 형식 변환을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.NameReferenceConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 한 형식의 개체를 다른 개체로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>이 변환기에서 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>변환기가 개체를 지정된 대상 형식으로 변환할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 대상 형식입니다.</param>
      <returns>변환기가 변환을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 컨텍스트 및 문화권 정보를 사용하여 제공된 개체를 다른 개체로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 참조 이름 문자열입니다.</param>
      <returns>반환되는 개체이며, 관련 백업 어셈블리에서 형식 매핑된 모든 개체일 수 있고 XAML에서 XAML 이름 참조를 사용하여 선언될 수 있습니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" />가 null 문자열이거나 빈 문자열인 경우
또는
<see cref="T:System.Xaml.IXamlNameResolver" /> 서비스가 없거나 올바르지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>개체를 지정된 형식으로 변환합니다. 개체 그래프의 개체에 대한 XAML 참조 이름을 반환하기 위한 것입니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 문화권으로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">참조 이름을 검색할 개체입니다.</param>
      <param name="destinationType">반환할 형식입니다. 항상 <see cref="T:System.String" /> 형식을 참조해야 합니다.</param>
      <returns>입력 <paramref name="value" /> 개체의 참조 이름입니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> 서비스가 없거나 올바르지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>XAML 이름 범위 값을 제공하는 관련된 클래스의 속성을 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">XAML 이름 범위를 제공하는 특성 사용 형식에 대한 속성 이름입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>지정된 이름 및 형식을 사용하여 <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">XAML 이름 범위를 제공하는 연결 가능 멤버의 이름입니다.</param>
      <param name="type">XAML 이름 범위를 제공하는 연결 가능 멤버의 소유자 형식입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>XAML 이름 범위를 제공하는 속성의 이름을 가져옵니다.</summary>
      <returns>XAML 이름 범위를 제공하는 속성의 이름인 문자열 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>XAML 이름 범위 지원을 제공하는 연결된 속성의 소유자 형식을 가져옵니다.</summary>
      <returns>XAML 이름 범위 지원을 제공하는 연결된 속성의 소유자 형식인 <see cref="T:System.Type" /> 값이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>null 개체를 반환하기 위해 XAML에서 명시적으로 값을 null로 설정하는 데 사용할 수 있는 XAML 태그 확장을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.NullExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>이 태그 확장의 출력 값으로 사용할 <see langword="null" />을 제공합니다.</summary>
      <param name="serviceProvider">태그 확장 구현에 대한 서비스를 제공할 수 있는 개체입니다.</param>
      <returns>null 참조입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>선언적 XAML의 클래스 속성을 정의하는 태그 기술을 지원합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.PropertyDefinition" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>연관된 CLR 특성의 목록을 가져옵니다.</summary>
      <returns>연관된 특성 목록입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>정의된 속성의 액세스 수준을 가져오거나 설정합니다.</summary>
      <returns>문자열로 나타낸 정의된 속성의 액세스 수준입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>정의할 속성의 이름을 가져오거나 설정합니다.</summary>
      <returns>정의할 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>정의할 속성의 <see cref="T:System.Xaml.XamlType" />을 가져오거나 설정합니다.</summary>
      <returns>정의할 속성의 XAML형식 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>
        <c>{x:Reference}</c> 태그 확장명을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.Reference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>
        <paramref name="name" /> 인수를 사용하여 <see cref="T:System.Windows.Markup.Reference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">참조할 요소의 XAML 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>참조를 가져올 XAML 이름을 가져오거나 설정합니다.</summary>
      <returns>참조를 가져올 요소의 XAML 이름입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>대상 속성의 값인 개체를 반환합니다. <see cref="T:System.Windows.Markup.Reference" /> 형식의 경우 이것은 제공된 <see cref="P:System.Windows.Markup.Reference.Name" />이 참조하는 개체입니다.</summary>
      <param name="serviceProvider">
        <see cref="T:System.Xaml.IXamlNameResolver" /> 서비스를 구현하는 클래스입니다.</param>
      <returns>대상 속성의 값입니다. 이것은 관련 백업 어셈블리에서 형식 매핑된 개체일 수 있습니다.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> 값이 <see cref="T:System.Xaml.IXamlNameResolver" /> 서비스를 구현하지 않는 경우
또는
<see cref="P:System.Windows.Markup.Reference.Name" /> 값이 생성 또는 위치 사용을 통해 설정되지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>Visual Studio 프로젝트 파일의 <see langword="RootNamespace" /> 속성 값을 식별하는 데 사용하는 어셈블리 수준 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameSpace">루트 네임스페이스 값입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>Visual Studio 프로젝트 파일의 <see langword="RootNamespace" /> 속성 값에 해당하는 문자열을 가져옵니다.</summary>
      <returns>Visual Studio 프로젝트 파일의 <see langword="RootNamespace" /> 속성 값에 해당 하는 문자열입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>XAML x:Name attribute로 매핑할 형식의 속성을 보고하는 형식 수준 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">클래스의 <see langword="x:Name" />에 해당하는 값으로 사용할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>이 <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />로 지정된 런타임 이름 속성의 이름을 가져옵니다.</summary>
      <returns>속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>정적 필드 및 속성 참조를 반환하는 태그 확장을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.StaticExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>제공된 <paramref name="member" /> 문자열을 사용하여 <see cref="T:System.Windows.Markup.StaticExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">참조할 멤버를 식별하는 문자열입니다. 이 문자열은 <c>prefix:typeName.fieldOrPropertyName</c> 양식을 사용합니다. <c>prefix</c>는 XAML 네임스페이스에 대한 매핑 접두사이며 기본 XAML 네임스페이스에 매핑되지 않은 정적 값을 참조하려는 경우에만 필요합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>서비스 제공 형식 확인자를 기반으로 정적 필드나 속성을 확인하는 데 사용되는 멤버 이름 문자열을 가져오거나 설정합니다.</summary>
      <returns>참조할 멤버를 식별하는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.StaticExtension.Member" />를 <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>반환할 정적 멤버를 정의하는 <see cref="T:System.Type" />을 가져오거나 설정합니다.</summary>
      <returns>반환할 정적 멤버를 정의하는 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />를 <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>이 확장을 적용하는 속성에 설정할 개체 값을 반환합니다. <see cref="T:System.Windows.Markup.StaticExtension" />의 경우 이 반환 값은 요청된 정적 멤버에 대해 계산되는 정적 값입니다.</summary>
      <param name="serviceProvider">태그 확장명 서비스를 제공할 수 있는 개체입니다. 서비스 공급자는 형식 확인자(<see cref="T:System.Windows.Markup.IXamlTypeResolver" />)를 구현하는 서비스를 제공해야 합니다.</param>
      <returns>확장이 적용되는 속성에 설정할 정적 값입니다.</returns>
      <exception cref="T:System.InvalidOperationException">확장에 대한 <paramref name="member" /> 값은 평가 시 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 문자열의 일부가 제대로 구문 분석되지 않았습니다.
또는
<paramref name="serviceProvider" />에서 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />에 대한 서비스를 제공하지 않는 경우
또는
<paramref name="member" /> 값이 정적 멤버로 확인되지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>XAML 프로세서에서 serialize할 때 태그 형식에서 요소 주변의 공백을 트리밍해야 함을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>문자열 입력에 따라 <see cref="T:System.Type" />을 반환하는 태그 확장을 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.TypeExtension" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.TypeExtension" /> 클래스의 새 인스턴스를 초기화하여 제공된 <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> 문자열에 따라 <paramref name="typeName" /> 값을 초기화합니다.</summary>
      <param name="typeName">참조할 형식을 식별하는 문자열입니다. 이 문자열은 <c>prefix:className</c> 형식을 사용합니다. <c>prefix</c>는 XAML 네임스페이스에 대한 매핑 접두사이며 기본 XAML 네임스페이스에 매핑되지 않은 형식을 참조하려는 경우에만 필요합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" />을 <see langword="null" />로 지정하려고 시도했습니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.Markup.TypeExtension" /> 클래스의 새 인스턴스를 초기화하여 형식을 직접 선언합니다.</summary>
      <param name="type">이 <see cref="T:System.Windows.Markup.TypeExtension" />에서 나타낼 형식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>이 확장이 적용되는 속성에 설정해야 하는 개체를 반환합니다. <see cref="T:System.Windows.Markup.TypeExtension" />의 경우 요청된 형식 이름에 대해 평가되는 <see cref="T:System.Type" /> 값입니다.</summary>
      <param name="serviceProvider">태그 확장명 서비스를 제공할 수 있는 개체입니다. 공급자는 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />에 대한 서비스를 제공해야 합니다.</param>
      <returns>확장이 적용되는 속성에 설정할 <see cref="T:System.Type" />입니다.</returns>
      <exception cref="T:System.InvalidOperationException">확장에 대한 <paramref name="member" /> 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> 문자열의 일부가 올바르게 구문 분석되지 않은 경우
-또는-
<paramref name="serviceProvider" />에서 <see cref="T:System.Windows.Markup.IXamlTypeResolver" />에 대한 서비스를 제공하지 않는 경우
-또는-
<paramref name="typeName" /> 값이 형식으로 확인되지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>이 확장에 대한 형식 정보를 가져오거나 설정합니다.</summary>
      <returns>설정된 형식입니다. 런타임에 액세스 권한을 얻기 위해 <see langword="null" />일 수는 있지만 <see langword="null" />로 설정할 수 없습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>이 태그 확장이 나타내는 형식 이름을 가져오거나 설정합니다.</summary>
      <returns>형식을 식별하는 문자열입니다. 이 문자열 형식을 사용 하 여 접두사<c>:</c>className합니다. prefix 는 XML 네임 스페이스에 대 한 매핑 접두사 이며 WPF (<c>http://schemas.microsoft.com/winfx/2006/xaml/presentation</c>)의 기본 xml 네임 스페이스에 매핑되지 않은 형식을 참조 하려는 경우에만 필요 합니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <see langword="null" />로 설정하려고 했습니다.</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>x:Uid 지시문 값을 제공하는 클래스의 CLR 속성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">
        <see langword="x:Uid" /> 값을 제공하는 속성의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>x:Uid 지시문 값을 나타내는 CLR 속성의 이름을 가져옵니다.</summary>
      <returns>x:Uid 지시문을 나타내는 CLR 속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>XAML 개체 그래프를 만드는 동안 이 형식이 하향식으로 빌드되는지 여부를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="usable">초기화하는 동안 연결된 클래스를 사용할 수 있는지 여부를 지정합니다.</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>초기화하는 동안 관련된 클래스를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>초기화하는 동안 관련된 클래스를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>개체 표현에서 serialization의 변환 동작을 정의하는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>파생 클래스에서 재정의된 경우 지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>값을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 개체가 <see cref="T:System.String" />으로 변환될 수 있는지 여부를 결정합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false." />입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>파생 클래스에서 재정의된 경우 <see cref="T:System.String" />을 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 인스턴스로 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>제공된 <paramref name="value" />를 기반으로 하여 <see cref="T:System.Windows.Markup.ValueSerializer" /> 구현에서 지원하는 형식의 새 인스턴스입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>파생 클래스에서 재정의된 경우 지정된 개체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정한 개체의 문자열 표현입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</summary>
      <param name="value">변환할 수 없는 개체입니다.</param>
      <returns>
        <see langword="ConvertFrom" /> 변환을 수행할 수 없을 때 throw할 예외에 대한 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>변환을 수행할 수 없을 때 throw되는 예외를 반환합니다.</summary>
      <param name="value">변환할 수 없는 개체입니다.</param>
      <param name="destinationType">변환할 대상 형식을 나타내는 형식입니다.</param>
      <returns>
        <see langword="ConvertTo" /> 변환을 수행할 수 없을 때 throw할 예외에 대한 <see cref="T:System.Exception" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>속성에 대한 CLR 속성 설명자를 전달하여 속성에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="descriptor">serialize될 속성에 대한 CLR 속성 설명자입니다.</param>
      <returns>지정된 속성과 연결된 serializer입니다. <see langword="null" />을 반환할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 컨텍스트를 사용하여 지정된 속성에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="descriptor">serialize할 속성에 대한 설명자입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 속성과 연결된 serializer입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>지정된 형식에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="type">
        <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져올 형식입니다.</param>
      <returns>지정된 형식과 연결된 serializer입니다. <see langword="null" />을 반환할 수 있습니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 컨텍스트를 사용하여 지정된 형식에 대해 선언된 <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져옵니다.</summary>
      <param name="type">
        <see cref="T:System.Windows.Markup.ValueSerializer" />를 가져올 형식입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 형식과 연결된 serializer입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Markup.ValueSerializer" />에서 참조되는 형식의 열거형을 가져옵니다.</summary>
      <param name="value">serialize되는 값입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>이 serializer에서 변환하는 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>serialize될 때 형식이나 속성에서 사용해야 하는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스를 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>어셈블리의 정규화된 형식 이름 문자열을 사용하여 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="valueSerializerTypeName">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스에서 사용할 어셈블리의 정규화된 형식 이름 문자열입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>지정된 형식을 사용하여 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="valueSerializerType">
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 형식을 나타내는 형식입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>이 특성에서 보고하는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" />의 형식입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>이 형식이나 속성에 대한 <see cref="T:System.Windows.Markup.ValueSerializer" /> 형식의 정규화된 어셈블리 이름을 가져옵니다.</summary>
      <returns>형식에 대한 어셈블리의 정규화된 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>XAML 프로세서에 의해 유효한 공백으로 처리되어야 하는 컬렉션 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>클래스 또는 속성에 XAML에 대한 지연된 로드 사용(예: 템플릿 동작)이 있음을 나타내고 지연 동작 및 해당 대상/콘텐츠 형식을 사용하도록 설정하는 클래스를 보고합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>형식의 문자열 이름을 사용하여 <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="loaderType">지연 로드 동작에 사용할 구현에 대한 형식의 문자열 이름입니다.</param>
      <param name="contentType">지연 로드 동작의 대상/콘텐츠 형식에 대한 형식의 문자열 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 또는 <paramref name="contentType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>CLR <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> 값을 사용하여 <see cref="T:System.Type" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="loaderType">지연 로드 동작에 사용할 구현에 대한 CLR <see cref="T:System.Type" /> 값입니다.</param>
      <param name="contentType">지연 로드 동작의 대상/콘텐츠 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> 또는 <paramref name="contentType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>지연 로드 동작의 대상/콘텐츠 형식에 대한 CLR <see cref="T:System.Type" /> 값을 가져옵니다.</summary>
      <returns>지연 로드 동작의 대상/콘텐츠 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>지연 로드 동작에 사용할 구현에 대한 형식의 문자열 이름을 가져옵니다.</summary>
      <returns>지연 로드 동작에 사용할 변환기에 대한 형식의 문자열 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>지연 로드 동작에 사용할 구현에 대한 CLR <see cref="T:System.Type" /> 값을 가져옵니다.</summary>
      <returns>지연 로드 동작에 사용할 구현에 대한 CLR <see cref="T:System.Type" /> 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>지연 로드 동작의 대상/콘텐츠 형식에 대한 형식의 문자열 이름을 가져옵니다.</summary>
      <returns>지연 로드 동작의 대상/콘텐츠 형식에 대한 형식의 문자열 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>클래스에서 태그 확장을 사용하여 값을 제공할 수 있음을 나타내고 태그 확장 설정 작업에 사용할 처리기를 참조합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlSetMarkupExtensionHandler">태그 확장 설정 작업에 사용할 처리기의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>태그 확장 설정 작업에 사용할 처리기의 이름을 가져옵니다.</summary>
      <returns>태그 확장 설정 작업에 사용할 처리기의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>XAML 개체 작성기에서 태그 확장을 사용하여 값을 설정할 때 호출되는 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">설정될 멤버에 대한 XAML 형식 시스템/스키마 정보입니다.</param>
      <param name="value">설정될 멤버에 제공할 태그 확장 참조입니다.</param>
      <param name="serviceProvider">태그 확장에 전달되는 서비스 공급자 정보입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>현재 활성 형식의 기본 클래스에 정의된 콜백을 호출하는 방법을 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>이 <see cref="T:System.Windows.Markup.MarkupExtension" />와 관련된 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> 참조를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />와 관련된 태그 확장 참조입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>태그 확장에 전달된 서비스 공급자 정보를 가져옵니다.</summary>
      <returns>태그 확장에 전달된 서비스 공급자 정보입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>클래스에서 형식 변환기를 사용하여 값을 제공할 수 있음을 나타내고 형식 변환기 설정 사례에 사용할 처리기를 참조합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlSetTypeConverterHandler">형식 변환기 설정 작업에 사용할 처리기의 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />에 지정된 <paramref name="xamlSetTypeConverterHandler" /> 초기화 값(처리기 이름)을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />에 지정된 <paramref name="xamlSetTypeConverterHandler" /> 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>XAML 작성기에서 형식 변환기 호출을 사용하여 값을 설정할 때 호출되는 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">설정될 멤버에 대한 XAML 형식 시스템/스키마 정보입니다.</param>
      <param name="typeConverter">호출되는 형식별 변환기 인스턴스입니다.</param>
      <param name="value">설정될 멤버에 제공할 값입니다.</param>
      <param name="serviceProvider">
        <paramref name="typeConverter" /> 클래스에서 사용할 수 있는 서비스 공급자 정보입니다.</param>
      <param name="cultureInfo">
        <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 및 기타 메서드를 호출할 때 <paramref name="typeConverter" /> 클래스에서 사용할 수 있는 문화권 정보입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>현재 활성 형식의 기본 클래스에 정의된 콜백을 호출하는 방법을 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>
        <see cref="T:System.Globalization.CultureInfo" /> 및 기타 메서드를 호출할 때 형식 변환기 클래스에서 사용할 수 있는 <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> 정보를 가져옵니다.</summary>
      <returns>형식 변환기 클래스에서 사용할 수 있는 문화권 정보입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>형식 변환기 클래스에서 사용할 수 있는 <see cref="T:System.IServiceProvider" /> 정보를 가져옵니다.</summary>
      <returns>
        <paramref name="typeConverter" /> 클래스에서 사용할 수 있는 서비스 공급자 정보입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>호출되는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스를 가져오고 형식 변환 동작을 제공합니다.</summary>
      <returns>형식 변환 동작을 제공하는 형식 변환기입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />에서 특정 값을 설정할 때 호출되는 콜백에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">설정될 멤버에 대한 XAML 형식 시스템/스키마 정보입니다.</param>
      <param name="value">멤버에 제공할 값입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>파생 클래스에서 재정의하는 경우 현재 활성 형식의 기본 클래스에 정의된 <see langword="SetValue" /> 콜백을 호출하는 방법을 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>
        <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />를 사용하는 호출자가 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />를 호출하지 않고 값을 사용할 수 있는지 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>값을 사용할 수 있어 <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />를 호출할 필요가 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>설정될 멤버에 대한 XAML 형식 시스템과 XAML 스키마 정보를 가져옵니다.</summary>
      <returns>설정될 멤버에 대한 XAML 형식 시스템과 XAML 스키마 정보입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>설정될 멤버에 제공할 값을 가져오거나 설정합니다.</summary>
      <returns>설정될 멤버에 제공할 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>
        <see langword="Value" /> 노드의 값으로 표시될 수 있는 리터럴 데이터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.XData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>이 <see cref="T:System.Windows.Markup.XData" />가 래핑하는 리터럴 값 문자열을 가져오거나 설정합니다.</summary>
      <returns>리터럴 값 문자열입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>리터럴 데이터의 판독기를 가져오거나 설정합니다.</summary>
      <returns>리터럴 데이터의 판독기입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>xml:lang 특성과 연결할 속성을 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">
        <see langword="xml:lang" /> 특성과 연결할 속성 이름입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>이 특성에 지정되어 있는 속성의 이름을 가져옵니다.</summary>
      <returns>속성의 이름입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>XAML 네임스페이스가 다른 XAML 네임스페이스에 포함될 수 있음을 지정합니다. 일반적으로 포함하는 XAML 네임스페이스는 미리 정의된 <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />에 표시됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="oldNamespace">참조 XAML 네임스페이스 식별자입니다.</param>
      <param name="newNamespace">포함하는 XAML 네임스페이스 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> 또는 <paramref name="newNamespace" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>이 특성에서 보고한 포함하는 네임스페이스 식별자를 가져옵니다.</summary>
      <returns>이 특성에서 보고한 포함하는 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>이 특성에서 보고한 참조 네임스페이스 식별자를 가져옵니다.</summary>
      <returns>참조 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>XAML 네임스페이스 및 CLR 네임스페이스 간 어셈블리별 기반에서 매핑을 지정합니다. 지정된 매핑은 XAML 개체 작성기 또는 XAML 스키마 컨텍스트에서 형식 확인에 사용됩니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlNamespace">XML 네임스페이스 식별자입니다.</param>
      <param name="clrNamespace">CLR 네임스페이스 이름을 참조하는 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 또는 <paramref name="clrNamespace" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>특성과 연관된 어셈블리의 이름을 가져오거나 설정합니다.</summary>
      <returns>어셈블리 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>이 특성에 지정된 CLR 네임스페이스의 문자열 이름을 가져옵니다.</summary>
      <returns>문자열로 지정된 CLR 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>이 특성에 지정된 XAML 네임스페이스 식별자를 가져옵니다.</summary>
      <returns>XML 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>XAML 파일에 요소와 특성을 쓸 때(serialization) 또는 XMAL 편집 기능을 가진 디자인 환경과 상호 작용할 때 XAML 사용의 XAML 네임스페이스와 연결할 권장 접두사를 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlNamespace">XML 네임스페이스 식별자입니다.</param>
      <param name="prefix">권장 접두사 문자열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> 또는 <paramref name="prefix" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>이 특성에 연결된 권장 접두사를 가져옵니다.</summary>
      <returns>권장 접두사 문자열입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>이 특성에 연결된 XAML 네임스페이스 식별자를 가져옵니다.</summary>
      <returns>XML 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>앰비언트 속성에 대한 정보를 <see cref="T:System.Xaml.IAmbientProvider" /> 구현의 일부분으로 보고합니다.</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>
        <see cref="T:System.Xaml.AmbientPropertyValue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="property">앰비언트 속성을 나타내는 식별자입니다.</param>
      <param name="value">보고할 값입니다.</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>앰비언트 속성을 나타내는 XAML 형식 시스템 식별자(<see cref="T:System.Xaml.XamlMember" />)입니다.</summary>
      <returns>앰비언트 속성을 나타내는 식별자입니다.</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>앰비언트 속성의 값을 가져옵니다.</summary>
      <returns>앰비언트 속성의 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>연결 가능한 멤버에 대한 XAML 형식 시스템 식별자 표현을 제공합니다. 식별자 구조체는 연결 가능한 멤버에 사용하는 경우의 <paramref name="declaringType" /><see langword="." /><paramref name="memberName" /> 문자열 형식과 유사하게 사용합니다.</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="declaringType">선언하는 <see cref="P:System.Xaml.XamlMember.Type" /> 이름과 일치해야 하는 식별자의 <paramref name="declaringType" /> 구성 요소입니다.</param>
      <param name="memberName">
        <see cref="P:System.Xaml.XamlMember.Name" />과 일치해야 하는 식별자의 <paramref name="memberName" /> 구성 요소입니다.</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="declaringType" /> 구성 요소 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="declaringType" /> 구성 요소 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>이 <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 인스턴스와 지정된 개체의 값이 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Xaml.AttachableMemberIdentifier" />와 비교할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 <see cref="T:System.Xaml.AttachableMemberIdentifier" />이고 해당 값이 이 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>이 인스턴스와 지정한 다른 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Xaml.AttachableMemberIdentifier" />과 비교할 <see cref="T:System.Xaml.AttachableMemberIdentifier" />입니다.</param>
      <returns>개체의 값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>이 <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 해시 코드를 반환합니다.</summary>
      <returns>정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="memberName" /> 구성 요소 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.AttachableMemberIdentifier" />의 <paramref name="memberName" /> 구성 요소 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>지정된 두 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" />의 값이 <paramref name="left" />의 값과 같으면 <paramref name="right" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>지정된 두 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="left">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <param name="right">
        <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="left" />의 값이 <paramref name="right" />의 값과 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>현재 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Xaml.AttachableMemberIdentifier" />을 반환합니다.</summary>
      <returns>현재 <see cref="T:System.String" />를 나타내는 <see cref="T:System.Xaml.AttachableMemberIdentifier" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>연결 가능한 속성에서 값 및 접근자 메서드 정보를 가져오고 연결된 속성 저장소와 함께 사용할 수 있는 정적 도우미 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>지정된 연결 가능한 속성 저장소에 있는 모든 연결 가능한 속성-값 쌍을 대상 배열로 복사합니다.</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <param name="array">대상 배열입니다. 배열은 제네릭 배열이고, 차원 없이 전달되어야 하며, <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 및 <see langword="object" />의 구성 요소가 있어야 합니다.</param>
      <param name="index">복사를 시작할 소스 인덱스입니다.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>지정된 저장소에 있는 연결 가능한 속성 항목의 개수를 반환합니다.</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <returns>저장소에 있는 항목의 정수 개수입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>지정된 저장소에서 지정된 연결 가능한 속성에 대한 항목을 제거합니다.</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <param name="name">저장소에서 제거할 연결 가능한 속성 항목의 식별자입니다.</param>
      <returns>
        <paramref name="name" />에 대해 연결 가능한 속성 항목을 저장소에서 발견하고 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>지정한 저장소에서 지정된 연결 가능한 속성의 값을 설정합니다.</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소를 사용할 null이 아닌 개체입니다.</param>
      <param name="name">값을 설정할 연결 가능한 속성 항목의 식별자입니다.</param>
      <param name="value">설정할 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">저장소에서 값을 설정할 수 없습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>지정된 저장소에서 지정된 연결 가능한 속성의 값을 가져오려고 시도합니다. 특정 연결 가능한 속성이 저장소에 없는 경우 예외를 throw하지 않습니다.</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소를 사용할 null이 아닌 개체입니다.</param>
      <param name="name">값을 가져올 연결 가능한 속성 항목의 식별자입니다.</param>
      <param name="value">Out 매개 변수입니다. 이 메서드가 반환할 때 이 매개 변수는 <paramref name="name" />이 저장소에 있고 값을 가지고 있을 경우 값에 대한 대상 개체를 포함합니다.</param>
      <returns>
        <paramref name="name" />에 대해 연결 가능한 속성 항목이 저장소에 있고 값이 <paramref name="value" />에 게시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>제네릭 출력 형식을 반환하면서 지정된 저장소에서 지정된 연결 가능한 속성의 값을 가져오려고 시도합니다. 특정 연결 가능한 속성이 저장소에 없는 경우 예외를 throw하지 않습니다.</summary>
      <param name="instance">
        <see cref="T:System.Xaml.IAttachedPropertyStore" />를 구현하는 연결 가능한 특정 속성 저장소이거나, 연결 가능한 정적 기본 속성 저장소에 액세스하는 null이 아닌 개체입니다.</param>
      <param name="name">값을 가져올 연결 가능한 속성 항목의 식별자입니다.</param>
      <param name="value">Out 매개 변수입니다. 이 메서드가 반환할 때 이 매개 변수는 <paramref name="name" />이 저장소에 있고 값을 가지고 있을 경우 값에 대한 대상 개체를 포함합니다.</param>
      <typeparam name="T">출력의 예상 형식입니다.</typeparam>
      <returns>
        <paramref name="name" />에 대해 연결 가능한 속성 항목이 저장소에 있고 값이 <paramref name="value" />에 게시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>앰비언트 속성 또는 앰비언트 형식에 대한 정보 항목을 형식 변환기 및 태그 확장에 반환할 수 있는 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>요청된 형식 및 속성 집합에 대해 앰비언트 속성 정보 항목의 열거 가능한 집합을 반환합니다.</summary>
      <param name="ceilingTypes">개체 그래프에서 상향 트래버스를 수행할 때 발견될 경우 평가를 중지해야 하는 형식을 하나 이상 지정합니다. 이 형식에는 원하는 앰비언트 속성이 포함됩니다. <see langword="null" />일 수 있습니다.</param>
      <param name="searchLiveStackOnly">저장된 컨텍스트를 사용하지 않으려면 <see langword="true" />, 저장된 컨텍스트를 사용하려면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
      <param name="types">앰비언트로 간주할 형식을 식별하는 형식 식별자 개체를 하나 이상 지정합니다.</param>
      <param name="properties">앰비언트로 간주할 속성을 식별하는 속성 식별자 개체를 하나 이상 지정합니다.</param>
      <returns>요청된 형식 및 속성 집합에 대해 앰비언트 속성 정보 항목의 열거 가능한 집합을 반환합니다. 반환되는 각 <see cref="T:System.Xaml.AmbientPropertyValue" />의 속성 정보는 입력 <paramref name="types" /> 또는 <paramref name="properties" /> 중 하나와 일치하게 됩니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>요청된 속성 집합에 대해 앰비언트 속성 정보 항목의 열거 가능한 집합을 반환합니다.</summary>
      <param name="ceilingTypes">개체 그래프에서 상향 트래버스를 수행할 때 발견될 경우 평가를 중지해야 하는 형식을 하나 이상 지정합니다. 이 형식에는 원하는 앰비언트 속성이 포함됩니다. <see langword="null" />일 수 있습니다.</param>
      <param name="properties">앰비언트로 간주할 속성을 식별하는 속성 식별자 개체를 하나 이상 지정합니다.</param>
      <returns>요청된 속성 집합에 대한 앰비언트 속성 정보 항목의 열거 가능한 집합입니다. 반환되는 각 <see cref="T:System.Xaml.AmbientPropertyValue" />의 속성 정보는 입력 <paramref name="properties" /> 중 하나와 일치하게 됩니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>요청된 형식에 대해 가능한 앰비언트 형식의 열거 가능한 개체 인스턴스 집합을 반환합니다.</summary>
      <param name="types">앰비언트 형식 정보를 검색할 형식 집합입니다.</param>
      <returns>요청된 <see cref="T:System.Xaml.XamlType" /> 식별자 집합에 대한 값을 나타내는 개체의 열거 가능한 집합입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>어떠한 속성이 먼저 발견되는지를 기준으로 요청된 속성 집합에서 단일 앰비언트 속성 정보 항목을 반환합니다.</summary>
      <param name="ceilingTypes">개체 그래프에서 상향 트래버스를 수행할 때 발견될 경우 평가를 중지해야 하는 형식을 하나 이상 지정합니다. 이 형식에는 원하는 앰비언트 속성이 포함됩니다.</param>
      <param name="properties">앰비언트로 간주되어야 하는 속성을 식별하는 개체를 하나 이상 지정합니다.</param>
      <returns>발견된 <paramref name="properties" /> 목록에서 첫 번째 앰비언트 속성 값에 대한 단일 앰비언트 속성 정보 항목입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>요청된 형식에 대해 가능한 앰비언트 형식인 첫 번째 일치 개체를 반환합니다.</summary>
      <param name="types">앰비언트 형식 정보를 검색할 형식 집합입니다.</param>
      <returns>요청된 집합에 대한 첫 번째 결과 개체입니다.</returns>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>연결 가능한 멤버가 설정되어 있는 개체의 연결 가능한 멤버 저장소를 나타냅니다. 이 연결 가능한 멤버 저장소는 나중에 <see cref="T:System.Xaml.AttachablePropertyServices" />로 참조할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>이 연결 가능한 멤버 저장소에 있는 모든 연결 가능한 멤버/값 쌍을 대상 배열로 복사합니다.</summary>
      <param name="array">대상 배열입니다. 배열은 제네릭 배열이고, 차원 없이 전달되어야 하며, <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 및 <see langword="object" />의 구성 요소가 있어야 합니다.</param>
      <param name="index">복사를 시작할 소스 인덱스입니다.</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>이 연결 가능한 멤버 저장소에 있는 연결 가능한 멤버 항목의 개수를 가져옵니다.</summary>
      <returns>저장소에 있는 항목의 정수 개수입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>이 연결 가능한 멤버 저장소에서 지정된 연결 가능한 멤버에 대한 항목을 제거합니다.</summary>
      <param name="attachableMemberIdentifier">제거할 연결 가능한 멤버 항목의 XAML 형식 시스템 식별자입니다.</param>
      <returns>
        <paramref name="attachableMemberIdentifier" />에 대해 연결 가능한 멤버 항목을 저장소에서 발견하고 제거하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>지정된 저장소에서 지정된 연결 가능한 멤버의 값을 설정합니다.</summary>
      <param name="attachableMemberIdentifier">설정할 연결 가능한 멤버 항목의 XAML 형식 시스템 식별자입니다.</param>
      <param name="value">설정할 값입니다.</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>지정된 저장소에서 지정된 연결 가능한 멤버의 값을 가져오려고 시도합니다.</summary>
      <param name="attachableMemberIdentifier">가져올 연결 가능한 멤버 항목의 XAML 형식 시스템 식별자입니다.</param>
      <param name="value">Out 매개 변수입니다. 이 메서드가 반환할 때 이 매개 변수는 <paramref name="attachableMemberIdentifier" />이 저장소에 있고 값을 가지고 있을 경우 값에 대한 대상 개체를 포함합니다.</param>
      <returns>
        <paramref name="attachableMemberIdentifier" />에 대해 연결 가능한 멤버 항목이 저장소에 있고 값이 <paramref name="value" />에 게시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>대상 형식에 대한 CLR 형식 시스템 식별자를 반환할 수 있는 서비스를 나타냅니다. 대상 형식은 리플렉션이나 다른 메커니즘에서 속성 설정 작업의 대상 형식을 간접적으로 보고하는 경우와 관련이 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>관련 형식 변환기 또는 태그 확장의 대상 형식을 식별하는 CLR <see cref="T:System.Type" />을 반환합니다.</summary>
      <returns>대상 형식에 대한 CLR <see cref="T:System.Type" /> 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>소비자에게 XAML 네임스페이스를 매핑할 때 권장되는 접두어를 반환하는 서비스를 나타냅니다. 소비자는 디자인 환경이나 serializer를 포함할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>지정된 XAML 네임스페이스 식별자에 권장되는 접두사를 반환합니다.</summary>
      <param name="ns">접두사를 가져올 XAML 네임스페이스 식별자 문자열입니다.</param>
      <returns>권장 접두사입니다.</returns>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>구문 분석 중인 태그의 루트 개체를 반환할 수 있는 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>태그 또는 개체 그래프에서 루트 개체를 가져옵니다.</summary>
      <returns>루트 개체입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>노드 기반 XAML 판독기의 간단한 구현을 위한 인덱싱된 노드 컨트롤을 나타내는 서비스를 제공합니다.</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>현재 외부 노드 집합의 노드 수를 가져옵니다.</summary>
      <returns>현재 외부 노드 집합의 노드 수입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>XAML 노드의 인덱싱된 목록 뷰에 대한 현재 판독기 위치의 인덱스 번호를 가져오거나 설정합니다.</summary>
      <returns>현재 판독기 위치의 인덱스 번호입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>XAML 판독기 구현에서 텍스트 줄 정보를 보고하기 위한 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>줄 정보를 사용할 수 있는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>보고할 줄 번호를 가져옵니다.</summary>
      <returns>보고할 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>보고할 줄 위치를 가져옵니다.</summary>
      <returns>보고할 줄 위치입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>보고된 줄 정보를 XAML 작성기에서 사용하고 이를 출력에 포함할 수 있는 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>줄 정보를 수집합니다.</summary>
      <param name="lineNumber">출력에 사용할 줄 번호입니다.</param>
      <param name="linePosition">출력에 사용할 줄 위치입니다.</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>줄 정보 서비스가 값을 제공해야 하는지 그리고 이에 따라 관련이 있는 경우 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />도 호출해야 하는지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns>구현에서 줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>저장 및 쓰기 작업 중에 개체를 입력하고 XAML 이름을 반환하는 데 사용되는 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>지정된 개체의 XAML 이름을 검색합니다.</summary>
      <param name="value">이름을 가져올 개체입니다.</param>
      <returns>요청된 개체의 XAML 이름 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>XAML 이름으로 지정된 개체를 반환하거나 이름 확인을 지연시키는 토큰을 반환하는 서비스를 설명합니다. 이 서비스는 XAML 네임스페이스에 있는 모든 명명된 개체의 열거 가능한 집합을 반환할 수도 있습니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>XAML 네임스페이스에 있는 모든 명명된 개체의 열거 가능한 집합을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 개체의 열거 가능한 집합입니다. 각 <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 대해 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 구성 요소는 문자열이고, <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> 구성 요소는 XAML 네임스페이스에서 <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> 이름을 사용하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>전방 참조를 생성하는 특정 태그 패턴에 맞을 수 있는 개체를 반환합니다.</summary>
      <param name="names">전방 참조가 가능한 이름의 컬렉션입니다.</param>
      <returns>이후에 확인할 조회 동작에 대한 토큰을 제공하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>전방 참조를 생성하는 특정 태그 패턴에 맞을 수 있는 개체를 반환합니다.</summary>
      <param name="names">전방 참조가 가능한 이름의 컬렉션입니다.</param>
      <param name="canAssignDirectly">확인된 이름 참조를 대상 속성에 즉시 할당하려면 <see langword="true" />이고, 구문을 다시 분석하기 위해 사용자 코드를 호출하려면 <see langword="false" />입니다. 기본 동작은 <see langword="false" />입니다.</param>
      <returns>이후에 확인할 조회 동작에 대한 토큰을 제공하는 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>전방 확인을 위해 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />을 호출하여 토큰 내에서 이름을 확인하는 것이 가능한지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns>전방 확인을 위해 유용한 토큰을 반환하는 구현으로서 <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)" />을 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>XAML 프로세서가 지원 XAML 네임스페이스에 모든 관련 이름을 등록했을 때 발생합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>이름 참조에서 개체를 확인합니다.</summary>
      <param name="name">확인할 이름 참조입니다.</param>
      <returns>확인된 개체이거나 null입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>이름 참조에서 개체를 확인하고, 개체가 개체 그래프 목적을 위해 완전히 초기화되었는지 여부를 보고하는 추적 값을 제공합니다.</summary>
      <param name="name">확인할 이름 참조입니다.</param>
      <param name="isFullyInitialized">이 메서드가 반환할 때 반환된 개체가 확인되지 않은 참조에 대한 종속성을 가지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <returns>이후에 확인할 조회 동작에 대한 토큰을 제공하는 개체입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>XAML 태그에 매핑된 접두사를 기반으로 XAML 네임스페이스를 반환할 수 있는 서비스에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>지정된 접두사 문자열의 XAML 네임스페이스 식별자를 검색합니다.</summary>
      <param name="prefix">XAML 네임스페이스 정보를 검색할 접두사입니다.</param>
      <returns>요청한 XAML 네임스페이스 식별자이며 문자열입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>활성 XAML 스키마 컨텍스트에서 사용할 수 있는 접두사와 XAML 네임스페이스 간의 가능한 모든 매핑(<see cref="T:System.Xaml.NamespaceDeclaration" /> 값)을 반환합니다.</summary>
      <returns>열거 가능한 <see cref="T:System.Xaml.NamespaceDeclaration" /> 값의 집합입니다. 접두사 문자열을 모두 가져오려면 반환되는 집합의 각 값에서 <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> 값을 가져옵니다. 특정 XAML 네임스페이스에 대한 접두사를 가져오려면 원하는 <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" /> 값을 가진 모든 반환 값을 처리합니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>현재 내부 파서 컨텍스트를 기반으로 하는 <see cref="T:System.Xaml.XamlObjectWriter" />를 생성하는 서비스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>원래 내부 파서 컨텍스트에서 <see cref="T:System.Xaml.XamlObjectWriterSettings" />를 반환합니다.</summary>
      <returns>원래 내부 파서 컨텍스트에 있는 설정입니다.</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>활성 XAML 스키마 컨텍스트를 기반으로 하는 <see cref="T:System.Xaml.XamlObjectWriter" />를 반환합니다.</summary>
      <param name="settings">
        <see cref="T:System.Xaml.XamlObjectWriter" />의 생성 및 초기화에 사용할 설정입니다.</param>
      <returns>지정된 설정을 가진 <see cref="T:System.Xaml.XamlObjectWriter" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>형식 변환기와 태그 확장에 XAML 스키마 컨텍스트를 제공하는 서비스를 나타냅니다.</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>서비스 컨텍스트에서 보고하는 <see cref="T:System.Xaml.XamlSchemaContext" />를 가져옵니다.</summary>
      <returns>서비스 컨텍스트에서 보고하는 XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>이 문자열 값을 별도의 속성으로 저장하여 XAML 네임스페이스에 대한 식별자 및 접두사를 선언합니다.</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>초기 속성 값을 사용하여 <see cref="T:System.Xaml.NamespaceDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="ns">문자열로 지정된 XAML 네임스페이스 식별자입니다.</param>
      <param name="prefix">접두사 매핑에서 네임스페이스에 사용되는 문자열 접두사입니다.</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>
        <see cref="T:System.Xaml.NamespaceDeclaration" />의 식별자 구성 요소를 가져옵니다.</summary>
      <returns>XML 네임스페이스 선언의 식별자입니다.</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>
        <see cref="T:System.Xaml.NamespaceDeclaration" />의 XAML 네임스페이스 매핑 접두사로 사용되는 접두사를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.NamespaceDeclaration" />의 접두사 문자열입니다.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>XAML 로드를 위해 어셈블리 및 형식에 대한 액세스 제어를 정의합니다.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에서 요청한 어셈블리를 기반으로 <see cref="T:System.Reflection.Assembly" /> 인스턴스를 반환합니다.</summary>
      <param name="assembly">요청에 대한 어셈블리입니다.</param>
      <returns>
        <paramref name="assembly" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />의 소스 정보로 사용하는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에서 요청한 어셈블리를 기반으로 <see cref="T:System.Reflection.AssemblyName" /> 인스턴스를 반환합니다.</summary>
      <param name="assemblyName">요청에 대한 어셈블리 이름입니다.</param>
      <returns>
        <paramref name="assemblyName" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />의 소스 정보로 사용하는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" />은 올바른 정규화된 어셈블리 이름이 아닙니다.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>이 <see cref="T:System.Reflection.AssemblyName" />에 따라 사용 권한이 결정되는 어셈블리의 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Reflection.AssemblyName" />에 따라 사용 권한이 결정되는 어셈블리의 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>정규화된 이름으로 지정된 특정 형식을 기반으로 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 인스턴스를 반환합니다.</summary>
      <param name="assemblyQualifiedTypeName">어셈블리로 한정된 형식 이름으로 구문 분석되는 문자열입니다.</param>
      <returns>
        <paramref name="assemblyQualifiedTypeName" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 대한 소스 정보로 사용하고 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />이 형식에 대한 리플렉션에 따라 결정되는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" />은 올바른 정규화된 어셈블리 형식 이름이 아닙니다.
또는
<paramref name="assemblyQualifiedTypeName" /> 내의 어셈블리 이름은 유효한 어셈블리 이름이 아닙니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에서 지정한 특정 형식을 기반으로 <see cref="T:System.Type" /> 인스턴스를 반환합니다.</summary>
      <param name="type">액세스를 요청할 <see cref="T:System.Type" />입니다.</param>
      <returns>
        <paramref name="type" /> 값을 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 대한 소스 정보로 사용하고 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" />이 형식에 대한 리플렉션에 따라 결정되는 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 인스턴스입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 따라 사용 권한이 결정되는 형식의 정규화되지 않은 문자열 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />에 따라 사용 권한이 결정되는 형식의 정규화되지 않은 문자열 이름입니다.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>XAML 판독기 또는 작성기에서 사용하는 어셈블리에서 형식을 로드하기 위한 사용 권한을 선언합니다.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>열거 가능한 특정 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 값 집합을 사용하여 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="allowedAccess">열거 가능한 특정 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 값의 집합입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" />에 null 항목과 같은 잘못된 정보가 포함되어 있습니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>기존 사용 권한을 사용하여 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 열거형 값입니다.</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>단일 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 값을 사용하여 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="allowedAccess">정의하는 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />이 나타내는 모든 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 값의 목록을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 값의 읽기 전용 목록이나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 동일한 복사본을 만들어 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 복사본입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Equals(System.Object)">
      <param name="obj" />
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>XML 인코딩의 지정된 상태를 사용하여 보안 개체를 다시 만듭니다.</summary>
      <param name="elem">보안 개체를 다시 만드는 데 사용할 XML 인코딩입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" />에 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />에 대한 XML 인코딩이 포함되어 있지 않습니다.
또는
<paramref name="elem" /> 내의 버전 특성은 지원되지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.GetHashCode" />
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 목록에 지정된 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />이 포함되는지 여부를 반환합니다.</summary>
      <param name="requestedAccess">확인할 특정 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" />입니다.</param>
      <returns>
        <paramref name="requestedAccess" />가 현재 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />의 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 목록에 있으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" />가 null입니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 사용 권한의 교집합에 해당하는 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />을 만들어 반환합니다.</summary>
      <param name="target">현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 공통되는 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 교집합을 나타내는 새 사용 권한입니다. 교집합이 비어 있으면 새 사용 권한은 <see langword="null" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" />가 <see langword="null" />이 아니거나 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 지정된 사용 권한의 하위 집합인지 여부를 확인합니다.</summary>
      <param name="target">하위 집합 관계를 테스트할 사용 권한입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 지정된 권한의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" />가 <see langword="null" />이 아니거나 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 무제한의 사용 권한을 나타내는지 여부를 확인합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 무제한의 사용 권한을 나타내면 <see langword="true" />입니다. 이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />에서 특정 액세스 수준 제한이 있거나 권한이 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> 및 해당 사용 권한의 현재 상태에 대한 XML 인코딩을 만듭니다.</summary>
      <returns>상태 정보를 포함한 이 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 XML 인코딩입니다.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 사용 권한의 합집합에 해당하는 사용 권한을 만듭니다.</summary>
      <param name="other">현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 결합할 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>현재 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />과 지정된 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />의 합집합 부분을 나타내는 새 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" />가 <see langword="null" />이 아니거나 <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />이 아닙니다.</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>XAML에서 설정하는 속성에 대해 적용되는, <see cref="T:System.Xaml.XamlDirective" />에서 보고한 구문 제한을 지정합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>
        <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> 또는 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> 위치에서 속성을 설정할 수 있습니다. 이 열거형 멤버는 이러한 값의 조합으로 정의됩니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>XAML 특성 구문으로 속성을 설정할 수 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>XAML 속성 요소 구문으로 속성을 설정할 수 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>XAML에서 속성을 설정할 수 없습니다. 이 값이 기본값입니다.</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에서 보고한 serialization 동작을 정의합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>알 수 없습니다. 멤버의 형식을 따릅니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>결과를 serialize하지 않습니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>결과를 serialize합니다.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>XAML 멤버가 사용하는 컬렉션 비유(있는 경우)에 대해 설명합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML 멤버가 배열 컬렉션을 지원합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>XAML 멤버가 목록 또는 컬렉션을 지원합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML 멤버가 사전(키-값 쌍)을 지원합니다.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML 멤버가 컬렉션을 지원하지 않습니다.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>리플렉션이 아닌 다른 기술을 통해 XAML 멤버의 멤버 특성에 액세스할 수 있는 확장 지점을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>제공된 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />을 기반으로 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">이 <see cref="T:System.Xaml.XamlMember" />와 관련된 특정 XAML 멤버에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>인스턴스에서 관련 속성의 값을 가져옵니다.</summary>
      <param name="instance">멤버에 대한 소유자 형식의 인스턴스입니다.</param>
      <returns>요청된 속성 값입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">알 수 없는 <see cref="T:System.Xaml.XamlMember" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대해 이 메서드를 호출한 경우
또는
쓰기 전용 멤버에 이 메서드를 호출했습니다.
또는
<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>인스턴스에 관련 속성의 값을 설정합니다.</summary>
      <param name="instance">멤버에 대한 소유자 형식의 인스턴스입니다.</param>
      <param name="value">설정할 속성 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.NotSupportedException">알 수 없는 <see cref="T:System.Xaml.XamlMember" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대해 이 메서드를 호출한 경우
또는
읽기 전용 멤버에 이 메서드를 호출했습니다.
또는
<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>serialization 프로세스에서 값을 지속시켜야 하는지 여부를 나타냅니다.</summary>
      <param name="instance">지속성을 검사할 속성이 포함된 인스턴스입니다.</param>
      <returns>열거형 값입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 가져오는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 가져오는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 설정하는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Reflection.MethodInfo" />와 관련된 속성의 값을 설정하는 CLR 메서드에 대한 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 나타내는 정적 값을 제공합니다.</summary>
      <returns>알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />를 나타내는 정적 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>리플렉션 및 생성자 외의 다른 기술을 통해 XAML 형식의 인스턴스를 생성할 수 있는 확장 지점을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>제공된 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">이 <see cref="T:System.Xaml.XamlType" />와 관련된 특정 XAML 형식에 대한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>제공된 항목을 이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />와 관련된 형식의 인스턴스에 추가합니다.</summary>
      <param name="instance">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</param>
      <param name="item">추가할 항목입니다.</param>
      <exception cref="T:System.NotSupportedException">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우
또는
관련 형식이 컬렉션이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />가 <see langword="null" />을 반환하는 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>제공된 키 및 항목 값을 이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />와 관련된 형식의 인스턴스에 추가합니다.</summary>
      <param name="instance">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</param>
      <param name="key">추가할 항목에 대한 사전 키입니다.</param>
      <param name="item">추가할 항목 값입니다.</param>
      <exception cref="T:System.NotSupportedException">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우
또는
관련 형식이 사전이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" />가 <see langword="null" />을 반환하는 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 대해 생성자가 시작한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 개체 인스턴스를 만듭니다.</summary>
      <param name="arguments">인스턴스에 대해 <see langword="x:ConstructorArgs" />를 제공하는 개체 배열입니다. <see langword="null" />를 필요로 하지 않거나 사용하지 않는 형식의 경우 <see langword="x:ConstructorArgs" />일 수 있습니다.</param>
      <returns>이 <see cref="T:System.Xaml.XamlType" />에 대해 생성자가 시작한 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />을 기반으로 만들어진 인스턴스입니다.</returns>
      <exception cref="T:System.MissingMethodException">생성자를 확인할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>컬렉션 또는 사전과 관련된 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 관련 <see langword="Add" /> 메서드를 반환합니다.</summary>
      <param name="contentType">
        <see langword="Add" /> 메서드가 사용하는 항목 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</param>
      <returns>
        <see langword="Add" /> 메서드에 대한 CLR <see cref="T:System.Reflection.MethodInfo" /> 정보이거나 null입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>항목을 열거할 수 있는 메서드를 나타내는 개체를 반환합니다.</summary>
      <returns>열거자 메서드에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>항목 집합을 나타내는 <see cref="T:System.Collections.IEnumerator" /> 개체를 반환합니다.</summary>
      <param name="instance">이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 생성하는 데 사용되는 <see cref="T:System.Xaml.XamlType" />으로 지정된 형식의 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 개체이거나 <see langword="null" />입니다.</returns>
      <exception cref="T:System.NotSupportedException">알 수 없는 <see cref="T:System.Xaml.XamlType" />을 기준으로 하는 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대해 이 메서드를 호출한 경우
또는
관련 형식이 컬렉션 또는 사전이 아닌 경우 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 이 메서드를 호출했습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />가 구현된 <see cref="T:System.Windows.Markup.MarkupExtension" />을 호출할 때 사용할 처리기를 가져옵니다.</summary>
      <returns>이 경우를 처리하는 처리기 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />가 CLR 구현된 <see cref="T:System.ComponentModel.TypeConverter" />를 호출할 때 사용할 처리기를 가져옵니다.</summary>
      <returns>이 경우를 처리하는 처리기 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 나타내는 정적 값을 제공합니다.</summary>
      <returns>알 수 없으며 완전히 구현되지 않은 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />를 나타내는 정적 값입니다.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>이름 및 네임스페이스로 XAML 형식을 지정하기 위한 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>이름과 네임스페이스 문자열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlNamespace">name이 들어 있는 XAML 네임스페이스입니다.</param>
      <param name="name">
        <see cref="T:System.Xaml.Schema.XamlTypeName" />을 만들 형식의 이름입니다.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>이름과 네임스페이스 문자열 및 형식 인수 배열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlNamespace">
        <paramref name="name" />이 들어 있는 XAML 네임스페이스입니다.</param>
      <param name="name">
        <see cref="T:System.Xaml.Schema.XamlTypeName" />을 만들 형식의 이름입니다.</param>
      <param name="typeArguments">각각 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 나타내는 형식 인수의 배열입니다.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>기존 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlType">기존 <see cref="T:System.Xaml.XamlType" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 생성하는 데 사용된 이름을 가져옵니다.</summary>
      <returns>형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 생성하는 데 사용된 XAML 네임스페이스 식별자를 가져옵니다.</summary>
      <returns>XML 네임스페이스 식별자입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>태그 접두사를 네임스페이스로 확인할 수 있는 형식 이름 및 개체를 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeName">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 만들 형식 이름입니다.</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <returns>만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">문자열을 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>태그 접두사를 네임스페이스로 확인할 수 있는 개체 및 여러 형식 이름을 지정할 수 있는 문자열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeNameList">여러 형식이 들어 있는 문자열입니다.</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <returns>만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.FormatException">문자열을 구문 분석할 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 해당하는 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 값을 해당하는 문자열 표현으로 변환합니다. 이 문자열 표현은 여러 형식의 개체 요소 사용을 위한 태그 구문에서 사용할 수 있습니다.</summary>
      <param name="typeNameList">형식 목록입니다.</param>
      <param name="prefixLookup">접두사 조회를 위한 서비스 참조입니다.</param>
      <returns>모든 형식 결과의 연결된 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> 또는 <paramref name="typeNameList" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />의 값을 해당하는 문자열 표현으로 변환합니다. 이 문자열 표현은 형식의 개체 요소 사용을 위한 태그 구문에서 사용할 수 있습니다.</summary>
      <param name="prefixLookup">접두사 조회를 위한 서비스 참조입니다.</param>
      <returns>접두사가 있는 사용 문자열입니다.</returns>
      <exception cref="T:System.InvalidOperationException">이 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />에 대한 <see cref="T:System.Xaml.Schema.XamlTypeName" />가 <see langword="null" />인 경우
또는
<see cref="P:System.Xaml.Schema.XamlTypeName.Name" />가 잘못된 경우
또는
접두사를 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>태그 접두사를 네임스페이스로 확인할 수 있는 형식 이름 및 개체를 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeName">
        <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 만들 형식 이름입니다.</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <param name="result">반환 값이 <see langword="true" />이면 만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 포함하는 out 매개 변수입니다.</param>
      <returns>구문 분석 작업에 성공하고 <paramref name="result" />에 유용한 값이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>태그 접두사를 네임스페이스로 확인할 수 있는 개체 및 여러 형식 이름을 지정할 수 있는 문자열을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeName" /> 값을 제공합니다.</summary>
      <param name="typeNameList">여러 형식이 들어 있는 문자열입니다.</param>
      <param name="namespaceResolver">
        <see cref="T:System.Xaml.IXamlNamespaceResolver" />를 구현하는 개체 또는 서비스 공급자입니다.</param>
      <param name="result">반환 값이 <see langword="true" />이면 만든 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 포함하는 out 매개 변수입니다.</param>
      <returns>구문 분석 작업에 성공하고 <paramref name="result" />에 유용한 값이 포함되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> 또는 <paramref name="namespaceResolver" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeName" />을 생성하는 데 사용되는 형식 인수를 가져옵니다.</summary>
      <returns>형식 인수입니다(있을 경우). null일 수 있습니다.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>
        <see cref="T:System.Xaml.XamlType" /> 개체를 형식 이름을 나타내는 문자열로 변환하거나 이러한 문자열을 해당 개체로 변환합니다. 이 기능은 <see cref="T:System.Windows.Markup.PropertyDefinition" />을 통한 태그 정의별 XAML 확장성에 사용됩니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 지정된 형식의 개체를 <see cref="T:System.Xaml.XamlType" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="sourceType">변환을 위해 확인하는 형식입니다.</param>
      <returns>이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlType" />의 인스턴스를 지정한 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="destinationType">변환을 위해 확인하는 형식입니다.</param>
      <returns>이 변환기가 작업을 수행할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 컨텍스트를 사용하여 지정한 개체를 <see cref="T:System.Xaml.XamlType" />로 변환하려고 합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlType" />를 지정한 형식으로 변환하려고 합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <returns>변환된 개체입니다.</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>최종 대상 형식이 아닌 입력을 기준으로 XAML의 초기화 값이나 serialization 값을 생성하는 기술에 대해 공통 API 영역을 제공합니다. 여기에는 태그 확장과 형식 변환기가 포함됩니다.</summary>
      <typeparam name="TConverterBase">이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이 나타내는 특정 변환기에 대한 CLR 기본 클래스입니다. 일반적으로 <see cref="T:System.ComponentModel.TypeConverter" />, <see cref="T:System.Windows.Markup.MarkupExtension" />, <see cref="T:System.Windows.Markup.ValueSerializer" /> 중 하나입니다.</typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 구현하는 변환기와 <see cref="T:System.Type" />의 대상 형식을 기반으로 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="converterType">변환기 동작을 구현하는 <see cref="T:System.Type" />입니다.</param>
      <param name="targetType">
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 구현하는 변환기, <see cref="T:System.Type" />의 대상 형식 및 문자열 이름을 기반으로 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="converterType">변환기 동작을 구현하는 <see cref="T:System.Type" />입니다.</param>
      <param name="targetType">
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</param>
      <param name="name">문자열 이름입니다.</param>
      <exception cref="T:System.ArgumentException">매개 변수 셋 모두 <see langword="null" />입니다. 적어도 하나는 null이 아니어야 합니다.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>변환기 구현의 생성된 인스턴스를 가져옵니다.</summary>
      <returns>변환기 구현의 생성된 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>변환기 동작을 구현하는 클래스에 대한 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>변환기 동작을 구현하는 클래스에 대한 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>변환기 구현의 인스턴스를 반환합니다.</summary>
      <returns>변환기 구현의 인스턴스이거나 <see langword="null" />입니다.</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">변환기가 올바른 기본 형식을 구현하지 않았습니다.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 이 인스턴스와 지정한 개체의 값이 같은지 여부를 확인합니다. 이 개체는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이기도 해야 합니다.</summary>
      <param name="obj">비교할 개체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="obj" />이고 이 인스턴스와 같은 값을 가지면 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 이 인스턴스와 다른 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체의 값이 같은지 여부를 확인합니다.</summary>
      <param name="other">비교할 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="other" />이고 이 인스턴스와 같은 값을 가지면 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 해시 코드를 반환합니다.</summary>
      <returns>정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 문자열 이름을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 문자열 이름입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>지정된 두 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" />의 값이 <paramref name="converter1" />의 값과 같으면 <paramref name="converter2" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>지정된 두 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="converter1">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <param name="converter2">
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="converter1" /> 값이 <paramref name="converter2" /> 값과 다르면 <see langword="true" />이고, 같으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" />의 대상 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>이 <see cref="T:System.String" />을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>읽기 및 쓰기를 서로 다른 스레드로 분할할 수 있는 이중 버퍼링된 <see cref="T:System.Xaml.XamlReader" />를 구현합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>
        <see cref="T:System.Xaml.XamlBackgroundReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="wrappedReader">이 <see cref="T:System.Xaml.XamlReader" />의 기반이 되는 <see cref="T:System.Xaml.XamlBackgroundReader" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlBackgroundReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>줄 정보를 사용할 수 있는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>판독기 위치가 파일 끝인지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns>위치가 파일의 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>보고할 줄 번호를 가져옵니다.</summary>
      <returns>보고할 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>보고할 줄 위치를 가져옵니다.</summary>
      <returns>보고할 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있는 경우 판독기 위치에서 현재 멤버를 가져옵니다.</summary>
      <returns>현재 멤버이거나, 위치가 멤버에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>현재 노드에서 XAML 네임스페이스를 가져옵니다.</summary>
      <returns>사용할 수 있으면 XAML 네임스페이스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>노드를 사용할 수 있는 경우 소스에서 다음 XAML 노드를 제공합니다.</summary>
      <returns>노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>정보 집합에 대한 스키마 컨텍스트 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns>정보 집합에 대한 스키마 컨텍스트 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>
        <see cref="T:System.Threading.Thread" />의 명명된 스레드를 처리하는 새 <see cref="T:System.Threading.ParameterizedThreadStart" />(<see cref="T:System.Xaml.XamlReader" />에서 생성됨)를 만들고 시작합니다.</summary>
      <exception cref="T:System.InvalidOperationException">스레드가 이미 시작되었습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>
        <see cref="T:System.Threading.Thread" />의 명명된 스레드를 처리하는 새 <see cref="T:System.Threading.ParameterizedThreadStart" />(<see cref="T:System.Xaml.XamlReader" />에서 생성됨)를 만들고 시작합니다. 스레드 이름을 매개 변수로 지정합니다.</summary>
      <param name="threadName">스레드의 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">스레드가 이미 시작되었습니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 현재 판독기 위치가 개체에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>현재 노드의 값을 가져옵니다.</summary>
      <returns>현재 노드의 값이거나, 현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>지연된 콘텐츠를 로드하고 반환하는 XAML 판독기 동작을 나타냅니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlDeferringLoader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 및 서비스 공급자에서 필요한 특정 서비스를 기반으로 XAML 콘텐츠를 지연된 모드로 로드합니다.</summary>
      <param name="xamlReader">
        <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" /> 호출에 대해 반환되는 시작 판독기입니다.</param>
      <param name="serviceProvider">필요한 서비스의 서비스 공급자입니다.</param>
      <returns>입력 <see cref="T:System.Xaml.XamlReader" />에서 생성된 루트 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>지연된 로드에 대한 값을 커밋합니다.</summary>
      <param name="value">지연된 로드에 대해 커밋할 입력 값입니다.</param>
      <param name="serviceProvider">필요한 서비스의 서비스 공급자입니다.</param>
      <returns>지연된 값을 XAML 노드 정보로 가져오는 데 사용할 수 있는 XAML 판독기입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>멤버가 XAML 지시문이기도 한 경우 멤버의 XAML 형식 시스템 식별자를 제공합니다. 멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기는 <see cref="T:System.Xaml.XamlDirective" /> 식별자를 사용합니다. XAML 판독기가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 위치하고 <see cref="P:System.Xaml.XamlMember.IsDirective" />가 <see langword="true" />인 경우 식별자가 사용됩니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>
        <see cref="T:System.Xaml.XamlDirective" />의 가능한 각 사례 값에 대한 값을 지정하여 <see cref="T:System.Xaml.XamlDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xamlNamespaces">이 <see cref="T:System.Xaml.XamlDirective" />가 있을 수 있는 XAML 네임스페이스 집합으로, 식별자 문자열의 열거 가능 집합으로 전달됩니다.</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" />의 식별 이름입니다.</param>
      <param name="xamlType">
        <see cref="T:System.Xaml.XamlDirective" />를 지원하는 XAML 형식입니다.</param>
      <param name="typeConverter">이 <see cref="T:System.Xaml.XamlDirective" />가 텍스트 구문 변환에 사용하는 형식 변환기입니다.</param>
      <param name="allowedLocation">
        <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> 열거형의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>이름 및 단일 XAML 네임스페이스에 대한 값을 지정하여 <see cref="T:System.Xaml.XamlDirective" /> 클래스의 새 인스턴스를 초기화합니다. <see cref="P:System.Xaml.XamlMember.IsUnknown" />이 지시문에 대해 <see langword="true" />를 보고하도록 하려는 경우에만 이 시그니처를 사용하십시오.</summary>
      <param name="xamlNamespace">이 <see cref="T:System.Xaml.XamlDirective" />가 있을 수 있는 기본 XAML 네임스페이스입니다.</param>
      <param name="name">
        <see cref="T:System.Xaml.XamlDirective" />의 식별 이름입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>지시문을 지정할 수 있는 XAML 노드 형식을 지정하는 값을 가져옵니다.</summary>
      <returns>열거형 값입니다. 기본값은 열거형 기본값인 <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>이 개체에 대한 해시 코드를 반환합니다.</summary>
      <returns>정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</summary>
      <returns>문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>XAML 선언된 개체의 지연된 로드 시 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 반환합니다. 이 목록은 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 멤버를 보고합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />와 연관된 <see cref="T:System.Xaml.XamlDirective" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 <see cref="T:System.Xaml.XamlMember" /> 정보입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</summary>
      <returns>항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />가 이벤트를 나타내는지 여부를 반환합니다.</summary>
      <returns>항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns>항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />가 public <see langword="get" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlDirective" />가 확인할 수 없는 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />가 의도된 쓰기 전용 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns>항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />가 public <see langword="set" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <returns>이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />와 연관된 형식 변환기 구현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />와 연관된 <see langword="get" /> 접근자를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 리플렉션 <see cref="T:System.Xaml.XamlDirective" />를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />와 연관된 <see langword="set" /> 접근자를 반환합니다. 이 구현은 항상 <see langword="null" />을 반환합니다.</summary>
      <returns>항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>이 <see cref="T:System.Xaml.XamlDirective" />의 문자열 표현을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlDirective" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>XAML 작성기가 중복된 멤버에 대한 값을 같은 개체 노드에 쓰려고 할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>보고할 관련 멤버 및 형식 정보를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="member">보고할 XAML 멤버 식별자입니다.</param>
      <param name="type">부모 형식으로 보고할 XAML 형식 식별자입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>중복으로 보고할 속성에 대한 XAML 멤버 식별자를 가져오거나 설정합니다.</summary>
      <returns>보고할 <see cref="T:System.Xaml.XamlMember" /> 개체(XAML 멤버 식별자)입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlDuplicateMemberException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>부모 형식으로 보고할 XAML 형식 식별자를 가져오거나 설정합니다.</summary>
      <returns>부모 형식으로 보고할 <see cref="T:System.Xaml.XamlType" /> 개체(XAML 형식 식별자)입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>일반 XAML 판독기 또는 XAML 작성기 예외에 대해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스는 오류를 설명하는 시스템 제공 메시지를 포함합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스는 오류를 설명하는 지정된 메시지를 포함합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 따라 지역화되었는지 확인해야 합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스에는 지정된 오류 메시지와 이 예외의 원인인 내부 예외에 대한 참조가 포함됩니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 따라 지역화되었는지 확인해야 합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xaml.XamlException" /> 클래스의 새 인스턴스를 초기화합니다. 인스턴스는 지정된 오류 메시지, 내부 예외 및 줄 정보를 포함합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 따라 지역화되었는지 확인해야 합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다.</param>
      <param name="lineNumber">디버깅 또는 줄 정보 소비자에 보고할 줄 번호입니다.</param>
      <param name="linePosition">디버깅 또는 줄 정보 소비자에 보고할 줄 위치입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />를 구현하고 줄 정보 데이터에 대한 serialization 지원을 제공합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>예외가 보고하는 XAML 텍스트 줄 정보의 줄 번호 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>XAML 텍스트 줄 정보의 줄 번호 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>예외가 보고하는 XAML 텍스트 줄 정보의 줄 위치 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>XAML 텍스트 줄 정보의 줄 위치 구성 요소입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>예외 메시지를 가져오거나 설정하며, 줄 정보를 사용할 수 있는 경우 메시지에 줄 정보를 추가합니다.</summary>
      <returns>추가된 줄 정보가 포함된 예외 메시지입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>XAML 읽기 및 XAML 쓰기 중에 발생하는 내부 불일치에 대해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlInternalException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>XAML 태그 또는 XAML 형식 프로그래밍에 유용한 문자열이나 개체를 제공하는 상수를 정의합니다. 이러한 문자열이나 개체는 XAML 언어 개념, .NET Framework XAML 서비스의 XAML 언어 개념 구현 또는 둘 다와 관련이 있습니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>.NET Framework XAML 서비스에 정의되어 있는 각 <see cref="T:System.Xaml.XamlDirective" /> 식별자의 읽기 전용 제네릭 컬렉션을 가져옵니다.</summary>
      <returns>.NET Framework XAML 서비스에 정의되어 있는 각 <see cref="T:System.Xaml.XamlDirective" /> 식별자의 읽기 전용 제네릭 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>.NET Framework XAML 서비스에 정의되어 있는 XAML 언어 내장 항목 또는 내장 항목의 별칭과 일치하는 각 <see cref="T:System.Xaml.XamlType" /> 값의 읽기 전용 제네릭 컬렉션을 가져옵니다.</summary>
      <returns>XAML 언어 내장 항목과 일치하는 각 <see cref="T:System.Xaml.XamlType" />의 읽기 전용 제네릭 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>팩터리 메서드 또는 제네릭 사용의 <see langword="Arguments" />에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>팩터리 메서드 또는 제네릭 사용의 <see langword="Arguments" />에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>
        <see langword="Array" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Array" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>
        <see langword="AsyncRecords" /> 의사 멤버에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>
        <see langword="AsyncRecords" /> 의사 멤버에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>XML에서 <see langword="base" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XML에 있는 <see langword="base" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>
        <see langword="Boolean" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Boolean" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>
        <see langword="Byte" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Byte" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>
        <see langword="Char" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Char" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>XAML의 <see langword="Class" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Class" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>XAML의 <see langword="ClassAttributes" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="ClassAttributes" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>XAML의 <see langword="ClassModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="ClassModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>[MS-XAML]에서 설명한 <see langword="Code" />에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>[MS-XAML]에서 설명한 <see langword="Code" />에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>이벤트를 처리기에 연결하기 위한 연결 지점을 식별하는 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>이벤트를 처리기에 연결하기 위한 연결 지점을 식별하는 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>
        <see langword="Decimal" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Decimal" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>
        <see langword="Double" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Double" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>XAML에 대한 팩터리 메서드를 식별하는 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML에 대한 팩터리 메서드를 식별하는 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>XAML의 <see langword="FieldModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="FieldModifier" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>XAML의 <see langword="Initialization" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Initialization" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>
        <see langword="Int16" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Int16" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>
        <see langword="Int32" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Int32" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>
        <see langword="Int64" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Int64" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>XAML의 <see langword="Items" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Items" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>XAML의 <see langword="Key" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Key" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>XML에서 <see langword="lang" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XML에 있는 <see langword="lang" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>
        <see cref="T:System.Xaml.XamlType" />의 항목 형식인 형식에 대한 <see cref="P:System.Xaml.XamlLanguage.Members" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlType" />의 항목 형식인 형식에 대한 <see cref="P:System.Xaml.XamlLanguage.Members" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>XAML에서 <see langword="Members" /> 개념에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML에 있는 <see langword="Members" /> 개념에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>XAML의 <see langword="Name" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Name" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>
        <see langword="Null" /> 또는 <see langword="NullExtension" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> 에 대 한 합니다 <see langword="Null" /> / <see langword="NullExtension" /> XAML 언어 내장 항목입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>
        <see langword="Object" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Object" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>XAML의 <see langword="PositionalParameters" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="PositionalParameters" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>XAML에서 <see langword="Property" /> 개념에 대한 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns>XAML에 있는 <see langword="Property" /> 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>XAML에 대한 <see langword="Reference" />를 나타내는 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>XAML에 대한 <see langword="Reference" />를 나타내는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>XAML의 <see langword="Shared" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Shared" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>
        <see langword="Single" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Single" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>XML에서 <see langword="space" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XML에 있는 <see langword="space" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>
        <see langword="Static" />/<see langword="StaticExtension" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> 에 대 한 합니다 <see langword="Static" /> / <see langword="StaticExtension" /> XAML 언어 내장 항목입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>
        <see langword="String" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="String" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>XAML의 <see langword="Subclass" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Subclass" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>XAML 프로세스가 해당 모드를 지원하는 경우 XAML을 비동기적으로 로드할 수 있도록 해주는 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML을 비동기적으로 로드할 수 있도록 해주는 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>XAML 언어에서 <see langword="TimeSpan" /> 개념에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="TimeSpan" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>
        <see langword="Type" />/<see langword="TypeExtension" /> XAML 언어 내장 항목에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> 에 대 한 합니다 <see langword="Type" /> / <see langword="TypeExtension" /> XAML 언어 내장 항목입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>XAML의 <see langword="TypeArguments" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="TypeArguments" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>XAML의 <see langword="Uid" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="Uid" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>XAML의 <see langword="UnknownContent" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />를 가져옵니다.</summary>
      <returns>XAML의 <see langword="UnknownContent" /> 지시문에 대한 <see cref="T:System.Xaml.XamlDirective" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>
        <see langword="Uri" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="Uri" /> XAML 언어 개념에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>XAML(2006) 언어 네임스페이스를 식별하는 문자열의 문자열 값을 가져옵니다. 이 네임스페이스는 [MS-XAML] Section 5.1.1에 정의된 XAML(2006) "x" 접두사가 붙은 네임스페이스에 해당합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>XAML에 대한 네임스페이스 식별자 컬렉션을 가져옵니다.</summary>
      <returns>XAML에 대한 네임스페이스 식별자 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>XAML에서 <see langword="XData" /> 블록을 지원하는 XAML 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>
        <see langword="XData" /> 블록을 지원하는 XAML 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다. 참조 [MS XAML] Section 5.2.23합니다.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>XML(1998) 언어 네임스페이스를 식별하는 문자열의 문자열 값을 가져옵니다. 이 네임스페이스는 [MS-XAML] Section 5.1.2에 언급된 XML "xml" 접두사가 붙은 네임스페이스에 해당합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>XML에 대한 네임스페이스 식별자 컬렉션을 가져옵니다.</summary>
      <returns>XML에 대한 네임스페이스 식별자 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>XAML 형식의 멤버에 대해 XAML 형식 시스템 식별자를 제공합니다. 멤버 노드를 처리하는 동안 XAML 판독기 및 XAML 작성기가 사용하는 식별자(XAML 판독기가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 위치한 경우)이며, 일반 XAML 형식 시스템 논리에도 사용됩니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.EventInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventInfo">이벤트 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.EventInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="eventInfo">이벤트 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.PropertyInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyInfo">속성 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>리플렉션 <see cref="T:System.Xaml.XamlMember" /> 및 <see cref="T:System.Reflection.PropertyInfo" />를 사용하여 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="propertyInfo">속성 멤버를 나타내는 CLR 형식 시스템 <see cref="T:System.Reflection.PropertyInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>연결 가능한 속성을 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attachablePropertyName">연결 가능한 속성의 문자열 이름입니다.</param>
      <param name="getter">연결 가능한 멤버의 지원을 구현하는 <see langword="get" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="setter">연결 가능한 멤버의 지원을 구현하는 <see langword="set" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>연결 가능한 속성을 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="attachablePropertyName">연결 가능한 속성의 문자열 이름입니다.</param>
      <param name="getter">연결 가능한 멤버의 지원을 구현하는 <see langword="get" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="setter">연결 가능한 멤버의 지원을 구현하는 <see langword="set" /> 접근자에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>연결 가능한 이벤트를 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attachableEventName">연결 가능한 이벤트의 문자열 이름입니다.</param>
      <param name="adder">연결 가능한 멤버의 지원을 구현하는 처리기 <see langword="Add" /> 메서드에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>연결 가능한 이벤트를 나타내는 <see cref="T:System.Xaml.XamlMember" />에 대해 <see cref="T:System.Xaml.XamlMember" /> 클래스의 새 인스턴스를 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 정보와 함께 초기화합니다.</summary>
      <param name="attachableEventName">연결 가능한 이벤트의 문자열 이름입니다.</param>
      <param name="adder">연결 가능한 멤버의 지원을 구현하는 처리기 <see langword="Add" /> 메서드에 대한 CLR 형식 시스템 <see cref="T:System.Reflection.MethodInfo" />입니다.</param>
      <param name="schemaContext">멤버를 정규화하는 <see cref="T:System.Xaml.XamlSchemaContext" /> 컨텍스트입니다.</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 런타임 호출을 처리하는 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>문자열 이름을 사용하고 <see cref="T:System.Xaml.XamlMember" /> 정보를 선언하여 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다. 이 서명을 사용하여 생성된 <see cref="T:System.Xaml.XamlMember" />에는 중요한 제한이 있습니다.</summary>
      <param name="name">멤버의 문자열 이름입니다.</param>
      <param name="declaringType">선언 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다.</param>
      <param name="isAttachable">멤버가 연결 가능하다는 것을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="declaringType" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>이 <see cref="T:System.Xaml.XamlType" />와 연관된 멤버를 선언하는 형식의 <see cref="T:System.Xaml.XamlMember" />을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />와 연관된 멤버를 선언하는 형식의 <see cref="T:System.Xaml.XamlMember" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</summary>
      <returns>제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 포함된 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 가져옵니다. 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 경우 해당 멤버를 보고합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="obj">이 개체와 비교할 개체입니다.</param>
      <returns>현재 개체가 <paramref name="obj" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="other">이 개체와 비교할 개체입니다.</param>
      <returns>현재 개체가 <paramref name="other" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>해당 개체의 해시 코드를 반환합니다.</summary>
      <returns>정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>이 XAML 멤버가 있을 수 있는 XAML 네임스페이스의 목록을 반환합니다.</summary>
      <returns>문자열로 제공되는 XAML 네임스페이스 식별자 목록입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" /> 구현을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" /> 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 연결 가능한 멤버인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 연결 가능한 멤버이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 XAML 지시문인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 XAML 지시문이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 이벤트 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlMember.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 읽기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 읽기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="get" /> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="true" /> 접근자를 나타내면 <see langword="get" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>멤버가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>멤버를 확인할 수 없으면 <see langword="true" />이고, 멤버를 확인할 수 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="set" /> 접근자가 있는 멤버를 나타내는지 여부를 표시하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 호출 가능한 public <see langword="true" /> 접근자를 나타내면 <see langword="set" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</summary>
      <returns>제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록을 반환합니다. 이 목록의 항목은 초기화 순서에 대한 종속성 관계가 이 <see cref="T:System.Xaml.XamlMember" />를 기준으로 존재하는 멤버를 보고합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> 개체의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />과 연결된 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />에 대한 <see cref="T:System.Xaml.XamlMember" /> 정보이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 앰비언트 속성으로 보고되는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />를 앰비언트 속성으로 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타내는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 이벤트를 나타낸다고 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 의도된 읽기 전용 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" />를 의도된 읽기 전용 속성으로 보고하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="get" /> 접근자가 있는 속성을 나타내는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="true" />접근자가 있는 속성임을 나타내면 <see langword="get" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 형식 및 멤버 확인에 사용되는 지원 시스템에서 확인될 수 없는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 확인할 수 없는 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="set" /> 접근자는 있지만 public <see langword="get" /> 접근자는 없는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 전용 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />가 public <see langword="set" /> 접근자가 있는 멤버를 나타내는지 여부를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />가 쓰기 가능한 멤버를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters">
      <summary>태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 반환합니다.</summary>
      <returns>여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" />가 있을 수 있는 형식입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <returns>이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />와 연관된 형식 변환기 구현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />와 연관된 <see langword="get" /> 접근자를 반환합니다.</summary>
      <returns>연관된 <see langword="get" /> 접근자에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Reflection.MemberInfo" />와 연관된 CLR 형식 시스템 <see cref="T:System.Xaml.XamlMember" /> 개체이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />와 연관된 <see langword="set" /> 접근자를 반환합니다.</summary>
      <returns>연관된 <see langword="set" /> 접근자에 대한 <see cref="T:System.Reflection.MethodInfo" />이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />와 연관된 값 serializer 구현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 인스턴스이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters">
      <summary>태그 확장에 대해 여는 대괄호와 닫는 대괄호 문자를 정의합니다.</summary>
      <returns>여는 대괄호와 닫는 대괄호 문자를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />를 선언하는 <see langword="xamlName" /> 이름 문자열을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />를 선언하는 <see langword="xamlName" /> 이름 문자열입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>지정된 두 <see cref="T:System.Xaml.XamlMember" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" />의 값이 <paramref name="xamlMember1" />의 값과 같으면 <paramref name="xamlMember2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>지정된 두 <see cref="T:System.Xaml.XamlMember" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="xamlMember1">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlMember2">
        <see cref="T:System.Xaml.XamlMember" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="xamlMember1" />의 값이 <paramref name="xamlMember2" />의 값과 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />에 대한 기본 XAML 네임스페이스를 식별하는 단일 XAML 네임스페이스 URI를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />에 대한 기본 XML 네임스페이스 식별자로서, 문자열로 되어 있습니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>비주얼 디자이너에서 멤버를 어떻게 처리해야 하는지를 나타내는 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 열거형의 값입니다. 기본값은 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>
        <see cref="T:System.Xaml.XamlType" />가 있을 수 있는 형식의 <see cref="T:System.Xaml.XamlMember" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" />가 있을 수 있는 형식입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />의 문자열 표현을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>이 멤버가 사용하는 형식의 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>XAML 선언된 개체의 형식 변환 생성에 사용될 수 있는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</summary>
      <returns>제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.ComponentModel.TypeConverter" /> 값입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>
        <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.PropertyInfo" /> 또는 <see cref="T:System.Reflection.MethodInfo" />에 의해 생성된 멤버에 사용할 수 있는 CLR 형식 시스템 <see cref="T:System.Reflection.EventInfo" />를 가져옵니다.</summary>
      <returns>초기 생성자 매개 변수에서 캐스트된 CLR 형식 시스템 <see cref="T:System.Reflection.MemberInfo" /> 정보입니다. <see cref="T:System.Xaml.XamlMember" /> 시그니처로 생성된 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>XAML 선언된 개체의 값 serialization에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 가져옵니다.</summary>
      <returns>제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 포함된 <see cref="T:System.Windows.Markup.ValueSerializer" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>지연된 방식으로 XAML 노드를 작성하는 등의 시나리오에 사용할 수 있는 XAML 노드의 목록을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>제공된 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlNodeList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext">노드 작업에 사용할 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>제공된 스키마 컨텍스트 및 목록 크기를 사용하여 <see cref="T:System.Xaml.XamlNodeList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext">노드 작업에 사용할 스키마 컨텍스트입니다.</param>
      <param name="size">목록의 의도한 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>이 목록의 항목을 지웁니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>이 <see cref="T:System.Xaml.XamlNodeList" />의 노드 수를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlNodeList" />의 노드 수입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>XAML 판독기 구현 대리자를 반환합니다.</summary>
      <returns>XAML 판독기 구현 대리자입니다.</returns>
      <exception cref="T:System.Xaml.XamlException">
        <see cref="T:System.Xaml.XamlNodeList" />가 여전히 쓰기 모드에 있습니다.
또는
노드 목록에 사용되는 작성기에 스키마 컨텍스트가 없습니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>연관된 XAML 작성기를 가져옵니다.</summary>
      <returns>연관된 XAML 작성기입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>노드를 쓰고 다시 읽기 위한 버퍼를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>제공된 XAML 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlNodeQueue" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext">노드 작업에 사용할 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>
        <see cref="T:System.Xaml.XamlNodeQueue" />의 노드 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeQueue" />의 노드 수입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>이 <see cref="T:System.Xaml.XamlNodeQueue" />에 노드가 들어 있지 않은지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlNodeQueue" />에 노드가 들어 있지 않으면 <see langword="true" />이고, 이 <see cref="T:System.Xaml.XamlNodeQueue" />에 노드가 들어 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>XAML 판독기 구현 대리자를 가져옵니다.</summary>
      <returns>XAML 판독기 구현 대리자입니다.</returns>
      <exception cref="T:System.Xaml.XamlException">노드 목록에 사용되는 XAML 작성기에 유효한 XAML 스키마 컨텍스트가 없습니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>연관된 XAML 작성기를 가져옵니다.</summary>
      <returns>연관된 XAML 작성기입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>XAML 판독기가 현재 처리 중인 노드의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>판독기가 멤버 노드의 맨 끝에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>판독기가 개체 노드의 맨 끝에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>판독기가 개체 노드 내에 있으며, 지정된 개체 값 대신 기본값 또는 암시적인 값을 작성합니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>판독기가 XML 네임스페이스 선언 안에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>판독기가 실제 노드에 있지 않습니다. 예를 들어 판독기가 파일의 끝에 있을 수 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>판독기가 멤버 노드의 맨 처음에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>판독기가 개체 노드의 맨 처음에 있습니다.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>판독기가 노드 안에 있으며 값을 처리하는 중입니다.</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>개체 초기화 및 속성 설정 시퀀스에 삽입할 수 있는 콜백용 데이터를 제공합니다. 그러면 <see cref="T:System.Xaml.XamlObjectWriter" />에서 생성한 개체 그래프에 영향을 줍니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance">이벤트 데이터와 관련된 개체 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLineNumber">
      <summary>관련 개체 인스턴스의 줄 번호를 가져오거나 설정합니다.</summary>
      <returns>요소의 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.ElementLinePosition">
      <summary>관련 개체 인스턴스의 줄 위치를 가져오거나 설정합니다.</summary>
      <returns>요소의 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>이벤트 데이터와 관련된 개체 인스턴스를 가져옵니다.</summary>
      <returns>이벤트 데이터와 관련된 개체 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.SourceBamlUri">
      <summary>관련 개체 인스턴스의 BAML URI를 가져오거나 설정합니다.</summary>
      <returns>관련 개체 인스턴스의 BAML URI입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>개체 그래프를 읽고 XAML 노드 스트림을 생성하는 <see cref="T:System.Xaml.XamlReader" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance">읽을 개체 트리/개체 그래프의 루트입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>지정된 판독기 설정을 사용하여 <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance">읽을 개체 트리의 루트입니다.</param>
      <param name="settings">설정 개체입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>지정된 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance">읽을 개체 트리의 루트입니다.</param>
      <param name="schemaContext">사용할 판독기에 대한 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>지정된 스키마 컨텍스트 및 판독기 설정을 사용하여 <see cref="T:System.Xaml.XamlObjectReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance">읽을 개체 트리의 루트입니다.</param>
      <param name="schemaContext">사용할 판독기에 대한 스키마 컨텍스트입니다.</param>
      <param name="settings">설정 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>현재 판독기 위치에서 사용할 수 있는 개체 인스턴스를 가져옵니다.</summary>
      <returns>현재 판독기 위치에 있는 개체 인스턴스이며, 판독기 위치가 개체에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>판독기 위치가 파일 끝인지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns>판독기 위치가 파일의 끝이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>판독기 위치가 <see cref="T:System.Xaml.XamlMember" />에 있는 경우 판독기 위치에서 현재 <see cref="F:System.Xaml.XamlNodeType.StartMember" />를 가져옵니다.</summary>
      <returns>현재 멤버이며, 판독기 위치가 멤버에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>현재 판독기 위치에서 XAML 네임스페이스 선언을 가져옵니다.</summary>
      <returns>판독기가 <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />에 위치해 있으면 XAML 네임스페이스 선언이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>현재 노드의 형식입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>노드를 사용할 수 있는 경우 소스 개체 그래프에서 다음 XAML 노드를 제공합니다.</summary>
      <returns>노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>정보 집합에 대한 스키마 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns>정보 집합에 대한 스키마 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>현재 판독기 위치에 있는 개체의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>현재 판독기 위치에 있는 개체의 <see cref="T:System.Xaml.XamlType" />이며, 위치가 개체에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>현재 판독기 위치에 노드의 값을 가져옵니다.</summary>
      <returns>현재 노드의 값이며, 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>여러 <see cref="T:System.Xaml.XamlObjectReader" /> 내부 도우미 API에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 오류를 설명하는 시스템 제공 메시지로 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlObjectReaderException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReader" />에 대한 처리 규칙 또는 옵션 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlObjectReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>컨텍스트에 대해 연관된 <see cref="T:System.Xaml.XamlObjectReader" />를 사용하는 작성기가 디자이너 설정을 사용하여 콘텐츠를 명시적으로 작성해야 하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Xaml.XamlMember.IsWritePublic" />이 <see langword="true" />를 보고하는 경우에 이 컨텍스트를 사용하는 작성기가 디자이너 설정을 사용하여 출력 콘텐츠를 작성해야 한다는 것을 지정하려면 <see langword="false" />이고, 디자이너 설정을 무시해야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>소스 XAML 노드 스트림에서 개체 그래프를 만듭니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />에서 사용하는 XAML 스키마 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext">쓰기용 노드를 제공하는 XAML 판독기와 공유되는 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> 및 해당 설정에서 사용하는 컨텍스트를 사용하여 <see cref="T:System.Xaml.XamlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="schemaContext">쓰기용 노드를 제공하는 XAML 판독기와 공유되는 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlObjectWriter" /> 동작 및 출력에 대한 특정 옵션을 지정하는 설정 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>가능한 모든 프레임을 다시 설정하고 개체 그래프를 지웁니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>이 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 메서드를 호출합니다.</summary>
      <param name="value">보고할 개체입니다. 개체는 처리기를 호출할 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />로 패키지됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>이 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 메서드를 호출합니다.</summary>
      <param name="value">보고할 개체입니다. 값은 처리기를 호출할 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />로 패키지됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>이 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 참조 메서드를 호출합니다.</summary>
      <param name="value">보고할 개체입니다. 이것은 처리기가 호출될 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />로 패키지됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>이 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" />에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Xaml.XamlObjectWriter" /> 참조 메서드를 호출합니다.</summary>
      <param name="value">처리기가 호출될 때 <see cref="T:System.Xaml.XamlObjectEventArgs" />를 통해 전달될 값입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>
        <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 이벤트 데이터의 <paramref name="handled" />가 <see langword="true" />가 아니면 이 작성기에 대해 <see cref="T:System.Xaml.XamlObjectWriterSettings" />와 연결된 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 참조 메서드를 호출합니다.</summary>
      <param name="eventSender">처리기에 소스로 보고할 개체입니다.</param>
      <param name="member">설정할 속성의 이름으로, <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />의 일부로 처리기에 전달됩니다.</param>
      <param name="value">
        <paramref name="property" />로 명명된 속성에 대해 제공할 값입니다. 이 값은 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />의 일부로 처리기에 전달됩니다.</param>
      <returns>연결된 처리기에 의해 설정된 부울 값이거나, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>작성된 마지막 개체를 가져옵니다. 일반적으로 노드 스트림이 마지막에 있고 개체 그래프가 완료된 경우에만 호출됩니다.</summary>
      <returns>작성된 마지막 개체이거나 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>XAML 개체 작성기의 절대 노드 루트에 대해 XAML 이름 범위를 유지하는 <see cref="T:System.Windows.Markup.INameScope" /> 서비스를 가져옵니다.</summary>
      <returns>개체 작성기의 현재 루트에 대해 XAML 이름 범위를 유지하는 <see cref="T:System.Windows.Markup.INameScope" /> 서비스입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>활성 XAML 스키마 컨텍스트를 가져옵니다.</summary>
      <returns>XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>
        <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />를 구현하고 예외에 대한 줄 정보를 제공합니다.</summary>
      <param name="lineNumber">판독기에서의 줄 번호입니다.</param>
      <param name="linePosition">판독기에서의 줄 위치입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>줄 정보 서비스가 값을 제공해야 하는지, 그리고 이에 따라 관련이 있는 경우 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 메서드도 호출해야 하는지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns>작성기에서 줄 정보가 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>현재 멤버 범위를 닫으며, 닫는 동안 멤버 범위의 값을 쓸 수도 있습니다. 새 범위가 멤버의 부모 개체 범위가 됩니다.</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">이 호출과 이전 <see langword="StartMember" /> 사이에서 발생하는 값 노드에서 멤버 값을 만들지 못했습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>작성기에서 현재 개체 범위를 닫습니다. 새 개체 범위가 부모 멤버 범위가 됩니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>지정된 개체가 기본값이거나 부모 속성의 암시적인 값인 경우에 개념 <see langword="StartObject" />를 개체 그래프에 씁니다. 암시적 값은 입력 XAML 노드 집합에서 개체 값으로 지정되는 것이 아니라 XAML 스키마 컨텍스트에서 가져온 정보 및 지원 형식 정보에서 가져옵니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>다음 개체 범위 또는 멤버 범위에 적용되는 네임스페이스 선언을 정의합니다.</summary>
      <param name="namespaceDeclaration">작성할 네임스페이스 선언입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" />의 구성 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">잘못된 범위에서 XAML 네임스페이스 노드를 쓰려고 했습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>새 멤버 노드를 현재 개체 범위에 작성하고, 이 범위가 새 멤버 범위가 됩니다.</summary>
      <param name="property">작성할 XAML 속성입니다. 일반적으로 이 값은 XAML 노드 스트림의 중간 요소를 통해 XAML 판독기에서 가져옵니다.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" />에서 <see cref="P:System.Xaml.XamlMember.IsUnknown" />을 <see langword="true" />로 설정한 경우
또는
<see cref="P:System.Xaml.XamlLanguage.UnknownContent" />가 통과되었으며, XAML 노드 스트림에 콘텐츠를 지원하지 않는 개체의 콘텐츠가 포함된 것을 나타냅니다.
또는
잘못된 범위에서 시작 멤버를 쓰려고 했습니다.</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" />는 이미 부모 개체 범위에 명시적으로 설정된 속성을 지정합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>개체 노드를 현재 범위에 작성하고, 이 범위를 새 개체 범위로 설정합니다.</summary>
      <param name="xamlType">작성할 형식입니다. 일반적으로 XAML 판독기에서 이 값을 가져옵니다.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <see cref="P:System.Xaml.XamlType.IsUnknown" /> 형식을 처리하는 중이며 개체를 만들 수 없습니다.
또는
잘못된 범위에서 시작 개체를 쓰려고 했습니다.</exception>
      <exception cref="T:System.Xaml.XamlParseException">루트 개체가 설정에 이미 제공된 경우 루트 개체를 쓰려고 했습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>현재 멤버 범위에 값을 씁니다. 현재 범위가 컬렉션, 사전 또는 배열 개체 내에 있으면 값이 컬렉션, 사전 또는 배열에 추가되어야 합니다.</summary>
      <param name="value">작성할 값입니다.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">잘못된 범위에서 값을 쓰려고 했습니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> 클래스와 같은 XAML 작성기가 XAML 노드 스트림에서 개체 그래프를 만들려고 할 때 오류가 발생하는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlObjectWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />에 대한 특정 XAML 작성기 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>기존 인스턴스의 복사본을 기반으로 하는 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings">복사할 설정 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>XAML 작성기가 준수하는 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 권한을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 권한입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>생성된 각 개체에 대해 개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns>개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>생성된 각 개체에 대해 개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns>개체 수명의 <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>생성된 각 개체에 대해 개체 수명의 post-member-write 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns>개체 수명의 post-member-write 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>생성된 각 개체에 대해 개체 수명의 pre-member-write 단계에서 XAML 작성기가 호출하는 콜백에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns>개체 수명의 pre-member-write 단계에서 XAML 작성기가 호출하는 콜백입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>
        <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" />가 <see langword="true" />일 경우 등록 중인 이름에 사용할 XAML 네임스페이스를 XAML 작성기에서 가져오거나 설정합니다.</summary>
      <returns>이름을 등록할 때 사용할 XAML 네임스페이스입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>형식 변환기 상황에서 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />에 대해 XAML 작성기가 <see cref="T:System.ComponentModel.TypeConverter" />을 무시하고 호출하지 않아야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>XAML 작성기가 <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> 구현을 무시하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>개체 그래프 표현을 쓰기 전에 <see cref="T:System.Xaml.XamlObjectWriter" />의 <paramref name="K" /> 구성 요소에서 형식 변환을 실행하는 기본 <see cref="T:System.Collections.Generic.Dictionary`2" /> 기능을 해제할지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체에 대한 <paramref name="K" /> 형식 변환을 사용하지 않도록 설정해야 하면 <see langword="true" />이고, <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체에 대한 <paramref name="K" /> 형식 변환이 적용되면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>지정된 <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />에 대해 이름 등록이 수행되어야 하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />에 대해 이름 등록이 수행되어야 하면 <see langword="true" />이고, 부모 XAML 이름 범위에 이름 등록이 수행되어야 하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" /> 작업에 대한 기존 루트 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlObjectWriter" /> 작업에 대한 기존 루트 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>중복 속성을 검사하는 코드 경로 확인을 XAML 작성기에서 생략할지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>중복 속성 검사를 생략해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>
        <see cref="T:System.Xaml.XamlObjectWriter" />가 태그 확장 시 <see langword="ProvideValue" /> 호출을 생략해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다. 이 호출은 태그 확장이 개체 그래프의 루트를 나타내는 경우와 관련이 있습니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlObjectWriter" />가 태그 확장 시 <see langword="true" /> 호출을 생략해야 하면 <see langword="ProvideValue" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SourceBamlUri">
      <summary>실제 <see langword="BaseUri" /> 대신 <see langword="BeginInitHandler" />에서 사용합니다.</summary>
      <returns>실제 <see langword="BaseUri" /> 대신 사용할 <see cref="T:System.Uri" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>개체 작성기가 종속성 속성에 대해 CLR 구현된 <see langword="SetValue" />를 호출할 때 사용할 처리기를 가져오거나 설정합니다.</summary>
      <returns>이 경우를 처리하는 처리기 구현입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>XAML 판독기가 XAML 판독기 소스의 요소를 XAML 노드 스트림 안으로 처리할 수 없는 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlParseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>XAML 입력을 소비하고 XAML 노드 스트림을 만드는 클래스에 대한 기본 정의를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 클래스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>XAML 노드 스트림을 닫습니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>
        <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />가 호출되었는지 여부를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />가 호출되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>파생 클래스에서 구현되는 경우 판독기 위치가 파일의 끝에 있는지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns>위치가 XAML 노드 스트림의 개념상 파일 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>파생 클래스에서 구현되는 경우 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있으면 판독기 위치에 있는 현재 멤버를 가져옵니다.</summary>
      <returns>현재 멤버이며, 판독기 위치가 멤버에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>파생 클래스에서 구현된 경우 현재 노드에서 XAML 네임스페이스 정보를 가져옵니다.</summary>
      <returns>사용할 수 있으면 XAML 네임스페이스 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>파생 클래스에서 구현되는 경우 현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>파생 클래스에서 구현될 때 노드를 사용할 수 있는 경우 소스에서 다음 XAML 노드를 제공합니다.</summary>
      <returns>노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>현재 <see cref="T:System.Xaml.XamlReader" />를 기반으로 하는 <see cref="T:System.Xaml.XamlReader" />를 반환합니다. 반환된 <see cref="T:System.Xaml.XamlReader" />는 XAML 노드 구조의 하위 트리에서 반복하는 데 사용됩니다.</summary>
      <returns>하위 트리의 새 XAML 판독기 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>파생 클래스에서 구현된 경우 정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns>정보 집합에 대한 XAML 스키마 컨텍스트 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>현재 노드를 건너뛰고 판독기 위치를 다음 노드로 이동합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>파생 클래스에서 구현된 경우 현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 현재 판독기 위치가 개체에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>파생 클래스에서 구현되는 경우 현재 노드의 값을 가져옵니다.</summary>
      <returns>현재 노드의 값이거나, 현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 구현에 대한 처리 규칙 또는 옵션 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>다른 <see cref="T:System.Xaml.XamlReaderSettings" /> 개체의 값을 기준으로 <see cref="T:System.Xaml.XamlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings">기존 <see cref="T:System.Xaml.XamlReaderSettings" /> 개체입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>XAML 형식 표현을 보고할 때 보호되는 코드 액세스 모델이 있는 멤버가 루트 개체에 포함될 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>보호되는 코드 액세스 모델이 있는 멤버가 루트 개체에 포함될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>상대 경로를 확인하는 데 사용되는 기본 URI를 가져오거나 설정합니다.</summary>
      <returns>사용할 기본 URI입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>속성 요소에 있는 <see langword="x:Uid" /> 특성의 값을 XAML 판독기가 무시해야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>판독기가 속성 요소에서 <see langword="true" /> 특성에 대한 값을 무시해야 하면 <see langword="x:Uid" />이고, 판독기가 속성 요소에서 <see langword="false" /> 특성을 처리해야 하면 <see langword="x:Uid" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>처리할 현재 로컬 어셈블리를 나타내는 개체를 가져오거나 설정합니다. 이 어셈블리 정보는 <see cref="M:System.Xaml.XamlType.GetAllMembers" /> 같은 도우미 API를 호출하는 데 사용됩니다.</summary>
      <returns>CLR 리플렉션 <see cref="T:System.Reflection.Assembly" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>판독기가 줄 번호 및 위치를 제공할 수 있는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>판독기가 줄 번호 및 위치 정보를 제공할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>판독기에서 모든 <see langword="Value" /> 노드가 <see langword="String" /> 형식으로 처리되도록 해야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>판독기가 <see langword="true" /> 노드에 <see langword="String" />만 포함하도록 하면 <see langword="Value" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>XAML 형식 그리고 XAML 형식의 기반이 되는 어셈블리에 있는 형식을 해석하거나 매핑하기 위한 다시 사용할 수 있는 컨텍스트를 정의합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>참조 어셈블리 집합을 기반으로 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="referenceAssemblies">어셈블리 정보 항목의 열거 가능한 집합입니다. 각 어셈블리 정보 항목은 <see cref="T:System.Reflection.Assembly" /> 값으로 지정됩니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>참조 어셈블리 집합 및 설정 개체를 기반으로 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="referenceAssemblies">어셈블리 정보의 열거 가능한 집합입니다. 각 어셈블리 정보 항목은 <see cref="T:System.Reflection.Assembly" /> 값으로 지정됩니다.</param>
      <param name="settings">
        <see cref="T:System.Xaml.XamlSchemaContext" />를 생성하는 데 사용할 설정 개체입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>설정 개체를 기반으로 <see cref="T:System.Xaml.XamlSchemaContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings">
        <see cref="T:System.Xaml.XamlSchemaContext" />를 생성하는 데 사용할 설정 개체입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>
        <see langword="Finalize" />를 호출하지 않는 비표준 <see langword="Dispose" /> 구현을 제공합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>이 <see cref="T:System.Xaml.XamlSchemaContext" />에 들어 있는 어셈블리를 검색하고 네임스페이스 집합을 반환합니다.</summary>
      <returns>열거 가능한 네임스페이스 식별자 집합입니다. 이러한 식별자는 문자열로 제공됩니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>이 <see cref="T:System.Xaml.XamlSchemaContext" />에 들어 있는 어셈블리를 검색하고 지정된 XAML 네임스페이스에서 형식 집합을 반환합니다.</summary>
      <param name="xamlNamespace">형식을 반환할 XAML 네임스페이스입니다.</param>
      <returns>XAML 형식의 열거 가능한 집합입니다. 집합의 각 XAML 형식은 <see cref="T:System.Xaml.XamlType" /> 개체로 나타냅니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>지정된 XAML 네임스페이스를 매핑할 때 소비자가 사용할 기본 접두사로 보고되는 문자열을 가져옵니다.</summary>
      <param name="xmlns">기본 접두어를 가져올 XAML 네임스페이스입니다.</param>
      <returns>태그 사용을 위해 지정된 XAML 네임스페이스를 매핑할 때 소비자가 사용해야 하는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" />가 null입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>요청된 <paramref name="targetType" />으로 변환될 수 있는 값 변환기를 반환합니다.</summary>
      <param name="converterType">변환기 구현입니다.</param>
      <param name="targetType">변환기의 원하는 대상 형식입니다.</param>
      <typeparam name="TConverterBase">특정 변환기 기본 클래스입니다.</typeparam>
      <returns>메서드 호출에 배치된 제약 조건과 일치하는 제약 조건이 있는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>XAML 언어 또는 특정 구현을 위한 지시문을 나타내는 <see cref="T:System.Xaml.XamlDirective" /> 값을 반환합니다.</summary>
      <param name="xamlNamespace">명명된 지시문이 들어 있는 XAML 네임스페이스입니다.</param>
      <param name="name">가져올 지시문의 이름입니다.</param>
      <returns>요청된 지시문을 나타내는 <see cref="T:System.Xaml.XamlDirective" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> 또는 <paramref name="name" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>XAML 네임스페이스와 형식 이름의 문자열을 기반으로 하는 <see cref="T:System.Xaml.XamlType" />을 반환합니다. 이 시그니처는 원하는 형식이 제네릭 형식인 경우 형식 인수를 지정할 수 있습니다.</summary>
      <param name="xamlNamespace">원하는 형식을 포함하는 XAML 네임스페이스입니다.</param>
      <param name="name">원하는 형식의 문자열 이름입니다.</param>
      <param name="typeArguments">제네릭 형식에 대한 초기화 형식 인수입니다.</param>
      <returns>입력 조건과 일치하는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>CLR 형식 식별자를 기반으로 하는 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <param name="type">
        <see cref="T:System.Xaml.XamlType" />을 가져올 형식입니다.</param>
      <returns>입력 <paramref name="type" />과 일치하는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>XAML 시스템 형식 이름을 기반으로 하는 <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <param name="xamlTypeName">
        <see cref="T:System.Xaml.XamlType" />을 가져올 XAML 형식 이름입니다.</param>
      <returns>입력 <paramref name="xamlTypeName" />과 일치하는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="xamlTypeName" />(<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> 또는 <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />)의 구성 요소가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>포함되어 있는 XAML 네임스페이스를 확인하기 위해 작업이 이 스키마 컨텍스트를 사용하여 어셈블리를 확인할 때 호출됩니다.</summary>
      <param name="assemblyName">로드할 어셈블리의 이름입니다.</param>
      <returns>확인된 어셈블리입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>XAML 스키마 컨텍스트에 대한 열거 가능한 참조 어셈블리 집합을 가져옵니다.</summary>
      <returns>스키마 컨텍스트에 대한 열거 가능한 참조 어셈블리 집합입니다. 각 어셈블리 정보 항목은 <see cref="T:System.Reflection.Assembly" /> 값으로 지정됩니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>XAML 스키마 및 해당 컨텍스트에서 같은 인자 수(입력 매개 변수 수)를 갖는 두 생성자를 가지는 태그 확장이 지원되는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>스키마 컨텍스트에서 중복된 인자 수를 갖는 태그 확장이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>호환되는 XAML 네임스페이스 요청에 대해 성공 또는 실패를 반환합니다. 요청 성공 시에는 XAML 네임스페이스를 out 매개 변수로 보고합니다.</summary>
      <param name="xamlNamespace">호환되는 결과에 대해 확인할 XAML 네임스페이스의 <see langword="xmlns" /> 문자열입니다.</param>
      <param name="compatibleNamespace">이 메서드가 반환할 경우 호환되는 XAML 네임스페이스 요청에 대한 <see langword="xmlns" /> 문자열입니다. 메서드가 <see langword="false" />를 반환할 경우에는 <paramref name="xamlNamespace" />와 동일할 수 있습니다.</param>
      <returns>
        <paramref name="compatibleNamespace" />에 사용 가능한 결과가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaContext" />에 대한 선택적 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>기존 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 인스턴스의 값을 복사하여 <see cref="T:System.Xaml.XamlSchemaContextSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings">기존 <see cref="T:System.Xaml.XamlSchemaContextSettings" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>XAML 스키마와 해당 컨텍스트가 조회 API에 의해 반환된 값에서 정규화된 어셈블리 이름을 사용하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>XAML 스키마 컨텍스트에서 같은 인자 수(입력 매개 변수 수)를 갖는 두 생성자를 가지는 태그 확장을 허용하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>스키마 컨텍스트에서 입력 매개 변수 수가 같은 생성자가 있는 태그 확장이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>XAML 보고서의 바인딩 시스템이나 다른 스키마 표현 시스템이 스키마 컨텍스트에 대한 예외를 보고할 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlSchemaException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>serialization 목적을 위해 XAML을 읽고 개체 그래프를 작성하거나 개체 그래프를 읽고 XAML 파일 출력을 작성하는 일반적인 XAML 작업에 대한 보다 높은 수준의 서비스(정적 메서드)를 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 출력을 개체 그래프로 기록합니다.</summary>
      <param name="stream">입력으로 로드할 스트림입니다.</param>
      <returns>출력으로 기록되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>
        <see cref="T:System.IO.TextReader" />에서 XAML 판독기를 만들고 개체 그래프를 반환합니다.</summary>
      <param name="textReader">생성된 <see cref="T:System.IO.TextReader" />에 대한 기반으로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns>반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>XAML 판독기의 <see cref="T:System.IO.Stream" /> 소스를 로드하고 개체 그래프를 반환합니다.</summary>
      <param name="fileName">로드하고 소스로 사용할 파일 이름입니다.</param>
      <returns>반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>특정 XAML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</summary>
      <param name="xamlReader">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 XAML 판독기 구현입니다.</param>
      <returns>반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>특정 XML 판독기 구현을 로드하고 개체 그래프를 반환합니다.</summary>
      <param name="xmlReader">이 <see langword="Load" /> 작업에 대한 판독기로 사용할 <see cref="T:System.Xml.XmlReader" /> 구현입니다.</param>
      <returns>출력 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>XAML을 문자열 출력으로 읽고 개체 그래프를 반환합니다.</summary>
      <param name="xaml">구문 분석할 XAML 문자열 입력입니다.</param>
      <returns>반환되는 개체 그래프입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 serialization을 위한 출력 스트림으로 처리합니다.</summary>
      <param name="stream">대상 스트림입니다.</param>
      <param name="instance">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.IO.TextWriter" />로 이동하는 출력으로 처리합니다.</summary>
      <param name="writer">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="instance">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>제공된 개체 트리를 XAML 노드 표현으로 처리하고 출력 XAML의 문자열 표현을 반환합니다.</summary>
      <param name="instance">처리할 개체 그래프의 루트입니다.</param>
      <returns>문자열로 표시되는 XAML 태그 출력입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 위치의 출력 파일에 씁니다.</summary>
      <param name="fileName">출력을 작성할 파일의 이름과 위치입니다.</param>
      <param name="instance">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" />이 빈 문자열인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 XAML 작성기에 씁니다.</summary>
      <param name="writer">사용할 <see cref="T:System.Xaml.XamlWriter" /> 구현입니다.</param>
      <param name="instance">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>제공된 개체 그래프를 XAML 노드 표현으로 처리한 후에 제공된 <see cref="T:System.Xml.XmlWriter" />에 씁니다.</summary>
      <param name="writer">사용할 <see cref="T:System.Xml.XmlWriter" /> 구현입니다.</param>
      <param name="instance">처리할 개체 그래프의 루트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 입력은 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다.</summary>
      <param name="xamlReader">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</param>
      <param name="xamlWriter">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xaml.XamlException">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlReader" /> 및 <see cref="T:System.Xaml.XamlWriter" />를 연결하여 공통 XAML 노드 집합 매개자를 사용합니다. 제공된 판독기와 작성기의 유형에 따라 콘텐츠를 잠재적으로 변환합니다. 호출이 완료된 후에 작성기를 닫을지 여부를 지정하기 위한 매개 변수를 제공합니다.</summary>
      <param name="xamlReader">사용할 <see cref="T:System.Xaml.XamlReader" /> 구현입니다.</param>
      <param name="xamlWriter">사용할 <see cref="T:System.Xaml.XamlWriter" />입니다.</param>
      <param name="closeWriter">호출이 완료된 후에 작성기를 닫으면 <see langword="true" />이고, 작성된 마지막 쓰기 위치에 활성 상태로 두면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> 또는 <paramref name="xamlWriter" /> 입력이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Xaml.XamlException">XAML 스키마 컨텍스트가 제공된 <paramref name="xamlReader" /> 및 <paramref name="xamlWriter" /> 사이에 일치하지 않습니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>.NET Framework XAML 서비스에 구현된 전체 XAML 시스템의 일부로 XAML 형식에 대한 정보를 보고합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">만들 형식의 이름입니다.</param>
      <param name="typeArguments">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다. 표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</param>
      <param name="schemaContext">XAML 판독기 및 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">하나 이상의 <paramref name="typeName" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>XAML 네임스페이스와 형식의 문자열 이름을 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다. 이 생성자는 지원 형식 시스템과 XAML 스키마 컨텍스트에서 지원되지 않는 것으로 알려진 형식의 분석 및 XAML 노드 기록에만 사용됩니다.</summary>
      <param name="unknownTypeNamespace">형식에 대한 XML 네임스페이스로서, 문자열로 되어 있습니다.</param>
      <param name="unknownTypeName">제공된 <paramref name="unknownTypeNamespace" /> XAML 네임스페이스에 있는 형식의 이름입니다.</param>
      <param name="typeArguments">제네릭 형식을 나타내는 <see cref="T:System.Xaml.XamlType" />의 형식 인수입니다. 표시된 형식이 제네릭 형식이 아님을 나타내는 <see langword="null" />인 경우가 많습니다.</param>
      <param name="schemaContext">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" /> 또는 <paramref name="schemaContext" /> 중 하나 이상이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>기본 CLR 형식 정보를 기반으로 <see cref="T:System.Xaml.XamlType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="underlyingType">생성할 XAML 형식에 대한 기본 CLR <see cref="T:System.Type" />입니다.</param>
      <param name="schemaContext">XAML 판독기 또는 XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>기본 형식 정보와 <see cref="T:System.Xaml.XamlType" /> 구현을 기반으로 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="underlyingType">생성할 XAML 형식에 대한 기본 형식입니다.</param>
      <param name="schemaContext">XAML 판독기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="invoker">
        <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 런타임 리플렉션 호출을 처리하는 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</param>
      <exception cref="T:System.ArgumentNullException">하나 이상의 <paramref name="underlyingType" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식의 읽기 전용 컬렉션을 가져옵니다.</summary>
      <returns>가능한 콘텐츠 형식의 읽기 전용 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 가져옵니다. 이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</summary>
      <returns>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>이 <see cref="T:System.Xaml.XamlType" /> 인스턴스의 할당 가능한 형식 목록에 지정된 <see cref="T:System.Xaml.XamlType" />이 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="xamlType">현재 <see cref="T:System.Xaml.XamlType" />을 검사할 대상 형식입니다.</param>
      <returns>
        <paramref name="xamlType" />이 할당 가능한 형식 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 일반 제약 조건)가 있어야 해당 형식의 유효한 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다. 콘텐츠 속성이 없는 경우 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>콘텐츠 속성이 강력한 형식의 <see langword="Collection&lt;T&gt;" />에 있는 문자열과 같이 엄격한 형식 일치가 아닐 때 콘텐츠 속성의 콘텐츠를 래핑하는 데 사용되는 형식을 가져옵니다.</summary>
      <returns>가능한 콘텐츠 래퍼 형식의 읽기 전용 컬렉션이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>이 형식에 대한 지연된 로드 변환 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />를 가져옵니다.</summary>
      <returns>이 형식에 대한 지연된 로드 동작을 나타내는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>현재 개체가 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="obj">이 개체와 비교할 개체입니다.</param>
      <returns>현재 개체가 <paramref name="obj" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>현재 개체가 동일한 형식의 다른 개체와 같은지 여부를 나타냅니다.</summary>
      <param name="other">이 개체와 비교할 개체입니다.</param>
      <returns>현재 개체가 <paramref name="other" /> 매개 변수와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</summary>
      <param name="directive">별칭이 지정된 멤버를 찾을 지시문입니다.</param>
      <returns>별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 컬렉션을 반환합니다.</summary>
      <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 컬렉션을 반환합니다.</summary>
      <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>이 <see cref="T:System.Xaml.XamlType" />의 명명된 특정 연결 가능 멤버를 나타내는 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <param name="name">
        <c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</param>
      <returns>요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>해당 개체의 해시 코드를 반환합니다.</summary>
      <returns>정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <param name="name">문자열로 가져올 멤버의 이름입니다.</param>
      <returns>해당 멤버를 찾았으면 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</summary>
      <param name="parameterCount">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</param>
      <returns>각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다. 태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>이 형식이 포함되어 있는 XAML 네임스페이스에 대한 문자열 식별자 목록을 반환합니다.</summary>
      <returns>각 문자열이 XAML 네임스페이스의 URI 식별자인 문자열 값 목록입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" /> 구현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 배열을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 제네릭 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="xamlName" /> 문자열을 <see cref="P:System.Xaml.XamlType.Name" />으로 사용하여 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 유효한 <see langword="true" /> 문자열을 사용하여 초기화되었으면 <see langword="xamlName" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
      <returns>컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
      <returns>사전인 경우 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이며, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 XAML 지시문에 별칭으로 지정되는 XAML 멤버를 반환합니다.</summary>
      <param name="directive">별칭이 지정된 멤버를 찾을 지시문입니다.</param>
      <returns>별칭이 지정된 멤버를 찾았으면 해당 멤버이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 연결 가능 속성을 포함하는 열거 가능한 집합을 반환합니다.</summary>
      <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 의해 노출되는 모든 멤버를 포함하는 열거 가능한 집합을 반환합니다.</summary>
      <returns>0개 이상의 <see cref="T:System.Xaml.XamlMember" /> 값을 포함하는 열거 가능한 집합입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>이 <see cref="P:System.Xaml.XamlType.ContentProperty" />에 대한 <see cref="T:System.Xaml.XamlType" /> 값으로 사용할 수 있는 형식 목록을 반환합니다.</summary>
      <returns>가능한 콘텐츠 형식의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에서 명명된 특정 연결 가능 항목에 대해 <see cref="T:System.Xaml.XamlMember" />를 반환합니다.</summary>
      <param name="name">
        <c>ownerTypeName.MemberName</c> 형식으로 된 가져올 연결 가능 멤버의 이름입니다.</param>
      <returns>요청된 연결 가능 멤버의 경우 <see cref="T:System.Xaml.XamlMember" /> 개체이고, 그렇지 않고 해당 이름의 연결 가능 멤버가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />을 반환합니다. 이 값은 이 <see cref="T:System.Xaml.XamlType" /> 및 스키마 컨텍스트의 기본 형식을 기준으로 결정됩니다.</summary>
      <returns>이 XAML 형식의 직접적인 기본 형식에 대한 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlCollectionKind" />에서 사용하는 특정 컬렉션 형식을 선언하는 <see cref="T:System.Xaml.XamlType" /> 열거형의 값을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 인수(<see langword="x:TypeArguments" />, 초기화 텍스트 또는 기타 XAML 기술을 통한 제네릭 제약 조건)가 있어야 유효한 형식 인스턴스를 생성할 수 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>인스턴스를 생성하기 위해 일부 인수 값이 필요하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlMember" />의 콘텐츠 속성에 대한 <see cref="T:System.Xaml.XamlType" /> 정보입니다. <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />에 대한 콘텐츠 래퍼를 나타내는 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>파생 클래스에서 구현되는 경우 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Reflection.ICustomAttributeProvider" /> 구현입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>XAML 선언된 개체의 지연된 로드에 사용되는 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 개체를 반환합니다.</summary>
      <returns>제네릭에 대한 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlDeferringLoader" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />과 연결된 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />에 대한 <see cref="T:System.Xaml.XamlType" /> 정보이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 앰비언트 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 생성 가능 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는지 여부를 표시하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 XAML 이름 범위를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 null 허용 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 관련 형식 시스템에서 public 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 public 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 기본 형식 시스템에서 확인할 수 없는 형식을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 확인할 수 없는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 XML 정의를 기준으로 유효한 공백 컬렉션을 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 유효한 공백 컬렉션을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>XAML 정의를 기준으로 이 <see cref="T:System.Xaml.XamlType" />이 XML <see langword="XDATA" />를 나타내는지 여부를 지정하는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 <see langword="true" />를 나타내면 <see langword="XDATA" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>이 <see cref="T:System.Xaml.XamlType" /> 개체의 <see langword="Items" /> 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
      <returns>컬렉션에 있는 항목의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 컬렉션을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내는 경우 이 <see cref="T:System.Xaml.XamlType" />의 키 속성에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
      <returns>사전 사용 키의 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 사전을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 반환합니다.</summary>
      <returns>태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>이 <see cref="T:System.Xaml.XamlMember" />에서 명명된 특정 멤버의 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <param name="name">문자열로 가져올 멤버의 이름입니다.</param>
      <param name="skipReadOnlyCheck">멤버의 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 값이 <see langword="true" />인 경우에도 해당 멤버를 반환하면 <see langword="true" />이고, <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 멤버를 반환하지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</param>
      <returns>멤버를 찾았으면 해당 멤버의 <see cref="T:System.Xaml.XamlMember" /> 정보이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>태그 확장 형식의 경우 이 <see cref="T:System.Xaml.XamlType" />에 대한 특정 태그 확장 사용에서 지원되는 위치 매개 변수의 형식을 반환합니다.</summary>
      <param name="parameterCount">정보를 보려는 특정 구문 또는 생성자 모드의 개수입니다.</param>
      <returns>각 <see cref="T:System.Xaml.XamlType" />이 구문에서 해당 위치의 형식인 <see cref="T:System.Xaml.XamlType" /> 값의 목록입니다. 태그 확장에 대한 태그 입력을 제공할 때 이 형식을 동일한 순서로 지정해야 합니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>태그 확장의 설정 작업에 사용할 처리기 콜백을 반환합니다.</summary>
      <returns>태그 확장의 설정 작업에 사용할 처리기 콜백입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>형식 변환기 설정 사례에 사용할 처리기를 반환합니다.</summary>
      <returns>형식 변환기 설정 사례에 사용할 처리기입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드를 사용하여 serialize되어야 하는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 주변 공백을 트리밍하는 모드로 serialize되어야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>XAML을 초기화하는 동안 이 <see cref="T:System.Xaml.XamlType" />이 하향식으로 빌드되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내는 경우 이 개체의 반환된 <see langword="ProvideValue" />에 대한 형식 정보를 제공하는 값을 가져옵니다.</summary>
      <returns>태그 확장 사용의 반환 형식에 대한 <see cref="T:System.Xaml.XamlType" /> 개체이거나, 이 <see cref="T:System.Xaml.XamlType" />이 태그 확장을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 나타내는 형식의 문자열 이름을 가져옵니다.</summary>
      <returns>이 XAML 형식의 문자열 이름입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <see langword="true" />의 값이 <paramref name="xamlType1" />의 값과 같으면 <paramref name="xamlType2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>지정된 두 <see cref="T:System.Xaml.XamlType" /> 개체의 값이 서로 다른지 확인합니다.</summary>
      <param name="xamlType1">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <param name="xamlType2">
        <see cref="T:System.Xaml.XamlType" /> 또는 <see langword="null" />입니다.</param>
      <returns>
        <paramref name="xamlType1" />의 값이 <paramref name="xamlType2" />의 값과 다르면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 대한 기본 XAML 네임스페이스인 단일 XAML 네임스페이스를 가져옵니다.</summary>
      <returns>이 XAML 형식에 대한 기본 XAML 네임스페이스의 식별자로서, 문자열로 지정됩니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlSchemaContext" />을 처리하기 위한 활성 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>이 <see cref="T:System.Xaml.XamlType" />에 콘텐츠에서 주변 공백을 트리밍하는 serialization의 공백 처리 동작이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlType" />이 공백 트리밍을 사용하는 형식을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내는 경우 형식 인수의 목록을 가져옵니다.</summary>
      <returns>형식 인수 형식의 목록이거나, 이 <see cref="T:System.Xaml.XamlType" />이 제네릭을 나타내지 않는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 형식 변환 동작을 나타내는 <see cref="T:System.ComponentModel.TypeConverter" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Type" />의 기반이 되는 CLR <see cref="T:System.Xaml.XamlType" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />의 값에 대한 값 serialization 동작을 나타내는 <see cref="T:System.Windows.Markup.ValueSerializer" /> 제약 조건이 있는 <see cref="T:System.Xaml.XamlType" />이거나, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>XAML 작성기에 대한 기본 구현 및 기본 클래스 정의를 제공합니다. 이것은 작동 중인 기본 XAML 작성기가 아니므로 <see cref="T:System.Xaml.XamlWriter" />에서 파생하여 해당 추상 멤버를 구현하거나 기존의 <see cref="T:System.Xaml.XamlWriter" /> 파생 클래스를 사용해야 합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>XAML 작성기 개체를 닫습니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스를 해제하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>
        <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />가 호출되었는지 여부를 가져옵니다.</summary>
      <returns>
        <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" />가 호출되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>파생 클래스에서 구현된 경우 활성 XAML 스키마 컨텍스트를 가져옵니다.</summary>
      <returns>활성 XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>
        <see cref="M:System.IDisposable.Dispose" />을 참조하세요.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>파생 클래스에서 구현되는 경우 끝 멤버 노드의 표현을 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>파생 클래스에서 구현되는 경우 끝 개체 노드의 표현을 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>파생 클래스에서 구현되는 경우 개체가 입력 XAML 노드 집합에서 개별적인 개체 값으로 지정되는 것이 아니라 기본값이거나 설정 중인 속성의 암시적인 값이면 개체를 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>파생 클래스에서 구현되는 경우 XAML 네임스페이스 선언 노드를 작성합니다.</summary>
      <param name="namespaceDeclaration">작성할 네임스페이스 선언입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>XAML 판독기(<see cref="P:System.Xaml.XamlReader.NodeType" />)의 노드 형식을 기반으로 전환을 수행하고 작성기 구현을 위한 관련 <see langword="Write" /> 메서드를 호출합니다.</summary>
      <param name="reader">노드 확인에 사용할 판독기입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotImplementedException">기본 구현에 없는 <see cref="T:System.Xaml.XamlNodeType" />이 있습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>파생 클래스에서 구현되는 경우 시작 멤버 노드의 표현을 작성합니다.</summary>
      <param name="xamlMember">작성할 멤버 노드입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>파생 클래스에서 구현되는 경우 시작 개체 노드의 표현을 작성합니다.</summary>
      <param name="type">작성할 개체의 XAML 형식입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>파생 클래스에서 구현되는 경우 값 노드를 작성합니다.</summary>
      <param name="value">작성할 값입니다.</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>
        <see cref="T:System.Xaml.XamlWriter" /> 구현에 대한 초기화 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>다른 기존 설정 인스턴스를 사용하여 <see cref="T:System.Xaml.XamlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings">기존 <see cref="T:System.Xaml.XamlWriterSettings" /> 개체입니다.</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 매개자를 사용하여 XML 파일에서 XAML 태그를 처리하고 XAML 노드 스트림을 생성합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>스트림을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">판독기에 로드할 초기 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>제공된 XAML 스키마 컨텍스트를 사용하여 스트림을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">판독기에 로드할 초기 스트림입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>제공된 XAML 스키마 컨텍스트 및 XAML 관련 설정을 사용하여 스트림을 기준으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">판독기에 로드할 초기 스트림입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>XAML 고유 설정을 사용하여 스트림을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">판독기에 로드할 초기 스트림입니다.</param>
      <param name="settings">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>제공된 스키마 컨텍스트 및 XAML 고유 설정을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" />가 <see langword="null" />입니다.
또는
<paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>제공된 스키마 컨텍스트 및 XAML 고유 설정을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" />가 <see langword="null" />인 경우
또는
<paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>XAML 고유 설정을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" />를 기반으로 <see cref="T:System.IO.TextReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textReader">초기화에 사용할 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <param name="settings">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>기본 XAML 판독기로 로드할 파일의 파일 이름을 기준으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">로드할 XML 파일의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>제공된 XAML 스키마 컨텍스트를 사용하여 기본 XML 판독기로 로드할 파일의 파일 이름을 기준으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">로드할 파일의 이름입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>제공된 XAML 스키마 컨텍스트 및 XAML 고유 판독기 설정을 사용하여 기본 XML 판독기로 로드할 파일의 파일 이름을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">로드할 XML 파일의 이름입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" />가 <see langword="null" />인 경우
또는
<paramref name="schemaContext" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>XAML 고유 판독기 설정을 사용하여 기본 XML 판독기로 로드할 파일의 파일 이름을 기반으로 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">로드할 XML 파일의 이름입니다.</param>
      <param name="settings">특정 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>제공된 <see cref="T:System.Xml.XmlReader" />을 사용하여 <see cref="T:System.Xaml.XamlXmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>제공된 <see cref="T:System.Xaml.XamlXmlReader" /> 및 스키마 컨텍스트를 사용하여 <see cref="T:System.Xml.XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>제공된 <see cref="T:System.Xaml.XamlXmlReader" />, 스키마 컨텍스트 및 판독기 설정을 사용하여 <see cref="T:System.Xml.XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="schemaContext">XAML 처리의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">특정 XAML 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>제공된 <see cref="T:System.Xaml.XamlXmlReader" /> 및 판독기 설정을 사용하여 <see cref="T:System.Xml.XmlReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlReader">매개자 XML 처리기로 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="settings">특정 XAML 판독기 설정입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>줄 정보를 사용할 수 있는지 여부를 지정하는 값을 가져옵니다.</summary>
      <returns>줄 정보를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>XAML 노드 스트림에서 판독기 위치가 파일 끝인지 여부를 보고하는 값을 가져옵니다.</summary>
      <returns>위치가 노드 스트림의 개념적 파일 끝에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>보고할 줄 번호를 가져옵니다.</summary>
      <returns>보고할 줄 번호입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>보고할 줄 위치를 가져옵니다.</summary>
      <returns>보고할 줄 위치입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>현재 판독기 위치가 <see cref="F:System.Xaml.XamlNodeType.StartMember" />에 있는 경우 판독기 위치에 현재 멤버를 가져옵니다.</summary>
      <returns>현재 멤버이거나, 현재 판독기 위치가 멤버에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>현재 노드에서 XAML 네임스페이스를 가져옵니다.</summary>
      <returns>사용할 수 있으면 현재 노드의 XAML 네임스페이스이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>현재 노드의 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlNodeType" /> 열거형의 값입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>XAML 노드를 사용할 수 있는 경우 로드된 소스에서 다음 XAML 노드를 제공합니다.</summary>
      <returns>노드를 사용할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>정보 집합에 대한 스키마 정보를 제공하는 개체를 가져옵니다.</summary>
      <returns>정보 집합에 대한 스키마 정보를 제공하는 개체입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>현재 노드의 <see cref="T:System.Xaml.XamlType" />을 가져옵니다.</summary>
      <returns>현재 노드의 <see cref="T:System.Xaml.XamlType" />이거나, 위치가 개체에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>현재 노드의 값을 가져옵니다.</summary>
      <returns>현재 노드의 값이거나, 위치가 <see cref="F:System.Xaml.XamlNodeType.Value" /> 노드 형식에 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" /> XAML 판독기 구현에 대한 처리 규칙 또는 옵션 설정을 지정합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>기존 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 개체에서 설정을 복사하여 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="settings">복사할 기존 <see cref="T:System.Xaml.XamlXmlReaderSettings" /> 개체입니다.</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>
        <see cref="T:System.Xaml.XamlXmlReader" />를 닫을 때 기본 스트림 또는 텍스트 판독기를 함께 닫을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlXmlReader" />를 닫을 때 내부 스트림 또는 판독기를 함께 닫아야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>태그 호환성 콘텐츠 처리 방법과 관련해서 판독기가 기본 <see cref="T:System.Xaml.XamlXmlReader" />와는 다르게 동작해야 하는지 여부를 결정하는 값을 가져오거나 설정합니다.</summary>
      <returns>시작하는 판독기를 직접 사용하면 즉, XML 호환성 태그를 주 스트림의 일부로 처리하고 호환성을 고려하지 않으면 <see langword="true" />이고, XML 호환성을 별도로 처리하는 기본 동작을 사용하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>판독기가 노드에 <see langword="xml:lang" /> 특성을 쓰는 작성기로 승격할 수 있는 언어 설정 값을 가져오거나 설정합니다.</summary>
      <returns>판독기를 기반으로 하는 가능한 <see langword="xml:lang" /> 출력에 사용할 문자열입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>XAML 판독기가 노드에 <see langword="xml:space" /> 특성을 쓰도록 XAML 작성기에 지시하는지 여부를 결정하는 값을 가져오거나 설정합니다. 해당 동작을 원하는 경우 이 정보가 공유 XAML 스키마 컨텍스트를 통해 전달됩니다.</summary>
      <returns>
        <see langword="true" /> XAML 노드 스트림을 처리 중인 작성기가 작성할 수 있으면 <c>xml: space = "preserve"</c> 출력; <see langword="false" /> 경우 <see langword="xml:space" /> 노드의 특성을 쓸 수 없습니다.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>
        <see cref="T:System.IO.TextWriter" /> 또는 <see cref="T:System.Xml.XmlWriter" /> 지원 클래스를 사용하여 XAML 노드 스트림을 텍스트 또는 태그 serialize된 양식에 씁니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>스트림에서 <see cref="T:System.Xaml.XamlXmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">쓸 스트림입니다.</param>
      <param name="schemaContext">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />가 <see langword="null" />인 경우
또는
<paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>작성기 설정 개체를 사용하여 스트림에서 <see cref="T:System.Xaml.XamlXmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="stream">쓸 스트림입니다.</param>
      <param name="schemaContext">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">일반적으로 기본값이 아닌 특정 설정이 있는 <see cref="T:System.Xaml.XamlXmlWriterSettings" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.IO.TextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textWriter">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="schemaContext">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>설정 개체를 사용하여 <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.IO.TextWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="textWriter">출력을 작성하는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="schemaContext">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">일반적으로 기본값이 아닌 특정 설정이 있는 <see cref="T:System.Xaml.XamlXmlWriterSettings" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.Xml.XmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlWriter">출력을 작성하는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="schemaContext">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>설정 개체를 사용하여 <see cref="T:System.Xaml.XamlXmlWriter" /> 기초에서 <see cref="T:System.Xml.XmlWriter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="xmlWriter">출력을 작성하는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="schemaContext">XAML 작성기의 XAML 스키마 컨텍스트입니다.</param>
      <param name="settings">일반적으로 기본값이 아닌 특정 설정이 있는 <see cref="T:System.Xaml.XamlXmlWriterSettings" />의 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> 또는 <paramref name="schemaContext" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리되지 않는 리소스를 해제하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />의 <see langword="Flush" /> 메서드를 호출합니다. 이 메서드는 현재 버퍼에 있는 모든 내용을 쓴 후에 작성기를 닫습니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>이 <see cref="T:System.Xaml.XamlXmlWriter" />가 처리에 사용하는 XAML 스키마 컨텍스트를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlXmlWriter" />가 XAML 처리에 사용하는 XAML 스키마 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>이 <see cref="T:System.Xaml.XamlXmlWriter" />가 XAML 처리에 사용하는 작성기 설정을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Xaml.XamlXmlWriter" />가 XAML 처리에 사용하는 작성기 설정입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>내부 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 끝 멤버 노드를 씁니다. XAML 노드 스트림의 현재 위치가 멤버 내에 없거나 내부 작성기 상태가 끝 멤버에 쓰는 작업을 지원하지 않으면 예외를 throw합니다.</summary>
      <exception cref="T:System.InvalidOperationException">XAML 노드 스트림의 현재 위치가 멤버 내부가 아닙니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">현재 작성기 상태는 끝 멤버 작성을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 끝 개체 노드를 씁니다. 처리되는 XAML 노드 스트림의 현재 위치가 끝 개체 쓰기와 호환되지 않으면 예외를 throw합니다.</summary>
      <exception cref="T:System.InvalidOperationException">XAML 노드 스트림의 현재 위치는 끝 멤버를 기록할 수 있는 범위 내에 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">현재 작성기 상태는 끝 개체 작성을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>지정된 개체가 입력 XAML 노드 집합에서 개체 값으로 지정되는 것이 아니라 기본값이거나 쓰고 있는 속성의 암시적인 값인 경우에 개체를 씁니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 네임스페이스 정보를 씁니다. 특정 상태에 대해 예외를 throw할 수도 있지만, 그 대신에 작성기 및 처리 중인 XAML 노드 스트림이 XAML 네임스페이스 선언을 삽입할 수 있는 위치에 도달할 때까지 네임스페이스 정보 쓰기를 지연할 수 있습니다.</summary>
      <param name="namespaceDeclaration">작성할 XAML 네임스페이스 선언입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" />은 유효한 XAML 네임스페이스 선언이 아닙니다(null 접두사 또는 null 식별자 구성 요소가 있음).</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">현재 작성기 상태는 XAML 네임스페이스 선언 작성을 지원하지 않습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 시작 멤버 노드를 씁니다. XAML 노드 스트림의 현재 위치가 다른 멤버 내에 있거나 시작 멤버를 쓸 수 있는 범위나 작성기 상태에 있지 않으면 예외를 throw합니다.</summary>
      <param name="property">작성할 멤버에 대한 XAML 멤버 식별자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" />은 유효한 <see cref="T:System.Xaml.XamlMember" />이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException">XAML 노드 스트림의 현재 위치는 시작 멤버를 작성하는 데 사용할 수 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">기록기 상태가 시작 구성원을 작성하는 데 유효하지 않습니다.
또는
XAML 기록기가 중복 멤버를 쓰려고 시도했습니다. 이 예외에는 보다 정확한 내부 예외가 있을 수 있습니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 시작 개체 노드를 씁니다. XAML 노드 스트림의 현재 위치가 시작 개체를 쓸 수 있는 범위에 없거나 작성기가 시작 개체를 쓸 수 있는 상태에 있지 않으면 예외를 throw합니다.</summary>
      <param name="type">쓸 개체에 대한 <see cref="T:System.Xaml.XamlType" />(XAML 형식 식별자)입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" />은 유효한 <see cref="T:System.Xaml.XamlType" />이 아닙니다.</exception>
      <exception cref="T:System.InvalidOperationException">XAML 노드 스트림의 현재 위치는 새 시작 개체를 작성하는 데 사용할 수 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 작성기가 새 시작 개체를 작성할 수 없는 상태입니다.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>기본 <see cref="T:System.Xml.XmlWriter" /> 또는 <see cref="T:System.IO.TextWriter" />에 XAML 값 노드를 씁니다. XAML 노드 스트림의 현재 위치가 값을 쓰기에 올바른 위치가 아니거나 작성기가 값을 쓸 수 없는 상태에 있으면 예외를 throw합니다.</summary>
      <param name="value">작성할 값 정보입니다.</param>
      <exception cref="T:System.InvalidOperationException">XAML 노드 스트림의 현재 위치는 값을 작성하는 데 사용할 수 없습니다.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">XAML 기록기 상태는 값 노드 내에서 지원하지 않습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />는 null 또는 문자열이 아닌 값을 지정합니다.</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>특정 <see cref="T:System.Xaml.XamlXmlWriter" /> API에 의해 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 오류를 설명하는 시스템 제공 메시지로 초기화합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 오류를 설명하는 지정된 메시지로 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Xaml.XamlXmlWriterException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 이 생성자의 호출자는 이 문자열이 현재 시스템 문화권에 맞게 지역화되었는지 확인하는 데 필요합니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" /> XAML 작성기 구현에 대한 초기화 설정을 제공합니다.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>중복 확인 또는 기타 오류 검사 시 <see cref="T:System.Xaml.XamlXmlWriter" />가 항상 유효한 XAML 입력을 가정해야 하는지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlXmlWriter" />가 중복 멤버에 대해 예외를 throw하는 등의 특정 유효성 검사나 오류 검사를 건너뛰면 <see langword="true" />이고, <see cref="T:System.Xaml.XamlXmlWriter" />가 잘못된 XAML을 발견할 경우 예외를 throw하면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>
        <see cref="T:System.Xaml.XamlXmlWriter" />가 <see langword="Dispose" /> 또는 기타 작업 시 즉시 닫혀야 하는지 아니면 XAML 작성기가 닫히기 전에 버퍼 출력을 작성해야 하는지를 지정하는 값을 가져오거나 설정합니다. 즉시 닫으면 다시 로드할 수 없는 잘못된 XAML이 만들어질 수 있으므로 이 설정은 신중하게 사용해야 합니다.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlXmlWriter" />가 <see langword="true" /> 또는 유사 작업 시 즉시 닫히면 <see langword="Dispose" />이고, <see cref="T:System.Xaml.XamlXmlWriter" />가 해제되기 전에 남은 버퍼 출력이 작성되면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>이 <see cref="T:System.Xaml.XamlXmlWriterSettings" /> 인스턴스의 복사본을 반환합니다.</summary>
      <returns>반환된 복사본입니다.</returns>
    </member>
  </members>
</doc>
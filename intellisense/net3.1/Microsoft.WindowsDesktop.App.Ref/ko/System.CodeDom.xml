<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>C# 코드 생성기 및 코드 컴파일러의 인스턴스에 액세스합니다.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>
        <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>지정된 공급자 옵션을 사용하여 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerOptions">구성 파일의 공급자 옵션을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>C# 코드 컴파일러의 인스턴스를 가져옵니다.</summary>
      <returns>구현된 C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>C# 코드 생성기 인스턴스를 가져옵니다.</summary>
      <returns>구현된 C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />의 인스턴스입니다.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>소스 코드 파일을 만들 때 사용할 확장명을 가져옵니다.</summary>
      <returns>생성된 소스 코드 파일에 사용할 확장명입니다.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 텍스트 작성기와 코드 생성기 옵션을 사용하여 지정된 클래스 멤버에 대한 코드를 생성합니다.</summary>
      <param name="member">코드를 생성할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <param name="writer">쓸 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성할 때 사용할 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>지정된 개체 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 가져옵니다.</summary>
      <param name="type">형식 변환기를 검색할 개체의 형식입니다.</param>
      <returns>지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Visual Basic 코드 생성기 및 코드 컴파일러의 인스턴스에 액세스합니다.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>
        <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>지정된 공급자 옵션을 사용하여 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerOptions">구성 파일의 공급자 옵션을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Visual Basic 코드 컴파일러의 인스턴스를 가져옵니다.</summary>
      <returns>구현된 Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Visual Basic 코드 생성기 인스턴스를 가져옵니다.</summary>
      <returns>구현된 Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />의 인스턴스입니다.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>소스 코드 파일을 만들 때 사용할 확장명을 가져옵니다.</summary>
      <returns>생성된 소스 코드 파일에 사용할 확장명입니다.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 텍스트 작성기와 코드 생성기 옵션을 사용하여 지정된 클래스 멤버에 대한 코드를 생성합니다.</summary>
      <param name="member">코드를 생성할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <param name="writer">쓸 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성할 때 사용할 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>지정된 개체 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 가져옵니다.</summary>
      <param name="type">형식 변환기를 검색할 개체의 형식입니다.</param>
      <returns>지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />입니다.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>언어 기능 식별자를 가져옵니다.</summary>
      <returns>언어의 특수 기능을 나타내는 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>메서드로 전달된 인수 값에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>지정된 매개 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parameterName">참조할 매개 변수의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>이 식이 참조하는 매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns>참조할 매개 변수의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>배열을 만드는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>지정된 배열 데이터 형식과 배열의 인덱스 수를 나타내는 코드 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="size">만들 배열의 인덱스 수를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>지정된 배열 데이터 형식과 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="initializers">배열을 초기화하는 데 사용하는 식 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>지정된 배열 데이터 형식과 배열의 인덱스 수를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="size">만들 배열의 인덱스 수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 배열 데이터 형식 이름과 배열의 인덱스 수를 나타내는 코드 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식 이름입니다.</param>
      <param name="size">만들 배열의 인덱스 수를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>지정된 배열 데이터 형식 이름과 이니셜라이저를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식 이름입니다.</param>
      <param name="initializers">배열을 초기화하는 데 사용하는 식 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>지정된 배열 데이터 형식 이름과 배열의 인덱스 수를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식 이름입니다.</param>
      <param name="size">만들 배열의 인덱스 수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>지정된 배열 데이터 형식과 배열의 인덱스 수를 나타내는 코드 식을 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식입니다.</param>
      <param name="size">만들 배열의 인덱스 수를 나타내는 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>지정된 배열 데이터 형식과 이니셜라이저를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식입니다.</param>
      <param name="initializers">배열을 초기화하는 데 사용하는 식 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>지정된 배열 데이터 형식과 배열의 인덱스 수를 사용하여 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 배열의 데이터 형식입니다.</param>
      <param name="size">만들 배열의 인덱스 수입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>만들 배열의 형식을 가져오거나 설정합니다.</summary>
      <returns>배열의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>배열을 초기화하는 이니셜라이저를 가져옵니다.</summary>
      <returns>초기화 값을 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>배열의 인덱스 수를 가져오거나 설정합니다.</summary>
      <returns>배열의 인덱스 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>배열의 크기를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns>배열의 크기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>배열의 인덱스에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>지정된 대상 개체와 인덱스를 사용하여 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">해당 인덱서의 대상 배열을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="indices">참조할 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>인덱서 식의 인덱스를 가져오거나 설정합니다.</summary>
      <returns>인덱서 식의 인덱스를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>배열 인덱서의 대상 개체를 가져오거나 설정합니다.</summary>
      <returns>인덱싱되는 배열을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>단순 할당문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAssignStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>지정된 식을 사용하여 <see cref="T:System.CodeDom.CodeAssignStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="left">할당 대상이 되는 변수입니다.</param>
      <param name="right">할당할 값입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>할당 대상이 되는 참조나 개체를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns>할당 대상이 되는 참조나 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>할당할 참조나 개체를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns>할당할 참조나 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>이벤트 처리기 대리자를 이벤트에 연결하는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>지정한 이벤트 로그를 사용하여 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventRef">이벤트 처리기를 연결할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</param>
      <param name="listener">새 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>해당 이벤트, 이벤트 이름 및 이벤트 처리기 대리자를 포함하는 지정된 개체를 사용하여 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="eventName">이벤트 처리기를 연결할 이벤트의 이름입니다.</param>
      <param name="listener">새 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>이벤트 처리기 대리자와 연결할 이벤트를 가져오거나 설정합니다.</summary>
      <returns>이벤트 처리기를 연결할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>이벤트와 연결할 새 이벤트 처리기 대리자를 가져오거나 설정합니다.</summary>
      <returns>연결할 새 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>메타데이터 특성 선언에 사용되는 인수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>지정된 값을 사용하여 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">인수의 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 이름과 값을 사용하여 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">인수가 적용되는 특성 속성의 이름입니다.</param>
      <param name="value">인수의 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>특성의 이름을 가져오거나 설정합니다.</summary>
      <returns>인수가 적용되는 특성 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>특성 인수의 값을 가져오거나 설정합니다.</summary>
      <returns>특성 인수의 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeAttributeArgument" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>특성 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>지정된 코드 형식 참조를 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributeType">특성을 식별하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>지정된 코드 형식 참조 및 인수를 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributeType">특성을 식별하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="arguments">특성에 대한 인수를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>지정한 이름을 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">특성 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>지정된 이름과 인수를 사용하여 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">특성 이름입니다.</param>
      <param name="arguments">특성에 대한 인수를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 형식의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>특성의 인수를 가져옵니다.</summary>
      <returns>특성에 대한 인수를 포함하는 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>코드 특성 선언에 대한 코드 형식 참조를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />을 식별하는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>선언하는 특성의 이름을 가져오거나 설정합니다.</summary>
      <returns>특성 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>지정된 값을 갖는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체가 들어 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <param name="value">찾을 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <returns>지정된 개체의 컬렉션에 인덱스가 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>지정된 인덱스에서 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>기본 클래스에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>두 식 사이의 이항 연산으로 구성된 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>지정된 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="left">연산자 왼쪽에 있는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="op">연산자의 형식을 나타내는 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />입니다.</param>
      <param name="right">연산자 오른쪽에 있는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>연산자 왼쪽에 있는 코드 식을 가져오거나 설정합니다.</summary>
      <returns>왼쪽 피연산자를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>이항 연산자 식에서 연산자를 가져오거나 설정합니다.</summary>
      <returns>식에 포함된 연산자의 형식을 나타내는 <see cref="T:System.CodeDom.CodeBinaryOperatorType" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>연산자 오른쪽에 있는 코드 식을 가져오거나 설정합니다.</summary>
      <returns>오른쪽 피연산자를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>지원되는 이항 연산자의 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>더하기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>대입 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>비트 AND 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>비트 논리합 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>부울 AND 연산자입니다. 이 연산자는 단락(short circuit) 연산자를 나타냅니다. 단락(short circuit) 연산자는 필요한 만큼의 식만 평가한 다음 올바른 값을 반환합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>부울 OR 연산자입니다. 이 연산자는 단락(short circuit) 연산자를 나타냅니다. 단락(short circuit) 연산자는 필요한 만큼의 식만 평가한 다음 올바른 값을 반환합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>나누기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>보다 큼 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>크거나 같음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>ID 같음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>ID 같지 않음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>보다 작음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>작거나 같음 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>나머지 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>곱하기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>빼기 연산자입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>값 같음 연산자입니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>데이터 형식 또는 인터페이스로 변환되는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>지정된 대상 형식 및 식을 사용하여 <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType">변환 대상 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="expression">변환할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 대상 형식 및 식을 사용하여 <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType">변환 대상 형식의 이름입니다.</param>
      <param name="expression">변환할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>지정된 대상 형식 및 식을 사용하여 <see cref="T:System.CodeDom.CodeCastExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType">변환 대상 데이터 형식입니다.</param>
      <param name="expression">변환할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>변환할 식을 가져오거나 설정합니다.</summary>
      <returns>변환할 코드를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>변환 대상 형식을 가져오거나 설정합니다.</summary>
      <returns>변환할 대상 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>
        <see langword="catch" /> 문의 <see langword="try/catch" /> 예외 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>예외에 대해 지정된 지역 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="localName">예외에 대해 catch절에 선언된 지역 변수의 이름입니다. 이 옵션은 선택적입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>예외 및 예외 형식에 대해 지정된 지역 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="localName">예외에 대해 catch절에 선언된 지역 변수의 이름입니다. 이 옵션은 선택적입니다.</param>
      <param name="catchExceptionType">catch할 예외의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>지정된 예외 형식, 예외의 지역 변수 이름 및 문 컬렉션을 사용하여 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="localName">예외에 대해 catch절에 선언된 지역 변수의 이름입니다. 이 옵션은 선택적입니다.</param>
      <param name="catchExceptionType">catch할 예외의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="statements">catch 블록의 내용을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>catch 블록으로 처리할 예외의 형식을 가져오거나 설정합니다.</summary>
      <returns>처리할 예외의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>
        <see langword="catch" /> 절에서 처리하는 예외의 변수 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="catch" /> 절에서 처리하는 예외 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>catch 블록에서 문을 가져옵니다.</summary>
      <returns>catch 블록에 문을 포함하는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeCatchClause" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCatchClause" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeCatchClauseCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>코드 체크섬 pragma 코드 엔터티를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeChecksumPragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>파일 이름, 체크섬 알고리즘을 나타내는 GUID 및 체크섬 데이터를 나타내는 바이트 스트림을 사용하여 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">체크섬 파일에 대한 경로입니다.</param>
      <param name="checksumAlgorithmId">사용할 체크섬 알고리즘을 식별하는 <see cref="T:System.Guid" />입니다.</param>
      <param name="checksumData">체크섬 데이터가 포함된 바이트 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>사용할 체크섬 알고리즘을 식별하는 GUID를 가져오거나 설정합니다.</summary>
      <returns>사용할 체크섬 알고리즘을 식별하는 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>체크섬 계산에 사용할 데이터 값을 가져오거나 설정합니다.</summary>
      <returns>체크섬 계산에 사용할 데이터가 포함된 바이트 배열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>체크섬 파일에 대한 경로를 가져오거나 설정합니다.</summary>
      <returns>체크섬 파일에 대한 경로입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>주석을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>지정된 텍스트를 내용으로 사용하여 <see cref="T:System.CodeDom.CodeComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">주석의 내용입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>지정된 텍스트 및 문서 주석 플래그를 사용하여 <see cref="T:System.CodeDom.CodeComment" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">주석의 내용입니다.</param>
      <param name="docComment">주석이 문서 주석이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>주석이 문서 주석인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>주석이 문서 주석이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>주석의 텍스트를 가져오거나 설정합니다.</summary>
      <returns>주석 텍스트가 들어 있는 문자열입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>단일 주석으로 구성되는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>지정된 주석을 사용하여 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comment">주석을 나타내는 <see cref="T:System.CodeDom.CodeComment" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>지정된 텍스트를 내용으로 사용하여 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">주석의 내용입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>지정된 텍스트 및 문서 주석 플래그를 사용하여 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">주석의 내용입니다.</param>
      <param name="docComment">주석이 문서 주석이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>주석의 내용을 가져오거나 설정합니다.</summary>
      <returns>주석을 나타내는 <see cref="T:System.CodeDom.CodeComment" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeCommentStatement" />입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>해당 컬렉션 개체를 지정된 인덱스에서 시작하여 지정된 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeCommentStatementCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>컬렉션의 지정된 인덱스에 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 삽입합니다.</summary>
      <param name="index">항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeCommentStatement" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>CodeDOM 프로그램 그래프에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>생성된 어셈블리에 대한 사용자 지정 특성 컬렉션을 가져옵니다.</summary>
      <returns>생성된 어셈블리에 대한 사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>종료 지시문이 들어 있는 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns>끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>네임스페이스의 컬렉션을 가져옵니다.</summary>
      <returns>컴파일 단위가 사용하는 네임스페이스를 나타내는 <see cref="T:System.CodeDom.CodeNamespaceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>참조된 어셈블리를 가져옵니다.</summary>
      <returns>참조된 어셈블리의 파일 이름을 포함하는 <see cref="T:System.Collections.Specialized.StringCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>시작 지시문이 들어 있는 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns>시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>조건 분기 문을 나타내며, 일반적으로 <see langword="if" /> 문으로 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeConditionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>지정된 조건과 문을 사용하여 <see cref="T:System.CodeDom.CodeConditionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="condition">확인할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="trueStatements">조건이 <see langword="true" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>지정된 조건과 문을 사용하여 <see cref="T:System.CodeDom.CodeConditionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="condition">확인할 조건을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="trueStatements">조건이 <see langword="true" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
      <param name="falseStatements">조건이 <see langword="false" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>
        <see langword="true" /> 또는 <see langword="false" />인지 확인할 식을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> 또는 <see langword="false" />인지 확인할 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>조건식이 <see langword="false" />인 경우 실행할 문의 컬렉션을 가져옵니다.</summary>
      <returns>조건식이 <see langword="false" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>조건식이 <see langword="true" />인 경우 실행할 문의 컬렉션을 가져옵니다.</summary>
      <returns>조건식이 <see langword="true" />인 경우 실행할 문이 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>형식의 인스턴스 생성자에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeConstructor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>기본 생성자 인수의 컬렉션을 가져옵니다.</summary>
      <returns>기본 생성자 인수를 포함하는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>연결된 생성자 인수를 가져오거나 설정합니다.</summary>
      <returns>연결된 생성자 인수를 포함하는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>기본값에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>지정된 코드 형식 참조를 사용하여 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">값 형식에 대한 참조를 지정하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>기본값의 데이터 형식 참조를 가져오거나 설정합니다.</summary>
      <returns>기본값이 있는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>대리자를 만드는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="delegateType">대리자의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="targetObject">이벤트 처리기 메서드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName">이벤트 처리기 메서드의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>대리자의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>대리자의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>이벤트 처리기 메서드의 이름을 가져오거나 설정합니다.</summary>
      <returns>이벤트 처리기 메서드의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>이벤트 처리기 메서드가 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns>이벤트 처리기 메서드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>이벤트를 발생시키는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>지정된 대상 개체를 사용하여 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>지정된 대상 개체와 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="parameters">매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>이벤트와 연결된 이벤트 처리 메서드에 전달할 매개 변수를 가져오거나 설정합니다.</summary>
      <returns>이벤트와 연결된 이벤트 처리 메서드에 전달할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>호출할 이벤트를 가져오거나 설정합니다.</summary>
      <returns>호출할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>메서드에서 참조 방향 표시기와 함께 매개 변수를 호출할 때 사용되는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDirectionExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>지정된 필드 방향과 식을 사용하여 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="direction">식의 필드 방향을 나타내는 <see cref="T:System.CodeDom.FieldDirection" />입니다.</param>
      <param name="expression">나타낼 코드 식을 지정하는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>이 방향 식에 대한 필드 방향을 가져오거나 설정합니다.</summary>
      <returns>이 방향 식에 대한 필드 방향을 나타내는 <see cref="T:System.CodeDom.FieldDirection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>나타낼 코드 식을 가져오거나 설정합니다.</summary>
      <returns>나타낼 식을 지정하는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>코드 지시문 클래스의 기본 클래스 역할을 합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeDirective" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>지정된 배열의 코드 지시문 개체를 사용하여 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeDirective" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>지정된 코드 지시문 컬렉션의 요소를 사용하여 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스 위치입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>
        <see cref="T:System.CodeDom.CodeDirective" /> 개체의 배열을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeDirective" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체가 포함된 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체가 포함되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>지정된 인덱스에서 시작하는 1차원 배열에 컬렉션의 내용을 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 <see cref="T:System.CodeDom.CodeDirective" /> 형식의 배열입니다.</param>
      <param name="index">컬렉션 개체의 삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeDirectiveCollection" />의 요소 수가 <paramref name="index" />에서 지정하는 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체가 컬렉션에 있는 경우 해당 개체의 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <returns>지정된 개체의 컬렉션에 인덱스 위치가 있으면 해당 인덱스 위치이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">지정된 개체를 삽입해야 하는 인덱스 위치(0부터 시작)입니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우
또는
<paramref name="index" />가 <see cref="P:System.Collections.CollectionBase.Count" />보다 큰 경우</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 인덱스 위치입니다.</param>
      <returns>인덱스 위치에 있는 <see cref="T:System.CodeDom.CodeDirective" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 컬렉션의 유효한 인덱스 위치 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeDirective" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeDirective" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>실행 파일의 진입점 메서드를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeEntryPointMethod" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>이벤트에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>지정된 대상 개체와 이벤트 이름을 사용하여 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="eventName">참조할 이벤트의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>이벤트의 이름을 가져오거나 설정합니다.</summary>
      <returns>이벤트의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>해당 이벤트가 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns>해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>코드 식을 나타냅니다. 이 클래스는 초기화되지 않는 다른 코드 식 개체의 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeExpression" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>지정된 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeExpression" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 개체의 내용을 컬렉션 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeExpressionCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 0부터 시작하는 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>단일 식으로 구성된 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeExpressionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>지정된 식을 사용하여 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">문에 대한 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>문에 대한 식을 가져오거나 설정합니다.</summary>
      <returns>문에 대한 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>필드에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>지정된 대상 개체와 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">해당 필드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="fieldName">필드의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>참조할 필드의 이름을 가져오거나 설정합니다.</summary>
      <returns>필드 이름을 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>참조할 필드가 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns>참조할 필드가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>
        <see langword="goto" /> 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeGotoStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>지정된 레이블 이름을 사용하여 <see cref="T:System.CodeDom.CodeGotoStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label">프로그램 실행을 계속할 위치의 레이블 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>프로그램 실행을 계속할 위치의 레이블 이름을 가져오거나 설정합니다.</summary>
      <returns>프로그램 실행을 계속할 위치의 레이블 이름을 나타내는 문자열입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" /> 또는 빈 문자열이기 때문에 레이블을 설정할 수 없습니다.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>개체의 인덱서 속성에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>지정된 대상 개체와 인덱스를 사용하여 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">대상 개체입니다.</param>
      <param name="indices">인덱서 식의 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>인덱서 식의 인덱스 컬렉션을 가져옵니다.</summary>
      <returns>인덱서 식의 인덱스를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>인덱스 작업을 수행할 수 있는 대상 개체를 가져오거나 설정합니다.</summary>
      <returns>인덱서 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>테스트 식을 반복 조건으로 사용하여 <see langword="for" /> 문 또는 문의 블록을 통한 루프를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>지정된 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeIterationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="initStatement">루프 초기화 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="testExpression">종료 조건을 테스트할 식이 포함된 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="incrementStatement">주기별 증분 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="statements">루프 내의 문이 포함된 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>각 루프 주기 다음에 호출되는 문을 가져오거나 설정합니다.</summary>
      <returns>주기별 증분 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>루프 초기화 문을 가져오거나 설정합니다.</summary>
      <returns>루프 초기화 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>루프 내에서 실행되는 문의 컬렉션을 가져옵니다.</summary>
      <returns>루프 내의 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 형식의 배열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>루프를 계속할 조건으로 테스트할 식을 가져오거나 설정합니다.</summary>
      <returns>테스트할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>레이블 문 또는 독립 실행형 레이블을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeLabeledStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>지정된 레이블 이름을 사용하여 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label">레이블의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>지정된 레이블 이름과 문을 사용하여 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="label">레이블의 이름입니다.</param>
      <param name="statement">레이블에 연결할 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>레이블의 이름을 가져오거나 설정합니다.</summary>
      <returns>레이블의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>선택적인 관련 문을 가져오거나 설정합니다.</summary>
      <returns>레이블과 관련된 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>특정 파일 내의 특정 위치를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeLinePragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>
        <see cref="T:System.CodeDom.CodeLinePragma" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">관련 파일의 파일 이름입니다.</param>
      <param name="lineNumber">참조를 저장할 줄 번호입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>관련 파일의 이름을 가져오거나 설정합니다.</summary>
      <returns>관련 파일의 파일 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>관련 참조의 줄 번호를 가져오거나 설정합니다.</summary>
      <returns>줄 번호입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>형식의 이벤트에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberEvent" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>멤버 이벤트가 구현하는 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>멤버 이벤트가 구현하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>프라이빗하게 구현된 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>이벤트가 프라이빗하게 구현하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>이벤트를 처리하는 대리자 형식의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>이벤트를 처리하는 대리자 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>형식의 필드에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>지정된 필드 형식과 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">필드 형식을 나타내는 개체입니다.</param>
      <param name="name">필드의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>지정된 필드 형식과 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">필드의 형식입니다.</param>
      <param name="name">필드의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>지정된 필드 형식과 필드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMemberField" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">필드의 형식입니다.</param>
      <param name="name">필드의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>필드의 초기화 식을 가져오거나 설정합니다.</summary>
      <returns>필드의 초기화 식입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>필드의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>필드의 형식입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>형식의 메서드에 대한 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberMethod" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>메서드가 <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> 속성에서 표시되는 프라이빗 메서드 구현이 아닌 경우 이 메서드에서 구현되는 인터페이스의 데이터 형식을 가져옵니다.</summary>
      <returns>이 메서드에서 구현된 인터페이스를 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>해당 메서드의 매개 변수 선언을 가져옵니다.</summary>
      <returns>메서드 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>
        <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>
        <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>
        <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>이 메서드의 데이터 형식이 프라이빗할 경우 이를 가져오거나 설정하고, 메서드가 있으면 이를 구현합니다.</summary>
      <returns>프라이빗 메서드의 선언이 <see cref="T:System.CodeDom.CodeTypeReference" /> 구현으로 표현되는 메서드로 인터페이스의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeMemberMethod" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>메서드 반환 값의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>메서드에서 반환된 값의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>메서드의 반환 형식에 대한 사용자 지정 특성을 가져옵니다.</summary>
      <returns>사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>메서드의 문을 가져옵니다.</summary>
      <returns>메서드의 문을 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>현재 제네릭 메서드의 형식 매개 변수를 가져옵니다.</summary>
      <returns>제네릭 메서드의 형식 매개 변수가 포함된 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>형식의 속성 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMemberProperty" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>속성에 대한 <see langword="get" /> 문의 컬렉션을 가져옵니다.</summary>
      <returns>멤버 속성의 <see langword="get" /> 문을 포함하는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>속성에 <see langword="get" /> 메서드 접근자가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> 컬렉션의 <see langword="true" /> 속성이 0이 아니거나 이 속성 값이 <see langword="Count" />로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>속성에 <see langword="set" /> 메서드 접근자가 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Collections.CollectionBase.Count" /> 컬렉션의 <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> 속성이 0이 아니면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>속성이 구현하는 인터페이스의 데이터 형식을 가져옵니다.</summary>
      <returns>속성이 구현하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>속성에 대한 선언 식의 컬렉션을 가져옵니다.</summary>
      <returns>속성의 선언 식을 나타내는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>인터페이스가 있을 경우 인터페이스의 데이터 형식을 가져오거나 설정하고, 이 속성이 프라이빗일 경우 구현합니다.</summary>
      <returns>인터페이스가 있을 경우 인터페이스의 데이터 형식을 나타내고 이 속성이 프라이빗일 경우 구현하는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>속성에 대한 <see langword="set" /> 문의 컬렉션을 가져옵니다.</summary>
      <returns>멤버 속성의 <see langword="set" /> 문을 포함하는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>속성의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>속성의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>메서드를 호출하는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>지정된 대상 개체, 메서드 이름 및 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">대상 개체와 호출할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName">호출할 메서드의 이름입니다.</param>
      <param name="parameters">메서드를 호출하는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>지정된 메서드 및 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="method">호출할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />입니다.</param>
      <param name="parameters">메서드를 호출하는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>호출할 메서드를 가져오거나 설정합니다.</summary>
      <returns>호출할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>메서드를 호출하는 데 사용할 매개 변수를 가져옵니다.</summary>
      <returns>메서드를 호출하는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>메서드에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>지정된 대상 개체와 메서드 이름을 사용하여 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName">호출할 메서드의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>지정된 대상 개체, 메서드 이름 및 제네릭 형식 인수를 사용하여 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">대상 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="methodName">호출할 메서드의 이름입니다.</param>
      <param name="typeParameters">이 <see cref="T:System.CodeDom.CodeTypeReference" />의 <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" />를 지정하는 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 값의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>참조할 메서드의 이름을 가져오거나 설정합니다.</summary>
      <returns>참조할 메서드의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>참조할 메서드를 나타내는 식을 가져오거나 설정합니다.</summary>
      <returns>참조할 메서드를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>현재 제네릭 메서드 참조 식의 형식 인수를 가져옵니다.</summary>
      <returns>현재 코드 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />의 형식 인수가 포함된 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>반환 값 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>지정된 식을 사용하여 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="expression">반환 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>반환 값을 가져오거나 설정합니다.</summary>
      <returns>return 문의 반환 값을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />이거나 해당 문이 서브루틴의 일부인 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>네임스페이스 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>지정한 이름을 사용하여 <see cref="T:System.CodeDom.CodeNamespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">선언되는 네임스페이스의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>네임스페이스의 주석을 가져옵니다.</summary>
      <returns>네임스페이스의 주석을 나타내는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>네임스페이스에서 사용되는 네임스페이스를 가져오는 지시문의 컬렉션을 가져옵니다.</summary>
      <returns>네임스페이스에서 사용되는 네임스페이스를 가져오는 지시문을 나타내는 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>네임스페이스의 이름을 가져오거나 설정합니다.</summary>
      <returns>네임스페이스의 이름입니다.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>
        <see cref="P:System.CodeDom.CodeNamespace.Comments" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>
        <see cref="P:System.CodeDom.CodeNamespace.Imports" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>
        <see cref="P:System.CodeDom.CodeNamespace.Types" /> 컬렉션을 처음 액세스할 때 발생되는 이벤트입니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>네임스페이스에 들어 있는 형식 컬렉션을 가져옵니다.</summary>
      <returns>네임스페이스에 포함된 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespace" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체 배열이 들어 있는 <see cref="T:System.CodeDom.CodeNamespace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeNamespace" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>지정된 소스 컬렉션의 요소가 들어 있는 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeNamespaceCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeNamespace" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeNamespaceCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeNamespace" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>지정된 인덱스에서 시작하여 컬렉션 개체를 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeNamespaceCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespace" />에 지정된 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <returns>지정된 <see cref="T:System.CodeDom.CodeNamespace" />가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">새 항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeNamespace" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>사용할 네임스페이스를 나타내는 네임스페이스를 가져오는 지시문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>가져오도록 지정된 네임스페이스를 사용하여 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="nameSpace">가져올 네임스페이스의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>문이 있는 줄 및 파일을 가져오거나 설정합니다.</summary>
      <returns>문의 컨텍스트를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>가져올 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>가져올 네임스페이스의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>컬렉션에 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체를 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체 집합을 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>멤버의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>컬렉션의 네임스페이스 수를 가져옵니다.</summary>
      <returns>컬렉션의 네임스페이스 수입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>컬렉션 멤버를 열거하는 열거자를 가져옵니다.</summary>
      <returns>컬렉션 멤버를 나타내는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 1차원 <see cref="T:System.Collections.ICollection" />입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  이 속성은 항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션에서 반복할 수 있는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 개체를 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>
        <see cref="T:System.Collections.IList" />에서 항목을 모두 제거합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>값이 목록에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />의 지정된 위치에 항목을 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.IList" />에 삽입할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 속성은 항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 제거할 <see cref="T:System.Collections.IList" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.IList" />의 지정한 인덱스에서 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>대부분의 CodeDOM(Code Document Object Model) 개체에 대한 공통 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>현재 개체에 대해 사용자 정의 가능한 데이터를 가져옵니다.</summary>
      <returns>현재 개체에 대한 사용자 데이터가 들어 있는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>형식의 새 인스턴스를 만드는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>지정된 형식과 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 개체의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="parameters">개체를 만드는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>지정된 형식과 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 개체의 데이터 형식 이름입니다.</param>
      <param name="parameters">개체를 만드는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>지정된 형식과 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="createType">만들 개체의 데이터 형식입니다.</param>
      <param name="parameters">개체를 만드는 데 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>만들 개체의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>만들 개체의 데이터 형식에 대한 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>개체를 만드는 데 사용할 매개 변수를 가져오거나 설정합니다.</summary>
      <returns>개체를 만들 때 사용할 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeExpressionCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>메서드, 속성 또는 생성자에 대한 매개 변수 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>지정된 매개 변수 형식과 이름을 사용하여 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">선언할 매개 변수의 형식을 나타내는 개체입니다.</param>
      <param name="name">선언할 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>지정된 매개 변수 형식과 이름을 사용하여 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">선언할 매개 변수의 형식입니다.</param>
      <param name="name">선언할 매개 변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>지정된 매개 변수 형식과 이름을 사용하여 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">선언할 매개 변수의 형식입니다.</param>
      <param name="name">선언할 매개 변수 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>매개 변수 선언의 사용자 지정 특성을 가져오거나 설정합니다.</summary>
      <returns>사용자 지정 특성을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>필드의 방향을 가져오거나 설정합니다.</summary>
      <returns>필드 방향을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns>매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>매개 변수의 형식을 가져오거나 설정합니다.</summary>
      <returns>매개 변수의 형식입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">배열에 있는 하나 이상의 개체가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>지정된 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>컬렉션에 지정한 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>지정한 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />의 컬렉션에 인덱스가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <returns>지정된 개체의 컬렉션에 인덱스가 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>기본 데이터 형식 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>지정된 개체를 사용하여 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">나타낼 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>나타낼 기본 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>값을 나타낼 기본 데이터 형식 인스턴스입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>속성 값에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>지정된 대상 개체와 속성 이름을 사용하여 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">참조할 속성이 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="propertyName">참조할 속성의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>참조할 속성의 이름을 가져오거나 설정합니다.</summary>
      <returns>참조할 속성의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>참조할 속성이 들어 있는 개체를 가져오거나 설정합니다.</summary>
      <returns>참조할 속성이 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>property set 메서드에서 property set 메서드 호출의 값 인수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>코드 영역의 이름과 모드를 지정합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.CodeDom.CodeRegionDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>모드와 이름을 지정하여 <see cref="T:System.CodeDom.CodeRegionDirective" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="regionMode">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 값 중 하나입니다.</param>
      <param name="regionText">영역의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>영역 지시문의 모드를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeRegionMode" /> 값 중 하나입니다. 기본값은 <see cref="F:System.CodeDom.CodeRegionMode.None" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>영역의 이름을 가져오거나 설정합니다.</summary>
      <returns>영역의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>코드 영역의 시작 또는 끝을 지정합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>영역의 끝입니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>사용되지 않습니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>영역의 시작입니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>이벤트 처리기를 제거하는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>지정된 이벤트와 이벤트 처리기를 사용하여 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventRef">이벤트 처리기를 분리할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</param>
      <param name="listener">제거할 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 대상 개체, 이벤트 이름 및 이벤트 처리기를 사용하여 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetObject">해당 이벤트가 들어 있는 개체를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="eventName">이벤트의 이름입니다.</param>
      <param name="listener">제거할 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>수신기를 제거할 이벤트를 가져오거나 설정합니다.</summary>
      <returns>수신기를 제거할 이벤트를 나타내는 <see cref="T:System.CodeDom.CodeEventReferenceExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>제거할 이벤트 처리기를 가져오거나 설정합니다.</summary>
      <returns>제거할 이벤트 처리기를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>컴파일할 수 있는 리터럴 코드 단편을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">나타낼 리터럴 코드 단편입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>소스 코드 문서에서 코드가 있는 위치에 대한 줄 및 파일 정보를 가져오거나 설정합니다.</summary>
      <returns>코드 단편의 위치를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>나타낼 리터럴 코드 단편을 가져오거나 설정합니다.</summary>
      <returns>리터럴 코드 단편입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>리터럴 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>지정된 리터럴 식을 사용하여 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">나타낼 리터럴 식입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>코드의 리터럴 문자열을 가져오거나 설정합니다.</summary>
      <returns>리터럴 문자열입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>리터럴 코드 단편을 사용하여 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>지정된 코드 단편을 사용하여 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">나타낼 문의 리터럴 코드 단편입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>리터럴 코드 단편 문을 가져오거나 설정합니다.</summary>
      <returns>리터럴 코드 단편 문입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>리터럴 코드 단편을 사용하는 형식의 멤버를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>지정된 텍스트를 사용하여 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="text">형식 멤버에 대한 리터럴 코드 단편입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>형식 멤버에 대한 리터럴 코드 단편을 가져오거나 설정합니다.</summary>
      <returns>형식 멤버에 대한 리터럴 코드 단편입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>모든 코드 문이 파생되는 <see langword="abstract" /> 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns>끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>코드 문이 있는 줄을 가져오거나 설정합니다.</summary>
      <returns>코드 문의 컨텍스트를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체를 가져옵니다.</summary>
      <returns>시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체 배열이 들어 있는 <see cref="T:System.CodeDom.CodeStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>지정된 소스 컬렉션의 요소가 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeExpression" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeStatement" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" /> 개체 집합을 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체의 내용을 컬렉션 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeStatement" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>
        <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체의 요소를 지정된 인덱스에서 시작하여 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeStatementCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>
        <see cref="T:System.CodeDom.CodeStatement" />에 지정된 <see cref="T:System.CodeDom.CodeStatementCollection" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeStatement" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeStatement" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>현재 지역 클래스 인스턴스에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>예외를 throw하는 문을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>지정된 예외 형식 인스턴스를 사용하여 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="toThrow">throw할 예외를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>throw할 예외를 가져오거나 설정합니다.</summary>
      <returns>throw할 예외의 인스턴스를 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>여러 개의 <see langword="try" /> 절을 가진 <see langword="catch" /> 블록과 선택적으로 <see langword="finally" /> 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>try 및 catch 절에 대해 지정한 문을 사용하여 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tryStatements">try할 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <param name="catchClauses">catch할 절을 나타내는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>try 절, catch 절 및 finally 문에 대해 지정한 문을 사용하여 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tryStatements">try할 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
      <param name="catchClauses">catch할 절을 나타내는 <see cref="T:System.CodeDom.CodeCatchClause" /> 개체의 배열입니다.</param>
      <param name="finallyStatements">사용할 finally 문을 나타내는 <see cref="T:System.CodeDom.CodeStatement" /> 개체의 배열입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>사용할 catch 절을 가져옵니다.</summary>
      <returns>사용할 catch 절을 나타내는 <see cref="T:System.CodeDom.CodeCatchClauseCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>사용할 finally 문을 가져옵니다.</summary>
      <returns>finally 문을 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>try할 문을 가져옵니다.</summary>
      <returns>try할 문을 나타내는 <see cref="T:System.CodeDom.CodeStatementCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>클래스의 정적 생성자를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeConstructor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>클래스, 구조체, 인터페이스 또는 열거형의 형식 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">새 형식의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>해당 형식의 기본 형식을 가져옵니다.</summary>
      <returns>형식의 기본 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>해당 형식이 클래스인지 또는 참조 형식인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>형식이 클래스 또는 참조 형식이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>해당 형식이 열거형인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>형식이 열거형이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>해당 형식이 인터페이스인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>형식이 인터페이스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>형식 선언이 완전한지 또는 부분적인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>클래스 또는 구조체 선언이 부분적인 구현을 나타내면 <see langword="true" />이고, 완전한 구현이면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>형식이 값 형식(구조체)인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>형식이 값 형식이면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>표시된 형식에 대한 클래스 멤버의 컬렉션을 가져옵니다.</summary>
      <returns>클래스 멤버를 나타내는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 개체입니다.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>
        <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 컬렉션에 처음 액세스할 때 발생합니다.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>
        <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 컬렉션에 처음 액세스할 때 발생합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>형식의 특성을 가져오거나 설정합니다.</summary>
      <returns>형식의 특성을 나타내는 <see cref="T:System.Reflection.TypeAttributes" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>형식 선언에 대한 형식 매개 변수를 가져옵니다.</summary>
      <returns>형식 선언에 대한 형식 매개 변수가 들어 있는 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체 배열이 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>지정된 소스 컬렉션의 요소가 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>지정된 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체의 내용을 컬렉션 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>지정된 인덱스에서 시작하여 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체의 요소를 1차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />에 지정된 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</param>
      <returns>지정된 개체가 컬렉션에 있으면 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>대리자 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">대리자 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>대리자의 매개 변수 이름을 가져옵니다.</summary>
      <returns>대리자의 매개 변수를 나타내는 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>대리자의 반환 형식을 가져오거나 설정합니다.</summary>
      <returns>대리자의 반환 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>형식의 멤버에 대한 기본 클래스를 제공합니다. 형식 멤버에는 필드, 메서드, 속성, 생성자 및 중첩 형식이 있습니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>멤버의 특성을 가져오거나 설정합니다.</summary>
      <returns>멤버의 특성을 나타내는 데 사용하는 <see cref="T:System.CodeDom.MemberAttributes" /> 값의 비트 조합입니다. 기본값 <see cref="F:System.CodeDom.MemberAttributes.Private" />  | 은 입니다. <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>형식 멤버의 주석 컬렉션을 가져옵니다.</summary>
      <returns>멤버의 주석을 나타내는 <see cref="T:System.CodeDom.CodeCommentStatementCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>멤버의 사용자 지정 특성을 가져오거나 설정합니다.</summary>
      <returns>멤버의 사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>멤버의 종료 지시문을 가져옵니다.</summary>
      <returns>끝 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>형식 멤버 문이 있는 줄을 가져오거나 설정합니다.</summary>
      <returns>형식 멤버 선언의 위치를 나타내는 <see cref="T:System.CodeDom.CodeLinePragma" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>멤버의 이름을 가져오거나 설정합니다.</summary>
      <returns>멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>멤버의 시작 지시문을 가져옵니다.</summary>
      <returns>시작 지시문이 포함된 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMember" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeTypeMember" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeMember" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>지정된 값을 가진 <see cref="T:System.CodeDom.CodeTypeMember" />를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeMember" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeMember" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>다른 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeMemberCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>컬렉션에 지정한 <see cref="T:System.CodeDom.CodeTypeMember" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <returns>컬렉션에 지정한 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">대상 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeTypeMemberCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>지정한 <see cref="T:System.CodeDom.CodeTypeMember" />의 컬렉션에 인덱스가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <returns>지정된 개체의 컬렉션에 인덱스가 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeMember" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 지정된 개체를 삽입해야 합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeMember" />를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>컬렉션에서 특정 <see cref="T:System.CodeDom.CodeTypeMember" />를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeMember" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>
        <see langword="typeof" /> 식 또는 지정된 형식 이름에 대한 <see cref="T:System.Type" />을 반환하는 식을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">
        <see langword="typeof" /> 식의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">
        <see langword="typeof" /> 식에 대한 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">
        <see langword="typeof" /> 식의 데이터 형식입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>
        <see langword="typeof" /> 식이 참조하는 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="typeof" /> 식이 참조하는 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다. 이 속성은 <see langword="null" />을 반환하지 않으며 기본값으로 <see cref="T:System.Void" /> 형식을 사용합니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>제네릭 형식이나 메서드의 형식 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>지정된 형식 매개 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">형식 매개 변수의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>형식 매개 변수에 대한 제약 조건을 가져옵니다.</summary>
      <returns>형식 매개 변수에 대한 제약 조건을 포함하는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>형식 매개 변수의 사용자 지정 특성을 가져옵니다.</summary>
      <returns>형식 매개 변수의 사용자 지정 특성을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>형식 매개 변수에 생성자 제약 조건이 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>형식 매개 변수에 생성자 제약 조건이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>형식 매개 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns>형식 매개 변수의 이름입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 클래스의 비어 있는 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeTypeParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeTypeParameter" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스이며 0부터 시작합니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>지정된 데이터 형식 이름을 사용하여 지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 추가할 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeParameter" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeParameterCollection" />의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeParameter" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 포함되는지 여부를 결정합니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>컬렉션의 항목을 지정된 1차원 <see cref="T:System.Array" />의 지정된 인덱스에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeTypeParameterCollection" />의 요소 수가 <paramref name="index" />에서 지정하는 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 대상 배열의 최저 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 컬렉션에 있는 경우 해당 개체의 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
      <returns>지정한 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체가 컬렉션에 있는 경우 이 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션 개체의 인덱스이며 0부터 시작합니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 컬렉션의 유효한 인덱스 범위를 벗어납니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>컬렉션에서 지정된 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeParameter" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>형식에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>지정된 코드 형식 매개 변수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeParameter">형식 매개 변수의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeParameter" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>지정된 배열 형식과 차수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="arrayType">배열의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="rank">배열의 차수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>지정된 형식 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">참조할 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>지정된 형식 이름 및 형식 인수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">참조할 형식의 이름입니다.</param>
      <param name="typeArguments">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 값의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>지정된 형식 이름 및 코드 형식 참조 옵션을 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">참조할 형식의 이름입니다.</param>
      <param name="codeTypeReferenceOption">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 값 중 하나인 코드 형식 참조 옵션입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>지정된 배열 형식 이름과 차수를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="baseType">배열 요소의 형식 이름입니다.</param>
      <param name="rank">배열의 차수입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">참조할 <see cref="T:System.Type" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>지정된 형식 및 코드 형식 참조를 사용하여 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">참조할 <see cref="T:System.Type" />입니다.</param>
      <param name="codeTypeReferenceOption">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 값 중 하나인 코드 형식 참조 옵션입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>배열 요소의 형식을 가져오거나 설정합니다.</summary>
      <returns>배열 요소의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>배열 차수를 가져오거나 설정합니다.</summary>
      <returns>배열의 차수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>참조되는 형식의 이름을 가져오거나 설정합니다.</summary>
      <returns>참조되는 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>코드 형식 참조 옵션을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 값의 비트 조합입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>현재 제네릭 형식 참조에 대한 형식 인수를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체에 대한 형식 인수가 들어 있는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReference" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.CodeTypeReference" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeReference" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>지정된 소스 컬렉션의 요소를 포함하는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReference" />를 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>지정된 데이터 형식 이름을 사용하는 컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가합니다.</summary>
      <param name="value">컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가할 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>지정된 데이터 형식을 사용하는 컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가합니다.</summary>
      <param name="value">컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 추가할 데이터 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReference" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeReference" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />의 내용을 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체를 포함하는 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>컬렉션에 지정한 <see cref="T:System.CodeDom.CodeTypeReference" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReference" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>컬렉션의 항목을 지정된 1차원 <see cref="T:System.Array" />의 지정된 인덱스에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 매개 변수가 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.CodeTypeReferenceCollection" />의 요소 수가 <paramref name="index" /> 매개 변수에서 지정한 대상 배열 인덱스와 대상 배열 끝 사이의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 대상 배열의 최소 인덱스보다 작은 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>지정한 <see cref="T:System.CodeDom.CodeTypeReference" />의 컬렉션에 인덱스가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns>지정된 <see cref="T:System.CodeDom.CodeTypeReference" />의 인덱스가 해당 컬렉션에 있으면 반환 값은 해당 인덱스이고 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>지정된 인덱스의 컬렉션에 <see cref="T:System.CodeDom.CodeTypeReference" />를 삽입합니다.</summary>
      <param name="index">항목을 삽입할 인덱스이며 0부터 시작합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeReference" />를 가져오거나 설정합니다.</summary>
      <param name="index">액세스할 컬렉션의 인덱스입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReference" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>데이터 형식에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>지정한 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">참조할 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>지정된 데이터 형식 이름을 사용하여 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">참조할 데이터 형식의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>지정된 데이터 형식을 사용하여 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">참조할 데이터 형식의 인스턴스입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>참조할 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>참조할 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>코드 형식 참조를 확인할 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>형식 매개 변수에서 형식을 확인합니다.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>루트 네임스페이스에서 형식을 확인합니다.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>변수 선언을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>지정된 형식 및 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변수의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="name">변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 데이터 형식, 변수 이름 및 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변수의 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <param name="name">변수 이름입니다.</param>
      <param name="initExpression">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>지정된 데이터 형식 이름 및 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변수에 대한 데이터 형식의 이름입니다.</param>
      <param name="name">변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 데이터 형식, 변수 이름 및 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변수에 대한 데이터 형식의 이름입니다.</param>
      <param name="name">변수 이름입니다.</param>
      <param name="initExpression">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>지정된 데이터 형식 및 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변수의 데이터 형식입니다.</param>
      <param name="name">변수 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>지정된 데이터 형식, 변수 이름 및 초기화 식을 사용하여 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">변수의 데이터 형식입니다.</param>
      <param name="name">변수 이름입니다.</param>
      <param name="initExpression">변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>변수의 초기화 식을 가져오거나 설정합니다.</summary>
      <returns>변수의 초기화 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>변수의 이름을 가져오거나 설정합니다.</summary>
      <returns>변수 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>변수의 데이터 형식을 가져오거나 설정합니다.</summary>
      <returns>변수의 데이터 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>지역 변수에 대한 참조를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>
        <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>지정된 지역 변수 이름을 사용하여 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="variableName">참조할 지역 변수의 이름입니다.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>참조할 지역 변수의 이름을 가져오거나 설정합니다.</summary>
      <returns>참조할 지역 변수의 이름입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 인터페이스의 예제 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />에서 컴파일러에 전달될 명령 인수를 가져옵니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />입니다.</param>
      <returns>명령 인수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>컴파일러 실행 파일의 이름을 가져옵니다.</summary>
      <returns>컴파일러 실행 파일의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>소스 파일에 사용할 확장명을 가져옵니다.</summary>
      <returns>소스 파일에 사용할 확장명입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>지정된 옵션을 사용하여 지정된 컴파일 단위를 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="e">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 개체입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>지정된 옵션을 사용하여 지정된 컴파일 단위를 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="ea">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 개체의 배열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />입니다.
또는
<paramref name="ea" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>지정된 옵션을 사용하여 지정된 파일을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileName">컴파일할 파일 이름입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />입니다.
또는
<paramref name="fileName" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>지정된 옵션을 사용하여 지정된 파일을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames">컴파일할 파일의 파일 이름을 나타내는 문자열의 배열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />인 경우
또는
<paramref name="fileNames" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>지정된 옵션을 사용하여 지정된 소스 코드 문자열을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="source">컴파일할 소스 코드 문자열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>지정된 옵션을 사용하여 지정된 소스 코드 문자열을 컴파일한 다음 컴파일 결과를 반환합니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources">컴파일할 소스 코드를 포함하는 문자열의 배열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />입니다.
또는
<paramref name="sources" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>컴파일러를 호출할 때 지시 파일을 생성하는 데 사용할 명령 인수를 가져옵니다.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="cmdArgs">명령 인수 문자열입니다.</param>
      <returns>지시 파일을 생성하는 데 사용할 명령 인수이거나 지시 파일 인수가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>지정된 문자열 배열을 연결합니다.</summary>
      <param name="sa">연결할 문자열의 배열입니다.</param>
      <param name="separator">사용할 구분 기호입니다.</param>
      <returns>연결된 문자열입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.CompilerResults" />에서 지정된 줄을 처리합니다.</summary>
      <param name="results">컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" />입니다.</param>
      <param name="line">처리할 줄입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />를 참조하세요.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="e">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />를 참조하세요.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="ea">컴파일할 소스를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 개체의 배열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />를 참조하세요.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileName">컴파일할 파일 이름입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />를 참조하세요.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames">컴파일할 파일 이름을 나타내는 문자열 배열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />를 참조하세요.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="source">컴파일할 소스 코드를 나타내는 문자열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />를 참조하십시오.</summary>
      <param name="options">컴파일러 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources">컴파일할 소스 코드를 나타내는 문자열의 배열입니다.</param>
      <returns>컴파일 결과입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현을 위한 기본 클래스를 제공합니다. 이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>지정된 컴파일러 설정을 사용하여 <see cref="N:System.CodeDom" /> 개체의 지정된 배열에 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" /> 트리에 따라 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="compilationUnits">컴파일할 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 형식의 배열입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames">컴파일할 파일 이름의 배열입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열 배열에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">이 컴파일에 대한 컴파일러 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources">컴파일할 소스 코드 문자열의 배열입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>파생 클래스에서 재정의될 때 새 코드 컴파일러를 만듭니다.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 기준 소스 코드 표현을 컴파일하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns>해당 값의 이스케이프된 식별자입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>파생 클래스에서 재정의될 때 새 코드 생성기를 만듭니다.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>파생 클래스에서 재정의될 때 지정된 <see cref="T:System.IO.TextWriter" />를 출력에 사용하여 새 코드 생성기를 만듭니다.</summary>
      <param name="output">출력에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>파생 클래스에서 재정의될 때 지정된 파일 이름을 출력으로 사용하여 새 코드 생성기를 만듭니다.</summary>
      <param name="fileName">출력할 파일 이름입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 기준 소스 코드 표현을 생성하는 데 사용할 수 있는 <see cref="N:System.CodeDom" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>파생 클래스에서 재정의될 때 새 코드 파서를 만듭니다.</summary>
      <returns>소스 코드를 구문 분석하는 데 사용할 수 있는 <see cref="T:System.CodeDom.Compiler.ICodeParser" />입니다. 기본 구현은 항상 <see langword="null" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>지정된 언어에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 가져옵니다.</summary>
      <param name="language">언어 이름입니다.</param>
      <returns>지정된 언어 이름에 대해 구현된 CodeDOM 공급자입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" />에 대한 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>지정된 언어와 공급자 옵션에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 가져옵니다.</summary>
      <param name="language">언어 이름입니다.</param>
      <param name="providerOptions">구성 파일의 공급자 옵션 컬렉션입니다.</param>
      <returns>지정된 언어 이름과 옵션에 대해 구현된 CodeDOM 공급자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value">유효한 식별자를 생성할 문자열입니다.</param>
      <returns>지정된 값의 유효한 식별자입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>현재 언어의 소스 코드 파일에 사용할 기본 확장명을 가져옵니다.</summary>
      <returns>현재 언어의 소스 코드 확장명에 해당하는 확장명입니다. 기본 구현은 항상 <see cref="F:System.String.Empty" />를 반환합니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="compileUnit">코드를 생성할 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <param name="writer">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="expression">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" /> 개체입니다.</param>
      <param name="writer">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 멤버 선언에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="member">코드를 생성할 멤버를 나타내는 <see cref="T:System.CodeDom.CodeTypeMember" /> 개체입니다.</param>
      <param name="writer">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException">이 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="codeNamespace">코드를 생성할 네임스페이스를 나타내는 <see cref="T:System.CodeDom.CodeNamespace" /> 개체입니다.</param>
      <param name="writer">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="statement">코드를 생성할 CodeDOM 요소가 포함된 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="writer">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성한 다음 지정된 옵션을 사용하여 지정된 텍스트 작성기에 해당 코드를 보냅니다.</summary>
      <param name="codeType">코드를 생성할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 개체입니다.</param>
      <param name="writer">출력 코드가 전달될 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="options">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>이 컴퓨터의 언어 공급자 및 컴파일러 구성 설정을 반환합니다.</summary>
      <returns>구성된 모든 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 구현의 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 형식의 배열입니다.</returns>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>지정된 언어에 대한 언어 공급자 및 컴파일러 구성 설정을 반환합니다.</summary>
      <param name="language">언어 이름입니다.</param>
      <returns>구성된 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 구현의 설정으로 채워진 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 개체입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" />에 대한 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>지정된 데이터 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 가져옵니다.</summary>
      <param name="type">형식 변환기를 검색할 개체의 형식입니다.</param>
      <returns>지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />이거나, 지정된 형식에 대한 <see cref="T:System.ComponentModel.TypeConverter" />를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 컴파일러 구성 섹션에 구성되어 있는 대로, 지정된 파일 이름 확장명과 연결된 언어 이름을 반환합니다.</summary>
      <param name="extension">파일 이름 확장명입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 컴파일러 구성 설정에 구성되어 있는 대로, 파일 이름 확장명과 연결된 언어 이름입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" />에 대한 언어 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReference" />에서 나타내는 형식을 가져옵니다.</summary>
      <param name="type">반환할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns>지정된 형식의 텍스트 표현으로, 이 코드 생성기가 생성하는 코드에 대한 언어로 서식이 지정되어 있습니다. 예를 들어, Visual Basic에서 <see cref="T:System.CodeDom.CodeTypeReference" /> 형식에 대한 <see cref="T:System.Int32" />를 전달하면 "Integer"가 반환됩니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>파일 이름 확장명과 연결된 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 컴퓨터에 구성되어 있는지 여부를 테스트합니다.</summary>
      <param name="extension">파일 이름 확장명입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 지정된 파일 이름 확장명에 대해 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>언어에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 컴퓨터에 구성되어 있는지 여부를 테스트합니다.</summary>
      <param name="language">언어 이름입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현이 지정된 언어에 대해 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="value">유효한 식별자인지 확인할 값입니다.</param>
      <returns>
        <paramref name="value" /> 매개 변수가 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>언어 기능 식별자를 가져옵니다.</summary>
      <returns>언어의 특수 기능을 나타내는 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>지정된 텍스트 스트림에서 읽은 코드를 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 컴파일합니다.</summary>
      <param name="codeStream">구문 분석될 코드를 읽는 데 사용되는 <see cref="T:System.IO.TextReader" /> 개체입니다.</param>
      <returns>구문 분석된 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>지정된 코드 생성이 지원되는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="generatorSupport">확인할 코드 생성 지원의 형식을 나타내는 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 개체입니다.</param>
      <returns>지정된 코드 생성이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
      <exception cref="T:System.NotImplementedException">이 메서드와 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 메서드가 파생 클래스에서 재정의되지 않은 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 인터페이스의 예제 구현을 제공합니다. 이 클래스는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>줄 연속 문자를 생성하고 새 줄에 지정된 문자열을 출력합니다.</summary>
      <param name="st">새 줄에 쓸 문자열입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns>해당 값의 이스케이프된 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value">유효한 식별자를 만들 문자열입니다.</param>
      <returns>값의 유효한 식별자입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>현재 클래스의 코드 형식 선언을 가져옵니다.</summary>
      <returns>현재 클래스의 코드 형식 선언입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>클래스의 현재 멤버를 가져옵니다.</summary>
      <returns>클래스의 현재 멤버입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>현재 멤버 이름을 가져옵니다.</summary>
      <returns>현재 멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>현재 클래스의 이름을 가져옵니다.</summary>
      <returns>현재 클래스의 이름입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>지정된 인수 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>지정된 배열 생성 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeArrayCreateExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>지정된 배열 인덱서 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>지정된 할당문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문을 나타내는 <see cref="T:System.CodeDom.CodeAssignStatement" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>지정된 첨부 이벤트 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문을 나타내는 <see cref="T:System.CodeDom.CodeAttachEventStatement" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>지정된 특성 블록의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="attributes">코드를 생성할 특성 블록의 끝을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>지정된 특성 블록의 시작에 대한 코드를 생성합니다.</summary>
      <param name="attributes">코드를 생성할 특성 블록의 시작을 나타내는 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>지정된 기본 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>지정된 이항 연산자 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>지정된 변환 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeCastExpression" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 텍스트 작성기와 코드 생성기 옵션을 사용하여 지정된 클래스 멤버에 대한 코드를 생성합니다.</summary>
      <param name="member">코드를 생성할 클래스 멤버입니다.</param>
      <param name="writer">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="options">코드를 생성할 때 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> 속성이 <see langword="null" />이 아닌 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>지정된 주석에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 <see cref="T:System.CodeDom.CodeComment" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>지정된 주석 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" />의 <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> 속성이 설정되지 않았습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>지정된 주석 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>지정된 컴파일 단위에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>컴파일 단위의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>컴파일 단위의 시작을 나타내는 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>지정된 조건문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 생성자에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 생성자입니다.</param>
      <param name="c">이 생성자가 생성하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>지정된 10진수 값에 대한 코드를 생성합니다.</summary>
      <param name="d">코드를 생성할 10진수 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>지정된 기본값 참조에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 참조입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>지정된 대리자 생성 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>지정된 대리자 호출 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>지정된 명령 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>지정된 코드 지시문에 대한 코드를 생성합니다.</summary>
      <param name="directives">코드를 생성할 코드 지시문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>배정밀도 부동 소수점 숫자에 대한 코드를 생성합니다.</summary>
      <param name="d">코드를 생성할 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 진입점 메서드에 대한 코드를 생성합니다.</summary>
      <param name="e">코드에 대한 진입점입니다.</param>
      <param name="c">형식을 선언하는 코드입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 이벤트에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 멤버 이벤트입니다.</param>
      <param name="c">이 이벤트가 발생하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>지정된 이벤트 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>지정된 코드 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 코드 식입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" />은 유효한 <see cref="T:System.CodeDom.CodeStatement" />이 아닙니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>지정된 표현문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>지정된 멤버 필드에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 필드입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>지정된 필드 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>지정된 <see langword="goto" /> 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>지정된 인덱서 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>지정된 반복 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>지정된 레이블 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>지정된 줄 pragma의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 줄 pragma의 끝입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>지정된 줄 pragma의 시작을 나타내는 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 줄 pragma의 시작입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 메서드에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 멤버 메서드입니다.</param>
      <param name="c">이 메서드가 발생하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>지정된 메서드 호출 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>지정된 메서드 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>지정된 메서드 return 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>지정된 네임스페이스에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>네임스페이스의 끝을 나타내는 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>지정된 네임스페이스 가져오기에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스 가져오기입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>지정된 네임스페이스 가져오기에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스 가져오기입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>지정된 컴파일 단위의 네임스페이스에 대한 코드를 생성합니다.</summary>
      <param name="e">네임스페이스를 생성할 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>네임스페이스의 시작을 나타내는 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>지정된 개체 생성 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>지정된 매개 변수 선언 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>지정된 기본 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" />는 잘못된 데이터 형식을 사용합니다. 다음 데이터 형식만 사용할 수 있습니다.

string
char
byte
Int16
Int32
Int64
Single
Double
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 속성에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 속성입니다.</param>
      <param name="c">이 속성이 발생하는 개체의 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>지정된 속성 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>지정된 속성 설정 값의 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>지정된 제거 이벤트 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>단정밀도 부동 소수점 숫자에 대한 코드를 생성합니다.</summary>
      <param name="s">코드를 생성할 값입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>지정된 리터럴 코드 단편 컴파일 단위의 코드를 출력합니다.</summary>
      <param name="e">코드를 생성할 리터럴 코드 단편 컴파일 단위입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>지정된 리터럴 코드 단편 식의 코드를 출력합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>지정된 리터럴 코드 단편 클래스 멤버의 코드를 출력합니다.</summary>
      <param name="e">코드를 생성할 멤버입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>지정된 리터럴 코드 단편 문의 코드를 출력합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>지정된 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" />은 유효한 <see cref="T:System.CodeDom.CodeStatement" />이 아닙니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>지정된 문 컬렉션에 대한 코드를 생성합니다.</summary>
      <param name="stms">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>지정된 this 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>지정된 예외 throw 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>지정된 <see langword="try...catch...finally" /> 문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>지정된 클래스 생성자에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 클래스 생성자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 클래스의 끝에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 클래스의 끝입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>지정된 type of 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>지정된 형식 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>지정된 네임스페이스 및 해당 네임스페이스에 포함된 클래스에 대한 코드를 생성합니다.</summary>
      <param name="e">클래스를 생성할 네임스페이스입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>지정된 클래스의 시작에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 클래스의 시작입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>지정된 변수 선언문에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 문입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>지정된 변수 참조 식에 대한 코드를 생성합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>지정된 데이터 형식의 이름을 가져옵니다.</summary>
      <param name="value">이름이 반환될 형식입니다.</param>
      <returns>데이터 형식 참조의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>각 들여쓰기 수준별로 들여쓸 공백의 수를 가져오거나 설정합니다.</summary>
      <returns>각 들여쓰기 수준별로 들여쓸 공백의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>현재 생성 중인 개체가 클래스인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 개체가 클래스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>현재 생성 중인 개체가 대리자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 개체가 대리자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>현재 생성 중인 개체가 열거형인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 개체가 열거형이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>현재 생성 중인 개체가 인터페이스인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 개체가 인터페이스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>현재 생성 중인 개체가 구조체인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 개체가 값 형식이거나 구조체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>지정된 값이 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">유효한 식별자와 충돌하는지 여부를 테스트할 값입니다.</param>
      <returns>값이 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>지정된 문자열이 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">유효성을 테스트할 문자열입니다.</param>
      <returns>지정된 문자열이 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>
        <see langword="null" />을 나타내는 토큰을 가져옵니다.</summary>
      <returns>
        <see langword="null" />을 나타내는 토큰입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>코드 생성기에서 사용되는 옵션을 가져옵니다.</summary>
      <returns>코드 생성기에서 사용될 옵션을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>출력에 사용할 텍스트 작성기를 가져옵니다.</summary>
      <returns>출력에 사용할 텍스트 작성기입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>특성 블록의 인수를 출력합니다.</summary>
      <param name="arg">코드를 생성할 특성 인수입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>지정된 특성 선언 컬렉션에 대한 코드를 생성합니다.</summary>
      <param name="attributes">코드를 생성할 특성입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>지정된 <see cref="T:System.CodeDom.FieldDirection" />에 대한 코드를 생성합니다.</summary>
      <param name="dir">필드 특성을 나타내는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>지정된 식 목록에 대한 코드를 생성합니다.</summary>
      <param name="expressions">코드를 생성할 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>지정된 식 목록에 대한 코드를 생성합니다.</summary>
      <param name="expressions">코드를 생성할 식입니다.</param>
      <param name="newlineBetweenItems">각 항목 다음에 새 줄을 삽입하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>지정된 특성에 해당하는 필드 범위 한정자를 출력합니다.</summary>
      <param name="attributes">특성을 지정하는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>지정된 식별자를 출력합니다.</summary>
      <param name="ident">출력할 식별자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>지정된 멤버 액세스 한정자에 대한 코드를 생성합니다.</summary>
      <param name="attributes">코드를 생성할 멤버 액세스 한정자를 나타내는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>지정된 멤버 범위 한정자에 대한 코드를 생성합니다.</summary>
      <param name="attributes">코드를 생성할 멤버 범위 한정자를 나타내는 열거형 값 중 하나입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>지정된 연산자에 대한 코드를 생성합니다.</summary>
      <param name="op">코드를 생성할 연산자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>지정된 매개 변수에 대한 코드를 생성합니다.</summary>
      <param name="parameters">코드를 생성할 매개 변수 선언 식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>지정된 형식에 대한 코드를 생성합니다.</summary>
      <param name="typeRef">코드를 생성할 형식입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>지정된 형식 특성에 대한 코드를 생성합니다.</summary>
      <param name="attributes">코드를 생성할 형식 특성을 나타내는 열거형 값 중 하나입니다.</param>
      <param name="isStruct">형식이 구조체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="isEnum">형식이 열거형이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>지정된 개체 형식 및 이름 쌍에 대한 코드를 생성합니다.</summary>
      <param name="typeRef">형식입니다.</param>
      <param name="name">개체의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>이스케이프 코드로 지정된 문자열의 서식을 지정하여 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <returns>변환된 문자열입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>지정된 코드 생성이 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="support">테스트할 코드 생성 지원의 형식입니다.</param>
      <returns>지정된 코드 생성이 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns>해당 값의 이스케이프된 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value">유효한 식별자를 생성할 문자열입니다.</param>
      <returns>지정된 값의 유효한 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 CodeDOM 컴파일 단위입니다.</param>
      <param name="w">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성하고 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 식입니다.</param>
      <param name="w">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스입니다.</param>
      <param name="w">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">변환할 CodeDOM 요소를 포함하는 문입니다.</param>
      <param name="w">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 형식입니다.</param>
      <param name="w">코드를 출력할 텍스트 기록기입니다.</param>
      <param name="o">코드 생성에 사용할 옵션입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" />를 사용할 수 없는 경우 이 메서드 호출이 수행되기 전에 <paramref name="w" />가 닫혔을 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReference" />에서 나타내는 형식을 가져옵니다.</summary>
      <param name="type">반환할 형식입니다.</param>
      <returns>데이터 형식 참조의 이름입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">테스트할 값입니다.</param>
      <returns>
        <paramref name="value" /> 매개 변수가 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 개체에서 나타내는 언어 기능에 대한 지원을 생성기에서 제공하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="support">테스트할 생성자의 기능입니다.</param>
      <returns>지정된 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>지정된 값이 유효한 식별자가 아니면 예외를 throw합니다.</summary>
      <param name="value">유효성을 확인할 식별자입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>지정된 문자열이 유효한 식별자가 아니면 예외를 throw합니다.</summary>
      <param name="value">유효성을 테스트할 식별자입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 식별자가 유효하지 않거나 예약된 키워드나 언어 키워드와 충돌하는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeObject" /> 또는 <see cref="N:System.CodeDom" /> 트리에 포함된 각 식별자 필드의 유효성을 검사하려고 한 경우</summary>
      <param name="e">잘못된 식별자인지 테스트할 개체입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 <see cref="T:System.CodeDom.CodeObject" />에 잘못된 식별자가 있는 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>코드 생성기에서 사용되는 옵션의 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>멤버 사이에 빈 줄을 삽입할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>빈 줄을 삽입해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본적으로 이 속성 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>중괄호에 사용할 스타일을 가져오거나 설정합니다.</summary>
      <returns>사용할 중괄호 스타일을 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>이전의 각 <see langword="else" /> 또는 <see langword="catch" /> 블록을 닫는 줄에서 대괄호를 포함한 <see langword="finally" />, <see langword="if" /> 또는 <see langword="try" /> 블록을 추가할 것인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>else를 추가해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성의 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>들여쓰기에 사용할 문자열을 가져오거나 설정합니다.</summary>
      <returns>들여쓰기에 사용할 문자를 포함하는 문자열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>지정된 인덱스에서 개체를 가져오거나 설정합니다.</summary>
      <param name="index">검색할 개체와 관련된 이름입니다.</param>
      <returns>지정된 이름과 관련된 개체입니다. 지정된 이름과 관련된 개체가 컬렉션에 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>멤버 컬렉션에 나타나는 순서대로 멤버를 생성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>멤버 컬렉션에 나타나는 순서대로 멤버를 생성하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 속성의 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 인터페이스의 빈 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CodeParser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>지정된 텍스트 스트림을 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 컴파일합니다.</summary>
      <param name="codeStream">구문 분석될 코드를 읽는 데 사용되는 <see cref="T:System.IO.TextReader" />입니다.</param>
      <returns>코드를 구문 분석해서 생성된 코드 모델이 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>컴파일러 오류 또는 경고를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>지정된 파일 이름, 줄, 열, 오류 번호 및 오류 텍스트를 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName">오류가 발생될 때 컴파일 중이었던 파일의 파일 이름입니다.</param>
      <param name="line">오류가 발생한 소스 줄입니다.</param>
      <param name="column">오류가 발생한 소스 열입니다.</param>
      <param name="errorNumber">오류의 오류 번호입니다.</param>
      <param name="errorText">오류 메시지 텍스트입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>오류가 발생된 소스의 열 번호를 가져오거나 설정합니다.</summary>
      <returns>컴파일러에서 오류가 발생한 소스 파일의 열 번호입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>오류 번호를 가져오거나 설정합니다.</summary>
      <returns>문자열 형식의 오류 번호입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>오류 메시지의 텍스트를 가져오거나 설정합니다.</summary>
      <returns>오류 메시지 텍스트입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>오류가 발생한 코드가 들어 있는 소스 파일의 파일 이름을 가져오거나 설정합니다.</summary>
      <returns>오류가 발생한 코드가 들어 있는 소스 파일의 파일 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>오류가 경고인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>오류가 경고이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>오류가 발생한 소스의 줄 번호를 가져오거나 설정합니다.</summary>
      <returns>컴파일러에서 오류가 발생한 소스 파일의 줄 번호입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>개체의 <see cref="M:System.Object.ToString" /> 메서드 구현을 제공합니다.</summary>
      <returns>컴파일 오류에 대한 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체의 지정된 배열을 포함하는 <see cref="T:System.CodeDom.Compiler.CompilerError" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화할 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />의 내용이 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">컬렉션을 초기화하는 데 사용할 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체를 오류 컬렉션에 추가합니다.</summary>
      <param name="value">추가할 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체입니다.</param>
      <returns>새 요소가 삽입된 인덱스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>오류 컬렉션의 끝에 배열의 요소를 복사합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 형식의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>지정한 컴파일러 오류 컬렉션의 내용을 오류 컬렉션의 끝에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 개체가 들어 있는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 가 <see langword="null" />일 수 있습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체가 들어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerError" />이 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>지정한 인덱스에서 컬렉션 값을 일차원 <see cref="T:System.Array" /> 인스턴스에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 값의 대상인 일차원 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />입니다.</param>
      <param name="index">배열에서 복사를 시작할 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 매개 변수가 나타내는 배열이 다차원 배열인 경우
또는
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />의 요소 수가 <paramref name="arrayIndex" /> 매개 변수가 나타내는 배열의 <paramref name="array" /> 매개 변수에 대한 인덱스 값과 <paramref name="array" /> 매개 변수가 나타내는 배열의 끝 사이에서 사용할 수 있는 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 <paramref name="array" /> 매개 변수가 나타내는 배열의 하한값보다 작은 경우</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>컬렉션에 오류가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 오류가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>컬렉션에 경고가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 경고가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>컬렉션에 지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 개체가 있는 경우 해당 인덱스를 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.CompilerError" />에 지정된 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />의 인덱스가 있으면 반환 값은 해당 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.CompilerError" />를 컬렉션의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">컴파일러 오류를 삽입해야 하는 인덱스이며 0부터 시작합니다.</param>
      <param name="value">삽입할 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.CodeDom.Compiler.CompilerError" />를 가져오거나 설정합니다.</summary>
      <param name="index">컬렉션에 있는 엔트리의 인덱스(0부터 시작)입니다.</param>
      <returns>유효한 각 인덱스에 있는 <see cref="T:System.CodeDom.Compiler.CompilerError" />입니다.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 매개 변수가 나타내는 인덱스 값이 컬렉션의 유효한 인덱스 범위 밖에 있는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>컬렉션에서 특정 <see cref="T:System.CodeDom.Compiler.CompilerError" />를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.CodeDom.Compiler.CompilerError" />에서 제거할 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 개체가 컬렉션에 없는 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>언어 공급자의 구성 설정을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>구성된 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 구현의 형식을 가져옵니다.</summary>
      <returns>구성된 언어 공급자 형식을 나타내는 읽기 전용 <see cref="T:System.Type" /> 인스턴스입니다.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">언어 공급자가 이 컴퓨터에 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <see langword="null" />이거나 빈 문자열이기 때문에 형식을 찾을 수 있습니다.
또는
구성 파일에서 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />의 이름을 찾을 수 없기 때문에 형식을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>언어 공급자 구현에 대해 구성된 컴파일러 설정을 가져옵니다.</summary>
      <returns>언어 공급자에 대해 구성된 컴파일러 옵션 및 설정을 포함하는 읽기 전용 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>현재 언어 공급자 설정에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 반환합니다.</summary>
      <returns>언어 공급자 구성과 연결된 CodeDOM 공급자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>현재 언어 공급자 설정과 지정된 옵션에 대한 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 인스턴스를 반환합니다.</summary>
      <param name="providerOptions">구성 파일의 공급자 옵션 컬렉션입니다.</param>
      <returns>언어 공급자 구성과 지정된 옵션에 연결된 CodeDOM 공급자입니다.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">공급자가 ISourcesRowset 옵션을 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>지정된 개체가 현재 <see cref="T:System.CodeDom.Compiler.CompilerInfo" />와 같은 언어 공급자 및 컴파일러 설정을 나타내는지 여부를 확인합니다.</summary>
      <param name="o">현재 <see cref="T:System.CodeDom.Compiler.CompilerInfo" />와 비교할 개체입니다.</param>
      <returns>
        <paramref name="o" />가 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 개체이고 값이 이 인스턴스의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>언어 공급자에서 지원하는 파일 이름 확장명을 반환합니다.</summary>
      <returns>언어 공급자에서 지원하는 파일 이름 확장명의 배열입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>현재 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 인스턴스에 대한 부호 있는 32비트 정수 해시 코드입니다. 이 값은 해시 알고리즘 및 해시 테이블과 같은 데이터 구조에 사용하는 것이 좋습니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>언어 공급자에서 지원하는 언어 이름을 가져옵니다.</summary>
      <returns>언어 공급자에서 지원하는 언어 이름의 배열입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>언어 공급자 구현이 컴퓨터에 구성되어 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>언어 공급자 구현 형식이 컴퓨터에 구성되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>컴파일러를 호출하는 데 사용되는 매개 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>지정된 어셈블리 이름을 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyNames">참조할 어셈블리의 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>지정된 어셈블리 이름 및 출력 파일 이름을 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyNames">참조할 어셈블리의 이름입니다.</param>
      <param name="outputName">출력 파일 이름입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>지정된 어셈블리 이름, 출력 이름 및 디버그 정보 포함 여부를 나타내는 값을 사용하여 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="assemblyNames">참조할 어셈블리의 이름입니다.</param>
      <param name="outputName">출력 파일 이름입니다.</param>
      <param name="includeDebugInformation">디버그 정보를 포함하려면 <see langword="true" />이고 디버그 정보를 제외하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>컴파일러를 호출할 때 사용할 선택적인 명령줄 인수를 가져오거나 설정합니다.</summary>
      <returns>컴파일러에 대한 추가적인 명령줄 인수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>
        <see cref="T:System.Object" />, <see cref="T:System.String" /> 또는 <see cref="T:System.Int32" />와 같은 기본 형식을 포함하는 핵심 또는 표준 어셈블리의 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 형식이 포함된 핵심 어셈블리의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>어셈블리 출력을 컴파일할 때 포함할 .NET Framework 리소스 파일을 가져옵니다.</summary>
      <returns>생성된 어셈블리에 포함할 .NET Framework 리소스의 파일 경로가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>실행 파일의 생성 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>실행 파일을 생성해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>출력을 메모리에 생성할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>컴파일러에서 출력을 메모리에 생성해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>컴파일된 실행 파일에 디버그 정보가 포함될지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>디버그 정보를 생성해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>현재 소스에서 참조되는 .NET Framework 리소스 파일을 가져옵니다.</summary>
      <returns>소스에서 참조되는 .NET Framework 리소스의 파일 경로가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>기본 클래스의 이름을 가져오거나 설정합니다.</summary>
      <returns>기본 클래스의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>출력 어셈블리의 이름을 가져오거나 설정합니다.</summary>
      <returns>출력 어셈블리의 이름입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>현재 프로젝트에서 참조하는 어셈블리를 가져옵니다.</summary>
      <returns>컴파일할 소스에서 참조되는 어셈블리 이름을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>임시 파일이 포함된 컬렉션을 가져오거나 설정합니다.</summary>
      <returns>임시 파일을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>경고를 오류로 간주해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>경고를 오류로 간주해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>컴파일러 프로세스를 만들 때 사용할 사용자 토큰을 가져오거나 설정합니다.</summary>
      <returns>사용할 사용자 토큰입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>컴파일러에서 컴파일이 중단되는 경고 수준을 가져오거나 설정합니다.</summary>
      <returns>컴파일러에서 컴파일이 중단되는 경고 수준입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>컴파일된 어셈블리에 연결할 Win32 리소스 파일의 파일 이름을 가져오거나 설정합니다.</summary>
      <returns>컴파일된 어셈블리에 연결할 Win32 리소스 파일입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>컴파일러에서 반환된 컴파일 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>지정된 임시 파일을 사용하는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tempFiles">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>컴파일된 어셈블리를 가져오거나 설정합니다.</summary>
      <returns>컴파일된 어셈블리를 나타내는 <see cref="T:System.Reflection.Assembly" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>컴파일러 오류 및 경고의 컬렉션을 가져옵니다.</summary>
      <returns>컴파일에서 오류 및 경고가 발생하는 경우 해당 오류를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>컴파일러의 반환 값을 가져오거나 설정합니다.</summary>
      <returns>컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>컴파일러 출력 메시지를 가져옵니다.</summary>
      <returns>출력 메시지를 포함하는 <see cref="T:System.Collections.Specialized.StringCollection" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>컴파일된 어셈블리의 경로를 가져오거나 설정합니다.</summary>
      <returns>어셈블리의 경로이거나 어셈블리가 메모리에서 생성되면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>사용할 임시 파일 컬렉션을 가져오거나 설정합니다.</summary>
      <returns>컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>컴파일러를 호출하는 명령 실행 함수를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>지정된 임시 파일을 사용하여 명령을 실행하고 호출이 반환될 때까지 대기합니다.</summary>
      <param name="cmd">실행할 명령입니다.</param>
      <param name="tempFiles">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>지정된 사용자 토큰 및 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="userToken">컴파일러 프로세스를 시작할 토큰입니다.</param>
      <param name="cmd">실행할 명령입니다.</param>
      <param name="tempFiles">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns>컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>지정된 사용자 토큰, 현재 디렉터리 및 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="userToken">컴파일러 프로세스를 시작할 토큰입니다.</param>
      <param name="cmd">실행할 명령입니다.</param>
      <param name="currentDir">프로세스가 시작될 디렉터리입니다.</param>
      <param name="tempFiles">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns>컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>지정된 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="cmd">실행할 명령입니다.</param>
      <param name="tempFiles">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns>컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>지정된 현재 디렉터리 및 임시 파일을 사용하여 지정된 명령을 실행하고 호출이 반환되기를 기다린 다음 지정된 문자열에 컴파일러의 출력 및 오류 정보를 저장합니다.</summary>
      <param name="cmd">실행할 명령입니다.</param>
      <param name="currentDir">현재 디렉터리</param>
      <param name="tempFiles">컴파일하는 동안 생성된 중간 파일에 대한 참조를 관리 및 저장할 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />입니다.</param>
      <param name="outputName">컴파일러의 메시지 출력을 저장할 문자열에 대한 참조입니다.</param>
      <param name="errorName">발생한 오류의 이름을 저장할 문자열에 대한 참조입니다.</param>
      <returns>컴파일러의 반환 값입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>코드 생성기에서 코드 요소의 특정한 형식을 지원하는지 여부를 확인하는 데 사용할 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>생성기에서 배열의 배열을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>생성기에서 어셈블리 특성을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>생성기에서 연결된 생성자 인수를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>생성기에서 복합 식을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>생성기에서 대리자 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>생성기에서 열거형 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>생성기에서 이벤트 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>생성기에서 인덱서 속성의 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>생성기에서 인터페이스 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>생성기에서 값 형식 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>생성기에서 프로그램 진입점 메서드 지정을 지원함을 나타냅니다. 실행 파일을 빌드할 때 사용됩니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>생성기에서 제네릭 형식 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>생성기에서 제네릭 형식 참조를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>생성기에서 goto 문을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>생성기에서 다차원 배열 참조를 지원함을 나타냅니다. 현재는 CodeDom을 사용하여 다차원 배열을 인스턴스화할 수 없습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>생성기에서 여러 인터페이스를 구현하는 멤버의 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>생성자가 중첩 형식의 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>생성기에서 매개 변수 특성을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>생성기에서 부분 형식 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>생성기에서 공용 정적 멤버를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>생성기에서 참조 및 출력 매개 변수를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>생성기에서 .NET Framework 리소스와의 컴파일을 지원함을 나타냅니다. 이러한 리소스는 어셈블리로 직접 컴파일되는 기본 리소스나 위성 어셈블리에서 참조되는 리소스일 수 있습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>생성기에서 반환 형식 특성 선언을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>생성기에서 정적 생성자를 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>생성기에서 <see langword="try...catch" /> 문을 지원함을 나타냅니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>생성기에서 Win32 리소스와의 컴파일을 지원함을 나타냅니다.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>특정한 컴파일러를 사용하여 CodeDOM 트리나 소스 코드의 컴파일을 호출하는 데 사용되는 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>지정된 컴파일러 설정을 사용하여 지정된 <see cref="N:System.CodeDom" />에 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" /> 트리에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="compilationUnit">컴파일할 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>지정된 컴파일러 설정을 사용하여 <see cref="N:System.CodeDom" /> 개체의 지정된 배열에 포함된 <see cref="T:System.CodeDom.CodeCompileUnit" /> 트리에 따라 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="compilationUnits">컴파일할 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" /> 형식의 배열입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileName">컴파일할 소스 코드가 포함된 파일의 파일 이름입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>지정된 컴파일러 설정을 사용하여 지정된 파일에 포함된 소스 코드에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="fileNames">컴파일할 파일의 파일 이름입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="source">컴파일할 소스 코드입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>지정된 컴파일러 설정을 사용하여 소스 코드가 포함된 지정된 문자열 배열에서 어셈블리를 컴파일합니다.</summary>
      <param name="options">컴파일 설정을 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 개체입니다.</param>
      <param name="sources">컴파일할 소스 코드 문자열입니다.</param>
      <returns>컴파일 결과를 나타내는 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 개체입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>코드를 생성하는 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>지정된 값의 이스케이프된 식별자를 만듭니다.</summary>
      <param name="value">이스케이프된 식별자를 만들 문자열입니다.</param>
      <returns>해당 값의 이스케이프된 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>지정된 값의 유효한 식별자를 만듭니다.</summary>
      <param name="value">유효한 식별자를 생성할 문자열입니다.</param>
      <returns>지정된 값의 유효한 식별자입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 컴파일 단위에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</param>
      <param name="w">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 식에 대한 코드를 생성하고 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 식을 나타내는 <see cref="T:System.CodeDom.CodeExpression" />입니다.</param>
      <param name="w">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 네임스페이스에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 네임스페이스를 나타내는 <see cref="T:System.CodeDom.CodeNamespace" />입니다.</param>
      <param name="w">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 문에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">변환할 CodeDOM 요소를 포함하는 <see cref="T:System.CodeDom.CodeStatement" />입니다.</param>
      <param name="w">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>지정된 CodeDOM(코드 문서 개체 모델) 형식 선언에 대한 코드를 생성하고 지정된 옵션을 사용하여 지정된 텍스트 기록기로 출력합니다.</summary>
      <param name="e">코드를 생성할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeDeclaration" />입니다.</param>
      <param name="w">코드를 출력할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="o">코드를 생성하기 위해 사용할 옵션을 나타내는 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>지정된 <see cref="T:System.CodeDom.CodeTypeReference" />에서 나타내는 형식을 가져옵니다.</summary>
      <param name="type">반환할 형식을 나타내는 <see cref="T:System.CodeDom.CodeTypeReference" />입니다.</param>
      <returns>이 코드 생성기가 코드를 디자인할 때 사용할 언어에 대해 지정된 형식의 텍스트 표현입니다. 예를 들어 Visual Basic에서는 System.Int32 형식을 전달하면 "Integer"가 반환됩니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>지정된 값이 현재 언어에 유효한 식별자인지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">유효한 식별자인지 여부를 테스트할 값입니다.</param>
      <returns>
        <paramref name="value" /> 매개 변수가 유효한 식별자이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>지정된 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 개체에서 나타내는 언어 기능에 대한 지원을 생성기에서 제공하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="supports">테스트할 생성자의 기능입니다.</param>
      <returns>지정된 기능을 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>지정된 값이 유효한 식별자가 아니면 예외를 throw합니다.</summary>
      <param name="value">유효성을 확인할 식별자입니다.</param>
      <exception cref="T:System.ArgumentException">식별자가 유효하지 않은 경우</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>
        <see cref="T:System.CodeDom.CodeCompileUnit" />에 코드 구문 분석을 위한 인터페이스를 정의합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>파생된 클래스에서 구현할 때 지정된 텍스트 스트림을 <see cref="T:System.CodeDom.CodeCompileUnit" />으로 컴파일합니다.</summary>
      <param name="codeStream">컴파일될 코드를 읽는 데 사용할 수 있는 <see cref="T:System.IO.TextReader" />입니다.</param>
      <returns>구문 분석된 코드를 나타내는 <see cref="T:System.CodeDom.CodeCompileUnit" />입니다.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>언어의 특정 기능을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>해당 언어는 대/소문자가 구분되지 않습니다.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>해당 언어에 기본 특징이 있습니다.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>임시 파일의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>기본값을 사용하여 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>기본적으로, 임시 파일을 생성하고 사용한 후에 해당 임시 파일을 삭제하도록 설정한 지정된 임시 디렉터리를 사용하여 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tempDir">임시 파일을 저장하는 데 사용할 임시 디렉터리에 대한 경로입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>기본적으로, 임시 파일을 생성하고사용한 후에 해당 임시 파일을 유지할 것인지 또는 삭제할 것인지 여부를 나타내는 지정된 값과 지정된 임시 디렉터리를 사용하여 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tempDir">임시 파일을 저장하는 데 사용할 임시 디렉터리에 대한 경로입니다.</param>
      <param name="keepFiles">임시 파일을 사용한 후에 유지해야 한다면 <see langword="true" />이고 삭제해야 한다면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>지정된 파일 확장명의 파일 이름을 컬렉션에 추가합니다.</summary>
      <param name="fileExtension">컬렉션에 추가할 자동으로 생성된 임시 파일 이름의 파일 확장명입니다.</param>
      <returns>방금 컬렉션에 추가된 지정된 확장명의 파일 이름입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>파일을 삭제해야 하는지 유지해야 하는지를 나타내는 지정된 값을 사용하여 지정된 파일 확장명의 파일 이름을 컬렉션에 추가합니다.</summary>
      <param name="fileExtension">컬렉션에 추가할 자동으로 생성된 임시 파일 이름의 파일 확장명입니다.</param>
      <param name="keepFile">파일을 사용한 후에 유지하려면 <see langword="true" />로 설정하고, 삭제하려면 <see langword="false" />로 설정합니다.</param>
      <returns>방금 컬렉션에 추가된 지정된 확장명의 파일 이름입니다.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" />이 <see langword="null" /> 또는 빈 문자열인 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>컬렉션이 삭제되거나  <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 메서드가 호출될 때 파일을 보관할 것인지 여부를 나타내는 특정 값을 사용하여 지정된 파일을 컬렉션에 추가합니다.</summary>
      <param name="fileName">컬렉션에 추가할 파일 이름입니다.</param>
      <param name="keepFile">파일을 사용한 후에 유지하려면 <see langword="true" />로 설정하고, 삭제하려면 <see langword="false" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" />이 <see langword="null" /> 또는 빈 문자열인 경우
또는
<paramref name="fileName" />은(는) 중복됩니다.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>컬렉션의 임시 파일 이름을 생성하는 데 사용되는 임시 디렉터리 경로의 기본 파일 이름(파일 확장명 제외)에 대한 전체 경로를 가져옵니다.</summary>
      <returns>컬렉션의 임시 파일 이름을 생성하는 데 사용되는 임시 디렉터리 경로의 기본 파일 이름(파일 확장명 제외)에 대한 전체 경로입니다.</returns>
      <exception cref="T:System.Security.SecurityException">
        <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> 속성이 <see langword="null" />로 설정된 적이 없거나 설정되어 있지 않고 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />가 <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> 속성에서 나타내는 임시 디렉터리에 부여되지 않은 경우</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>지정된 인덱스에서 시작하여 지정된 문자열에 컬렉션의 멤버를 복사합니다.</summary>
      <param name="fileNames">복사할 대상 문자열의 배열입니다.</param>
      <param name="start">복사를 시작할 대상 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>컬렉션에 있는 파일의 수를 가져옵니다.</summary>
      <returns>컬렉션의 파일 수입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>이 컬렉션 내에서 보관하도록 표시되지 않은 임시 파일을 삭제합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>가비지 수집에서 이 개체를 회수하기 전에 임시 파일을 삭제하려고 합니다.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>컬렉션의 멤버를 열거할 수 있는 열거자를 가져옵니다.</summary>
      <returns>컬렉션의 멤버를 포함하는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>
        <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 메서드가 호출되거나 컬렉션이 삭제될 때 기본적으로 파일을 유지하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>파일을 유지해야 한다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>컬렉션의 요소를 대상 배열의 지정한 인덱스에서 시작하는 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="start">배열에서 복사를 시작할 인덱스입니다. 이 인덱스는 0부터 시작합니다.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>컬렉션에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>해당 컬렉션에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>관리되지 않는 리소스의 확보, 해제 또는 다시 설정과 관련된 애플리케이션 정의 작업을 수행합니다.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>임시 파일을 저장할 임시 디렉터리를 가져옵니다.</summary>
      <returns>임시 파일을 저장할 임시 디렉터리입니다.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>매개 변수 방향 및 인수 선언을 나타내는 데 사용되는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>들어오는 필드입니다.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>나가는 필드입니다.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>참조되는 필드입니다.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>클래스 멤버의 멤버 특성 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>추상 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>액세스 마스크입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>같은 어셈블리에 있는 모든 클래스에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>상수 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>해당 클래스와 파생 클래스의 패밀리에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>같은 어셈블리에 있는 해당 클래스와 파생 클래스에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>해당 클래스, 모든 어셈블리의 파생 클래스 및 같은 어셈블리의 모든 클래스에서 액세스할 수 있는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>파생 클래스에서 재정의할 수 없는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>새 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>오버로드된 멤버입니다. Visual Basic과 같은 일부 언어에서는 오버로드된 멤버를 명시적으로 나타내야 합니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>기본 클래스 멤버를 재정의하는 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>프라이빗 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>공용 멤버입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>범위 마스크입니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>정적 멤버입니다. Visual Basic에서는 <see langword="Shared" /> 키워드에 해당합니다.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>VTable 마스크입니다.</summary>
    </member>
  </members>
</doc>
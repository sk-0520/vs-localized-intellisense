<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>指定されたソースで <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>指定したリスナーを、指定したソースの <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントに追加します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">リスナーとして追加するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>指定したリスナーを、指定したソースの <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントから削除します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">削除するリスナー。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>指定されたソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを発生させるソース オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントに追加します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">リスナーとして追加するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントから削除します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">削除するリスナー。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントに関する情報を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>指定した <paramref name="isCancelable" /> 値を使用して、<see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isCancelable">イベントがキャンセル可能かどうかを示す値。</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>イベントを取り消すかどうかを示す値を取得または設定します。</summary>
      <returns>イベントをキャンセルする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> の値が <see langword="false" /> の場合。</exception>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>イベントがキャンセル可能かどうかを示す値を取得します。</summary>
      <returns>イベントがキャンセル可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>
        <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントを発生させたオブジェクト。</param>
      <param name="e">イベントに関する情報。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>指定されたソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントに追加します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">リスナーとして追加するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントから削除します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">削除するリスナー。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリッスンを開始します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリッスンを停止します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>依存関係プロパティの追加のプロパティ特性を記述する <see cref="T:System.ComponentModel.PropertyDescriptor" /> の拡張機能を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component">ハンドラーを追加する対象のコンポーネント。</param>
      <param name="handler">リスナーとして追加されるデリゲート。</param>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>メンバーの属性のコレクションを取得します。</summary>
      <returns>属性の <see cref="T:System.ComponentModel.AttributeCollection" /> コレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>オブジェクトをリセットすると値が変更されるかどうかを返します。</summary>
      <param name="component">リセット機能について調べる対象のコンポーネント。</param>
      <returns>コンポーネントをリセットするとコンポーネントの値が変化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>
        <see cref="T:System.ComponentModel.CategoryAttribute" /> で指定されている、メンバーが属するカテゴリの名前を取得します。</summary>
      <returns>メンバーが属しているカテゴリの名前。 <see cref="T:System.ComponentModel.CategoryAttribute" /> がない場合、カテゴリ名は既定のカテゴリである <see langword="Misc" /> に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>プロパティが関連付けられているコンポーネントの型を取得します。</summary>
      <returns>プロパティが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> または <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> が呼び出される場合、指定されたオブジェクトはこの型のインスタンスである可能性があります。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>プロパティの型コンバーターを取得します。</summary>
      <returns>プロパティの <see cref="T:System.ComponentModel.TypeConverter" /> を変換するために使用する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>依存関係プロパティの識別子を返します。</summary>
      <returns>依存関係プロパティの識別子。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" /> で指定されている、メンバーの説明を取得します。</summary>
      <returns>メンバーの説明。 <see cref="T:System.ComponentModel.DescriptionAttribute" /> がない場合、このプロパティの値は既定値である空の文字列 ("") に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>依存関係プロパティの値が依存関係プロパティのエンジンに格納される前にそのプロパティの有効値を変更するためにデザイナーが使用するコールバックを取得または設定します。</summary>
      <returns>依存関係プロパティの値が依存関係プロパティのエンジンに格納される前にそのプロパティの有効値を変更するためにデザイナーが使用するコールバック。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> で指定されている、メンバーを設定できるのがデザイン時だけかどうかを示す値を取得します。</summary>
      <returns>メンバーを設定できるのがデザイン時だけの場合は <see langword="true" />。実行時に設定できる場合は <see langword="false" />。 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> がない場合、戻り値は既定値である <see langword="false" /> になります。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>[プロパティ] ウィンドウなどのウィンドウに表示できる名前を取得します。</summary>
      <returns>表示するプロパティ名。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> インスタンスを比較し、相互に等価かどうかを判断します。</summary>
      <param name="obj">現在のインスタンスと比較する <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</param>
      <returns>両方の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>指定したプロパティ名の <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</summary>
      <param name="name">依存関係プロパティまたは添付プロパティの登録名。</param>
      <param name="ownerType">プロパティの定義を所有するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="targetType">プロパティを設定するオブジェクトの <see cref="T:System.Type" />。</param>
      <returns>要求された <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>指定したプロパティ名の <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</summary>
      <param name="name">依存関係プロパティまたは添付プロパティの登録名。</param>
      <param name="ownerType">プロパティの定義を所有するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="targetType">プロパティを設定するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="ignorePropertyType">プロパティの型を無視するように指定します。</param>
      <returns>要求された <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>指定した <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> の <see cref="T:System.ComponentModel.PropertyDescriptor" /> を返します。</summary>
      <param name="property">確認対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>
        <paramref name="property" /> によって記述されているプロパティが依存関係プロパティの場合は、有効な <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。 それ以外の場合は、<see langword="null" /> の <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>指定された依存関係プロパティの <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> とターゲットの種類を返します。</summary>
      <param name="dependencyProperty">依存関係プロパティの識別子。</param>
      <param name="targetType">プロパティを設定するオブジェクトの型。</param>
      <returns>指定された依存関係プロパティの <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="instance">プロパティを取得する対象のコンポーネント。</param>
      <param name="filter">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns>指定したコンポーネントのプロパティのうち、指定した属性に一致するプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>指定した型のエディターを取得します。</summary>
      <param name="editorBaseType">プロパティがサポートしている複数のエディターを区別するために使用される、エディターの基本型。</param>
      <returns>要求したエディター型のインスタンス。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>この <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>コンポーネントのプロパティの現在の値を返します。</summary>
      <param name="component">コンポーネントのインスタンス。</param>
      <returns>要求された値。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>プロパティが添付プロパティとして登録され、添付して使う方法で使用されているかどうかを示す値を取得します。</summary>
      <returns>プロパティが添付プロパティの場合は<see langword="true" /> 、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>プロパティの <see cref="T:System.ComponentModel.BrowsableAttribute" /> の値を取得します。</summary>
      <returns>プロパティに <see cref="T:System.ComponentModel.BrowsableAttribute" /> が指定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>プロパティをローカライズする必要があるかどうかを示す、<see cref="T:System.ComponentModel.LocalizableAttribute" /> で指定されている値を取得します。</summary>
      <returns>メンバーの <see cref="T:System.ComponentModel.LocalizableAttribute" /> コンストラクターの値が true に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>プロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>依存関係プロパティに関連付けられているメタデータを取得します。</summary>
      <returns>依存関係プロパティのメタデータ。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>依存関係プロパティを表す <see cref="T:System.Type" /> を取得します。</summary>
      <returns>依存関係プロパティの <see cref="T:System.Type" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component">ハンドラーを追加する対象のコンポーネント。</param>
      <param name="handler">リスナーとして追加されるデリゲート。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>コンポーネントの特定のプロパティの値を既定値にリセットします。</summary>
      <param name="component">既定値にリセットする対象のプロパティ値を持つコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>コンポーネントの値を別の値に設定します。</summary>
      <param name="component">設定する対象のプロパティ値を持つコンポーネント。</param>
      <param name="value">新しい値。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>プロパティの値をシリアル化処理によって永続化する必要があるかどうかを示します。</summary>
      <param name="component">永続性について調べる対象のプロパティを持つコンポーネント。</param>
      <returns>プロパティを永続化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>このプロパティの値変更通知をプロパティ記述子以外 (コンポーネント自体など) から発生させてよいか、または <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> への直接呼び出しからだけ通知を発生させるかを示します。</summary>
      <returns>このプロパティの値変更通知をプロパティ記述子以外 (コンポーネント自体など) から発生させてよい場合は <see langword="true" />。 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> への直接呼び出しからだけ通知を発生させる場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> 値を返します。</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー パターン" を使用して <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>指定されたソースで <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>コレクション内の項目をグループに分割する方法を説明する型の抽象基底クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.GroupDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary>
        <see cref="T:System.Collections.IComparer" /> を実装するオブジェクトを使用してグループを並べ替えるカスタム比較子を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> を実装するオブジェクトを使用してグループを並べ替えるカスタム比較子。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>指定したアイテムのグループ名を返します。</summary>
      <param name="item">グループの名前を返す項目。</param>
      <param name="level">グループ化のレベル。</param>
      <param name="culture">コンバーターを提供する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>指定したアイテムのグループ名。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>指定された名前を持つサブグループのセットを使用してグループを初期化するために使用される名前のコレクションを取得します。</summary>
      <returns>指定された名前を持つサブグループのセットを使用してグループを初期化するために使用される名前のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>項目がグループに属するようにグループ名と項目名が一致するかどうかを示す値を返します。</summary>
      <param name="groupName">確認するグループの名前。</param>
      <param name="itemName">確認する項目の名前。</param>
      <returns>名前が一致し、項目がグループに属している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="e">発生しているイベントの引数。</param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>シリアル化プロセスがこのクラスのインスタンスの <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> プロパティの有効値をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <returns>
        <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.ComponentModel.GroupDescription.GroupNames" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary>シリアル化プロセスがこのクラスのインスタンスの <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> プロパティの有効値をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <returns>
        <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary>グループを並べ替える対象の並べ替え条件のコレクションを取得します。</summary>
      <returns>グループを並べ替える並べ替え条件のコレクション。</returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>現在のレコード管理、カスタムの並べ替え、フィルター処理、およびグループ化の機能を持つようにコレクションを有効にします。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>このビューが <see cref="P:System.ComponentModel.ICollectionView.Filter" /> プロパティを使用したフィルター処理をサポートするかどうかを示す値を取得します。</summary>
      <returns>このビューがフィルター処理をサポートする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>このビューが <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> プロパティを介したグループ化をサポートするかどうかを示す値を取得します。</summary>
      <returns>このビューがグループ化をサポートする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>このビューが <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> プロパティを介した並べ替えをサポートするかどうかを示す値を取得します。</summary>
      <returns>このビューが並べ替えをサポートする場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>指定された項目がこのコレクション ビューに属しているかどうかを示す値を返します。</summary>
      <param name="item">確認する対象のオブジェクト。</param>
      <returns>項目がこのコレクション ビューに属している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>並べ替えなど、カルチャによって異なる場合があるビューの操作に関するカルチャ情報を取得または設定します。</summary>
      <returns>並べ替え中に使用するカルチャ。</returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>このインターフェイスを実装している場合、現在の項目が変更された後に、このイベントを発生させます。</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>このインターフェイスを実装している場合、現在の項目が変更される前に、このイベントが発生します。 イベント ハンドラーは、このイベントをキャンセルできます。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>ビュー内の現在の項目を取得します。</summary>
      <returns>ビューの現在の項目。現在の項目が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>ビュー内での <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の順序位置を取得します。</summary>
      <returns>ビュー内での <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の順序位置。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>ビューの変更をマージして自動更新を遅延させるために使用できる遅延サイクルを入力します。</summary>
      <returns>呼び出し元のオブジェクトを破棄するために使用できる <see cref="T:System.IDisposable" /> オブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>項目をビューに含めることが適切であるかどうかを決定するために使用されるコールバックを取得または設定します。</summary>
      <returns>項目をビューに含めることが適切であるかどうかを決定するために使用されるメソッド。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>コレクション内の項目をビュー内でどのようにグループ化するかを説明する <see cref="T:System.ComponentModel.GroupDescription" /> オブジェクトのコレクションを取得します。</summary>
      <returns>コレクション内の項目をビュー内でどのようにグループ化するかを記述する <see cref="T:System.ComponentModel.GroupDescription" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>トップレベル グループを取得します。</summary>
      <returns>トップレベル グループの読み取り専用コレクション。グループがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>ビューの <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がコレクションの末尾を越えるかどうかを示す値を取得します。</summary>
      <returns>ビューの <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がコレクションの末尾を越える場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>ビューの <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がコレクションの先頭を越えるかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />ビューのがコレクションの先頭を越える場合は。それ以外の<see langword="false" />場合は。 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /></returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>結果のビューが空かどうかを示す値を返します。</summary>
      <returns>結果のビューが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>指定された項目をビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> に設定します。</summary>
      <param name="item">
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定する項目。</param>
      <returns>結果として得られる <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>ビュー内の最初の項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定します。</summary>
      <returns>結果として得られる <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>ビュー内の最後の項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定します。</summary>
      <returns>結果として得られる <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>ビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の後の項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />として設定します。</summary>
      <returns>結果として得られる <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>指定したインデックスにある項目を、ビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> になるように設定します。</summary>
      <param name="position">
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> を設定するインデックス。</param>
      <returns>結果として得られる <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>ビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の前にある項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定します。</summary>
      <returns>結果の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目の場合は <see langword="true" />、ビュー内の項目でない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>ビューを再作成します。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>コレクション内の項目をビュー内でどのように並べ替えるかを記述する <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトのコレクションを取得します。</summary>
      <returns>コレクション内の項目をビュー内でどのように並べ替えるかを記述する <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>基になるコレクションを返します。</summary>
      <returns>基になるコレクションである <see cref="T:System.Collections.IEnumerable" /> オブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>実装しているコレクションで、そのデータに関するビューの作成を有効にするインターフェイス。 通常、ユーザー コードはこのインターフェイスでメソッドを呼び出しません。</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>このインターフェイスを実装するコレクションの新しいビューを作成します。 通常、ユーザー コードはこのメソッドを呼び出しません。</summary>
      <returns>新しく作成されたビュー。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>
        <see cref="T:System.Windows.Data.CollectionView" /> に対するリアルタイムの並べ替え、グループ化、およびフィルタリングを可能にするプロパティを定義します。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>コレクション ビューがデータのリアルタイム フィルター処理のオン/オフ切り替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns>コレクション ビューがライブ フィルター処理のオン/オフ切り替えをサポートしている場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>コレクション ビューがリアルタイムのデータのグループ化のオンまたはオフをサポートするかどうかを示す値を取得します。</summary>
      <returns>コレクション ビューがライブ グループ化のオンまたはオフをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>コレクション ビューがリアルタイムのデータの並べ替えのオンまたはオフをサポートするかどうかを示す値を取得します。</summary>
      <returns>コレクション ビューがライブ並べ替えのオンまたはオフをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>リアルタイムでのデータのフィルター処理が有効かどうかを示す値を取得または設定します。</summary>
      <returns>リアルタイムのデータのフィルター選択が有効になっている場合は <see langword="true" />。ライブ フィルター選択が有効になっていない場合は <see langword="false" />。コレクション ビューがライブ フィルター処理を実装しているかどうかを特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>リアルタイムでのデータのグループ化が有効かどうかを示す値を取得または設定します。</summary>
      <returns>リアルタイムのデータのグループ化が有効になっている場合は <see langword="true" />。ライブ グループ化が有効になっていない場合は <see langword="false" />。コレクション ビューがライブ グループ化を実装しているかどうかを特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>リアルタイムでの並べ替えが有効かどうかを示す値を取得または設定します。</summary>
      <returns>リアルタイムのデータの並べ替えが有効になっている場合は <see langword="true" />。ライブ並べ替えが有効になっていない場合は <see langword="false" />。コレクション ビューがライブ並べ替えを実装しているかどうかを特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>リアルタイムのデータのフィルター選択に関係するプロパティを指定する文字列のコレクションを取得します。</summary>
      <returns>リアルタイムのデータのフィルター選択に関係するプロパティを指定する文字列のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>リアルタイムのデータのグループ化に関係するプロパティを指定する文字列のコレクションを取得します。</summary>
      <returns>リアルタイムのデータのグループ化に関係するプロパティを指定する文字列のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>リアルタイムのデータの並べ替えに関係するプロパティを指定する文字列のコレクションを取得します。</summary>
      <returns>リアルタイムのデータの並べ替えに関係するプロパティを指定する文字列のコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>
        <see cref="T:System.Windows.Data.CollectionView" /> が実装するメソッドとプロパティを定義して、コレクションに編集機能を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>新しい項目をコレクションに追加します。</summary>
      <returns>コレクションに追加された新しい項目。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>新しい項目をコレクションに追加できるかどうかを示す値を取得します。</summary>
      <returns>新しい項目をコレクションに追加できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>コレクション ビューが保留中の変更を破棄して、編集されたオブジェクトの元の値を復元できるかどうかを示す値を取得します。</summary>
      <returns>コレクション ビューが保留中の変更を破棄して、編集されたオブジェクトの元の値を復元できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>編集トランザクションを終了し、可能な場合は、項目の元の値を復元します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>追加トランザクションを終了し、保留中の新しい項目を破棄します。</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>コレクションから項目を削除できるかどうかを示す値を取得します。</summary>
      <returns>コレクションから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>編集トランザクションを終了し、保留中の変更を保存します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>追加トランザクションを終了し、保留中の新しい項目を保存します。</summary>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>現在の追加トランザクション処理中に追加される項目を取得します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> が <see langword="true" /> の場合は追加される項目。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>編集されているコレクション内の項目を取得します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> が <see langword="true" /> である場合は、編集されているコレクション内の項目。それ以外の場合は、<see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>指定した項目の編集トランザクションを開始します。</summary>
      <param name="item">編集する項目。</param>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>追加トランザクションが実行中かどうかを示す値を取得します。</summary>
      <returns>追加トランザクションが実行中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>編集トランザクションが実行中かどうかを示す値を取得します。</summary>
      <returns>編集トランザクションが実行中である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>コレクション ビューにある新しい項目のプレースホルダーの位置を取得または設定します。</summary>
      <returns>コレクション ビューにある新しい項目のプレースホルダーの位置を示す列挙値の 1 つ。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>指定した項目をコレクションから削除します。</summary>
      <param name="item">削除する項目。</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>コレクション内の指定した位置にある項目を削除します。</summary>
      <param name="index">削除する項目の位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満か、コレクション ビューに含まれる項目数を上回っています。</exception>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>特定の型の項目を追加できることを示すために <see cref="T:System.Windows.Data.CollectionView" /> で実装するメソッドとプロパティを定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>指定したオブジェクトをコレクションに追加します。</summary>
      <param name="newItem">コレクションに追加するオブジェクト。</param>
      <returns>コレクションに追加されるオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>指定したオブジェクトをコレクションに追加できるかどうかを示す値を取得します。</summary>
      <returns>指定したオブジェクトをコレクションに追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>オブジェクトのプロパティに関する情報を提供するプロパティを定義します。</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>コレクション内の項目で使用できるプロパティに関する情報を格納するコレクションを取得します。</summary>
      <returns>コレクション内の項目で使用できるプロパティに関する情報を格納するコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>プロパティに関する情報を格納します。</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.ItemPropertyInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">プロパティの名前。</param>
      <param name="type">プロパティの型。</param>
      <param name="descriptor">プロパティに関する追加情報を格納しているオブジェクト。</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>プロパティに関する追加情報を格納しているオブジェクトを取得します。</summary>
      <returns>プロパティに関する追加情報を格納しているオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>プロパティの名前を取得します。</summary>
      <returns>プロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>プロパティの型を取得します。</summary>
      <returns>プロパティの型。</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>新しい項目のプレースホルダーが表示される、コレクション内の場所を示します。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>新しい項目のプレースホルダーがコレクションの先頭に表示されます。  新しい項目は、コレクションの先頭で新しい項目のプレースホルダーの後にあります。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>新しい項目のプレースホルダーがコレクションの末尾に表示されます。 新しい項目は、コレクションの末尾で新しい項目のプレースホルダーの前に追加されます。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>コレクションは新しい項目のプレースホルダーを使用しません。 追加される項目の位置は、基になるコレクションに応じて決まります。  それらは通常、コレクションの末尾に追加されます。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>指定されたソースで指定されたプロパティの <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを処理するデリゲート。</param>
      <param name="propertyName">変更をリッスンする <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">複数のメソッドが <paramref name="handler" /> に関連付けられています。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>指定したリスナーを、指定したソースのリスナーのリストに追加します。</summary>
      <param name="source">イベントを持つオブジェクト。</param>
      <param name="listener">リスナーとして追加するオブジェクト。</param>
      <param name="propertyName">変更をリッスンする <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>指定したソースのデータから、アクティブでなくなったリスナーを削除します。</summary>
      <param name="source">すべてのリスナーを削除するソース オブジェクト。</param>
      <param name="data">削除するデータ。 これは <see cref="T:System.Collections.Specialized.HybridDictionary" /> であることが求められます。</param>
      <param name="purgeAll">リッスンを停止し、すべてのデータを完全に削除する場合は <see langword="true" /> に設定します。</param>
      <returns>一部のエントリが削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを処理するデリゲート。</param>
      <param name="propertyName">変更のリッスンを停止する <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">複数のメソッドが <paramref name="handler" /> に関連付けられています。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>指定したリスナーを、指定したソースのリスナーのリストから削除します。</summary>
      <param name="source">リスナーを削除するオブジェクト。</param>
      <param name="listener">削除するリスナー。</param>
      <param name="propertyName">変更のリッスンを停止する <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> のリッスンを開始するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>指定したソースで <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> のリッスンを停止するソース オブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>型記述子で報告するプロパティを指定します。具体的には、<see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> メソッドです。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filter">このプロパティ フィルターを記述するオプション。</param>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性が、指定したオブジェクトと等しいかどうかを示す値を返します。</summary>
      <param name="value">この <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> と比較するオブジェクト。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.PropertyFilterAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>この <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性のフィルター オプションを取得します。</summary>
      <returns>プロパティ フィルター オプション。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性 のハッシュ コードを返します。</summary>
      <returns>符号付き 32 ビット整数値。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性のプロパティ フィルター オプションが、指定されたオブジェクトのプロパティ フィルター オプションと一致するかどうかを示す値を返します。</summary>
      <param name="value">比較対象のオブジェクト。 このオブジェクトは、<see cref="T:System.ComponentModel.PropertyFilterAttribute" /> であることが求められます。</param>
      <returns>一致が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>型記述子で報告するプロパティを指定します。具体的には、<see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> メソッドです。 この列挙体は、<see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> プロパティの値を指定するために使用します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>すべてのプロパティを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>オブジェクトの現在のコンテキストが指定された場合に、無効なプロパティのみを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>プロパティを返しません。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>ローカル値が現在設定されているプロパティのみを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>ローカル値が設定されていないプロパティか、またはプロパティが外部の式ストア (バインディングや遅延リソースなど) に設定されていないプロパティだけを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>現在のスコープにあるオブジェクトで有効なすべてのプロパティを返します。</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>コレクションを並べ替える基準として使用される方向およびプロパティ名を定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.SortDescription" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="propertyName">リストの並べ替えに使用するプロパティの名前。</param>
      <param name="direction">並べ替え順序。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="direction" /> パラメーターが有効な値を指定していません。</exception>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>昇順と降順のどちらで並べ替えるかを示す値を取得または設定します。</summary>
      <returns>昇順と降順のどちらで並べ替えるかを示す <see cref="T:System.ComponentModel.ListSortDirection" /> 値。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>指定したインスタンスと <see cref="T:System.ComponentModel.SortDescription" /> の現在のインスタンスを比較し、値が等しいかどうかを確認します。</summary>
      <param name="obj">比較対象の <see cref="T:System.ComponentModel.SortDescription" /> インスタンス。</param>
      <returns>
        <paramref name="obj" /> および <see cref="T:System.ComponentModel.SortDescription" /> のこのインスタンスが同じ値を持つ場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>
        <see cref="T:System.ComponentModel.SortDescription" /> のインスタンスのハッシュ コードを返します。</summary>
      <returns>
        <see cref="T:System.ComponentModel.SortDescription" /> のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>このオブジェクトが不変の状態であるかどうかを示す値を取得します。</summary>
      <returns>このオブジェクトが使用中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>2 つの <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトを比較し、値が等しいかどうかを確認します。</summary>
      <param name="sd1">比較する 1 番目のインスタンス。</param>
      <param name="sd2">比較する 2 番目のインスタンス。</param>
      <returns>2 つのオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>2 つの <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトを比較し、値が等しくないかどうかを確認します。</summary>
      <param name="sd1">比較する 1 番目のインスタンス。</param>
      <param name="sd2">比較する 2 番目のインスタンス。</param>
      <returns>値が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>並べ替えの基準として使用されるプロパティ名を取得または設定します。</summary>
      <returns>既定値は NULL です。</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>
        <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SortDescriptionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>項目が追加または削除されたときに発生します。</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>
        <see cref="T:System.ComponentModel.SortDescriptionCollection" /> の空および変更不可能なインスタンスを取得します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の 0 から始まるインデックス。</param>
      <param name="item">挿入するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>コレクション内の指定したインデックス位置にある項目を削除します。</summary>
      <param name="index">削除する要素の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item">指定したインデックス位置に存在する要素の新しい値。</param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>項目が追加または削除されたときに発生します。</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>特定のオブジェクトに関するトレースの詳細レベルについて説明します。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>すべての詳細情報をトレースします。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>少量の詳細情報をトレースします。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>中程度の量の詳細情報をトレースします。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>入手可能な詳細情報をトレースしません。</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>デバッグ トレースのサポートを、特に Windows Presentation Foundation (WPF) アプリケーション向けに提供します。</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>アニメーション トレース ソースを取得します。</summary>
      <returns>アニメーション トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>データ バインディング トレース ソースを取得します。</summary>
      <returns>データ バインディング トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>依存関係プロパティのトレース ソースを取得します。</summary>
      <returns>依存関係プロパティのトレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>ドキュメント トレース ソースを取得します。</summary>
      <returns>ドキュメント トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Freezable トレース ソースを取得します。</summary>
      <returns>Freezable トレース ソース。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>指定した要素の <see cref="System.Diagnostics.PresentationTraceSources.TraceLevel" /> 添付プロパティの値を取得します。</summary>
      <param name="element">プロパティ値の読み取り元になる要素。</param>
      <returns>要素の <see cref="System.Diagnostics.PresentationTraceSources.TraceLevel" /> プロパティ値。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>hwnd ホスト トレース ソースを取得します。</summary>
      <returns>hwnd ホスト トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>マークアップ トレース ソースを取得します。</summary>
      <returns>マークアップ トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>名前のスコープ トレース ソースを取得します。</summary>
      <returns>名前のスコープ トレース ソース。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>app.config ファイルを強制的に再読み込みすることで、トレース ソースを更新します。</summary>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>リソース ディクショナリ トレース ソースを取得します。</summary>
      <returns>リソース ディクショナリ トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>ルーティング イベントのトレース ソースを取得します。</summary>
      <returns>ルーティング イベントのトレース ソース。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>指定した要素に <see cref="System.Diagnostics.PresentationTraceSources.TraceLevel" /> 添付プロパティの値を設定します。</summary>
      <param name="element">添付プロパティの書き込み先となる要素。</param>
      <param name="traceLevel">必要な <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 値。</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>シェル トレース ソースを取得します。</summary>
      <returns>シェル トレース ソース。</returns>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>
        <see cref="System.Diagnostics.PresentationTraceSources.TraceLevel" /> 添付プロパティを識別します。</summary>
    </member>
    <member name="T:System.IO.FileFormatException">
      <summary>特定のファイル形式仕様に従う必要がある入力ファイルまたはデータ ストリームが正しくない場合にスローされる例外。</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor">
      <summary>
        <see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成し、シリアル化されたデータを使用して初期化します。 このコンストラクターは、逆シリアル化中に、ストリームで送信された例外オブジェクトを再構築するために呼び出されます。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="message">エラー メッセージを表す <see cref="T:System.String" /> 値。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよび例外の種類を使用して、<see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="message">エラー メッセージを表す <see cref="T:System.String" /> 値。</param>
      <param name="innerException">現在の例外の原因を表す <see cref="P:System.Exception.InnerException" /> プロパティの値。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri)">
      <summary>ソースの URI 値を使用して、<see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="sourceUri">このエラーの原因になったファイルの <see cref="T:System.Uri" /> 値。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.Exception)">
      <summary>ソースの URI 値と例外の種類を使用して、<see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="sourceUri">このエラーの原因になったファイルの <see cref="T:System.Uri" /> 値。</param>
      <param name="innerException">現在の例外の原因を表す <see cref="P:System.Exception.InnerException" /> プロパティの値。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String)">
      <summary>ソースの URI 値と指定したエラー メッセージを使用して、<see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="sourceUri">このエラーの原因になったファイルの <see cref="T:System.Uri" /> 値。</param>
      <param name="message">エラー メッセージを表す <see cref="T:System.String" /> 値。</param>
    </member>
    <member name="M:System.IO.FileFormatException.#ctor(System.Uri,System.String,System.Exception)">
      <summary>ソースの URI 値、指定したエラー メッセージ、および例外の種類を使用して、<see cref="T:System.IO.FileFormatException" /> クラスの新しいインスタンスを作成します。</summary>
      <param name="sourceUri">このエラーの原因になったファイルの <see cref="T:System.Uri" /> 値。</param>
      <param name="message">エラー メッセージを表す <see cref="T:System.String" /> 値。</param>
      <param name="innerException">現在の例外の原因を表す <see cref="P:System.Exception.InnerException" /> プロパティの値。</param>
    </member>
    <member name="M:System.IO.FileFormatException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>ファイル名と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトを設定します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="P:System.IO.FileFormatException.SourceUri">
      <summary>
        <see cref="T:System.IO.FileFormatException" /> の原因になったファイルの名前を取得します。</summary>
      <returns>この例外の原因になったファイルの名前を表す <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>署名に使用される X.509 証明書を格納する場所を指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>証明書は、独自の <see cref="T:System.IO.Packaging.PackagePart" /> に埋め込まれます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>証明書は、追加された署名に対して作成された <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> に埋め込まれます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>パッケージに埋め込まれていない証明書。</summary>
    </member>
    <member name="T:System.IO.Packaging.CompressionOption">
      <summary>
        <see cref="T:System.IO.Packaging.PackagePart" /> に格納されているコンテンツの圧縮レベルを指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Fast">
      <summary>圧縮はパフォーマンスについて最適化されます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Maximum">
      <summary>圧縮はサイズについて最適化されます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.Normal">
      <summary>圧縮はサイズとパフォーマンスのバランスについて最適化されます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.NotCompressed">
      <summary>圧縮はオフになります。</summary>
    </member>
    <member name="F:System.IO.Packaging.CompressionOption.SuperFast">
      <summary>圧縮は高いパフォーマンスについて最適化されます。</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>暗号化されたパッケージを含む OLE 複合ファイルを表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>暗号化されたパッケージとそれを保持する OLE 複合ファイルを閉じます。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>指定したストリームに <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を作成して返します。</summary>
      <param name="envelopeStream">ファイルを作成するストリーム。</param>
      <param name="publishLicense">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <returns>新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> が読み取り/書き込みアクセスを提供しません。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を作成して返し、指定したファイル名を割り当てます。</summary>
      <param name="envelopeFileName">OLE 複合ファイルの名前。</param>
      <param name="publishLicense">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <returns>新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>指定した暗号化されていないパッケージをコンテンツとして使用する <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を (指定したストリームに) 作成して返します。</summary>
      <param name="envelopeStream">ファイルを作成するストリーム。</param>
      <param name="packageStream">暗号化されていない、既存のパッケージを表すストリーム。</param>
      <param name="publishLicense">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <returns>新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> または <paramref name="packageStream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" /> が読み取り/書き込みアクセスを提供しません。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>指定した暗号化されていないパッケージをコンテンツとして使用する <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を作成して返し、指定したファイル名を割り当てます。</summary>
      <param name="envelopeFileName">OLE 複合ファイルの名前。</param>
      <param name="packageStream">暗号化されていない、既存のパッケージを表すストリーム。</param>
      <param name="publishLicense">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <returns>新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> または <paramref name="packageStream" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>読み取り、書き込み、または読み書き両方のうち、どのアクセス権を使用してファイルが開かれたかを指定する値を取得します。</summary>
      <returns>ファイルを開くために使用された <see cref="T:System.IO.FileAccess" /> 値。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> およびそのパッケージ コンテンツ両方のストリームをフラッシュします。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 内部の暗号化されたパッケージを取得します。</summary>
      <returns>エンベロープ内の <see cref="T:System.IO.Packaging.Package" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>指定したストリームが、暗号化されたパッケージ ストリームを含む OLE 複合ファイルかどうかを指定する値を取得します。</summary>
      <param name="stream">テストされるストリーム。</param>
      <returns>指定したストリームが、暗号化されたパッケージ ストリームを含む OLE 複合ファイルである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>指定したファイルが、暗号化されたパッケージ ストリームを含んだ OLE 複合ファイルかどうかを指定する値を取得します。</summary>
      <param name="fileName">テストされるファイル。</param>
      <returns>指定したファイルが、暗号化されたパッケージ ストリームを含んだ OLE 複合ファイルである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>指定したストリーム内の暗号化されたパッケージを開きます。</summary>
      <param name="envelopeStream">暗号化されたパッケージを含むストリーム。</param>
      <returns>開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>読み取り専用かつ非共有として指定されたファイル内の暗号化されたパッケージを開きます。</summary>
      <param name="envelopeFileName">暗号化されたパッケージを含むファイル。</param>
      <returns>開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>非共有として指定され、特定のアクセス権が必要なファイル内の暗号化されたパッケージを開きます。</summary>
      <param name="envelopeFileName">暗号化されたパッケージを含むファイル。</param>
      <param name="access">アクセスの種類。</param>
      <returns>開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>指定したファイル内の暗号化されたパッケージを開き、特定のアクセス権と共有を割り当てます。</summary>
      <param name="envelopeFileName">暗号化されたパッケージを含むファイル。</param>
      <param name="access">アクセスの種類。</param>
      <param name="sharing">共有の種類。</param>
      <returns>開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>権限管理ドキュメントのコア パッケージ プロパティ (タイトルやサブジェクト名など) を取得します。</summary>
      <returns>パッケージの <see cref="T:System.IO.Packaging.PackageProperties" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> に格納されている権限管理情報を取得します。主に対象となるのは、権限管理のために保護されているパッケージが組み込まれた OLE 複合ファイルに格納されている、<see cref="T:System.Security.RightsManagement.PublishLicense" /> および <see cref="T:System.Security.RightsManagement.UseLicense" /> です。</summary>
      <returns>パッケージの <see cref="T:System.IO.Packaging.RightsManagementInformation" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>暗号化されたパッケージの外部にある複合ファイル ストリームへアクセスするためのオブジェクトを取得します。</summary>
      <returns>暗号化されたパッケージの外部にある OLE 複合ファイル内のストリームを表す <see cref="T:System.IO.Packaging.StorageInfo" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.EncryptionOption">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> 内のパーツの暗号化オプションを指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.None">
      <summary>暗号化なし。</summary>
    </member>
    <member name="F:System.IO.Packaging.EncryptionOption.RightsManagement">
      <summary>権限管理を介してサポートされる暗号化。</summary>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>
        <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> が無効な署名を検出したときに発生する <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> を処理するメソッドを表します。</summary>
      <param name="sender">イベントのソースである無効な <see cref="T:System.IO.Packaging.PackageDigitalSignature" />。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.IO.Packaging.Package">
      <summary>複数のデータ オブジェクトを格納可能なコンテナーを表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.#ctor(System.IO.FileAccess)">
      <summary>指定した <see cref="T:System.IO.Packaging.Package" /> を使用する <see cref="T:System.IO.FileAccess" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="openFileAccess">パッケージのファイル IO アクセス許可。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="openFileAccess" /> の値が有効ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Close">
      <summary>パッケージと、基になるすべてのパーツ ストリームを保存して閉じます。</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String)">
      <summary>指定した URI とコンテンツ タイプを使用して、新しい非圧縮のパーツを作成します。</summary>
      <param name="partUri">新しいパーツの Uniform Resource Identifier (URI)。</param>
      <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
      <returns>新規作成されたパーツ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> は有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="partUri" /> を持つパーツが、既にパッケージに存在します。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (新しいパーツを追加できません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>指定した URI、コンテンツ タイプ、および圧縮オプションを使用して、新しいパーツを作成します。</summary>
      <param name="partUri">新しいパーツの URI。</param>
      <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
      <param name="compressionOption">データ ストリームの圧縮オプション。<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" /> または <see cref="F:System.IO.Packaging.CompressionOption.Normal" /> 圧縮。</param>
      <returns>新規作成されたパーツ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> または <paramref name="contentType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> が有効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI) ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="partUri" /> を持つパーツが、既にパッケージに存在します。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="compressionOption" /> 値が有効ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (新しいパーツを追加できません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>派生クラスでオーバーライドされると、新しいパーツをパッケージ内に作成します。</summary>
      <param name="partUri">作成中のパーツの Uniform Resource Identifier (URI)。</param>
      <param name="contentType">データ ストリームのコンテンツ タイプ。</param>
      <param name="compressionOption">データ ストリームの圧縮オプション。</param>
      <returns>作成されたパーツ。</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>指定した URI、ターゲット モード、およびリレーションシップ型を使用して、パーツへのパッケージ レベル リレーションシップを作成します。</summary>
      <param name="targetUri">ターゲット パーツの Uniform Resource Identifier (URI)。</param>
      <param name="targetMode">ターゲット パーツが、パッケージに対して <see cref="F:System.IO.Packaging.TargetMode.Internal" />、<see cref="F:System.IO.Packaging.TargetMode.External" /> のいずれであるかを示します。</param>
      <param name="relationshipType">リレーションシップのロールを一意に定義する URI。</param>
      <returns>指定したパーツへのパッケージ レベル リレーションシップ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetUri" /> パーツが <see cref="T:System.IO.Packaging.PackageRelationship" /> です。または <paramref name="targetMode" /> が <see cref="F:System.IO.Packaging.TargetMode.Internal" /> で、<paramref name="targetUri" /> が絶対 URI です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> の値が有効ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>指定した URI、ターゲット モード、リレーションシップ型、および 識別子 (ID) を使用して、パーツへのパッケージ レベル リレーションシップを作成します。</summary>
      <param name="targetUri">ターゲット パーツの Uniform Resource Identifier (URI)。</param>
      <param name="targetMode">ターゲット パーツが、パッケージに対して <see cref="F:System.IO.Packaging.TargetMode.Internal" />、<see cref="F:System.IO.Packaging.TargetMode.External" /> のいずれであるかを示します。</param>
      <param name="relationshipType">リレーションシップのロールを一意に定義する URI。</param>
      <param name="id">一意の XML 識別子。</param>
      <returns>指定したパーツへのパッケージ レベル リレーションシップ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetUri" /> パーツが <see cref="T:System.IO.Packaging.PackageRelationship" /> です。または <paramref name="targetMode" /> が <see cref="F:System.IO.Packaging.TargetMode.Internal" /> で、<paramref name="targetUri" /> が絶対 URI です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> の値が有効ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子ではないか、指定した <paramref name="id" /> を持つパーツが既にパッケージ内に存在します。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePart(System.Uri)">
      <summary>指定した URI を持つパーツをパッケージから削除します。</summary>
      <param name="partUri">削除するパーツの URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> は有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.DeletePartCore(System.Uri)">
      <summary>派生クラスでオーバーライドされると、指定した URI を持つパーツを削除します。</summary>
      <param name="partUri">削除する <see cref="P:System.IO.Packaging.PackagePart.Uri" /> の <see cref="T:System.IO.Packaging.PackagePart" />。</param>
    </member>
    <member name="M:System.IO.Packaging.Package.DeleteRelationship(System.String)">
      <summary>パッケージ レベル リレーションシップを削除します。</summary>
      <param name="id">削除する <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> の <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Dispose(System.Boolean)">
      <summary>すべてのパーツおよびリレーションシップの内容をフラッシュして保存し、パッケージを閉じ、すべてのリソースを解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.IO.Packaging.Package.FileOpenAccess">
      <summary>パッケージのファイル アクセス設定を取得します。</summary>
      <returns>
        <see cref="T:System.IO.FileAccess" /> 値、つまり <see cref="F:System.IO.FileAccess.Read" />、<see cref="F:System.IO.FileAccess.Write" />、または <see cref="F:System.IO.FileAccess.ReadWrite" /> の 1 つ。</returns>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Flush">
      <summary>パッケージに含まれているすべてのパーツおよびリレーションシップの内容を保存します。</summary>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用であり、変更することはできません。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.FlushCore">
      <summary>派生クラスでオーバーライドされると、すべてのパーツとリレーションシップの内容を派生クラス ストアに保存します。</summary>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPart(System.Uri)">
      <summary>指定した URI を持つパーツを返します。</summary>
      <param name="partUri">返されるパーツの Uniform Resource Identifier (URI)。</param>
      <returns>指定した <paramref name="partUri" /> を持つパーツ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> が有効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI) ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="partUri" /> を持つパーツが、パッケージ内に存在しません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartCore(System.Uri)">
      <summary>派生クラスでオーバーライドされると、指定した URI によってアドレス指定されるパーツを返します。</summary>
      <param name="partUri">取得されるパーツの Uniform Resource Identifier (URI)。</param>
      <returns>要求されたパーツ。指定した <paramref name="partUri" /> を持つパーツがパッケージ内に存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetParts">
      <summary>パッケージに含まれているすべてのパーツのコレクションを返します。</summary>
      <returns>パッケージに含まれているすべての <see cref="T:System.IO.Packaging.PackagePart" /> 要素のコレクション。</returns>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetPartsCore">
      <summary>派生クラスでオーバーライドされると、パッケージ内のすべてのパーツの配列を返します。</summary>
      <returns>パッケージに含まれるすべてのパーツの配列。</returns>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationship(System.String)">
      <summary>指定した ID を持つパッケージ レベル リレーションシップを返します。</summary>
      <param name="id">返されるリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <returns>指定した <paramref name="id" /> を持つパッケージ レベル リレーションシップ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="id" /> を持つリレーションシップがパッケージ内に存在しません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationships">
      <summary>すべてのパッケージ レベル リレーションシップのコレクションを返します。</summary>
      <returns>パッケージに含まれているすべてのパッケージ レベル リレーションシップのコレクション。</returns>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.GetRelationshipsByType(System.String)">
      <summary>指定した <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> に一致するすべてのパッケージ レベル リレーションシップのコレクションを返します。</summary>
      <param name="relationshipType">コレクションで照合を行い、結果を返す <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。</param>
      <returns>指定した <paramref name="relationshipType" /> に一致するパッケージ レベル リレーションシップのコレクション。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> が空の文字列です。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream)">
      <summary>指定した IO ストリームでパッケージを開きます。</summary>
      <param name="stream">パッケージを開く IO ストリーム。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.IOException">開くパッケージには、読み取りまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は書き込み専用です。または開くパッケージには、書き込みまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)">
      <summary>指定した IO ストリームとファイル モードでパッケージを開きます。</summary>
      <param name="stream">パッケージを開く IO ストリーム。</param>
      <param name="packageMode">パッケージを開くときのファイル モード。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> の値が無効です。</exception>
      <exception cref="T:System.IO.IOException">開くパッケージには、読み取りまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は書き込み専用です。または開くパッケージには、書き込みまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)">
      <summary>指定した IO ストリーム、ファイル モード、およびファイル アクセス設定でパッケージを開きます。</summary>
      <param name="stream">パッケージを開く IO ストリーム。</param>
      <param name="packageMode">パッケージを開くときのファイル モード。</param>
      <param name="packageAccess">パッケージを開くときのファイル アクセス。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> または <paramref name="packageAccess" /> の値が有効ではありません。</exception>
      <exception cref="T:System.IO.IOException">開くパッケージには、読み取りまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は書き込み専用です。または開くパッケージには、書き込みまたは読み取り/書き込みアクセス許可が必要であり、指定した <paramref name="stream" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String)">
      <summary>指定したパスとファイル名でパッケージを開きます。</summary>
      <param name="path">パッケージのパスおよびファイル名。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)">
      <summary>指定したファイル モードを使用して、指定したパスにあるパッケージを開きます。</summary>
      <param name="path">パッケージのパスおよびファイル名。</param>
      <param name="packageMode">パッケージを開くときのファイル モード。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> の値が有効ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
      <summary>指定したファイル モードとファイル アクセス設定を使用して、指定したパスにあるパッケージを開きます。</summary>
      <param name="path">パッケージのパスおよびファイル名。</param>
      <param name="packageMode">パッケージを開くときのファイル モード。</param>
      <param name="packageAccess">パッケージを開くときのファイル アクセス。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" /> または <paramref name="packageAccess" /> の値が有効ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
      <summary>指定したファイル モード、ファイル アクセス、およびファイル共有設定を使用して、指定したパスにあるパッケージを開きます。</summary>
      <param name="path">パッケージのパスおよびファイル名。</param>
      <param name="packageMode">パッケージを開くときのファイル モード。</param>
      <param name="packageAccess">パッケージを開くときのファイル アクセス。</param>
      <param name="packageShare">パッケージを開くときのファイル共有モード。</param>
      <returns>開かれたパッケージ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="packageMode" />、<paramref name="packageAccess" />、または <paramref name="packageShare" /> の値が有効ではありません。</exception>
    </member>
    <member name="P:System.IO.Packaging.Package.PackageProperties">
      <summary>パッケージのコア プロパティを取得します。</summary>
      <returns>パッケージのコア プロパティ。</returns>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.PartExists(System.Uri)">
      <summary>指定した URI を持つパーツがパッケージ内に存在するかどうかを示します。</summary>
      <param name="partUri">チェックするパーツの <see cref="T:System.Uri" />。</param>
      <returns>指定した <paramref name="partUri" /> を持つパーツがパッケージ内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> が有効な <see cref="T:System.IO.Packaging.PackagePart" /> Uniform Resource Identifier (URI) ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です (情報を読み取ることはできません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.RelationshipExists(System.String)">
      <summary>指定した ID を持つパッケージ レベル リレーションシップがパッケージに含まれているかどうかを示します。</summary>
      <param name="id">確認対象のリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <returns>指定した <paramref name="id" /> を持つパッケージ レベル リレーションシップがパッケージ内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。</exception>
      <exception cref="T:System.ObjectDisposedException">パッケージが開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です。</exception>
    </member>
    <member name="M:System.IO.Packaging.Package.System#IDisposable#Dispose">
      <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートします。アプリケーションで使用するためのものではありません。  代わりに、タイプ セーフ <see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> メソッドを使用します。</summary>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>パッケージ パーツとリレーションシップのセットに適用されるデジタル署名を表します。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>X.509 証明書の埋め込みオプションを取得します。</summary>
      <returns>デジタル署名のオプションを指定する <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 値の 1 つ。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>指定したパーツに適用される <see cref="T:System.Security.Cryptography.Xml.Transform" /> 操作の順序付きリストを返します。</summary>
      <param name="partName">変換リストを返す <see cref="T:System.Uri" /> の <see cref="T:System.IO.Packaging.PackagePart" />。</param>
      <returns>指定した <paramref name="partName" /> URI を持つパーツに適用される正規 XML 変換を表す、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> や <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" /> などの URI 文字列の順序付きリスト。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>XML デジタル署名を取得または設定します。</summary>
      <returns>XML デジタル署名。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>署名を含む <see cref="T:System.IO.Packaging.PackagePart" /> を取得します。</summary>
      <returns>署名を含むパッケージ パーツ。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>署名の種類を識別する URI 文字列を取得します。</summary>
      <returns>署名の種類を識別する URI 文字列。 既定値は、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" /> です。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> の暗号化されたハッシュ値を取得します。</summary>
      <returns>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> の暗号化されたハッシュ値を含むバイト配列。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>この署名で署名されるすべての <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトのコレクションを取得します。</summary>
      <returns>この署名で署名されるすべてのパッケージ パーツを含むコレクション。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>この署名で署名された <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツのリストを取得します。</summary>
      <returns>この署名で署名された <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツのリスト。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>署名者の X.509 証明書を取得します。</summary>
      <returns>署名者のデジタル証明書。証明書が <see cref="T:System.IO.Packaging.Package" /> に格納されていない場合は <see langword="null" />。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>署名が作成された日時を取得します。</summary>
      <returns>署名が作成された日時。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> プロパティによって返される日時の形式を取得します。</summary>
      <returns>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> プロパティによって返される日時の形式。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>X.509 証明書に対してデジタル署名を検証します。</summary>
      <returns>検証に成功した場合は <see cref="F:System.IO.Packaging.VerifyResult.Success" />。それ以外の場合は、問題を識別する <see cref="T:System.IO.Packaging.VerifyResult" /> 値のいずれか。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>指定した X.509 証明書に対してデジタル署名を検証します。</summary>
      <param name="signingCertificate">デジタル署名の検証対象となる署名者の X.509 証明書。</param>
      <returns>検証に成功した場合は <see cref="F:System.IO.Packaging.VerifyResult.Success" />。それ以外の場合は、問題を識別する <see cref="T:System.IO.Packaging.VerifyResult" /> 値のいずれか。</returns>
      <exception cref="T:System.InvalidOperationException">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> でデジタル署名を作成し検証するためのユーティリティ クラスを提供します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>指定した <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> で使用する <see cref="T:System.IO.Packaging.Package" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="package">この署名マネージャーに関連付けられたパッケージ。</param>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>パッケージの各パートにデジタル署名するために <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> メソッドで使われる X.509 証明書の埋め込みオプションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>ユーザーが選択した X.509 証明書を使用して、パッケージのすべての署名に副署名します。</summary>
      <returns>副署名として追加された署名。証明書が見つからない場合またはユーザーが証明書選択ダイアログをキャンセルした場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>パッケージ内のすべての署名に、指定した X.509 証明書で副署名します。</summary>
      <param name="certificate">副署名として追加する X.509 証明書。</param>
      <returns>副署名として追加された署名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> は <see langword="null" /> です</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>指定した X.509 証明書を使用して、署名の一覧に副署名します。</summary>
      <param name="certificate">指定した各 <paramref name="signatures" /> に副署名するための X.509 証明書。</param>
      <param name="signatures">副署名の対象となる署名の一覧。</param>
      <returns>各 <paramref name="signatures" /> に副署名するために使用するデジタル署名。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> パラメーターまたは <paramref name="signatures" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">パッケージに署名された <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトが含まれていません。</exception>
      <exception cref="T:System.ArgumentException">パッケージに <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> パーツが含まれていません。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>署名の作成および検証に使用される既定のハッシュ アルゴリズムを識別する URI 文字列を取得します。</summary>
      <returns>署名の作成および検証に使用される既定のハッシュアルゴリズムを識別する URI 文字列。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>指定した署名の Uniform Resource Identifier (URI) に対するデジタル署名を返します。</summary>
      <param name="signatureUri">返されるデジタル署名の URI。</param>
      <returns>指定した <paramref name="signatureUri" /> のデジタル署名。指定した <paramref name="signatureUri" /> の署名が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>署名を作成および検証するために使用される <see cref="T:System.Security.Cryptography.HashAlgorithm" /> インスタンスの URI 識別子を取得または設定します。</summary>
      <returns>署名の作成および検証に使用する <see cref="T:System.Security.Cryptography.HashAlgorithm" /> インスタンスの <see cref="T:System.Security.Cryptography.Xml.SignedXml" /> URI 識別子。</returns>
      <exception cref="T:System.ArgumentNullException">設定する URI の文字列が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">設定する URI の文字列が空です。</exception>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>
        <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> で無効な署名が見つかった場合に発生します。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>パッケージに署名が含まれているかどうかを示す値を取得します。</summary>
      <returns>パッケージに署名が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>証明書選択ダイアログ ボックスを表示する親ウィンドウへのハンドルを取得または設定します。</summary>
      <returns>証明書選択ダイアログ ボックスを表示するために使用する親ウィンドウのハンドル。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>パッケージからすべてのデジタル署名を削除します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>指定した署名の Uniform Resource Identifier (URI) と共にデジタル署名を削除します。</summary>
      <param name="signatureUri">削除する <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> の URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>X.509 証明書をユーザーに要求するプロンプトを表示します。この証明書を使用して、指定されたパッケージ パーツの一覧にデジタル署名します。</summary>
      <param name="parts">署名する <see cref="T:System.IO.Packaging.PackagePart" /> 要素の Uniform Resource Identifier (URI) の一覧。</param>
      <returns>
        <paramref name="parts" /> の一覧の署名に使用するデジタル署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>指定された X.509 証明書を使用してパッケージ パーツの一覧を署名します。</summary>
      <param name="parts">署名する <see cref="T:System.IO.Packaging.PackagePart" /> 要素の Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate">指定された <paramref name="parts" /> のそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <returns>
        <paramref name="parts" /> の指定された一覧に署名するために使用されるデジタル署名、または、証明書が見つからなかった場合や証明書の選択ダイアログ ボックスでユーザーが [キャンセル] をクリックした場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>指定した X.509 証明書を使用して、パッケージ パーツとパッケージ リレーションシップの一覧に署名します。</summary>
      <param name="parts">署名する <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトの Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate">指定したパーツおよびリレーションシップのそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <param name="relationshipSelectors">署名する <see cref="T:System.IO.Packaging.PackageRelationship" /> オブジェクトの一覧。</param>
      <returns>
        <paramref name="parts" /> および <paramref name="relationshipSelectors" /> の一覧で指定されている要素の署名に使用するデジタル署名。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> でも <paramref name="relationshipSelectors" /> でも、署名するオブジェクトが指定されていません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>指定した X.509 証明書と 識別子 (ID) を使用して、パッケージ パーツとパッケージ リレーションシップの一覧に署名します。</summary>
      <param name="parts">署名する <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトの Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate">指定したパーツおよびリレーションシップのそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <param name="relationshipSelectors">署名する <see cref="T:System.IO.Packaging.PackageRelationship" /> オブジェクトの一覧。</param>
      <param name="signatureId">署名に関連付ける識別文字列。</param>
      <returns>
        <paramref name="parts" /> および <paramref name="relationshipSelectors" /> の一覧で指定されている要素の署名に使用するデジタル署名。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> と <paramref name="relationshipSelectors" /> のいずれによっても、署名する要素は指定されません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>指定した X.509 証明書および署名の 識別子 (ID) を使用して、パッケージ パーツ、パッケージ リレーションシップ、またはカスタム オブジェクトの一覧に署名します。</summary>
      <param name="parts">署名する <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトの Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate">指定したパーツおよびリレーションシップのそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <param name="relationshipSelectors">署名する <see cref="T:System.IO.Packaging.PackageRelationship" /> オブジェクトの一覧。</param>
      <param name="signatureId">署名に関連付ける識別文字列。</param>
      <param name="signatureObjects">署名するカスタム データ オブジェクトの一覧。</param>
      <param name="objectReferences">署名するカスタム オブジェクトへの参照の一覧。</param>
      <returns>
        <paramref name="parts" /> および <paramref name="relationshipSelectors" /> の一覧で指定されている要素の署名に使用するデジタル署名。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" />、<paramref name="relationshipSelectors" />、<paramref name="signatureObjects" />、および <paramref name="objectReferences" /> のいずれによっても、署名する要素は指定されません。</exception>
      <exception cref="T:System.InvalidOperationException">署名されているパーツの <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> が空、<see langword="null" />、または定義されていない <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" /> を参照しています。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" /> は <see langword="null" /> ではありません。また、有効な XML スキーマ ID (先頭が数値で始まるなど) でもありません。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>署名元パーツの Uniform Resource Identifier (URI) を取得します。</summary>
      <returns>署名元パーツの URI。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>既定の署名元のリレーションシップの種類を取得します。</summary>
      <returns>既定の署名元のリレーションシップの種類。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>パッケージに含まれるすべての署名のコレクションを取得します。</summary>
      <returns>すべての <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>署名の <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> の作成に使用される日時形式を取得または設定します。</summary>
      <returns>署名の <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> の作成に使用される日時形式。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>定義された各 <see cref="P:System.IO.Packaging.PackagePart.ContentType" />、および関連する XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 識別子を含むディクショナリを取得します。</summary>
      <returns>定義されている各 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> とそれに関連付けられている XML <see cref="T:System.Security.Cryptography.Xml.Transform" />を含むディクショナリ。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 識別子を含むディクショナリを取得します。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>指定された X.509 証明書を検証します。</summary>
      <param name="certificate">検証する X.509 証明書。</param>
      <returns>証明書が正しく検証された場合は <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (値 0)。それ以外の場合は、エラー フラグのビットごとの列挙体。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>パッケージ内にあるすべての署名済みパーツの署名を検証します。</summary>
      <param name="exitOnFailure">最初の失敗で終了する場合は <see langword="true" />。続行してすべての署名をチェックする場合は <see langword="false" />。</param>
      <returns>すべての署名が正しく検証された場合は <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (値 0)。それ以外の場合は、エラーを識別する列挙体。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackagePart">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> に格納されるパーツの基本クラスを提供します。  このクラスは抽象クラスです。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri)">
      <summary>親 <see cref="P:System.IO.Packaging.PackagePart.Package" /> とパーツ URI を指定して、<see cref="T:System.IO.Packaging.PackagePart" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="package">パーツの親 <see cref="T:System.IO.Packaging.Package" />。</param>
      <param name="partUri">親 <see cref="T:System.IO.Packaging.Package" /> ルートを基準にした、パーツの URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> または <paramref name="partUri" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String)">
      <summary>親 <see cref="P:System.IO.Packaging.PackagePart.Package" />、パーツ URI、および MIME コンテンツ タイプを指定して、<see cref="T:System.IO.Packaging.PackagePart" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="package">パーツの親 <see cref="T:System.IO.Packaging.Package" />。</param>
      <param name="partUri">親 <see cref="T:System.IO.Packaging.Package" /> ルートを基準にした、パーツの URI。</param>
      <param name="contentType">パーツ データ ストリームの MIME コンテンツ タイプ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> または <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> は有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.#ctor(System.IO.Packaging.Package,System.Uri,System.String,System.IO.Packaging.CompressionOption)">
      <summary>親 <see cref="P:System.IO.Packaging.PackagePart.Package" />、パーツ URI、MIME コンテンツ タイプ、および <see cref="T:System.IO.Packaging.CompressionOption" /> を指定して、<see cref="T:System.IO.Packaging.PackagePart" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="package">パーツの親 <see cref="T:System.IO.Packaging.Package" />。</param>
      <param name="partUri">親 <see cref="T:System.IO.Packaging.Package" /> ルートを基準にした、パーツの URI。</param>
      <param name="contentType">パーツのデータ ストリームの MIME コンテンツ タイプ。</param>
      <param name="compressionOption">パーツ データ ストリームの圧縮オプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> または <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> は有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI ではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="compressionOption" /> 値が有効ではありません。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.CompressionOption">
      <summary>パーツ コンテンツ ストリームの圧縮オプションを取得します。</summary>
      <returns>パーツ コンテンツ ストリームの圧縮オプション。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.ContentType">
      <summary>コンテンツ ストリームの MIME タイプを取得します。</summary>
      <returns>パーツのコンテンツ データ ストリームの MIME タイプ。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。

または -
派生クラス <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> メソッドから返される文字列が空です。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)">
      <summary>この <see cref="T:System.IO.Packaging.PackagePart" /> と、指定のターゲット <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソース間のパーツ レベル リレーションシップを作成します。</summary>
      <param name="targetUri">ターゲット パーツの URI。</param>
      <param name="targetMode">列挙値の 1 つ。 たとえば、ターゲット パーツが <see cref="F:System.IO.Packaging.TargetMode.Internal" /> の内部の場合は <see cref="T:System.IO.Packaging.Package" />、ターゲットが <see cref="F:System.IO.Packaging.TargetMode.External" /> 外部のリソースの場合は <see cref="T:System.IO.Packaging.Package" /> です。</param>
      <param name="relationshipType">リレーションシップのロール。</param>
      <returns>この <see cref="T:System.IO.Packaging.PackagePart" /> およびターゲット <see cref="T:System.IO.Packaging.PackagePart" />、外部リソース間のパーツ レベル リレーションシップ。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> パラメーターが、有効な <see cref="T:System.IO.Packaging.TargetMode" /> 列挙値でありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetUri" /> で識別されるパーツはリレーションシップです (リレーションシップのターゲットは別のリレーションシップになることができません)。

または -
<paramref name="targetMode" /> は <see cref="F:System.IO.Packaging.TargetMode.Internal" /> として指定されますが、<paramref name="targetUri" /> は外部の絶対 URI です。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (新しいリレーションシップを追加できません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)">
      <summary>この <see cref="T:System.IO.Packaging.PackagePart" /> と、指定のターゲット <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソース間のパーツ レベル リレーションシップを作成します。</summary>
      <param name="targetUri">ターゲット パーツの URI。</param>
      <param name="targetMode">列挙値の 1 つ。 たとえば、ターゲット パーツが <see cref="F:System.IO.Packaging.TargetMode.Internal" /> の内部の場合は <see cref="T:System.IO.Packaging.Package" />、ターゲットが <see cref="F:System.IO.Packaging.TargetMode.External" /> 外部のリソースの場合は <see cref="T:System.IO.Packaging.Package" /> です。</param>
      <param name="relationshipType">リレーションシップのロール。</param>
      <param name="id">リレーションシップの一意の ID。</param>
      <returns>この <see cref="T:System.IO.Packaging.PackagePart" /> およびターゲット <see cref="T:System.IO.Packaging.PackagePart" />、外部リソース間のパーツ レベル リレーションシップ。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetUri" /> または <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="targetMode" /> パラメーターが、有効な <see cref="T:System.IO.Packaging.TargetMode" /> 列挙値でありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetUri" /> で識別されるパーツはリレーションシップです (リレーションシップのターゲットは別のリレーションシップになることができません)。

または -
<paramref name="targetMode" /> は <see cref="F:System.IO.Packaging.TargetMode.Internal" /> として指定されますが、<paramref name="targetUri" /> は外部の絶対 URI です。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (新しいリレーションシップを追加できません)。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。

または -
指定した <paramref name="id" /> を持つパーツが既に存在します。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.DeleteRelationship(System.String)">
      <summary>指定したパーツ レベル <see cref="T:System.IO.Packaging.PackageRelationship" /> を削除します。</summary>
      <param name="id">削除するリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.IOException">パッケージは読み取り専用です (リレーションシップを削除できません)。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetContentTypeCore">
      <summary>派生クラスでオーバーライドされた場合、パーツ コンテンツの MIME タイプを返します。</summary>
      <returns>パーツ コンテンツの MIME タイプ。</returns>
      <exception cref="T:System.NotSupportedException">該当する派生クラスには、<see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" /> メソッドに必要なオーバーライド実装が用意されていません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationship(System.String)">
      <summary>指定した <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> を持つリレーションシップを返します。</summary>
      <param name="id">返されるリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <returns>指定した <paramref name="id" /> に一致するリレーションシップ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> が空の文字列です。</exception>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。

または -
指定した <paramref name="id" /> を持つリレーションシップがパッケージ内に存在しません。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です (リレーションシップ情報を読み取ることができません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationships">
      <summary>このパーツによって所有されているすべてのリレーションシップのコレクションを返します。</summary>
      <returns>パーツによって所有されているすべてのリレーションシップのコレクション。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です (リレーションシップ情報を読み取ることができません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetRelationshipsByType(System.String)">
      <summary>指定した <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> に一致するリレーションシップのコレクションを返します。</summary>
      <param name="relationshipType">リレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />。検索を行った場合、その結果をコレクションで返します。</param>
      <returns>指定した <paramref name="relationshipType" /> に一致するリレーションシップのコレクション。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipType" /> が空の文字列です。</exception>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です (リレーションシップ情報を読み取ることができません)。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream">
      <summary>パーツのコンテンツ データ ストリームを返します。</summary>
      <returns>パーツのコンテンツ データ ストリーム。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">派生サブクラスの <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> メソッドから返されるストリーム オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode)">
      <summary>指定した I/O <see cref="T:System.IO.FileMode" /> で開かれているコンテンツ ストリームを返します。</summary>
      <param name="mode">コンテンツ ストリームを開くときの I/O モード。</param>
      <returns>パーツのコンテンツ ストリーム。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> パラメーターが、有効な <see cref="T:System.IO.FileMode" /> 列挙値でありません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> パラメーターに、パッケージおよびパーツ ストリームとの互換性がありません。

または -
派生サブクラスの <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> メソッドから返されるストリーム オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>指定した <see cref="T:System.IO.FileMode" /> と <see cref="T:System.IO.FileAccess" /> で開かれているパーツ コンテンツ ストリームを返します。</summary>
      <param name="mode">コンテンツ ストリームを開くときの I/O モード。</param>
      <param name="access">コンテンツ ストリームを開くときに使用するアクセス許可。</param>
      <returns>パーツのコンテンツ ストリーム。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mode" /> パラメーターが、有効な <see cref="T:System.IO.FileMode" /> 列挙値でありません。

または -
<paramref name="access" /> パラメーターが、有効な <see cref="T:System.IO.FileAccess" /> 列挙値でありません。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> または <paramref name="access" /> パラメーターに、パッケージおよびパーツ ストリームとの互換性がありません。

または -
<paramref name="access" /> パラメーターの指定が <see cref="F:System.IO.FileAccess.Read" /> になっていますが、該当する <paramref name="mode" /> パラメーターには書き込みアクセス権が必要です  (<see cref="T:System.IO.FileMode" /> の値が <see cref="F:System.IO.FileMode.Create" />、<see cref="F:System.IO.FileMode.CreateNew" />、<see cref="F:System.IO.FileMode.Truncate" />、または <see cref="F:System.IO.FileMode.Append" /> の場合は、<see cref="F:System.IO.FileAccess.Write" /> または <see cref="F:System.IO.FileAccess.ReadWrite" /> のアクセス権が必要です)。
または -
派生サブクラスの <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" /> メソッドから返されるストリーム オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)">
      <summary>派生クラスでオーバーライドされると、指定の <see cref="T:System.IO.FileMode" /> と <see cref="T:System.IO.FileAccess" /> で開かれているパーツ コンテンツ ストリームを返します。</summary>
      <param name="mode">コンテンツ ストリームを開くときの I/O モード。</param>
      <param name="access">コンテンツ ストリームを開くときに使用するアクセス許可。</param>
      <returns>パーツのコンテンツ データ ストリーム。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Package">
      <summary>パーツの親 <see cref="T:System.IO.Packaging.Package" /> を取得します。</summary>
      <returns>パーツの親パッケージ。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackagePart.RelationshipExists(System.String)">
      <summary>指定した <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> を持つリレーションシップがこのパーツによって所有されているどうかを示す値を返します。</summary>
      <param name="id">確認対象のリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.Id" />。</param>
      <returns>指定した <paramref name="id" /> を持つリレーションシップがこのパーツによって所有されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="id" /> が有効な XML 識別子でありません。</exception>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
      <exception cref="T:System.IO.IOException">パッケージは書き込み専用です (リレーションシップ情報を読み取ることができません)。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackagePart.Uri">
      <summary>パーツの URI を取得します。</summary>
      <returns>パッケージルートに対して相対的な部分の URI。</returns>
      <exception cref="T:System.InvalidOperationException">パーツが削除されました。

または -
<see cref="P:System.IO.Packaging.PackagePart.Package" /> が開いていません (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" /> または <see cref="M:System.IO.Packaging.Package.Close" /> が呼び出されました)。</exception>
    </member>
    <member name="T:System.IO.Packaging.PackagePartCollection">
      <summary>
        <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.GetEnumerator">
      <summary>コレクション内のパーツを反復処理する列挙子を返します。</summary>
      <returns>コレクション内の <see cref="T:System.IO.Packaging.PackagePart" /> 要素を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#Generic#IEnumerable{System#IO#Packaging#PackagePart}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackagePartCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>このメンバーの詳細については、「<see cref="M:System.Collections.IEnumerable.GetEnumerator" />」をご覧ください。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageProperties">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> のコア プロパティを表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.#ctor">
      <summary>
        <see cref="T:System.IO.Packaging.PackageProperties" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Category">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のカテゴリを取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> に格納されているコンテンツのカテゴリ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentStatus">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のステータスを表す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> のコンテンツのステータス。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.ContentType">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> に格納されているコンテンツのタイプを表す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> に格納されているコンテンツのタイプ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Created">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> が作成された日時を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> が最初に作成された日時。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Creator">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> とそのコンテンツを作成した個人またはエンティティを識別する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> とそのコンテンツを作成した個人またはエンティティ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Description">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> に格納されているコンテンツの説明を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> に格納されているコンテンツの説明。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose">
      <summary>
        <see cref="T:System.IO.Packaging.PackageProperties" /> インスタンスで使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageProperties.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.Packaging.PackageProperties" /> インスタンスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Identifier">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> およびそのコンテンツを明確に識別する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> とそのコンテンツを明確に識別する値。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Keywords">
      <summary>派生クラスでオーバーライドされた場合、対象範囲が規定されたキーワードのセットを定義する値を取得または設定します。このキーワードのセットは、<see cref="T:System.IO.Packaging.Package" /> およびそのコンテンツの検索とインデックス設定をサポートします。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> およびそのコンテンツの検索とインデックス設定をサポートする、対象範囲が規定されたキーワードのセット。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Language">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のコンテンツの言語を識別する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> コンテンツの言語を識別する値。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastModifiedBy">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のコンテンツを最後に変更したユーザーを識別する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> を最後に変更したユーザー。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.LastPrinted">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> コンテンツが最後に印刷された日時を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> コンテンツが最後に印刷された日時。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Modified">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> が最後に変更された日時を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> が最後に変更された日時。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Revision">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のリビジョン番号を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> のリビジョン番号。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Subject">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のコンテンツのトピックを取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> のコンテンツのトピック。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Title">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> およびそのコンテンツに設定された名前を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> およびそのコンテンツに設置された名前。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageProperties.Version">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.IO.Packaging.Package" /> のバージョン番号を取得または設定します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.Package" /> のバージョン番号。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationship">
      <summary>ソースの <see cref="T:System.IO.Packaging.Package" /> または <see cref="T:System.IO.Packaging.PackagePart" /> と、ターゲット オブジェクトとなる <see cref="T:System.IO.Packaging.PackagePart" /> または外部リソースとの間の関連付けを表します。</summary>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Id">
      <summary>リレーションシップを識別する文字列を取得します。</summary>
      <returns>リレーションシップを識別する文字列。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.Package">
      <summary>このリレーションシップを含む <see cref="T:System.IO.Packaging.Package" /> を取得します。</summary>
      <returns>このリレーションシップを含むパッケージ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.RelationshipType">
      <summary>リレーションシップの修飾型名を取得します。</summary>
      <returns>リレーションシップの修飾型名。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.SourceUri">
      <summary>リレーションシップを所有するパッケージまたはパーツの URI を取得します。</summary>
      <returns>リレーションシップを所有する <see cref="T:System.IO.Packaging.Package" /> または <see cref="T:System.IO.Packaging.PackagePart" /> の URI。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetMode">
      <summary>リレーションシップのターゲットが <see cref="T:System.IO.Packaging.Package" /> の <see cref="F:System.IO.Packaging.TargetMode.Internal" /> であるか、それとも <see cref="F:System.IO.Packaging.TargetMode.External" /> であるかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" /> が <see cref="T:System.IO.Packaging.Package" /> の <see cref="F:System.IO.Packaging.TargetMode.Internal" /> のリソースと <see cref="F:System.IO.Packaging.TargetMode.External" /> のリソースのどちらを参照するかを示す列挙値。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationship.TargetUri">
      <summary>リレーションシップのターゲット リソースの URI を取得します。</summary>
      <returns>ターゲットリソースの URI。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipCollection">
      <summary>指定した <see cref="T:System.IO.Packaging.PackageRelationship" /> または <see cref="T:System.IO.Packaging.PackagePart" /> によって所有されている <see cref="T:System.IO.Packaging.Package" /> 要素のコレクションを表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator">
      <summary>コレクション内のリレーションシップを反復処理する列挙子を返します。</summary>
      <returns>コレクション内の <see cref="T:System.IO.Packaging.PackageRelationship" /> 要素を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>この型またはメンバーは、Windows Presentation Foundation インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
      <returns>使用しないでください。<see cref="M:System.IO.Packaging.PackageRelationshipCollection.GetEnumerator" /> を使用してください。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelector">
      <summary>パーツ レベルまたはパッケージ レベルのリレーションシップを選択するために、<see cref="T:System.IO.Packaging.PackageRelationship" /> 基準を定義します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sourceUri">リレーションシップを所有している <see cref="T:System.IO.Packaging.PackagePart" /> または <see cref="T:System.IO.Packaging.Package" /> (<c>SourceUri</c>="/") の Uniform Resource Identifier (URI)。</param>
      <param name="selectorType">
        <paramref name="selectionCriteria" /> のタイプ。リレーションシップ <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> またはリレーションシップ <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> のいずれか。</param>
      <param name="selectionCriteria">
        <paramref name="selectorType" /> に基づいてリレーションシップを選択する際に使用する条件文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceUri" /> または <paramref name="selectionCriteria" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="selectorType" /> パラメーターが正しくありません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="selectorType" /> パラメーターは <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> ですが、<paramref name="selectionCriteria" /> が有効な XML スキーマ定義 (XSD) 識別子 (ID) ではありません。</exception>
      <exception cref="T:System.ArgumentException">指定した <paramref name="selectionCriteria" /> の <paramref name="selectorType" /> が有効ではありません。

または -

<paramref name="sourceUri" /> が <see cref="T:System.IO.Packaging.Package" /> ルート ("/") ではなく、有効な <see cref="T:System.IO.Packaging.PackagePart" /> URI でもありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackageRelationshipSelector.Select(System.IO.Packaging.Package)">
      <summary>定義済みの <see cref="T:System.IO.Packaging.PackageRelationship" />、<see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />、および <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> に一致する <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" /> オブジェクトのリストを返します。</summary>
      <param name="package">選択基準を基にリレーションシップが選択されるパッケージ。</param>
      <returns>
        <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> コンストラクターに対して指定された選択パラメーターに一致するリレーションシップのリスト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="package" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria">
      <summary>
        <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> コンストラクターに対して指定された選択基準を取得します。</summary>
      <returns>
        <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" /> コンストラクターに対して指定された <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> または <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> の <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> に基づく選択基準。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" /> コンストラクターに対して指定された <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> を取得します。</summary>
      <returns>
        <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" /> コンストラクターに対して指定された <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" /> または <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> のセレクター タイプ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri">
      <summary>リレーションシップの所有者として <see cref="P:System.IO.Packaging.PackagePart.Uri" /> コンストラクターに対して指定された、ルート パッケージ URI ("/") またはパーツ <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" /> を取得します。</summary>
      <returns>リレーションシップの所有者として <see cref="P:System.IO.Packaging.PackagePart.Uri" /> コンストラクターに対して指定された、ルート パッケージ URI ("/") またはパーツ <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageRelationshipSelectorType">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> を通して <see cref="T:System.IO.Packaging.PackageRelationshipSelector" /> の選択内容を照合し、結果を返すために使用する選択基準の種類を指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Id">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> の選択は <see cref="P:System.IO.Packaging.PackageRelationship.Id" /> 別に行われます。</summary>
    </member>
    <member name="F:System.IO.Packaging.PackageRelationshipSelectorType.Type">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> の選択は <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" /> 別に行われます。</summary>
    </member>
    <member name="T:System.IO.Packaging.PackUriHelper">
      <summary>パック URI オブジェクトを作成および解析するユーティリティ メソッドを提供します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePackUri(System.Uri,System.Uri)">
      <summary>2 つのパック URI が同等であるかどうかを示す値を返します。</summary>
      <param name="firstPackUri">最初のパック URI。</param>
      <param name="secondPackUri">2 番目のパック URI。</param>
      <returns>
        <paramref name="firstPackUri" /> と <paramref name="secondPackUri" /> との間のリレーションシップを示す符号付き整数。
 [値] 
 説明 
 0 より小さい。 
<paramref name="firstPackUri" /> は <paramref name="secondPackUri" /> より小さい値です。  
  
 0 
<paramref name="firstPackUri" /> は <paramref name="secondPackUri" /> と同じです。  
  
 0 より大きい。 
<paramref name="firstPackUri" /> が <paramref name="secondPackUri" /> より大きくなっています。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPackUri" /> または <paramref name="secondPackUri" /> が絶対 URI ではありません。

または -
<paramref name="firstPackUri" /> または <paramref name="secondPackUri" /> が "pack://" スキームで始まっていません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ComparePartUri(System.Uri,System.Uri)">
      <summary>2 つのパッケージ パーツの URI が同等であるかどうかを示す値を返します。</summary>
      <param name="firstPartUri">最初の <see cref="T:System.IO.Packaging.PackagePart" /> の URI。</param>
      <param name="secondPartUri">2 番目の <see cref="T:System.IO.Packaging.PackagePart" /> の URI。</param>
      <returns>
        <paramref name="firstPartUri" /> と <paramref name="secondPartUri" /> の間のリレーションシップを示す値。
 [値] 
 説明 
 0 より小さい。 
<paramref name="firstPartUri" /> は <paramref name="secondPartUri" /> より小さい値です。  
  
 0 
<paramref name="firstPartUri" /> は <paramref name="secondPartUri" /> と同じです。  
  
 0 より大きい。 
<paramref name="firstPartUri" /> が <paramref name="secondPartUri" /> より大きくなっています。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="firstPartUri" /> または <paramref name="secondPartUri" /> は有効なパーツ URI 構文ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri)">
      <summary>パッケージを指す新しいパック URI を作成します。</summary>
      <param name="packageUri">参照先の <see cref="T:System.IO.Packaging.Package" /> の URI。</param>
      <returns>指定された <paramref name="packageUri" /> によって参照されている <see cref="T:System.IO.Packaging.Package" /> のパック URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> は絶対 URI ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri)">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> URI およびパッケージ内にあるパーツの URI が指定されている場合に、パック URI を作成します。</summary>
      <param name="packageUri">
        <see cref="T:System.IO.Packaging.Package" /> の URI。</param>
      <param name="partUri">パッケージ内の <see cref="T:System.IO.Packaging.PackagePart" /> の URI。</param>
      <returns>指定された <see cref="T:System.IO.Packaging.PackagePart" /> のパック URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> は絶対パスではありません。

または -
<paramref name="partUri" /> は有効なパーツ URI 構文ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.Create(System.Uri,System.Uri,System.String)">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> URI、パッケージ内にあるパーツの URI、および追加する "#" フラグメントが指定されている場合に、パック URI を作成します。</summary>
      <param name="packageUri">
        <see cref="T:System.IO.Packaging.Package" /> の URI。</param>
      <param name="partUri">パッケージ内の <see cref="T:System.IO.Packaging.PackagePart" /> の URI。</param>
      <param name="fragment">パッケージ パーツ内の要素を識別する「#」参照。</param>
      <returns>指定したパッケージ、パッケージ パーツ、およびフラグメントを識別するパック URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packageUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packageUri" /> は絶対パスではありません。

または -
<paramref name="partUri" /> は有効なパーツ URI 構文ではありません。

または -
<paramref name="fragment" /> は空であるか、または「#」で始まっています。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.CreatePartUri(System.Uri)">
      <summary>書式設定された <see cref="T:System.IO.Packaging.PackagePart" /> URI を作成します。</summary>
      <param name="partUri">パッケージ内の <see cref="T:System.IO.Packaging.PackagePart" /> の URI。</param>
      <returns>書式設定された <see cref="T:System.IO.Packaging.PackagePart" /> URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> は絶対 <see cref="T:System.Uri" /> ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetNormalizedPartUri(System.Uri)">
      <summary>指定した <see cref="T:System.IO.Packaging.PackagePart" /> URI の正規化形式を返します。</summary>
      <param name="partUri">正規化する <see cref="T:System.IO.Packaging.PackagePart" /> URI。</param>
      <returns>指定した <paramref name="partUri" /> の正規化形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> には有効な <see cref="T:System.Uri" /> 構文がありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPackageUri(System.Uri)">
      <summary>指定したパッケージの URI のパッケージ全体を指す内部 URI を返します。</summary>
      <param name="packUri">
        <see cref="T:System.IO.Packaging.Package" /> のURI を返すパック URI。</param>
      <returns>指定した <paramref name="packUri" /> の <see cref="T:System.IO.Packaging.Package" /> の URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packUri" /> は絶対 <see cref="T:System.Uri" /> ではありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetPartUri(System.Uri)">
      <summary>指定されたパック URI 内の <see cref="T:System.IO.Packaging.PackagePart" /> の URI を返します。</summary>
      <param name="packUri">
        <see cref="T:System.IO.Packaging.PackagePart" /> URI を返す元のパック URI。</param>
      <returns>指定された <paramref name="packUri" /> の <see cref="T:System.IO.Packaging.PackagePart" /> の URI、または <paramref name="packUri" /> が <see cref="T:System.IO.Packaging.PackagePart" /> の代わりのパッケージをポイントする場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="packUri" /> が <see langword="null" /> の場合。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="packUri" /> が絶対 <see cref="T:System.Uri" /> ではない場合。

または -

<paramref name="packUri" /> に "pack://" スキームがありません。

または -
<paramref name="packUri" /> から抽出された partUri が、有効な partUri 構文に準拠していません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelationshipPartUri(System.Uri)">
      <summary>指定した <see cref="T:System.IO.Packaging.PackagePart" /> に関連付けられているリレーションシップ パーツの URI を返します。</summary>
      <param name="partUri">関連する <see cref="P:System.IO.Packaging.PackagePart.Uri" /> の URI を返す <see cref="T:System.IO.Packaging.PackagePart" /> の <see cref="T:System.IO.Packaging.PackageRelationship" />。</param>
      <returns>
        <paramref name="partUri" /> によって識別される <see cref="T:System.IO.Packaging.PackageRelationship" /> に関連付けられている <see cref="T:System.IO.Packaging.PackagePart" /> パーツの URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> 構文がパッケージ パーツ URI に対して有効ではありません。

または -
<paramref name="partUri" /> が絶対 URI です。

または -
<paramref name="partUri" /> がリレーションシップ パーツを参照しています。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetRelativeUri(System.Uri,System.Uri)">
      <summary>指定した 2 つの <see cref="T:System.IO.Packaging.PackagePart" /> URI の間における相対 URI を返します。</summary>
      <param name="sourcePartUri">ソース パーツの URI。</param>
      <param name="targetPartUri">ターゲット パーツの URI。</param>
      <returns>
        <paramref name="sourcePartUri" /> から <paramref name="targetPartUri" /> への相対 URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> または <paramref name="targetPartUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> または <paramref name="targetPartUri" /> には有効な <see cref="T:System.Uri" /> 構文がありません。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.GetSourcePartUriFromRelationshipPartUri(System.Uri)">
      <summary>指定した URI を持つ <see cref="T:System.IO.Packaging.PackageRelationship" /> から <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> を返します。</summary>
      <param name="relationshipPartUri">
        <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> を返すリレーションシップ パーツの URI。</param>
      <returns>指定した <paramref name="relationshipPartUri" /> を持つリレーションシップの <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> の <see cref="T:System.IO.Packaging.PackagePart" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipPartUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="relationshipPartUri" /> が絶対 URI です。

または -
<paramref name="relationshipPartUri" /> 構文が <see cref="T:System.IO.Packaging.PackagePart" /> に対して有効ではありません。

または -
<paramref name="relationshipPartUri" /> がリレーションシップ パーツを参照していません。

または -
リレーションシップ パーツの <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" /> が別のリレーションシップ パーツを参照しています (無効)。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.IsRelationshipPartUri(System.Uri)">
      <summary>指定した URI が <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツの URI であるかどうかを示す値を返します。</summary>
      <param name="partUri">
        <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツをチェックする URI。</param>
      <returns>
        <paramref name="partUri" /> が <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツを識別する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="partUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="partUri" /> が絶対 URI です。

または -
<paramref name="partUri" /> が無効な <see cref="T:System.IO.Packaging.PackagePart" /> 構文です。</exception>
    </member>
    <member name="M:System.IO.Packaging.PackUriHelper.ResolvePartUri(System.Uri,System.Uri)">
      <summary>ソース パーツ URI と、ターゲット パーツへの相対パスを含む URI が指定されている場合に、パーツ URI を返します。</summary>
      <param name="sourcePartUri">ソース パーツの URI、または <see cref="T:System.IO.Packaging.Package" /> ルートを指定する "/"。</param>
      <param name="targetUri">ターゲット パーツへの相対 URI。</param>
      <returns>指定した <paramref name="SourcePartUri" /> パラメーターと <paramref name="targetUri" /> パラメーターの間で解決されたターゲット パーツの URI。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourcePartUri" /> または <paramref name="targetUri" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourcePartUri" /> が有効なパーツ URI ではありません。

または -
<paramref name="targetUri" /> が有効な相対 URI ではありません。</exception>
    </member>
    <member name="F:System.IO.Packaging.PackUriHelper.UriSchemePack">
      <summary>パック URI スキーム名 "pack" を定義します。</summary>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> に保存されたデジタル著作権管理 (DRM) 情報を表します。</summary>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>パッケージが持つ暗号化された権限管理データ ストリームにアクセスするための <see cref="T:System.Security.RightsManagement.CryptoProvider" /> を取得または設定します。</summary>
      <returns>権限管理情報にアクセスするための <see cref="T:System.Security.RightsManagement.CryptoProvider" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>暗号化された権限管理データ ストリームから、指定したユーザーの <see cref="T:System.Security.RightsManagement.UseLicense" /> を削除します。</summary>
      <param name="userKey">削除される <see cref="T:System.Security.RightsManagement.UseLicense" /> のユーザー。</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>暗号化された権限管理データ ストリームから、ユーザーおよび <see cref="T:System.Security.RightsManagement.UseLicense" /> キーと値のペアのディクショナリ コレクションを返します。</summary>
      <returns>権限管理のために保護されたパッケージに含まれているユーザーおよび <see cref="T:System.Security.RightsManagement.UseLicense" /> キーと値のペアのコレクション。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>暗号化された権限管理データ ストリームから、埋め込まれた <see cref="T:System.Security.RightsManagement.PublishLicense" /> を返します。</summary>
      <returns>埋め込まれた <see cref="T:System.Security.RightsManagement.PublishLicense" />。パッケージに <see cref="T:System.Security.RightsManagement.PublishLicense" /> が含まれない場合は <see langword="null" />。</returns>
      <exception cref="T:System.IO.FileFormatException">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>暗号化された権限管理データ ストリームから、指定したユーザーが持つ埋め込みの <see cref="T:System.Security.RightsManagement.UseLicense" /> を返します。</summary>
      <param name="userKey">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> を返すユーザーまたはユーザー グループ。</param>
      <returns>指定したユーザーの <see cref="T:System.Security.RightsManagement.UseLicense" />。パッケージに、指定した <paramref name="userKey" /> と一致する <see cref="T:System.Security.RightsManagement.UseLicense" /> が含まれない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userKey" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileFormatException">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>指定された <see cref="T:System.Security.RightsManagement.PublishLicense" /> を暗号化された権限管理データ ストリームに保存します。</summary>
      <param name="publishLicense">パッケージに格納および埋め込む公開ライセンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publishLicense" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileFormatException">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>暗号化された権限管理データ ストリームに、指定したユーザーの <see cref="T:System.Security.RightsManagement.UseLicense" /> を保存します。</summary>
      <param name="userKey">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> のユーザー。</param>
      <param name="useLicense">パッケージに格納および埋め込むユーザー ライセンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userKey" /> パラメーターまたは <paramref name="useLicense" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileFormatException">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>
        <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" /> に提供するイベント引数を指定します。</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>検証されるデジタル署名を取得します。</summary>
      <returns>検証されるデジタル署名。</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>署名検証エラーを取得します。</summary>
      <returns>署名検証エラー。</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> 内のデータ ストアを操作するためのアクセスおよび情報を提供します。</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>指定した名前の新しいストリームを作成します。</summary>
      <param name="name">新しいストリームの名前。</param>
      <returns>指定した <paramref name="name" /> の新しいストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>指定した名前を持ち、<see cref="T:System.IO.Packaging.CompressionOption" />、および <see cref="T:System.IO.Packaging.EncryptionOption" /> を含んだ新しいストリームを作成します。</summary>
      <param name="name">新しいストリームの名前。</param>
      <param name="compressionOption">データ ストリームの圧縮オプション。</param>
      <param name="encryptionOption">データ ストリームの暗号化オプション。</param>
      <returns>指定した <paramref name="name" />、<paramref name="compressionOption" />、および <paramref name="encryptionOption" /> を備えた新しいストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>この <see cref="T:System.IO.Packaging.StorageInfo" /> を親として新しい子 <see cref="T:System.IO.Packaging.StorageInfo" /> を作成します。</summary>
      <param name="name">新しい子のデータ ストアの名前。</param>
      <returns>新しい子のデータ ストア。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>指定した名前のストリームを削除します。</summary>
      <param name="name">削除するストリームの <see cref="T:System.IO.Packaging.StreamInfo" /> の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>指定したサブ ストアを削除します。</summary>
      <param name="name">削除するサブ ストアの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>指定した名前の <see cref="T:System.IO.Packaging.StreamInfo" /> インスタンスを返します。</summary>
      <param name="name">返される <see cref="T:System.IO.Packaging.StreamInfo" /> インスタンスの名前。</param>
      <returns>指定した <paramref name="name" /> のストリーム。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>このストアに現在格納されている <see cref="T:System.IO.Packaging.StreamInfo" /> インスタンスの配列を返します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.StreamInfo" /> オブジェクトの配列。各オブジェクトはこのストア内で定義されている I/O ストリームをポイントします。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>所定の名前を持つ子サブストアを返します。</summary>
      <param name="name">返すサブストアの名前。</param>
      <returns>指定した <paramref name="name" /> を持つ子サブストア。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>このストアに現在格納されている子サブストアの配列を返します。</summary>
      <returns>
        <see cref="T:System.IO.Packaging.StorageInfo" /> オブジェクトの配列。各オブジェクトはこのストア内で定義されているサブストアをポイントします。</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>ストアの名前を取得します。</summary>
      <returns>このストアの名前。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>指定したストリームが存在しているかどうかを示す値を返します。</summary>
      <param name="name">確認対象の <see cref="T:System.IO.Packaging.StreamInfo" /> の名前。</param>
      <returns>指定した <paramref name="name" /> のストリームが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>特定の子サブストアが存在するかどうかを示す値を返します。</summary>
      <param name="name">確認対象の子 <see cref="T:System.IO.Packaging.StorageInfo" /> の名前。</param>
      <returns>指定した <paramref name="name" /> の子サブストアが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> 内の I/O ストリームを操作するためのアクセスおよび情報を提供します。</summary>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>ストリームの <see cref="T:System.IO.Packaging.CompressionOption" /> 設定を取得します。</summary>
      <returns>パッケージ ストリームの圧縮オプション設定。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>ストリームの <see cref="T:System.IO.Packaging.EncryptionOption" /> 設定を取得します。</summary>
      <returns>パッケージ ストリームの暗号化オプション設定。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>既定の <see cref="T:System.IO.FileMode" /> および <see cref="T:System.IO.FileAccess" /> で開かれているストリームを返します。</summary>
      <returns>既定の <see cref="T:System.IO.Packaging.Package" /> ルートの <see cref="T:System.IO.FileMode" /> および <see cref="T:System.IO.FileAccess" /> で開かれる I/O ストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>指定した <see cref="T:System.IO.FileMode" /> で開かれている I/O ストリームを返します。</summary>
      <param name="mode">ストリームを開くファイル モード。</param>
      <returns>指定したファイル <paramref name="mode" /> で開かれているストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>指定した <see cref="T:System.IO.FileMode" /> と指定した <see cref="T:System.IO.FileAccess" /> で開かれている I/O ストリームを返します。</summary>
      <param name="mode">ストリームを開くファイル モード。</param>
      <param name="access">ストリームを読み取るとき、またはストリームに書き込むときのファイル アクセス モード。</param>
      <returns>指定した <see cref="T:System.IO.FileMode" /> と指定した <see cref="T:System.IO.FileAccess" /> で開かれている I/O ストリーム。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>ストリームの名前を取得します。</summary>
      <returns>このストリームの名前。</returns>
    </member>
    <member name="T:System.IO.Packaging.TargetMode">
      <summary>
        <see cref="T:System.IO.Packaging.PackageRelationship" /> のターゲットが <see cref="T:System.IO.Packaging.Package" /> の内外どちらにあるかを指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.External">
      <summary>リレーションシップは、パッケージ外部のリソースを参照します。</summary>
    </member>
    <member name="F:System.IO.Packaging.TargetMode.Internal">
      <summary>リレーションシップは、パッケージ内部のパーツを参照します。</summary>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>証明書または署名の検証結果を指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>X.509 証明書が署名の検証に使用できません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>X.509 証明書が有効ではありません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>署名が無効です。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>指定したパッケージまたはパーツに署名がありません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>署名への参照リレーションシップが見つかりません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>検証が成功しました。</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackage">
      <summary>抽象 <see cref="T:System.IO.Packaging.Package" /> 基底クラスの派生サブクラスを実装します。<see cref="T:System.IO.Packaging.ZipPackage" /> クラスでは、コンテナー ストアとして ZIP アーカイブが使用されます。 このクラスは継承できません。</summary>
    </member>
    <member name="T:System.IO.Packaging.ZipPackagePart">
      <summary>
        <see cref="T:System.IO.Packaging.ZipPackage" /> に格納されているパーツを表します。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermission">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermission" /> は、部分的に信頼された Windows Presentation Foundation (WPF) アプリケーションで動作する、オーディオ、画像、およびビデオ メディアの機能を制御するセキュリティのアクセス許可のセットについて説明します。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermission" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio)">
      <summary>オーディオのアクセス許可レベルを指定して、<see cref="T:System.Security.Permissions.MediaPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="permissionAudio">
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> の列挙値。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionAudio,System.Security.Permissions.MediaPermissionVideo,System.Security.Permissions.MediaPermissionImage)">
      <summary>オーディオ、ビデオ、イメージのアクセス許可レベルを指定することによって、<see cref="T:System.Security.Permissions.MediaPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="permissionAudio">
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> の列挙値。</param>
      <param name="permissionVideo">
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> の列挙値。</param>
      <param name="permissionImage">
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> の列挙値。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionImage)">
      <summary>画像のアクセス許可レベルを指定することによって、<see cref="T:System.Security.Permissions.MediaPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="permissionImage">
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> の列挙値。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.MediaPermissionVideo)">
      <summary>ビデオのアクセス許可レベルを指定して、<see cref="T:System.Security.Permissions.MediaPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="permissionVideo">
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> の列挙値。</param>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>指定したアクセス許可状態を使用して、<see cref="T:System.Security.Permissions.MediaPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> の列挙値。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Audio">
      <summary>オーディオのアクセス許可レベルの現在の値を取得します。</summary>
      <returns>オーディオのアクセス許可レベル。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Copy">
      <summary>現在のアクセス許可の同一のコピーを作成して返します。</summary>
      <returns>現在のアクセス許可のコピー。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.FromXml(System.Security.SecurityElement)">
      <summary>XML エンコードから指定された状態で、アクセス許可を再構築します。</summary>
      <param name="securityElement">アクセス許可の再構築に使用する XML エンコード。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Image">
      <summary>オーディオのアクセス許可レベルの現在の値を取得します。</summary>
      <returns>イメージ許可レベル。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Intersect(System.Security.IPermission)">
      <summary>現在のアクセス許可と指定したアクセス許可の積集合となるアクセス許可を作成して返します。</summary>
      <param name="target">現在のアクセス許可との共通部分のあるアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>2 つのアクセス許可の積集合となるアクセス許可には、両方に共通する状態が記述されています。 両方の元のアクセス許可に適合する要求のみが、アクセス許可の積集合に対して有効になります。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</summary>
      <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可が、指定したアクセス許可のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.IsUnrestricted">
      <summary>現在のアクセス許可が無制限かどうかを示す値を返します。</summary>
      <returns>オーディオ、画像、および動画のアクセス許可がすべて無制限である場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.ToXml">
      <summary>アクセス許可とその現在の状態の XML エンコードを作成します。</summary>
      <returns>状態情報を含む、アクセス許可の XML エンコード。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermission.Union(System.Security.IPermission)">
      <summary>現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</summary>
      <param name="target">現在のアクセス許可と結合するアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermission.Video">
      <summary>ビデオのアクセス許可レベルの現在の値を取得します。</summary>
      <returns>メディアのアクセス許可レベル。</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAttribute">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermission" /> のセキュリティ アクションを、宣言セキュリティを使用してコードに適用できるようにします。</summary>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> の値の 1 つ。</param>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Audio">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> のオーディオのアクセス許可レベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionAudio" /> の状態。</returns>
    </member>
    <member name="M:System.Security.Permissions.MediaPermissionAttribute.CreatePermission">
      <summary>新しい <see cref="T:System.Security.Permissions.MediaPermission" /> を作成して返します。</summary>
      <returns>この属性に対応する <see cref="T:System.Security.Permissions.MediaPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Image">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> のイメージのアクセス許可レベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionImage" /> の状態。</returns>
    </member>
    <member name="P:System.Security.Permissions.MediaPermissionAttribute.Video">
      <summary>
        <see cref="T:System.Security.Permissions.MediaPermissionAttribute" /> のビデオのアクセス許可レベルを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.MediaPermissionVideo" /> の状態。</returns>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionAudio">
      <summary>オーディオのアクセス許可レベルを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.AllAudio">
      <summary>無制限にオーディオを再生できるアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.NoAudio">
      <summary>すべてのオーディオ再生を拒否するアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SafeAudio">
      <summary>制限された安全なオーディオ再生を実行できるアクセス許可。イメージ ファイルへのストリーム アクセスの拒否が含まれます。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionAudio.SiteOfOriginAudio">
      <summary>アプリケーションの元のサイトにあるファイルのオーディオ再生のみを実行できるアクセス許可。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionImage">
      <summary>イメージのアクセス許可レベルを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.AllImage">
      <summary>無制限にイメージを表示できるアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.NoImage">
      <summary>すべてのイメージが表示されることを拒否するアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SafeImage">
      <summary>制限された安全なイメージ表示を実行できるアクセス許可。イメージ ファイルへのストリーム アクセスの拒否が含まれます。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionImage.SiteOfOriginImage">
      <summary>アプリケーションの元のサイトにあるイメージの表示のみを実行できるアクセス許可。</summary>
    </member>
    <member name="T:System.Security.Permissions.MediaPermissionVideo">
      <summary>ビデオのアクセス許可レベルを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.AllVideo">
      <summary>無制限にビデオを再生できるアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.NoVideo">
      <summary>すべてのビデオ再生を拒否するアクセス許可。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SafeVideo">
      <summary>制限された安全なビデオ再生を実行できるアクセス許可。イメージ ファイルへのストリーム アクセスの拒否が含まれます。</summary>
    </member>
    <member name="F:System.Security.Permissions.MediaPermissionVideo.SiteOfOriginVideo">
      <summary>アプリケーションの元のサイトにあるファイルのビデオ再生のみを実行できるアクセス許可。</summary>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermission">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermission" /> オブジェクトは、WebBrowser コントロールを作成する機能を制御します。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermission" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>指定したアクセス許可状態を使用して、<see cref="T:System.Security.Permissions.WebBrowserPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> の列挙値。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.#ctor(System.Security.Permissions.WebBrowserPermissionLevel)">
      <summary>Web ブラウザーのアクセス許可レベルを指定して、<see cref="T:System.Security.Permissions.WebBrowserPermission" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="webBrowserPermissionLevel">
        <see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" /> の列挙値。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Copy">
      <summary>現在のアクセス許可の同一のコピーを作成して返します。</summary>
      <returns>現在のアクセス許可のコピー。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.FromXml(System.Security.SecurityElement)">
      <summary>XML エンコードから指定された状態で、アクセス許可を再構築します。</summary>
      <param name="securityElement">アクセス許可の再構築に使用する XML エンコード。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Intersect(System.Security.IPermission)">
      <summary>現在のアクセス許可と指定したアクセス許可の積集合となるアクセス許可を作成して返します。</summary>
      <param name="target">現在のアクセス許可との共通部分のあるアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>2 つのアクセス許可の積集合となるアクセス許可には、両方に共通する状態が記述されています。 両方の元のアクセス許可に適合する要求のみが、アクセス許可の積集合に対して有効になります。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</summary>
      <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可が、指定したアクセス許可のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.IsUnrestricted">
      <summary>現在のアクセス許可が無制限かどうかを示す値を返します。</summary>
      <returns>
        <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" /> プロパティが <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" /> に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermission.Level">
      <summary>Web ブラウザーのアクセス許可レベルの現在の値を取得または設定します。</summary>
      <returns>Web ブラウザーのアクセス許可レベルの現在の値。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.ToXml">
      <summary>アクセス許可とその現在の状態の XML エンコードを作成します。</summary>
      <returns>状態情報を含む、アクセス許可の XML エンコード。</returns>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermission.Union(System.Security.IPermission)">
      <summary>現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</summary>
      <param name="target">現在のアクセス許可と結合するアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
      <returns>現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionAttribute">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermission" /> のセキュリティ アクションを、宣言セキュリティを使用してコードに適用できるようにします。</summary>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>指定した <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> を使用して、<see cref="T:System.Security.Permissions.SecurityAction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> の値の 1 つ。</param>
    </member>
    <member name="M:System.Security.Permissions.WebBrowserPermissionAttribute.CreatePermission">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermission" /> クラスの新しいインスタンスを作成して返します。</summary>
      <returns>セキュリティ宣言に対応する <see cref="T:System.Security.Permissions.WebBrowserPermission" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.WebBrowserPermissionAttribute.Level">
      <summary>
        <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" /> の現在の Web ブラウザーのアクセス許可レベルを取得または設定します。</summary>
      <returns>現在の Web ブラウザーのアクセス許可レベルの状態。</returns>
    </member>
    <member name="T:System.Security.Permissions.WebBrowserPermissionLevel">
      <summary>Web ブラウザーのアクセス許可レベルを指定します。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.None">
      <summary>フレームを HTML に移動できない Web ブラウザー。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Safe">
      <summary>フレームを HTML に安全に移動できるがいくつかの制限がある Web ブラウザー。</summary>
    </member>
    <member name="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted">
      <summary>制限なく移動できる Web ブラウザー。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>権限管理認証の方法を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>要求するすべてのユーザーに対する暗黙の認証。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>Windows Live ID 認証。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>企業ドメイン環境での Windows 認証。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Windows 認証または Windows Live ID 認証。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>権限管理ドキュメントの情報にアクセスするために、ユーザーに付与された権限を表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.ContentGrant" /> に指定した <see cref="T:System.Security.RightsManagement.ContentUser" /> を付与する <see cref="T:System.Security.RightsManagement.ContentRight" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="user">アクセス権が付与されているユーザー。</param>
      <param name="right">付与されているアクセス権。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>特定の <see cref="T:System.Security.RightsManagement.ContentGrant" /> の期間について、指定した <see cref="T:System.Security.RightsManagement.ContentUser" /> に指定した <see cref="T:System.Security.RightsManagement.ContentRight" /> を付与する <see cref="T:System.DateTime" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="user">アクセス権が付与されているユーザー。</param>
      <param name="right">付与されているアクセス権。</param>
      <param name="validFrom">権限を開始する開始日時。</param>
      <param name="validUntil">権限の期限が切れる終了日時。</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>付与されている <see cref="T:System.Security.RightsManagement.ContentRight" /> を取得します。</summary>
      <returns>
        <see cref="P:System.Security.RightsManagement.ContentGrant.User" /> コンストラクターに対して指定された、<see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> に付与されているアクセス権。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>アクセス <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> が付与されているユーザーを取得します。</summary>
      <returns>
        <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> コンストラクターに対して指定された、アクセス <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> が付与されているユーザー。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>付与された <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> を開始する開始日時を取得します。</summary>
      <returns>付与<see cref="P:System.Security.RightsManagement.ContentGrant.Right" />されたが開始する開始日付と時刻<see cref="T:System.DateTime" />、または。<see cref="F:System.DateTime.MinValue" /> 開始の制限がない場合は、</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>付与された <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> の期限が切れる終了日時を取得します。</summary>
      <returns>付与<see cref="P:System.Security.RightsManagement.ContentGrant.Right" />されたの有効期限が切れる終了日時<see cref="T:System.DateTime" />、または。<see cref="F:System.DateTime.MaxValue" /> 終了の制限がない場合は。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>権限管理ドキュメント内のコンテンツにアクセスするユーザーに付与可能な権限を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>ユーザーは、保護されたコンテンツを含むドキュメントを編集できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>ユーザーは、保護されたコンテンツを編集して暗号化できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>ユーザーは、保護されたコンテンツをエクスポートできます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>ユーザーは、保護されたコンテンツを抽出 (コピーして貼り付け) できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>ユーザーは、保護されたコンテンツを別のユーザーに転送できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>ユーザーは、保護されたコンテンツへのプログラムによるアクセスを制御できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>ユーザーは、コンテンツの所有者です。  所有者は、保護されたコンテンツを編集および暗号化し、署名された <see cref="T:System.Security.RightsManagement.PublishLicense" /> を復号化することができます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>ユーザーは、保護されたコンテンツを印刷できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>ユーザーは、保護されたコンテンツの送信者に返信できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>ユーザーは、保護されたコンテンツの受信者に "全員に返信" できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>ユーザーは、保護されたコンテンツをデジタル署名できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>ユーザーは、保護されたコンテンツを表示できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>ユーザーは、署名された <see cref="T:System.Security.RightsManagement.PublishLicense" /> に指定された権限を復号化および表示できます。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>権限が管理されたコンテンツへのアクセス権を付与するユーザーまたはユーザー グループを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>
        <see cref="T:System.Security.RightsManagement.ContentUser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ユーザーまたはグループの名前。</param>
      <param name="authenticationType">認証メソッド。</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>"任意のユーザー" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンスを取得します。</summary>
      <returns>"任意のユーザー" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンス。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> コンストラクターに対して指定された <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> コンストラクターに対して指定された <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>この <see cref="T:System.Security.RightsManagement.ContentUser" /> が、指定した別のインスタンスと等しいかどうかを示す値を返します。</summary>
      <param name="obj">等しいかどうかを比較するユーザー インスタンス。</param>
      <returns>
        <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> および <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> がこのユーザーと指定したユーザーの両方で同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>ユーザーの <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> と <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> に基づいて計算されたハッシュ コードを返します。</summary>
      <returns>ユーザーの <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> と <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> から計算されたハッシュ コード。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>ユーザーが現在認証されているかどうかを示す値を返します。</summary>
      <returns>ユーザーが現在認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は、認証されるまで <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>
        <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> コンストラクターに対して指定されたユーザーまたはグループの名前を取得します。</summary>
      <returns>
        <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> コンストラクターに対して指定されたユーザーまたはグループの名前。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>"所有者" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンスを取得します。</summary>
      <returns>"所有者" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンス。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>保護されたコンテンツを暗号化および復号化するデジタル著作権管理サービスを提供します。</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>暗号ブロック サイズ (バイト単位) を取得します。</summary>
      <returns>暗号ブロック サイズ (バイト単位)。  Advanced Encryption Standard (AES) の既定のブロックサイズは8です。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>検証に合格し、ユーザーに付与される権限の一覧を示すコレクションを取得します。</summary>
      <returns>検証に合格し、ユーザーに付与される権限を列挙するコレクション。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>ユーザーが復号化の権限を持っているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />によっ<see cref="T:System.Security.RightsManagement.UseLicense" />てユーザーに復号化の権限が付与<see langword="false" />されている場合は。それ以外の場合は。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>ユーザーが暗号化の権限を持っているかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />が<see cref="T:System.Security.RightsManagement.UseLicense" />ユーザーに暗号化の権限を付与する場合は<see langword="false" />。それ以外の場合は。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>
        <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> および <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> が異なる長さのブロック サイズのバッファーを受け入れることができるかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />に<see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />渡されたバッファーが、に<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />渡されたバッファーと異なる長さになる可能性がある場合は。 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />それ<see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />以外の場合は、 <see langword="false" />に渡されたバッファーが完全に同じ長さである必要があります。  AES の場合、既定<see langword="true" />値はです。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>暗号テキストをクリア テキストに復号化します。</summary>
      <param name="cryptoText">復号化する暗号テキスト。</param>
      <returns>
        <paramref name="cryptoText" /> の復号化されたクリア テキスト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" /> が null です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">復号化の権限が付与されていません。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>
        <see cref="T:System.Security.RightsManagement.CryptoProvider" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.RightsManagement.CryptoProvider" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>クリア テキストを暗号化テキストに暗号化します。</summary>
      <param name="clearText">暗号化するクリア テキスト コンテンツ。</param>
      <returns>指定された <paramref name="clearText" /> の暗号化済みの暗号化テキスト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" /> が null です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">暗号化は許可されていません。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>インスタンスがガベージ コレクションによって回収される前にリソースを解放し、内部クリーンアップを実行します。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>"名前" および "説明" 文字列の変更できない (読み取り専用の) ペアを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">ロケールの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> プロパティの値。</param>
      <param name="description">ロケールの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティの値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターまたは <paramref name="description" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>ロケールの説明を取得します。</summary>
      <returns>ロケールの説明。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>特定のオブジェクトの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティが、この <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> の該当するプロパティと一致するかどうかを示します。</summary>
      <param name="obj">
        <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> プロパティと <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティを比較するオブジェクト。</param>
      <returns>特定のオブジェクトの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティが、このインスタンスの該当するプロパティと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>
        <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティに基づいて計算されたハッシュ コードを取得します。</summary>
      <returns>この <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> の <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティに基づいて計算されたハッシュ コード。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>ロケール名を取得します。</summary>
      <returns>ロケール名。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>署名付き権限で管理される発行ライセンスを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>署名付きのシリアル化された <see cref="T:System.Security.RightsManagement.PublishLicense" /> が指定されている場合、これを基にして、<see cref="T:System.Security.RightsManagement.PublishLicense" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="signedPublishLicense">署名付きのシリアル化された公開ライセンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">ライセンスが無効です。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.UseLicense" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> の取得を試みます。</summary>
      <param name="secureEnvironment">ライセンスのアクティブ化とバインディングにとって安全な環境。</param>
      <returns>指定した <paramref name="secureEnvironment" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">認証に失敗しました。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.UseLicense" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> の取得を試みます。</summary>
      <param name="secureEnvironment">ライセンスのアクティブ化とバインディングにとって安全な環境。</param>
      <returns>指定した <paramref name="secureEnvironment" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">認証に失敗しました。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>発行者が作成したコンテンツ識別子を取得します。</summary>
      <returns>発行者が作成したコンテンツ識別子。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>この署名付きの <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> の復号化された <see cref="T:System.Security.RightsManagement.PublishLicense" /> バージョンを返します。</summary>
      <param name="cryptoProvider">ライセンスの復号化に使用する権限管理サービス。</param>
      <returns>このライセンスの復号化された署名なしバージョン。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>コンテンツの作成者または発行者の連絡先名を取得します。</summary>
      <returns>コンテンツの作成者または発行者の連絡先名。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>コンテンツの作成者または発行者の連絡先 URI を取得します。</summary>
      <returns>コンテンツの作成者または発行者の連絡先 URI (uniform resource identifier)。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>本ライセンスの作成に使用されたシリアル化 XrML 文字列を返します。</summary>
      <returns>本ライセンスの作成に使用されたシリアル化 Extensible Rights Markup Language (XrML) 文字列。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>
        <see cref="T:System.Security.RightsManagement.UseLicense" /> を得るために使用する URI を取得します。</summary>
      <returns>
        <see cref="T:System.Security.RightsManagement.UseLicense" />を取得するために使用する URI。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>権限管理操作を正常に完了できない場合に、エラー状態を表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>
        <see cref="T:System.Security.RightsManagement.RightsManagementException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Security.RightsManagement.RightsManagementException" /> クラスの新しいインスタンスを初期化し、例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ストアを設定します。</summary>
      <param name="info">シリアル化されたデータを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> を使用して、<see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode">エラーのエラー コード。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> および <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> を使用して、<see cref="P:System.Exception.InnerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode">エラーのエラー コード。</param>
      <param name="innerException">エラーの原因となった例外インスタンス。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> および <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> を使用して、<see cref="P:System.Exception.Message" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode">エラーのエラー コード。</param>
      <param name="message">エラーについて説明するメッセージ。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" />、<see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />、および <see cref="P:System.Exception.Message" /> を使用して、<see cref="P:System.Exception.InnerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode">エラーのエラー コード。</param>
      <param name="message">エラーについて説明するメッセージ。</param>
      <param name="innerException">エラーの原因となった例外インスタンス。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Security.RightsManagement.RightsManagementException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーについて説明するメッセージ。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> および <see cref="P:System.Exception.Message" /> を使用して、<see cref="P:System.Exception.InnerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーについて説明するメッセージ。</param>
      <param name="innerException">この例外の原因となった例外インスタンス。</param>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>エラーの <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> を取得します。</summary>
      <returns>エラーのエラー コード。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>パラメーター名と例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ストアを設定します。</summary>
      <param name="info">シリアル化されたデータを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>権限管理操作の実行時に発生する可能性があるエラー状態を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>非同期操作がキャンセルされたか、または回復不可能なエラーが発生しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>ライセンスのアクティブ化に失敗しました。権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>Windows 認証の証明書について、Active Directory (AD) 内で現在のユーザーが見つかりませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>要求された操作は既に進行中です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>認証エラー (HTTP エラー 401) がインターネット要求によって返されました。 または、サイレント ユーザーのアクティブ化を試行しましたが、現在のユーザーに有効なドメイン資格情報がありません。 または、サイレント ユーザーのアクティブ化で使用した証明書サーバーが、ローカル イントラネットまたは信頼されたサイト ゾーンに存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>無効な定数が渡されました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>アクセス状態が、バインドに渡される有効化プリンシパルに一致しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>現在のユーザーは、使用許諾 (EUL) で定義された条件を満たしていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>指定されたリソースは、ライセンスの WORK ノードに含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>有効化プリンシパルが、使用許諾 (EUL) の発行されたプリンシパルと一致しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>保護されたコンテンツに対して定義された有効期限が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>現在のコンピューターは、権限管理されたグループ ID 内に定義されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>指定した権限グループは、使用許諾 (EUL) に含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>ライセンスでは、新しい失効リストを取得する必要があります。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>使用許諾 (EUL) には WORK ノードが含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>保護されたコンテンツに対して定義された有効期限が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>権限管理証明書チェーンが切断されています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>クロック ロールバックが検出されました。 保護されたコンテンツにアクセスできません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>要求された暗号化操作はサポートされていません。 たとえば、復号化のために RMS 暗号化オブジェクトを渡すことはサポートされていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>デバッガ―が検出されたため、制限されたアクセス許可でコンテンツを開いたり公開したりすることはできません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>ユーザーの電子メール アドレスを確認できません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>指定されたプリンシパルを有効にできません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>暗号化は許可されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> を読み込めません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> を読み込めません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>発行ライセンス テンプレートで定義された有効期間が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>指定したオプションは既に設定されています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>ユーザー名がクライアント セッションで指定されませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>コンピュータのアクティブ化の試行時に使用されたハードウェア ID (HID) の形式が正しくありません。 権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>コンピュータのアクティブ化の試行時に使用されたハードウェア ID (HID) が無効です。 権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>ライセンスからのコンテンツ ID が、ライセンスの格納セッションのコンテンツ ID に一致しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>渡されたオブジェクト型は、この操作に適合しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>バインドされたライセンスの作成時に、使用承諾ではなく発行ライセンスが指定されました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>一部の情報が見つかりません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>インストール操作が失敗しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>指定されたアルゴリズムの種類は無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>RMS サーバーの電子メール アドレスの確認に失敗しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>指定されたエンコードの種類は無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>環境または有効化プリンシパル ハンドルが無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>権限管理サービス テンプレートに 1 つ以上のエラーが含まれています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>キーと値のペアで指定されたキー長が無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>いずれかの証明書のライセンス構造が無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>署名された権限管理デジタル証明書を検証できません。 (署名された証明書が改ざんされている可能性があります。)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>指定された数値は無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>指定したレジストリ パスが無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>指定した時刻情報が無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>権限管理のバージョンが正しくありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>キーと値のペアで指定されたキーの種類はサポートされていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>ライブラリ操作が失敗しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>指定されたライブラリ プラグインはサポートされていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>使用許諾 (EUL) を権限管理サーバーから取得できませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>現在のユーザーの資格情報は、ライセンスの取得に対して有効でありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>操作が権限管理マニフェスト ポリシーに違反しています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>指定したメタデータを設定できませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>ユーザーがアクティブになっていないか、または権利アカウント証明書 (RAC) が送信されておらず、このセッションに関連付けられているライセンスに一致するライセンス ストアで証明書が見つかりませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>ユーザーをアクティブにする前にコンピューターをアクティブにする必要があります。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>ライセンス サーバーに指定された URI に権限管理を接続できません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>保護されたコンテンツが破損しています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>必要なライセンスを使用できません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>指定したインデックスにはライセンスも証明書も存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>権限が管理されたコンテンツが破損しています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>削除するように要求された項目は存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>ライセンス サーバーの使用許諾 (EUL) の最大クォータに達しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>ドキュメントに所有者ライセンスが含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>要求された属性のインスタンスは存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>指定されたライセンスが見つかりませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>権限管理サーバーでは、現在のユーザーの一時的な証明書は許可されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>証明書またはライセンスの失効情報が設定されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>権限管理を使用してコンテンツを発行したときに要求された権限が指定されませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>操作が正常に完了しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>証明書の数が許可される最大数を超えました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>作成された <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> インスタンスが多すぎます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>未指定のエラーが発生しました。  アプリケーションをデバッグ モードで実行するときにもスローされます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>コンピューターのアクティブ化または権利アカウント証明書について要求を実行する場合、<see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> の受信は、アプリケーションによって <see langword="null" /> が ActServInfo パラメーターに渡されることを示します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>保護されたコンテンツに対して定義された有効期限が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>ユーザーのアクティブ化、ライセンスのバインディング、およびその他の権限管理操作にとって安全なクライアント セッションを表します。</summary>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>
        <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> の作成時に指定した <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> を取得します。</summary>
      <returns>
        <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> の作成時に <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> メソッドに対して指定したアプリケーション マニフェスト。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>アプリケーションの権利マニフェスト、<see cref="T:System.Security.RightsManagement.AuthenticationType" />、および <see cref="T:System.Security.RightsManagement.UserActivationMode" /> が指定された、セキュリティで保護されたクライアント セッションを作成します。</summary>
      <param name="applicationManifest">アプリケーションの権限マニフェスト。</param>
      <param name="authentication">認証の方法。</param>
      <param name="userActivationMode">ユーザー権利のアカウント証明書の種類。</param>
      <returns>アクティブ化、ライセンスのバインド、およびその他の権限管理操作のための、セキュリティで保護されたクライアント セッション。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>指定された権限マニフェストを使用して、指定されたユーザーのセキュリティで保護されたクライアント セッションを作成します。</summary>
      <param name="applicationManifest">アプリケーションの権限マニフェスト。</param>
      <param name="user">権限が管理されたコンテンツへのアクセス権を付与するユーザーまたはユーザー グループ。</param>
      <returns>アクティブ化、ライセンスのバインド、およびその他の権限管理操作のための、セキュリティで保護されたクライアント セッション。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>アクティブになっているユーザーのリストを返します。</summary>
      <returns>現在アクティブになっているユーザーのリスト。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>権限管理コンテンツにアクセスできるように、特定のユーザーがアクティブになっているかどうかを示します。</summary>
      <param name="user">権限が管理されたコンテンツへのアクセス権を付与するユーザーまたはユーザー グループ。</param>
      <returns>権限管理コンテンツにアクセスできるように、指定した <paramref name="user" /> がアクティブになっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>指定したユーザーのライセンス アクティベーションを削除します。</summary>
      <param name="user">ライセンス アクティベーションを削除する対象となるユーザー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="user" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定した <paramref name="user" /> は、Windows 認証または Passport 認証で認証されていません。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> の作成時に指定したユーザーまたはユーザー グループを取得します。</summary>
      <returns>
        <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> の作成時に <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> メソッドに対して指定したユーザーまたはユーザー グループ。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>署名されていない権限管理 <see cref="T:System.Security.RightsManagement.PublishLicense" /> か、署名されていない <see cref="T:System.Security.RightsManagement.PublishLicense" /> テンプレートを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>指定した XrML 公開ライセンスのテンプレートから <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="publishLicenseTemplate">このライセンスの作成に使用する Extensible Rights Markup Language (XrML) 公開ライセンスのテンプレート。</param>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>発行者が作成したコンテンツ識別子を取得または設定します。</summary>
      <returns>発行者が作成した、権限が管理されたコンテンツの識別子。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>割り当てられたユーザー権限のコレクションを取得します。</summary>
      <returns>このライセンスに示されている割り当てられたユーザー権限のコレクション。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>名前と説明のペアのコレクションを取得します。</summary>
      <returns>名前と説明のペアのコレクション。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>コンテンツの所有者を取得または設定します。</summary>
      <returns>公開されたコンテンツを所有しているユーザー。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>コンテンツの作成者または発行者の連絡先名を取得または設定します。</summary>
      <returns>コンテンツの作成者または発行者の連絡先名。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>コンテンツの作成者または発行者の連絡先 URI を取得または設定します。</summary>
      <returns>コンテンツの作成者または発行者の連絡先 URI (uniform resource identifier)。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>署名付きの <see cref="T:System.Security.RightsManagement.PublishLicense" /> を作成し、ドキュメント作成者の <see cref="T:System.Security.RightsManagement.UseLicense" /> を返します。</summary>
      <param name="secureEnvironment">ライセンスのアクティブ化とバインディングにとって安全な環境。</param>
      <param name="authorUseLicense">返されるドキュメント作成者の <see cref="T:System.Security.RightsManagement.UseLicense" />。</param>
      <returns>この <see cref="T:System.Security.RightsManagement.PublishLicense" /> の署名によって作成される署名付きの <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> の XrML から作成されたシリアル化されたテンプレートを返します。</summary>
      <returns>
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> の XrML から作成されたシリアル化されたテンプレート。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>保護された権限管理対象コンテンツへのアクセスを有効にするライセンスを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>
        <see cref="T:System.Security.RightsManagement.UseLicense" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="useLicense">シリアル化された Extensible Rights Markup Language (XrML) 形式の使用ライセンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" /> が無効です。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>公開アプリケーションから消費アプリケーションに渡されたキーと値のペアを含む、アプリケーション データ ディクショナリを取得します。</summary>
      <returns>公開アプリケーションから消費アプリケーションに渡されたキーと値のペアを含む、アプリケーション データ ディクショナリ。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>指定の <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> にライセンスをバインドします。</summary>
      <param name="secureEnvironment">ライセンスをバインドする環境。</param>
      <returns>ライセンスのバインディングが成功した場合は <see cref="T:System.Security.RightsManagement.CryptoProvider" /> インスタンス。それ以外の場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" /> は <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>発行者が作成したコンテンツ識別子を取得します。</summary>
      <returns>発行者が作成したコンテンツ識別子。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>このライセンスが、指定した別のライセンスと等しいかどうかを示します。</summary>
      <param name="x">比較するライセンス。</param>
      <returns>両方のライセンスが等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>このライセンスに関連付けられたハッシュ コードを返します。</summary>
      <returns>このライセンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>ライセンスの所有者を取得します。</summary>
      <returns>ライセンスの所有者。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>このライセンスの作成に使用するシリアル化された XrML 文字列を返します。</summary>
      <returns>最初に <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> コンストラクターに渡されるシリアル化された Extensible Rights Markup Language (XrML) 文字列。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>権限管理のアクティブ化を要求する場合に必要となる、ユーザーの権利アカウント証明書の種類を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>永続的な権利アカウント証明書。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>一時的な権利アカウント証明書。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>添付プロパティの使用範囲を報告する .NET Framework 属性の基底クラスを提供します。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>添付プロパティが、指定した型から派生した要素に対してのみ参照可能なことを指定します。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>指定した <paramref name="targetType" /> を使用して、<see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType">この .NET Framework 属性 を適用する添付プロパティの使用のスコープとなる対象の型。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 属性 が、指定したオブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> と比較する <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> と等しい場合は <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>この <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 属性 のハッシュ コードを返します。</summary>
      <returns>32 ビットの符号なし整数値。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>この .NET Framework 属性 が適用する添付プロパティを使用するスコープを指定する基本型を取得します。</summary>
      <returns>要求された <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>この <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 属性 の一意の型識別子を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> の一意の識別子であるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>そのクラス定義に適用される別の特定の .NET Framework 属性も持つ要素上でのみ添付プロパティを参照できるように指定します。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeType">
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> が適用されているクラスで添付プロパティを参照できるように、クラスでも適用する必要がある .NET Framework 属性 の <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>クラスでも適用する必要がある .NET Framework 属性の型を取得します。</summary>
      <returns>.NET Framework 属性型。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 属性 が、指定したオブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> と比較する <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> と等しい場合は <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>この <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 属性のハッシュ コードを返します。</summary>
      <returns>32 ビットの符号なし整数値。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>アプリケーションが、WindowsBase アセンブリにある WPF の新しい機能に対してどのように動作するかを指定するプロパティを格納します。</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>
        <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> に関する情報が <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> に保存されているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> に関する情報が <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> に保存される場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary>ディスパッチャーが処理を要求するときに発生したエラーの処理方法を定義します。</summary>
      <returns>ディスパッチャーのエラー処理方法を定義する値。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary>要求の処理中に発生したエラーにディスパッチャーがどのように応答するかを説明する、一連の値を提供します。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary>失敗後も続行します。
これが既定値です。 .NET Framework 4.7.1 より前の Windows Presentation Foundation ディスパッチャーの動作を定義します。 このオプションを選択すると、ディスパッチャーが応答しなくなる場合があります。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary>次に必要な場合に別の要求を試せるように、ディスパッチャーの状態をリセットします。
このオプションにより、無反応な状態が "修復" される場合もありますが、通常の処理のタイミングを優先できなくなり、重大な問題となることがあります。 このオプションを選択すると、予期しない動作が起こる可能性があります。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary>例外をスローします。
このオプションにより、問題がすぐにアプリケーション開発者に通知されます。</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>
        <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> メソッドがディスパッチャー キューにデリゲートを登録するかデリゲートが直接呼び出されるかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> メソッドがディスパッチャー キューにデリゲートを登録したり、デリゲートが直接呼び出されたりする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>複数のディスパッチャー操作で単一の <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> が使用されるかどうかを示す値を取得または設定します。</summary>
      <returns>複数のディスパッチャー操作に 1 つの <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> が使用される場合は true、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>依存関係プロパティの値が再評価されたり強制が明示的に要求されたりした場合に必ず呼び出されるメソッドのテンプレートを提供します。</summary>
      <param name="d">プロパティが存在するオブジェクト。 コールバックが呼び出されると、プロパティ システムがこの値を渡します。</param>
      <param name="baseValue">強制が試行される前のプロパティの新しい値。</param>
      <returns>強制された (適切な型の) 値。</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Int32Rect" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Int32Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Int32Rect" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Int32Rect" /> に変換します。</summary>
      <param name="value">変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Int32Rect" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Int32Rect" /> の文字列表現。</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Point" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.PointValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Point" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Point" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Point" /> に変換します。</summary>
      <param name="value">変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Point" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Point" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Point" /> の文字列表現。</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Rect" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.RectValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Rect" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Rect" /> に変換します。</summary>
      <param name="value">変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Rect" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Rect" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Rect" /> の文字列表現。</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Size" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.SizeValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Size" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Size" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Size" /> に変換します。</summary>
      <param name="value">変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Size" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Size" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Size" /> の文字列表現。</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Vector" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.VectorValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Vector" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Vector" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となるオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Vector" /> に変換します。</summary>
      <param name="value">変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Vector" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Vector" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するオブジェクト。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Vector" /> の文字列表現。</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>
        <see cref="T:System.Windows.Data.DataSourceProvider" /> オブジェクトの共通の基底クラスおよびコントラクトです。このオブジェクトは、バインド ソース オブジェクトとして使用可能な 1 つのオブジェクトまたはオブジェクトの一覧を生成するためにいくつかのクエリを実行するファクトリです。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>
        <see cref="T:System.Windows.Data.DataSourceProvider" /> クラスの新しいインスタンスを初期化します。 これは保護されたコンストラクターです。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>このオブジェクトの初期化が開始されようとしていることを示します。一致する <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> メソッドが呼び出されるまで暗黙の <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> は発生しません。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>派生クラスでオーバーライドされると、この基本クラスは、<see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> または <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> が呼び出されたときにこのメソッドを呼び出します。 更新が遅延される場合、または最初の読み込みが無効になっている場合は、基本クラスによって呼び出しが遅延されます。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>基になるデータ オブジェクトを取得します。</summary>
      <returns>データ オブジェクトの基になる型 <see cref="T:System.Object" /> の値。</returns>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>
        <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> プロパティに新しい値が設定された場合に発生します。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>プロバイダーのプロパティを変更し、自動更新を遅延させるために使用できる遅延サイクルを入力します。</summary>
      <returns>呼び出し元のオブジェクトを破棄するために使用できる <see cref="T:System.IDisposable" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>使用する UI スレッドに対する現在の <see cref="T:System.Windows.Threading.Dispatcher" /> オブジェクトを取得または設定します。</summary>
      <returns>使用する UI スレッドに対する現在の <see cref="T:System.Windows.Threading.Dispatcher" /> オブジェクト。 既定では、これは、このインスタンスの作成時にスレッドに関連付けられた <see cref="T:System.Windows.Threading.Dispatcher" /> オブジェクトです。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>このオブジェクトの初期化が完了したことを示します。これにより、保留状態の <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> が他にない場合は <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> が発生します。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>最後のクエリ操作のエラーを取得します。</summary>
      <returns>最後のクエリ操作のエラーである <see cref="T:System.Exception" /> 型の値。エラーがなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>基になるデータ モデルに対する最初のクエリを開始します。 結果は <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> プロパティに返されます。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>データの自動読み込みを回避または遅延するかどうかを示す値を取得または設定します。</summary>
      <returns>データの自動読み込みを回避または遅延する場合は <see langword="false" />。それ以外の場合は <see langword="true" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>保留状態の <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> が使用されているかどうかを示す値を取得します。</summary>
      <returns>保留状態の <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> が使用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>指定された引数を使用して、<see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="e">発生しているイベントの引数。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>派生クラスは、このメソッドを呼び出してクエリが終了したことを示します。</summary>
      <param name="newData">クエリの結果を表すデータ。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>派生クラスは、このメソッドを呼び出してクエリが終了したことを示します。</summary>
      <param name="newData">クエリの結果を表すデータ。</param>
      <param name="error">クエリの実行中に発生したエラー。 エラーがない場合、この値は <see langword="null" /> です。</param>
      <param name="completionWork">UI スレッドで追加のプロパティの設定などの完了作業を実行するために使用される省略可能なデリゲート。</param>
      <param name="callbackArguments">
        <paramref name="completionWork" /> デリゲートのパラメーターとして送信する省略可能な引数。</param>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>基になるデータ モデルに対する更新操作を開始します。 結果は <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> プロパティに返されます。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>依存関係プロパティ システムに関連するオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>
        <see cref="T:System.Windows.DependencyObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>プロパティのローカル値をクリアします。 クリアするプロパティは <see cref="T:System.Windows.DependencyProperty" /> 識別子で指定されます。</summary>
      <param name="dp">
        <see cref="T:System.Windows.DependencyProperty" /> オブジェクト参照によって識別される、消去対象の依存関係プロパティ。</param>
      <exception cref="T:System.InvalidOperationException">シールされている <see cref="T:System.Windows.DependencyObject" /> で <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> を呼び出そうとしました。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>読み取り専用プロパティのローカル値を消去します。 消去するプロパティは、 <see cref="T:System.Windows.DependencyPropertyKey" />で指定します。</summary>
      <param name="key">消去する依存関係プロパティのキー。</param>
      <exception cref="T:System.InvalidOperationException">シールされている <see cref="T:System.Windows.DependencyObject" /> で <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> を呼び出そうとしました。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>指定した依存関係プロパティの値を強制します。 これは、呼び出し元の <see cref="T:System.Windows.DependencyObject" /> の依存関係プロパティのプロパティ メタデータで指定されている <see cref="T:System.Windows.CoerceValueCallback" /> 関数を呼び出すことによって実現されます。</summary>
      <param name="dp">強制する依存関係プロパティの識別子。</param>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="dp" /> またはその値が無効であるか、存在しません。</exception>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>このインスタンスの CLR 型をラップする <see cref="T:System.Windows.DependencyObjectType" /> を取得します。</summary>
      <returns>このインスタンスの CLR 型をラップする <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Windows.DependencyObject" /> が現在の <see cref="T:System.Windows.DependencyObject" /> と等しいかどうかを判断します。</summary>
      <param name="obj">現在のインスタンスと比較する対象の <see cref="T:System.Windows.DependencyObject" />。</param>
      <returns>2 つのインスタンスが同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>この <see cref="T:System.Windows.DependencyObject" /> のハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>どの依存関係プロパティがこの <see cref="T:System.Windows.DependencyObject" /> 上にローカルに設定された値を持つかを確認するための、専用の列挙子を作成します。</summary>
      <returns>専用のローカル値列挙子。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>
        <see cref="T:System.Windows.DependencyObject" /> のこのインスタンスにある依存関係プロパティの現在の有効値を返します。</summary>
      <param name="dp">値を取得する対象のプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
      <returns>現在の有効値を返します。</returns>
      <exception cref="T:System.InvalidOperationException">指定した <paramref name="dp" /> またはその値が無効であるか、指定した <paramref name="dp" /> が存在しません。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>指定した依存関係プロパティの有効値を再評価します。</summary>
      <param name="dp">無効にするプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>このインスタンスが現在シールされている (読み取り専用である) かどうかを示す値を取得します。</summary>
      <returns>このインスタンスがシールされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>この <see cref="T:System.Windows.DependencyObject" /> の依存関係プロパティの有効値が更新された場合に必ず呼び出されます。 変更が発生した特定の依存関係プロパティがイベント データで報告されます。</summary>
      <param name="e">目的の依存関係プロパティの識別子、その型のプロパティ メタデータ、および古い値と新しい値を格納するイベント データ。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>ローカルの依存関係プロパティの値を返します (存在する場合)。</summary>
      <param name="dp">値を取得する対象のプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
      <returns>ローカル値を返します。ローカル値が設定されていない場合は sentinel 値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>依存関係プロパティ値のソースを変更せずにその値を設定します。</summary>
      <param name="dp">設定する依存関係プロパティの識別子。</param>
      <param name="value">新しいローカル値。</param>
      <exception cref="T:System.InvalidOperationException">読み取り専用の依存関係プロパティ、またはシールされている <see cref="T:System.Windows.DependencyObject" /> 上のプロパティを変更しようとしました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<paramref name="dp" /> プロパティに登録されている正しい型ではありません。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>依存関係プロパティ識別子を指定して、該当する依存関係プロパティのローカル値を設定します。</summary>
      <param name="dp">設定する依存関係プロパティの識別子。</param>
      <param name="value">新しいローカル値。</param>
      <exception cref="T:System.InvalidOperationException">読み取り専用の依存関係プロパティ、またはシールされている <see cref="T:System.Windows.DependencyObject" /> 上のプロパティを変更しようとしました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が、<paramref name="dp" /> プロパティに登録されている正しい型ではありません。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>依存関係プロパティの <see cref="T:System.Windows.DependencyPropertyKey" /> 識別子で指定した読み取り専用の依存関係プロパティのローカル値を設定します。</summary>
      <param name="key">設定するプロパティの <see cref="T:System.Windows.DependencyPropertyKey" /> 識別子。</param>
      <param name="value">新しいローカル値。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>シリアル化プロセスが、指定された依存関係プロパティの値をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <param name="dp">シリアル化する必要がある依存関係プロパティの識別子。</param>
      <returns>指定された依存関係プロパティの値をシリアル化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>すべての <see cref="T:System.Windows.DependencyObject" /> 派生型の基になる型のキャッシュを実装します。</summary>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>現在の <see cref="T:System.Windows.DependencyObjectType" /> の直接基本クラスの <see cref="T:System.Windows.DependencyObjectType" /> を取得します。</summary>
      <returns>基本クラスの型。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>指定されたシステム (CLR) 型を表す <see cref="T:System.Windows.DependencyObjectType" /> を返します。</summary>
      <param name="systemType">変換するシステム (CLR) 型。</param>
      <returns>システム (CLR) 型を表す <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>この <see cref="T:System.Windows.DependencyObjectType" /> のハッシュ コードを返します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>一定時間の配列検索操作の 0 から始まる一意識別子を取得します。</summary>
      <returns>内部識別子。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>指定したオブジェクトが現在の <see cref="T:System.Windows.DependencyObjectType" /> のインスタンスかどうかを判断します。</summary>
      <param name="dependencyObject">現在の <see cref="T:System.Windows.DependencyObjectType" /> と比較するオブジェクト。</param>
      <returns>現在の <see cref="T:System.Windows.DependencyObjectType" /> によって表されるクラスが <paramref name="d" /> として渡される <see cref="T:System.Windows.DependencyObject" /> の継承階層内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>現在の <see cref="T:System.Windows.DependencyObjectType" /> が、指定した <see cref="T:System.Windows.DependencyObjectType" /> から派生しているかどうかを判断します。</summary>
      <param name="dependencyObjectType">比較対象の <see cref="T:System.Windows.DependencyObjectType" />。</param>
      <returns>
        <paramref name="dependencyObjectType" /> パラメーターおよび現在の <see cref="T:System.Windows.DependencyObjectType" /> がクラスの型を表し、現在の <see cref="T:System.Windows.DependencyObjectType" /> によって表されるクラスが <paramref name="dependencyObjectType" /> によって表されるクラスから派生している場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 <paramref name="dependencyObjectType" /> と現在の <see cref="T:System.Windows.DependencyObjectType" /> が同じクラスを表す場合、このメソッドは <see langword="false" /> も返します。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>表される共通言語ランタイム (CLR) システム型の名前を取得します。</summary>
      <returns>表されるCLR システム型の名前。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>この <see cref="T:System.Windows.DependencyObjectType" /> によって表される共通言語ランタイム (CLR) システム型を取得します。</summary>
      <returns>この <see cref="T:System.Windows.DependencyObjectType" /> によって表されるCLR システム型。</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>スタイル設定、データ バインディング、アニメーション、および継承などの方法によって設定できるプロパティを表します。</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>登録済みの依存関係プロパティの所有者として、別の型を追加します。</summary>
      <param name="ownerType">この依存関係プロパティの所有者として追加する型。</param>
      <returns>依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。 この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>既に登録済みの依存関係プロパティの所有者として別の型を追加します。その際、提供される所有者の型に存在する依存関係プロパティに依存関係プロパティのメタデータを提供します。</summary>
      <param name="ownerType">この依存関係プロパティの所有者として追加する型。</param>
      <param name="typeMetadata">提供される型に存在する依存関係プロパティを修飾するメタデータ。</param>
      <returns>依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。 この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>依存関係プロパティの既定のメタデータを取得します。</summary>
      <returns>依存関係プロパティの既定のメタデータ。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コードを返します。</summary>
      <returns>この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>指定した既存の型に存在する場合の、この依存関係プロパティのメタデータを返します。</summary>
      <param name="forType">依存関係プロパティのメタデータを取得する対象の特定の型。</param>
      <returns>プロパティ メタデータ オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>この依存関係プロパティのメタデータが指定したオブジェクト インスタンスに存在する場合に、このメタデータを返します。</summary>
      <param name="dependencyObject">メタデータの取得元となる依存関係プロパティの型固有のバージョンを確認するために型をチェックするときの、対象となる依存関係オブジェクト。</param>
      <returns>プロパティ メタデータ オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>指定した型に存在する場合の、この依存関係プロパティのメタデータを返します。</summary>
      <param name="dependencyObjectType">依存関係プロパティ メタデータの取得元となる依存関係オブジェクト型を記録する特定のオブジェクト。</param>
      <returns>プロパティ メタデータ オブジェクト。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>依存関係プロパティを一意に識別する内部的に生成された値を取得します。</summary>
      <returns>一意の数値識別子。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>指定した値がこの依存関係プロパティの型で受け入れ可能かどうかを、依存関係プロパティの最初の登録で指定されたプロパティの型と照合することによって判断します。</summary>
      <param name="value">確認する値。</param>
      <returns>指定した値が登録済みのプロパティ型であるか、または受け入れ可能な派生型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>指定した値がプロパティの型で受け入れ可能かどうかを基本型チェックによって判断します。さらに、その型の有効値の範囲内にこの値があるかどうかを判断することもあります。</summary>
      <param name="value">確認する値。</param>
      <returns>値が受け入れ可能で、適切な型または派生型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>依存関係プロパティの名前を取得します。</summary>
      <returns>プロパティの名前。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>指定した型のインスタンスに存在する場合の代替メタデータをこの依存関係プロパティに提供し、基本型から継承されたときにこの依存関係プロパティに存在していたメタデータをオーバーライドします。</summary>
      <param name="forType">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</param>
      <param name="typeMetadata">オーバーライドする型の依存関係プロパティに適用するメタデータ。</param>
      <exception cref="T:System.InvalidOperationException">読み取り専用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してこの操作を行うことはできません)。</exception>
      <exception cref="T:System.ArgumentException">指定した型に存在する場合のメタデータが、この依存関係プロパティに対して既に確立されています。</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>指定した型のインスタンスに存在する場合に代替メタデータを読み取り専用の依存関係プロパティに提供し、依存関係プロパティの最初の登録時に指定したメタデータをオーバーライドします。 例外の発生を防ぐために、読み取り専用の依存関係プロパティに <see cref="T:System.Windows.DependencyPropertyKey" /> を渡す必要があります。</summary>
      <param name="forType">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</param>
      <param name="typeMetadata">オーバーライドする型の依存関係プロパティに適用するメタデータ。</param>
      <param name="key">読み取り専用の依存関係プロパティのアクセス キー。</param>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>依存関係プロパティをプロパティ システムに登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型を取得します。</summary>
      <returns>プロパティを登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>依存関係プロパティの値の型を取得します。</summary>
      <returns>プロパティ値の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>この <see cref="T:System.Windows.DependencyProperty" /> インスタンスによって識別される依存関係プロパティが読み取り専用の依存関係プロパティかどうかを示す値を取得します。</summary>
      <returns>依存関係プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>プロパティ名、プロパティ型、所有者型を指定して、依存関係プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。 名前は、所有者型の登録名前空間内で一意である必要があります。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録する所有者型。</param>
      <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>プロパティ名、プロパティの型、所有者の型、プロパティ メタデータを指定して、依存関係プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
      <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>プロパティ名、プロパティ型、所有者型、プロパティ メタデータ、およびプロパティの値検証コールバックを指定して、依存関係プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
      <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</param>
      <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>プロパティ名、プロパティ型、および所有者型を指定して、添付プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録する所有者型。</param>
      <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>プロパティ名、プロパティの型、所有者の型、およびプロパティ メタデータを指定して、アタッチされるプロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。 ここには、既定値などの特性を含めることができます。</param>
      <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>プロパティ型、所有者型、プロパティ メタデータ、および値の検証コールバックを指定して、添付プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。 ここには、既定値などの特性を含めることができます。</param>
      <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</param>
      <returns>クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>プロパティ型、所有者型、およびプロパティ メタデータを指定して、読み取り専用の添付プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。</param>
      <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の添付プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="defaultMetadata">依存関係プロパティのプロパティ メタデータ。</param>
      <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</param>
      <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用する必要があり、依存関係プロパティの参照に使用される、依存関係プロパティのキー。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>プロパティ型、所有者型、プロパティ メタデータを指定して、読み取り専用の依存関係プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
      <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用する必要があり、依存関係プロパティの参照に使用される、依存関係プロパティのキー。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の依存関係プロパティを登録します。</summary>
      <param name="name">登録する依存関係プロパティの名前。</param>
      <param name="propertyType">プロパティの型。</param>
      <param name="ownerType">依存関係プロパティを登録している所有者の型。</param>
      <param name="typeMetadata">依存関係プロパティのプロパティ メタデータ。</param>
      <param name="validateValueCallback">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</param>
      <returns>クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>依存関係プロパティの文字列表現を返します。</summary>
      <returns>依存関係プロパティの文字列表現。</returns>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>プロパティは存在するが、その値がプロパティ システムによって設定されていないことを示すために、WPF プロパティ システムが <see langword="null" /> の代わりに使用する静的な値を指定します。</summary>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>依存関係プロパティの値検証コールバックを取得します。</summary>
      <returns>依存関係プロパティを最初に登録するときに <paramref name="validateValueCallback" /> パラメーターで指定した、この依存関係プロパティの値検証コールバック。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>さまざまなプロパティ変更イベントにデータを提供します。 通常、これらのイベントは、読み取り専用の依存関係プロパティの有効値の変更を報告します。 もう 1 つの用途は、<see cref="T:System.Windows.PropertyChangedCallback" /> 実装の一部として使用することです。</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>
        <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="property">変更された依存関係プロパティの識別子。</param>
      <param name="oldValue">関連イベントまたは状態変更によって変更が報告される前のプロパティの値。</param>
      <param name="newValue">関連イベントまたは状態変更によって変更が報告された後のプロパティの値。</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>提供されたオブジェクトが現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価であるかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と比較するオブジェクト。</param>
      <returns>提供されたオブジェクトが現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>提供された <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> が現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価であるかどうかを判断します。</summary>
      <param name="args">現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と比較する <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns>提供された <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> が現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>この <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> のハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>変更後のプロパティの値を取得します。</summary>
      <returns>変更後のプロパティの値。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>変更前のプロパティの値を取得します。</summary>
      <returns>変更前のプロパティの値。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>指定した 2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="left">比較対象となる最初の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right">比較対象となる 2 番目の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns>2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> インスタンスが等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>指定した 2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> オブジェクトが異なっているどうかを判断します。</summary>
      <param name="left">比較対象となる最初の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right">比較対象となる 2 番目の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns>2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> インスタンスが異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>値が変更された依存関係プロパティの識別子を取得します。</summary>
      <returns>値が変更された依存関係プロパティの識別子フィールド。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>
        <see cref="T:System.Windows.DependencyProperty" /> が特定の <see cref="T:System.Windows.DependencyObject" /> 実装で変更された場合に発生するイベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>読み取り専用の依存関係プロパティへの制限された書き込みアクセスに必要な依存関係プロパティ識別子を提供します。</summary>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>この特殊な読み取り専用依存関係プロパティ識別子に関連付けられている依存関係プロパティ識別子を取得します。</summary>
      <returns>関連する依存関係プロパティ識別子。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>この依存関係プロパティ識別子によって表される読み取り専用の依存関係プロパティのメタデータをオーバーライドします。</summary>
      <param name="forType">この依存関係プロパティが存在し、メタデータをオーバーライドする必要がある型。</param>
      <param name="typeMetadata">この型に対して提供されるメタデータ。</param>
      <exception cref="T:System.InvalidOperationException">読み取り/書き込み用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してオーバーライドすることはできません)。</exception>
      <exception cref="T:System.ArgumentException">提供された型に存在するので、プロパティのメタデータは既に確立されています。</exception>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>この型は、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>
        <see cref="T:System.Windows.Expression" /> のインスタンスと他の型との間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.ExpressionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、変換元のオブジェクトを <see cref="T:System.Windows.Expression" /> オブジェクトに変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>このコンバーターが、<see cref="T:System.Windows.Expression" /> オブジェクトを特定の型に変換できるかどうかを示す値を返します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した値を <see cref="T:System.Windows.Expression" /> 型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <returns>常に例外をスローし、<see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定した <see cref="T:System.Windows.Expression" /> オブジェクトを指定した型に変換します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns>常に例外をスローし、<see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>変更可能な状態と読み取り専用 (固定) の状態を持つオブジェクトを定義します。 <see cref="T:System.Windows.Freezable" /> から派生するクラスは、詳細な変更通知を提供し、変更不可にすることが可能で、自身のクローンを作成できます。</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>
        <see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>オブジェクトを変更不可能にできるかどうかを示す値を取得します。</summary>
      <returns>現在のオブジェクトを変更不可能にできる場合、または既に変更不可能になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>
        <see cref="T:System.Windows.Freezable" />、またはこれに含まれているオブジェクトが変更されると発生します。</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>
        <see cref="T:System.Windows.Freezable" /> の変更可能な複製を作成し、オブジェクトの値の詳細コピーを作成します。 このメソッドは、オブジェクトの依存関係プロパティをコピーするときに式をコピーしますが (コピーされた式は解決されなくなる場合があります)、アニメーションやその現在の値はコピーしません。</summary>
      <returns>現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティが <see langword="true." /> である場合でも、<see langword="false" /> になります。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>基本 (アニメーション化されていない) プロパティ値を使用して、インスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の複製 (詳細コピー) にします。</summary>
      <param name="sourceFreezable">複製する対象のオブジェクト。</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>
        <see cref="T:System.Windows.Freezable" /> の現在の値を使用して、変更可能な複製 (詳細コピー) を作成します。</summary>
      <returns>現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティが <see langword="true." /> である場合でも、<see langword="false" /> になります。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>現在のプロパティ値を使用して、インスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の変更可能な複製 (詳細コピー) にします。</summary>
      <param name="sourceFreezable">複製する <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>
        <see cref="T:System.Windows.Freezable" /> クラスの新しいインスタンスを初期化します。</summary>
      <returns>新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>派生クラスで実装された場合、<see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを作成します。</summary>
      <returns>新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>現在のオブジェクトを変更不可能にし、その <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティを <see langword="true" /> に設定します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> を変更不可能にすることはできません。</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>
        <paramref name="isChecking" /> パラメーターが <see langword="true" /> の場合、このメソッドは、指定した <see cref="T:System.Windows.Freezable" /> を変更不可能な状態にできるかどうかを示します。 <paramref name="isChecking" /> パラメーターが <see langword="false" /> の場合、このメソッドは、指定した <see cref="T:System.Windows.Freezable" /> を変更不可能な状態にすることを試み、操作が成功したかどうかを示します。</summary>
      <param name="freezable">確認する対象のオブジェクト、または変更不可能な状態にするオブジェクト。 <paramref name="isChecking" /> が <see langword="true" /> の場合、このオブジェクトを確認して、変更不可能な状態にできるかどうかを判断します。 <paramref name="isChecking" /> が <see langword="false" /> の場合、可能であればオブジェクトを変更不可能な状態にします。</param>
      <param name="isChecking">オブジェクトを固定できるかどうかを示す (実際には固定しない) 場合は <see langword="true" />。実際にオブジェクトを固定する場合は <see langword="false" />。</param>
      <returns>
        <paramref name="isChecking" /> が <see langword="true" /> のときに、指定した <see cref="T:System.Windows.Freezable" /> を変更不可能な状態にできる場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。 <paramref name="isChecking" /> が <see langword="false" /> のときに、指定した <see cref="T:System.Windows.Freezable" /> が変更不可能な状態になっている場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="isChecking" /> が <see langword="false" /> のときに <paramref name="freezable" /> を変更不可能な状態にしようとして失敗した場合、このオブジェクトは不明な状態 (部分的に固定の場合もあります) になっています。</exception>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Freezable" /> オブジェクトを変更不可能な状態にするか、変更不可能な状態にできるかどうかをテストします。</summary>
      <param name="isChecking">オブジェクトを固定できるかどうかを示す (実際には固定しない) 場合は <see langword="true" />。実際にオブジェクトを固定する場合は <see langword="false" />。</param>
      <returns>
        <paramref name="isChecking" /> が <see langword="true" /> のときに、<see cref="T:System.Windows.Freezable" /> を変更不可能な状態にできる場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。 <paramref name="isChecking" /> が <see langword="false" /> のときに、指定した <see cref="T:System.Windows.Freezable" /> が変更不可能な状態になっている場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>基本プロパティ値 (アニメーション化されていない値) を使用して、<see cref="T:System.Windows.Freezable" /> の 固定されたコピーを作成します。 コピーが固定されているため、参照によって任意の固定されたサブオブジェクトがコピーされます。</summary>
      <returns>
        <see cref="T:System.Windows.Freezable" /> の固定されたコピー。 コピーの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、<see langword="true" /> に設定されます。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> は、式またはアニメーション化されたプロパティを格納していないため、固定できません。</exception>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>基本プロパティ値 (アニメーション化されていない値) を使用して、インスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</summary>
      <param name="sourceFreezable">コピーするインスタンス。</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>現在のプロパティ値を使用して、<see cref="T:System.Windows.Freezable" /> の固定されたコピーを作成します。 コピーが固定されているため、参照によって任意の固定されたサブオブジェクトがコピーされます。</summary>
      <returns>
        <see cref="T:System.Windows.Freezable" /> の固定されたコピー。 コピーの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、<see langword="true" /> に設定されます。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>現在のインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。 オブジェクトに、アニメーション化された依存関係プロパティが存在する場合、現在アニメーション化されている値がコピーされます。</summary>
      <param name="sourceFreezable">コピーし、固定する <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>オブジェクトが変更可能かどうかを示す値を取得します。</summary>
      <returns>オブジェクトが固定されており、変更できない場合は、<see langword="true" />。オブジェクトを変更できる場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>現在の <see cref="T:System.Windows.Freezable" /> オブジェクトの変更時に呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>設定されたばかりの <see cref="T:System.Windows.DependencyObjectType" /> データ メンバーに対して、適切なコンテキスト ポインターが確立されていることを確認します。</summary>
      <param name="oldValue">データ メンバーの以前の値。</param>
      <param name="newValue">データ メンバーの現在の値。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="oldValue">データ メンバーの以前の値。</param>
      <param name="newValue">データ メンバーの現在の値。</param>
      <param name="property">変更されたプロパティ。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
        <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> の <see cref="T:System.Windows.DependencyObject" /> 実装をオーバーライドして、さらに型 <see cref="T:System.Windows.Freezable" /> の変化する依存関係プロパティへの応答として任意の <see cref="E:System.Windows.Freezable.Changed" /> ハンドラーも呼び出します。</summary>
      <param name="e">変更されたプロパティ、およびその変更前と変更後の値に関する情報を格納するイベント データ。</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>
        <see cref="T:System.Windows.Freezable" /> が有効なスレッドからアクセスされていることを確認します。 <see cref="T:System.Windows.Freezable" /> の継承側は、依存関係プロパティでないデータ メンバーを読み取る任意の API の開始時に、このメソッドを呼び出す必要があります。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>
        <see cref="T:System.Windows.Freezable" /> の <see cref="E:System.Windows.Freezable.Changed" /> イベントを発生させ、その <see cref="M:System.Windows.Freezable.OnChanged" /> メソッドを呼び出します。 <see cref="T:System.Windows.Freezable" /> から派生するクラスは、依存関係プロパティとして格納されていないクラス メンバーを変更するすべての API の終了時に、このメソッドを呼び出す必要があります。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>
        <see cref="T:System.Windows.Freezable" /> が固定されておらず、有効なスレッド コンテキストからアクセスされていることを確認します。 <see cref="T:System.Windows.Freezable" /> の継承側は、依存関係プロパティでないデータ メンバーに書き込む任意の API の開始時に、このメソッドを呼び出す必要があります。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> インスタンスは固定されており、そのメンバーに書き込むことはできません。</exception>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>目的のフォーカス変更要求を試みる、ユーザー インターフェイス (UI) 内での方向を指定します。 指定できる方向は、タブ オーダーに基づく方向か、またはレイアウトでの相対的な方向です。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>現在フォーカスが設定されている要素の下側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>タブ オーダー内でフォーカスを設定できる最初の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>タブ オーダー内でフォーカスを設定できる最後の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>現在フォーカスが設定されている要素の左側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>タブ オーダー内でフォーカスを設定できる次の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>タブ オーダー内でフォーカスを設定できる前の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>現在フォーカスが設定されている要素の右側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>現在フォーカスが設定されている要素の上側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>キーボードで使えるキー値を指定します。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>A キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>ABNT_C1 (ブラジル) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>ABNT_C2 (ブラジル) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>加算記号 (+) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>アプリケーション キー (Microsoft Natural Keyboard)。 メニュー キーとも呼ばれ、アプリケーション固有のコンテキスト メニューを表示します。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>Attn キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>B キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>BackSpace キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>ブラウザーの戻るキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>ブラウザーのお気に入りキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>ブラウザーの進むキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>ブラウザーのホーム キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>ブラウザーの更新キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>ブラウザーの検索キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>ブラウザーの中止キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>C キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>Cancel キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>Caps Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>Caps Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>Clear キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>Crsel キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>D キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>0 (ゼロ) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>1 (いち) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>2 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>3 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>4 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>5 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>6 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>7 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>8 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>9 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>DBE_ALPHANUMERIC キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>DBE_CODEINPUT キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>DBE_DBCSCHAR キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>DBE_DETERMINESTRING キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>DBE_ENTERDLGCONVERSIONMODE キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>DBE_ENTERIMECONFIGMODE キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>DBE_ENTERWORDREGISTERMODE キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>DBE_FLUSHSTRING キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>DBE_HIRAGANA キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>DBE_KATAKANA キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>DBE_NOCODEINPUT キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>DBE_NOROMAN キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>DBE_ROMAN キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>DBE_SBCSCHAR キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>このキーは、1 つの結合された文字を作成するために別のキーと一緒に使用されます。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>小数点キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>Delete キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>除算記号 (/) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>↓キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>E キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>End キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>Enter キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>Erase Eof キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>Esc キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>Execute キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>Exsel キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>F キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>F1 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>F10 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>F11 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>F12 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>F13 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>F14 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>F15 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>F16 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>F17 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>F18 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>F19 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>F2 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>F20 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>F21 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>F22 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>F23 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>F24 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>F3 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>F4 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>F5 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>F6 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>F7 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>F8 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>F9 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>IME Final モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>G キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>H キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>IME ハングル モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>IME Hanja モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>Help キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>Home キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>I キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>IME Accept キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>IME 変換キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>IME モード変更要求。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>IME 無変換キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>IME で処理されている実際のキーをマスクする特殊なキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>Insert キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>J キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>IME Junja モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>K キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>IME かなモード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>IME 漢字モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>L キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>アプリケーション 1 の起動キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>アプリケーション 2 の起動キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>メールの起動キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>←キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>左 Alt キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>左 Ctrl キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>左 Shift キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>Linefeed キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>左 Windows ロゴ キー (Microsoft Natural Keyboard)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>M キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>メディアの次のトラック キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>メディアの再生/一時停止キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>メディアの前のトラック キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>メディアの停止キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>乗算記号 (*) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>N キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>Page Down キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>将来使用するために予約されている定数。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>押されたキーがありません。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>Num Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>0 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>1 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>2 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>3 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>4 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>5 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>6 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>7 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>8 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>9 キー (テンキー)</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>O キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>OEM 1 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>OEM 102 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>OEM 2 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>OEM 3 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>OEM 4 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>OEM 5 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>OEM 6 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>OEM 7 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>OEM 8 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>OEM ATTN キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>OEM Auto キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>OEM 円記号キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>OEM Backtab キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>OEM Clear キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>OEM 右角かっこキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>OEM コンマ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>OEM Copy キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>OEM Enlw キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>OEM Finish キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>OEM マイナス キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>OEM 左角かっこキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>OEM ピリオド キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>OEM パイプ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>OEM 加算キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>OEM 疑問符キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>OEM 引用符キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>OEM セミコロン キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>OEM チルダ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>P キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>PA1 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>Page Down キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>Page Up キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>Pause キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>Play キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>Print キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>Print Screen キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>Page Up キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>Q キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>R キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>Return キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>→キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>右 Alt キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>右 Ctrl キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>右 Shift キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>右 Windows ロゴ キー (Microsoft Natural Keyboard)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>S キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>Scroll Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>Select キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>メディアの選択キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>区切り記号キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>コンピューターのスリープ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>Print Screen キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>Space キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>減算記号 (-) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>システム キーとして処理されている実際のキーをマスクする特殊なキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>T キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>Tab キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>U キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>↑キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>V キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>音量下げるキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>音量ミュート キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>音量上げるキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>W キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>X キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>Y キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>Z キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>Zoom キー。</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>
        <see cref="T:System.Windows.Input.Key" /> オブジェクトと他の型との相互変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.Key" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、指定した型のオブジェクトを <see cref="T:System.Windows.Input.Key" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="sourceType">変換の評価対象となる型。</param>
      <returns>
        <see langword="true" /> の型が <paramref name="sourceType" /> の場合は <see cref="T:System.String" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、<see cref="T:System.Windows.Input.Key" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="destinationType">変換の評価対象となる型。</param>
      <returns>
        <see langword="true" /> の型が <paramref name="destinationType" /> の場合は <see cref="T:System.String" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストを使用して、指定したオブジェクトから <see cref="T:System.Windows.Input.Key" /> への変換を試みます。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <param name="source">変換対象のオブジェクト。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> を変換できません。</exception>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストを使用して、<see cref="T:System.Windows.Input.Key" /> から指定した型への変換を試みます。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> を <paramref name="destinationType" /> に変換することはできません。</exception>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Win32 仮想キーと WPF <see cref="T:System.Windows.Input.Key" /> 列挙体とを相互変換する静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Win32 仮想キーを WPF <see cref="T:System.Windows.Input.Key" /> に変換します。</summary>
      <param name="virtualKey">変換する仮想キー。</param>
      <returns>WPF キー。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>WPF <see cref="T:System.Windows.Input.Key" /> を Win32 仮想キーに変換します。</summary>
      <param name="key">変換対象の WPF。</param>
      <returns>Win32 仮想キー。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Input.Key" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.KeyValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.Key" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Input.Key" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となるキー。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.Key" /> に変換します。</summary>
      <param name="value">
        <see cref="T:System.Windows.Input.Key" /> に変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Input.Key" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Input.Key" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するキー。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Input.Key" /> 値の不変文字列形式。</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>変換キーのセットを指定します。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>Alt キー。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>CTRL キー</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>どの変換キーも押されていません。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>Shift キー</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>Windows ロゴ キー</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeys" /> オブジェクトと他の型との相互変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeysConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、指定した型のオブジェクトを <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="sourceType">変換の評価対象となる型。</param>
      <returns>
        <paramref name="sourceType" /> の型が <see cref="T:System.String" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定したコンテキストを使用して、<see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="destinationType">変換の評価対象となる型。</param>
      <returns>
        <paramref name="destinationType" /> の型が <see cref="T:System.String" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したコンテキストを使用して、指定したオブジェクトから <see cref="T:System.Windows.Input.ModifierKeys" /> への変換を試みます。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <param name="source">変換対象のオブジェクト。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" /> を変換できません。</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定したコンテキストを使用して、<see cref="T:System.Windows.Input.ModifierKeys" /> から指定した型への変換を試みます。</summary>
      <param name="context">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <param name="value">変換対象のオブジェクト。</param>
      <param name="destinationType">オブジェクトの変換後の型。</param>
      <returns>変換後のオブジェクト。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" /> が有効な <see cref="T:System.Windows.Input.ModifierKeys" /> にマップされていません。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> を変換できません。</exception>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>指定した値が有効な <see cref="T:System.Windows.Input.ModifierKeys" /> 値かどうかを判断します。</summary>
      <param name="modifierKeys">有効性を確認する値。</param>
      <returns>入力が有効な <see cref="T:System.Windows.Input.ModifierKeys" /> 値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.Windows.Input.ModifierKeys" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換の評価対象となる変換キー。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.ModifierKeys" /> に変換します。</summary>
      <param name="value">
        <see cref="T:System.Windows.Input.ModifierKeys" /> に変換する文字列。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Input.ModifierKeys" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">文字列に変換するキー。</param>
      <param name="context">変換に使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.Windows.Input.ModifierKeys" /> 値の不変文字列形式。</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>別のコントロールにフォーカスを移動する要求を表します。</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>
        <see cref="T:System.Windows.Input.TraversalRequest" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="focusNavigationDirection">フォーカスを移動する方向 (列挙体の値)。</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>移動の方向を取得します。</summary>
      <returns>移動方向の列挙値のいずれか。</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>フォーカスの移動が、フォーカスを設定できる最後の子要素に到達したかどうかを示す値を取得または設定します。</summary>
      <returns>現在の移動が、フォーカスを設定できる最後の子要素に到達した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>整数四角形の幅、高さ、場所を記述します。</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" /> 座標と <see cref="P:System.Windows.Int32Rect.X" /> 座標、および <see cref="P:System.Windows.Int32Rect.Y" /> と <see cref="P:System.Windows.Int32Rect.Width" /> を指定して、<see cref="P:System.Windows.Int32Rect.Height" /> の新しいインスタンスを初期化します。</summary>
      <param name="x">四角形の左上隅の x 座標を指定する、新しい <see cref="P:System.Windows.Int32Rect.X" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="y">四角形の左上隅の y 座標を指定する、新しい <see cref="P:System.Windows.Int32Rect.Y" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="width">四角形の幅を指定する、新しい <see cref="P:System.Windows.Int32Rect.Width" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="height">四角形の高さを指定する、新しい <see cref="P:System.Windows.Int32Rect.Height" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>空の四角形を取得します。これは位置や領域を持たない四角形を表す特殊な値です。</summary>
      <returns>位置や領域を持たない空の四角形。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>指定した四角形が、この四角形と等しいかどうかを判断します。</summary>
      <param name="o">現在の四角形と比較するオブジェクト。</param>
      <returns>
        <paramref name="o" /> が <see cref="T:System.Windows.Int32Rect" /> であり、この四角形と同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>指定した四角形が、この四角形と等しいかどうかを判断します。</summary>
      <param name="value">現在の四角形と比較する対象の四角形。</param>
      <returns>
        <paramref name="value" /> がこの四角形と同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>指定した四角形が等しいかどうかを判断します。</summary>
      <param name="int32Rect1">最初に比較する四角形。</param>
      <param name="int32Rect2">2 番目に比較する四角形。</param>
      <returns>
        <paramref name="int32Rect1" /> と <paramref name="int32Rect2" /> が同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>この四角形の <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> の値からハッシュ コードを作成します。</summary>
      <returns>この四角形のハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>
        <see cref="P:System.Windows.Int32Rect.Width" /> の <see cref="P:System.Windows.Int32Rect.Height" /> および <see cref="T:System.Windows.Int32Rect" /> プロパティが 0 より大きいかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />のプロパティと<see cref="P:System.Windows.Int32Rect.Height" />プロパティ<see langword="false" />が0より大きい場合は。それ以外の場合は。 <see cref="T:System.Windows.Int32Rect" /><see cref="P:System.Windows.Int32Rect.Width" /></returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>四角形の高さを取得または設定します。</summary>
      <returns>四角形の高さ。 既定値は<c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>四角形が空かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />四角形が空の場合は。それ以外<see langword="false" />の場合は。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>2 つの四角形を比較し、完全に等しいかどうかを判断します。</summary>
      <param name="int32Rect1">最初に比較する四角形。</param>
      <param name="int32Rect2">2 番目に比較する四角形。</param>
      <returns>
        <paramref name="int32Rect1" /> と <paramref name="int32Rect2" /> が同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>2 つの四角形を比較し、等しくないかどうかを判断します。</summary>
      <param name="int32Rect1">最初に比較する四角形。</param>
      <param name="int32Rect2">2 番目に比較する四角形。</param>
      <returns>
        <paramref name="int32Rect1" /> と <paramref name="int32Rect2" /> が同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="false" />。これらすべての値が一致する場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>指定した <see cref="T:System.Windows.Int32Rect" /> 表現から <see cref="T:System.String" /> 構造体を作成します。</summary>
      <param name="source">
        <see cref="T:System.Windows.Int32Rect" /> の文字列表現。</param>
      <returns>等価の <see cref="T:System.Windows.Int32Rect" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式を使用して、現在のインスタンスの値に書式を付けます。</summary>
      <param name="format">使用する書式。</param>
      <param name="provider">値の書式付けに使用するプロバイダー。</param>
      <returns>指定された書式での現在のインスタンスの値。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>この <see cref="T:System.Windows.Int32Rect" /> の文字列形式を作成します。</summary>
      <returns>この <see cref="P:System.Windows.Int32Rect.X" /> 構造体の、同じ <see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、<see cref="P:System.Windows.Int32Rect.Height" />、および <see cref="T:System.Windows.Int32Rect" /> の値を格納する文字列。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>指定した <see cref="T:System.Windows.Int32Rect" /> に基づいて、この <see cref="T:System.IFormatProvider" /> の文字列表現を作成します。</summary>
      <param name="provider">使用する書式プロバイダー。 プロバイダーが <see langword="null" /> の場合は、現在のカルチャが使用されます。</param>
      <returns>
        <see cref="T:System.Windows.Int32Rect" /> のこのインスタンスの文字列表現。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>四角形の幅を取得または設定します。</summary>
      <returns>四角形の幅。 既定値は<c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>四角形の左上隅の X 座標を取得または設定します。</summary>
      <returns>四角形の左上隅の X 座標。 既定値は<c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>四角形の左上隅の y 座標を取得または設定します。</summary>
      <returns>四角形の左上隅の y 座標。 既定値は<c>0</c>です。</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>他の型のインスタンスと <see cref="T:System.Windows.Int32Rect" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Int32RectConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型のオブジェクトを <see cref="T:System.Windows.Int32Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="sourceType">評価対象となる変換元の型。</param>
      <returns>型を <see cref="T:System.Windows.Int32Rect" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Int32Rect" /> が変換元として評価されるときの変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Int32Rect" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定した型から <see cref="T:System.Windows.Int32Rect" /> への変換を試みます。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重するカルチャ情報。</param>
      <param name="value">変換されるオブジェクト。</param>
      <returns>
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Int32Rect" />。</returns>
      <exception cref="T:System.NotSupportedException">指定したオブジェクトが NULL であるか、<see cref="T:System.Windows.Int32Rect" /> に変換できない型である場合にスローされます。</exception>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" /> から指定した型への変換を試みます。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重するカルチャ情報。</param>
      <param name="value">変換対象の <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Int32Rect" /> の変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Int32Rect" /> の変換によって作成されたオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> が <see langword="null" /> であるか、<see cref="T:System.Windows.Int32Rect" /> でない場合、または <paramref name="destinationType" /> が変換先の有効な型ではない場合にスローされます。</exception>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>相互運用シナリオで、Win32 と WPF の間でメッセージ ポンプの制御を共有できるようにします。</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>最後に発生したメッセージを取得します。</summary>
      <returns>最後のメッセージ。</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>スレッドがモーダルになったときに発生します。</summary>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>スレッドがモーダルかどうかを示す値を取得します。</summary>
      <returns>スレッドがモーダルの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>モーダル スレッドが非モーダルになったときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>モーダル スレッドがモーダルでなくなったことを示すために呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>スレッドがモーダルであることを示すために呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>スレッドがアイドル状態であることを示すために呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>処理できる新しいメッセージがあることを示します。</summary>
      <param name="msg">メッセージおよびそれに関連付けられたデータ。</param>
      <returns>メッセージ ループをリッスンしているモジュールのいずれかがメッセージを処理した場合は <see langword="true" />。 この場合、メッセージ ループの所有者はこのメッセージを無視します。 メッセージが処理されなかった場合は <see langword="false" />。 この場合は、メッセージ ポンプの所有者は、Win32 関数 TranslateMessage と、これに続いて DispatchMessage を呼び出す必要があります。</returns>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>メッセージ ポンプがキーボード メッセージを受信すると発生します。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>スレッドがアイドル状態のときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>メッセージ ポンプがキーボード メッセージを受信すると発生します。</summary>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>相互運用の境界を越えて複数の HWND にわたって、Tab キーによる移動、アクセラレータ、およびニーモニックを管理するコンポーネントに対し、キーボード シンクを提供します。 このインターフェイスは、WPF-Win32 の相互運用シナリオにおいてキーボード メッセージ管理を実装します。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>シンクまたはその中に格納されているコンポーネントのいずれかにフォーカスがあるかどうかを示す値を取得します。</summary>
      <returns>シンクまたはその中に格納されているコンポーネントのいずれかにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>コンポーネントのコンテナーの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスへの参照を取得または設定します。</summary>
      <returns>コンテナーの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスへの参照。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>このシンクのニーモニック (アクセス キー) のいずれかが起動されたときに呼び出されます。</summary>
      <param name="msg">ニーモニック用のメッセージおよび関連付けられたデータ。 このメッセージ構造を変更しないでください。 パフォーマンス上の理由から、これは参照渡しのみです。</param>
      <param name="modifiers">変換キー。</param>
      <returns>メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> インターフェイスを登録します。</summary>
      <param name="sink">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> シンク。</param>
      <returns>格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> サイト。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>フォーカスをシンクの最初のタブ位置または最後のタブ位置のいずれかに設定します。</summary>
      <param name="request">フォーカスを最初と最後のどちらのタブ位置に設定するかを指定します。</param>
      <returns>フォーカスが要求どおりに設定された場合は <see langword="true" />。タブ位置が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>キー押下メッセージのレベルでキーボード入力を処理します。</summary>
      <param name="msg">メッセージおよび関連付けられたデータ。 この構造体を変更しないでください。 パフォーマンス上の理由から、これは参照渡しのみです。</param>
      <param name="modifiers">変換キー。</param>
      <returns>メッセージがメソッドの実装によって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>
        <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> の呼び出し前に、WM_CHAR、WM_SYSCHAR、WM_DEADCHAR、および WM_SYSDEADCHAR 入力メッセージを処理します。</summary>
      <param name="msg">メッセージおよび関連付けられたデータ。 この構造体を変更しないでください。 パフォーマンス上の理由から、これは参照渡しのみです。</param>
      <param name="modifiers">変換キー。</param>
      <returns>メッセージが処理されたため <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> を呼び出さない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>コンテナー内のキーボード フォーカスを管理します。  このインターフェイスは、WPF-Win32 の相互運用シナリオにおいてキーボード メッセージ管理を実装します。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>格納されているコンポーネントで、最後のタブ位置に到達して移動先の項目がなくなった場合に呼び出されます。</summary>
      <param name="request">フォーカスを最初と最後のどちらのタブ位置に設定するかを指定します。</param>
      <returns>このメソッドが <see langword="true" /> を返す場合は、サイトによってフォーカスが別のコンポーネントに移動されています。 このメソッドが <see langword="false" /> を返す場合は、フォーカスはまだ呼び出し元のコンポーネントにあります。 コンポーネントで "折り返し" が行われて、含まれている最初のタブ位置にフォーカスが設定されます。</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>このサイトに関連付けられているキーボード シンクを取得します。</summary>
      <returns>現在のサイトの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> インターフェイス。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>このサイトから子キーボード入力シンクの登録を解除します。</summary>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>スレッドのメッセージ キューからのメッセージ情報を保持します。</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>ウィンドウ プロシージャがメッセージを受け取るウィンドウのウィンドウ ハンドル (HWND) を取得または設定します。</summary>
      <returns>ウィンドウ ハンドル (HWND)。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>メッセージに関する追加情報を指定する <paramref name="lParam" /> 値を取得または設定します。 意味は <see cref="P:System.Windows.Interop.MSG.message" /> メンバーの値によって異なります。</summary>
      <returns>メッセージの <paramref name="lParam" /> 値。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>メッセージ ID を取得または設定します。</summary>
      <returns>メッセージ ID。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>メッセージがポストされたときの、画面上のカーソル位置の x 座標を取得または設定します。</summary>
      <returns>カーソル位置の x 座標。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>メッセージがポストされたときの、画面上のカーソル位置の y 座標を取得または設定します。</summary>
      <returns>カーソル位置の y 座標。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>メッセージがポストされた時刻を取得または設定します。</summary>
      <returns>メッセージがポストされた時刻。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>メッセージに関する追加情報を指定する、メッセージの <paramref name="wParam" /> 値を取得または設定します。 意味はメッセージの値によって異なります。</summary>
      <returns>メッセージの <paramref name="wParam" /> 値。</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>
        <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> イベントと <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> イベントを処理するメソッドを表します。</summary>
      <param name="msg">メッセージ データを含む構造体。</param>
      <param name="handled">メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>WeakEvent パターンと <see cref="T:System.Windows.WeakEventManager" /> を通じてイベントを受信するクラスにイベント リスニング サポートを提供します。</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>中央のイベント マネージャーからイベントを受信します。</summary>
      <param name="managerType">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
      <param name="sender">イベントを発生させたオブジェクト。</param>
      <param name="e">イベント データ。</param>
      <returns>リスナーがイベントを処理した場合は <see langword="true" />。 リスナーが処理しないイベントに対してそのリスナーを登録した場合、WPF の <see cref="T:System.Windows.WeakEventManager" /> 処理ではエラーと見なされます。 ただし、リスナーが認識または処理しないイベントを受信した場合は、このメソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>ローカルで設定された依存関係プロパティのプロパティ識別子とプロパティ値を表します。</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>2 つの <see cref="T:System.Windows.LocalValueEntry" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Windows.LocalValueEntry" /> と比較する <see cref="T:System.Windows.LocalValueEntry" />。</param>
      <returns>
        <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> 実装は <see cref="P:System.Windows.LocalValueEntry.Property" /> の値を比較し、場合によっては、<see cref="P:System.Windows.LocalValueEntry.Value" /> の値を比較します。 <see cref="P:System.Windows.LocalValueEntry.Property" /> の <see cref="T:System.Windows.LocalValueEntry" /> コンポーネントは値型であるため、常にビット単位で比較されます。 <see cref="P:System.Windows.LocalValueEntry.Value" /> コンポーネントの場合は、値型であればビット単位の比較を使用します。 ローカルに設定されたプロパティが参照型を持つ場合は、この動作はその型の等価性判定機構まで保留されます。これは、2 つの値を比較する際に、== 演算子を内部的に使用するためです。 これは、既定では、値の参照が等しいことを表すため、<see cref="T:System.Windows.LocalValueEntry" /> 全体の等価性が参照等価性になります。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>この <see cref="T:System.Windows.LocalValueEntry" /> のハッシュ コードを返します。</summary>
      <returns>符号付き 32 ビット整数値。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>指定した <see cref="T:System.Windows.LocalValueEntry" /> インスタンスを比較し、それらが同一であるかどうかを判断します。</summary>
      <param name="obj1">比較する 1 番目のインスタンス。</param>
      <param name="obj2">比較する 2 番目のインスタンス。</param>
      <returns>
        <paramref name="obj1" />
        <see cref="T:System.Windows.LocalValueEntry" /> が <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>指定した <see cref="T:System.Windows.LocalValueEnumerator" /> インスタンスを比較し、それらが異なるかどうかを判断します。</summary>
      <param name="obj1">比較する 1 番目のインスタンス。</param>
      <param name="obj2">比較する 2 番目のインスタンス。</param>
      <returns>この実装は、<see cref="P:System.Windows.LocalValueEntry.Property" /> の値と <see cref="P:System.Windows.LocalValueEntry.Value" /> の <see cref="T:System.Windows.LocalValueEntry" /> コンポーネントを比較します。 <see cref="P:System.Windows.LocalValueEntry.Property" /> の <see cref="T:System.Windows.LocalValueEntry" /> コンポーネントは常に値型であるため、この比較は常にビット単位の比較になります。 <see cref="P:System.Windows.LocalValueEntry.Value" /> コンポーネントの場合は、値型であればビット単位の比較を使用します。
ローカルに設定されたプロパティが参照型を持つ場合は、この動作はその型の等価性判定機構まで保留されます。これは、2 つの値を比較する際に、<see langword="==" /> 演算子を内部的に使用するためです。 これは、既定では、値の参照が等しいことを表します。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>このエントリで表されるローカルに設定される依存関係プロパティの識別子を取得します。</summary>
      <returns>ローカルに設定される依存関係プロパティの識別子。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>ローカルに設定される依存関係プロパティの値を取得します。</summary>
      <returns>オブジェクトとしてローカルに設定される依存関係プロパティの値。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>
        <see cref="T:System.Windows.DependencyObject" /> に存在するすべての依存関係プロパティのローカル値に対して列挙処理のサポートを提供します。</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>コレクション内で表されている項目の数を取得します。</summary>
      <returns>コレクション内の項目数。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>コレクション内の現在の要素を取得します。</summary>
      <returns>コレクション内の現在の <see cref="T:System.Windows.LocalValueEntry" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Windows.LocalValueEnumerator" /> がこの <see cref="T:System.Windows.LocalValueEnumerator" /> と等しいかどうかを判断します。</summary>
      <param name="obj">現在の <see cref="T:System.Windows.LocalValueEnumerator" /> と比較する <see cref="T:System.Windows.LocalValueEnumerator" />。</param>
      <returns>指定した <see langword="true" /> が現在の <see cref="T:System.Windows.LocalValueEnumerator" /> と等しい場合は <see cref="T:System.Windows.LocalValueEnumerator" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>現在の <see cref="T:System.Windows.LocalValueEnumerator" /> のハッシュ コードを返します。</summary>
      <returns>32 ビット整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>列挙子をコレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>指定した 2 つの <see cref="T:System.Windows.LocalValueEnumerator" /> オブジェクトを比較し、同一かどうかを判断します。</summary>
      <param name="obj1">比較する最初のオブジェクト。</param>
      <param name="obj2">比較する 2 番目のオブジェクト。</param>
      <returns>
        <paramref name="obj1" />
        <see cref="T:System.Windows.LocalValueEnumerator" /> が <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>指定した 2 つの <see cref="T:System.Windows.LocalValueEnumerator" /> オブジェクトを比較し、それらが異なるかどうかを判断します。</summary>
      <param name="obj1">比較する最初のオブジェクト。</param>
      <param name="obj2">比較する 2 番目のオブジェクト。</param>
      <returns>インスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>このメンバーの説明については、<see cref="P:System.Collections.IEnumerator.Current" /> のトピックを参照してください。</summary>
      <returns>コレクション内の現在の要素。</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>プロパティをシリアル化する方法を指定します。</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>プロパティは属性としてシリアル化される必要があります。</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>プロパティのシリアル化フラグを指定します。</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>
        <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerSerializationOptions">プロパティをシリアル化する方法を指定します。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" /> は有効な <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 値ではありません。</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>属性に設定された <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> を取得します。</summary>
      <returns>シリアル化オプションを表す列挙体の値。</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>内部型の使用をサポートするために WPF XAML コンパイラによって内部で使用される抽象クラス。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.InternalTypeHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>派生 (生成された) クラスでオーバーライドされると、イベント ハンドラーのデリゲートを内部イベントに結合します。</summary>
      <param name="eventInfo">イベントのイベント情報 (CLR リフレクション情報)。</param>
      <param name="target">ハンドラーがアタッチされているターゲット。</param>
      <param name="handler">イベント ハンドラー。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>派生 (生成された) クラスでオーバーライドされると、非パブリックのハンドラー メソッドを参照するイベント デリゲートを作成します。</summary>
      <param name="delegateType">デリゲートの <see cref="T:System.Type" />。</param>
      <param name="target">ハンドラーがアタッチされているターゲット。</param>
      <param name="handler">ハンドラー実装の名前。</param>
      <returns>デリゲートの参照。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>派生 (生成された) クラスでオーバーライドされると、内部型のインスタンスを作成します。</summary>
      <param name="type">作成する <see cref="T:System.Type" />。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <returns>作成されたインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>派生 (生成された) クラスでオーバーライドされると、ターゲット オブジェクトの内部プロパティの値を取得します。</summary>
      <param name="propertyInfo">取得するプロパティのプロパティ情報。</param>
      <param name="target">目的のプロパティ値を保持するオブジェクト。</param>
      <param name="culture">カルチャ固有の情報。</param>
      <returns>プロパティの値。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>派生 (生成された) クラスでオーバーライドされると、ターゲット オブジェクトの内部プロパティの値を設定します。</summary>
      <param name="propertyInfo">設定するプロパティのプロパティ情報。</param>
      <param name="target">目的のプロパティ値を保持するオブジェクト。</param>
      <param name="value">設定する値。</param>
      <param name="culture">カルチャ固有の情報。</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>型によりマークアップ拡張機能から式 (または他のクラス) を受け取ることを宣言できる機構が用意されています。ここでは、出力はターゲット プロパティとは異なるプロパティの型になります。 .NET Framework 4 の実装には使用しないでください。</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>プロパティの値を提供するマークアップ拡張機能の処理を行います。 .NET Framework 4 の実装には使用しないでください。「<see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />」を参照してください。</summary>
      <param name="property">ターゲット プロパティの名前。</param>
      <param name="markupExtension">受信データのマークアップ拡張インスタンス。</param>
      <param name="serviceProvider">プロパティ値のマークアップ拡張データの処理時に実行する必要のある追加サービスが用意されています。</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>オブジェクトのツリー内を移動するのに使用できるオブジェクトを表す抽象クラス。</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Windows.Markup.ValueSerializer" /> クラスのルート コンテキストを割り当てます。</summary>
      <param name="context">ルート コンテキストの割り当て先の <see cref="T:System.Windows.Markup.IValueSerializerContext" />。</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> に関連付けられている属性を取得します。</summary>
      <returns>属性のコレクション。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> で表されるオブジェクトのインスタンスを取得します。</summary>
      <returns>オブジェクトのインスタンス。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> インスタンスの型を取得します。</summary>
      <returns>オブジェクトの型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>派生クラスでオーバーライドされると、XAML に書き込む必要があるこの <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> インスタンスのプロパティを取得します。</summary>
      <returns>プロパティ。</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>プロパティおよびその値へのアクセスをカプセル化するマークアップへの書き込み中に使用されるプロパティを記述する抽象クラス。</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> に関連付けられている属性を取得します。</summary>
      <returns>属性のコレクション。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>派生クラスでオーバーライドされると、プロパティが依存関係プロパティとして実装されている場合は、マークアップ プロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子を取得します。</summary>
      <returns>依存関係プロパティの識別子。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が添付 <see cref="T:System.Windows.DependencyProperty" /> であるかどうかを判断します。</summary>
      <returns>プロパティが添付 <see cref="T:System.Windows.DependencyProperty" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が複合プロパティであるかどうかを判断します。</summary>
      <returns>このプロパティが複合プロパティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> がコンストラクター引数を表すかどうかを判断します。</summary>
      <returns>このプロパティがコンストラクター引数を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> がコレクションの直接の内容を表すかどうかを判断します。</summary>
      <returns>プロパティが直接の内容を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>派生クラスでオーバーライドされると、項目をディクショナリに格納するために <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> で使用されるキーをこの <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> が表すかどうかを判断します。</summary>
      <returns>このプロパティがキーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>派生クラスでオーバーライドされると、プロパティのインスタンスを作成するために、またはコンストラクターを使用する必要がある場合に、型コンバーターに渡されるテキストをこの <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が表すかどうかを判断します。</summary>
      <returns>この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が文字列を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>派生クラスでオーバーライドされると、このプロパティの値を構成する項目を取得します。</summary>
      <returns>このプロパティの値を構成する項目。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>派生クラスでオーバーライドされると、診断およびエラー報告に使用される名前を取得します。</summary>
      <returns>識別子のプロパティ名。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>派生クラスでオーバーライドされると、マークアップ プロパティの <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns>プロパティ記述子。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>派生クラスでオーバーライドされると、プロパティの CLR 型を取得します。</summary>
      <returns>CLR 型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> の文字列値を取得します。</summary>
      <returns>文字列値。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が値を文字列としてシリアル化するときに参照する型のセットを取得します。</summary>
      <returns>型のセット。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> の現在の値を取得します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>サービスの追加を有効にするメソッドを含む <see cref="T:System.IServiceProvider" /> インターフェイスの実装を提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ServiceProviders" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>リストにサービスを追加します。</summary>
      <param name="serviceType">新しいサービスの型。</param>
      <param name="service">サービス実装クラス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> または <paramref name="service" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">このディクショナリに既に存在するサービスを追加しようとしました。</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>指定した型のサービス オブジェクトを取得します。</summary>
      <param name="serviceType">取得するサービス オブジェクトの型。</param>
      <returns>
        <paramref name="serviceType" /> 型のサービス実装。 <paramref name="serviceType" /> 型のサービスが格納されていない場合は、<see langword="null" /> である可能性があります。</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>指定した <see cref="T:System.String" /> から <see cref="T:System.Windows.Media.Matrix" /> のインスタンスへの変換が可能かどうかを判断します。</summary>
      <param name="value">変換のために評価する文字列。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>値を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value">変換のために評価する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が <see cref="T:System.Windows.Media.Int32Collection" /> ではないときに発生します。</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Media.Matrix" /> に変換します。</summary>
      <param name="value">
        <see cref="T:System.String" /> に変換する <see cref="T:System.Windows.Media.Matrix" /> 値。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>指定された <see cref="T:System.Windows.Media.Matrix" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換のために評価する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
      <param name="context">変換のために使用されるコンテキスト情報。</param>
      <returns>指定した <see cref="T:System.String" /> オブジェクトの <see cref="T:System.Windows.Media.Matrix" /> 表現。</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>WPF アプリケーションですべてのユーザー インターフェイス要素のドット/インチ (dpi) 対応を無効にできるようにします。</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>2-D 空間での変換に使用される 3 x 3 アフィン変換行列を表します。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="m11">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M11" /> 係数。</param>
      <param name="m12">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M12" /> 係数。</param>
      <param name="m21">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M21" /> 係数。</param>
      <param name="m22">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M22" /> 係数。</param>
      <param name="offsetX">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 係数。</param>
      <param name="offsetY">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 係数。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="matrix">この <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の行列式を取得します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> の行列式。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が、この <see cref="T:System.Windows.Media.Matrix" /> と同じ <see cref="T:System.Windows.Media.Matrix" /> 構造体であるかどうかを判断します。</summary>
      <param name="o">比較対象の <see cref="T:System.Object" />。</param>
      <returns>
        <paramref name="o" /> が、この <see cref="T:System.Windows.Media.Matrix" /> 構造体と同じ <see cref="T:System.Windows.Media.Matrix" /> 構造体の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体がこのインスタンスと同一であるかどうかを判断します。</summary>
      <param name="value">このインスタンスと比較する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
      <returns>インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が同一かどうかを判断します。</summary>
      <param name="matrix1">最初に比較する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="matrix2">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns>
        <paramref name="matrix1" /> と <paramref name="matrix2" /> が同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体のハッシュ コードを返します。</summary>
      <returns>対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体が反転可能かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Matrix" /> の逆が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>恒等 <see cref="T:System.Windows.Media.Matrix" /> を取得します。</summary>
      <returns>恒等行列。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体を反転します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Media.Matrix" /> 構造体は反転できません。</exception>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体が恒等行列かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.Media.Matrix" /> 構造体が恒等行列の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 1 行、第 1 列の値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> の第 1 行、第 1 列の値。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 1 行、第 2 列の値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> の第 1 行、第 2 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 1 列の値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> の第 2 行、第 1 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 2 列の値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 2 列の値。 既定値は 1 です。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> 構造体に別の <see cref="T:System.Windows.Media.Matrix" /> 構造体を乗算します。</summary>
      <param name="trans1">最初に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="trans2">2 番目に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns>
        <paramref name="trans1" /> と <paramref name="trans2" /> を乗算した結果。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 1 列の値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 1 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 2 列の値を取得または設定します。</summary>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 2 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が同一かどうかを判断します。</summary>
      <param name="matrix1">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="matrix2">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns>
        <paramref name="matrix1" /> と <paramref name="matrix2" /> が同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が異なるかどうかを判断します。</summary>
      <param name="matrix1">最初に比較する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="matrix2">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns>
        <paramref name="matrix1" /> と <paramref name="matrix2" /> が異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> 構造体に別の <see cref="T:System.Windows.Media.Matrix" /> 構造体を乗算します。</summary>
      <param name="trans1">最初に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="trans2">2 番目に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns>
        <paramref name="trans1" /> と <paramref name="trans2" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>行列の <see cref="T:System.String" /> 表現を、等価の <see cref="T:System.Windows.Media.Matrix" /> 構造体に変換します。</summary>
      <param name="source">行列の <see cref="T:System.String" /> 表現。</param>
      <returns>等価の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="matrix">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体の原点を中心とする指定した角度の回転を適用します。</summary>
      <param name="angle">回転角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>指定した点を中心にこの行列を回転します。</summary>
      <param name="angle">この行列を回転する角度。</param>
      <param name="centerX">この行列の回転の中心とする点の x 座標。</param>
      <param name="centerY">この行列の回転の中心とする点の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>指定した点における指定した角度の回転を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="angle">回転角度。</param>
      <param name="centerX">回転の中心の x 座標。</param>
      <param name="centerY">回転の中心の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>指定した角度の回転を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="angle">前に付加する回転角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>指定したスケールのベクターを <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="scaleX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってスケーリングする際に使用する値。</param>
      <param name="scaleY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってスケーリングする際に使用する値。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> を、指定した点を中心として指定した量だけスケーリングします。</summary>
      <param name="scaleX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってスケーリングする量。</param>
      <param name="scaleY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってスケーリングする量。</param>
      <param name="centerX">スケーリング操作の中心点の x 座標。</param>
      <param name="centerY">スケーリング操作の中心点の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> の指定した点を中心とする指定したスケールを前に付加します。</summary>
      <param name="scaleX">x 軸のスケール ファクター。</param>
      <param name="scaleY">y 軸のスケール ファクター。</param>
      <param name="centerX">スケーリング操作が実行される点の x 座標。</param>
      <param name="centerY">スケーリング操作が実行される点の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>指定したスケールのベクターをこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="scaleX">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を x 軸に沿ってスケーリングする際に使用する値。</param>
      <param name="scaleY">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を y 軸に沿ってスケーリングする際に使用する値。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>この <see cref="T:System.Windows.Media.Matrix" /> 構造体を恒等行列に変更します。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>x 次元と y 次元の指定した角度の傾斜を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="skewX">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の x 次元の角度。</param>
      <param name="skewY">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の y 次元の角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>x 次元と y 次元の指定した角度の傾斜を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="skewX">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の x 次元の角度。</param>
      <param name="skewY">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の y 次元の角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>指定した書式を使用して、現在のインスタンスの値に書式を付けます。</summary>
      <param name="format">使用する書式。

または -
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
      <param name="provider">値の書式付けに使用するプロバイダー。

または -
オペレーティング システムの現在のロケール設定から数値書式情報を取得する場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
      <returns>指定された書式での現在のインスタンスの値。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
      <returns>この <see cref="T:System.String" /> の <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、および <see cref="P:System.Windows.Media.Matrix.OffsetY" /> の各値を格納する <see cref="T:System.Windows.Media.Matrix" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>カルチャ固有の書式設定情報を使用して、この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
      <param name="provider">カルチャ固有の書式設定情報。</param>
      <returns>この <see cref="T:System.String" /> の <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、および <see cref="P:System.Windows.Media.Matrix.OffsetY" /> の各値を格納する <see cref="T:System.Windows.Media.Matrix" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>指定した点を <see cref="T:System.Windows.Media.Matrix" /> で変換し、その結果を返します。</summary>
      <param name="point">変換する点。</param>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> によって <paramref name="point" /> を変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>指定した点をこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="points">変換対象の点。 配列内の元の点は、変換後の値に置き換えられます。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>指定したベクターをこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="vector">変換するベクトル。</param>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> によって <paramref name="vector" /> を変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>指定したベクターをこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="vectors">変換するベクター。 配列内の元のベクターは、変換後の値に置き換えられます。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>指定したオフセットの変換をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="offsetX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってオフセットする量。</param>
      <param name="offsetY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってオフセットする量。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>指定したオフセットの変換をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="offsetX">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってオフセットする量。</param>
      <param name="offsetY">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってオフセットする量。</param>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>他の型のインスタンスと <see cref="T:System.Windows.Media.Matrix" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Media.MatrixConverter" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>特定の型のオブジェクトを <see cref="T:System.Windows.Media.Matrix" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報。</param>
      <param name="sourceType">評価対象となる変換元の型。</param>
      <returns>型を <see cref="T:System.Windows.Media.Matrix" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Media.Matrix" /> が変換元として評価されるときの変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトから <see cref="T:System.Windows.Media.Matrix" /> への変換を試みます。</summary>
      <param name="context">型のコンテキスト情報。</param>
      <param name="culture">変換対象の型の <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換されるオブジェクト。</param>
      <returns>
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Media.Matrix" />。</returns>
      <exception cref="T:System.NotSupportedException">指定したオブジェクトが null であるか、または <see cref="T:System.Windows.Media.Matrix" /> に変換できない型です。</exception>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> から指定した型への変換を試みます。</summary>
      <param name="context">型のコンテキスト情報。</param>
      <param name="culture">変換対象の型の <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">変換対象の <see cref="T:System.Windows.Media.Matrix" />。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Media.Matrix" /> の変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Media.Matrix" /> の変換によって作成されたオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> が null であるか、または <see cref="T:System.Windows.Media.Matrix" /> ではありません。または <paramref name="destinationType" /> が有効な変換型ではありません。</exception>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary>
        <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> クラスでサポートされている書式設定メソッドを定義します。</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary>GDI と互換性のあるフォント メトリックを使用して、<see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> がテキストをレイアウトすることを示します。</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary>適切なフォント メトリックを使用して、<see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> がテキストをレイアウトすることを示します。</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>名前とオブジェクトのマッピングを特定の XAML 名前スコープに格納するか、特定の XAML 名前スコープから取得する <see cref="T:System.Windows.Markup.INameScope" /> メソッドの基本 WPF サポートを実装します。 XAML 名前スコープの名前を要素レベルで動的に取得または設定しやすくするために、添付プロパティのサポートを追加します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>
        <see cref="T:System.Windows.NameScope" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>項目をコレクションに追加します。</summary>
      <param name="item">XAML 名前スコープに追加する名前のマッピングを表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (キーは <see cref="T:System.String" />、値は <see cref="T:System.Object" />)。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> のいずれかまたは両方のコンポーネントが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>項目をコレクションに追加します。</summary>
      <param name="key">追加する XAML 名前スコープ マッピングの名前である文字列キー。</param>
      <param name="value">追加する XAML 名前スコープ マッピングのオブジェクト参照であるオブジェクト値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>指定された項目がコレクションに含まれているかどうかを確認します。</summary>
      <param name="item">コレクション内で検索する項目。<see cref="T:System.Collections.Generic.KeyValuePair`2" /> として指定します (キーは <see cref="T:System.String" />、値は <see cref="T:System.Object" />)。</param>
      <returns>指定した <see cref="T:System.Collections.Generic.KeyValuePair`2" /> がこの <see cref="T:System.Windows.NameScope" /> 内の既存のマッピングを識別する場合は <see langword="true" />。 指定した <see cref="T:System.Collections.Generic.KeyValuePair`2" /> が現在の <see cref="T:System.Windows.NameScope" /> に存在しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>指定した名前がこの <see cref="T:System.Windows.NameScope" /> に存在するかどうかを示す値を返します。</summary>
      <param name="key">検索する文字列キー。</param>
      <returns>指定した <paramref name="key" /> がこの <see cref="T:System.Windows.NameScope" /> 内の既存のマッピングの名前を識別する場合は <see langword="true" />。 指定した <paramref name="key" /> が現在の <see cref="T:System.Windows.NameScope" /> に存在しない場合は <see langword="false" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array">コレクションから要素がコピーされる先の 1 次元配列。配列のインデックス番号は 0 から始まっている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>この <see cref="T:System.Windows.NameScope" /> 内の、マップされた名前のコレクションに含まれる項目の数を返します。</summary>
      <returns>コレクション内の項目数。</returns>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>この <see cref="T:System.Windows.NameScope" /> によって保守され、提供された名前文字列に基づいている XAML 名前スコープの対応するオブジェクトを返します。</summary>
      <param name="name">オブジェクト部分を取得する既存のマッピングの名前部分です。</param>
      <returns>
        <paramref name="name" /> でマップされる要求したオブジェクト。 <paramref name="name" /> が <see langword="null" /> または空の文字列として提供された場合、または一致するオブジェクトが見つからなかった場合に、<see langword="null" /> が返されることがあります。</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>
        <see cref="P:System.Windows.NameScope.NameScope" /> 添付プロパティの添付プロパティ get アクセサーを提供します。</summary>
      <param name="dependencyObject">XAML 名前スコープの取得元オブジェクト。</param>
      <returns>
        <see cref="T:System.Windows.Markup.INameScope" /> インスタンスとしての XAML 名前スコープ。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>指定したキーを持つ項目を取得または設定します。</summary>
      <param name="key">取得または設定する XAML 名前マッピングの名前文字列。</param>
      <returns>
        <paramref name="key" /> として指定された XAML 名に対応付けられるオブジェクトの値。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> は <see langword="null" /> として提供されます。

または -
<paramref name="value" /> は、設定操作に対して <see langword="null" /> として提供されます。</exception>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>
        <see cref="T:System.Windows.NameScope" /> ディクショナリのキーのコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Windows.NameScope" /> ディクショナリのキーのコレクション。</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>動的にアタッチされた <see cref="T:System.Windows.NameScope" /> インスタンスを取得または設定します。</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>
        <see cref="P:System.Windows.NameScope.NameScope" /> 添付プロパティを識別します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>現在の XAML 名前スコープに新しい名前とオブジェクトのペアを登録します。</summary>
      <param name="name">指定したオブジェクトのマッピングに使用する名前。</param>
      <param name="scopedElement">指定された名前にマップするオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> または <paramref name="scopedElement" /> は <see langword="null" /> として指定されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> は空の文字列として指定されました。

または -
指定された <paramref name="name" /> は、XAML 名として無効な文字が含まれているため、パーサーによって拒否されました
または -
指定された <paramref name="name" /> によって、重複する名前が登録されます。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>特定のオブジェクトをコレクションから削除します。</summary>
      <param name="item">コレクションから削除するオブジェクト。<see cref="T:System.Collections.Generic.KeyValuePair`2" /> として指定します (キーは <see cref="T:System.String" />、値は <see cref="T:System.Object" />)。</param>
      <returns>コレクションから項目が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 項目がコレクション内に見つからなかった場合も <see langword="false" /> が返されます。</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>指定した名前のマッピングをコレクションから削除します。</summary>
      <param name="key">削除する XAML 名前スコープ マッピングの名前である文字列キー。</param>
      <returns>コレクションから項目が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 項目がコレクション内に見つからなかった場合も <see langword="false" /> が返されます。</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>
        <see cref="P:System.Windows.NameScope.NameScope" /> 添付プロパティの添付プロパティ set アクセサーを提供します。</summary>
      <param name="dependencyObject">XAML 名前スコープを変更する対象のオブジェクト。</param>
      <param name="value">インターフェイスのキャストを使用した新しい XAML 名前スコープ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>指定したキーに関連付けられている値を取得します。</summary>
      <param name="key">取得する値のキー。</param>
      <param name="value">このメソッドから制御が戻るとき、指定されたキーが見つかった場合は、そのキーに関連付けられている値が格納されます。それ以外の場合は null オブジェクトになります。 このパラメーターは初期化せずに渡されます。</param>
      <returns>
        <paramref name="key" /> として指定された名前のマッピングが <see cref="T:System.Windows.NameScope" /> に存在する場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>XAML 名前スコープから名前とオブジェクトのマッピングを削除します。</summary>
      <param name="name">削除するマッピングの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> は空の文字列として指定されました。

または -
指定した <paramref name="name" /> は登録されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>
        <see cref="T:System.Windows.NameScope" /> ディクショナリの値のコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Windows.NameScope" /> ディクショナリの値のコレクション。</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>2 次元空間における、x 座標と y 座標の組を表します。</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>指定した座標を含む新しい <see cref="T:System.Windows.Point" /> 構造体を作成します。</summary>
      <param name="x">新しい <see cref="T:System.Windows.Point" /> 構造体の x 座標。</param>
      <param name="y">新しい <see cref="T:System.Windows.Point" /> 構造体の y 座標。</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>
        <see cref="T:System.Windows.Vector" /> を <see cref="T:System.Windows.Point" /> に加算し、その結果を <see cref="T:System.Windows.Point" /> 構造体として返します。</summary>
      <param name="point">加算する <see cref="T:System.Windows.Point" /> 構造体。</param>
      <param name="vector">加算する <see cref="T:System.Windows.Vector" /> 構造体。</param>
      <returns>
        <paramref name="point" /> と <paramref name="vector" /> の合計を返します。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が <see cref="T:System.Windows.Point" /> であり、この <see cref="T:System.Windows.Point" /> と同じ座標を含んでいるかどうかを判断します。</summary>
      <param name="o">比較対象の <see cref="T:System.Object" />。</param>
      <returns>
        <paramref name="o" /> が <see cref="T:System.Windows.Point" /> であり、この <see cref="P:System.Windows.Point.X" /> と同じ <see cref="P:System.Windows.Point.Y" /> 値と <see cref="T:System.Windows.Point" /> 値を含んでいる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>2 つの <see cref="T:System.Windows.Point" /> 構造体を比較して、等しいかどうかを確認します。</summary>
      <param name="value">このインスタンスと比較するポイント。</param>
      <returns>両方の <see cref="T:System.Windows.Point" /> 構造体が同じ <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Point.Y" /> 値を含む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>2 つの <see cref="T:System.Windows.Point" /> 構造体を比較して、等しいかどうかを確認します。</summary>
      <param name="point1">最初に比較するポイント。</param>
      <param name="point2">2 番目に比較するポイント。</param>
      <returns>
        <paramref name="point1" /> と <paramref name="point2" /> が同じ <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Point.Y" /> 値を含む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>この <see cref="T:System.Windows.Point" /> のハッシュ コードを返します。</summary>
      <returns>この <see cref="T:System.Windows.Point" /> 構造体のハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>指定した <see cref="T:System.Windows.Point" /> 構造体を、指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体で変換します。</summary>
      <param name="point">変換する点。</param>
      <param name="matrix">変換行列。</param>
      <returns>変換されたポイント。</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>ポイントの <see cref="P:System.Windows.Point.X" /> 座標と <see cref="P:System.Windows.Point.Y" /> 座標を、指定した量だけオフセットします。</summary>
      <param name="offsetX">ポイントの <see cref="P:System.Windows.Point.X" /> 座標をオフセットする量。</param>
      <param name="offsetY">ポイントの <see cref="P:System.Windows.Point.Y" /> 座標をオフセットする量。</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>指定した <see cref="T:System.Windows.Point" /> を指定した <see cref="T:System.Windows.Vector" /> で変換し、その結果を返します。</summary>
      <param name="point">変換対象のポイント。</param>
      <param name="vector">
        <paramref name="point" /> を変換する量。</param>
      <returns>指定したポイントを指定したベクターで変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>2 つの <see cref="T:System.Windows.Point" /> 構造体を比較して、等しいかどうかを確認します。</summary>
      <param name="point1">最初に比較する <see cref="T:System.Windows.Point" /> 構造体。</param>
      <param name="point2">比較する 2 番目の <see cref="T:System.Windows.Point" /> 構造体。</param>
      <returns>
        <paramref name="point1" /> および <paramref name="point2" /> の <see cref="P:System.Windows.Point.X" /> 座標と <see cref="P:System.Windows.Point.Y" /> 座標が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>このポイントの <see cref="T:System.Windows.Size" /> 値と等しい <see cref="P:System.Windows.Size.Width" /> と、このポイントの <see cref="P:System.Windows.Point.X" /> 値と等しい <see cref="P:System.Windows.Size.Height" /> を持つ <see cref="P:System.Windows.Point.Y" /> 構造体を作成します。</summary>
      <param name="point">変換対象の点。</param>
      <returns>このポイントの <see cref="T:System.Windows.Size" /> 値と等しい <see cref="P:System.Windows.Size.Width" /> と、このポイントの <see cref="P:System.Windows.Point.X" /> 値と等しい <see cref="P:System.Windows.Size.Height" /> を持つ <see cref="P:System.Windows.Point.Y" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>ポイントの <see cref="T:System.Windows.Vector" /> 値と等しい <see cref="P:System.Windows.Vector.X" /> 値と、ポイントの <see cref="P:System.Windows.Point.X" /> 値と等しい <see cref="P:System.Windows.Vector.Y" /> 値を持つ <see cref="P:System.Windows.Point.Y" /> 構造体を作成します。</summary>
      <param name="point">変換対象の点。</param>
      <returns>ポイントの <see cref="P:System.Windows.Vector.X" /> 値と等しい <see cref="P:System.Windows.Point.X" /> 値と、ポイントの <see cref="P:System.Windows.Vector.Y" /> 値と等しい <see cref="P:System.Windows.Point.Y" /> 値を持つベクター。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>2 つの <see cref="T:System.Windows.Point" /> 構造体を比較し、等しくないかどうかを確認します。</summary>
      <param name="point1">最初に比較するポイント。</param>
      <param name="point2">2 番目に比較するポイント。</param>
      <returns>
        <paramref name="point1" /> と <paramref name="point2" /> の <see cref="P:System.Windows.Point.X" /> 座標または <see cref="P:System.Windows.Point.Y" /> 座標が異なる場合は <see langword="true" />。<paramref name="point1" /> と <paramref name="point2" /> の <see cref="P:System.Windows.Point.X" /> 座標と <see cref="P:System.Windows.Point.Y" /> 座標が同じ場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>指定した <see cref="T:System.Windows.Point" /> を指定した <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="point">変換する点。</param>
      <param name="matrix">変換行列。</param>
      <returns>指定したポイントを指定した行列を使用して変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>指定した <see cref="T:System.Windows.Point" /> を、指定した別の <see cref="T:System.Windows.Point" /> から減算し、その差を <see cref="T:System.Windows.Vector" /> として返します。</summary>
      <param name="point1">
        <paramref name="point2" /> を減算するポイント。</param>
      <param name="point2">
        <paramref name="point1" /> から減算するポイント。</param>
      <returns>
        <paramref name="point1" /> と <paramref name="point2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>指定した <see cref="T:System.Windows.Vector" /> を指定した <see cref="T:System.Windows.Point" /> から減算し、結果の <see cref="T:System.Windows.Point" /> を返します。</summary>
      <param name="point">
        <paramref name="vector" /> を減算するポイント。</param>
      <param name="vector">
        <paramref name="point1" /> から減算するベクター。</param>
      <returns>
        <paramref name="point" /> と <paramref name="vector" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>指定した <see cref="T:System.Windows.Point" /> から <see cref="T:System.String" /> を構築します。</summary>
      <param name="source">ポイントの文字列表現。</param>
      <returns>等価の <see cref="T:System.Windows.Point" /> 構造体。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="source" /> がコンマまたはスペースで区切られた 2 つの Double 値で構成されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に 2 つの数値が含まれていません。
または
<paramref name="source" /> に含まれている区切り記号が多すぎます。</exception>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>指定した <see cref="T:System.Windows.Point" /> を、指定した別の <see cref="T:System.Windows.Point" /> から減算し、その差を <see cref="T:System.Windows.Vector" /> として返します。</summary>
      <param name="point1">
        <paramref name="point2" /> を減算するポイント。</param>
      <param name="point2">
        <paramref name="point1" /> から減算するポイント。</param>
      <returns>
        <paramref name="point1" /> と <paramref name="point2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>指定した <see cref="T:System.Windows.Vector" /> を指定した <see cref="T:System.Windows.Point" /> から減算し、結果の <see cref="T:System.Windows.Point" /> を返します。</summary>
      <param name="point">
        <paramref name="vector" /> を減算するポイント。</param>
      <param name="vector">
        <paramref name="vector" /> から減算する <paramref name="point" />。</param>
      <returns>
        <paramref name="point" /> と <paramref name="vector" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。 このメンバーの詳細については、「<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />」をご覧ください。</summary>
      <param name="format">使用する書式を指定する文字列。

または -
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、<see langword="null" />。</param>
      <param name="provider">値の書式付けに使用する <see langword="IFormatProvider" />。

または -
オペレーティング システムの現在のロケール設定から数値の書式情報を取得する場合は <see langword="null" />。</param>
      <returns>指定した書式で現在のインスタンスの値が格納されている文字列。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>この <see cref="T:System.String" /> の <see cref="T:System.Windows.Point" /> 表現を作成します。</summary>
      <returns>この <see cref="T:System.String" /> 構造体の <see cref="P:System.Windows.Point.X" /> 値および <see cref="P:System.Windows.Point.Y" /> 値を格納する <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>この <see cref="T:System.String" /> の <see cref="T:System.Windows.Point" /> 表現を作成します。</summary>
      <param name="provider">カルチャ固有の書式設定情報。</param>
      <returns>この <see cref="T:System.String" /> 構造体の <see cref="P:System.Windows.Point.X" /> 値および <see cref="P:System.Windows.Point.Y" /> 値を格納する <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>この <see cref="P:System.Windows.Point.X" /> 構造体の <see cref="T:System.Windows.Point" /> 座標値を取得または設定します。</summary>
      <returns>この <see cref="P:System.Windows.Point.X" /> 構造体の <see cref="T:System.Windows.Point" /> 座標値。  既定値は<c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>この <see cref="P:System.Windows.Point.Y" /> の <see cref="T:System.Windows.Point" /> 座標値を取得または設定します。</summary>
      <returns>この <see cref="P:System.Windows.Point.Y" /> 構造体の <see cref="T:System.Windows.Point" /> 座標値。  既定値は<c>0</c>です。</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>他の型のインスタンスと <see cref="T:System.Windows.Point" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.PointConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型のオブジェクトを <see cref="T:System.Windows.Point" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="sourceType">評価対象となる変換元の型。</param>
      <returns>型を <see cref="T:System.Windows.Point" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Point" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Point" /> が変換元として評価されるときの変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Point" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトから <see cref="T:System.Windows.Point" /> への変換を試みます。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重するカルチャ情報。</param>
      <param name="value">変換されるオブジェクト。</param>
      <returns>
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Point" />。</returns>
      <exception cref="T:System.NotSupportedException">指定したオブジェクトが NULL であるか、<see cref="T:System.Windows.Point" /> に変換できない型である場合にスローされます。</exception>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Point" /> から指定した型への変換を試みます。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重するカルチャ情報。</param>
      <param name="value">変換対象の <see cref="T:System.Windows.Point" />。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Point" /> の変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Point" /> の変換によって作成されたオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> が <see langword="null" /> であるか、<see cref="T:System.Windows.Point" /> でない場合、または <paramref name="destinationType" /> が変換先の有効な型ではない場合にスローされます。</exception>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>依存関係プロパティの有効なプロパティ値が変更されたときに呼び出されるコールバックを表します。</summary>
      <param name="d">プロパティの値が変更された <see cref="T:System.Windows.DependencyObject" />。</param>
      <param name="e">このプロパティの有効値に対する変更を追跡するイベントによって発行されるイベント データ。</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>登録時の条件など、特定の種類に適用されるときの依存関係プロパティの動作を定義します。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>
        <see cref="T:System.Windows.PropertyMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>メタデータが適用される依存関係プロパティの指定した既定値を使用して、<see cref="T:System.Windows.PropertyMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultValue">依存関係プロパティに指定する既定値。通常、特定の型の値として指定されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> は値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>指定した既定値と <see cref="T:System.Windows.PropertyMetadata" /> 実装参照を使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultValue">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</param>
      <param name="propertyChangedCallback">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> は値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>指定した既定値とコールバックを使用して、<see cref="T:System.Windows.PropertyMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultValue">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</param>
      <param name="propertyChangedCallback">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照です。</param>
      <param name="coerceValueCallback">プロパティ システムがこのプロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照です。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" /> は値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>指定した <see cref="T:System.Windows.PropertyMetadata" /> 実装参照を使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyChangedCallback">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照です。</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>このメタデータに指定されている <see cref="T:System.Windows.CoerceValueCallback" /> 実装への参照を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Windows.CoerceValueCallback" /> 実装参照。</returns>
      <exception cref="T:System.InvalidOperationException">依存関係プロパティの操作にいったん適用した後は、メタデータのプロパティを設定できません。</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>依存関係プロパティの既定値を取得または設定します。</summary>
      <returns>プロパティの既定値。 パラメーターなしのコンストラクター <see cref="T:System.Windows.PropertyMetadata" /><see cref="F:System.Windows.DependencyProperty.UnsetValue" />を使用して作成されたインスタンスの既定値は、になります。</returns>
      <exception cref="T:System.ArgumentException">いったん作成した後は、値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
      <exception cref="T:System.InvalidOperationException">依存関係プロパティの操作にいったん適用した後は、メタデータのプロパティを設定できません。</exception>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>メタデータが何らかの方法でプロパティに適用されていて、該当のメタデータ インスタンスが不変の状態にあるかどうかを判断する値を取得します。</summary>
      <returns>メタデータ インスタンスが不変の状態の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>このメタデータと基本メタデータをマージします。</summary>
      <param name="baseMetadata">このインスタンスの値とマージする基本メタデータ。</param>
      <param name="dp">このメタデータが適用される依存関係プロパティ。</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>このメタデータがプロパティに適用されたときに呼び出され、メタデータがシールされることを示します。</summary>
      <param name="dp">メタデータが適用された依存関係プロパティ。</param>
      <param name="targetType">該当するメタデータが型固有のメタデータの場合、このメタデータに関連付けられている型。 これが既定のメタデータの場合、この値は null 参照です。</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>このメタデータに指定されている <see cref="T:System.Windows.PropertyChangedCallback" /> 実装への参照を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Windows.PropertyChangedCallback" /> 実装参照。</returns>
      <exception cref="T:System.InvalidOperationException">依存関係プロパティの操作にいったん適用した後は、メタデータのプロパティを設定できません。</exception>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>四角形の幅、高さ、場所を記述します。</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>指定した x 座標、y 座標、幅、および高さを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="x">四角形の左上隅の X 座標。</param>
      <param name="y">四角形の左上隅の y 座標。</param>
      <param name="width">四角形の幅。</param>
      <param name="height">四角形の高さ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" /> は負の値です。

または -
<paramref name="height" /> は負の値です。</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>指定した 2 つの点をちょうど格納できる大きさを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="point1">新しい四角形に格納する必要がある最初の点。</param>
      <param name="point2">新しい四角形に格納する必要がある 2 番目の点。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>指定した左上隅の位置および指定した幅と高さを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="location">四角形の左上隅の場所を指定する点。</param>
      <param name="size">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>指定した点および指定した点とベクターの和をちょうど格納できる大きさを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="point">四角形に格納する必要がある最初の点。</param>
      <param name="vector">指定した点をオフセットする量。 結果として得られる四角形は、2 つの点をちょうど格納できる大きさになります。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>指定したサイズを持ち、座標 (0,0) に位置する <see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="size">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</param>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>四角形の底辺の y 軸の値を取得します。</summary>
      <returns>四角形の底辺の y 軸の値。 四角形が空の場合、値は <see cref="F:System.Double.NegativeInfinity" /> になります。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>四角形の左下隅の位置を取得します。</summary>
      <returns>四角形の左下隅の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>四角形の右下隅の位置を取得します。</summary>
      <returns>四角形の右下隅の位置。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>指定した x 座標と y 座標が、四角形に含まれているかどうかを示します。</summary>
      <param name="x">確認対象の点の x 座標。</param>
      <param name="y">確認対象の点の y 座標。</param>
      <returns>(<paramref name="x" />,<paramref name="y" />) の座標が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>四角形に指定した点が含まれているかどうかを示します。</summary>
      <param name="point">確認対象の点。</param>
      <returns>指定した点が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>指定した四角形が、四角形に含まれているかどうかを示します。</summary>
      <param name="rect">確認対象の四角形。</param>
      <returns>
        <paramref name="rect" /> 全体が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>位置や領域を持たない四角形を表す特殊な値を取得します。</summary>
      <returns>
        <see cref="P:System.Windows.Rect.X" /> の <see cref="P:System.Windows.Rect.Y" /> および <see cref="F:System.Double.PositiveInfinity" /> 値を持ち、<see cref="P:System.Windows.Rect.Width" /> の <see cref="P:System.Windows.Rect.Height" /> および <see cref="F:System.Double.NegativeInfinity" /> 値を持つ空の四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>指定したオブジェクトが現在の四角形と等しいかどうかを示します。</summary>
      <param name="o">現在の四角形と比較するオブジェクト。</param>
      <returns>
        <paramref name="o" /> が <see cref="T:System.Windows.Rect" /> で、現在の四角形と同じ <see cref="P:System.Windows.Rect.Location" /> および <see cref="P:System.Windows.Rect.Size" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>指定した四角形が現在の四角形と等しいかどうかを示します。</summary>
      <param name="value">現在の四角形と比較する対象の四角形。</param>
      <returns>指定した四角形が現在の四角形と同じ <see cref="P:System.Windows.Rect.Location" /> および <see cref="P:System.Windows.Rect.Size" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>指定した四角形が等しいかどうかを示します。</summary>
      <param name="rect1">最初に比較する四角形。</param>
      <param name="rect2">2 番目に比較する四角形。</param>
      <returns>四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>四角形のハッシュ コードを作成します。</summary>
      <returns>現在の <see cref="T:System.Windows.Rect" /> 構造体のハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>四角形の高さを取得または設定します。</summary>
      <returns>四角形の高さを表す正の値。 既定値は 0 です。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" /> に負の数が設定されています。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>すべての方向に、指定した幅および高さの量を使用して四角形を拡大または縮小します。</summary>
      <param name="width">四角形の左辺と右辺を拡大または縮小する量。</param>
      <param name="height">四角形の上辺と底辺を拡大または縮小する量。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>指定した四角形を、すべての方向に指定した幅および高さの量だけ拡大または縮小した四角形を作成します。</summary>
      <param name="rect">変更する対象の <see cref="T:System.Windows.Rect" /> 構造体。</param>
      <param name="width">四角形の左辺と右辺を拡大または縮小する量。</param>
      <param name="height">四角形の上辺と底辺を拡大または縮小する量。</param>
      <returns>結果として得られる四角形。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形です。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>指定した四角形を、すべての方向に指定した <see cref="T:System.Windows.Size" /> だけ拡大した四角形を返します。</summary>
      <param name="rect">変更する対象の <see cref="T:System.Windows.Rect" /> 構造体。</param>
      <param name="size">四角形を拡大する量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Width" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Left" /> プロパティと <see cref="P:System.Windows.Rect.Right" /> プロパティの増分量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Height" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Top" /> プロパティと <see cref="P:System.Windows.Rect.Bottom" /> プロパティの増分量を指定します。</param>
      <returns>結果として得られる四角形。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形です。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>すべての方向に、指定した <see cref="T:System.Windows.Size" /> を使用して四角形を拡大します。</summary>
      <param name="size">四角形を拡大する量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Width" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Left" /> プロパティと <see cref="P:System.Windows.Rect.Right" /> プロパティの増分量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Height" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Top" /> プロパティと <see cref="P:System.Windows.Rect.Bottom" /> プロパティの増分量を指定します。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>現在の四角形と指定した四角形の交差部分を求め、結果を現在の四角形として保存します。</summary>
      <param name="rect">現在の四角形と交差する四角形。</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>指定した四角形の交差部分を返します。</summary>
      <param name="rect1">最初に比較する四角形。</param>
      <param name="rect2">2 番目に比較する四角形。</param>
      <returns>2 つの四角形が交差する場合はその交差部分。交差しない場合は <see cref="P:System.Windows.Rect.Empty" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>指定した四角形が、現在の四角形と交差するかどうかを示します。</summary>
      <param name="rect">確認対象の四角形。</param>
      <returns>指定した四角形が現在の四角形と交差する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>四角形が <see cref="P:System.Windows.Rect.Empty" /> の四角形かどうかを示す値を取得します。</summary>
      <returns>四角形が <see cref="P:System.Windows.Rect.Empty" /> の四角形の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>四角形の左辺の x 軸の値を取得します。</summary>
      <returns>四角形の左辺の x 軸の値。</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>四角形の左上隅の位置を取得または設定します。</summary>
      <returns>四角形の左上隅の位置。 既定値は (0, 0) です。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>四角形を水平方向および垂直方向に指定した量だけ移動します。</summary>
      <param name="offsetX">四角形の水平方向の移動量。</param>
      <param name="offsetY">四角形の垂直方向の移動量。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>指定した水平方向および垂直後方の量を使用して、指定した四角形からのオフセットである四角形を返します。</summary>
      <param name="rect">移動対象の四角形。</param>
      <param name="offsetX">新しい四角形の水平方向のオフセット。</param>
      <param name="offsetY">新しい四角形の垂直方向のオフセット。</param>
      <returns>結果として得られる四角形。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> が <see cref="P:System.Windows.Rect.Empty" /> です。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>指定したベクターを使用して、指定した四角形からのオフセットである四角形を返します。</summary>
      <param name="rect">元の四角形。</param>
      <param name="offsetVector">新しい四角形の水平方向および垂直方向のオフセットを指定するベクター。</param>
      <returns>結果として得られる四角形。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" /> が <see cref="P:System.Windows.Rect.Empty" /> です。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>指定したベクターだけ四角形を移動します。</summary>
      <param name="offsetVector">四角形を水平方向および垂直方向に移動する量を指定するベクター。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>2 つの四角形を比較し、完全に等しいかどうかを判断します。</summary>
      <param name="rect1">最初に比較する四角形。</param>
      <param name="rect2">2 番目に比較する四角形。</param>
      <returns>四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>2 つの四角形を比較し、等しくないかどうかを判断します。</summary>
      <param name="rect1">最初に比較する四角形。</param>
      <param name="rect2">2 番目に比較する四角形。</param>
      <returns>四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持たない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>指定した文字列形式から新しい四角形を作成します。</summary>
      <param name="source">"x, y, width, height" の形式の四角形の文字列形式。</param>
      <returns>結果として得られる四角形。</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>四角形の右辺の x 軸の値を取得します。</summary>
      <returns>四角形の右辺の x 軸の値。</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>現在の四角形のサイズと指定した x および y の値を乗算します。</summary>
      <param name="scaleX">x 方向のスケール ファクター。</param>
      <param name="scaleY">y 方向のスケール ファクター。</param>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>四角形の幅および高さを取得または設定します。</summary>
      <returns>四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
      <param name="format">使用する書式。

または -
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
      <param name="provider">値の書式付けに使用するプロバイダー。

または -
オペレーティング システムの現在のロケール設定から数値書式情報を取得する場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />)。</param>
      <returns>四角形の文字列形式。</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>四角形の上辺の y 軸の位置を取得します。</summary>
      <returns>四角形の上辺の y 軸の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>四角形の左上隅の位置を取得します。</summary>
      <returns>四角形の左上隅の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>四角形の右上隅の位置を取得します。</summary>
      <returns>四角形の右上隅の位置。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>四角形の文字列形式を返します。</summary>
      <returns>現在の四角形の文字列形式。 文字列は、"<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />" の形式になります。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>指定した書式プロバイダーを使用して、四角形の文字列形式を返します。</summary>
      <param name="provider">カルチャ固有の書式設定情報。</param>
      <returns>指定した書式プロバイダーにより決定される現在の四角形の文字列形式を返します。</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>指定した行列を適用して四角形を変換します。</summary>
      <param name="matrix">適用する変換を指定する行列。</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>指定した四角形に指定した行列を適用した四角形を返します。</summary>
      <param name="rect">変換の基盤となる四角形。</param>
      <param name="matrix">適用する変換を指定する行列。</param>
      <returns>操作の結果生成される四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>指定した点をちょうど格納できる大きさになるように、現在の四角形を拡大します。</summary>
      <param name="point">格納対象の点。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>指定した四角形をちょうど格納できる大きさになるように、現在の四角形を拡大します。</summary>
      <param name="rect">格納する四角形。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>指定した四角形と指定した点をちょうど格納できる大きさの四角形を作成します。</summary>
      <param name="rect">格納する四角形。</param>
      <param name="point">格納対象の点。</param>
      <returns>指定した四角形と指定した点をちょうど格納できる大きさの四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>指定した 2 つの四角形をちょうど格納できる大きさの四角形を作成します。</summary>
      <param name="rect1">最初に格納する四角形。</param>
      <param name="rect2">2 番目に格納する四角形。</param>
      <returns>結果として得られる四角形。</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>四角形の幅を取得または設定します。</summary>
      <returns>四角形の幅を表す正の値。 既定値は 0 です。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" /> に負の数が設定されています。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>四角形の左辺の x 軸の値を取得または設定します。</summary>
      <returns>四角形の左辺の x 軸の値。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>四角形の上辺の y 軸の値を取得または設定します。</summary>
      <returns>四角形の上辺の y 軸の値。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>
        <see cref="T:System.Windows.Rect" /> のインスタンスとその他の型の間で変換します。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.RectConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型のオブジェクトを <see cref="T:System.Windows.Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="sourceType">評価対象となる変換元の型。</param>
      <returns>型を <see cref="T:System.Windows.Rect" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Rect" /> を、指定した型に変換できるかどうかを判断します。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Rect" /> が変換元として評価されるときの変換先の型。</param>
      <returns>
        <see cref="T:System.Windows.Rect" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトから <see cref="T:System.Windows.Rect" /> への変換を試みます。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重するカルチャ情報。</param>
      <param name="value">変換されるオブジェクト。</param>
      <returns>
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Rect" />。</returns>
      <exception cref="T:System.NotSupportedException">指定したオブジェクトが NULL であるか、<see cref="T:System.Windows.Rect" /> に変換できない型である場合にスローされます。</exception>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Rect" /> の指定した型への変換を試みます。</summary>
      <param name="context">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重するカルチャ情報。</param>
      <param name="value">変換対象の <see cref="T:System.Windows.Rect" />。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Rect" /> の変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Rect" /> の変換によって作成されたオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> は <see langword="null" />です。

または -
<paramref name="value" /> が <see cref="T:System.Windows.Rect" /> ではありません。

または
<paramref name="destinationType" /> が、変換先の有効な型ではありません。</exception>
    </member>
    <member name="T:System.Windows.Size">
      <summary>
        <see cref="T:System.Windows.Size" /> オブジェクトの記述に使用される構造体を実装します。</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Size" /> 構造体の新しいインスタンスを初期化し、<paramref name="width" /> および <paramref name="height" /> の初期値を割り当てます。</summary>
      <param name="width">
        <see cref="T:System.Windows.Size" /> のインスタンスの初期幅。</param>
      <param name="height">
        <see cref="T:System.Windows.Size" /> のインスタンスの初期高さ。</param>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>静的で空の <see cref="T:System.Windows.Size" /> を表す値を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> の空のインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>オブジェクトが <see cref="T:System.Windows.Size" /> のインスタンスと等価であるかどうかを比較します。</summary>
      <param name="o">比較対象の <see cref="T:System.Object" />。</param>
      <returns>サイズが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>値が <see cref="T:System.Windows.Size" /> のインスタンスと等しいかどうかを比較します。</summary>
      <param name="value">
        <see cref="T:System.Windows.Size" /> の現在のインスタンスと比較するサイズ。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> のインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスを比較し、等しいかどうかを確認します。</summary>
      <param name="size1">比較対象の <see cref="T:System.Windows.Size" /> の第 1 インスタンス。</param>
      <param name="size2">比較対象の <see cref="T:System.Windows.Size" /> の第 2 インスタンス。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> のインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>
        <see cref="T:System.Windows.Size" /> のこのインスタンスのハッシュ コードを取得します。</summary>
      <returns>
        <see cref="T:System.Windows.Size" /> のこのインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>
        <see cref="P:System.Windows.Size.Height" /> のこのインスタンスの <see cref="T:System.Windows.Size" /> を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Windows.Size.Height" /> の該当するインスタンスの <see cref="T:System.Windows.Size" />。 既定値は 0 です。 この値を負にすることはできません。</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>
        <see cref="T:System.Windows.Size" /> のこのインスタンスが <see cref="P:System.Windows.Size.Empty" /> かどうかを示す値を取得します。</summary>
      <returns>Size のこのインスタンスが <see cref="P:System.Windows.Size.Empty" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスを比較し、等しいかどうかを確認します。</summary>
      <param name="size1">比較対象の <see cref="T:System.Windows.Size" /> の第 1 インスタンス。</param>
      <param name="size2">比較対象の <see cref="T:System.Windows.Size" /> の第 2 インスタンス。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>
        <see cref="T:System.Windows.Size" /> のインスタンスを <see cref="T:System.Windows.Point" /> のインスタンスに明示的に変換します。</summary>
      <param name="size">変換される <see cref="T:System.Windows.Size" /> 値。</param>
      <returns>
        <see cref="T:System.Windows.Point" /> の該当するインスタンスに値が等しい <see cref="T:System.Windows.Size" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>
        <see cref="T:System.Windows.Size" /> のインスタンスを <see cref="T:System.Windows.Vector" /> のインスタンスに明示的に変換します。</summary>
      <param name="size">変換される <see cref="T:System.Windows.Size" /> 値。</param>
      <returns>
        <see cref="T:System.Windows.Vector" /> の該当するインスタンスに値が等しい <see cref="T:System.Windows.Size" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスを比較し、等しくないかどうかを判断します。</summary>
      <param name="size1">比較対象の <see cref="T:System.Windows.Size" /> の第 1 インスタンス。</param>
      <param name="size2">比較対象の <see cref="T:System.Windows.Size" /> の第 2 インスタンス。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> のインスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>変換された <see cref="T:System.Windows.Size" /> から <see cref="T:System.String" /> のインスタンスを返します。</summary>
      <param name="source">解析されて <see cref="T:System.String" /> 値に変換される <see cref="T:System.Windows.Size" /> 値。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>この型またはメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="format">使用する書式。</param>
      <param name="provider">値を書式設定するために使用するプロバイダー。</param>
      <returns>指定された書式の現在のインスタンスの値。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>この <see cref="T:System.String" /> オブジェクトを表す <see cref="T:System.Windows.Size" /> を返します。</summary>
      <returns>幅の後に高さを示す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>
        <see cref="T:System.String" /> のこのインスタンスを表す <see cref="T:System.Windows.Size" /> を返します。</summary>
      <param name="provider">書式設定の制御方法を提供するオブジェクト。</param>
      <returns>この <see cref="T:System.String" /> オブジェクトを表す <see cref="T:System.Windows.Size" />。</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>
        <see cref="P:System.Windows.Size.Width" /> のこのインスタンスの <see cref="T:System.Windows.Size" /> を取得または設定します。</summary>
      <returns>
        <see cref="P:System.Windows.Size.Width" /> の該当するインスタンスの <see cref="T:System.Windows.Size" />。 既定値は<c>0</c>です。 この値を負にすることはできません。</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>他の型のインスタンスと <see cref="T:System.Windows.Size" /> クラスのインスタンスの間で変換を行います。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.SizeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型からクラスを <see cref="T:System.Windows.Size" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="sourceType">変換するために評価するデータ型を識別します。</param>
      <returns>
        <paramref name="sourceType" /> を <see cref="T:System.Windows.Size" /> のインスタンスに変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Size" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="destinationType">変換するために評価するデータ型を識別します。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> のこのインスタンスを <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトから <see cref="T:System.Windows.Size" /> のインスタンスへの変換を試みます。</summary>
      <param name="context">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重する必要があるカルチャ固有の情報。</param>
      <param name="value">変換されるソース オブジェクト。</param>
      <returns>変換された <paramref name="source" /> から作成される <see cref="T:System.Windows.Size" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Size" /> のインスタンスの指定した型への変換を試みます。</summary>
      <param name="context">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="culture">変換時に尊重する必要があるカルチャ固有の情報。</param>
      <param name="value">変換対象の <see cref="T:System.Windows.Size" /> のインスタンス。</param>
      <param name="destinationType">
        <see cref="T:System.Windows.Size" /> のこのインスタンスの変換先の型。</param>
      <returns>
        <see cref="T:System.Windows.Size" /> の変換されたインスタンスから作成されるオブジェクト。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> が <see langword="null" /> であるか、<see cref="T:System.Windows.Size" /> のインスタンスではない場合。または、<paramref name="destinationType" /> が有効な変換先の型の 1 つではない場合。</exception>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>Windows Presentation Foundation (WPF) アプリケーションの起動画面を設定します。</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>
        <see cref="T:System.Windows.SplashScreen" /> クラスの新しいインスタンスを、指定したリソース アセンブリで初期化します。</summary>
      <param name="resourceAssembly">埋め込みリソースを格納するアセンブリ。</param>
      <param name="resourceName">埋め込みリソースの名前。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>
        <see cref="T:System.Windows.SplashScreen" /> クラスの新しいインスタンスを、指定したリソースで初期化します。</summary>
      <param name="resourceName">埋め込みリソースの名前。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>スプラッシュ スクリーンを閉じます。</summary>
      <param name="fadeoutDuration">閉じる操作が開始されてからスプラッシュ スクリーンが消えるまでの時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>スプラッシュ スクリーンを表示します。</summary>
      <param name="autoClose">スプラッシュ スクリーンを自動的に閉じる場合は <see langword="true" />。スプラッシュ スクリーンを手動で閉じる場合は <see langword="false" />。</param>
      <exception cref="T:System.IO.IOException">コンストラクターで指定されているリソースが見つかりません。</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>スプラッシュ スクリーンを表示します。</summary>
      <param name="autoClose">スプラッシュ スクリーンを自動的に閉じる場合は <see langword="true" />。スプラッシュ スクリーンを手動で閉じる場合は <see langword="false" />。</param>
      <param name="topMost">スプラッシュ スクリーン ウィンドウで WS_EX_TOPMOST スタイルを使用する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>スレッドの作業項目のキューを管理するためのサービスを提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数で指定したデリゲートを非同期的に実行します。</summary>
      <param name="method">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数を使用して指定したデリゲートを、指定した優先順位で非同期に実行します。</summary>
      <param name="method">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で非同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="method">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="method">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した一連の引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="method">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
      <param name="args">指定したメソッドに引数として渡すオブジェクトの配列。</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> キューで実行が保留になっているデリゲートと対話できます。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位ではありません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウンを非同期的に開始します。</summary>
      <param name="priority">ディスパッチャーのシャットダウンを開始する優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドであるかどうかを判断します。</summary>
      <returns>呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>現在実行中のスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。そのスレッドにディスパッチャーが関連付けられていない場合は、新しい <see cref="T:System.Windows.Threading.Dispatcher" /> を作成します。</summary>
      <returns>現在のスレッドに関連付けられているディスパッチャー。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> キューの処理を無効にします。</summary>
      <returns>ディスパッチャー処理を再度有効にするために使用される構造体。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>入れ子になったフレームを含むすべてのフレームを閉じるように要求します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>指定したスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</summary>
      <param name="thread">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の取得元のスレッド。</param>
      <returns>
        <paramref name="thread" /> のディスパッチャー。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了したかどうかを確認します。</summary>
      <returns>ディスパッチャーがシャットダウンを完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンしているかどうかを確認します。</summary>
      <returns>
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> に関する追加イベント情報を提供するフックのコレクションを取得します。</summary>
      <returns>この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたフック。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <param name="cancellationToken">アクションをキャンセルするかどうかを示すオブジェクト。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <param name="cancellationToken">アクションをキャンセルするかどうかを示すオブジェクト。</param>
      <param name="timeout">操作が開始されるまでの最小待機時間。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを同期的に実行します。</summary>
      <param name="method">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</summary>
      <param name="method">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="timeout">操作が完了するまでの最大待機時間。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</summary>
      <param name="method">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="timeout">操作が完了するまでの最大待機時間。</param>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="method">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="method">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="method">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="method">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
      <param name="args">特定のメソッドに引数として渡すオブジェクトの配列。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定したタイムアウトの値を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="timeout">操作が完了するまでの最大待機時間。</param>
      <param name="method">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="timeout">操作が完了するまでの最大待機時間。</param>
      <param name="method">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg">指定したメソッドに引数として渡すオブジェクト。 引数が必要ない場合は、<see langword="null" /> を指定できます。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority">指定したメソッドを呼び出す優先順位。これは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにある保留中のその他の操作に対する優先順位です。</param>
      <param name="timeout">操作が完了するまでの最大待機時間。</param>
      <param name="method">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg">指定したメソッドに引数として渡すオブジェクト。</param>
      <param name="args">指定したメソッドに引数として渡すオブジェクトの配列。</param>
      <returns>呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
      <param name="timeout">操作が開始されるまでの最小待機時間。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <param name="cancellationToken">アクションをキャンセルするかどうかを示すオブジェクト。</param>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の他の保留中の操作を基準に、指定されたコールバックが呼び出される順序を決定する優先順位。</param>
      <param name="cancellationToken">操作をキャンセルするかどうかを示すオブジェクト。</param>
      <typeparam name="TResult">指定されたデリゲートの戻り値の型。</typeparam>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウン プロセスを同期的に開始します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>実行ループに入ります。</summary>
      <param name="frame">ディスパッチャーが処理するフレーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" /> は <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> は <see langword="true" /> です

または -
<paramref name="frame" /> が別の <see cref="T:System.Windows.Threading.Dispatcher" /> で実行されています。

または -
ディスパッチャー処理が無効になっています。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>メイン実行フレームを <see cref="T:System.Windows.Threading.Dispatcher" /> のイベント キューにプッシュします。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了すると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始すると発生します。</summary>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>この <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドを取得します。</summary>
      <returns>スレッド。</returns>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>
        <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>フィルター段階で <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>指定した <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位かどうかを判断します。</summary>
      <param name="priority">確認する対象の優先順位。</param>
      <param name="parameterName">優先順位が無効な場合に発生する例外によって返される文字列。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできるかどうかを確認します。</summary>
      <exception cref="T:System.InvalidOperationException">呼び出し元のスレッドは、この <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</summary>
      <returns>現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。  このメソッドの結果を待機するコードにコントロールが戻り、指定された優先度がスケジュールされたときに実行される処理。</summary>
      <param name="priority">継続をスケジュールする優先順位。</param>
      <returns>現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 関連イベントのイベント データを提供します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>このイベントに関連付けられている <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns>ディスパッチャー。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 内の実行ループを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherFrame" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>指定した終了要求フラグを使用して、<see cref="T:System.Windows.Threading.DispatcherFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exitWhenRequested">すべてのフレームが閉じるように要求された場合に、このフレームが閉じるかどうかを示します。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>この <see cref="T:System.Windows.Threading.DispatcherFrame" /> を続行するかどうかを示す値を取得または設定します。</summary>
      <returns>フレームを続行する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherHooks" /> イベントのイベント データを提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation">イベントに関連付けられている操作。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>このイベントに関連付けられている <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</summary>
      <returns>このイベントに関連付けられている <see cref="T:System.Windows.Threading.Dispatcher" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>このイベントに関連付けられている <see cref="T:System.Windows.Threading.DispatcherOperation" /> を取得します。</summary>
      <returns>操作。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherHooks" /> 関連イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> の処理に関する追加のイベント情報を提供します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>ディスパッチャーに処理する操作がなくなると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>操作が中止されたときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>操作が完了するときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>操作がディスパッチャーにポストされるときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>操作の優先順位が変更されると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>操作が呼び出されるときに発生します。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられているオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.DispatcherObject" /> にアクセスできるかどうかを確認します。</summary>
      <returns>呼び出し元のスレッドがこのオブジェクトにアクセスできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>この <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられている <see cref="T:System.Windows.Threading.DispatcherObject" /> を取得します。</summary>
      <returns>ディスパッチャー。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.DispatcherObject" /> にアクセスできるように強制します。</summary>
      <exception cref="T:System.InvalidOperationException">呼び出し元のスレッドは、この <see cref="T:System.Windows.Threading.DispatcherObject" /> にアクセスできません。</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> キューにポストされた操作にアクセスするために使用するオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>操作を中止します。</summary>
      <returns>操作が中止された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>操作が中止されたときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>操作の完了時に発生します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>操作がポストされた <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</summary>
      <returns>ディスパッチャー。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>非同期操作の終了時に通知を受け取るオブジェクトを返します。</summary>
      <returns>非同期操作の完了時に通知を受けるオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>この <see cref="T:System.Windows.Threading.DispatcherOperation" /> に関連付けられている操作を開始します。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> キュー内の操作の優先順位を取得または設定します。</summary>
      <returns>キューのデリゲートの優先順位。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>操作の完了後に操作の結果を取得します。</summary>
      <returns>操作の結果。操作が完了していない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>操作の現在のステータスを取得します。</summary>
      <returns>操作の状態。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>現在の操作を表す <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを取得します。</summary>
      <returns>現在の操作を表すオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>操作の完了を待ちます。</summary>
      <returns>操作の状態。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> と <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" /> が等価です。  これは、同じスレッドで既に実行中の操作を待機しているときに発生する可能性があります。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>指定された期間、操作の完了を待ちます。</summary>
      <param name="timeout">最大待機時間。</param>
      <returns>操作の状態。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> と <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" /> が等価です。  これは、同じスレッドで既に実行中の操作を待機しているときに発生する可能性があります。</exception>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> キューにポストされた、<see cref="T:System.Threading.Tasks.Task`1" /> を含む操作にアクセスするために使用するオブジェクトを表します。</summary>
      <typeparam name="TResult">
        <see cref="T:System.Threading.Tasks.Task`1" /> によって返される型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>結果を返す非同期操作を待つオブジェクトを返します。</summary>
      <returns>結果を返す非同期操作のために待機しているオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>この <see cref="T:System.Windows.Threading.DispatcherOperation" /> に関連付けられている操作を開始します。</summary>
      <returns>操作の結果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>操作の完了後に操作の結果を取得します。</summary>
      <returns>操作の結果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>現在の操作を表す <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを取得します。</summary>
      <returns>現在の操作を表すオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>ディスパッチャー操作に使用するデリゲートを表します。</summary>
      <param name="arg">コールバックに渡される引数。</param>
      <returns>コールバックによって返されるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherOperation" /> のステータスの有効値を示します。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>操作は中断されました。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>操作は完了しました。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>操作は実行を開始しましたが、完了していません。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>操作は保留中であり、まだ <see cref="T:System.Windows.Threading.Dispatcher" /> キューにあります。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> での処理呼び出しの優先順位を示します。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>列挙値は 2 です。 アプリケーションがアイドル状態のときに操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>列挙値は 4 です。 他のすべての非アイドル状態の操作が完了した後に操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>列挙値は 3 です。 バックグラウンド操作が完了した後に操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>列挙値は 8 です。 データ バインディングと同じ優先順位で操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>列挙値は 0 です。 操作は処理されません。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>列挙値は 5 です。 入力と同じ優先順位で操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>列挙値は -1 です。 これは無効な優先順位です。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>列挙値は 6 です。 レイアウトとレンダリングが完了した後、入力の優先順位の付いた項目が処理される直前に、操作が処理されます。 具体的には、これは、Loaded イベントを発生させるときに使用されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>列挙値は 9 です。 通常の優先順位で操作が処理されます。 これが一般的なアプリケーションの優先順位です。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>列挙値は 7 です。 レンダリングと同じ優先順位で操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>列挙値は 10 です。 他の非同期操作の前に操作が処理されます。 これが最も高い優先順位です。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>列挙値は 1 です。 システムがアイドル状態のときに操作が処理されます。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>非同期タスクの完了待ちのオブジェクトを返します。</summary>
      <returns>非同期タスクの完了待ちのオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>非同期タスクの完了待ちのオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>非同期タスクの完了の待機を終了します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>非同期タスクが完了したかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> オブジェクトが、非同期タスクの完了を待機するのをやめたときに実行するアクションを設定します。</summary>
      <param name="continuation">待機操作の完了時に実行するアクション。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>無効な状態のディスパッチャーを表し、ディスパッチャーの処理を再度有効にする手段を提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>ディスパッチャーの処理を再度有効にします。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトがこの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">等しいかどうかについての評価対象となるオブジェクト。</param>
      <returns>指定したオブジェクトがこの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>2 つの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しいかどうかを判断します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>2 つの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しくないかどうかを判断します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>Windows Presentation Foundation (WPF) の同期コンテキストを提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>現在の <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>指定された <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispatcher">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付ける <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> は <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>指定された <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispatcher">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付ける <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。</param>
      <param name="priority">コールバック メソッドを送信およびポストするために使用される優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>この <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> のコピーを作成します。</summary>
      <returns>この同期コンテキストのコピー。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>同期コンテキストでのコールバックを非同期に呼び出します。</summary>
      <param name="d">呼び出すデリゲート。</param>
      <param name="state">デリゲートに渡されたオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>同期コンテキストでのコールバックを同期的に呼び出します。</summary>
      <param name="d">呼び出すデリゲート。</param>
      <param name="state">デリゲートに渡されたオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>指定した配列内のいずれかの要素またはすべての要素がシグナルを受信するまで待機します。</summary>
      <param name="waitHandles">ネイティブのオペレーティング システム ハンドルを格納する配列。</param>
      <param name="waitAll">すべてのハンドルを待機する場合は <see langword="true" />。いずれかのハンドルを待機する場合は <see langword="false" />。</param>
      <param name="millisecondsTimeout">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns>待機を実行するオブジェクトの配列インデックス。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>指定した時間の間隔で、指定した優先順位で処理される <see cref="T:System.Windows.Threading.Dispatcher" /> キューに統合されているタイマー。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>指定した時間間隔、優先順位、イベント ハンドラー、および <see cref="T:System.Windows.Threading.DispatcherTimer" /> を使用する <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="interval">タイマー刻み間の時間。</param>
      <param name="priority">タイマーを起動する優先順位。</param>
      <param name="callback">
        <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> イベントが発生したときに呼び出すイベント ハンドラー。</param>
      <param name="dispatcher">タイマーが関連付けられているディスパッチャー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" /> が <see langword="null" /> です。

または -

<paramref name="dispatcher" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>指定した優先順位でタイマー イベントを処理する <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="priority">タイマーを起動する優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>指定した <see cref="T:System.Windows.Threading.DispatcherTimer" /> で、指定した優先順位で実行される <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="priority">タイマーを起動する優先順位。</param>
      <param name="dispatcher">タイマーが関連付けられているディスパッチャー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられている <see cref="T:System.Windows.Threading.DispatcherTimer" /> を取得します。</summary>
      <returns>ディスパッチャー。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>タイマー刻みの間隔の時間を取得または設定します。</summary>
      <returns>タイマー刻み間の時間。 既定値は、00:00:00 です。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" /> が 0 より小さいか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>タイマーが実行されているかどうかを示す値を取得または設定します。</summary>
      <returns>タイマーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> を開始します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> を停止します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>ユーザー定義のデータ オブジェクトを取得または設定します。</summary>
      <returns>ユーザー定義データ。  既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>タイマー間隔が経過すると発生します。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>ディスパッチャーを使用してコードを実行したときに発生した例外を取得します。</summary>
      <returns>例外。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>例外イベントが処理されたかどうかを取得または設定します。</summary>
      <returns>例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>ディスパッチャーを使用してコードを実行したときに発生した例外を取得します。</summary>
      <returns>例外。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>例外がキャッチされるかどうか、およびイベント ハンドラーが呼び出されるかどうかを取得または設定します。</summary>
      <returns>
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> を発生させる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>依存関係プロパティの有効な値を検証するコールバックとして使用されるメソッドを表します。</summary>
      <param name="value">検証する値。</param>
      <returns>値が検証された場合は <see langword="true" />。送信された値が無効である場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>2-D 空間における変位を表します。</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Vector" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="x">新しい <see cref="P:System.Windows.Vector.X" /> の <see cref="T:System.Windows.Vector" /> オフセット。</param>
      <param name="y">新しい <see cref="P:System.Windows.Vector.Y" /> の <see cref="T:System.Windows.Vector" /> オフセット。</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>指定したポイントを指定したベクターで変換し、その結果のポイントを返します。</summary>
      <param name="vector">指定したポイントを変換する量。</param>
      <param name="point">変換対象のポイント。</param>
      <returns>
        <paramref name="point" /> を <paramref name="vector" /> によって変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つのベクターを加算し、その結果を <see cref="T:System.Windows.Vector" /> 構造体として返します。</summary>
      <param name="vector1">加算する最初のベクトル。</param>
      <param name="vector2">加算する 2 番目のベクトル。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の合計。</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つの指定したベクターの間の角度 (度単位) を取得します。</summary>
      <param name="vector1">評価する最初のベクター。</param>
      <param name="vector2">評価する 2 番目のベクター。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の間の角度 (度単位)。</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つのベクターのクロス積を計算します。</summary>
      <param name="vector1">評価する最初のベクター。</param>
      <param name="vector2">評価する 2 番目のベクター。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> のクロス積。 クロス積の計算には、次の数式が使用されます。
<c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つのベクターの行列式を計算します。</summary>
      <param name="vector1">評価する最初のベクター。</param>
      <param name="vector2">評価する 2 番目のベクター。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の行列式。</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>指定したベクターを指定したスカラーで除算し、その結果を <see cref="T:System.Windows.Vector" /> として返します。</summary>
      <param name="vector">除算するベクター構造体。</param>
      <param name="scalar">
        <paramref name="vector" /> を除算する量。</param>
      <returns>
        <paramref name="vector" /> を <paramref name="scalar" /> で除算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> が <see cref="T:System.Windows.Vector" /> 構造体であるかどうか、および、そうである場合には、その構造体がこのベクターと同じ <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つかどうかを判断します。</summary>
      <param name="o">比較対象のベクター。</param>
      <returns>
        <paramref name="o" /> が <see cref="T:System.Windows.Vector" /> で、このベクターと同じ <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>2 つのベクターを比較し、相互に等価かどうかを判断します。</summary>
      <param name="value">このベクターと比較するベクター。</param>
      <returns>
        <paramref name="value" /> がこのベクターと同じ <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>指定した 2 つのベクターを比較して、値が等しいかどうかを判断します。</summary>
      <param name="vector1">比較する最初のベクトル。</param>
      <param name="vector2">比較する 2 番目のベクトル。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> コンポーネントが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>このベクターのハッシュ コードを返します。</summary>
      <returns>対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>このベクターの長さを取得します。</summary>
      <returns>このベクターの長さ。</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>このベクターの長さの四角形を取得します。</summary>
      <returns>このベクターの <see cref="P:System.Windows.Vector.Length" /> の四角形。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>指定したスカラーと指定したベクターを乗算し、その結果の <see cref="T:System.Windows.Vector" /> を返します。</summary>
      <param name="scalar">乗算するスカラー。</param>
      <param name="vector">乗算するベクトル。</param>
      <returns>
        <paramref name="scalar" /> と <paramref name="vector" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>指定したベクターと指定したスカラーを乗算し、その結果の <see cref="T:System.Windows.Vector" /> を返します。</summary>
      <param name="vector">乗算するベクトル。</param>
      <param name="scalar">乗算するスカラー。</param>
      <returns>
        <paramref name="vector" /> と <paramref name="scalar" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>指定したベクターの座標空間を、指定した <see cref="T:System.Windows.Media.Matrix" /> を使用して変換します。</summary>
      <param name="vector">変換するベクター構造体。</param>
      <param name="matrix">
        <paramref name="vector" /> に適用する変換。</param>
      <returns>
        <paramref name="vector" /> を <paramref name="matrix" /> で変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つの指定したベクターのドット積を計算し、その結果を <see cref="T:System.Double" /> として返します。</summary>
      <param name="vector1">乗算する最初のベクター。</param>
      <param name="vector2">乗算する 2 番目のベクター構造体。</param>
      <returns>次の数式で計算された <paramref name="vector1" /> と <paramref name="vector2" /> のスカラー ドット積を含む <see cref="T:System.Double" />。
<c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>このベクターを否定します。 ベクターの大きさはこれまでと変わりませんが、方向は逆になります。</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>このベクターを正規化します。</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>指定したベクターでポイントを変換し、その結果のポイントを返します。</summary>
      <param name="vector">
        <paramref name="point" /> を変換するために使用されるベクター。</param>
      <param name="point">変換対象のポイント。</param>
      <returns>
        <paramref name="point" /> を <paramref name="vector" /> によって変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つのベクターを加算し、その結果をベクターとして返します。</summary>
      <param name="vector1">加算する最初のベクトル。</param>
      <param name="vector2">加算する 2 番目のベクトル。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の合計。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>指定したベクターを指定したスカラーで除算し、その結果のベクターを返します。</summary>
      <param name="vector">除算するベクター。</param>
      <param name="scalar">
        <paramref name="vector" /> を除算するスカラー。</param>
      <returns>
        <paramref name="vector" /> を <paramref name="scalar" /> で除算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つのベクターを比較し、相互に等価かどうかを判断します。</summary>
      <param name="vector1">比較する最初のベクトル。</param>
      <param name="vector2">比較する 2 番目のベクトル。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> コンポーネントが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>このベクターの <see cref="T:System.Windows.Point" /> および <see cref="P:System.Windows.Vector.X" /> の値を持つ <see cref="P:System.Windows.Vector.Y" /> を作成します。</summary>
      <param name="vector">変換するベクター。</param>
      <returns>
        <paramref name="vector" /> の <see cref="P:System.Windows.Point.X" /> および <see cref="P:System.Windows.Point.Y" /> のオフセット値と等しい <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の座標値を持つポイント。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>このベクターのオフセットから <see cref="T:System.Windows.Size" /> を作成します。</summary>
      <param name="vector">変換するベクター。</param>
      <returns>このベクターの <see cref="T:System.Windows.Size" /> プロパティの絶対値と等しい <see cref="P:System.Windows.Size.Width" /> と、このベクターの <see cref="P:System.Windows.Vector.X" /> プロパティの絶対値と等しい <see cref="P:System.Windows.Size.Height" /> を持つ <see cref="P:System.Windows.Vector.Y" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つのベクターを比較して、等しくないかどうかを判断します。</summary>
      <param name="vector1">比較する最初のベクトル。</param>
      <param name="vector2">比較する 2 番目のベクトル。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> コンポーネントが異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>指定したスカラーと指定したベクターを乗算し、その結果のベクターを返します。</summary>
      <param name="scalar">乗算するスカラー。</param>
      <param name="vector">乗算するベクトル。</param>
      <returns>
        <paramref name="scalar" /> と <paramref name="vector" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>指定したベクターと指定したスカラーを乗算し、その結果のベクターを返します。</summary>
      <param name="vector">乗算するベクトル。</param>
      <param name="scalar">乗算するスカラー。</param>
      <returns>
        <paramref name="vector" /> と <paramref name="scalar" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>指定したベクターの座標空間を、指定した <see cref="T:System.Windows.Media.Matrix" /> を使用して変換します。</summary>
      <param name="vector">変換するベクトル。</param>
      <param name="matrix">
        <paramref name="vector" /> に適用する変換。</param>
      <returns>
        <paramref name="vector" /> を <paramref name="matrix" /> で変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>2 つの指定したベクター構造体のドット積を計算し、その結果を <see cref="T:System.Double" /> として返します。</summary>
      <param name="vector1">乗算する最初のベクター。</param>
      <param name="vector2">乗算する 2 番目のベクター。</param>
      <returns>次の数式で計算された <paramref name="vector1" /> と <paramref name="vector2" /> のスカラー ドット積を含む <see cref="T:System.Double" /> を返します。
<c>vector1.X * vector2.X + vector1.Y * vector2.Y</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>指定したベクターから、指定したもう 1 つのベクターを減算します。</summary>
      <param name="vector1">
        <paramref name="vector2" /> が減算されるベクター。</param>
      <param name="vector2">
        <paramref name="vector1" /> から減算するベクター。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>指定したベクトルを符号反転します。</summary>
      <param name="vector">符号反転するベクトル。</param>
      <returns>
        <paramref name="vector" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値と反対の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つベクター。</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>ベクターの文字列表現を、等価の <see cref="T:System.Windows.Vector" /> 構造体に変換します。</summary>
      <param name="source">ベクターの文字列表現。</param>
      <returns>等価の <see cref="T:System.Windows.Vector" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>指定したベクターから、指定したもう 1 つのベクターを減算します。</summary>
      <param name="vector1">
        <paramref name="vector2" /> が減算されるベクター。</param>
      <param name="vector2">
        <paramref name="vector1" /> から減算するベクター。</param>
      <returns>
        <paramref name="vector1" /> と <paramref name="vector2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。 このメンバーの詳細については、「<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />」をご覧ください。</summary>
      <param name="format">使用する書式を指定する文字列。

または -
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、<see langword="null" />。</param>
      <param name="provider">値の書式付けに使用する <see langword="IFormatProvider" />。

または -
オペレーティング システムの現在のロケール設定から数値の書式情報を取得する場合は <see langword="null" />。</param>
      <returns>指定した書式で現在のインスタンスの値が格納されている文字列。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>この <see cref="T:System.Windows.Vector" /> 構造体の文字列形式を返します。</summary>
      <returns>この <see cref="P:System.Windows.Vector.X" /> の <see cref="P:System.Windows.Vector.Y" /> および <see cref="T:System.Windows.Vector" /> の値を表す文字列。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>指定した書式設定情報を使用して、この <see cref="T:System.Windows.Vector" /> 構造体の文字列表現を返します。</summary>
      <param name="provider">カルチャ固有の書式設定情報。</param>
      <returns>この <see cref="P:System.Windows.Vector.X" /> の <see cref="P:System.Windows.Vector.Y" /> および <see cref="T:System.Windows.Vector" /> の値を表す文字列。</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>このベクターの <see cref="P:System.Windows.Vector.X" /> コンポーネントを取得または設定します。</summary>
      <returns>このベクターの <see cref="P:System.Windows.Vector.X" /> コンポーネント。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>このベクターの <see cref="P:System.Windows.Vector.Y" /> コンポーネントを取得または設定します。</summary>
      <returns>このベクターの <see cref="P:System.Windows.Vector.Y" /> コンポーネント。 既定値は 0 です。</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>他の型のインスタンスと <see cref="T:System.Windows.Vector" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Vector" /> 構造体の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指定した型から <see cref="T:System.Windows.Vector" /> のインスタンスにオブジェクトを変換できるかどうかを示します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="sourceType">変換のサポートについて照会するソースの <see cref="T:System.Type" />。</param>
      <returns>指定した型のオブジェクトを <see cref="T:System.Windows.Vector" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Vector" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Vector" /> が変換元として評価されるときの変換先の型。</param>
      <returns>
        <see cref="T:System.Windows.Vector" /> のインスタンスを <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>指定したオブジェクトを <see cref="T:System.Windows.Vector" /> に変換します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="culture">変換元の型の <see cref="T:System.Globalization.CultureInfo" /> を説明します。</param>
      <param name="value">変換されるオブジェクト。</param>
      <returns>
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Vector" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>指定した <see cref="T:System.Windows.Vector" /> を指定した型に変換します。</summary>
      <param name="context">型のコンテキスト情報を記述します。</param>
      <param name="culture">変換元の型の <see cref="T:System.Globalization.CultureInfo" /> を説明します。</param>
      <param name="value">変換対象の <see cref="T:System.Windows.Vector" />。</param>
      <param name="destinationType">この <see cref="T:System.Windows.Vector" /> の変換先の型。</param>
      <returns>この <see cref="T:System.Windows.Vector" /> の変換によって作成されたオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>弱いイベント パターンで使用されるイベント マネージャーの基本クラスです。 このマネージャーは、WeakEvent パターンを使用するイベント (またはコールバック) 用のリスナーを追加または削除します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>派生クラスのコンストラクターによって初期化子として使用されると、基本クラスの値を初期化します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>管理対象のイベントを各リスナーに配信します。</summary>
      <param name="sender">イベントが処理されるオブジェクト。</param>
      <param name="args">イベントが配信するイベント データを格納している <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>管理対象のイベントを、指定されたリスト内の各リスナーに配信します。</summary>
      <param name="sender">イベントが処理されるオブジェクト。</param>
      <param name="args">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
      <param name="list">指定された <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>指定された型に使用される <see cref="T:System.Windows.WeakEventManager" /> 実装を返します。</summary>
      <param name="managerType">
        <see cref="T:System.Windows.WeakEventManager" /> を取得する対象となる型。</param>
      <returns>一致する <see cref="T:System.Windows.WeakEventManager" /> 実装。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>指定したソース用に格納されているデータを取得または設定します。</summary>
      <param name="source">要求されたソースの 0 から始まるインデックス。</param>
      <returns>マネージャーによってこのソース用に格納されているデータ。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> のリスナーを格納するための組み込みのコレクション リストを提供します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>指定した初期量を使用して、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">初期リストに割り当てられる項目の数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>
        <see cref="T:System.Windows.IWeakEventListener" /> に <see cref="T:System.Windows.WeakEventManager.ListenerList" /> オブジェクトを追加します。</summary>
      <param name="listener">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加するリスナー要素。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>イベント ハンドラーを <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加します。</summary>
      <param name="handler">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加するイベント ハンドラー。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>リストが使用中であることを宣言します。 これにより、リスト項目の反復処理中に、このリストを直接変更することができなくなります。</summary>
      <returns>リストが使用中であることが既に宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> の変更可能な複製を作成します。</summary>
      <returns>現在のオブジェクトの変更可能な複製。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>指定した <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に現在の <see cref="T:System.Windows.WeakEventManager.ListenerList" /> をコピーします。</summary>
      <param name="newList">コピー先のオブジェクト。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に格納されている項目の数を取得します。</summary>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に格納されている項目の数。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>管理対象のイベントを <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内の各リスナーに配信します。</summary>
      <param name="sender">イベントを発生させたオブジェクト。</param>
      <param name="args">イベント データを格納しているオブジェクト。</param>
      <param name="managerType">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> のリスナーのいずれかがガベージ コレクションされたオブジェクトを参照する場合 <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>比較のために空のリストを表す値を取得します。</summary>
      <returns>空のリスト表現。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>
        <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> で開始されたロック状態を解除します。</summary>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> が空であるかどうかを宣言する値を取得します。</summary>
      <returns>リストが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内の特定のリスナー項目を取得または設定します。</summary>
      <param name="index">リスト内のリスナーの 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある項目。指定したインデックス位置に項目がない場合は null 参照。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>指定したリストが使用中かどうかを確認します。リストが使用中である場合は、リストの参照パラメーターを、オリジナルのリストではなくリストのコピーに設定します。</summary>
      <param name="list">使用状態を確認し、場合に応じてコピーする対象のリスト。</param>
      <returns>指定したリストが呼び出し時に使用されていたために <paramref name="list" /> パラメーターの参照がコピーに変更された場合は <see langword="true" />。 指定されたリストが使用されておらず <paramref name="list" /> パラメーターの参照が変更されなかった場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>基になる参照ターゲットが null 参照であるリストからエントリをすべて削除します。</summary>
      <returns>エントリが削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内で最初に見つかったリスナー項目を削除します。</summary>
      <param name="listener">削除する項目。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> からイベント ハンドラーを削除します。</summary>
      <param name="handler">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> から削除するイベント ハンドラー。</param>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" /> のリスナーを格納するためのタイプ セーフなコレクション リストを提供します。 このクラスは、使用されているイベント データの型パラメーターを定義します。</summary>
      <typeparam name="TEventArgs">イベント データを保持しているキー。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>指定した初期量を使用して、<see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity">初期リストに割り当てられる項目の数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> の値の詳細コピーを作成して、その変更可能な複製を作成します。</summary>
      <returns>現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see langword="false" /> プロパティが <see cref="P:System.Windows.Freezable.IsFrozen" /> であった場合でも、<see langword="true" /> になります。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>管理対象のイベントを <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 内の各リスナーに配信します。</summary>
      <param name="sender">イベントを発生させたオブジェクト。</param>
      <param name="e">イベント データを格納しているオブジェクト。</param>
      <param name="managerType">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> のリスナーのいずれかがガベージ コレクションされたオブジェクトを参照する場合 <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>リスナーをイベントに格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>指定されたソースのイベント ハンドラーとして指定したデリゲートを追加します。</summary>
      <param name="source">ハンドラー デリゲートがサブスクライブするソース オブジェクト。</param>
      <param name="handler">
        <paramref name="source" /> で発生したイベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>指定されたリスナーを、管理対象のイベントの指定されたソースに追加します。</summary>
      <param name="source">リスナーを関連付けるソース。</param>
      <param name="listener">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>指定したソースから、以前追加されたハンドラーを削除します。</summary>
      <param name="source">ハンドラーを削除するソース。</param>
      <param name="handler">
        <paramref name="source" /> から削除するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>以前に追加されたリスナーを指定されたソースから削除します。</summary>
      <param name="source">リスナーを削除するソース。</param>
      <param name="listener">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>指定されたソースのデータ リストから、アクティブでないリスナー エントリを削除します。 いくつかのエントリが実際にリストから削除された場合は、<see langword="true" /> を返します。</summary>
      <param name="source">リッスンされているイベントのソース。</param>
      <param name="data">チェックするデータ。 このオブジェクトは、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> 実装であることが求められます。</param>
      <param name="purgeAll">
        <paramref name="source" /> のリッスンを中止し、すべてのエントリを <paramref name="data" /> から完全に削除する場合は <see langword="true" />。</param>
      <returns>一部のエントリが実際に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>基になるデータ テーブルで読み取りロックを確立し、<see cref="T:System.IDisposable" /> を返します。</summary>
      <returns>
        <see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>指定したソースのリスナーをすべて削除します。</summary>
      <param name="source">リスナー情報を削除するソース。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>基になるリスナー リストに含まれる未使用エントリの削除を、優先順位の低いスレッドで実行するように要求します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>指定したマネージャーの種類に対する現在のマネージャーを設定します。</summary>
      <param name="managerType">新しいイベント マネージャーを設定する型。</param>
      <param name="manager">新しいイベント マネージャー。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> メソッドが初めて呼び出された後、マネージャーは、提供されたソースからの関連イベントを処理するたびに、<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> または <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> を呼び出している状態になる必要があります。</summary>
      <param name="source">リッスンを開始するソース。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>派生クラスでオーバーライドされると、指定されたソースで管理対象のイベントのリッスンを停止します。</summary>
      <param name="source">リッスンを停止するソース。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>基になるデータ テーブルで書き込みロックを確立し、<see cref="T:System.IDisposable" /> を返します。</summary>
      <returns>
        <see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>"弱いイベント リスナー" パターンに使用するイベント ハンドラーを指定できるようにするタイプ セーフの <see cref="T:System.Windows.WeakEventManager" /> を提供します。 このクラスは、イベントのソースの型パラメーターと、使用されるイベント データの型パラメーターを定義します。</summary>
      <typeparam name="TEventSource">イベントを発生させる型。</typeparam>
      <typeparam name="TEventArgs">イベント データを保持しているキー。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>指定したイベントに指定したイベント ハンドラーを追加します。</summary>
      <param name="source">指定されたイベントを発生させるソース オブジェクト。</param>
      <param name="eventName">サブスクライブするイベントの名前。</param>
      <param name="handler">イベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns>リスナーをイベントに格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>指定したイベントから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source">指定されたイベントを発生させるソース オブジェクト。</param>
      <param name="eventName">ハンドラーを削除するイベントの名前。</param>
      <param name="handler">削除するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>指定したオブジェクトでイベントのリッスンを開始します。</summary>
      <param name="source">イベントを発生させる対象のオブジェクト。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>指定したオブジェクトでイベントのリッスンを停止します。</summary>
      <param name="source">イベントを発生させる対象のオブジェクト。</param>
    </member>
  </members>
</doc>
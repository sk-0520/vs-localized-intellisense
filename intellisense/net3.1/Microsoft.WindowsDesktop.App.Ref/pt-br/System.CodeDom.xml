<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>Fornece acesso às instâncias do gerador de código e do compilador de código C#.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> usando as opções de provedor especificadas.</summary>
      <param name="providerOptions">Um objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contém as opções de provedor do arquivo de configuração.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>Obtém uma instância do compilador de código C#.</summary>
      <returns>Uma instância da implementação <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> do C#.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>Obtém uma instância do gerador de código C#.</summary>
      <returns>Uma instância da implementação <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> do C#.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>Obtém a extensão de nome de arquivo a ser usada ao criar arquivos de código-fonte.</summary>
      <returns>A extensão de nome de arquivo a ser usada para arquivos de código-fonte gerados.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para o membro de classe especificado usando as opções de gerador de código e text writer especificadas.</summary>
      <param name="member">Um <see cref="T:System.CodeDom.CodeTypeMember" /> para o qual o código deve ser gerado.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> no qual ocorrerá a gravação.</param>
      <param name="options">As <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> a serem usadas ao gerar o código.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>Obtém um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo de objeto especificado.</summary>
      <param name="type">O tipo de objeto para o qual recuperar um conversor de tipo.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Fornece acesso às instâncias do gerador de código e do compilador de código do Visual Basic.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Inicializa uma nova instância da classe <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> usando as opções de provedor especificadas.</summary>
      <param name="providerOptions">Um objeto <see cref="T:System.Collections.Generic.IDictionary`2" /> que contém as opções de provedor do arquivo de configuração.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Obtém uma instância do compilador de código do Visual Basic.</summary>
      <returns>Uma instância da implementação do Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Obtém uma instância do gerador de código do Visual Basic.</summary>
      <returns>Uma instância da implementação do Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>Obtém a extensão de nome de arquivo a ser usada ao criar arquivos de código-fonte.</summary>
      <returns>A extensão de nome de arquivo a ser usada para arquivos de código-fonte gerados.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera um código para o membro de classe especificado usando as opções do gerador de código e do text writer especificadas.</summary>
      <param name="member">Um <see cref="T:System.CodeDom.CodeTypeMember" /> para o qual o código deve ser gerado.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> no qual ocorrerá a gravação.</param>
      <param name="options">As <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> a serem usadas ao gerar o código.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>Obtém um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo de objeto especificado.</summary>
      <param name="type">O tipo de objeto para o qual um conversor de tipo deve ser recuperado.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>Obtém um identificador de recursos de idioma.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica os recursos especiais do idioma.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>Representa uma referência ao valor de um argumento passado para um método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> usando o nome do parâmetro especificado.</summary>
      <param name="parameterName">O nome do parâmetro a ser referenciado.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>Obtém ou define o nome do parâmetro que essa expressão referencia.</summary>
      <returns>O nome do parâmetro a ser referenciado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>Representa uma expressão que cria uma matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e a expressão de código indicando o número de índices para a matriz.</summary>
      <param name="createType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da matriz a ser criada.</param>
      <param name="size">Uma expressão que indica o número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando as expressões de inicialização e o tipo de dados da matriz especificados.</summary>
      <param name="createType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da matriz a ser criada.</param>
      <param name="initializers">Uma matriz de expressões a serem usadas para inicializar a matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e o número de índices para a matriz.</summary>
      <param name="createType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da matriz a ser criada.</param>
      <param name="size">O número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o nome do tipo de dados da matriz especificado e a expressão de código indicando o número de índices para a matriz.</summary>
      <param name="createType">O nome do tipo de dados da matriz a ser criada.</param>
      <param name="size">Uma expressão que indica o número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando os inicializadores e o nome do tipo de dados da matriz especificados.</summary>
      <param name="createType">O nome do tipo de dados da matriz a ser criada.</param>
      <param name="initializers">Uma matriz de expressões a serem usadas para inicializar a matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o nome do tipo de dados da matriz especificado e o número de índices para a matriz.</summary>
      <param name="createType">O nome do tipo de dados da matriz a ser criada.</param>
      <param name="size">O número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e a expressão de código indicando o número de índices para a matriz.</summary>
      <param name="createType">O tipo de dados da matriz a ser criada.</param>
      <param name="size">Uma expressão que indica o número de índices da matriz a ser criada.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando os inicializadores e o tipo de dados da matriz especificados.</summary>
      <param name="createType">O tipo de dados da matriz a ser criada.</param>
      <param name="initializers">Uma matriz de expressões a serem usadas para inicializar a matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> usando o tipo de dados da matriz especificado e o número de índices para a matriz.</summary>
      <param name="createType">O tipo de dados da matriz a ser criada.</param>
      <param name="size">O número de índices da matriz a ser criada.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>Obtém ou define o tipo da matriz a ser criada.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>Obtém os inicializadores com os quais inicializar a matriz.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> valor que indica os valores de inicialização.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>Obtém ou define o número de índices na matriz.</summary>
      <returns>O número de índices na matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>Obtém ou define a expressão que indica o tamanho da matriz.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o tamanho da matriz.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>Representa uma referência a um índice de uma matriz.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> usando os índices e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a matriz usada como destino pelo indexador.</param>
      <param name="indices">O índice ou índices a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>Obtém ou define o índice ou índices da expressão do indexador.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica o índice ou índices da expressão do indexador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>Obtém ou define o objeto de destino do indexador de matriz.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que representa a matriz que está sendo indexada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>Representa uma instrução de atribuição simples.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAssignStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAssignStatement" /> usando as expressões especificadas.</summary>
      <param name="left">A variável à qual atribuir.</param>
      <param name="right">O valor a atribuir.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>Obtém ou define a expressão que representa o objeto ou uma referência à qual atribuir.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto ou referência a ser atribuído a.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>Obtém ou define a expressão que representa o objeto ou uma referência a atribuir.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto ou a referência a atribuir.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>Representa uma instrução que anexa um delegado do manipulador de eventos a um evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttachEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> usando o evento e o delegado especificados.</summary>
      <param name="eventRef">Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento ao qual anexar um manipulador de eventos.</param>
      <param name="listener">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o novo manipulador de eventos.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttachEventStatement" /> usando o objeto especificado contendo o evento, o nome do evento e o delegado do manipulador de eventos.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</param>
      <param name="eventName">O nome do evento ao qual anexar um manipulador de eventos.</param>
      <param name="listener">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o novo manipulador de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>Obtém ou define o evento ao qual anexar um delegado do manipulador de eventos.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento ao qual anexar um manipulador de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>Obtém ou define o novo delegado de manipulador de eventos a anexar ao evento.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o novo manipulador de eventos a ser anexado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>Representa um argumento usado em uma declaração de atributo de metadados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgument" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> usando o valor especificado.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa o valor do argumento.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgument" /> usando o nome e o valor especificados.</summary>
      <param name="name">O nome da propriedade de atributo à qual o argumento se aplica.</param>
      <param name="value">Um <see cref="T:System.CodeDom.CodeExpression" /> que representa o valor do argumento.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>Obtém ou define o nome do atributo.</summary>
      <returns>O nome da propriedade de atributo para o qual o argumento é.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>Obtém ou define o valor do argumento de atributo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o valor para o argumento de atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeAttributeArgument" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> para o final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser localizado na coleção.</param>
      <returns>O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeArgument" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeArgument" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>Representa uma declaração de atributo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando a referência de tipo de código especificada.</summary>
      <param name="attributeType">O <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica o atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando a referência de tipo de código e argumentos especificados.</summary>
      <param name="attributeType">O <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica o atributo.</param>
      <param name="arguments">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contém os argumentos para o atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando o nome especificado.</summary>
      <param name="name">O nome do atributo.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> usando o nome e os argumentos especificados.</summary>
      <param name="name">O nome do atributo.</param>
      <param name="arguments">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeArgument" /> que contém os argumentos para o atributo.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>Obtém os argumentos para o atributo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> que contém os argumentos para o atributo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>Obtém a referência de tipo de código para a declaração de atributo de código.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que identifica o <see cref="T:System.CodeDom.CodeAttributeDeclaration" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>Obtém ou define o nome do atributo sendo declarado.</summary>
      <returns>O nome do atributo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Adiciona um objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> com o valor especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> para o final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Obtém ou define um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser localizado.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser localizado na coleção.</param>
      <returns>O índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> no índice especificado.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>Representa uma referência à classe base.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>Representa uma expressão que consiste em uma operação binária entre duas expressões.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> usando os parâmetros especificados.</summary>
      <param name="left">O <see cref="T:System.CodeDom.CodeExpression" /> à esquerda do operador.</param>
      <param name="op">Um <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica o tipo do operador.</param>
      <param name="right">O <see cref="T:System.CodeDom.CodeExpression" /> à direita do operador.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>Obtém ou define a expressão de código à esquerda do operador.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o operando esquerdo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>Obtém ou define o operador na expressão de operador binário.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> que indica o tipo de operador na expressão.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>Obtém ou define a expressão de código à direita do operador.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o operando à direita.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>Define os identificadores de operadores binários com suporte.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>Operador de adição.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>Operador de atribuição.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>Bit a bit e operador.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>Bit a bit ou operador.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>Booliano e operador. Isso representa um operador de curto-circuito. Um operador de curto-circuito avaliará apenas o número de expressões que forem necessárias antes de retornar um valor correto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>Booliano ou operador. Isso representa um operador de curto-circuito. Um operador de curto-circuito avaliará apenas o número de expressões que forem necessárias antes de retornar um valor correto.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>Operador de divisão.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>Operador maior que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>Operador maior ou igual a.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>Operador de identidade igual.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>Operador de identidade diferente.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>Operador menor que.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>Operador menor ou igual a.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>Operador de módulo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>Operador de multiplicação.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>Operador de subtração.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>Operador de valor igual.</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>Representa uma expressão convertida em um tipo de dados ou interface.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" /> usando a expressão e o tipo de destino especificados.</summary>
      <param name="targetType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de destino da conversão.</param>
      <param name="expression">O <see cref="T:System.CodeDom.CodeExpression" /> a converter.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" /> usando a expressão e o tipo de destino especificados.</summary>
      <param name="targetType">O nome do tipo de destino da conversão.</param>
      <param name="expression">O <see cref="T:System.CodeDom.CodeExpression" /> a converter.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCastExpression" /> usando a expressão e o tipo de destino especificados.</summary>
      <param name="targetType">O tipo de dados de destino da conversão.</param>
      <param name="expression">O <see cref="T:System.CodeDom.CodeExpression" /> a converter.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>Obtém ou define a expressão a converter.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o código a ser convertido.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>Obtém ou define o nome do tipo de destino da conversão.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de destino a ser convertido.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>Representa um bloco de exceção <see langword="catch" /> de uma instrução <see langword="try/catch" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" /> usando o nome da variável local especificado para a exceção.</summary>
      <param name="localName">O nome da variável local declarada na cláusula catch para a exceção. Esse campo é opcional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" /> usando o nome da variável local especificado para a exceção e o tipo de exceção.</summary>
      <param name="localName">O nome da variável local declarada na cláusula catch para a exceção. Esse campo é opcional.</param>
      <param name="catchExceptionType">Uma <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica o tipo de exceção a ser capturada.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClause" /> usando o nome da variável local especificado para a exceção, o tipo de exceção e a coleção de instruções.</summary>
      <param name="localName">O nome da variável local declarada na cláusula catch para a exceção. Esse campo é opcional.</param>
      <param name="catchExceptionType">Uma <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica o tipo de exceção a ser capturada.</param>
      <param name="statements">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que representam o conteúdo do bloco catch.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>Obtém ou define o tipo da exceção a manipular com o bloco catch.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da exceção a ser manipulada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>Obtém ou define o nome da variável da exceção tratada pela cláusula <see langword="catch" />.</summary>
      <returns>O nome da variável de exceção que a <see langword="catch" /> cláusula manipula.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>Obtém as instruções dentro do bloco catch.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as instruções dentro do bloco catch.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeCatchClause" /> especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCatchClause" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> para o final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser localizado na coleção.</param>
      <returns>O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeCatchClause" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeCatchClause" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCatchClause" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>Representa uma entidade de código de pragma de soma de verificação de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeChecksumPragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeChecksumPragma" /> usando um nome do arquivo, um GUID que representa o algoritmo de soma de verificação e um fluxo de bytes que representa os dados de soma de verificação.</summary>
      <param name="fileName">O caminho para o arquivo de soma de verificação.</param>
      <param name="checksumAlgorithmId">Um <see cref="T:System.Guid" /> que identifica o algoritmo de soma de verificação a ser usado.</param>
      <param name="checksumData">Uma matriz de bytes que contém os dados de soma de verificação.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>Obtém ou define um GUID que identifica o algoritmo de soma de verificação a ser usado.</summary>
      <returns>Um <see cref="T:System.Guid" /> que identifica o algoritmo de soma de verificação a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>Obtém ou define o valor dos dados para o cálculo da soma de verificação.</summary>
      <returns>Uma matriz de bytes que contém os dados para o cálculo da soma de verificação.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>Obtém ou define o caminho para o arquivo de soma de verificação.</summary>
      <returns>O caminho para o arquivo de soma de verificação.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>Representa um comentário.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeComment" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeComment" /> com o texto especificado como conteúdo.</summary>
      <param name="text">O conteúdo do comentário.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeComment" /> usando o texto e o sinalizador de comentário de documentação especificados.</summary>
      <param name="text">O conteúdo do comentário.</param>
      <param name="docComment">
        <see langword="true" /> se o comentário for um comentário de documentação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>Obtém ou define um valor que indica se o comentário é um comentário de documentação.</summary>
      <returns>
        <see langword="true" /> se o comentário for um comentário de documentação; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>Obtém ou define o texto do comentário.</summary>
      <returns>Uma cadeia de caracteres que contém o texto do comentário.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>Representa uma instrução que consiste em um único comentário.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando o comentário especificado.</summary>
      <param name="comment">Um <see cref="T:System.CodeDom.CodeComment" /> que indica o comentário.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando o texto especificado como conteúdo.</summary>
      <param name="text">O conteúdo do comentário.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatement" /> usando o texto e o sinalizador de comentário de documentação especificados.</summary>
      <param name="text">O conteúdo do comentário.</param>
      <param name="docComment">
        <see langword="true" /> se o comentário for um comentário de documentação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>Obtém ou define o conteúdo do comentário.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeComment" /> que indica o comentário.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCommentStatement" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeCommentStatement" /> especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCommentStatement" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> para o final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser pesquisado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>Copia os objetos de coleção para uma <see cref="T:System.Array" /> unidimensional especificada, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser localizado.</param>
      <returns>O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>Insere um objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual o item deve ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeCommentStatement" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeCommentStatement" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>Fornece um contêiner para um gráfico de programa CodeDOM.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>Obtém uma coleção de atributos personalizados para o assembly gerado.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados para o assembly gerado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de término.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas end.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>Obtém a coleção de namespaces.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que indica os namespaces que a unidade de compilação usa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>Obtém os assemblies referenciados.</summary>
      <returns>Um <see cref="T:System.Collections.Specialized.StringCollection" /> que contém os nomes de arquivo dos assemblies referenciados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de início.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>Representa uma instrução de ramificação condicional, normalmente representada como uma instrução <see langword="if" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConditionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConditionStatement" /> usando a condição e as instruções especificadas.</summary>
      <param name="condition">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão a ser avaliada.</param>
      <param name="trueStatements">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que contém as instruções a executar se a condição é <see langword="true" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConditionStatement" /> usando a condição e as instruções especificadas.</summary>
      <param name="condition">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a condição a ser avaliada.</param>
      <param name="trueStatements">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que contém as instruções a executar se a condição é <see langword="true" />.</param>
      <param name="falseStatements">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que contém as instruções a executar se a condição é <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>Obtém ou define a expressão para avaliar <see langword="true" /> ou <see langword="false" />.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeExpression" /> para avaliar <see langword="true" /> ou <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>Obtém a coleção de instruções a executar se a expressão condicional é avaliada como <see langword="false" />.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as instruções a serem executadas se a expressão condicional for <see langword="false" />avaliada como.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>Obtém a coleção de instruções a executar se a expressão condicional é avaliada como <see langword="true" />.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as instruções a serem executadas se a expressão condicional for <see langword="true" />avaliada como.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>Representa uma declaração para um construtor de instância de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeConstructor" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>Obtém a coleção de argumentos de construtor base.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contém os argumentos do construtor base.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>Obtém a coleção de argumentos de construtor encadeados.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contém os argumentos do Construtor encadeado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>Representa uma referência a um valor padrão.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> usando a referência de tipo de código especificada.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que especifica a referência a um tipo de valor.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>Obtém ou define a referência de tipo de dados para um valor padrão.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> objeto que representa um tipo de dados que tem um valor padrão.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>Representa uma expressão que cria um delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />.</summary>
      <param name="delegateType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do delegado.</param>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o método do manipulador de eventos.</param>
      <param name="methodName">O nome do método manipulador de eventos.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>Obtém ou define o tipo de dados do delegado.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>Obtém ou define o nome do método manipulador de eventos.</summary>
      <returns>O nome do método do manipulador de eventos.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>Obtém ou define o objeto que contém o método manipulador de eventos.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o método do manipulador de eventos.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>Representa uma expressão que aciona um evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> usando o objeto de destino especificado.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto de destino.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> usando os parâmetros e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto de destino.</param>
      <param name="parameters">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indicam os parâmetros.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>Obtém ou define os parâmetros para passar aos métodos de manipulação de eventos anexados ao evento.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem passados para os métodos de manipulação de eventos anexados ao evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>Obtém ou define o evento a invocar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o evento a ser invocado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>Representa uma expressão usada como um parâmetro de invocação de método junto com um indicador de direção de referência.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectionExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectionExpression" /> usando o a direção do campo e a expressão especificadas.</summary>
      <param name="direction">Uma <see cref="T:System.CodeDom.FieldDirection" /> que indica a direção do campo da expressão.</param>
      <param name="expression">Uma <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de código a ser representada.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>Obtém ou define a direção do campo para esta expressão de direção.</summary>
      <returns>Um <see cref="T:System.CodeDom.FieldDirection" /> que indica a direção do campo para esta expressão de direção.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>Obtém ou define a expressão de código a ser representada.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão a ser representada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>Serve como a classe base para classes de diretiva de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirective" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeDirective" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectiveCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> com os objetos de diretiva de código na matriz especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeDirectiveCollection" /> com os elementos na coleção de diretivas de código especificada.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser adicionado.</param>
      <returns>A posição de índice na qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>Adiciona uma matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> ao final da coleção.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeDirective" /> a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>Adiciona o conteúdo do objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> especificado ao final da coleção.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém os objetos <see cref="T:System.CodeDom.CodeDirective" /> a adicionar à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeDirective" /> pelo qual pesquisar na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>Copia o conteúdo da coleção para uma matriz unidimensional começando no índice especificado.</summary>
      <param name="array">Uma matriz do tipo <see cref="T:System.CodeDom.CodeDirective" /> que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice na matriz no qual começar a inserir objetos de coleção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos no <see cref="T:System.CodeDom.CodeDirectiveCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>Obterá o índice na coleção do objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado, se ele existir na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser localizado na coleção.</param>
      <returns>A posição de índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado na coleção no índice especificado.</summary>
      <param name="index">A posição de índice baseada em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser inserido.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que 0.
- ou -
<paramref name="index" /> é maior que <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeDirective" /> no índice especificado na coleção.</summary>
      <param name="index">A posição de índice a acessar.</param>
      <returns>O <see cref="T:System.CodeDom.CodeDirective" /> na posição do índice.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fora do intervalo válido de posições de índice para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeDirective" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeDirective" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>Representa o método de ponto de entrada de um executável.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeEntryPointMethod" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>Representa uma referência a um evento.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> usando o nome do evento e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</param>
      <param name="eventName">O nome do evento a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>Obtém ou define o nome do evento.</summary>
      <returns>O nome do evento.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>Obtém ou define o objeto que contém o evento.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>Representa uma expressão de código. Esta é uma classe base para outros objetos de expressão de código que nunca é instanciada.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeExpression" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>Copia os elementos da matriz especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeExpression" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>Copia o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeExpressionCollection" /> para o final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser localizado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeExpressionCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser localizado na coleção.</param>
      <returns>O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeExpression" /> no índice especificado na coleção.</summary>
      <param name="index">O índice baseado em zero da coleção a ser acessada.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>Representa uma instrução que consiste em uma única expressão.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeExpressionStatement" /> usando a expressão especificada.</summary>
      <param name="expression">Uma <see cref="T:System.CodeDom.CodeExpression" /> para a instrução.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>Obtém ou define a expressão para a instrução.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão para a instrução.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>Representa uma referência a um campo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> usando o nome do campo e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o campo.</param>
      <param name="fieldName">O nome do campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>Obtém ou define o nome do campo a referenciar.</summary>
      <returns>Uma cadeia de caracteres que contém o nome do campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>Obtém ou define o objeto que contém o campo a referenciar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o campo a ser referenciado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>Representa uma instrução <see langword="goto" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeGotoStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeGotoStatement" /> usando o nome do rótulo especificado.</summary>
      <param name="label">O nome do rótulo no qual continuar a execução do programa.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> é <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>Obtém ou define o nome do rótulo no qual continuar a execução do programa.</summary>
      <returns>Uma cadeia de caracteres que indica o nome do rótulo no qual continuar a execução do programa.</returns>
      <exception cref="T:System.ArgumentNullException">O rótulo não pode ser definido porque <paramref name="value" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.</exception>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>Representa uma referência a uma propriedade do indexador de um objeto.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIndexerExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIndexerExpression" /> usando o índice e o objeto de destino especificados.</summary>
      <param name="targetObject">O objeto de destino.</param>
      <param name="indices">O índice ou índices da expressão do indexador.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>Obtém a coleção de índices da expressão do indexador.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica o índice ou índices da expressão do indexador.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>Obtém ou define o objeto de destino que pode ser indexado.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto do indexador.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>Representa uma instrução <see langword="for" /> ou um loop em um bloco de instruções, usando uma expressão de teste como uma condição para continuar executando o loop.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeIterationStatement" /> usando os parâmetros especificados.</summary>
      <param name="initStatement">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém a instrução de inicialização de loop.</param>
      <param name="testExpression">Um <see cref="T:System.CodeDom.CodeExpression" /> que contém a expressão para testar quanto à condição de saída.</param>
      <param name="incrementStatement">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém a instrução de incremento por ciclo.</param>
      <param name="statements">Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> contendo as instruções dentro do loop.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>Obtém ou define a instrução que é chamada após cada ciclo de loop.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução de incremento por ciclo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>Obtém ou define a instrução de inicialização de loop.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução de inicialização do loop.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>Obtém a coleção de instruções a serem executadas dentro do loop.</summary>
      <returns>Uma matriz do tipo <see cref="T:System.CodeDom.CodeStatement" /> que indica as instruções dentro do loop.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>Obtém ou define a expressão para testar como a condição que continua o loop.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão a ser testada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>Representa uma instrução rotulada ou um rótulo autônomo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLabeledStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> usando o nome do rótulo especificado.</summary>
      <param name="label">O nome do rótulo.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLabeledStatement" /> usando a instrução e o nome do rótulo especificados.</summary>
      <param name="label">O nome do rótulo.</param>
      <param name="statement">O <see cref="T:System.CodeDom.CodeStatement" /> a ser associado ao rótulo.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>Obtém ou define o nome do rótulo.</summary>
      <returns>O nome do rótulo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>Obtém ou define a instrução associada opcional.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatement" /> que indica a instrução associada ao rótulo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>Representa um local específico dentro de um arquivo específico.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeLinePragma" />.</summary>
      <param name="fileName">O nome do arquivo associado.</param>
      <param name="lineNumber">O número de linha no qual armazenar uma referência.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>Obtém ou define o nome do arquivo associado.</summary>
      <returns>O nome do arquivo associado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>Obtém ou define o número de linha da referência associada.</summary>
      <returns>O número da linha.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>Representa uma declaração para um evento de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberEvent" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>Obtém ou define o tipo de dados que implementa o evento de membro.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica o tipo de dados ou tipos que o evento de membro implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>Obtém ou define o tipo de dados implementado de modo privado, se houver.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados que o evento implementa de forma privada.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>Obtém ou define o tipo de dados do tipo de delegado que manipula o evento.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo delegado que manipula o evento.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>Representa uma declaração para um campo de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" /> usando o nome e tipo do campo especificados.</summary>
      <param name="type">Um objeto que indica o tipo do campo.</param>
      <param name="name">O nome do campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" /> usando o nome e tipo do campo especificados.</summary>
      <param name="type">O tipo do campo.</param>
      <param name="name">O nome do campo.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberField" /> usando o nome e tipo do campo especificados.</summary>
      <param name="type">O tipo do campo.</param>
      <param name="name">O nome do campo.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>Obtém ou define a expressão de inicialização para o campo.</summary>
      <returns>A expressão de inicialização para o campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>Obtém ou define o tipo do campo.</summary>
      <returns>O tipo do campo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>Representa uma declaração para um método de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberMethod" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>Obtém os tipos de dados das interfaces implementadas por esse método, a menos que é uma implementação de método privado, o que é indicado pela propriedade <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica as interfaces implementadas por esse método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>Obtém as declarações de parâmetro do método.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica os parâmetros do método.</returns>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> for acessada.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>Obtém ou define o tipo de dados da interface da qual este método, se for privado, implementará um segundo método.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da interface com o método que o método particular cuja declaração é representada por esse <see cref="T:System.CodeDom.CodeMemberMethod" /> implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>Obtém ou define o tipo de dados do valor retornado do método.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do valor retornado pelo método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>Obtém os atributos personalizados do tipo de retorno do método.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>Obtém as instruções dentro do método.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica as instruções dentro do método.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>Obtém o parâmetro de tipo do método genérico atual.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os parâmetros de tipo para o método genérico.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>Representa uma declaração para uma propriedade de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMemberProperty" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>Obtém a coleção de instruções <see langword="get" /> para a propriedade.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as <see langword="get" /> instruções para a propriedade do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>Obtém ou define um valor que indica se a propriedade tem um acessador de método <see langword="get" />.</summary>
      <returns>
        <see langword="true" />se a <see langword="Count" /><see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> propriedade da coleção for diferente de zero, ou se o valor dessa propriedade tiver sido definido como <see langword="true" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>Obtém ou define um valor que indica se a propriedade tem um acessador de método <see langword="set" />.</summary>
      <returns>
        <see langword="true" />se a <see cref="P:System.Collections.CollectionBase.Count" /> propriedade <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> da coleção for diferente de zero; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>Obtém os tipos de dados de todas as interfaces implementadas pela propriedade.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica os tipos de dados que a propriedade implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>Obtém a coleção de expressões de declaração para a propriedade.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica as expressões de declaração para a propriedade.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>Obtém ou define o tipo de dados da interface, se houver, que essa propriedade, se privada, implementa.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da interface, se houver, a propriedade, se privado, implementa.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>Obtém a coleção de instruções <see langword="set" /> para a propriedade.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém as <see langword="set" /> instruções para a propriedade do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>Obtém ou define o tipo de dados da propriedade.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da propriedade.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>Representa uma expressão que invoca um método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> usando os parâmetros, o nome do método e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto de destino com o método a ser invocado.</param>
      <param name="methodName">O nome do método que será invocado.</param>
      <param name="parameters">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indicam os parâmetros com os quais chamar o método.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> usando o método e os parâmetros especificados.</summary>
      <param name="method">Um <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica o método a ser invocado.</param>
      <param name="parameters">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indicam os parâmetros com os quais invocar o método.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>Obtém ou define o método a invocar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> que indica o método a ser invocado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>Obtém os parâmetros com os quais invocar o método.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica os parâmetros com os quais invocar o método.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>Representa uma referência a um método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> usando o nome do método e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto a usar como destino.</param>
      <param name="methodName">O nome do método a ser chamado.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> usando os argumentos de tipo genérico, o nome do método e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto a usar como destino.</param>
      <param name="methodName">O nome do método a ser chamado.</param>
      <param name="typeParameters">Uma matriz de valores <see cref="T:System.CodeDom.CodeTypeReference" /> que especificam o <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> para este <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>Obtém ou define o nome do método a referenciar.</summary>
      <returns>O nome do método a ser referenciado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>Obtém ou define a expressão que indica o método a referenciar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que representa o método de referência.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>Obtém os argumentos de tipo para a expressão de referência de método genérico atual.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contém os argumentos de tipo para o <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />código atual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>Representa uma instrução de valor retornado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> usando a expressão especificada.</summary>
      <param name="expression">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o valor retornado.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>Obtém ou define o valor retornado.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o valor a ser retornado para a instrução return, <see langword="null" /> ou se a instrução fizer parte de uma sub-rotina.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>Representa uma declaração de namespace.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespace" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespace" /> usando o nome especificado.</summary>
      <param name="name">O nome do namespace que está sendo declarado.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>Obtém os comentários para o namespace.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica os comentários para o namespace.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>Obtém a coleção diretivas de importação de namespace usadas pelo namespace.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> que indica as diretivas de importação de namespace usadas pelo namespace.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>Obtém ou define o nome do namespace.</summary>
      <returns>O nome do namespace.</returns>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeNamespace.Comments" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeNamespace.Imports" /> for acessada.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>Um evento que será acionado na primeira vez em que a coleção <see cref="P:System.CodeDom.CodeNamespace.Types" /> for acessada.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>Obtém a coleção de tipos contida pelo namespace.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que indica os tipos contidos no namespace.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeNamespace" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contém a matriz de objetos <see cref="T:System.CodeDom.CodeNamespace" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeNamespace" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">Um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeNamespaceCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado à coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeNamespace" /> especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeNamespace" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>Adiciona o conteúdo do objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> especificado ao final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeNamespaceCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser pesquisado na coleção.</param>
      <returns>
        <see langword="true" /> se o item <see cref="T:System.CodeDom.CodeNamespace" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeNamespaceCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeNamespace" /> na <see cref="T:System.CodeDom.CodeNamespaceCollection" />, se ele existe na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser localizado.</param>
      <returns>O índice do <see cref="T:System.CodeDom.CodeNamespace" /> especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual o novo item deve ser inserido.</param>
      <param name="value">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeNamespaceCollection" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeNamespace" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeNamespace" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeNamespace" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>Representa uma diretiva de importação de namespace que indica um namespace a ser usado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceImport" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceImport" /> usando o namespace a importar especificado.</summary>
      <param name="nameSpace">O nome do namespace a ser importado.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>Obtém ou define a linha e o arquivo em que a instrução ocorre.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeLinePragma" /> que indica o contexto da instrução.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>Obtém ou define o namespace a importar.</summary>
      <returns>O nome do namespace a ser importado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>Adiciona um objeto de <see cref="T:System.CodeDom.CodeNamespaceImport" /> à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> a ser adicionado à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>Adiciona um conjunto de objetos <see cref="T:System.CodeDom.CodeNamespaceImport" /> à coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeNamespaceImport" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>Limpa a coleção de membros.</summary>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>Obtém o número de namespaces na coleção.</summary>
      <returns>O número de namespaces na coleção.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>Obtém um enumerador que enumera os membros da coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que indica os membros da coleção.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeNamespaceImport" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeNamespaceImport" /> objeto em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.ICollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>Obtém o número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />. Essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.  Essa propriedade sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que pode iterar por uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adiciona um objeto ao <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">O <see cref="T:System.Object" /> para adicionar ao <see cref="T:System.Collections.IList" />.</param>
      <returns>A posição em que o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>Remove todos os itens do <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Determinará se o <see cref="T:System.Collections.IList" /> contiver um valor específico.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado no <see cref="T:System.Collections.IList" />.</param>
      <returns>
        <see langword="true" /> se o valor está na lista; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina o índice de um item específico em <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser localizado no <see cref="T:System.Collections.IList" />.</param>
      <returns>O índice de <paramref name="value" /> se ele for encontrado na lista; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Insere um item na <see cref="T:System.Collections.IList" /> na posição especificada.</summary>
      <param name="index">O índice de base zero no qual o <paramref name="value" /> deve ser inserido.</param>
      <param name="value">O <see cref="T:System.Object" /> a ser inserido no <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> tem um tamanho fixo.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> tiver um valor fixo; caso contrário, <see langword="false" />.  Essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>Obtém um valor que indica se o <see cref="T:System.Collections.IList" /> é somente leitura.</summary>
      <returns>
        <see langword="true" /> se o <see cref="T:System.Collections.IList" /> for somente leitura; caso contrário, <see langword="false" />.  Essa propriedade sempre retorna <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Obtém ou define o elemento no índice especificado.</summary>
      <param name="index">O índice com base em zero do elemento a ser obtido ou definido.</param>
      <returns>O elemento no índice especificado.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Remove a primeira ocorrência de um objeto específico do <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">O <see cref="T:System.Object" /> a ser removido de <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Remove o elemento no índice especificado do <see cref="T:System.Collections.IList" />.</summary>
      <param name="index">O índice de base zero do elemento a ser removido.</param>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>Fornece uma classe base comum para a maioria dos objetos CodeDOM (Modelo de Objeto do Documento de Código).</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObject" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>Obtém os dados definidos pelo usuário para o objeto atual.</summary>
      <returns>Um <see cref="T:System.Collections.IDictionary" /> que contém dados de usuário para o objeto atual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>Representa uma expressão que cria uma nova instância de um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> usando o tipo e os parâmetros especificados.</summary>
      <param name="createType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados do objeto a criar.</param>
      <param name="parameters">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem usados para criar o objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> usando o tipo e os parâmetros especificados.</summary>
      <param name="createType">O nome do tipo de dados do objeto a criar.</param>
      <param name="parameters">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem usados para criar o objeto.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> usando o tipo e os parâmetros especificados.</summary>
      <param name="createType">O tipo de dados do objeto a criar.</param>
      <param name="parameters">Uma matriz de objetos <see cref="T:System.CodeDom.CodeExpression" /> que indica os parâmetros a serem usados para criar o objeto.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>Obtém ou define o tipo de dados do objeto a criar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> para o tipo de dados do objeto a ser criado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>Obtém ou define os parâmetros a serem usados na criação do objeto.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpressionCollection" /> que indica os parâmetros a serem usados ao criar o objeto.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>Representa uma declaração de parâmetro para um método, propriedade ou construtor.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> usando o nome e o tipo do parâmetro especificados.</summary>
      <param name="type">Um objeto que indica o tipo do parâmetro a ser declarado.</param>
      <param name="name">O nome do parâmetro a ser declarado.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> usando o nome e o tipo do parâmetro especificados.</summary>
      <param name="type">O tipo do parâmetro a ser declarado.</param>
      <param name="name">O nome do parâmetro a ser declarado.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> usando o nome e o tipo do parâmetro especificados.</summary>
      <param name="type">O tipo do parâmetro a ser declarado.</param>
      <param name="name">O nome do parâmetro a ser declarado.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>Obtém ou define os atributos personalizados para a declaração de parâmetro.</summary>
      <returns>Um objeto que indica os atributos personalizados.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>Obtém ou define a direção do campo.</summary>
      <returns>Um objeto que indica a direção do campo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>Obtém ou define o nome do parâmetro.</summary>
      <returns>O nome do parâmetro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>Obtém ou define o tipo do parâmetro.</summary>
      <returns>O tipo do parâmetro.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">um ou mais objetos na matriz são <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Adiciona o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado à coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Copia os elementos da matriz especificada para o fim da coleção.</summary>
      <param name="value">A matriz do tipo <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Adiciona o conteúdo de outro <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> ao final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Obtém um valor que indica se a coleção contém o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser pesquisado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Obterá o índice na coleção do <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado, se ele existir na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser localizado na coleção.</param>
      <returns>O índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Insere o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado na coleção, no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Remove o <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>Representa um valor de tipo de dados primitivo.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePrimitiveExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePrimitiveExpression" /> usando o objeto especificado.</summary>
      <param name="value">O objeto a ser representado.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>Obtém ou define o tipo de dados primitivo a ser representado.</summary>
      <returns>A instância do tipo de dados primitivo para representar o valor de.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>Representa uma referência ao valor de uma propriedade.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> usando o nome da propriedade e o objeto de destino especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém a propriedade a referenciar.</param>
      <param name="propertyName">O nome da propriedade a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>Obtém ou define o nome da propriedade a referenciar.</summary>
      <returns>O nome da propriedade a referenciar.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>Obtém ou define o objeto que contém a propriedade a referenciar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém a propriedade a referenciar.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>Representa o argumento de valor de uma chamada do método do conjunto de propriedades dentro de um método do conjunto de propriedades.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>Especifica o nome e o modo de uma região de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRegionDirective" /> com valores padrão.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRegionDirective" />, especificando seu modo e nome.</summary>
      <param name="regionMode">Um dos valores de <see cref="T:System.CodeDom.CodeRegionMode" />.</param>
      <param name="regionText">O nome da região.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>Obtém ou define o modo para a diretiva de região.</summary>
      <returns>Um dos valores de <see cref="T:System.CodeDom.CodeRegionMode" />. O padrão é <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>Obtém ou define o nome da região.</summary>
      <returns>O nome da região.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>Especifica o início ou término de uma região de código.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>Término da região.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>Não usado.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>Início da região.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>Representa uma instrução que remove um manipulador de eventos.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> com o evento e o manipulador de eventos especificados.</summary>
      <param name="eventRef">Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento do qual desanexar o manipulador de eventos.</param>
      <param name="listener">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o manipulador de eventos a ser removido.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> usando o objeto de destino, o nome do evento e o manipulador de eventos especificados.</summary>
      <param name="targetObject">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o objeto que contém o evento.</param>
      <param name="eventName">O nome do evento.</param>
      <param name="listener">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o manipulador de eventos a ser removido.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>Obtém ou define o evento do qual remover um ouvinte.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> que indica o evento do qual remover um ouvinte.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>Obtém ou define o manipulador de eventos a ser removido.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica o manipulador de eventos a ser removido.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>Representa um fragmento de código literal que pode ser compilado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />.</summary>
      <param name="value">O fragmento de código literal a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>Obtém ou define a linha e as informações do arquivo sobre a localização do código em um documento de código-fonte.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeLinePragma" /> que indica a posição do fragmento de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>Obtém ou define o fragmento de código literal a ser representado.</summary>
      <returns>O fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>Representa uma expressão literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetExpression" /> usando a expressão literal especificada.</summary>
      <param name="value">A expressão literal a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>Obtém ou define a cadeia de caracteres literal de código.</summary>
      <returns>A cadeia de caracteres literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>Representa uma instrução que usa um fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetStatement" /> usando o fragmento de código especificado.</summary>
      <param name="value">O fragmento de código literal da instrução a representar.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>Obtém ou define a instrução de fragmento de código literal.</summary>
      <returns>A instrução de fragmento de código literal.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>Representa um membro de um tipo que usa um fragmento de código literal.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> usando o texto especificado.</summary>
      <param name="text">O fragmento de código literal para o membro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>Obtém ou define o fragmento de código literal para o membro de tipo.</summary>
      <returns>O fragmento de código literal para o membro de tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>Representa a classe base <see langword="abstract" /> da qual derivam todas as instruções de código.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatement" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de término.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas end.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>Obtém ou define a linha em que ocorre a declaração de código.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeLinePragma" /> objeto que indica o contexto da instrução de código.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>Obtém um objeto <see cref="T:System.CodeDom.CodeDirectiveCollection" /> que contém as diretivas de início.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeStatement" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatementCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém a matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeStatementCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeExpression" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeExpression" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeStatement" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>Adiciona um conjunto de objetos <see cref="T:System.CodeDom.CodeStatement" /> à coleção.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>Adiciona o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> ao final da coleção.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeStatement" /> pelo qual pesquisar na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>Copia os elementos do objeto <see cref="T:System.CodeDom.CodeStatementCollection" /> para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeStatementCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeStatement" /> na <see cref="T:System.CodeDom.CodeStatementCollection" />, se ele existe na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeStatement" /> a ser localizado na coleção.</param>
      <returns>O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeStatement" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeStatement" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeStatement" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeStatement" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeStatement" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>Representa uma referência para a instância de classe local atual.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeThisReferenceExpression" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>Representa uma instrução que gera uma exceção.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> com a instância do tipo de exceção especificada.</summary>
      <param name="toThrow">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a exceção a gerar.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>Obtém ou define a exceção a gerar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que representa uma instância da exceção a ser lançada.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>Representa um bloco <see langword="try" /> com qualquer número de cláusulas <see langword="catch" /> e, opcionalmente, um bloco <see langword="finally" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> usando as instruções especificadas para as cláusulas try e catch.</summary>
      <param name="tryStatements">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indicam as instruções a experimentar.</param>
      <param name="catchClauses">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indicam as cláusulas a capturar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> usando as instruções especificadas para as cláusulas try e catch, bem como as instruções finally.</summary>
      <param name="tryStatements">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indicam as instruções a experimentar.</param>
      <param name="catchClauses">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCatchClause" /> que indicam as cláusulas a capturar.</param>
      <param name="finallyStatements">Uma matriz de objetos <see cref="T:System.CodeDom.CodeStatement" /> que indicam as instruções finally a usar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>Obtém as cláusulas catch a usar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> que indica as cláusulas catch a serem usadas.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>Obtém as instruções finally a usar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica as instruções finally.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>Obtém as instruções a experimentar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeStatementCollection" /> que indica as instruções a serem experimentadas.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>Representa um construtor estático para uma classe.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeConstructor" />.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>Representa uma declaração de tipo de uma classe, estrutura, interface ou enumeração.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclaration" /> com o nome especificado.</summary>
      <param name="name">O nome do novo tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>Obtém os tipos base do tipo.</summary>
      <returns>Um objeto <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que indica os tipos base do tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>Obtém ou define um valor que indica se o tipo é um tipo de classe ou de referência.</summary>
      <returns>
        <see langword="true" /> se o tipo é um tipo de classe ou referência; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>Obtém ou define um valor que indica se o tipo é uma enumeração.</summary>
      <returns>
        <see langword="true" /> se o tipo é uma enumeração; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>Obtém ou define um valor que indica se o tipo é uma interface.</summary>
      <returns>
        <see langword="true" /> se o tipo é uma interface; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>Obtém ou define um valor que indica se a declaração de tipo é completa ou parcial.</summary>
      <returns>
        <see langword="true" /> se a declaração de classe ou estrutura for uma representação parcial da implementação; <see langword="false" /> se a declaração for uma implementação completa da classe ou estrutura. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>Obtém ou define um valor que indica se o tipo é um tipo de valor (struct).</summary>
      <returns>
        <see langword="true" /> se o tipo é um tipo de valor; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>Obtém a coleção de membros de classe para o tipo representado.</summary>
      <returns>Um objeto <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que indica os membros da classe.</returns>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>Ocorre quando a coleção <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> é acessada pela primeira vez.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>Ocorre quando a coleção <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> é acessada pela primeira vez.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>Obtém ou define os atributos do tipo.</summary>
      <returns>Um objeto <see cref="T:System.Reflection.TypeAttributes" /> que indica os atributos do tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>Obtém os parâmetros de tipo para a declaração de tipo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os parâmetros de tipo para a declaração de tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contém a matriz de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeDeclaration" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado à coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Copia os elementos da matriz especificada para o fim da coleção.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Adiciona o conteúdo de outro objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ao final da coleção.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> pelo qual pesquisar na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>Copia os elementos no objeto <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> na <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, se ele existe na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser localizado na coleção.</param>
      <returns>O índice do objeto especificado, se encontrado, na coleção; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeDeclaration" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>Representa uma declaração de delegado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeDelegate" />.</summary>
      <param name="name">O nome do delegado.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>Obtém os parâmetros do delegado.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> que indica os parâmetros do delegado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>Obtém ou define o tipo de retorno do delegado.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de retorno do delegado.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>Fornece uma classe base para um membro de um tipo. Membros de tipo incluem campos, métodos, propriedades, construtores e tipos aninhados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMember" />.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>Obtém ou define os atributos do membro.</summary>
      <returns>Uma combinação bit a bit dos valores <see cref="T:System.CodeDom.MemberAttributes" /> usados para indicar os atributos do membro. O valor padrão é  <see cref="F:System.CodeDom.MemberAttributes.Private" /> .   |  <see cref="F:System.CodeDom.MemberAttributes.Final" /></returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>Obtém a coleção de comentários para o membro de tipo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> que indica os comentários para o membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>Obtém ou define os atributos personalizados do membro.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>Obtém as diretivas de término para o membro.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas end.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>Obtém ou define a linha em que ocorre a declaração de membro de tipo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeLinePragma" /> objeto que indica o local da declaração de membro de tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>Obtém ou define o nome do membro.</summary>
      <returns>O nome do membro.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>Obtém as diretivas de início para o membro.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeDirectiveCollection" /> objeto que contém as diretivas Start.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeMember" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>Adiciona um <see cref="T:System.CodeDom.CodeTypeMember" /> com o valor especificado na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeTypeMember" /> especificada para o fim da coleção.</summary>
      <param name="value">A matriz do tipo <see cref="T:System.CodeDom.CodeTypeMember" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Adiciona o conteúdo de outro <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> ao final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>Obtém um valor que indica se a coleção contém o <see cref="T:System.CodeDom.CodeTypeMember" /> especificado.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser pesquisado na coleção.</param>
      <returns>
        <see langword="true" /> se a coleção contiver o objeto especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>Copia os objetos de coleção para uma instância de <see cref="T:System.Array" /> unidimensional, começando no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">A matriz de destino é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>Obterá o índice na coleção do <see cref="T:System.CodeDom.CodeTypeMember" /> especificado, se ele existir na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser localizado na coleção.</param>
      <returns>O índice na coleção do objeto especificado, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>Insere o <see cref="T:System.CodeDom.CodeTypeMember" /> especificado na coleção, no índice especificado.</summary>
      <param name="index">O índice baseado em zero em que o objeto especificado deverá ser inserido.</param>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.CodeDom.CodeTypeMember" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeTypeMember" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>Remove um <see cref="T:System.CodeDom.CodeTypeMember" /> específico da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeMember" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>Representa uma expressão <see langword="typeof" />, uma expressão que retorna um <see cref="T:System.Type" /> para um nome de tipo especificado.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" />.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados para a expressão <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> usando o tipo especificado.</summary>
      <param name="type">O nome do tipo de dados para a expressão <see langword="typeof" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeOfExpression" /> usando o tipo especificado.</summary>
      <param name="type">O tipo de dados do tipo de dados da expressão <see langword="typeof" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>Obtém ou define o tipo de dados referenciado pela expressão <see langword="typeof" />.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados referenciado <see langword="typeof" /> pela expressão. Essa propriedade nunca retornará <see langword="null" />e usará como padrão o <see cref="T:System.Void" /> tipo.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>Representa um parâmetro de tipo de um tipo genérico ou método.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameter" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameter" /> com o nome de parâmetro de tipo especificado.</summary>
      <param name="name">O nome do parâmetro de tipo.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>Obtém as restrições para o parâmetro de tipo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> objeto que contém as restrições para o parâmetro de tipo.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>Obtém os atributos personalizados do parâmetro de tipo.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica os atributos personalizados do parâmetro de tipo. O padrão é <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>Obtém ou define um valor que indica se o parâmetro de tipo tem uma restrição de construtor.</summary>
      <returns>
        <see langword="true" />Se o parâmetro de tipo tiver uma restrição de Construtor; caso contrário <see langword="false" />,. O padrão é <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>Obtém ou define o nome do parâmetro de tipo.</summary>
      <returns>O nome do parâmetro de tipo. O padrão é uma cadeia de caracteres vazia ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>Inicializa uma nova instância vazia da classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado à coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser adicionado.</param>
      <returns>O índice baseado em zero no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado à coleção usando o nome de tipo de dados especificado.</summary>
      <param name="value">O nome de um tipo de dados para o qual adicionar o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeTypeParameter" /> especificada para o fim da coleção.</summary>
      <param name="value">A matriz do tipo <see cref="T:System.CodeDom.CodeTypeParameter" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Copia os elementos da <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> especificada para o fim da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> que contém os objetos <see cref="T:System.CodeDom.CodeTypeParameter" /> a adicionar à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>Determina se a coleção contém o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> pelo qual pesquisar na coleção.</param>
      <returns>
        <see langword="true" /> se o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>Copia os itens na coleção para o <see cref="T:System.Array" /> unidimensional especificado no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> é multidimensional.
- ou -
O número de elementos no <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> é menor que o índice mais baixo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>Obterá o índice na coleção do objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado, se ele existir na coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser localizado na coleção.</param>
      <returns>O índice baseado em zero do objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado na coleção, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>Insere o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual inserir o item.</param>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>Obtém ou define o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> no índice especificado na coleção.</summary>
      <param name="index">O índice baseado em zero do objeto da coleção a ser acessado.</param>
      <returns>O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> no índice especificado.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>Remove o objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> especificado da coleção.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.CodeTypeParameter" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>Representa uma referência a um tipo.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o parâmetro de tipo de código especificado.</summary>
      <param name="typeParameter">Um <see cref="T:System.CodeDom.CodeTypeParameter" /> que representa o tipo do parâmetro de tipo.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando a classificação e o tipo de matriz especificados.</summary>
      <param name="arrayType">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da matriz.</param>
      <param name="rank">O número de dimensões na matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o nome do tipo especificado.</summary>
      <param name="typeName">O nome do tipo a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o nome do tipo e os argumentos de tipo especificados.</summary>
      <param name="typeName">O nome do tipo a referenciar.</param>
      <param name="typeArguments">Uma matriz de valores <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o nome do tipo e a opção de referência de tipo de código especificados.</summary>
      <param name="typeName">O nome do tipo a referenciar.</param>
      <param name="codeTypeReferenceOption">A opção de referência de tipo de código, um dos valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando a classificação, o nome e o tipo de matriz especificados.</summary>
      <param name="baseType">O nome do tipo dos elementos da matriz.</param>
      <param name="rank">O número de dimensões da matriz.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando o tipo especificado.</summary>
      <param name="type">O <see cref="T:System.Type" /> a referenciar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReference" /> usando a referência de tipo de código e o tipo especificados.</summary>
      <param name="type">O <see cref="T:System.Type" /> a referenciar.</param>
      <param name="codeTypeReferenceOption">A opção de referência de tipo de código, um dos valores de <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>Obtém ou define tipo dos elementos na matriz.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo dos elementos da matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>Obtém ou define a classificação da matriz.</summary>
      <returns>O número de dimensões da matriz.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>Obtém ou define o nome do tipo sendo referenciado.</summary>
      <returns>O nome do tipo que está sendo referenciado.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>Obtém ou define opção de referência de tipo de código.</summary>
      <returns>Uma combinação bit a bit dos valores <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>Obtém os argumentos de tipo para a referência de tipo genérico atual.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contém os argumentos de tipo para <see cref="T:System.CodeDom.CodeTypeReference" /> o objeto atual.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> .</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.CodeTypeReference" /> com os quais inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, que contém os elementos da coleção de origem especificada.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> com o qual inicializar a coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>Adiciona o <see cref="T:System.CodeDom.CodeTypeReference" /> especificado à coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>Adiciona um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção usando o nome de tipo de dados especificado.</summary>
      <param name="value">O nome de um tipo de dados para o qual adicionar um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>Adiciona um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção usando o tipo de dados especificado.</summary>
      <param name="value">O tipo de dados para o qual adicionar um <see cref="T:System.CodeDom.CodeTypeReference" /> à coleção.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>Copia os elementos da matriz <see cref="T:System.CodeDom.CodeTypeReference" /> especificada para o fim da coleção.</summary>
      <param name="value">A matriz do tipo <see cref="T:System.CodeDom.CodeTypeReference" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Adiciona o conteúdo do <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> especificado ao final da coleção.</summary>
      <param name="value">Um <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>Obtém um valor que indica se a coleção contém o <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser pesquisado na coleção.</param>
      <returns>
        <see langword="true" /> se o item <see cref="T:System.CodeDom.CodeTypeReference" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>Copia os itens na coleção para o <see cref="T:System.Array" /> unidimensional especificado no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados da coleção.</param>
      <param name="index">O índice da matriz no qual iniciar a inserção.</param>
      <exception cref="T:System.ArgumentException">O parâmetro <paramref name="array" /> é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> é maior do que o espaço disponível entre o índice da matriz de destino especificada pelo parâmetro <paramref name="index" /> e o final da matriz de destino.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor do que o índice mínimo da matriz de destino.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>Obterá o índice na coleção do <see cref="T:System.CodeDom.CodeTypeReference" /> especificado, se ele existir na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser localizado na coleção.</param>
      <returns>O índice do <see cref="T:System.CodeDom.CodeTypeReference" /> especificado na coleção, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>Insere um <see cref="T:System.CodeDom.CodeTypeReference" /> na coleção no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual o item deve ser inserido.</param>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.CodeDom.CodeTypeReference" /> no índice especificado na coleção.</summary>
      <param name="index">O índice da coleção a ser acessada.</param>
      <returns>A <see cref="T:System.CodeDom.CodeTypeReference" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>Remove o <see cref="T:System.CodeDom.CodeTypeReference" /> especificado da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.CodeTypeReference" /> a ser removido da coleção.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>Representa uma referência a um tipo de dados.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> usando o tipo especificado.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> usando o nome do tipo de dados especificado.</summary>
      <param name="type">O nome do tipo de dados a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> usando o tipo de dados especificado.</summary>
      <param name="type">Uma instância do tipo de dados a referenciar.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>Obtém ou define o tipo de dados a referenciar.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados a referenciar.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>Especifica como a referência de tipo de código deve ser resolvida.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>Resolva o tipo do parâmetro de tipo.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>Resolva o tipo do namespace raiz.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>Representa uma declaração de variável.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando o nome e o tipo especificados.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da variável.</param>
      <param name="name">O nome da variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando a expressão de inicialização, o tipo de dados e o nome da variável especificados.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo da variável.</param>
      <param name="name">O nome da variável.</param>
      <param name="initExpression">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando o nome do tipo de dados e o nome da variável especificados.</summary>
      <param name="type">O nome do tipo de dados da variável.</param>
      <param name="name">O nome da variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando a expressão de inicialização, o tipo de dados e o nome da variável especificados.</summary>
      <param name="type">O nome do tipo de dados da variável.</param>
      <param name="name">O nome da variável.</param>
      <param name="initExpression">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando o tipo de dados e o nome da variável especificados.</summary>
      <param name="type">O tipo de dados para a variável.</param>
      <param name="name">O nome da variável.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> usando a expressão de inicialização, o tipo de dados e o nome da variável especificados.</summary>
      <param name="type">O tipo de dados da variável.</param>
      <param name="name">O nome da variável.</param>
      <param name="initExpression">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>Obtém ou define a expressão de inicialização para a variável.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão de inicialização para a variável.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>Obtém ou define o nome da variável.</summary>
      <returns>O nome da variável.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>Obtém ou define o tipo de dados da variável.</summary>
      <returns>Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo de dados da variável.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>Representa uma referência a uma variável local.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> usando o nome da variável local especificado.</summary>
      <param name="variableName">O nome da variável local a ser referenciada.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>Obtém ou define o nome da variável local a ser referenciada.</summary>
      <returns>O nome da variável local a ser referenciada.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>Fornece uma implementação de exemplo da interface <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeCompiler" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>Obtém os argumentos de comando a serem passados para o compilador do <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> especificado.</summary>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <returns>Os argumentos do comando.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>Obtém o nome do executável do compilador.</summary>
      <returns>O nome do executável do compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>Obtém a extensão de nome de arquivo a ser usada para arquivos de origem.</summary>
      <returns>A extensão de nome de arquivo a ser usada para arquivos de origem.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compila a unidade de compilação especificada usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="e">Um objeto <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compila as unidades de compilação especificadas usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="ea">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="ea" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila o arquivo especificado usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileName">O nome de arquivo a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="fileName" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila os arquivos especificados usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileNames">Uma matriz de cadeias de caracteres que indica os nomes de arquivo dos arquivos a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="fileNames" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila a cadeia de caracteres de código-fonte especificada usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="source">A cadeia de caracteres de código-fonte a ser compilada.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila as cadeias de caracteres de código-fonte especificadas usando as opções especificadas e retorna os resultados da compilação.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="sources">Uma matriz de cadeias de caracteres que contêm o código-fonte a ser compilado.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.
- ou -
<paramref name="sources" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Obtém os argumentos de comando a serem usados ao invocar o compilador para gerar um arquivo de resposta.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="cmdArgs">Uma cadeia de caracteres de argumentos de comando.</param>
      <returns>Os argumentos de comando a serem usados para gerar um arquivo de resposta ou <see langword="null" /> se não houver nenhum argumento de arquivo de resposta.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>Une as matrizes de cadeias de caracteres especificadas.</summary>
      <param name="sa">A matriz de cadeias de caracteres a unir.</param>
      <param name="separator">O separador a ser usado.</param>
      <returns>A cadeia de caracteres concatenada.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Processa a linha especificada do <see cref="T:System.CodeDom.Compiler.CompilerResults" /> especificado.</summary>
      <param name="results">Um <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</param>
      <param name="line">A linha a processar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="e">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="ea">Uma matriz de objetos <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica a origem a compilar.</param>
      <returns>Os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileName">O nome de arquivo a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="fileNames">Uma matriz de cadeias de caracteres que indica os nomes de arquivo a compilar.</param>
      <returns>Os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="source">Uma cadeia de caracteres que indica o código-fonte a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Para obter uma descrição desse membro, consulte <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as opções do compilador.</param>
      <param name="sources">Uma matriz de cadeias de caracteres que indica o código-fonte a compilar.</param>
      <returns>Os resultados da compilação.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> é <see langword="null" />.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>Fornece uma classe base para implementações <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />. Esta classe é abstrata.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compila um assembly com base nas árvores <see cref="N:System.CodeDom" /> contidas na matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, usando as configurações de compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="compilationUnits">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica o código a ser compilado.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila um assembly do código-fonte contido nos arquivos especificados, usando as configurações de compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="fileNames">Uma matriz com os nomes dos arquivos a serem compilados.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila um assembly da matriz especificada de cadeias de caracteres que contém o código-fonte, usando as configurações do compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações do compilador para esta compilação.</param>
      <param name="sources">Uma matriz de cadeias de código-fonte a ser compilada.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>Quando substituído em uma classe derivada, cria um novo compilador de código.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> que pode ser usado para a compilação de representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>Cria um identificador de escape para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns>O identificador de escape para o valor.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>Quando substituído em uma classe derivada, cria um novo gerador de código.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que pode ser usado para gerar representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>Quando substituído em uma classe derivada, cria um novo gerador de código usando o <see cref="T:System.IO.TextWriter" /> especificado para saída.</summary>
      <param name="output">Um <see cref="T:System.IO.TextWriter" /> a usar para saída.</param>
      <returns>Um <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que pode ser usado para gerar representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>Quando substituído em uma classe derivada, cria um novo gerador de código usando o nome do arquivo especificado para saída.</summary>
      <param name="fileName">O nome do arquivo para o qual gerar a saída.</param>
      <returns>Um <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> que pode ser usado para gerar representações de código-fonte baseadas em <see cref="N:System.CodeDom" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>Quando substituído em uma classe derivada, cria um novo analisador de código.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.ICodeParser" /> que pode ser usado para analisar código-fonte. A implementação base sempre retorna <see langword="null" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>Obtém uma instância <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para o idioma especificado.</summary>
      <param name="language">O nome do idioma.</param>
      <returns>Um provedor CodeDOM implementado para o nome do idioma especificado.</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">O <paramref name="language" /> não tem um provedor configurado neste computador.</exception>
      <exception cref="T:System.ArgumentNullException">O <paramref name="language" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Obtém uma instância <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para as opções de idioma e provedor especificadas.</summary>
      <param name="language">O nome do idioma.</param>
      <param name="providerOptions">Uma coleção de opções do provedor do arquivo de configuração.</param>
      <returns>Um provedor CodeDOM implementado para as opções e o nome do idioma especificados.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>Cria um identificador válido para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual gerar um identificador válido.</param>
      <returns>Um identificador válido para o valor especificado.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>Obtém a extensão de nome de arquivo padrão a ser usada para arquivos de código-fonte na linguagem de programação atual.</summary>
      <returns>Uma extensão de nome de arquivo correspondente à extensão dos arquivos de origem do idioma atual. A implementação base sempre retorna <see cref="F:System.String.Empty" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a unidade de compilação CodeDOM (Modelo de Objeto do Documento de Código) especificada e envia-a para o text writer especificado, usando as opções especificadas.</summary>
      <param name="compileUnit">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> para o qual gerar código.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a expressão CodeDOM (Modelo de Objeto do Documento de Código) especificada e o envia para o text writer especificado, usando as opções especificadas.</summary>
      <param name="expression">Um objeto <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão para a qual gerar código.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a declaração de membro CodeDOM (Modelo de Objeto do Documento de Código) especificada e o envia para o text writer especificado, usando as opções especificadas.</summary>
      <param name="member">Um objeto <see cref="T:System.CodeDom.CodeTypeMember" /> que indica o membro para o qual gerar código.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException">Esse método não é substituído em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para o namespace CodeDOM (Modelo de Objeto do Documento de Código) especificado e envia-o para o text writer especificado, usando as opções especificadas.</summary>
      <param name="codeNamespace">Um objeto <see cref="T:System.CodeDom.CodeNamespace" /> que indica o namespace para o qual gerar código.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a instrução CodeDOM (Modelo de Objeto do Documento de Código) especificada e envia-o para o text writer especificado, usando as opções especificadas.</summary>
      <param name="statement">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém os elementos de CodeDOM para os quais gerar código.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a declaração de tipo CodeDOM (Modelo de Objeto do Documento de Código) especificada e envia-o para o text writer especificado, usando as opções especificadas.</summary>
      <param name="codeType">Um objeto <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica o tipo para o qual gerar código.</param>
      <param name="writer">O <see cref="T:System.IO.TextWriter" /> para o qual o código de saída é enviado.</param>
      <param name="options">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>Retorna as configurações de compilador e de provedor de linguagem de programação para este computador.</summary>
      <returns>Uma matriz do tipo <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> que representa as configurações de todas as implementações de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configuradas.</returns>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>Retorna as configurações de compilador e de provedor de linguagem de programação para a linguagem de programação especificada.</summary>
      <param name="language">Um nome de linguagem de programação.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> populado com as configurações da implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">O <paramref name="language" /> não tem um provedor configurado neste computador.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">O <paramref name="language" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>Obtém um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo de dados especificado.</summary>
      <param name="type">O tipo de objeto para o qual recuperar um conversor de tipo.</param>
      <returns>Um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado ou então <see langword="null" />, se um <see cref="T:System.ComponentModel.TypeConverter" /> para o tipo especificado não foi encontrado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>Retorna um nome de linguagem de programação associado com a extensão de nome de arquivo especificada, conforme configurado na seção de configuração do compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
      <param name="extension">Uma extensão de nome de arquivo.</param>
      <returns>Um nome de linguagem de programação associado com a extensão de nome de arquivo, conforme configurado nas configurações do compilador <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">O <paramref name="extension" /> não tem um provedor de linguagem de programação configurado neste computador.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">O <paramref name="extension" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtém o tipo indicado pelo <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo a retornar.</param>
      <returns>Uma representação de texto do tipo especificado, formatado para a linguagem de programação na qual o código é gerado por este gerador de código. No Visual Basic, por exemplo, passar um <see cref="T:System.CodeDom.CodeTypeReference" /> para o tipo <see cref="T:System.Int32" /> retorna "Integer".</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>Testa se uma extensão de nome de arquivo tem uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> associada configurada no computador.</summary>
      <param name="extension">Uma extensão de nome de arquivo.</param>
      <returns>
        <see langword="true" /> se uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> está configurada para a extensão de nome de arquivo especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="extension" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>Testa se uma linguagem de programação tem uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada no computador.</summary>
      <param name="language">O nome do idioma.</param>
      <returns>
        <see langword="true" /> se uma implementação de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> está configurada para a linguagem de programação especificada; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">O <paramref name="language" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">O chamador não tem a permissão necessária.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>Retorna um valor que indica se o valor especificado é um identificador válido para a linguagem de programação atual.</summary>
      <param name="value">O valor a ser verificado como um identificador válido.</param>
      <returns>
        <see langword="true" /> se o parâmetro <paramref name="value" /> é um identificador válido; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>Obtém um identificador de recursos de idioma.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> que indica os recursos especiais do idioma.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>Compila o código lido do fluxo de texto especificado em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Um objeto <see cref="T:System.IO.TextReader" /> que é usado para ler o código a ser analisado.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que contém uma representação do código analisado.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Retorna um valor que indica se o suporte à geração de código especificado é fornecido.</summary>
      <param name="generatorSupport">Um objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> que indica o tipo de suporte à geração de código para verificar.</param>
      <returns>
        <see langword="true" /> se o suporte à geração de código especificada é fornecido; caso contrário, <see langword="false" />.</returns>
      <exception cref="T:System.NotImplementedException">Nem esse método nem o método <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> são substituídos em uma classe derivada.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>Fornece uma implementação de exemplo da interface <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />. Esta classe é abstrata.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeGenerator" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>Gera um caractere de continuação de linha e gera como saída a cadeia de caracteres especificada para uma nova linha.</summary>
      <param name="st">A cadeia de caracteres a gravar na nova linha.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Cria um identificador de escape para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns>O identificador de escape para o valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Cria um identificador válido para o valor especificado.</summary>
      <param name="value">Uma cadeia de caracteres para a qual criar um identificador válido.</param>
      <returns>Um identificador válido para o valor.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>Obtém a declaração de tipo de código para a classe atual.</summary>
      <returns>A declaração de tipo de código para a classe atual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>Obtém o membro atual da classe.</summary>
      <returns>O membro atual da classe.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>Obtém o nome do membro atual.</summary>
      <returns>O nome do membro atual.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>Obtém o nome de classe atual.</summary>
      <returns>O nome de classe atual.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>Gera código para a expressão de referência de argumento especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>Gera código para a expressão de criação de matriz especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>Gera código para a expressão de indexador de matriz especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>Gera código para a instrução de atribuição especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeAssignStatement" /> que indica a instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>Gera código para a instrução de evento de anexação especificado.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeAttachEventStatement" /> que indica a instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Gera código para o fim do bloco de atributo especificado.</summary>
      <param name="attributes">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica o fim do bloco de atributo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Gera código para o início do bloco de atributo especificado.</summary>
      <param name="attributes">Um <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> que indica o início do bloco de atributo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>Gera código para a expressão de referência de base especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>Gera código para a expressão de operador binário especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> que indica a expressão para a qual gerar código.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>Gera código para a expressão de conversão especificada.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeCastExpression" /> que indica a expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera um código para o membro de classe especificado usando as opções do gerador de código e do text writer especificadas.</summary>
      <param name="member">O membro de classe para o qual gerar código.</param>
      <param name="writer">O text writer de saída do código.</param>
      <param name="options">As opções a serem usadas ao gerar o código.</param>
      <exception cref="T:System.InvalidOperationException">A propriedade <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> não é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>Gera código para o comentário especificado.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeComment" /> para o qual o código deve ser gerado.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>Gera código para a instrução de comentário especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
      <exception cref="T:System.ArgumentException">A propriedade <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> de <paramref name="e" /> não foi definida.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Gera código para as instruções de comentário especificadas.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Gera código para a unidade de compilação especificada.</summary>
      <param name="e">A unidade de compilação para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>Gera código para o término de uma unidade de compilação.</summary>
      <param name="e">A unidade de compilação para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>Gera código para o início de uma unidade de compilação.</summary>
      <param name="e">A unidade de compilação para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>Gera código para a instrução condicional especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para o construtor especificado.</summary>
      <param name="e">O construtor para o qual gerar código.</param>
      <param name="c">O tipo do objeto construído por este construtor.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>Gera código para o valor decimal especificado.</summary>
      <param name="d">O valor decimal para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>Gera código para a referência especificada para um valor padrão.</summary>
      <param name="e">A referência para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>Gera código para a expressão de criação de delegado especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>Gera código para a expressão de invocação de delegado especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>Gera código para a expressão de direção especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>Gera código para as diretivas de código especificadas.</summary>
      <param name="directives">As diretivas de código para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>Gera código para um número de ponto flutuante de precisão dupla.</summary>
      <param name="d">O valor para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para o método de ponto de entrada especificado.</summary>
      <param name="e">O ponto de entrada para o código.</param>
      <param name="c">O código que declara o tipo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para o evento especificado.</summary>
      <param name="e">O evento de membro para o qual gerar código.</param>
      <param name="c">O tipo do objeto no qual este evento ocorre.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>Gera código para a expressão de referência de evento especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>Gera código para a expressão de código especificada.</summary>
      <param name="e">A expressão de código para a qual gerar código.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> não é um <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>Gera código para a instrução de expressão especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>Gera código para o campo de membro especificado.</summary>
      <param name="e">O campo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>Gera código para a expressão de referência de campo especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>Gera código para a instrução <see langword="goto" /> especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>Gera código para a expressão de indexador especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>Gera código para a instrução de iteração especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>Gera código para a instrução rotulada especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>Gera código para o pragma de fim de linha especificado.</summary>
      <param name="e">O pragma de fim de linha para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>Gera código para o pragma de início de linha especificado.</summary>
      <param name="e">O pragma de início de linha para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para o método especificado.</summary>
      <param name="e">O método de membro para o qual gerar código.</param>
      <param name="c">O tipo do objeto no qual este método ocorre.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>Gera código para a expressão de invocação de método especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>Gera código para a expressão de referência de método especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>Gera código para a instrução de retorno de método especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>Gera código para o namespace especificado.</summary>
      <param name="e">O namespace para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>Gera código para o término de um namespace.</summary>
      <param name="e">O namespace para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>Gera código para a importação de namespace especificada.</summary>
      <param name="e">A importação de namespace para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>Gera código para a importação de namespace especificada.</summary>
      <param name="e">A importação de namespace para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>Gera código para os namespaces na unidade de compilação especificada.</summary>
      <param name="e">A unidade de compilação para a qual gerar namespaces.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>Gera código para o início de um namespace.</summary>
      <param name="e">O namespace para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>Gera código para a expressão de criação de objeto especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Gera código para a expressão de declaração de parâmetro especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>Gera código para a expressão primitiva especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> usa um tipo de dados inválido. Os seguintes tipos de dados são válidos:

cadeia de caracteres
char
byte
Int16
Int32
Int64
Único
Duplo
Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para a propriedade especificada.</summary>
      <param name="e">A propriedade para a qual gerar código.</param>
      <param name="c">O tipo do objeto no qual esta propriedade ocorre.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>Gera código para a expressão de referência de propriedade especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>Gera código para a expressão de referência de valor de conjunto de propriedades especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>Gera código para a instrução de evento de remoção especificado.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>Gera código para um número de ponto flutuante de precisão simples.</summary>
      <param name="s">O valor para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>Gera como saída o código da unidade de compilação de fragmento de código literal especificada.</summary>
      <param name="e">A unidade de compilação de fragmento de código literal para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>Gera como saída o código da expressão de fragmento de código literal especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>Gera como saída o código do membro de classe de fragmento de código literal especificada.</summary>
      <param name="e">O membro para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>Gera como saída o código da instrução de fragmento de código literal especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>Gera código para a instrução especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> não é um <see cref="T:System.CodeDom.CodeStatement" /> válido.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>Gera código para a coleção de instruções especificada.</summary>
      <param name="stms">As instruções para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>Gera código para a expressão this reference especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>Gera código para a instrução throw exception especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>Gera código para a instrução <see langword="try...catch...finally" /> especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>Gera código para o construtor de classe especificado.</summary>
      <param name="e">O construtor de classe para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para o término especificado da classe.</summary>
      <param name="e">O término da classe para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>Gera código para o tipo de expressão especificado.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>Gera código a expressão de referência de tipo especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>Gera código para o namespace especificado e as classes que ele contém.</summary>
      <param name="e">O namespace para o qual gerar classes.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>Gera código para o início especificado da classe.</summary>
      <param name="e">O início da classe para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>Gera código para a instrução de declaração de variável especificada.</summary>
      <param name="e">A instrução para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>Gera código a expressão de referência de variável especificada.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtém o nome do tipo de dados especificado.</summary>
      <param name="value">O tipo cujo nome será retornado.</param>
      <returns>O nome da referência de tipo de dados.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>Obtém ou define a quantidade de espaços pela qual recuar cada nível de recuo.</summary>
      <returns>O número de espaços a serem recuados para cada nível de recuo.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>Obtém um valor que indica se o objeto atual que está sendo gerado é uma classe.</summary>
      <returns>
        <see langword="true" />Se o objeto atual for uma classe; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>Obtém um valor que indica se o objeto atual que está sendo gerado é um delegado.</summary>
      <returns>
        <see langword="true" />Se o objeto atual for um delegado; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>Obtém um valor que indica se o objeto atual que está sendo gerado é uma enumeração.</summary>
      <returns>
        <see langword="true" />Se o objeto atual for uma enumeração; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>Obtém um valor que indica se o objeto atual que está sendo gerado é uma interface.</summary>
      <returns>
        <see langword="true" />Se o objeto atual for uma interface; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>Obtém um valor que indica se o objeto atual que está sendo gerado é um tipo de valor ou um struct.</summary>
      <returns>
        <see langword="true" />Se o objeto atual for um tipo de valor ou struct; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>Obtém um valor que indica se o valor especificado é um identificador válido.</summary>
      <param name="value">O valor para testar quanto a conflitos com os identificadores válidos.</param>
      <returns>
        <see langword="true" /> se o valor é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>Obtém um valor que indica se a cadeia de caracteres especificada é um identificador válido.</summary>
      <param name="value">A cadeia de caracteres a ser testada quanto à validade.</param>
      <returns>
        <see langword="true" /> se a cadeia de caracteres especificada é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>Obtém o token que representa <see langword="null" />.</summary>
      <returns>O token que representa <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>Obtém as opções a serem usadas pelo gerador de código.</summary>
      <returns>Um objeto que indica as opções para o gerador de código a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>Obtém o text writer a ser usado para saída.</summary>
      <returns>O text writer a ser usado para saída.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>Gera como saída um argumento em um bloco de atributo.</summary>
      <param name="arg">O argumento de atributo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Gera código para a coleção de declarações de atributo especificada.</summary>
      <param name="attributes">Os atributos para os quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>Gera código para o <see cref="T:System.CodeDom.FieldDirection" /> especificado.</summary>
      <param name="dir">Um dos valores de enumeração que indica o atributo do campo.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>Gera código para a lista de expressões especificada.</summary>
      <param name="expressions">As expressões para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>Gera código para a lista de expressões especificada.</summary>
      <param name="expressions">As expressões para as quais gerar código.</param>
      <param name="newlineBetweenItems">
        <see langword="true" /> para inserir uma nova linha após cada item; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Gera como saída um modificador de escopo de campo correspondente aos atributos especificados.</summary>
      <param name="attributes">Um dos valores de enumeração que especifica os atributos.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>Gera como saída o identificador especificado.</summary>
      <param name="ident">O identificador a gerar como saída.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>Gera código para o modificador de acesso de membro especificado.</summary>
      <param name="attributes">Um dos valores de enumeração que indica o modificador de acesso de membro para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Gera código para o modificador de escopo de membro especificado.</summary>
      <param name="attributes">Um dos valores de enumeração que indica o modificador de escopo de membro para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>Gera código para o operador especificado.</summary>
      <param name="op">O operador para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Gera código para os parâmetros especificados.</summary>
      <param name="parameters">As expressões de declaração de parâmetro para as quais gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>Gera código para o tipo especificado.</summary>
      <param name="typeRef">O tipo para o qual gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>Gera código para os atributos de tipo especificados.</summary>
      <param name="attributes">Um dos valores de enumeração que indica os atributos de tipo para os quais gerar código.</param>
      <param name="isStruct">
        <see langword="true" /> se o tipo é um struct; caso contrário, <see langword="false" />.</param>
      <param name="isEnum">
        <see langword="true" /> se o tipo é um enum; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Gera código para o par de nome e tipo de objeto especificado.</summary>
      <param name="typeRef">O tipo.</param>
      <param name="name">O nome para o objeto.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>Converte a cadeia de caracteres especificada formatando-a com códigos de escape.</summary>
      <param name="value">A cadeia de caracteres a ser convertida.</param>
      <returns>A cadeia de caracteres convertida.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtém um valor que indica se o suporte à geração de código especificado é fornecido.</summary>
      <param name="support">O tipo de suporte a geração de código para o qual testar.</param>
      <returns>
        <see langword="true" /> se o suporte à geração de código especificada é fornecido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>Cria um identificador de escape para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns>O identificador de escape para o valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>Cria um identificador válido para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual gerar um identificador válido.</param>
      <returns>Um identificador válido para o valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a unidade de compilação CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">A unidade de compilação de CodeDOM para a qual gerar código.</param>
      <param name="w">O text writer de saída do código.</param>
      <param name="o">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a expressão CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado.</summary>
      <param name="e">A expressão para a qual gerar código.</param>
      <param name="w">O text writer de saída do código.</param>
      <param name="o">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para o namespace CodeDOM (Modelo de Objeto do Documento de Código) especificado e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">O namespace para o qual gerar código.</param>
      <param name="w">O text writer de saída do código.</param>
      <param name="o">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a instrução CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">A instrução que contém os elementos CodeDOM a traduzir.</param>
      <param name="w">O text writer de saída do código.</param>
      <param name="o">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a declaração de tipo CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-a como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">O tipo para o qual gerar código.</param>
      <param name="w">O text writer de saída do código.</param>
      <param name="o">As opções a serem usadas para gerar código.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> não está disponível. <paramref name="w" /> pode ter sido fechado antes da chamada de método ser feita.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtém o tipo indicado pelo <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type">O tipo a ser retornado.</param>
      <returns>O nome da referência de tipo de dados.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>Obtém um valor que indica se o valor especificado é um identificador válido para a linguagem de programação atual.</summary>
      <param name="value">O valor a testar.</param>
      <returns>
        <see langword="true" /> se o parâmetro <paramref name="value" /> é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtém um valor que indica se o gerador dá suporte para os recursos de idioma representados pelo objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />.</summary>
      <param name="support">As funcionalidades para as quais testar o gerador.</param>
      <returns>
        <see langword="true" /> se os recursos especificados forem compatíveis; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>Gera uma exceção se o valor especificado não é um identificador válido.</summary>
      <param name="value">O identificador a ser validado.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>Gera uma exceção se a cadeia de caracteres especificada não é um identificador válido.</summary>
      <param name="value">O identificador para testar quanto à validade enquanto um identificador.</param>
      <exception cref="T:System.ArgumentException">Se o identificador especificado é inválido ou está em conflito com palavras-chave reservadas ou de linguagem.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>Tenta validar cada campo de identificador contido na árvore <see cref="T:System.CodeDom.CodeObject" /> ou <see cref="N:System.CodeDom" /> especificada.</summary>
      <param name="e">Um objeto a testar quanto a identificadores inválidos.</param>
      <exception cref="T:System.ArgumentException">O <see cref="T:System.CodeDom.CodeObject" /> especificado contém um identificador inválido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>Representa um conjunto de opções usadas por um gerador de código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>Obtém ou define um valor que indica se linhas em branco são ou não inseridas entre membros.</summary>
      <returns>
        <see langword="true" />se linhas em branco devem ser inseridas; caso contrário <see langword="false" />,. Por padrão, o valor dessa propriedade é <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>Obtém ou define o estilo de chaves a ser usado.</summary>
      <returns>Uma cadeia de caracteres que contém o estilo de chaves a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>Obtém ou define um valor que indica se um bloco <see langword="else" />, <see langword="catch" /> ou <see langword="finally" />, incluindo os colchetes, deve ou não ser acrescentado na linha de fechamento de cada bloco <see langword="if" /> ou <see langword="try" /> anterior.</summary>
      <returns>
        <see langword="true" />se outra pessoa deve ser acrescentada; caso contrário <see langword="false" />,. O valor padrão dessa propriedade é <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>Obtém ou define a cadeia de caracteres a ser usada para recuos.</summary>
      <returns>Uma cadeia de caracteres que contém o caractere a ser usado para recuos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>Obtém ou define o objeto no índice especificado.</summary>
      <param name="index">O nome associado ao objeto a ser recuperado.</param>
      <returns>O objeto associado ao nome especificado. Se nenhum objeto associado ao nome especificado existir na coleção, <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>Obtém ou define um valor que indica se os membros devem ou não ser gerados na ordem em que ocorrem em coleções de membros.</summary>
      <returns>
        <see langword="true" />para gerar os membros na ordem em que eles ocorrem na coleção de membros; caso contrário <see langword="false" />,. O valor padrão dessa propriedade é <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>Fornece uma implementação vazia da interface <see cref="T:System.CodeDom.Compiler.ICodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CodeParser" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>Compila o fluxo de texto especificado em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Um <see cref="T:System.IO.TextReader" /> que é usado para ler o código a ser analisado.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que contém o modelo de código gerado pela análise de código.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>Representa um erro ou aviso de compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerError" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerError" /> usando o nome do arquivo, coluna, número do erro e texto do erro especificados.</summary>
      <param name="fileName">O nome do arquivo que o compilador estava compilando quando encontrou o erro.</param>
      <param name="line">A linha da origem do erro.</param>
      <param name="column">A coluna da origem do erro.</param>
      <param name="errorNumber">O número do erro.</param>
      <param name="errorText">O texto da mensagem de erro.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>Obtém ou define o número da coluna em que a origem do erro ocorre.</summary>
      <returns>O número da coluna do arquivo de origem em que o compilador encontrou o erro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>Obtém ou define o número do erro.</summary>
      <returns>O número do erro como uma cadeia de caracteres.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>Obtém ou define o texto da mensagem de erro.</summary>
      <returns>O texto da mensagem de erro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>Obtém ou define o nome do arquivo de origem que contém o código que causou o erro.</summary>
      <returns>O nome do arquivo de origem que contém o código que causou o erro.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>Obtém ou define um valor que indica se o erro é um aviso.</summary>
      <returns>
        <see langword="true" /> se o erro for um aviso; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>Obtém ou define o número de linha em que a origem do erro ocorre.</summary>
      <returns>O número de linha do arquivo de origem em que o compilador encontrou o erro.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>Fornece uma implementação do método <see cref="M:System.Object.ToString" /> do objeto.</summary>
      <returns>Retorna uma representação de cadeia de caracteres do erro do compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>Representa uma coleção de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> .</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>Inicializa uma nova instância de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> contendo a matriz de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificada.</summary>
      <param name="value">Uma matriz de objetos <see cref="T:System.CodeDom.Compiler.CompilerError" /> com os quais inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contém o conteúdo do <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> especificado.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> com o qual inicializar a coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>Adiciona o objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado à coleção de erros.</summary>
      <param name="value">O objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser adicionado.</param>
      <returns>O índice no qual o novo elemento foi inserido.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>Copia os elementos de uma matriz para o final da coleção de erros.</summary>
      <param name="value">Uma matriz do tipo <see cref="T:System.CodeDom.Compiler.CompilerError" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Adiciona o conteúdo da coleção de erros de compilador especificada ao final da coleção de erros.</summary>
      <param name="value">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que contém os objetos a serem adicionados à coleção.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>Obtém um valor que indica se a coleção contém o objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado.</summary>
      <param name="value">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser localizado.</param>
      <returns>
        <see langword="true" /> se o item <see cref="T:System.CodeDom.Compiler.CompilerError" /> estiver contido na coleção; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>Copia os valores da coleção para uma instância de <see cref="T:System.Array" /> unidimensional no índice especificado.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos valores copiados do <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <param name="index">O índice na matriz no qual iniciar a cópia.</param>
      <exception cref="T:System.ArgumentException">A matriz indicada pelo parâmetro <paramref name="array" /> é multidimensional.
- ou -
O número de elementos na <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> é maior do que o espaço disponível entre o valor do índice do parâmetro <paramref name="arrayIndex" /> na matriz indicada pelo parâmetro <paramref name="array" /> e o final da matriz indicada pelo parâmetro <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentNullException">O parâmetro <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">O parâmetro <paramref name="index" /> é menor que o limite mínimo da matriz indicada pelo parâmetro <paramref name="array" />.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>Obtém um valor que indica se a coleção contém erros.</summary>
      <returns>
        <see langword="true" />se a coleção contiver erros; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>Obtém um valor que indica se a coleção contém avisos.</summary>
      <returns>
        <see langword="true" />se a coleção contiver avisos; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>Obtém o índice do objeto <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado na coleção, se ele existe na coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser localizado.</param>
      <returns>O índice do <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado no <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, se encontrado; caso contrário, -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>Insere o <see cref="T:System.CodeDom.Compiler.CompilerError" /> especificado na coleção, no índice especificado.</summary>
      <param name="index">O índice baseado em zero no qual o erro do compilador deve ser inserido.</param>
      <param name="value">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser inserido.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>Obtém ou define o <see cref="T:System.CodeDom.Compiler.CompilerError" /> no índice especificado.</summary>
      <param name="index">O índice baseado em zero da entrada a ser localizado na coleção.</param>
      <returns>A <see cref="T:System.CodeDom.Compiler.CompilerError" /> em cada índice válido.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">O valor de índice indicado pelo parâmetro <paramref name="index" /> está fora do intervalo válido de índices para a coleção.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>Remove um <see cref="T:System.CodeDom.Compiler.CompilerError" /> específico da coleção.</summary>
      <param name="value">O <see cref="T:System.CodeDom.Compiler.CompilerError" /> a ser removido de <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />.</param>
      <exception cref="T:System.ArgumentException">O objeto especificado não foi localizado na coleção.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>Representa as configurações de um provedor de idioma. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>Obtém o tipo de implementação <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> configurada.</summary>
      <returns>Uma instância <see cref="T:System.Type" /> de somente leitura que representa o tipo de provedor do idioma configurado.</returns>
      <exception cref="T:System.Configuration.ConfigurationException">O provedor de idioma não está configurado neste computador.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Não é possível localizar o tipo porque ele é um <see langword="null" /> ou uma cadeia de caracteres vazia.
- ou -
Não é possível localizar o tipo porque o nome para o <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> não pode ser encontrado no arquivo de configuração.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>Obtém as configurações de compilador definidas para a implementação de provedor de linguagem de programação.</summary>
      <returns>Uma instância <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> somente leitura que contém as opções de compilador e as configurações definidas para o provedor de linguagem de programação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>Retorna uma instância de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para as configurações de provedor de linguagem de programação atuais.</summary>
      <returns>Um provedor CodeDOM associado com a configuração do provedor de linguagem de programação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Retorna uma instância de <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> para as configurações de provedor de linguagem de programação atuais e as opções especificadas.</summary>
      <param name="providerOptions">Uma coleção de opções do provedor do arquivo de configuração.</param>
      <returns>Um provedor CodeDOM associado com a configuração do provedor de linguagem de programação e as opções especificadas.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> é <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">O provedor não dá suporte a opções.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>Determina se o objeto especificado representa as mesmas configurações do compilador e provedor de linguagem de programação que o <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> atual.</summary>
      <param name="o">O objeto a ser comparado com o <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> atual.</param>
      <returns>
        <see langword="true" /> se <paramref name="o" /> for um objeto <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> e seu valor for o mesmo que o dessa instância; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>Retorna as extensões de nome de arquivo com suporte pelo provedor de linguagem de programação.</summary>
      <returns>Uma matriz de extensões de nome de arquivo com suporte pelo provedor de linguagem de programação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>Retorna o código hash para a instância atual.</summary>
      <returns>Um código hash de inteiro com sinal de 32 bits para a instância atual de <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, adequado para uso em algoritmos de hash e estruturas de dados, tais como uma tabela de hash.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>Obtém os nomes de linguagens de programação com suporte pelo provedor de linguagem de programação.</summary>
      <returns>Uma matriz de nomes de linguagens de programação com suporte pelo provedor de linguagem de programação.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>Retorna um valor que indica se a implementação de provedor de linguagem de programação está configurada no computador.</summary>
      <returns>
        <see langword="true" />Se o tipo de implementação do provedor de idioma estiver configurado no computador; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>Representa os parâmetros usados para invocar um compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> usando os nomes de assembly especificados.</summary>
      <param name="assemblyNames">Os nomes dos assemblies a referenciar.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> usando os nomes de assembly e o nome do arquivo de saída especificados.</summary>
      <param name="assemblyNames">Os nomes dos assemblies a referenciar.</param>
      <param name="outputName">O nome do arquivo de saída.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> usando os nomes de assembly especificados, o nome de saída e um valor que indica se informações de depuração devem ou não ser incluídas.</summary>
      <param name="assemblyNames">Os nomes dos assemblies a referenciar.</param>
      <param name="outputName">O nome do arquivo de saída.</param>
      <param name="includeDebugInformation">
        <see langword="true" /> para incluir informações de depuração; <see langword="false" /> para excluir informações de depuração.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>Obtém ou define argumentos opcionais de linha de comando a serem usados ao invocar o compilador.</summary>
      <returns>Outros argumentos de linha de comando para o compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>Obtém ou define o nome do assembly padrão ou principal que contém tipos básicos como <see cref="T:System.Object" />, <see cref="T:System.String" /> ou <see cref="T:System.Int32" />.</summary>
      <returns>O nome do assembly principal que contém tipos básicos.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>Obtém os arquivos de recursos do .NET Framework a serem incluídos ao compilar a saída do assembly.</summary>
      <returns>Uma coleção que contém os caminhos de arquivo de recursos do .NET Framework a serem incluídos no assembly gerado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>Obtém ou define um valor que indica se um executável deve ser gerado.</summary>
      <returns>
        <see langword="true" /> se um executável precisar ser gerado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>Obtém ou define um valor que indica se a saída na memória deve ser gerada.</summary>
      <returns>
        <see langword="true" /> se o compilador deve gerar a saída na memória, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>Obtém ou define um valor que indica informações de depuração devem ou não ser incluídas no executável compilado.</summary>
      <returns>
        <see langword="true" /> se as informações de depuração devem ser geradas; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>Obtém os arquivos de recurso do .NET Framework que são referenciados na origem atual.</summary>
      <returns>Uma coleção que contém os caminhos de arquivo de .NET Framework recursos que são referenciados pela origem.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>Obtém ou define o nome da classe principal.</summary>
      <returns>O nome da classe principal.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>Obtém ou define o nome do assembly de saída.</summary>
      <returns>O nome do assembly de saída.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>Obtém os assemblies referenciados pelo projeto atual.</summary>
      <returns>Uma coleção que contém os nomes de assembly referenciados pela origem a se compilar.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>Obtém ou define a coleção que contém os arquivos temporários.</summary>
      <returns>Uma coleção que contém os arquivos temporários.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>Obtém ou define um valor que indica se avisos devem ou não ser tratados como erros.</summary>
      <returns>
        <see langword="true" /> se os avisos devem ser tratados como erros; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>Obtém ou define o token de usuário a ser usado ao criar o processo de compilador.</summary>
      <returns>O token de usuário a ser usado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>Obtém ou define o nível de aviso em que o compilador anula a compilação.</summary>
      <returns>O nível de aviso no qual o compilador anula a compilação.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>Obtém ou define o nome do arquivo de um arquivo de recurso Win32 a ser vinculado ao assembly compilado.</summary>
      <returns>Um arquivo de recurso do Win32 que será vinculado ao assembly compilado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>Representa os resultados de compilação retornados de um compilador.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que usa os arquivos temporários especificados.</summary>
      <param name="tempFiles">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>Obtém ou define o assembly compilado.</summary>
      <returns>Um <see cref="T:System.Reflection.Assembly" /> que indica que o assembly compilado.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>Obtém a coleção de avisos e erros do compilador.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> que indica os erros e avisos resultantes da compilação, se houver.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>Obtém ou define o valor retornado do compilador.</summary>
      <returns>O valor de retorno do compilador.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>Obtém as mensagens de saída do compilador.</summary>
      <returns>Um <see cref="T:System.Collections.Specialized.StringCollection" /> que contém as mensagens de saída.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>Obtém ou define o caminho do assembly compilado.</summary>
      <returns>O caminho do assembly ou <see langword="null" /> se o assembly foi gerado na memória.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>Obtém ou define a coleção de arquivos temporários a ser usada.</summary>
      <returns>Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>Fornece funções de execução do comando para invocar compiladores. Essa classe não pode ser herdada.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>Executa o comando usando os arquivos temporários especificados e aguarda até a chamada retornar.</summary>
      <param name="cmd">O comando a ser executado.</param>
      <param name="tempFiles">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executa o comando especificado usando o token do usuário indicado e os arquivos temporários, e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="userToken">O token com o qual iniciar o processo do compilador.</param>
      <param name="cmd">O comando a ser executado.</param>
      <param name="tempFiles">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns>O valor retornado do compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executa o comando especificado usando o token do usuário, o diretório atual e os arquivos temporários indicados e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="userToken">O token com o qual iniciar o processo do compilador.</param>
      <param name="cmd">O comando a ser executado.</param>
      <param name="currentDir">O diretório no qual iniciar o processo.</param>
      <param name="tempFiles">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns>O valor retornado do compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executa o comando especificado usando os arquivos temporários indicados e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="cmd">O comando a ser executado.</param>
      <param name="tempFiles">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns>O valor retornado do compilador.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Executa o comando especificado usando o diretório atual e os arquivos temporários indicados e aguarda o retorno da chamada, armazenando informações de saída e de erro do compilador nas cadeias de caracteres especificadas.</summary>
      <param name="cmd">O comando a ser executado.</param>
      <param name="currentDir">O diretório atual.</param>
      <param name="tempFiles">Um <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com o qual gerenciar e armazenar as referências em arquivos intermediários gerados durante a compilação.</param>
      <param name="outputName">Uma referência a uma cadeia de caracteres que armazenará a saída da mensagem do compilador.</param>
      <param name="errorName">Uma referência a uma cadeia de caracteres que armazenará o nome dos erros encontrados.</param>
      <returns>O valor retornado do compilador.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>Define identificadores usados para determinar se um gerador de código é compatível com determinados tipos de elementos de código.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>Indica que o gerador é compatível com matrizes de matrizes.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>Indica que o gerador é compatível com atributos de assembly.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>Indica que o gerador é compatível com argumentos de construtor encadeados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>Indica que o gerador é compatível com expressões complexas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>Indica que o gerador é compatível com declarações delegadas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>Indica que o gerador é compatível com declarações de enumeração.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>Indica que o gerador é compatível com declarações de evento.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>Indica que o gerador é compatível com declaração de propriedades de indexador.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>Indica que o gerador é compatível com declarações de interface.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>Indica que o gerador é compatível com declarações de tipo de valor.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>Indica que o gerador é compatível com uma designação de método de ponto de entrada de programa. Isso é usado ao compilar executáveis.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>Indica que o gerador é compatível com declarações de tipo genérico.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>Indica que o gerador é compatível com referências de tipo genérico.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>Indica que o gerador é compatível com instruções goto.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>Indica que o gerador é compatível com o referenciamento de matrizes multidimensionais. Atualmente, o CodeDom não pode ser usado para criar uma instância de matrizes multidimensionais.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>Indica que o gerador é compatível com declaração de membros que implementam várias interfaces.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>Indica que o gerador é compatível com declaração de tipos aninhados.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>Indica que o gerador é compatível com atributos de parâmetro.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>Indica que o gerador é compatível com declarações de tipo parcial.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>Indica que o gerador é compatível com membros estáticos públicos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>Indica a gerador é compatível com referência e parâmetros de saída.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>Indica que o gerador é compatível com a compilação com recursos do .NET Framework. Estes podem ser recursos padrão compilados diretamente em um assembly ou recursos referenciados em um assembly satélite.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>Indica que o gerador é compatível com declarações de atributo de tipo de retorno.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>Indica que o gerador é compatível com construtores estáticos.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>Indica que o gerador é compatível com instruções <see langword="try...catch" />.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>Indica que o gerador é compatível com a compilação com recursos do Win32.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>Define uma interface para invocar a compilação do código-fonte ou uma árvore CodeDOM usando um compilador específico.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Compila um assembly da árvore <see cref="N:System.CodeDom" /> contida no <see cref="T:System.CodeDom.CodeCompileUnit" /> especificado usando as configurações de compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="compilationUnit">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica o código a compilar.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Compila um assembly com base nas árvores <see cref="N:System.CodeDom" /> contidas na matriz especificada de objetos <see cref="T:System.CodeDom.CodeCompileUnit" />, usando as configurações de compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="compilationUnits">Uma matriz do tipo <see cref="T:System.CodeDom.CodeCompileUnit" /> que indica o código a ser compilado.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila um assembly do código-fonte contido no arquivo especificado usando as configurações de compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="fileName">O nome do arquivo que contém o código-fonte a compilar.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila um assembly do código-fonte contido nos arquivos especificados usando as configurações de compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="fileNames">Os nomes de arquivo dos arquivos a compilar.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Compila um assembly da cadeia de caracteres especificada que contém o código-fonte usando as configurações do compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="source">O código-fonte a compilar.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Compila um assembly da matriz especificada de cadeias de caracteres que contém o código-fonte, usando as configurações do compilador especificadas.</summary>
      <param name="options">Um objeto <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> que indica as configurações da compilação.</param>
      <param name="sources">As cadeias de caracteres de código-fonte a serem compiladas.</param>
      <returns>Um objeto <see cref="T:System.CodeDom.Compiler.CompilerResults" /> que indica os resultados da compilação.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>Define uma interface para gerar o código.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Cria um identificador de escape para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual criar um identificador de escape.</param>
      <returns>O identificador de escape para o valor.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Cria um identificador válido para o valor especificado.</summary>
      <param name="value">A cadeia de caracteres para a qual gerar um identificador válido.</param>
      <returns>Um identificador válido para o valor especificado.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a unidade de compilação CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeCompileUnit" /> para o qual o código deve ser gerado.</param>
      <param name="w">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a expressão CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeExpression" /> que indica a expressão para a qual gerar código.</param>
      <param name="w">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para o namespace CodeDOM (Modelo de Objeto do Documento de Código) especificado e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeNamespace" /> que indica o namespace para o qual gerar código.</param>
      <param name="w">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a instrução CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-o como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeStatement" /> que contém os elementos de CodeDOM a converter.</param>
      <param name="w">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Gera código para a declaração de tipo CodeDOM (Modelo de Objeto do Documento de Código) especificada e gera-a como saída para o text writer especificado, usando as opções especificadas.</summary>
      <param name="e">Um <see cref="T:System.CodeDom.CodeTypeDeclaration" /> que indica o tipo para o qual gerar código.</param>
      <param name="w">O <see cref="T:System.IO.TextWriter" /> para o qual codificar a saída.</param>
      <param name="o">Um <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> que indica as opções a serem usadas para gerar código.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Obtém o tipo indicado pelo <see cref="T:System.CodeDom.CodeTypeReference" /> especificado.</summary>
      <param name="type">Um <see cref="T:System.CodeDom.CodeTypeReference" /> que indica o tipo a retornar.</param>
      <returns>Uma representação de texto do tipo especificado para o idioma em que este gerador de código é projetado para gerar código. Por exemplo, no Visual Basic, passar o tipo System.Int32 retornará "Integer".</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>Obtém um valor que indica se o valor especificado é um identificador válido para a linguagem de programação atual.</summary>
      <param name="value">O valor a ser testado por ser um identificador válido.</param>
      <returns>
        <see langword="true" /> se o parâmetro <paramref name="value" /> é um identificador válido; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Obtém um valor que indica se o gerador dá suporte para os recursos de idioma representados pelo objeto <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />.</summary>
      <param name="supports">As funcionalidades para as quais testar o gerador.</param>
      <returns>
        <see langword="true" /> se os recursos especificados forem compatíveis; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>Gera uma exceção se o valor especificado não é um identificador válido.</summary>
      <param name="value">O identificador a ser validado.</param>
      <exception cref="T:System.ArgumentException">O identificador não é válido.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>Define uma interface para a análise de código em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>Quando implementado em uma classe derivada, compila o fluxo de texto especificado em um <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Um <see cref="T:System.IO.TextReader" /> que pode ser usado para ler o código a ser compilado.</param>
      <returns>Um <see cref="T:System.CodeDom.CodeCompileUnit" /> que contém uma representação do código analisado.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>Define identificadores que indicam recursos especiais de uma linguagem.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>A linguagem diferencia maiúsculas de minúsculas.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>A linguagem tem características padrão.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>Representa uma coleção de arquivos temporários.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> com valores padrão.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> usando o diretório temporário especificado que é definido para excluir os arquivos temporários após a geração e o uso, por padrão.</summary>
      <param name="tempDir">Um caminho para o diretório temporário a ser usado para armazenar os arquivos temporários.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>Inicializa uma nova instância da classe <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> usando o diretório temporário especificado e o valor especificado, que indica se deseja manter ou excluir os arquivos temporários após a geração e o uso, por padrão.</summary>
      <param name="tempDir">Um caminho para o diretório temporário a ser usado para armazenar os arquivos temporários.</param>
      <param name="keepFiles">
        <see langword="true" /> se os arquivos temporários devem ser mantidos após o uso, <see langword="false" /> se os arquivos temporários devem ser excluídos.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>Adiciona um nome de arquivo com a extensão de nome de arquivo especificada à coleção.</summary>
      <param name="fileExtension">A extensão de nome de arquivo para o nome do arquivo temporário gerado automaticamente a ser adicionado à coleção.</param>
      <returns>Um nome de arquivo com a extensão especificada que acabou de ser adicionado à coleção.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>Adiciona um nome de arquivo com a extensão de nome de arquivo especificada na coleção, usando o valor especificado que indica se o arquivo deve ser excluído ou retido.</summary>
      <param name="fileExtension">A extensão de nome de arquivo para o nome do arquivo temporário gerado automaticamente a ser adicionado à coleção.</param>
      <param name="keepFile">
        <see langword="true" /> se o arquivo deve ser mantido após o uso, <see langword="false" /> se o arquivo deve ser excluído.</param>
      <returns>Um nome de arquivo com a extensão especificada que acabou de ser adicionado à coleção.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>Adiciona o arquivo especificado na coleção, usando o valor especificado que indica se o arquivo deve ser mantido depois que a coleção é descartada ou quando o <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> método é chamado.</summary>
      <param name="fileName">O nome do arquivo a ser adicionado à coleção.</param>
      <param name="keepFile">
        <see langword="true" /> se o arquivo deve ser mantido após o uso, <see langword="false" /> se o arquivo deve ser excluído.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> é <see langword="null" /> ou é uma cadeia de caracteres vazia.
- ou -
<paramref name="fileName" /> é um duplicado.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>Obtém o caminho completo para o nome de arquivo base, sem uma extensão de nome de arquivo, no caminho de diretório temporário, usado para gerar nomes de arquivo temporários para a coleção.</summary>
      <returns>O caminho completo para o nome de arquivo base, sem uma extensão de nome de arquivo, no caminho de diretório temporário, usado para gerar nomes de arquivo temporários para a coleção.</returns>
      <exception cref="T:System.Security.SecurityException">Se a propriedade <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> não tiver sido definida ou for definida como <see langword="null" /> e <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> não for concedido ao diretório temporário indicado pela propriedade <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>Copia os membros da coleção para a cadeia de caracteres especificada, começando no índice especificado.</summary>
      <param name="fileNames">A matriz de cadeias de caracteres a ser copiada.</param>
      <param name="start">O índice da matriz em que a cópia deve começar.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>Obtém o número de arquivos na coleção.</summary>
      <returns>O número de arquivos na coleção.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>Exclui os arquivos temporários dentro desta coleção que não estavam marcados para ser mantidos.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>Libera os recursos não gerenciados usados pelo <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> e opcionalmente libera os recursos gerenciados.</summary>
      <param name="disposing">
        <see langword="true" /> para liberar recursos gerenciados e não gerenciados; <see langword="false" /> para liberar apenas recursos não gerenciados.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>Tenta excluir os arquivos temporários antes que esse objeto seja recuperado pela coleta de lixo.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>Obtém um enumerador que pode enumerar os membros da coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que contém os membros da coleção.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>Obtém ou define um valor que indica se os arquivos devem ser mantidos, por padrão, quando o método <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> é chamado ou a coleção é descartada.</summary>
      <returns>
        <see langword="true" />Se os arquivos devem ser mantidos; caso contrário <see langword="false" />,.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia os elementos da coleção para uma matriz, começando no índice especificado na matriz de destino.</summary>
      <param name="array">O <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados de <see cref="T:System.Collections.ICollection" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="start">O índice de base zero na matriz no qual a cópia começa.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>Obtém o número de elementos contidos na coleção.</summary>
      <returns>O número de elementos contidos no <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Obtém um valor que indica se o acesso à coleção é sincronizado (thread-safe).</summary>
      <returns>
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>Obtém um objeto que pode ser usado para sincronizar o acesso à coleção.</summary>
      <returns>Um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Retorna um enumerador que itera em uma coleção.</summary>
      <returns>Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>Realiza tarefas definidas pelo aplicativo associadas à liberação ou à redefinição de recursos não gerenciados.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>Obtém o diretório temporário para armazenar os arquivos temporários.</summary>
      <returns>O diretório temporário no qual armazenar os arquivos temporários.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>Define os identificadores usados para indicar a direção das declarações de parâmetro e argumento.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>Um campo de entrada.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>Um campo de saída.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>Um campo por referência.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>Define os identificadores de atributo de membro para membros de classe.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>Um membro abstrato.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>Uma máscara de acesso.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>Um membro que é acessível a qualquer classe dentro do mesmo assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>Um membro constante.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>Um membro que é acessível dentro da família de sua classe e classes derivadas.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>Um membro que é acessível dentro de sua classe e classes derivadas no mesmo assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>Um membro que é acessível dentro de sua classe, suas classes derivadas em qualquer assembly e qualquer classe no mesmo assembly.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>Um membro que não pode ser substituído em uma classe derivada.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>Um novo membro.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>Um membro sobrecarregado. Algumas linguagens, como Visual Basic, exigem que os membros sobrecarregados sejam indicados explicitamente.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>Um membro que substitui um membro da classe base.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>Um membro privado.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>Um membro público.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>Uma máscara de escopo.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>Um membro estático. No Visual Basic, isso é equivalente à palavra-chave <see langword="Shared" />.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>Uma máscara VTable.</summary>
    </member>
  </members>
</doc>
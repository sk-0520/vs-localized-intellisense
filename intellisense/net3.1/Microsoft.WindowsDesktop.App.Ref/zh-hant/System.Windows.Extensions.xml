<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Extensions</name>
  </assembly>
  <members>
    <member name="T:System.Drawing.FontConverter">
      <summary>將 <see cref="T:System.Drawing.Font" /> 物件從一個資料型別轉換為另一個資料型別。</summary>
    </member>
    <member name="M:System.Drawing.FontConverter.#ctor">
      <summary>初始化新的 <see cref="T:System.Drawing.FontConverter" /> 物件。</summary>
    </member>
    <member name="M:System.Drawing.FontConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別的物件轉換成轉換子的原生 (Native) 型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType">要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see langword="ITypeDescriptorContext" /> 物件。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</param>
      <returns>如果這個轉換子可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see langword="CultureInfo" /> 物件，指定用來表示字型的文化特性 (Culture)。</param>
      <param name="value">要轉換的物件。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法執行轉換。</exception>
    </member>
    <member name="M:System.Drawing.FontConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換為另一個型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，指定用來表示物件的文化特性。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要物件轉換的目的資料型別。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">轉換未成功。</exception>
    </member>
    <member name="M:System.Drawing.FontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>藉由使用指定的物件屬性值組，來建立這個型別的物件。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <param name="propertyValues">新屬性值的字典。 字典包含了一系列的名稱/值組，每一個都會從 <see cref="Overload:System.Drawing.FontConverter.GetProperties" /> 方法傳回一個屬性。</param>
      <returns>新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。
<see cref="M:System.Drawing.FontConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 對於建立擁有可變更屬性的不可變更物件非常有用。</returns>
    </member>
    <member name="T:System.Drawing.FontConverter.FontNameConverter">
      <summary>
        <see cref="T:System.Drawing.FontConverter.FontNameConverter" /> 是型別轉換子 (Type Converter)，用於在字型名稱和各種其他表示之間來回轉換。</summary>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.FontConverter.FontNameConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可以用來擷取環境的其他資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <param name="sourceType">要轉換的來源型別。</param>
      <returns>如果這個轉換器可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可以用來擷取環境的其他資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <param name="culture">要用於執行轉換的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要轉換的物件。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>擷取含有資料型別之標準值集的集合，這個轉換子是針對該資料型別所設計。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可以用來擷取環境的其他資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <returns>包含有效值之標準集的集合，或是 <see langword="null" />。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷從 <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" /> 方法所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可以用來擷取環境的其他資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <returns>如果從 <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" /> 傳回的集合是可能值的獨佔清單，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷這個物件是否支援可從清單選取的標準值集。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可以用來擷取環境的其他資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <returns>如果應該呼叫 <see cref="Overload:System.Drawing.FontConverter.FontNameConverter.GetStandardValues" /> 以尋找物件支援的通用值集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.FontNameConverter.System#IDisposable#Dispose">
      <summary>執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之應用程式定義的工作。</summary>
    </member>
    <member name="T:System.Drawing.FontConverter.FontUnitConverter">
      <summary>將字型單位與其他單位類型來回轉換。</summary>
    </member>
    <member name="M:System.Drawing.FontConverter.FontUnitConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.FontConverter.FontUnitConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.FontConverter.FontUnitConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>傳回對 <see cref="T:System.Drawing.Font" /> 型別有效的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
    </member>
    <member name="M:System.Drawing.FontConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷在這個物件上變更值是否需要呼叫 <see cref="Overload:System.Drawing.FontConverter.CreateInstance" /> 方法來建立新的值。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <returns>如果在對這個物件的一或多個屬性進行變更時應該呼叫 <see langword="true" /> 物件，則這個方法會傳回 <see langword="CreateInstance" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <param name="value">要為其取得屬性的物件的值。</param>
      <param name="attributes">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns>應該公開給這個資料型別的屬性集。 如果沒有屬性應該公開，則會傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。
這個方法的簡單實作可呼叫正確資料型別的 <see cref="Overload:System.ComponentModel.TypeConverter.GetProperties" /> 方法。</returns>
    </member>
    <member name="M:System.Drawing.FontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷這個物件是否支援屬性。 預設為 <see langword="false" />。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <returns>如果應該呼叫 <see cref="M:System.Drawing.FontConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)" /> 方法來尋找這個物件的屬性，則這個方法會傳回 <see langword="true" />，否則會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.IconConverter">
      <summary>將 <see cref="T:System.Drawing.Icon" /> 物件從某一個資料型別轉換為另一個資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件來存取。</summary>
    </member>
    <member name="M:System.Drawing.IconConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.IconConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.IconConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個 <see cref="T:System.Drawing.IconConverter" /> 是否可以使用指定內容，將指定型別的執行個體轉換為 <see cref="T:System.Drawing.Icon" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，指定您想要轉換的來源型別。</param>
      <returns>如果這個 <see cref="T:System.Drawing.IconConverter" /> 可以執行轉換，這個方法便會傳回 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.IconConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個 <see cref="T:System.Drawing.IconConverter" /> 是否可以使用指定內容將 <see cref="T:System.Drawing.Icon" /> 轉換為指定型別的執行個體。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，指定您想要轉換成的目的型別。</param>
      <returns>如果這個 <see cref="T:System.Drawing.IconConverter" /> 可以執行轉換，這個方法便會傳回 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.IconConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定物件轉換成 <see cref="T:System.Drawing.Icon" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，儲存特定文化特性 (Culture) 的資訊。</param>
      <param name="value">要轉換的 <see cref="T:System.Object" />。</param>
      <returns>如果這個方法成功，就會傳回由轉換指定物件所產生的 <see cref="T:System.Drawing.Icon" />。 否則，會擲回例外狀況。</returns>
      <exception cref="T:System.NotSupportedException">無法執行轉換。</exception>
    </member>
    <member name="M:System.Drawing.IconConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將 <see cref="T:System.Drawing.Icon" /> (或可以轉換成 <see cref="T:System.Drawing.Icon" /> 的物件) 轉換為指定型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，這個物件指定由特定文化特性 (Culture) 所使用的格式慣例。</param>
      <param name="value">要轉換的物件。 這個物件應該是圖示型別或是可以轉換為 <see cref="T:System.Drawing.Icon" /> 的某種型別。</param>
      <param name="destinationType">要將圖示轉換成哪一種型別。</param>
      <returns>這個方法傳回轉換過的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法執行轉換。</exception>
    </member>
    <member name="T:System.Drawing.ImageConverter">
      <summary>
        <see cref="T:System.Drawing.ImageConverter" /> 為類別，可用來將 <see cref="T:System.Drawing.Image" /> 物件從一種資料型別轉換成另一種資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件來存取。</summary>
    </member>
    <member name="M:System.Drawing.ImageConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.ImageConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.ImageConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個 <see cref="T:System.Drawing.ImageConverter" /> 是否可以使用指定內容，將指定型別的執行個體轉換為 <see cref="T:System.Drawing.Image" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，指定您想要轉換的來源型別。</param>
      <returns>如果這個 <see cref="T:System.Drawing.ImageConverter" /> 可以執行轉換，這個方法便會傳回 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ImageConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個 <see cref="T:System.Drawing.ImageConverter" /> 是否可以使用指定內容將 <see cref="T:System.Drawing.Image" /> 轉換為指定型別的執行個體。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，指定您想要轉換成的目的型別。</param>
      <returns>如果這個 <see cref="T:System.Drawing.ImageConverter" /> 可以執行轉換，這個方法便會傳回 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ImageConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定物件轉換成 <see cref="T:System.Drawing.Image" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，儲存特定文化特性 (Culture) 的資訊。</param>
      <param name="value">要轉換的 <see cref="T:System.Object" />。</param>
      <returns>如果這個方法成功，就會傳回由轉換指定物件所產生的 <see cref="T:System.Drawing.Image" />。 否則，會擲回例外狀況。</returns>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.ImageConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將 <see cref="T:System.Drawing.Image" /> (或可以轉換成 <see cref="T:System.Drawing.Image" /> 的物件) 轉換為指定型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的更多資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，這個物件指定由特定文化特性 (Culture) 所使用的格式慣例。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Drawing.Image" />。</param>
      <param name="destinationType">要將 <see cref="T:System.Type" /> 轉換成的目的 <see cref="T:System.Drawing.Image" />。</param>
      <returns>這個方法傳回轉換過的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.ImageConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>取得這個型別的屬性集。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <param name="value">要為其取得屬性的物件的值。</param>
      <param name="attributes">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns>應該公開給這個資料型別的屬性集。 如果沒有屬性應該公開，則會傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.ImageConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指示這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <returns>如果應該呼叫 <see cref="Overload:System.Drawing.ImageConverter.GetProperties" /> 方法來尋找這個物件的屬性，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.ImageFormatConverter">
      <summary>
        <see cref="T:System.Drawing.ImageFormatConverter" /> 為類別，可用來將 <see cref="T:System.Drawing.Imaging.ImageFormat" /> 物件從一種資料型別轉換成另一種資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件來存取。</summary>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.ImageFormatConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>指示這個轉換子是否可以將指定來源型別的物件轉換成轉換子的原生 (Native) 型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的更多資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType">要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出這個轉換子是否可以使用內容來將物件轉換成指定的目的型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，指定這個型別轉換的內容。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示您要轉換這個 <see cref="T:System.Drawing.Imaging.ImageFormat" /> 物件的目的型別。</param>
      <returns>如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換為 <see cref="T:System.Drawing.Imaging.ImageFormat" /> 物件。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的更多資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，指定特定文化特性所使用的格式慣例。</param>
      <param name="value">要轉換的物件。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換成指定的型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的更多資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，指定特定文化特性所使用的格式慣例。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <returns>轉換的物件。</returns>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 是 <see langword="null." /></exception>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得集合，含有用來設計這個驗證程式之資料型別的標準值集。 如果資料型別不支援標準值集，則傳回 <see langword="null" />。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的更多資訊，而這個轉換子就是從這個環境叫用的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <returns>集合 (包含有效值的標準集) 或 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.ImageFormatConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>指示這個物件是否支援可以從清單選取的值標準集。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <returns>如果 <see cref="Overload:System.Drawing.ImageFormatConverter.GetStandardValues" /> 方法必須呼叫來尋找物件支援的值通用集，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.Printing.MarginsConverter">
      <summary>為 <see cref="T:System.Drawing.Printing.MarginsConverter" /> 提供 <see cref="T:System.Drawing.Printing.Margins" />。</summary>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.Printing.MarginsConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換子是否可以使用指定內容將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換子是否可以使用內容將物件轉換成指定目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換之目的型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">提供轉換之目的語言的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不包含所有邊界 (共四個) 的值。 例如，「100,100,100,100」指定左、右、上方、下方邊界都是 1 英吋。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和引數將指定數值物件轉換成指定目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">提供轉換之目的語言的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要轉換數值目的的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>建立為物件提供一組屬性值的 <see cref="T:System.Object" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新屬性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>
        <see cref="T:System.Object" />，表示指定的 <see cref="T:System.Collections.IDictionary" />，但如果物件無法建立，則為 <see langword="null" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyValues" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Drawing.Printing.MarginsConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，傳回在這個物件上變更值時是否需要呼叫 <see cref="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法來建立新的值。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果在這個物件上變更屬性需要呼叫 <see cref="M:System.Drawing.Printing.MarginsConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 來建立新值，則為 <see langword="true" />，否則為 <see langword="false" />。 這個方法一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Media.SoundPlayer">
      <summary>控制 .wav 檔音效的播放。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor">
      <summary>初始化 <see cref="T:System.Media.SoundPlayer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.IO.Stream)">
      <summary>初始化 <see cref="T:System.Media.SoundPlayer" /> 類別的新執行個體，並將 .wav 檔附加到指定的 <see cref="T:System.IO.Stream" /> 中。</summary>
      <param name="stream">到 .wav 檔的 <see cref="T:System.IO.Stream" />。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Media.SoundPlayer" /> 類別的新執行個體。</summary>
      <param name="serializationInfo">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
      <exception cref="T:System.UriFormatException">無法解析在 <paramref name="serializationInfo" /> 中所指定的 <see cref="P:System.Media.SoundPlayer.SoundLocation" />。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Media.SoundPlayer" /> 類別的新執行個體，並附加指定的 .wav 檔。</summary>
      <param name="soundLocation">要載入 .wav 檔的位置。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="soundLocation" /> 指定的 URL 值無法解析。</exception>
    </member>
    <member name="P:System.Media.SoundPlayer.IsLoadCompleted">
      <summary>取得值，指出 .wav 檔的載入是否順利完成。</summary>
      <returns>如果已載入 .wav 檔，則為 <see langword="true" />，如果還沒載入 .wav 檔，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Media.SoundPlayer.Load">
      <summary>同步載入音效。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">載入時耗用的時間超過了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 所指定的時間 (以毫秒為單位)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.LoadAsync">
      <summary>使用新的執行緒，從資料流或 Web 資源載入 .wav 檔。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">載入時耗用的時間超過了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 所指定的時間 (以毫秒為單位)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案。</exception>
    </member>
    <member name="E:System.Media.SoundPlayer.LoadCompleted">
      <summary>當.wav 檔載入成功或載入失敗時都會發生。</summary>
    </member>
    <member name="P:System.Media.SoundPlayer.LoadTimeout">
      <summary>取得或設定時間，以毫秒為單位，表示 .wav 檔載入所須的時間。</summary>
      <returns>要等候的毫秒數。 預設值為 10000 (10 秒)。</returns>
    </member>
    <member name="M:System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>引發 <see cref="E:System.Media.SoundPlayer.LoadCompleted" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)">
      <summary>引發 <see cref="E:System.Media.SoundPlayer.SoundLocationChanged" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)">
      <summary>引發 <see cref="E:System.Media.SoundPlayer.StreamChanged" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.Play">
      <summary>使用新執行緒播放 .wav 檔，如果 .wav 檔還未載入則先將其載入。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">載入時耗用的時間超過了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 所指定的時間 (以毫秒為單位)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案。</exception>
      <exception cref="T:System.InvalidOperationException">.wav 標頭損毀，<see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案不是 PCM .wav 檔。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.PlayLooping">
      <summary>使用新執行緒重複循環播放 .wav 檔，如果 .wav 檔還未載入則先將其載入。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">載入時耗用的時間超過了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 所指定的時間 (以毫秒為單位)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案。</exception>
      <exception cref="T:System.InvalidOperationException">.wav 標頭損毀，<see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案不是 PCM .wav 檔。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.PlaySync">
      <summary>播放 .wav 檔案，如果 .wav 檔案還未載入則先將其載入。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">載入時耗用的時間超過了 <see cref="P:System.Media.SoundPlayer.LoadTimeout" /> 所指定的時間 (以毫秒為單位)。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案。</exception>
      <exception cref="T:System.InvalidOperationException">.wav 標頭損毀，<see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的檔案不是 PCM .wav 檔。</exception>
    </member>
    <member name="P:System.Media.SoundPlayer.SoundLocation">
      <summary>取得或設定要載入之 .wav 檔的檔案路徑或 URL。</summary>
      <returns>要由其載入 .wav 檔的檔案路徑或 URL，如果沒有檔案路徑，則是 <see cref="F:System.String.Empty" />。 預設為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="E:System.Media.SoundPlayer.SoundLocationChanged">
      <summary>當這個 <see cref="T:System.Media.SoundPlayer" /> 的新音效來源路徑設定後即會發生。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.Stop">
      <summary>如果已開始播放則停止播放音效。</summary>
    </member>
    <member name="P:System.Media.SoundPlayer.Stream">
      <summary>取得或設定要由其載入 .wav 檔的 <see cref="T:System.IO.Stream" />。</summary>
      <returns>如果沒有可用的資料流，則是要由其載入 .wav 檔的 <see cref="T:System.IO.Stream" />，或 <see langword="null" />。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="E:System.Media.SoundPlayer.StreamChanged">
      <summary>當這個 <see cref="T:System.IO.Stream" /> 的新 <see cref="T:System.Media.SoundPlayer" /> 音效來源設定後即會發生。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>如需這個成員的描述，請參閱 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法。</summary>
      <param name="info">要以資料填入的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">這個序列化的目的端 (請參閱 <see cref="T:System.Runtime.Serialization.StreamingContext" />)。</param>
    </member>
    <member name="P:System.Media.SoundPlayer.Tag">
      <summary>取得或設定 <see cref="T:System.Object" />，包含有關 <see cref="T:System.Media.SoundPlayer" /> 的資料。</summary>
      <returns>
        <see cref="T:System.Object" />，包含有關 <see cref="T:System.Media.SoundPlayer" /> 的資料。</returns>
    </member>
    <member name="T:System.Media.SystemSound">
      <summary>表示系統音效類型。</summary>
    </member>
    <member name="M:System.Media.SystemSound.Play">
      <summary>播放系統音效類型。</summary>
    </member>
    <member name="T:System.Media.SystemSounds">
      <summary>擷取與一組 Windows 作業系統音效事件類型關聯的音效。 這個類別無法被繼承。</summary>
    </member>
    <member name="P:System.Media.SystemSounds.Asterisk">
      <summary>取得目前 Windows 音效配置中，與 <see langword="Asterisk" /> 程式事件相關的音效。</summary>
      <returns>目前 Windows 音效配置中，與 <see langword="Asterisk" /> 程式事件相關的 <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Beep">
      <summary>取得目前 Windows 音效配置中，與 <see langword="Beep" /> 程式事件相關的音效。</summary>
      <returns>目前 Windows 音效配置中，與 <see langword="Beep" /> 程式事件相關的 <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Exclamation">
      <summary>取得目前 Windows 音效配置中，與 <see langword="Exclamation" /> 程式事件相關的音效。</summary>
      <returns>目前 Windows 音效配置中，與 <see langword="Exclamation" /> 程式事件相關的 <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Hand">
      <summary>取得目前 Windows 音效配置中，與 <see langword="Hand" /> 程式事件相關的音效。</summary>
      <returns>目前 Windows 音效配置中，與 <see langword="Hand" /> 程式事件相關的 <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Question">
      <summary>取得目前 Windows 音效配置中，與 <see langword="Question" /> 程式事件相關的音效。</summary>
      <returns>目前 Windows 音效配置中，與 <see langword="Question" /> 程式事件相關的 <see cref="T:System.Media.SystemSound" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2UI">
      <summary>顯示可允許您選取和檢視 X.509 憑證的使用者介面對話方塊。 這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2UI" /> 類別的執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.DisplayCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>顯示其中包含 X.509 憑證之屬性及其相關聯憑證鏈結的對話方塊。</summary>
      <param name="certificate">要顯示的 X.509 憑證。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="certificate" /> 參數無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.DisplayCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IntPtr)">
      <summary>使用父視窗的控制代碼來顯示其中包含 X.509 憑證之屬性和其相關聯憑證鏈結的對話方塊。</summary>
      <param name="certificate">要顯示的 X.509 憑證。</param>
      <param name="hwndParent">要用於顯示對話之父視窗的控制代碼。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="certificate" /> 參數無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.Security.Cryptography.X509Certificates.X509SelectionFlag)">
      <summary>顯示對話方塊，以供從憑證集合中選取 X.509 憑證。</summary>
      <param name="certificates">要從中選取的 X.509 憑證集合。</param>
      <param name="title">對話方塊的標題。</param>
      <param name="message">引導使用者的描述性訊息。  訊息會顯示在對話方塊中。</param>
      <param name="selectionFlag">其中一個 <see cref="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag" /> 值，指定是否允許單一選取或是多重選取。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 物件，包含選取的憑證。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="selectionFlag" /> 參數不是有效的旗標。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="certificates" /> 參數無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String,System.String,System.Security.Cryptography.X509Certificates.X509SelectionFlag,System.IntPtr)">
      <summary>顯示對話方塊，以供使用父視窗的控制代碼從憑證集合中選取 X.509 憑證。</summary>
      <param name="certificates">要從中選取的 X.509 憑證集合。</param>
      <param name="title">對話方塊的標題。</param>
      <param name="message">引導使用者的描述性訊息。  訊息會顯示在對話方塊中。</param>
      <param name="selectionFlag">其中一個 <see cref="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag" /> 值，指定是否允許單一選取或是多重選取。</param>
      <param name="hwndParent">要用於顯示對話方塊之父視窗的控制代碼。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 物件，包含選取的憑證。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="selectionFlag" /> 參數不是有效的旗標。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="certificates" /> 參數無效。</exception>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SelectionFlag">
      <summary>指定使用 <see cref="Overload:System.Security.Cryptography.X509Certificates.X509Certificate2UI.SelectFromCollection" /> 方法要求的選取型別。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SelectionFlag.MultiSelection">
      <summary>多重選取。 使用者可使用 SHIFT 或 CRTL 鍵選取多個 X.509 憑證。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SelectionFlag.SingleSelection">
      <summary>單一選取。 UI 可讓使用者選取一個 X.509 憑證。</summary>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>針對 XAML 載入目的，定義組件和型別的存取控制。</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所要求的組件傳回 <see cref="T:System.Reflection.Assembly" /> 執行個體。</summary>
      <param name="assembly">要求的組件。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assembly" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的來源資訊。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所要求的組件傳回 <see cref="T:System.Reflection.AssemblyName" /> 執行個體。</summary>
      <param name="assemblyName">要求的組件名稱。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assemblyName" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> 的來源資訊。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> 不是有效的完整組件名稱。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>取得組件的 <see cref="T:System.Reflection.AssemblyName" />，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此組件的使用權限。</summary>
      <returns>組件的 <see cref="T:System.Reflection.AssemblyName" />，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此組件的使用權限。</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>根據以限定名稱指定的特定型別，傳回 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體。</summary>
      <param name="assemblyQualifiedTypeName">剖析為組件限定型別名稱的字串。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="assemblyQualifiedTypeName" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 的來源資訊，並由型別上的反映來決定 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> 不是有效的組件限定型別名稱。
-或-
<paramref name="assemblyQualifiedTypeName" /> 內的組件名稱不是有效的組件名稱。</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>根據 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 所指定的特定型別，傳回 <see cref="T:System.Type" /> 執行個體。</summary>
      <param name="type">要求存取的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 執行個體，其中使用 <paramref name="type" /> 值做為 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> 的來源資訊，並由型別上的反映來決定 <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>取得型別的未限定字串名稱，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此型別的使用權限。</summary>
      <returns>型別的未限定字串名稱，這個 <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> 會決定此型別的使用權限。</returns>
    </member>
  </members>
</doc>
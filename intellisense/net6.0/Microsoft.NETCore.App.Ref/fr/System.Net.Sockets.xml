<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net.Sockets</name>
  </assembly>
  <members>
    <member name="T:System.Net.Sockets.IOControlCode">
      <summary>Spécifie les codes de contrôle d'E/S pris en charge par la méthode <see cref="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AbsorbRouterAlert">
      <summary>Cette valeur est égale à la constante SIO_ABSORB_RTRALERT de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddMulticastGroupOnInterface">
      <summary>Joint un groupe multicast à l'aide d'une interface identifiée par son index. Cette valeur est égale à la constante SIO_INDEX_ADD_MCAST de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListChange">
      <summary>Active la réception d'une notification en cas de modification de la liste des interfaces locales pour la famille de protocoles du socket. Cette valeur est égale à la constante SIO_ADDRESS_LIST_CHANGE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListQuery">
      <summary>Retourne la liste des interfaces locales auxquelles le socket peut se lier. Cette valeur est égale à la constante SIO_ADDRESS_LIST_QUERY de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListSort">
      <summary>Trie la structure retournée par le champ <see cref="F:System.Net.Sockets.IOControlCode.AddressListQuery" /> et ajoute les informations sur l'ID de portée pour les adresses IPv6. Ce code de contrôle est pris en charge sur les systèmes d'exploitation Windows XP et versions ultérieures. Cette valeur est égale à la constante SIO_ADDRESS_LIST_SORT de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AssociateHandle">
      <summary>Associe ce socket au handle spécifié d'une interface connexe. Pour plus d’informations, reportez-vous à l’annexe spécifique au protocole correspondante dans la référence ou la documentation de Winsock 2 pour l’interface connexe particulière. Il est recommandé d'utiliser le modèle COM (Component Object Model) plutôt que cet IOCTL pour rechercher et assurer le suivi d'autres interfaces pouvant être prises en charge par un socket. Ce code de contrôle est fourni à des fins de compatibilité descendante avec les systèmes où le modèle COM n'est pas disponible ou ne peut pas être utilisé pour toute autre raison. Cette valeur est égale à la constante SIO_ASSOCIATE_HANDLE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AsyncIO">
      <summary>Active la notification lorsque des données sont en attente de réception. Cette valeur est égale à la constante FIOASYNC de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.BindToInterface">
      <summary>Lie le socket à un index d'interface spécifié. Cette valeur est égale à la constante SIO_INDEX_BIND de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DataToRead">
      <summary>Retourne le nombre d'octets disponible pour la lecture. Cette valeur est égale à la constante FIONREAD de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DeleteMulticastGroupFromInterface">
      <summary>Supprime le socket d'un groupe multicast. Cette valeur est égale à la constante SIO_INDEX_ADD_MCAST de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.EnableCircularQueuing">
      <summary>Remplace le datagramme le plus ancien de la file d'attente par un datagramme entrant lorsque les files d'attente des messages entrants sont saturées. Cette valeur est égale à la constante SIO_ENABLE_CIRCULAR_QUEUEING de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.Flush">
      <summary>Ignore le contenu de la file d'attente émettrice. Cette valeur est égale à la constante SIO_FLUSH de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetBroadcastAddress">
      <summary>Retourne une structure SOCKADDR qui contient l'adresse de diffusion pour la famille d'adresses du socket actuel. L'adresse retournée peut être utilisée avec la méthode <see cref="Overload:System.Net.Sockets.Socket.SendTo" />. Cette valeur est égale à la constante SIO_GET_BROADCAST_ADDRESS de Winsock 2. Cette valeur ne peut être utilisée que sur les sockets UDP (User Datagram Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetExtensionFunctionPointer">
      <summary>Obtient des fonctions spécifiques au fournisseur qui ne font pas partie de la spécification Winsock. Les fonctions sont spécifiées à l'aide de le GUID assigné par leur fournisseur. Cette valeur est égale à la constante SIO_GET_EXTENSION_FUNCTION_POINTER de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetGroupQos">
      <summary>Retourne les attributs de qualité de service (Quality of Service, QOS) pour le groupe de sockets. Cette valeur est réservée à une utilisation ultérieure et est égale à la constante SIO_GET_GROUP_QOS de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetQos">
      <summary>Récupère la structure QOS associée au socket. Ce contrôle est pris en charge uniquement sur les plateformes qui fournissent un transport compatible avec QOS (Windows Me, Windows 2000 et ultérieur). Cette valeur est égale à la constante SIO_GET_QOS de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.KeepAliveValues">
      <summary>Contrôle l'envoi de paquets TCP persistants et l'intervalle auquel ils sont envoyés. Pour plus d'informations, consultez la section 4.2.3.6 de la RFC 1122. Cette valeur est égale à la constante SIO_KEEPALIVE_VALS de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.LimitBroadcasts">
      <summary>Cette valeur est égale à la constante SIO_LIMIT_BROADCASTS de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastInterface">
      <summary>Définit l'interface utilisée pour les paquets multicast sortants. L'interface est identifiée par son index.  Cette valeur est égale à la constante SIO_INDEX_MCASTIF de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastScope">
      <summary>Contrôle le nombre de fois qu'un paquet multicast peut être transféré par un routeur, également connu sous le nom de TTL (Time to Live) ou de nombre de sauts. Cette valeur est égale à la constante SIO_MULTICAST_SCOPE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MultipointLoopback">
      <summary>Contrôle si les données multicast envoyées par le socket apparaissent en tant que données entrantes dans la file d'attente de réception des sockets. Cette valeur est égale à la constante SIO_MULTIPOINT_LOOPBACK de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NamespaceChange">
      <summary>Contrôle si le socket reçoit une notification lorsqu'une requête d'espace de noms devient non valide. Ce code de contrôle est pris en charge sur les systèmes d'exploitation Windows XP et versions ultérieures. Cette valeur est égale à la constante SIO_NSP_NOTIFY_CHANGE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NonBlockingIO">
      <summary>Contrôle le comportement bloquant du socket. Si l'argument spécifié avec ce code de contrôle est nul, le socket passe en mode blocage. Si l'argument est différent de zéro, le socket passe en mode non bloquant. Cette valeur est égale à la constante FIONBIO de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.OobDataRead">
      <summary>Retourne des informations relatives aux données hors bande en attente de réception. Lors de l'utilisation de code de contrôle sur des sockets flux, la valeur de retour indique le nombre d'octets disponible.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.QueryTargetPnpHandle">
      <summary>Récupère le handle SOCKET du fournisseur sous-jacent. Ce handle peut être utilisé pour recevoir une notification en cas d'événement Plug-and-Play. Cette valeur est égale à la constante SIO_QUERY_TARGET_PNP_HANDLE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAll">
      <summary>Active la réception de tous les paquets IPv4 sur le réseau. Le socket doit posséder la famille d'adresses <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, le type de socket doit être <see cref="F:System.Net.Sockets.SocketType.Raw" /> et le type de protocole doit être <see cref="F:System.Net.Sockets.ProtocolType.IP" />. L'utilisateur actuel doit appartenir au groupe d'administrateurs sur l'ordinateur local, et le socket doit être lié à un port spécifique. Cette valeur est égale à la constante SIO_RCVALL de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllIgmpMulticast">
      <summary>Active la réception de tous les paquets IGMP (Internet Group Management Protocol) sur le réseau. Le socket doit posséder la famille d'adresses <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, le type de socket doit être <see cref="F:System.Net.Sockets.SocketType.Raw" /> et le type de protocole doit être <see cref="F:System.Net.Sockets.ProtocolType.Igmp" />. L'utilisateur actuel doit appartenir au groupe d'administrateurs sur l'ordinateur local, et le socket doit être lié à un port spécifique. Cette valeur est égale à la constante SIO_RCVALL_IGMPMCAST de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllMulticast">
      <summary>Active la réception de tous les paquets IPv4 multicast sur le réseau. Il s'agit des paquets possédant des adresses de destination comprises entre 224.0.0.0 et 239.255.255.255. Le socket doit posséder la famille d'adresses <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, le type de socket doit être <see cref="F:System.Net.Sockets.SocketType.Raw" /> et le type de protocole doit être <see cref="F:System.Net.Sockets.ProtocolType.Udp" />. L'utilisateur actuel doit appartenir au groupe d'administrateurs sur l'ordinateur local, et le socket doit être lié à un port spécifique. Cette valeur est égale à la constante SIO_RCVALL_MCAST de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceChange">
      <summary>Active la réception d'une notification en cas de modification de l'interface locale utilisée pour accéder à un point de terminaison distant. Cette valeur est égale à la constante SIO_ROUTING_INTERFACE_CHANGE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceQuery">
      <summary>Retourne les adresses d'interface qui peuvent être utilisées pour se connecter à l'adresse distante spécifiée. Cette valeur est égale à la constante SIO_ROUTING_INTERFACE_QUERY de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetGroupQos">
      <summary>Définit les attributs de qualité (Quality of Service, QOS) de service pour le groupe de sockets. Cette valeur est réservée à une utilisation ultérieure et est égale à la constante SIO_SET_GROUP_QOS de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetQos">
      <summary>Définit les attributs de qualité de service (Quality of Service, SOS) pour le socket. QOS définit les exigences du socket en matière de bande passante. Cette valeur est égale à la constante SIO_SET_QOS de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.TranslateHandle">
      <summary>Retourne un handle pour le socket qui est valide dans le contexte d'une interface connexe. Cette valeur est égale à la constante SIO_TRANSLATE_HANDLE de Winsock 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.UnicastInterface">
      <summary>Définit l'interface utilisée pour les paquets monodiffusion sortants. Cette valeur est égale à la constante SIO_UCAST_IF de Winsock 2.</summary>
    </member>
    <member name="T:System.Net.Sockets.IPPacketInformation">
      <summary>Présente les informations relatives au paquet d'un appel à <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> ou <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="comparand">Objet à comparer avec cette instance.</param>
      <returns>
        <see langword="true" /> si <paramref name="comparand" /> est une instance de <see cref="T:System.Net.Sockets.IPPacketInformation" /> et équivaut à la valeur de l'instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage Int32.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>Teste si deux instances de <see cref="T:System.Net.Sockets.IPPacketInformation" /> spécifiées sont équivalentes.</summary>
      <param name="packetInformation1">Instance de <see cref="T:System.Net.Sockets.IPPacketInformation" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="packetInformation2">Instance de <see cref="T:System.Net.Sockets.IPPacketInformation" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="packetInformation1" /> et <paramref name="packetInformation2" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>Teste si deux instances de <see cref="T:System.Net.Sockets.IPPacketInformation" /> spécifiées ne sont pas égales.</summary>
      <param name="packetInformation1">Instance de <see cref="T:System.Net.Sockets.IPPacketInformation" /> figurant à gauche de l'opérateur d'inégalité.</param>
      <param name="packetInformation2">Instance de <see cref="T:System.Net.Sockets.IPPacketInformation" /> figurant à droite de l'opérateur d'inégalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="packetInformation1" /> et <paramref name="packetInformation2" /> sont inégaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Address">
      <summary>Obtient les informations d'origine du paquet qui a été reçu en appelant les méthodes <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> ou <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />.</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> qui indique les informations d'origine du paquet qui a été reçu en appelant les méthodes <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> ou <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />. Pour les paquets qui ont été envoyés à partir d'une adresse unicast, la propriété <see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> retourne l'<see cref="T:System.Net.IPAddress" /> de l'expéditeur ; pour les paquets multicast ou de diffusion, la propriété <see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> retourne l'<see cref="T:System.Net.IPAddress" /> multicast ou de diffusion.</returns>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Interface">
      <summary>Obtient les informations d'interface réseau associées à un appel à <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> ou <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />.</summary>
      <returns>Valeur <see cref="T:System.Int32" />, qui représente l'index de l'interface réseau. Vous pouvez utiliser cet index avec <see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" /> pour obtenir plus d'informations à propos de l'interface appropriée.</returns>
    </member>
    <member name="T:System.Net.Sockets.IPProtectionLevel">
      <summary>Valeur qui autorise la restriction d'un socket IPv6 à une portée spécifiée, telle que les adresses utilisant le même préfixe de lien local ou de site local.</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.EdgeRestricted">
      <summary>Le niveau de protection IP est limité à un périmètre donné. Cette valeur peut être utilisée par les applications conçues pour fonctionner sur Internet. Ce paramètre n'autorise pas la traversée du traducteur d'adresses réseau (NAT) à l'aide de l'implémentation de Windows Teredo. Ces applications peuvent contourner les pare-feux IPv4 ; elles doivent donc être renforcées contre les attaques Internet dirigées sur le port ouvert. Sous Windows Server 2003 et Windows XP, la valeur par défaut pour le niveau de protection IP sur un socket est Périmètre limité.</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Restricted">
      <summary>Le niveau de protection IP est limité. Cette valeur peut être utilisée par les applications intranet qui n'implémentent pas de scénarios Internet. Ces applications ne sont généralement pas testées ou renforcées contre les attaques Internet. Ce paramètre limitera uniquement le trafic reçu aux liens locaux.</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Unrestricted">
      <summary>Le niveau de protection IP est illimité. Cette valeur peut être utilisée par les applications conçues pour fonctionner sur Internet, notamment les applications qui tirent parti des fonctions de traversée NAT IPv6 intégrées à Windows (Teredo, par exemple). Ces applications peuvent contourner les pare-feux IPv4 ; elles doivent donc être renforcées contre les attaques Internet dirigées sur le port ouvert. Sous Windows Server 2008 R2 et Windows Vista, la valeur par défaut pour le niveau de protection IP sur un socket est illimitée.</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Unspecified">
      <summary>Le niveau de protection IP n'est pas spécifié. Sous Windows 7 et Windows Server 2008 R2, la valeur par défaut pour le niveau de protection IP sur un socket n'est pas spécifiée.</summary>
    </member>
    <member name="T:System.Net.Sockets.IPv6MulticastOption">
      <summary>Contient des valeurs d'option pour joindre un groupe multicast IPv6.</summary>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>Initialise une nouvelle version de la classe <see cref="T:System.Net.Sockets.IPv6MulticastOption" /> pour le groupe de multidiffusion IP spécifié.</summary>
      <param name="group">
        <see cref="T:System.Net.IPAddress" /> du groupe de multidiffusion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.IPv6MulticastOption" /> avec l'adresse de groupe multicast IP et l'adresse d'interface locale.</summary>
      <param name="group">Groupe <see cref="T:System.Net.IPAddress" />.</param>
      <param name="ifindex">Adresse d'interface locale.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ifindex" /> est inférieur à 0.  
  
- ou - 
 <paramref name="ifindex" /> est supérieur à 0x00000000FFFFFFFF.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.Group">
      <summary>Obtient ou définit l’adresse IP d’un groupe de multidiffusion.</summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> a la valeur <see langword="null" />.</exception>
      <returns>
        <see cref="T:System.Net.IPAddress" /> contenant l'adresse Internet d'un groupe multicast.</returns>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.InterfaceIndex">
      <summary>Obtient ou définit l'index de l'interface qui est associée à un groupe multicast.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur qui est spécifiée pour une opération définie est inférieure à 0 ou supérieure à 0x00000000FFFFFFFF.</exception>
      <returns>Valeur <see cref="T:System.UInt64" /> qui spécifie l'adresse de l'interface.</returns>
    </member>
    <member name="T:System.Net.Sockets.LingerOption">
      <summary>Spécifie si un <see cref="T:System.Net.Sockets.Socket" /> restera connecté après un appel aux méthodes <see cref="M:System.Net.Sockets.Socket.Close" /> ou <see cref="M:System.Net.Sockets.TcpClient.Close" />, ainsi que la durée pendant laquelle il restera connecté s'il reste des données à envoyer.</summary>
    </member>
    <member name="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.LingerOption" />.</summary>
      <param name="enable">
        <see langword="true" /> pour rester connecté après avoir appelé la méthode <see cref="M:System.Net.Sockets.Socket.Close" /> ; sinon <see langword="false" />.</param>
      <param name="seconds">Nombre de secondes restant avant la déconnexion après avoir appelé la méthode <see cref="M:System.Net.Sockets.Socket.Close" />.</param>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.Enabled">
      <summary>Obtient ou définit une valeur qui indique s'il faut attendre ou non après la fermeture de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> doit attendre l'appel de la méthode <see cref="M:System.Net.Sockets.Socket.Close" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.LingerTime">
      <summary>Obtient ou définit la durée de maintien de la connexion une fois la méthode <see cref="M:System.Net.Sockets.Socket.Close" /> appelée s'il reste des données à envoyer.</summary>
      <returns>La durée, en secondes, restant avant la déconnexion après avoir appelé <see cref="M:System.Net.Sockets.Socket.Close" />.</returns>
    </member>
    <member name="T:System.Net.Sockets.MulticastOption">
      <summary>Contient les valeurs <see cref="T:System.Net.IPAddress" /> utilisées pour joindre et supprimer des groupes de multidiffusion.</summary>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>Initialise une nouvelle version de la classe <see cref="T:System.Net.Sockets.MulticastOption" /> pour le groupe de multidiffusion IP spécifié.</summary>
      <param name="group">Adresse IP du groupe en multidiffusion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.MulticastOption" /> avec l’adresse de groupe de multidiffusion IP et l’index d’interface spécifiés.</summary>
      <param name="group">Adresse IP du groupe en multidiffusion.</param>
      <param name="interfaceIndex">Index de l’interface utilisée pour envoyer et recevoir des paquets en multidiffusion.</param>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.MulticastOption" /> avec l’adresse de groupe de multidiffusion IP spécifiée et l’adresse IP locale associée à une interface réseau.</summary>
      <param name="group">Adresse IP du groupe.</param>
      <param name="mcint">Adresse IP locale.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="mcint" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.Group">
      <summary>Obtient ou définit l’adresse IP d’un groupe de multidiffusion.</summary>
      <exception cref="T:System.ArgumentNullException">.NET 5.0 et versions utlérieures : <paramref name="group" /> est <see langword="null" />.</exception>
      <returns>Adresse IP d’un groupe multicast.</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.InterfaceIndex">
      <summary>Obtient ou définit l’index de l’interface utilisée pour envoyer et recevoir des paquets en multidiffusion.</summary>
      <returns>Index d’un <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> élément de tableau.</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.LocalAddress">
      <summary>Obtient ou définit l’adresse locale associée à un groupe de multidiffusion.</summary>
      <returns>Adresse locale associée à un groupe multicast.</returns>
    </member>
    <member name="T:System.Net.Sockets.NetworkStream">
      <summary>Fournit le flux de données sous-jacent pour l’accès réseau.</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
      <summary>Crée une nouvelle instance de la classe <see cref="T:System.Net.Sockets.NetworkStream" /> pour le <see cref="T:System.Net.Sockets.Socket" /> spécifié.</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> qu'utilisera <see cref="T:System.Net.Sockets.NetworkStream" /> pour envoyer et recevoir des données.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="socket" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Le paramètre <paramref name="socket" /> n'est pas connecté.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.SocketType" /> du paramètre <paramref name="socket" /> n'a pas la valeur <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- ou - 
Le paramètre <paramref name="socket" /> est dans un état non bloquant.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.NetworkStream" /> pour le <see cref="T:System.Net.Sockets.Socket" /> spécifié avec l'appartenance <see cref="T:System.Net.Sockets.Socket" /> spécifiée.</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> qu'utilisera <see cref="T:System.Net.Sockets.NetworkStream" /> pour envoyer et recevoir des données.</param>
      <param name="ownsSocket">A la valeur <see langword="true" /> pour indiquer que <see cref="T:System.Net.Sockets.NetworkStream" /> prendra possession de <see cref="T:System.Net.Sockets.Socket" /> ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="socket" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Le paramètre <paramref name="socket" /> n'est pas connecté.  
  
- ou - 
la propriété <see cref="P:System.Net.Sockets.Socket.SocketType" /> du paramètre <paramref name="socket" /> n'a pas la valeur <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- ou - 
le paramètre <paramref name="socket" /> est dans un état non bloquant.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
      <summary>Crée une nouvelle instance de la classe <see cref="T:System.Net.Sockets.NetworkStream" /> pour le <see cref="T:System.Net.Sockets.Socket" /> spécifié possédant les droits d'accès donnés.</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> qu'utilisera <see cref="T:System.Net.Sockets.NetworkStream" /> pour envoyer et recevoir des données.</param>
      <param name="access">Combinaison d'opérations de bits des valeurs <see cref="T:System.IO.FileAccess" /> qui spécifie le type d'accès accordé à <see cref="T:System.Net.Sockets.NetworkStream" /> sur le <see cref="T:System.Net.Sockets.Socket" /> fourni.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="socket" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Le paramètre <paramref name="socket" /> n'est pas connecté.  
  
- ou - 
la propriété <see cref="P:System.Net.Sockets.Socket.SocketType" /> du paramètre <paramref name="socket" /> n'a pas la valeur <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- ou - 
le paramètre <paramref name="socket" /> est dans un état non bloquant.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
      <summary>Crée une instance de la classe <see cref="T:System.Net.Sockets.NetworkStream" /> pour le <see cref="T:System.Net.Sockets.Socket" /> spécifié possédant les droits d'accès et l'appartenance <see cref="T:System.Net.Sockets.Socket" /> donnés.</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> qu'utilisera <see cref="T:System.Net.Sockets.NetworkStream" /> pour envoyer et recevoir des données.</param>
      <param name="access">Combinaison d'opérations de bits des valeurs <see cref="T:System.IO.FileAccess" /> qui spécifie le type d'accès accordé à <see cref="T:System.Net.Sockets.NetworkStream" /> sur le <see cref="T:System.Net.Sockets.Socket" /> fourni.</param>
      <param name="ownsSocket">A la valeur <see langword="true" /> pour indiquer que <see cref="T:System.Net.Sockets.NetworkStream" /> prendra possession de <see cref="T:System.Net.Sockets.Socket" /> ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="socket" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Le paramètre <paramref name="socket" /> n'est pas connecté.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.SocketType" /> du paramètre <paramref name="socket" /> n'a pas la valeur <see cref="F:System.Net.Sockets.SocketType.Stream" />.  
  
- ou - 
Le paramètre <paramref name="socket" /> est dans un état non bloquant.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une lecture asynchrone de <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui correspond à l'emplacement dans la mémoire pour stocker des données lues à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="offset">Emplacement de <paramref name="buffer" /> auquel commencer le stockage des données.</param>
      <param name="size">Nombre d'octets à lire à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> exécuté lorsque <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> se termine.</param>
      <param name="state">Objet contenant toutes les données supplémentaires définies par l'utilisateur.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="offset" /> est supérieure à la longueur du paramètre <paramref name="buffer" />.  
  
- ou - 
<paramref name="size" /> est inférieur à 0.  
  
- ou - 
<paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.IO.IOException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent est fermé.  
  
- ou - 
Une erreur s'est produite pendant la lecture à partir du réseau.  
  
- ou - 
Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui représente l'appel asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une écriture asynchrone dans un flux.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="offset">Emplacement de <paramref name="buffer" /> auquel commencer l'envoi des données.</param>
      <param name="size">Nombre d'octets à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> exécuté lorsque <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> se termine.</param>
      <param name="state">Objet contenant toutes les données supplémentaires définies par l'utilisateur.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
Le paramètre <paramref name="size" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.IO.IOException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent est fermé.  
  
- ou - 
Une erreur s'est produite pendant l'écriture sur le réseau.  
  
- ou - 
Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui représente l'appel asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
      <summary>Ferme <see cref="T:System.Net.Sockets.NetworkStream" /> après avoir attendu le temps spécifié pour permettre l'envoi des données.</summary>
      <param name="timeout">Entier signé 32 bits qui spécifie le nombre de millisecondes à attendre avant d'envoyer les données restantes éventuelles, préalablement à la fermeture.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="timeout" /> est inférieur à -1.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Net.Sockets.NetworkStream" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
      <summary>Gère la fin d'une lecture asynchrone.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui représente un appel asynchrone.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent est fermé.  
  
- ou - 
Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Nombre d'octets lus à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
      <summary>Gère la fin d'une écriture asynchrone.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui représente l'appel asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.IO.IOException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent est fermé.  
  
- ou - 
Une erreur s'est produite pendant l'écriture sur le réseau.  
  
- ou - 
Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Finalize">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Flush">
      <summary>Vide les données du flux. Cette méthode est réservée à une utilisation ultérieure.</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Vide les données du flux en tant qu'opération asynchrone.</summary>
      <param name="cancellationToken">Jeton d’annulation utilisé pour propager la notification d’annulation de cette opération.</param>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> et les stocke dans un tableau d’octets.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui correspond à l'emplacement dans la mémoire pour stocker des données lues à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="offset">Emplacement de <paramref name="buffer" /> auquel commencer le stockage des données.</param>
      <param name="size">Nombre d'octets à lire à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins <paramref name="offset" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant la lecture à partir du réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Nombre d'octets lus à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Read(System.Span{System.Byte})">
      <summary>Lit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> et les stocke dans une plage d’octets en mémoire.</summary>
      <param name="buffer">Zone de mémoire pour stocker les données lues à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant la lecture à partir du réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Nombre d'octets lus à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> et les stocke dans une plage spécifiée d’un tableau d’octets en tant qu’opération asynchrone.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="offset">Emplacement de <paramref name="buffer" /> auquel commencer le stockage des données.</param>
      <param name="size">Nombre d'octets à lire à partir de <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant la lecture à partir du réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur de sa propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> contient le nombre total d’octets lus dans <paramref name="buffer" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
      <summary>Lit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> et les stocke dans une plage de mémoire d’octets en tant qu’opération asynchrone.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant la lecture à partir du réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Tâche <see cref="T:System.Threading.Tasks.ValueTask`1" /> qui représente l'opération de lecture asynchrone. La valeur de sa propriété <see cref="P:System.Threading.Tasks.ValueTask`1.Result" /> contient le nombre total d’octets lus dans <paramref name="buffer" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.ReadByte">
      <summary>Lit un octet dans <see cref="T:System.Net.Sockets.NetworkStream" /> et avance d’un octet la position au sein du flux, ou retourne -1 si la fin du flux a été atteinte.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant la lecture à partir du réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Conversion de type (transtypage) de l'octet non signé en <see cref="T:System.Int32" />, ou -1 si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Affecte la valeur donnée à la position actuelle du flux. Cette méthode n'est pas actuellement prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="offset">Ce paramètre n'est pas utilisé.</param>
      <param name="origin">Ce paramètre n'est pas utilisé.</param>
      <exception cref="T:System.NotSupportedException">Toute utilisation de cette propriété.</exception>
      <returns>Position dans le flux.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
      <summary>Définit la longueur du flux. Cette méthode lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <param name="value">Ce paramètre n'est pas utilisé.</param>
      <exception cref="T:System.NotSupportedException">Toute utilisation de cette propriété.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Écrit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> à partir d’une plage spécifiée d’un tableau d’octets.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="offset">Emplacement de <paramref name="buffer" /> à partir duquel commencer à écrire les données.</param>
      <param name="size">Nombre d'octets à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
Le paramètre <paramref name="size" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant l'écriture sur le réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Write(System.ReadOnlySpan{System.Byte})">
      <summary>Écrit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> à partir d’une plage d’octets en lecture seule.</summary>
      <param name="buffer">Données à écrire dans le <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant l'écriture sur le réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Écrit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> à partir d’une plage spécifiée d’un tableau d’octets en tant qu’opération asynchrone.</summary>
      <param name="buffer">Tableau d’octets qui contient les données à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="offset">Emplacement de <paramref name="buffer" /> à partir duquel commencer à écrire les données.</param>
      <param name="size">Nombre d'octets à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
Le paramètre <paramref name="size" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s'est produite pendant l'écriture sur le réseau.  
  
 - ou -  
  
 Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
      <summary>Écrit des données dans <see cref="T:System.Net.Sockets.NetworkStream" /> à partir d’une plage de mémoire d’octets en mémoire en lecture seule en tant qu’opération asynchrone.</summary>
      <param name="buffer">Zone de mémoire qui contient les données à écrire dans <see cref="T:System.Net.Sockets.NetworkStream" />.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant l'écriture sur le réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.WriteByte(System.Byte)">
      <summary>Écrit un octet à la position actuelle dans <see cref="T:System.Net.Sockets.NetworkStream" /> et avance d’un octet la position dans le flux.</summary>
      <param name="value">Octet à écrire dans le flux.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.IO.IOException">Une erreur s’est produite pendant l’accès au socket.

- ou -

Une erreur s'est produite pendant l'écriture sur le réseau.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanRead">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Net.Sockets.NetworkStream" /> prend en charge la lecture.</summary>
      <returns>
        <see langword="true" /> si les données du flux peuvent être lues ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
      <summary>Obtient une valeur qui indique si le flux prend en charge la recherche. Cette propriété n'est pas prise en charge actuellement. Cette propriété retourne toujours <see langword="false" />.</summary>
      <returns>
        <see langword="false" /> dans tous les cas pour indiquer que <see cref="T:System.Net.Sockets.NetworkStream" /> ne peut pas rechercher un emplacement spécifique dans le flux.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanTimeout">
      <summary>Indique si les propriétés de délai d'attente peuvent être utilisées pour <see cref="T:System.Net.Sockets.NetworkStream" />.</summary>
      <returns>
        <see langword="true" /> dans tous les cas.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
      <summary>Obtient une valeur indiquant si <see cref="T:System.Net.Sockets.NetworkStream" /> prend en charge l'écriture.</summary>
      <returns>
        <see langword="true" /> si les données peuvent être écrites dans <see cref="T:System.Net.Sockets.NetworkStream" /> ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.DataAvailable">
      <summary>Obtient une valeur indiquant si des données sont disponibles sur le <see cref="T:System.Net.Sockets.NetworkStream" /> à lire.</summary>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.NetworkStream" /> est fermé.</exception>
      <exception cref="T:System.IO.IOException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Utilisez la propriété <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> pour obtenir le code d’erreur, et reportez-vous à la documentation sur les codes d’erreur de l’API Windows Sockets version 2 pour obtenir une description détaillée de l’erreur.</exception>
      <returns>
        <see langword="true" /> si des données sont disponibles dans le flux à lire ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Length">
      <summary>Obtient la longueur des données disponibles dans le flux. Cette propriété n'est pas actuellement prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Toute utilisation de cette propriété.</exception>
      <returns>Longueur des données disponibles dans le flux.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Position">
      <summary>Obtient ou définit la position actuelle dans le flux. Cette propriété n'est pas actuellement prise en charge et lève toujours <see cref="T:System.NotSupportedException" />.</summary>
      <exception cref="T:System.NotSupportedException">Toute utilisation de cette propriété.</exception>
      <returns>Position actuelle dans le flux.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Readable">
      <summary>Obtient ou définit une valeur indiquant si <see cref="T:System.Net.Sockets.NetworkStream" /> peut être lu.</summary>
      <returns>
        <see langword="true" /> pour indiquer que <see cref="T:System.Net.Sockets.NetworkStream" /> peut être lu ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.ReadTimeout">
      <summary>Obtient ou définit la durée pendant laquelle une opération de lecture reste bloquée en attendant des données.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée est inférieure ou égale à zéro et n'est pas <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <returns>
        <see cref="T:System.Int32" /> qui spécifie la durée, en millisecondes, qui doit s'écouler avant l'échec d'une opération de lecture. La valeur par défaut, <see cref="F:System.Threading.Timeout.Infinite" />, spécifie que l'opération de lecture n'expire pas.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Socket">
      <summary>Obtient le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> qui représente la connexion réseau sous-jacente.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Writeable">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Net.Sockets.NetworkStream" /> est accessible en écriture.</summary>
      <returns>
        <see langword="true" /> si les données peuvent être écrites dans le flux ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.WriteTimeout">
      <summary>Obtient ou définit la durée pendant laquelle une opération d'écriture reste bloquée en attendant des données.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée est inférieure ou égale à zéro et n'est pas <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
      <returns>
        <see cref="T:System.Int32" /> qui spécifie la durée, en millisecondes, qui doit s'écouler avant l'échec d'une opération d'écriture. La valeur par défaut, <see cref="F:System.Threading.Timeout.Infinite" />, spécifie que l'opération d'écriture n'expire pas.</returns>
    </member>
    <member name="T:System.Net.Sockets.ProtocolFamily">
      <summary>Spécifie le type de protocole pouvant être utilisé par une instance de la classe <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.AppleTalk">
      <summary>Protocole AppleTalk.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Atm">
      <summary>Protocole de services ATL natifs.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Banyan">
      <summary>Protocole Banyan.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ccitt">
      <summary>Protocole CCITT, tel que X.25.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Chaos">
      <summary>Protocole MIT CHAOS.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Cluster">
      <summary>Protocole de produits de cluster Microsoft.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.ControllerAreaNetwork">
      <summary>Protocole CAN (Controller Area Network).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataKit">
      <summary>Protocole DataKit.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataLink">
      <summary>Protocole de liaison de données directe.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DecNet">
      <summary>Protocole DECNet.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ecma">
      <summary>Protocole ECMA (European Computer Manufacturers Association).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.FireFox">
      <summary>Protocole FireFox.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.HyperChannel">
      <summary>Protocole NSC HyperChannel.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ieee12844">
      <summary>Protocole de groupe de travail IEEE 1284.4.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.ImpLink">
      <summary>Protocole ARPANET IMP.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetwork">
      <summary>Protocole IP version 4.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetworkV6">
      <summary>Protocole IP version 6.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ipx">
      <summary>Protocole IPX ou SPX.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Irda">
      <summary>Protocole IrDA.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Iso">
      <summary>Protocole ISO.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Lat">
      <summary>Protocole LAT.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Max">
      <summary>Protocole MAX.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetBios">
      <summary>Protocole NetBIOS.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetworkDesigners">
      <summary>Protocole compatible avec la passerelle Network Designers OSI.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NS">
      <summary>Protocole Xerox NS.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Osi">
      <summary>Protocole OSI.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Packet">
      <summary>Protocole de paquets de bas niveau.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Pup">
      <summary>Protocole PUP.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Sna">
      <summary>Protocole IBM SNA.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unix">
      <summary>Protocole Unix local vers hôte.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unknown">
      <summary>Protocole inconnu.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unspecified">
      <summary>Protocole non spécifié.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.VoiceView">
      <summary>Protocole VoiceView.</summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>Spécifie les protocoles que la classe <see cref="T:System.Net.Sockets.Socket" /> prend en charge.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ggp">
      <summary>Protocole de passerelle à passerelle.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Icmp">
      <summary>Protocole ICMP (Internet Control Message Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IcmpV6">
      <summary>Protocole ICMP (Internet Control Message Protocol) pour IPv6.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Idp">
      <summary>Protocole IDP (Internet Datagram Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Igmp">
      <summary>Protocole IGMP (Internet Group Management Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IP">
      <summary>Protocole IP (Internet Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecAuthenticationHeader">
      <summary>IPV6 avec en-tête « Authentication » Pour plus d’informations, consultez la RFC 2292, section 2.2.1, disponible à l’adresse https://www.ietf.org.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecEncapsulatingSecurityPayload">
      <summary>IPv6 avec en-tête « Encapsulating Security Payload ».</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv4">
      <summary>Protocole IP (Internet Protocol) version 4.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6">
      <summary>Protocole IPv6 (Internet Protocol version 6).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6DestinationOptions">
      <summary>IPv6 avec en-tête « Destination Options ».</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6FragmentHeader">
      <summary>IPv6 avec en-tête « Fragment ».</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6HopByHopOptions">
      <summary>IPv6 avec en-tête « Hop by Hop Options ».</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6NoNextHeader">
      <summary>IPv6 avec en-tête « No next ».</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6RoutingHeader">
      <summary>IPv6 avec en-tête « Routing ».</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ipx">
      <summary>Protocole IPX (Internet Packet Exchange).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.ND">
      <summary>Protocole ND (Net Disk Protocol) (non officiel).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Pup">
      <summary>Protocole PARC (PARC Universal Packet Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Raw">
      <summary>Protocole de paquets Raw IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Spx">
      <summary>Protocole SPX (Sequenced Packet Exchange).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.SpxII">
      <summary>Protocole SPX (Sequenced Packet Exchange) version 2.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>Protocole TCP (Transmission Control Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Udp">
      <summary>Protocole UDP (User Datagram Protocol).</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>Protocole inconnu.</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>Protocole non spécifié.</summary>
    </member>
    <member name="T:System.Net.Sockets.SafeSocketHandle">
      <summary>Représente une classe wrapper pour un handle de socket.</summary>
    </member>
    <member name="M:System.Net.Sockets.SafeSocketHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SafeSocketHandle" />.</summary>
      <param name="preexistingHandle">Handle préexistant à utiliser.</param>
      <param name="ownsHandle">
        <see langword="true" /> pour libérer de manière fiable le handle pendant la phase de finalisation ; sinon, <see langword="false" /> pour empêcher une libération fiable (déconseillé).</param>
    </member>
    <member name="T:System.Net.Sockets.SelectMode">
      <summary>Définit les méthodes d'interrogation pour la méthode <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectError">
      <summary>Mode d'état d'erreur.</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectRead">
      <summary>Mode d'état de lecture.</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectWrite">
      <summary>Mode d'état d'écriture.</summary>
    </member>
    <member name="T:System.Net.Sockets.SendPacketsElement">
      <summary>Représente un élément dans un tableau <see cref="T:System.Net.Sockets.SendPacketsElement" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> à l'aide de la mémoire tampon indiquée.</summary>
      <param name="buffer">Tableau d'octets contenant les données à envoyer à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> ne peut pas être Null.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée de la mémoire tampon.</summary>
      <param name="buffer">Tableau d'octets contenant les données à envoyer à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Offset, en octets, entre le début du paramètre <paramref name="buffer" /> et l'emplacement dans le paramètre <paramref name="buffer" /> permettant de commencer l'envoi des données spécifiées dans le paramètre <paramref name="buffer" />.</param>
      <param name="count">Nombre d'octets à envoyer à partir du paramètre <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, aucun octet n'est envoyé.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> ne peut pas être Null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.  
  
Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent inférieurs à la taille de la mémoire tampon.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée de la mémoire tampon avec une option permettant de combiner cet élément avec l’élément suivant dans une même demande d’envoi à partir de la couche de sockets jusqu’au transport.</summary>
      <param name="buffer">Tableau d'octets contenant les données à envoyer à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Offset, en octets, entre le début du paramètre <paramref name="buffer" /> et l'emplacement dans le paramètre <paramref name="buffer" /> permettant de commencer l'envoi des données spécifiées dans le paramètre <paramref name="buffer" />.</param>
      <param name="count">Nombre d'octets à envoyer à partir du paramètre <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, aucun octet n'est envoyé.</param>
      <param name="endOfPacket">Valeur booléenne qui spécifie que cet élément ne doit pas être combiné à l'élément suivant dans une demande d'envoi unique de la couche de sockets jusqu'au transport. Cet indicateur est utilisé pour le contrôle précis du contenu de chaque message sur un datagramme ou un socket orienté message.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> ne peut pas être Null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.  
  
Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent inférieurs à la taille de la mémoire tampon.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.IO.FileStream)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> à l'aide de l'objet <see cref="T:System.IO.FileStream" /> spécifié.</summary>
      <param name="fileStream">Fichier à transmettre avec la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileStream" /> n’est pas ouvert pour la lecture et l’écriture asynchrones.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> ne peut pas être null.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.IO.FileStream,System.Int64,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée d’un objet <see cref="T:System.IO.FileStream" />.</summary>
      <param name="fileStream">Fichier à transmettre avec la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Décalage en octets entre le début du fichier et l’emplacement dans le fichier où commencer à envoyer les octets dans le fichier.</param>
      <param name="count">Nombre d’octets à envoyer à partir de <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, le fichier entier est envoyé.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="fileStream" /> doit avoir été ouvert pour la lecture et l’écriture asynchrones.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="fileStream" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.IO.FileStream,System.Int64,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée d’un objet <see cref="T:System.IO.FileStream" /> avec une option permettant de combiner cet élément avec l’élément suivant dans une même demande d’envoi à partir de la couche de sockets jusqu’au transport.</summary>
      <param name="fileStream">Fichier à transmettre avec la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Décalage en octets entre le début du fichier et l’emplacement dans le fichier où commencer à envoyer les octets dans le fichier.</param>
      <param name="count">Nombre d’octets à envoyer à partir du paramètre de décalage. Si le nombre est égal à zéro, le fichier entier est envoyé.</param>
      <param name="endOfPacket">Spécifie que cet élément ne doit pas être combiné avec l’élément suivant dans une même demande d’envoi de la couche de sockets jusqu’au transport. Cet indicateur est utilisé pour le contrôle précis du contenu de chaque message sur un datagramme ou un socket orienté message.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="fileStream" /> doit avoir été ouvert pour la lecture et l’écriture asynchrones.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="fileStream" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> à l'aide du fichier spécifié.</summary>
      <param name="filepath">Nom du fichier à transmettre à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="filepath" /> ne peut pas être Null.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée du fichier.</summary>
      <param name="filepath">Nom du fichier à transmettre à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Offset, en octets, entre le début du fichier et l'emplacement dans le fichier permettant de commencer l'envoi du fichier indiqué dans le paramètre <paramref name="filepath" />.</param>
      <param name="count">Nombre d'octets à envoyer à partir du paramètre <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, le fichier entier est envoyé.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="filepath" /> ne peut pas être Null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée du fichier avec une option permettant de combiner cet élément avec l’élément suivant dans une même demande d’envoi à partir de la couche de sockets jusqu’au transport.</summary>
      <param name="filepath">Nom du fichier à transmettre à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Offset, en octets, entre le début du fichier et l'emplacement dans le fichier permettant de commencer l'envoi du fichier indiqué dans le paramètre <paramref name="filepath" />.</param>
      <param name="count">Nombre d'octets à envoyer à partir du paramètre <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, le fichier entier est envoyé.</param>
      <param name="endOfPacket">Valeur booléenne qui spécifie que cet élément ne doit pas être combiné à l'élément suivant dans une demande d'envoi unique de la couche de sockets jusqu'au transport. Cet indicateur est utilisé pour le contrôle précis du contenu de chaque message sur un datagramme ou un socket orienté message.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="filepath" /> ne peut pas être Null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int64,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée du fichier.</summary>
      <param name="filepath">Nom du fichier à transmettre à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Offset, en octets, entre le début du fichier et l'emplacement dans le fichier permettant de commencer l'envoi du fichier indiqué dans le paramètre <paramref name="filepath" />.</param>
      <param name="count">Nombre d’octets à envoyer à partir de <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, le fichier entier est envoyé.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="filepath" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int64,System.Int32,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> en utilisant la plage spécifiée du fichier avec une option permettant de combiner cet élément avec l’élément suivant dans une même demande d’envoi à partir de la couche de sockets jusqu’au transport.</summary>
      <param name="filepath">Nom du fichier à transmettre à l'aide de la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <param name="offset">Offset, en octets, entre le début du fichier et l'emplacement dans le fichier permettant de commencer l'envoi du fichier indiqué dans le paramètre <paramref name="filepath" />.</param>
      <param name="count">Nombre d'octets à envoyer à partir du paramètre <paramref name="offset" />. Si <paramref name="count" /> est égal à zéro, le fichier entier est envoyé.</param>
      <param name="endOfPacket">Spécifie que cet élément ne doit pas être combiné avec l’élément suivant dans une même demande d’envoi de la couche de sockets jusqu’au transport. Cet indicateur est utilisé pour le contrôle précis du contenu de chaque message sur un datagramme ou un socket orienté message.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="filepath" /> ne peut pas avoir la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Les paramètres <paramref name="offset" /> et <paramref name="count" /> doivent être supérieurs ou égaux à zéro.</exception>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Buffer">
      <summary>Obtient la mémoire tampon à envoyer si l’objet <see cref="T:System.Net.Sockets.SendPacketsElement" /> a été initialisé avec un paramètre <paramref name="buffer" />.</summary>
      <returns>Mémoire tampon d’octets à envoyer si l' <see cref="T:System.Net.Sockets.SendPacketsElement" /> objet a été initialisé avec un <paramref name="buffer" /> paramètre.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Count">
      <summary>Obtient le nombre d'octets à envoyer.</summary>
      <returns>Nombre d'octets à envoyer si la classe <see cref="T:System.Net.Sockets.SendPacketsElement" /> a été initialisée avec un paramètre <paramref name="count" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.EndOfPacket">
      <summary>Obtient une valeur booléenne qui indique si cet élément ne doit pas être combiné à l'élément suivant dans une demande d'envoi unique de la couche de sockets jusqu'au transport.</summary>
      <returns>Valeur booléenne qui indique si cet élément ne doit pas être combiné à l'élément suivant dans une demande d'envoi unique.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.FilePath">
      <summary>Obtient le nom du fichier à envoyer si l’objet <see cref="T:System.Net.Sockets.SendPacketsElement" /> a été initialisé avec un paramètre <paramref name="filepath" />.</summary>
      <returns>Nom du fichier à envoyer si l' <see cref="T:System.Net.Sockets.SendPacketsElement" /> objet a été initialisé avec un <paramref name="filepath" /> paramètre.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.FileStream">
      <summary>Obtient la représentation sous forme d’objet du fichier à envoyer si l’objet <see cref="T:System.Net.Sockets.SendPacketsElement" /> a été initialisé avec un paramètre <see cref="T:System.IO.FileStream" />.</summary>
      <returns>Représentation d’objet du fichier à envoyer si l' <see cref="T:System.Net.Sockets.SendPacketsElement" /> objet a été initialisé avec un <see cref="T:System.IO.FileStream" /> paramètre.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Offset">
      <summary>Obtient l'offset, en octets, entre le début de la mémoire tampon des données ou du fichier et l'emplacement dans la mémoire tampon ou dans le fichier permettant de commencer l'envoi des données.</summary>
      <returns>Offset, en octets, entre le début de la mémoire tampon des données ou du fichier et l'emplacement dans la mémoire tampon ou dans le fichier permettant de commencer l'envoi des données.</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.OffsetLong">
      <summary>Obtient l'offset, en octets, entre le début de la mémoire tampon des données ou du fichier et l'emplacement dans la mémoire tampon ou dans le fichier permettant de commencer l'envoi des données.</summary>
      <returns>Offset, en octets, entre le début de la mémoire tampon des données ou du fichier et l'emplacement dans la mémoire tampon ou dans le fichier permettant de commencer l'envoi des données.</returns>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>Implémente l'interface de sockets Berkeley.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.Socket" /> en utilisant la famille d'adresses, le type de socket et le protocole spécifiés.</summary>
      <param name="addressFamily">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.AddressFamily" />.</param>
      <param name="socketType">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketType" />.</param>
      <param name="protocolType">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.ProtocolType" />.</param>
      <exception cref="T:System.Net.Sockets.SocketException">La combinaison de <paramref name="addressFamily" />, <paramref name="socketType" /> et <paramref name="protocolType" /> crée un socket non valide.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SafeSocketHandle)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.Socket" /> pour le handle de socket spécifié.</summary>
      <param name="handle">Handle de socket pour le socket que l’objet <see cref="T:System.Net.Sockets.Socket" /> encapsulera.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="handle" /> n'est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="handle" /> n’est pas un socket, ou les informations relatives au socket sont inaccessibles.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.Socket" /> avec la valeur spécifiée retournée par <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</summary>
      <param name="socketInformation">Informations de socket retournées par <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.Socket" /> à l'aide du type de socket et du protocole spécifiés.</summary>
      <param name="socketType">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketType" />.</param>
      <param name="protocolType">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.ProtocolType" />.</param>
      <exception cref="T:System.Net.Sockets.SocketException">La combinaison de <paramref name="socketType" /> et <paramref name="protocolType" /> aboutit à un socket non valide.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Accept">
      <summary>Crée un nouveau <see cref="T:System.Net.Sockets.Socket" /> pour une connexion nouvellement créée.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">Le socket acceptant n'écoute pas les connexions. Vous devez appeler <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> et <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> avant d'appeler <see cref="M:System.Net.Sockets.Socket.Accept" />.</exception>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> pour une connexion nouvellement créée.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Démarre une opération asynchrone pour accepter une tentative de connexion entrante.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentException">Un argument n’est pas valide. Cette exception se produit si la mémoire tampon fournie n'est pas assez grande. La mémoire tampon doit être d'au moins 2 * (taille de (SOCKADDR_STORAGE + 16) octets.  
  
Cette exception se produit également si plusieurs mémoires tampons sont spécifiées, la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> n'est pas null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Un argument est hors limites. L'exception se produit si <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> est inférieur à 0.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération incorrecte a été demandée. Cette exception se produit si le <see cref="T:System.Net.Sockets.Socket" /> acceptant n'écoute pas les connexions ou si le socket accepté est lié.  
  
Vous devez appeler les méthodes <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> et <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> avant d'appeler la méthode <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.  
  
Cette exception se produit également si le socket est déjà connecté ou si une opération de socket utilisait déjà le paramètre de <paramref name="e" /> spécifié.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)">
      <summary>Démarre une opération asynchrone pour accepter une tentative de connexion entrante.</summary>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <exception cref="T:System.InvalidOperationException">Le socket acceptant n'écoute pas les connexions. Vous devez appeler <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> et <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> avant d'appeler <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.  
  
- ou - 
Le socket accepté est lié.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> est inférieur à 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la création asynchrone de <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)">
      <summary>Lance une opération asynchrone d'acceptation d'une tentative de connexion entrante et reçoit le premier bloc de données envoyé par l'application cliente.</summary>
      <param name="receiveSize">Nombre d'octets à accepter de l'expéditeur.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <exception cref="T:System.InvalidOperationException">Le socket acceptant n'écoute pas les connexions. Vous devez appeler <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> et <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> avant d'appeler <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.  
  
- ou - 
Le socket accepté est lié.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> est inférieur à 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la création asynchrone de <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Lance une opération asynchrone d'acceptation d'une tentative de connexion entrante provenant d'un socket spécifié et reçoit le premier bloc de données envoyé par l'application cliente.</summary>
      <param name="acceptSocket">Objet <see cref="T:System.Net.Sockets.Socket" /> accepté. Cette valeur peut être <see langword="null" />.</param>
      <param name="receiveSize">Nombre maximal d'octets à recevoir.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <exception cref="T:System.InvalidOperationException">Le socket acceptant n'écoute pas les connexions. Vous devez appeler <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> et <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> avant d'appeler <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.  
  
- ou - 
Le socket accepté est lié.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> est inférieur à 0.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à la création d'un objet <see cref="T:System.Net.Sockets.Socket" /> asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant.</summary>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l’hôte distant.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, ou une opération asynchrone est déjà en cours d’exécution.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant. L’hôte est spécifié par <see cref="T:System.Net.IPAddress" /> et un numéro de port.</summary>
      <param name="address">Élément <see cref="T:System.Net.IPAddress" /> de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’opération de connexion est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui contient des informations sur l'opération de connexion. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.Sockets.Socket" /> n’est pas dans la famille des sockets.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="address" /> est égale à zéro.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, ou une opération asynchrone est déjà en cours d’exécution.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant. L’hôte est spécifié par un tableau <see cref="T:System.Net.IPAddress" /> et un numéro de port.</summary>
      <param name="addresses">Au moins un <see cref="T:System.Net.IPAddress" />, désignant l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’opération de connexion est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui contient des informations sur l'opération de connexion. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets qui utilisent <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="address" /> est égale à zéro.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, ou une opération asynchrone est déjà en cours d’exécution.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence aux connexions asynchrones.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant. L’hôte est spécifié par un nom d’hôte et un numéro de port.</summary>
      <param name="host">Nom de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l’opération de connexion est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui contient des informations sur l'opération de connexion. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets appartenant aux familles <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />, ou une opération asynchrone est déjà en cours d’exécution.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)">
      <summary>Lance une demande asynchrone de déconnexion d'un point de terminaison distant.</summary>
      <param name="reuseSocket">
        <see langword="true" /> si ce socket peut être réutilisé après la fermeture de la connexion ; sinon, <see langword="false" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Démarre la réception asynchrone de données à partir d'un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="offset">Position de base zéro dans le paramètre <paramref name="buffer" /> à laquelle stocker les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération de réception. Cet objet est passé au délégué <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la lecture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Démarre la réception asynchrone de données à partir d'un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="offset">Emplacement dans <paramref name="buffer" /> où stocker les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération de réception. Cet objet est passé au délégué <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la lecture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Démarre la réception asynchrone de données à partir d'un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffers">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération de réception. Cet objet est passé au délégué <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la lecture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Démarre la réception asynchrone de données à partir d'un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffers">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération de réception. Cet objet est passé au délégué <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la lecture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>Démarre la réception asynchrone de données à partir d'un périphérique réseau spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="offset">Position de base zéro dans le paramètre <paramref name="buffer" /> à laquelle stocker les données.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente la source des données.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la lecture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>Démarre la réception asynchrone du nombre spécifié d’octets de données dans l’emplacement spécifié de la mémoire tampon de données, à l’aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié et stocke le point de terminaison ainsi que les informations sur le paquet.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="offset">Position de base zéro dans le paramètre <paramref name="buffer" /> à laquelle stocker les données.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente la source des données.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la lecture asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Envoie des données de façon asynchrone à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="offset">Position de base zéro dans le paramètre <paramref name="buffer" /> à laquelle commencer l'envoi des données.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est inférieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Envoie des données de façon asynchrone à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="offset">Position de base zéro dans le paramètre <paramref name="buffer" /> à laquelle commencer l'envoi des données.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est inférieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>Envoie des données de façon asynchrone à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffers">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> est vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>Envoie des données de façon asynchrone à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffers">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> est vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
      <summary>Envoie le fichier <paramref name="fileName" /> à un objet <see cref="T:System.Net.Sockets.Socket" /> connecté à l'aide de l'indicateur <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" />.</summary>
      <param name="fileName">Chaîne qui contient le chemin d'accès et le nom du fichier à envoyer. Ce paramètre peut être <see langword="null" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Le socket n’est pas connecté à un hôte distant.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Le fichier <paramref name="fileName" /> est introuvable.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui représente l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)">
      <summary>Envoie de façon asynchrone un fichier et des mémoires tampon de données à un objet <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="fileName">Chaîne qui contient le chemin d'accès et le nom du fichier à envoyer. Ce paramètre peut être <see langword="null" />.</param>
      <param name="preBuffer">Tableau <see cref="T:System.Byte" /> contenant les données à envoyer avant l’envoi du fichier. Ce paramètre peut être <see langword="null" />.</param>
      <param name="postBuffer">Tableau <see cref="T:System.Byte" /> contenant les données à envoyer après l’envoi du fichier. Ce paramètre peut être <see langword="null" />.</param>
      <param name="flags">Combinaison de bits de valeurs <see cref="T:System.Net.Sockets.TransmitFileOptions" />.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> à appeler une fois cette opération terminée. Ce paramètre peut être <see langword="null" />.</param>
      <param name="state">Objet défini par l'utilisateur contenant les informations d'état de cette demande. Ce paramètre peut être <see langword="null" />.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.NotSupportedException">Le système d'exploitation n'est pas Windows NT ou une version ultérieure.  
  
- ou -
  
 Le socket n’est pas connecté à un hôte distant.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Le fichier <paramref name="fileName" /> est introuvable.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui représente l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>Envoie des données de façon asynchrone à un hôte distant spécifique.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="offset">Position de base zéro dans <paramref name="buffer" /> à laquelle commencer l'envoi des données.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l’appareil distant.</param>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" />.</param>
      <param name="state">Objet qui contient les informations d’état de cette demande.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" /> .</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)">
      <summary>Associe <see cref="T:System.Net.Sockets.Socket" /> à un point de terminaison local.</summary>
      <param name="localEP">
        <see cref="T:System.Net.EndPoint" /> local à associer à <see cref="T:System.Net.Sockets.Socket" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Annule une requête asynchrone pour une connexion d'hôte distant.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> utilisé pour demander la connexion à l'hôte distant en appelant l'une des méthodes <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> ne peut pas être null et <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne peut pas être vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>Ferme la connexion <see cref="T:System.Net.Sockets.Socket" /> et libère toutes les ressources associées.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close(System.Int32)">
      <summary>Ferme la connexion <see cref="T:System.Net.Sockets.Socket" /> et libère toutes les ressources associées avec un délai d’attente spécifié pour permettre l’envoi des données en file d’attente.</summary>
      <param name="timeout">Attendez jusqu’à <paramref name="timeout" /> secondes pour envoyer toutes les données restantes, puis fermez le socket.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)">
      <summary>Établit une connexion à un hôte distant.</summary>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l’appareil distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)">
      <summary>Établit une connexion à un hôte distant. L’hôte est spécifié par une adresse IP et un numéro de port.</summary>
      <param name="address">Adresse IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets appartenant aux familles <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="address" /> est égale à zéro.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>Établit une connexion à un hôte distant. L’hôte est spécifié par un tableau d’adresses IP et un numéro de port.</summary>
      <param name="addresses">Adresses IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets appartenant aux familles <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.ArgumentException">La longueur de <paramref name="address" /> est égale à zéro.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)">
      <summary>Établit une connexion à un hôte distant. L’hôte est spécifié par un nom d’hôte et un numéro de port.</summary>
      <param name="host">Nom de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets appartenant aux familles <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> a été mis dans un état d’écoute en appelant <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Démarre une demande asynchrone pour une connexion à un hôte distant.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentException">Un argument n’est pas valide. Cette exception se produit si plusieurs mémoires tampons sont spécifiées, la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> n'est pas null.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> ne peut pas être null et <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne peut pas être vide.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> est à l'écoute ou une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode. Cette exception se produit également si le point de terminaison local et les <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne sont pas la même famille d'adresses.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Démarre une demande asynchrone pour une connexion à un hôte distant.</summary>
      <param name="socketType">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketType" />.</param>
      <param name="protocolType">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.ProtocolType" />.</param>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentException">Un argument n’est pas valide. Cette exception se produit si plusieurs mémoires tampons sont spécifiées, la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> n'est pas null.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> ne peut pas être null et <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne peut pas être vide.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> est à l'écoute ou une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode. Cette exception se produit également si le point de terminaison local et les <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne sont pas la même famille d'adresses.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)">
      <summary>Ferme la connexion de socket et autorise la réutilisation du socket.</summary>
      <param name="reuseSocket">
        <see langword="true" /> si ce socket peut être réutilisé après la fermeture de la connexion active ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Lance une demande asynchrone de déconnexion d'un point de terminaison distant.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="e" /> ne peut pas avoir la valeur null.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Net.Sockets.Socket" /> et supprime éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)">
      <summary>Duplique la référence de socket pour le processus cible et ferme le socket pour ce processus.</summary>
      <param name="targetProcessId">ID du processus cible où un doublon de la référence de socket est créé.</param>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="targetProcessID" /> n'est pas un ID de processus valide. 
- ou - 
La duplication de la référence de socket a échoué.</exception>
      <returns>Référence de socket à passer au processus cible.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)">
      <summary>Accepte de manière asynchrone une tentative de connexion entrante et crée un nouvel objet <see cref="T:System.Net.Sockets.Socket" /> pour gérer les communications de l'hôte distant. Cette méthode retourne une mémoire tampon qui contient les données initiales transférées.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les octets transférés.</param>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> qui stocke les informations d'état pour cette opération asynchrone ainsi que toutes les données définies par l'utilisateur.</param>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> est vide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été créé par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> a été appelée au préalable.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite lors de la tentative d’accès à <see cref="T:System.Net.Sockets.Socket" /></exception>
      <returns>Objet <see cref="T:System.Net.Sockets.Socket" /> pour gérer la communication avec l'hôte distant.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)">
      <summary>Accepte de manière asynchrone une tentative de connexion entrante et crée un nouvel objet <see cref="T:System.Net.Sockets.Socket" /> pour gérer les communications de l'hôte distant. Cette méthode retourne une mémoire tampon qui contient les données initiales et le nombre d'octets transférés.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les octets transférés.</param>
      <param name="bytesTransferred">Nombre d'octets transférés.</param>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> qui stocke les informations d'état pour cette opération asynchrone ainsi que toutes les données définies par l'utilisateur.</param>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> est vide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été créé par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> a été appelée au préalable.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès à <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <returns>Objet <see cref="T:System.Net.Sockets.Socket" /> pour gérer la communication avec l'hôte distant.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)">
      <summary>Accepte de manière asynchrone une tentative de connexion entrante et crée un nouveau <see cref="T:System.Net.Sockets.Socket" /> pour gérer les communications de l'hôte distant.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état pour cette opération asynchrone ainsi que toutes les données définies par l'utilisateur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été créé par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Pour plus d'informations, consultez la section Notes.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> a été appelée au préalable.</exception>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> pour gérer la communication avec l'hôte distant.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)">
      <summary>Met fin à une demande de connexion asynchrone en attente.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> a été précédemment appelé pour la connexion asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)">
      <summary>Met fin à une demande de déconnexion asynchrone en attente.</summary>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> a été précédemment appelé pour la connexion asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.Net.WebException">La demande de déconnexion a expiré.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)">
      <summary>Met fin à une lecture asynchrone en attente.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> a été précédemment appelé pour la lecture asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>Met fin à une lecture asynchrone en attente.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> a été précédemment appelé pour la lecture asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
      <summary>Met fin à une lecture asynchrone en attente à partir d'un point de terminaison spécifique.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <param name="endPoint">
        <see cref="T:System.Net.EndPoint" /> source.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> a été précédemment appelé pour la lecture asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>En cas de réussite, nombre d'octets reçus. En cas d'échec, retourne 0.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>Met fin à une lecture asynchrone en attente à partir d'un point de terminaison spécifique. Cette méthode révèle également davantage d'informations sur le paquet que <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <param name="socketFlags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" /> pour le paquet reçu.</param>
      <param name="endPoint">
        <see cref="T:System.Net.EndPoint" /> source.</param>
      <param name="ipPacketInformation">
        <see cref="T:System.Net.IPAddress" /> et interface du paquet reçu.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="endPoint" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> a été précédemment appelé pour la lecture asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>En cas de réussite, nombre d'octets reçus. En cas d'échec, retourne 0.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)">
      <summary>Met fin à un envoi asynchrone en attente.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> stockant les informations d'état de cette demande asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> a été précédemment appelé pour l'envoi asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>En cas de réussite, nombre d'octets envoyés à <see cref="T:System.Net.Sockets.Socket" /> ; sinon, erreur de <see cref="T:System.Net.Sockets.Socket" /> non valide.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>Met fin à un envoi asynchrone en attente.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> stockant les informations d'état de cette demande asynchrone.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> a été précédemment appelé pour l'envoi asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>En cas de réussite, nombre d'octets envoyés à <see cref="T:System.Net.Sockets.Socket" /> ; sinon, erreur de <see cref="T:System.Net.Sockets.Socket" /> non valide.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)">
      <summary>Met fin à un envoi asynchrone en attente d'un fichier.</summary>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> stockant les informations d'état de cette opération asynchrone.</param>
      <exception cref="T:System.NotSupportedException">Windows NT est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> est vide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> a été précédemment appelé pour <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)">
      <summary>Met fin à un envoi asynchrone en attente vers un emplacement spécifique.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> qui stocke des informations d'état et toutes les données définies par l'utilisateur pour cette opération asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> a été précédemment appelé pour l'envoi asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>En cas de réussite, nombre d'octets envoyés ; sinon, erreur de <see cref="T:System.Net.Sockets.Socket" /> non valide.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>Libère les ressources utilisées par la classe <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetRawSocketOption(System.Int32,System.Int32,System.Span{System.Byte})">
      <summary>Obtient une valeur d’option de socket à l’aide d’identificateurs de nom et de niveau propres à la plateforme.</summary>
      <param name="optionLevel">Niveau d’option défini par la plateforme.</param>
      <param name="optionName">Nom d’option défini par la plateforme.</param>
      <param name="optionValue">Étendue dans laquelle la valeur de l’option récupérée doit être stockée.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>Nombre d’octets écrits dans <paramref name="optionValue" /> pour une valeur récupérée avec succès.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
      <summary>Retourne la valeur d'une option <see cref="T:System.Net.Sockets.Socket" /> spécifiée, représentée sous la forme d'un objet.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.  
  
- ou - 
 <paramref name="optionName" /> avait la valeur <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" /> non prise en charge.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Objet représentant la valeur de l'option. Si le paramètre <paramref name="optionName" /> a la valeur du champ <see cref="F:System.Net.Sockets.SocketOptionName.Linger" />, la valeur de retour est une instance de la classe <see cref="T:System.Net.Sockets.LingerOption" />. Si <paramref name="optionName" /> a la valeur du champ <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> ou <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, la valeur de retour est une instance de la classe <see cref="T:System.Net.Sockets.MulticastOption" />. Si <paramref name="optionName" /> a une autre valeur, la valeur de retour est un entier.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>Retourne la valeur de l'option <see cref="T:System.Net.Sockets.Socket" /> spécifiée sous la forme d'un tableau d'octets.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <param name="optionValue">Tableau de type <see cref="T:System.Byte" /> devant recevoir la valeur de l'option.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.  
  
- ou - 
Dans les applications .NET Compact Framework, l'espace de mémoire tampon par défaut de Windows CE est de 32 768 octets. Vous pouvez modifier l'espace de mémoire tampon de chaque socket en appelant <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>Retourne la valeur de l'option <see cref="T:System.Net.Sockets.Socket" /> spécifiée dans un tableau.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <param name="optionLength">Longueur (en octets) de la valeur de retour attendue.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.  
  
- ou - 
Dans les applications .NET Compact Framework, l'espace de mémoire tampon par défaut de Windows CE est de 32 768 octets. Vous pouvez modifier l'espace de mémoire tampon de chaque socket en appelant <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Tableau de type <see cref="T:System.Byte" /> contenant la valeur de l'option de socket.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])">
      <summary>Définit les modes de fonctionnement de bas niveau de <see cref="T:System.Net.Sockets.Socket" /> à l'aide de codes de contrôle numériques.</summary>
      <param name="ioControlCode">Valeur <see cref="T:System.Int32" /> qui spécifie le code de contrôle de l'opération à exécuter.</param>
      <param name="optionInValue">Tableau <see cref="T:System.Byte" /> contenant les données d'entrée requises par l'opération.</param>
      <param name="optionOutValue">Tableau <see cref="T:System.Byte" /> contenant les données de sortie retournées par l'opération.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">Une tentative de modification du mode blocage sans utiliser la propriété <see cref="P:System.Net.Sockets.Socket.Blocking" /> a été effectuée.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d'octets dans le paramètre <paramref name="optionOutValue" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])">
      <summary>Définit les modes de fonctionnement de bas niveau de <see cref="T:System.Net.Sockets.Socket" /> à l'aide de l'énumération <see cref="T:System.Net.Sockets.IOControlCode" /> afin de spécifier les codes de contrôle.</summary>
      <param name="ioControlCode">Valeur <see cref="T:System.Net.Sockets.IOControlCode" /> qui spécifie le code de contrôle de l'opération à exécuter.</param>
      <param name="optionInValue">Tableau de type <see cref="T:System.Byte" /> contenant les données d'entrée requises par l'opération.</param>
      <param name="optionOutValue">Tableau de type <see cref="T:System.Byte" /> contenant les données de sortie retournées par l'opération.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">Une tentative de modification du mode blocage sans utiliser la propriété <see cref="P:System.Net.Sockets.Socket.Blocking" /> a été effectuée.</exception>
      <returns>Nombre d'octets dans le paramètre <paramref name="optionOutValue" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Listen">
      <summary>Met <see cref="T:System.Net.Sockets.Socket" /> dans un état d'écoute.</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Listen(System.Int32)">
      <summary>Met <see cref="T:System.Net.Sockets.Socket" /> dans un état d'écoute.</summary>
      <param name="backlog">Longueur maximale de la file d'attente des connexions en attente.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
      <summary>Détermine l'état de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <param name="microSeconds">Temps d'attente (en microsecondes) d'une réponse.</param>
      <param name="mode">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SelectMode" />.</param>
      <exception cref="T:System.NotSupportedException">Le paramètre <paramref name="mode" /> ne fait pas partie des valeurs <see cref="T:System.Net.Sockets.SelectMode" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>État du <see cref="T:System.Net.Sockets.Socket" /> basé sur la valeur de mode d'appel passée dans le paramètre <paramref name="mode" />.  
  
 <list type="table"><listheader><term> Mode</term><description> Valeur de retour</description></listheader><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectRead" /></term><description><see langword="true" /> si la méthode <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> a été appelée et si une connexion est en attente ; 
- ou - 
 <see langword="true" /> si des données sont disponibles pour la lecture ; 
- ou - 
 <see langword="true" /> si la connexion a été fermée, réinitialisée ou terminée ; 
sinon, retourne <see langword="false" />.</description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectWrite" /></term><description><see langword="true" /> si une méthode <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> a été utilisée et si la connexion a abouti ; 
- ou - 
 <see langword="true" /> si des données peuvent être envoyées ; 
sinon, retourne <see langword="false" />.</description></item><item><term><see cref="F:System.Net.Sockets.SelectMode.SelectError" /></term><description><see langword="true" /> si une méthode <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> sans blocage a été utilisée et si la connexion a échoué ; 
- ou - 
 <see langword="true" /> si le champ <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> n'est pas défini et si des données hors bande sont disponibles ; 
sinon, retourne <see langword="false" />.</description></item></list></returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[])">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Reçoit le nombre spécifié d'octets d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans la position d'offset spécifiée de la mémoire tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l’emplacement de stockage des données reçues.</param>
      <param name="offset">Emplacement dans <paramref name="buffer" /> où stocker les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> n'a pas été définie.  
  
- ou - 
Une erreur du système d’exploitation se produit pendant l’accès au <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="offset">La position dans le paramètre <paramref name="buffer" /> pour stocker les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> n'est pas définie.  
  
- ou - 
Une erreur du système d’exploitation se produit pendant l’accès au <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Reçoit le nombre spécifié d'octets de données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> dépasse la taille de <paramref name="buffer" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans la liste des mémoires tampon de réception.</summary>
      <param name="buffers">Liste des <see cref="T:System.ArraySegment`1" />s de type <see cref="T:System.Byte" /> qui contient les données reçues.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans la liste des mémoires tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffers">Liste des <see cref="T:System.ArraySegment`1" />s de type <see cref="T:System.Byte" /> qui contient les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="buffers" />.Count est égal à zéro.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans la liste des mémoires tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffers">Liste des <see cref="T:System.ArraySegment`1" />s de type <see cref="T:System.Byte" /> qui contient les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="buffers" />.Count est égal à zéro.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte})">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception.</summary>
      <param name="buffer">Étendue d’octets qui est l’emplacement de stockage pour les données reçues.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags)">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Étendue d’octets qui est l’emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison de bits des valeurs d’énumération qui spécifie les comportements d’envoi et de réception.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Span{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Reçoit les données d'un <see cref="T:System.Net.Sockets.Socket" /> lié dans une mémoire tampon de réception, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Étendue d’octets qui est l’emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison de bits des valeurs d’énumération qui spécifie les comportements d’envoi et de réception.</param>
      <param name="errorCode">Lorsque cette méthode est retournée, contient l’une des valeurs d’énumération qui définit les codes d’erreur pour le socket.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Démarre une demande asynchrone pour recevoir les données d'un objet <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentException">Un argument n'était pas valide. La propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> ou <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> sur le paramètre de <paramref name="e" /> doit référencer des mémoires tampon valides. L'une ou l'autre de ces propriétés peut être définie, mais pas les deux à la fois.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>Reçoit le nombre d’octets de données spécifié dans l’emplacement de la mémoire tampon spécifié à l’aide des <see cref="T:System.Net.Sockets.SocketFlags" /> et stocke le point de terminaison.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l’emplacement de stockage des données reçues.</param>
      <param name="offset">La position dans le paramètre <paramref name="buffer" /> pour stocker les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, passé par référence, qui représente le serveur distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre de décalage.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> n'a pas été définie.  
  
- ou - 
Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>Reçoit le nombre spécifié d'octets dans la mémoire tampon de données, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié et stocke le point de terminaison.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l’emplacement de stockage des données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, passé par référence, qui représente le serveur distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> n'a pas été définie.  
  
- ou - 
Une erreur du système d’exploitation se produit pendant l’accès au <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
      <summary>Reçoit un datagramme dans la mémoire tampon de données et stocke le point de terminaison.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l’emplacement de stockage des données reçues.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, passé par référence, qui représente le serveur distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>Reçoit un datagramme dans la mémoire tampon de données à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié et stocke le point de terminaison.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l'emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, passé par référence, qui représente le serveur distant.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Démarre la réception asynchrone de données à partir d'un périphérique réseau spécifié.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne peut pas être Null.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>Reçoit le nombre d’octets de données spécifié à l’emplacement de la mémoire tampon spécifié à l’aide des <see cref="T:System.Net.Sockets.SocketFlags" /> spécifiés, puis stocke les informations de paquet et de point de terminaison.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui est l’emplacement de stockage des données reçues.</param>
      <param name="offset">La position dans le paramètre <paramref name="buffer" /> pour stocker les données reçues.</param>
      <param name="size">Nombre d'octets à recevoir.</param>
      <param name="socketFlags">Combinaison d'opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, passé par référence, qui représente le serveur distant.</param>
      <param name="ipPacketInformation">
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> contenant des informations d’adresse et d’interface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre de décalage.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
La propriété <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> n'a pas été définie.  
  
- ou - 
Le .NET Framework s'exécute sur un processeur AMD 64 bits.  
  
- ou - 
Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Démarre la réception asynchrone du nombre spécifié d'octets de données dans l'emplacement spécifié de la mémoire tampon de données, à l'aide du <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" /> spécifié et stocke le point de terminaison ainsi que les informations sur le paquet.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne peut pas être Null.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>Détermine l’état d’un ou plusieurs sockets.</summary>
      <param name="checkRead">
        <see cref="T:System.Collections.IList" /> sur <see cref="T:System.Net.Sockets.Socket" /> instances à vérifier en ce qui concerne la lisibilité.</param>
      <param name="checkWrite">
        <see cref="T:System.Collections.IList" /> sur <see cref="T:System.Net.Sockets.Socket" /> instances à vérifier en ce qui concerne la capacité d’écriture.</param>
      <param name="checkError">
        <see cref="T:System.Collections.IList" /> sur <see cref="T:System.Net.Sockets.Socket" /> instances à vérifier en ce qui concerne les erreurs.</param>
      <param name="microSeconds">La valeur du délai d’expiration exprimée en microsecondes. Une valeur de -1 indique un délai d’attente infini.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="checkRead" /> a la valeur <see langword="null" /> ou est vide.  
  
-et- 
Le paramètre <paramref name="checkWrite" /> a la valeur <see langword="null" /> ou est vide. 
-et- 
Le paramètre <paramref name="checkError" /> a la valeur <see langword="null" /> ou est vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">.NET 5.0 et ultérieur : Un ou plusieurs sockets sont supprimés.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[])">
      <summary>Envoie des données à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Envoie le nombre spécifié d’octets de données à un <see cref="T:System.Net.Sockets.Socket" /> connecté, à part de l’offset spécifié et avec le <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="offset">La position dans le tampon de données par laquelle doit commencer l’envoi des données.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
Une erreur du système d’exploitation se produit pendant l’accès au <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Envoie le nombre spécifié d'octets de données d'un <see cref="T:System.Net.Sockets.Socket" /> connecté, en démarrant à l'offset spécifié et en utilisant le <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="offset">La position dans le tampon de données par laquelle doit commencer l’envoi des données.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
Une erreur du système d’exploitation se produit pendant l’accès au <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>Reçoit le nombre spécifié d'octets de données à un <see cref="T:System.Net.Sockets.Socket" /> connecté, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> est inférieur à 0 ou dépasse la taille de la mémoire tampon.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
Une erreur du système d'exploitation s'est produite lors de l'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>Envoie des données à un <see cref="T:System.Net.Sockets.Socket" /> connecté à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>Envoie le jeu de mémoires tampon dans la liste à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffers">Liste de <see cref="T:System.ArraySegment`1" /> de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> est vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Consultez la section Notes ci-dessous.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>Envoie le jeu de mémoires tampon dans la liste à un <see cref="T:System.Net.Sockets.Socket" /> connecté, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffers">Liste de <see cref="T:System.ArraySegment`1" /> de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> est vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Envoie le jeu de mémoires tampon dans la liste à un <see cref="T:System.Net.Sockets.Socket" /> connecté, à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffers">Liste de <see cref="T:System.ArraySegment`1" /> de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="errorCode">Objet <see cref="T:System.Net.Sockets.SocketError" /> qui stocke l'erreur de socket.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> est vide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte})">
      <summary>Envoie des données à un <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="buffer">Étendue d’octets qui contient les données à envoyer.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags)">
      <summary>Envoie des données à un <see cref="T:System.Net.Sockets.Socket" /> connecté à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Étendue d’octets qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison de bits des valeurs d’énumération qui spécifie les comportements d’envoi et de réception.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.ReadOnlySpan{System.Byte},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>Envoie des données à un <see cref="T:System.Net.Sockets.Socket" /> connecté à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Étendue d’octets qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison de bits des valeurs d’énumération qui spécifie les comportements d’envoi et de réception.</param>
      <param name="errorCode">Lorsque cette méthode est retournée, contient l’une des valeurs d’énumération qui définit les codes d’erreur pour le socket.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Le nombre d’octets envoyés au <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Envoie des données de façon asynchrone à un objet <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentException">La propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> ou <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> sur le paramètre de <paramref name="e" /> doit référencer des mémoires tampon valides. L'une ou l'autre de ces propriétés peut être définie, mais pas les deux à la fois.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Le <see cref="T:System.Net.Sockets.Socket" /> n'est pas encore connecté ou n'a pas été obtenu via une méthode <see cref="M:System.Net.Sockets.Socket.Accept" />, <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />ou <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" />.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String)">
      <summary>Envoie le fichier <paramref name="fileName" /> à un objet <see cref="T:System.Net.Sockets.Socket" /> connecté avec l'indicateur de transmission <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" />.</summary>
      <param name="fileName">
        <see cref="T:System.String" /> contenant le chemin d’accès et le nom du fichier à envoyer. Ce paramètre peut être <see langword="null" />.</param>
      <exception cref="T:System.NotSupportedException">Le socket n’est pas connecté à un hôte distant.</exception>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">L’objet <see cref="T:System.Net.Sockets.Socket" /> n’est pas en mode blocage et ne peut pas accepter cet appel synchrone.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Le fichier <paramref name="fileName" /> est introuvable.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)">
      <summary>Envoie le <paramref name="fileName" /> et les tampons de données du fichier à un objet <see cref="T:System.Net.Sockets.Socket" /> connecté à l’aide de la valeur <see cref="T:System.Net.Sockets.TransmitFileOptions" /> spécifiée.</summary>
      <param name="fileName">
        <see cref="T:System.String" /> contenant le chemin d’accès et le nom du fichier à envoyer. Ce paramètre peut être <see langword="null" />.</param>
      <param name="preBuffer">Tableau <see cref="T:System.Byte" /> contenant les données à envoyer avant l’envoi du fichier. Ce paramètre peut être <see langword="null" />.</param>
      <param name="postBuffer">Tableau <see cref="T:System.Byte" /> contenant les données à envoyer après l’envoi du fichier. Ce paramètre peut être <see langword="null" />.</param>
      <param name="flags">Une ou plusieurs des valeurs <see cref="T:System.Net.Sockets.TransmitFileOptions" />.</param>
      <exception cref="T:System.NotSupportedException">Le système d'exploitation n'est pas Windows NT ou une version ultérieure.  
  
- ou -
  
 Le socket n’est pas connecté à un hôte distant.</exception>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">L’objet <see cref="T:System.Net.Sockets.Socket" /> n’est pas en mode blocage et ne peut pas accepter cet appel synchrone.</exception>
      <exception cref="T:System.IO.FileNotFoundException">Le fichier <paramref name="fileName" /> est introuvable.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Envoie une collection de fichiers ou des données mises en mémoire tampon de façon asynchrone à un objet <see cref="T:System.Net.Sockets.Socket" /> connecté.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.IO.FileNotFoundException">Le fichier spécifié dans la propriété <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> est introuvable.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode. Cette exception se produit également si le <see cref="T:System.Net.Sockets.Socket" /> n'est pas connecté à un hôte distant.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Un <see cref="T:System.Net.Sockets.Socket" /> sans connexion est utilisé et le fichier qui est envoyé dépasse la taille maximale du paquet du transport sous-jacent.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Envoie le nombre spécifié d'octets de données au point de terminaison spécifié, en commençant à l'emplacement spécifié dans la mémoire tampon et en utilisant le <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="offset">La position dans le tampon de données par laquelle doit commencer l’envoi des données.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l'emplacement de destination des données.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est inférieur à 0.  
  
- ou - 
 <paramref name="offset" /> est supérieur à la longueur de <paramref name="buffer" />.  
  
- ou - 
 <paramref name="size" /> est inférieur à 0.  
  
- ou - 
 <paramref name="size" /> est supérieur à la longueur de <paramref name="buffer" /> moins la valeur du paramètre <paramref name="offset" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> n’est pas une combinaison valide de valeurs.  
  
- ou - 
Une erreur du système d’exploitation se produit pendant l’accès au <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant de la pile des appels ne dispose pas des autorisations requises.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Envoie le nombre spécifié d'octets de données au point de terminaison spécifié à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="size">Le nombre d’octets à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l'emplacement de destination des données.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le <paramref name="size" /> spécifié dépasse la taille de <paramref name="buffer" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
      <summary>Envoie les données au point de terminaison spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente la destination des données.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Envoie des données à un point de terminaison spécifique à l'aide du <see cref="T:System.Net.Sockets.SocketFlags" /> spécifié.</summary>
      <param name="buffer">Tableau de type <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l'emplacement de destination des données.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.  
  
- ou - 
 <paramref name="remoteEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Envoie des données de façon asynchrone à un hôte distant spécifique.</summary>
      <param name="e">Objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> à utiliser pour cette opération de socket asynchrone.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> ne peut pas être Null.</exception>
      <exception cref="T:System.InvalidOperationException">Une opération de socket utilisant l'objet <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> spécifié dans le paramètre <paramref name="e" /> spécifié était déjà en cours.</exception>
      <exception cref="T:System.NotSupportedException">Windows XP ou version ultérieure est requis pour cette méthode.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Le protocole spécifié est orienté connexion, mais le <see cref="T:System.Net.Sockets.Socket" /> n'est pas encore connecté.</exception>
      <returns>
        <see langword="true" /> si l’opération d’E/S est en attente. L'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> sera déclenché une fois l'opération terminée.  
  
 <see langword="false" /> si l’opération d’E/S a été terminée de manière synchrone. Dans ce cas, l'événement <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> sur le paramètre <paramref name="e" /> ne sera pas déclenché et l'objet <paramref name="e" /> transmis en tant que paramètre peut être examiné immédiatement après que l'appel de méthode a été retourné pour extraire le résultat de l'opération.</returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)">
      <summary>Définit le niveau de protection IP sur un socket.</summary>
      <param name="level">Niveau de protection IP à définir sur ce socket.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="level" /> ne peut pas avoir la valeur <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />. Le niveau de protection IP ne peut pas être non spécifié.</exception>
      <exception cref="T:System.NotSupportedException">Le <see cref="T:System.Net.Sockets.AddressFamily" /> du socket doit être <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetRawSocketOption(System.Int32,System.Int32,System.ReadOnlySpan{System.Byte})">
      <summary>Définit une valeur d’option de socket à l’aide d’identificateurs de nom et de niveau propres à la plateforme.</summary>
      <param name="optionLevel">Niveau d’option défini par la plateforme.</param>
      <param name="optionName">Nom d’option défini par la plateforme.</param>
      <param name="optionValue">Valeur à laquelle l’option doit être définie.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
      <summary>Affecte la valeur <see cref="T:System.Net.Sockets.Socket" /> spécifiée à l'option <see cref="T:System.Boolean" /> spécifiée.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <param name="optionValue">Valeur de l'option, représentée en tant que <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.ObjectDisposedException">L’objet <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>Affecte la valeur spécifiée à l'option <see cref="T:System.Net.Sockets.Socket" /> spécifiée représentée sous la forme d'un tableau d'octets.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <param name="optionValue">Tableau de type <see cref="T:System.Byte" /> représentant la valeur de l'option.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>Affecte la valeur entière spécifiée à l'option <see cref="T:System.Net.Sockets.Socket" /> spécifiée.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <param name="optionValue">Valeur de l'option.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
      <summary>Affecte la valeur spécifiée à l'option <see cref="T:System.Net.Sockets.Socket" /> spécifiée représentée sous la forme d'un objet.</summary>
      <param name="optionLevel">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionLevel" />.</param>
      <param name="optionName">Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketOptionName" />.</param>
      <param name="optionValue">
        <see cref="T:System.Net.Sockets.LingerOption" /> ou <see cref="T:System.Net.Sockets.MulticastOption" /> qui contient la valeur de l'option.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="optionValue" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>Désactive les envois et les réceptions sur un <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <param name="how">Une des valeurs de <see cref="T:System.Net.Sockets.SocketShutdown" /> spécifiant l'opération qui ne sera plus autorisée.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>Obtient la famille d'adresses de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>Une des valeurs de l'objet <see cref="T:System.Net.Sockets.AddressFamily" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Available">
      <summary>Obtient la quantité de données reçues du réseau et disponibles pour la lecture.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d'octets de données reçus du réseau et disponibles pour la lecture.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Blocking">
      <summary>Obtient ou définit une valeur qui indique si <see cref="T:System.Net.Sockets.Socket" /> est en mode blocage.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> est bloqué ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Net.Sockets.Socket" /> est connecté à un hôte distant depuis la dernière opération <see cref="Overload:System.Net.Sockets.Socket.Send" /> ou <see cref="Overload:System.Net.Sockets.Socket.Receive" />.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> était connecté à une ressource distante lors de l'opération la plus récente ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.DontFragment">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.Socket" /> autorise la fragmentation des datagrammes IP (Internet Protocol).</summary>
      <exception cref="T:System.NotSupportedException">Cette propriété ne peut être définie que pour les sockets dans les familles <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> autorise la fragmentation des datagrammes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.DualMode">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.Socket" /> est un socket en mode double utilisé pour IPv4 et IPv6.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> est un socket en mode double ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.EnableBroadcast">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.Socket" /> peut envoyer ou recevoir des paquets de diffusion.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Cette option n'est valide que pour un socket datagramme.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> autorise les paquets de diffusion ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ExclusiveAddressUse">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.Socket" /> n'autorise qu'un seul processus à se lier à un port.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> a été appelé pour ce <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> n'autorise qu'un seul socket à se lier à un port spécifique ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" /> pour Windows Server 2003 et Windows XP Service Pack 2, et <see langword="false" /> pour toutes les autres versions.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Handle">
      <summary>Obtient le handle du système d'exploitation pour <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>
        <see cref="T:System.IntPtr" /> qui représente le handle du système d'exploitation pour <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.IsBound">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Net.Sockets.Socket" /> est lié à un port local spécifique.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> est lié à un port local ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.LingerState">
      <summary>Obtient ou définit une valeur qui spécifie si <see cref="T:System.Net.Sockets.Socket" /> doit différer la fermeture d'un socket lors d'une tentative d'envoi de l'ensemble des données en attente.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.Net.Sockets.LingerOption" /> qui spécifie comment maintenir un socket lors de sa fermeture.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.LocalEndPoint">
      <summary>Obtient le point de terminaison local.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.Net.EndPoint" /> que <see cref="T:System.Net.Sockets.Socket" /> utilise pour les communications.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.MulticastLoopback">
      <summary>Obtient ou définit une valeur spécifiant si les paquets multicast sortants sont remis à l'application émettrice.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> reçoit les paquets multicast sortants ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.NoDelay">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> spécifiant si le flux de données <see cref="T:System.Net.Sockets.Socket" /> utilise l'algorithme Nagle.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès à <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see langword="false" /> si <see cref="T:System.Net.Sockets.Socket" /> utilise l'algorithme Nagle ; sinon, <see langword="true" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv4">
      <summary>Indique si le système d'exploitation et les cartes réseau sous-jacents prennent en charge le protocole IPv4 (Internet Protocol version 4).</summary>
      <returns>
        <see langword="true" /> si le système d'exploitation et les cartes réseau prennent en charge le protocole IPv4 ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv6">
      <summary>Indique si le système d'exploitation et les cartes réseau sous-jacents prennent en charge le protocole IPv6 (Internet Protocol version 6).</summary>
      <returns>
        <see langword="true" /> si le système d'exploitation et les cartes réseau prennent en charge le protocole IPv6 ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsUnixDomainSockets">
      <summary>Indique si le système d’exploitation sous-jacent prend en charge les sockets de domaine UNIX.</summary>
      <returns>
        <see langword="true" /> Si le système d’exploitation prend en charge les sockets de domaine UNIX ; Sinon, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>Obtient le type de protocole de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>Une des valeurs de l'objet <see cref="T:System.Net.Sockets.ProtocolType" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveBufferSize">
      <summary>Obtient ou définit une valeur spécifiant la taille de la mémoire tampon de réception de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée pour une opération ensembliste est inférieure à 0.</exception>
      <returns>
        <see cref="T:System.Int32" /> contenant la taille de la mémoire tampon de réception en octets. La valeur par défaut est 8192.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveTimeout">
      <summary>Obtient ou définit une valeur spécifiant la durée après laquelle un appel <see cref="Overload:System.Net.Sockets.Socket.Receive" /> synchrone doit expirer.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée pour une opération ensembliste est inférieure à -1.</exception>
      <returns>Valeur du délai d'expiration exprimée en millisecondes. La valeur par défaut est 0, ce qui indique un délai d'attente infini. La valeur -1 indique également un délai d'attente infini.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>Obtient le point de terminaison distant.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.Net.EndPoint" /> avec lequel <see cref="T:System.Net.Sockets.Socket" /> communique.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SafeHandle">
      <summary>Obtient un <see cref="T:System.Net.Sockets.SafeSocketHandle" /> qui représente le descripteur de socket que l’objet <see cref="T:System.Net.Sockets.Socket" /> actuel encapsule.</summary>
      <returns>Handle de socket exposé de façon sécurisée pour le socket encapsulé par l' <see cref="T:System.Net.Sockets.Socket" /> objet actuel.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendBufferSize">
      <summary>Obtient ou définit une valeur spécifiant la taille de la mémoire tampon d'envoi de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée pour une opération ensembliste est inférieure à 0.</exception>
      <returns>
        <see cref="T:System.Int32" /> contenant la taille de la mémoire tampon d'envoi en octets. La valeur par défaut est 8192.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendTimeout">
      <summary>Obtient ou définit une valeur spécifiant la durée après laquelle un appel <see cref="Overload:System.Net.Sockets.Socket.Send" /> synchrone doit expirer.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur spécifiée pour une opération ensembliste est inférieure à -1.</exception>
      <returns>Valeur du délai d'attente exprimée en millisecondes. Si vous affectez à la propriété une valeur comprise entre 1 et 499, cette valeur est remplacée par 500. La valeur par défaut est 0, ce qui indique un délai d'attente infini. La valeur -1 indique également un délai d'attente infini.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SocketType">
      <summary>Obtient le type de <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>Une des valeurs de l'objet <see cref="T:System.Net.Sockets.SocketType" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv4">
      <summary>Obtient une valeur indiquant si la prise en charge d'IPv4 est disponible et active sur l'hôte en cours.</summary>
      <returns>
        <see langword="true" /> si l'hôte en cours prend en charge le protocole IPv4 ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv6">
      <summary>Obtient une valeur qui indique si le Framework prend en charge le protocole IPv6 pour certains membres <see cref="T:System.Net.Dns" /> obsolètes.</summary>
      <returns>
        <see langword="true" /> si le Framework prend en charge le protocole IPv6 pour certaines méthodes <see cref="T:System.Net.Dns" /> obsolètes ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Ttl">
      <summary>Obtient ou définit une valeur qui spécifie la durée de vie des paquets IP (Internet Protocol) envoyés par <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">La valeur TTL ne peut pas être un nombre négatif.</exception>
      <exception cref="T:System.NotSupportedException">Cette propriété ne peut être définie que pour les sockets dans les familles <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket. Cette erreur est également retournée lorsqu'une tentative a été faite pour affecter à TTL une valeur supérieure à 255.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Durée de vie.</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO">
      <summary>Spécifie si le socket doit utiliser uniquement le mode d'E/S avec chevauchement.</summary>
      <exception cref="T:System.InvalidOperationException">Le socket est lié à un port de terminaison.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.Socket" /> utilise uniquement le mode d'E/S avec chevauchement ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncEventArgs">
      <summary>Représente une opération de socket asynchrone.</summary>
    </member>
    <member name="E:System.Net.Sockets.SocketAsyncEventArgs.Completed">
      <summary>Événement utilisé pour terminer une opération asynchrone.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor">
      <summary>Crée une instance <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> vide.</summary>
      <exception cref="T:System.NotSupportedException">La plateforme n'est pas prise en charge.</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor(System.Boolean)">
      <summary>Initialise la <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" />.</summary>
      <param name="unsafeSuppressExecutionContextFlow">Indique s’il faut désactiver la capture et le flux du contexte d’exécution. Le flux du contexte d’exécution doit être désactivé uniquement s’il est géré par des couches supérieures.</param>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose">
      <summary>Libère les ressources non managées utilisées par l'instance <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> et supprime éventuellement les ressources managées.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize">
      <summary>Libère les ressources utilisées par la classe <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>Représente une méthode qui est appelée lorsqu'une opération asynchrone se termine.</summary>
      <param name="e">Événement qui est signalé.</param>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>Définit la mémoire tampon de données à utiliser avec une méthode de socket asynchrone.</summary>
      <param name="buffer">Mémoire tampon de données à utiliser avec une méthode de socket asynchrone.</param>
      <param name="offset">Offset, en octets, dans la mémoire tampon de données où l'opération démarre.</param>
      <param name="count">Quantité maximale de données, en octets, à envoyer ou à recevoir dans la mémoire tampon.</param>
      <exception cref="T:System.ArgumentException">Des mémoires tampons ambiguës sont spécifiées. Cette exception se produit si la valeur des propriétés <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> et <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> n'est pas Null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Un argument est hors limites. Cette exception se produit si le paramètre <paramref name="offset" /> est inférieur à zéro ou supérieur à la longueur du tableau dans la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />. Cette exception se produit également si le paramètre <paramref name="count" /> est inférieur à zéro ou supérieur à la longueur du tableau dans la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> moins le paramètre <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)">
      <summary>Définit la mémoire tampon de données à utiliser avec une méthode de socket asynchrone.</summary>
      <param name="offset">Offset, en octets, dans la mémoire tampon de données où l'opération démarre.</param>
      <param name="count">Quantité maximale de données, en octets, à envoyer ou à recevoir dans la mémoire tampon.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Un argument est hors limites. Cette exception se produit si le paramètre <paramref name="offset" /> est inférieur à zéro ou supérieur à la longueur du tableau dans la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />. Cette exception se produit également si le paramètre <paramref name="count" /> est inférieur à zéro ou supérieur à la longueur du tableau dans la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> moins le paramètre <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Memory{System.Byte})">
      <summary>Définit la zone de mémoire à utiliser comme mémoire tampon avec une méthode de socket asynchrone.</summary>
      <param name="buffer">Zone de mémoire à utiliser comme mémoire tampon avec une méthode de socket asynchrone.</param>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket">
      <summary>Obtient ou définit le socket à utiliser ou le socket créé pour accepter une connexion avec une méthode de socket asynchrone.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> à utiliser ou socket créé pour accepter une connexion avec une méthode de socket asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer">
      <summary>Obtient la mémoire tampon des données à utiliser avec une méthode de socket asynchrone.</summary>
      <returns>Tableau <see cref="T:System.Byte" /> qui représente la mémoire tampon des données à utiliser avec une méthode de socket asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList">
      <summary>Obtient ou définit un tableau de la mémoire tampon de données à utiliser avec une méthode de socket asynchrone.</summary>
      <exception cref="T:System.ArgumentException">Des mémoires tampon ambiguës sont spécifiées sur une opération ensembliste. Cette exception se produit si la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> a eu une valeur non NULL et une tentative a été faite pour affecter à la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> une valeur non NULL.</exception>
      <returns>
        <see cref="T:System.Collections.IList" /> qui représente un tableau de mémoires tampons de données à utiliser avec une méthode de socket asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred">
      <summary>Obtient le nombre d'octets transférés dans l'opération de socket.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient le nombre d'octets transférés dans l'opération de socket.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError">
      <summary>Obtient l'exception dans le cas d'un échec de connexion lorsqu'un <see cref="T:System.Net.DnsEndPoint" /> a été utilisé.</summary>
      <returns>
        <see cref="T:System.Exception" /> qui indique la cause de l'erreur de connexion lorsqu'un <see cref="T:System.Net.DnsEndPoint" /> a été spécifié pour la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket">
      <summary>Objet <see cref="T:System.Net.Sockets.Socket" /> créé et connecté après l'exécution correcte de la méthode <see cref="Overload:System.Net.Sockets.Socket.ConnectAsync" />.</summary>
      <returns>Objet <see cref="T:System.Net.Sockets.Socket" /> connecté.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Count">
      <summary>Obtient la quantité maximale de données, en octets, à envoyer ou recevoir dans une opération asynchrone.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient la quantité maximale de données, en octets, à envoyer ou recevoir.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket">
      <summary>Obtient ou définit une valeur qui indique si le socket peut être réutilisé après une opération de déconnexion.</summary>
      <returns>
        <see cref="T:System.Boolean" /> qui indique si le socket peut être réutilisé après une opération de déconnexion.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation">
      <summary>Obtient le type d'opération de socket exécuté le plus récemment avec cet objet de contexte.</summary>
      <returns>Instance <see cref="T:System.Net.Sockets.SocketAsyncOperation" /> qui indique le type d'opération de socket exécutée le plus récemment avec cet objet de contexte.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.MemoryBuffer">
      <summary>Obtient la zone de mémoire à utiliser comme mémoire tampon avec une méthode de socket asynchrone.</summary>
      <returns>Une région de mémoire qui représente la mémoire tampon de données à utiliser avec une méthode de socket asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Offset">
      <summary>Obtient l'offset, en octets, dans la mémoire tampon de données référencée par la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient l'offset, en octets, dans la mémoire tampon de données référencée par la propriété <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo">
      <summary>Obtient l'adresse IP et l'interface d'un paquet reçu.</summary>
      <returns>Instance <see cref="T:System.Net.Sockets.IPPacketInformation" /> qui contient l'adresse IP et l'interface de destination d'un paquet reçu.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint">
      <summary>Obtient ou définit le point de terminaison IP distant d'une opération asynchrone.</summary>
      <returns>
        <see cref="T:System.Net.EndPoint" /> qui représente le point de terminaison IP distant d'une opération asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements">
      <summary>Obtient ou définit un tableau de mémoires tampons à envoyer pour une opération asynchrone utilisée par la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</summary>
      <returns>Tableau des objets <see cref="T:System.Net.Sockets.SendPacketsElement" /> qui représentent un tableau de mémoires tampons à envoyer.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags">
      <summary>Obtient ou définit une combinaison d'opérations de bits des valeurs <see cref="T:System.Net.Sockets.TransmitFileOptions" /> pour une opération asynchrone utilisée par la méthode <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.TransmitFileOptions" /> qui contient une combinaison d'opérations de bits des valeurs utilisées avec une opération asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize">
      <summary>Obtient ou définit la taille, en octets, du bloc de données utilisé dans l'opération d'envoi.</summary>
      <returns>
        <see cref="T:System.Int32" /> qui contient la taille, en octets, du bloc de données utilisé dans l'opération d'envoi.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError">
      <summary>Obtient ou définit le résultat de l'opération de socket asynchrone.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.SocketError" /> qui représente le résultat final de l'opération de socket asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags">
      <summary>Obtient le résultat d'une opération de socket asynchrone ou définit le comportement d'une opération asynchrone.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.SocketFlags" /> qui représente le résultat de l'opération de socket asynchrone.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken">
      <summary>Obtient ou définit un objet utilisateur ou application associé à cette opération de socket asynchrone.</summary>
      <returns>Objet qui représente l'objet utilisateur ou application associé à cette opération de socket asynchrone.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncOperation">
      <summary>Type d’opération de socket asynchrone exécutée le plus récemment avec cet objet de contexte.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Accept">
      <summary>Opération Accept du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Connect">
      <summary>Opération Connect du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Disconnect">
      <summary>Opération Disconnect du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.None">
      <summary>Aucune des opérations de socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Receive">
      <summary>Opération Receive du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveFrom">
      <summary>Opération ReceiveFrom du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveMessageFrom">
      <summary>Opération ReceiveMessageFrom du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Send">
      <summary>Opération Send du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendPackets">
      <summary>Opération SendPackets du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendTo">
      <summary>Opération SendTo du socket.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketFlags">
      <summary>Spécifie les comportements d'envoi et de réception du socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Broadcast">
      <summary>Indique un paquet de diffusion.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.ControlDataTruncated">
      <summary>Indique que les données de contrôle ne tenaient pas dans une mémoire tampon de 64 Ko interne et ont été tronquées.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.DontRoute">
      <summary>Envoyer sans utiliser de tables de routage.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Multicast">
      <summary>Indique un paquet de multidiffusion.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.None">
      <summary>N’utiliser aucun indicateur pour cet appel.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.OutOfBand">
      <summary>Traiter les données hors bande.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Partial">
      <summary>Envoyer ou recevoir partiellement un message.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Peek">
      <summary>Lire le message entrant.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Truncated">
      <summary>Le message était trop grand pour tenir dans la mémoire tampon spécifiée et a été tronqué.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketInformation">
      <summary>Encapsule les informations nécessaires pour dupliquer un <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.Options">
      <summary>Obtient ou définit les options d'un <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>Instance de <see cref="T:System.Net.Sockets.SocketInformationOptions" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.ProtocolInformation">
      <summary>Obtient ou définit les informations de protocole d'un <see cref="T:System.Net.Sockets.Socket" />.</summary>
      <returns>Tableau de type <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketInformationOptions">
      <summary>Décrit les états d'un <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Connected">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> est connecté.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Listening">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> écoute les nouvelles connexions.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.NonBlocking">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> est non bloquant.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.UseOnlyOverlappedIO">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> utilise des entrées/sorties avec chevauchement.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionLevel">
      <summary>Définit les niveaux d'options de socket pour les méthodes <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" /> et <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IP">
      <summary>Les options <see cref="T:System.Net.Sockets.Socket" /> s'appliquent uniquement aux sockets IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IPv6">
      <summary>Les options <see cref="T:System.Net.Sockets.Socket" /> s'appliquent uniquement aux sockets IPv6.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Socket">
      <summary>Les options <see cref="T:System.Net.Sockets.Socket" /> s'appliquent à tous les sockets.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Tcp">
      <summary>Les options <see cref="T:System.Net.Sockets.Socket" /> s'appliquent uniquement aux sockets TCP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Udp">
      <summary>Les options <see cref="T:System.Net.Sockets.Socket" /> s'appliquent uniquement aux sockets UDP.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionName">
      <summary>Définit les noms des options de configuration.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AcceptConnection">
      <summary>Le socket est à l'écoute.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddMembership">
      <summary>Ajouter une appartenance au groupe IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddSourceMembership">
      <summary>Se joindre à un groupe source.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BlockSource">
      <summary>Bloquer les données d'une source.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Broadcast">
      <summary>Autoriser l'envoi de messages diffusés sur le socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BsdUrgent">
      <summary>Utiliser des données urgentes comme défini dans RFC-1222. Cette option ne peut être définie qu'à une seule reprise ; une fois définie, elle ne peut plus être désactivée.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ChecksumCoverage">
      <summary>Définir ou obtenir une couverture de checksum UDP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Debug">
      <summary>Enregistrer les informations de débogage.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontFragment">
      <summary>Ne pas fragmenter les datagrammes IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontLinger">
      <summary>Fermer le socket correctement sans le maintenir.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontRoute">
      <summary>Ne pas acheminer ; envoyer directement le paquet aux adresses d'interfaces.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropMembership">
      <summary>Abandonner une appartenance au groupe IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropSourceMembership">
      <summary>Déplacer un groupe source.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Error">
      <summary>Obtient l’état d’erreur et l’efface.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ExclusiveAddressUse">
      <summary>Permet à un socket d'être limité à un accès exclusif.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Expedited">
      <summary>Utiliser des données expédiées comme défini dans RFC-1222. Cette option ne peut être définie qu'à une seule reprise ; une fois définie, elle ne peut plus être désactivée.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HeaderIncluded">
      <summary>Indique que l'application fournit l'en-tête IP pour les datagrammes sortants.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HopLimit">
      <summary>Spécifie le nombre maximal de tronçons de routeur pour un paquet IPv6 (Internet Protocol version 6). Semblable au paramètre TTL (Time to Live) du protocole IPv4 (Internet Protocol version 4).</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPOptions">
      <summary>Spécifie les options IP à insérer dans les datagrammes sortants.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel">
      <summary>Active la restriction d’un socket IPv6 à une portée spécifiée, telle que les adresses avec le même préfixe de lien local ou de site local. Cette option de socket permet aux applications de placer des restrictions d’accès sur les sockets IPv6. Ces restrictions permettent à une application qui s'exécute sur un réseau local privé de se renforcer facilement et efficacement contre les attaques externes. Cette option de socket élargit ou limite la portée d'un socket en écoute, permettant l'accès illimité des utilisateurs publics et privés le cas échéant ou restreignant éventuellement l'accès au même site. Cette option de socket utilise les niveaux de protection définis spécifiés dans l'énumération <see cref="T:System.Net.Sockets.IPProtectionLevel" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IpTimeToLive">
      <summary>Définir le champ de durée de vie de l'en-tête IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPv6Only">
      <summary>Indique si un socket créé pour la famille d'adresses AF_INET6 est limité uniquement aux communications IPv6. Les sockets créés pour la famille d'adresses AF_INET6 peuvent être utilisés pour les communications IPv6 et IPv4. Certaines applications peuvent restreindre leur utilisation d'un socket créé pour la famille d'adresses AF_INET6 aux seules communications IPv6. Quand cette valeur n'est pas nulle (valeur par défaut sous Windows), un socket créé pour la famille d'adresses AF_INET6 peut uniquement être utilisé pour envoyer et recevoir des paquets IPv6. Quand cette valeur est nulle, un socket créé pour la famille d'adresses AF_INET6 peut être utilisé pour envoyer et recevoir des paquets vers et depuis une adresse IPv6 ou IPv4. Notez que pour interagir avec une adresse IPv4, l'utilisation d'adresses IPv4 mappées est requise. Cette option de socket est prise en charge sous Windows Vista ou versions ultérieures.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.KeepAlive">
      <summary>Utiliser des connexions persistantes.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Linger">
      <summary>Attendre pendant la fermeture s'il existe des données non envoyées.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MaxConnections">
      <summary>Option non prise en charge ; lève <see cref="T:System.Net.Sockets.SocketException" /> si elle est utilisée.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastInterface">
      <summary>Définir l'interface pour les paquets multicast sortants.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastLoopback">
      <summary>Bouclage multicast IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastTimeToLive">
      <summary>Durée de vie multicast IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoChecksum">
      <summary>Envoyer des datagrammes UDP dont le checksum a la valeur zéro.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoDelay">
      <summary>Désactive l'algorithme Nagle pour la fusion des envois.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.OutOfBandInline">
      <summary>Reçoit les données hors bande dans le flux de données normal.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.PacketInformation">
      <summary>Retourner des informations sur les paquets reçus.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveBuffer">
      <summary>Spécifie la quantité totale d'espace de la mémoire tampon réservée aux réceptions par socket. Cette valeur n'est pas liée à la taille maximale du message ou à la taille d'une fenêtre TCP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveLowWater">
      <summary>Spécifie la limite inférieure pour les opérations <see cref="Overload:System.Net.Sockets.Socket.Receive" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveTimeout">
      <summary>Recevoir un délai d’attente. Cette option s’applique uniquement aux méthodes synchrones. elle n’a aucun effet sur les méthodes asynchrones telles que la <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> méthode.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseAddress">
      <summary>Autorise la liaison du socket à une adresse déjà utilisée.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseUnicastPort">
      <summary>Indique que le système doit différer l'allocation de ports éphémères pour les connexions sortantes. Cela équivaut à utiliser l'option de socket SO_REUSE_UNICASTPORT de Winsock2.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendBuffer">
      <summary>Spécifie la quantité totale d'espace de la mémoire tampon réservée aux envois par socket. Cette valeur n'est pas liée à la taille maximale du message ou à la taille d'une fenêtre TCP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendLowWater">
      <summary>Spécifie la limite inférieure pour les opérations <see cref="Overload:System.Net.Sockets.Socket.Send" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendTimeout">
      <summary>Envoyer un délai d’attente. Cette option s’applique uniquement aux méthodes synchrones. elle n’a aucun effet sur les méthodes asynchrones telles que la <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> méthode.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TcpKeepAliveInterval">
      <summary>Nombre de secondes pendant lesquelles une connexion TCP attend une réponse KeepAlive avant d’envoyer une autre sonde KeepAlive.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TcpKeepAliveRetryCount">
      <summary>Nombre de sondes KeepAlive TCP qui seront envoyées avant la fin de la connexion.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TcpKeepAliveTime">
      <summary>Nombre de secondes pendant lesquelles une connexion TCP reste active/inactive avant que les sondes KeepAlive soient envoyées à distance.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Type">
      <summary>Obtient le type de socket.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TypeOfService">
      <summary>Modifier le champ correspondant au type de service de l'en-tête IP.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UnblockSource">
      <summary>Débloquer une source préalablement bloquée.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateAcceptContext">
      <summary>Met à jour les propriétés d'un socket accepté en utilisant celles d'un socket existant. Cela équivaut à utiliser l'option de socket SO_UPDATE_ACCEPT_CONTEXT de Winsock 2 ; cette option n'est prise en charge que sur les sockets orientés connexion.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateConnectContext">
      <summary>Met à jour les propriétés d'un socket connecté en utilisant celles d'un socket existant. Cela équivaut à utiliser l'option de socket SO_UPDATE_CONNECT_CONTEXT de Winsock 2 ; cette option n'est prise en charge que sur les sockets orientés connexion.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UseLoopback">
      <summary>Ignorer le matériel dans la mesure du possible.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketReceiveFromResult">
      <summary>Résultat d’une opération <see cref="M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveFromResult.ReceivedBytes">
      <summary>Nombre d’octets reçus. Si l’opération <see cref="M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)" /> a échoué, 0.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveFromResult.RemoteEndPoint">
      <summary>
        <see cref="T:System.Net.EndPoint" /> source.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketReceiveMessageFromResult">
      <summary>Résultat d’une opération <see cref="M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.PacketInformation">
      <summary>
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> contenant des informations d’adresse et d’interface.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.ReceivedBytes">
      <summary>Nombre d’octets reçus. Si l’opération <see cref="M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)" /> échoue, cette valeur est 0.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.RemoteEndPoint">
      <summary>
        <see cref="T:System.Net.EndPoint" /> source.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketReceiveMessageFromResult.SocketFlags">
      <summary>Combinaison d'opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" /> pour le paquet reçu.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>Définit les constantes qui sont utilisées par la méthode <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>Désactive <see cref="T:System.Net.Sockets.Socket" /> pour l'envoi et la réception. Ce champ est constant.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>Désactive <see cref="T:System.Net.Sockets.Socket" /> pour la réception. Ce champ est constant.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>Désactive <see cref="T:System.Net.Sockets.Socket" /> pour l'envoi. Ce champ est constant.</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketTaskExtensions">
      <summary>Cette classe contient des méthodes d’extension de la classe <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)">
      <summary>Effectue une opération asynchrone pour accepter une tentative de connexion entrante sur le socket.</summary>
      <param name="socket">Socket à l’écoute des connexions.</param>
      <returns>Tâche asynchrone qui se termine avec un <see cref="T:System.Net.Sockets.Socket" /> pour gérer la communication avec l’hôte distant.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)">
      <summary>Effectue une opération asynchrone pour accepter une tentative de connexion entrante sur le socket.</summary>
      <param name="socket">Socket à l’écoute des connexions entrantes.</param>
      <param name="acceptSocket">Objet <see cref="T:System.Net.Sockets.Socket" /> accepté. Cette valeur peut être <see langword="null" />.</param>
      <returns>Tâche asynchrone qui se termine avec un <see cref="T:System.Net.Sockets.Socket" /> pour gérer la communication avec l’hôte distant.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)">
      <summary>Établit une connexion à un hôte distant.</summary>
      <param name="socket">Socket utilisé pour établir une connexion.</param>
      <param name="remoteEP">EndPoint qui représente l’appareil distant.</param>
      <returns>Tâche asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint,System.Threading.CancellationToken)">
      <summary>Établit une connexion à un hôte distant.</summary>
      <param name="socket">Socket utilisé pour établir une connexion.</param>
      <param name="remoteEP">EndPoint qui représente l’appareil distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)">
      <summary>Établit une connexion à un hôte distant. L’hôte est spécifié par une adresse IP et un numéro de port.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de connexion.</param>
      <param name="address">Adresse IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <returns>Tâche qui représente une opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
      <summary>Établit une connexion à un hôte distant, qui est spécifié par une adresse IP et un numéro de port.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de connexion.</param>
      <param name="address">Adresse IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)">
      <summary>Établit une connexion à un hôte distant. L’hôte est spécifié par un tableau d’adresses IP et un numéro de port.</summary>
      <param name="socket">Socket sur lequel l’opération de connexion est effectuée.</param>
      <param name="addresses">Adresses IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32,System.Threading.CancellationToken)">
      <summary>Établit une connexion à un hôte distant, qui est spécifié par un tableau d’adresses IP et un numéro de port.</summary>
      <param name="socket">Socket sur lequel l’opération de connexion est effectuée.</param>
      <param name="addresses">Adresses IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)">
      <summary>Établit une connexion à un hôte distant. L’hôte est spécifié par un nom d’hôte et un numéro de port.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de connexion.</param>
      <param name="host">Nom de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <returns>Tâche asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32,System.Threading.CancellationToken)">
      <summary>Établit une connexion à un hôte distant, qui est spécifié par un nom d'hôte et un numéro de port.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de connexion.</param>
      <param name="host">Nom de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <returns>Tâche qui représente une opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)">
      <summary>Reçoit des données à partir d’un socket connecté.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de réception.</param>
      <param name="buffer">Tableau qui est l’emplacement de stockage des données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <returns>Tâche qui représente l'opération de réception asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>Reçoit des données à partir d’un socket connecté.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de réception.</param>
      <param name="buffers">Tableau qui est l’emplacement de stockage des données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <returns>Tâche qui représente l'opération de réception asynchrone. La valeur du paramètre <paramref name="TResult" /> contient le nombre d’octets reçus.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Memory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
      <summary>Reçoit des données à partir d’un socket connecté.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération de réception.</param>
      <param name="buffer">Zone de mémoire qui est l’emplacement de stockage pour les données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <returns>Tâche qui se termine avec le nombre d’octets reçus, ou 0 si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Reçoit des données à partir d’un périphérique réseau spécifié.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération ReceiveFrom.</param>
      <param name="buffer">Tableau de type Byte qui est l’emplacement de stockage des données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEndPoint">EndPoint qui représente la source des données.</param>
      <returns>Tâche asynchrone qui se termine avec un struct SocketReceiveFromResult.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Reçoit le nombre d’octets de données spécifié à l’emplacement de la mémoire tampon spécifié à l’aide des <see cref="T:System.Net.Sockets.SocketFlags" /> spécifiés, puis stocke les informations de paquet et de point de terminaison.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération.</param>
      <param name="buffer">Tableau qui est l’emplacement de stockage des données reçues.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEndPoint">
        <see cref="T:System.Net.EndPoint" /> qui représente le serveur distant.</param>
      <returns>Tâche asynchrone qui se termine avec un struct <see cref="T:System.Net.Sockets.SocketReceiveMessageFromResult" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)">
      <summary>Envoie des données à un socket connecté.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération.</param>
      <param name="buffer">Tableau de type Byte qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <returns>Tâche asynchrone qui se termine avec un nombre d’octets envoyés au socket si l’opération a réussi. Sinon, la tâche se termine avec une erreur de socket non valide.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>Envoie des données à un socket connecté.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération.</param>
      <param name="buffers">Tableau qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <returns>Tâche asynchrone qui se termine avec un nombre d’octets envoyés au socket si l’opération a réussi. Sinon, la tâche se termine avec une erreur de socket non valide.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ReadOnlyMemory{System.Byte},System.Net.Sockets.SocketFlags,System.Threading.CancellationToken)">
      <summary>Envoie des données à un socket connecté.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération.</param>
      <param name="buffer">Zone de mémoire qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <returns>Tâche qui se termine avec un nombre d’octets envoyés au socket si l’opération a réussi. Sinon, la tâche se termine avec une erreur de socket non valide.</returns>
    </member>
    <member name="M:System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>Envoie des données de façon asynchrone à un hôte distant spécifique.</summary>
      <param name="socket">Socket sur lequel effectuer l’opération.</param>
      <param name="buffer">Tableau qui contient les données à envoyer.</param>
      <param name="socketFlags">Combinaison d’opérations de bits des valeurs <see cref="T:System.Net.Sockets.SocketFlags" />.</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> qui représente l’appareil distant.</param>
      <returns>Tâche asynchrone qui se termine avec un nombre d’octets envoyés si l’opération a réussi. Sinon, la tâche se termine avec une erreur de socket non valide.</returns>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>Spécifie le type de socket que représente une instance de la classe <see cref="T:System.Net.Sockets.Socket" />.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Dgram">
      <summary>Prend en charge des datagrammes, qui sont des messages peu fiables, sans connexion, d'une longueur maximale fixe (généralement réduite). Des messages pourraient être perdus ou dupliqués et arriver dans le désordre. Un <see cref="T:System.Net.Sockets.Socket" /> de type <see cref="F:System.Net.Sockets.SocketType.Dgram" /> ne requiert aucune connexion avant d'envoyer et de recevoir des données, et peut communiquer avec plusieurs homologues. <see cref="F:System.Net.Sockets.SocketType.Dgram" /> utilise le protocole UDP (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) et la famille d’adresses <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> .</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Raw">
      <summary>Prend en charge l'accès au protocole de transport sous-jacent. En utilisant <see cref="F:System.Net.Sockets.SocketType.Raw" />, vous pouvez communiquer au moyen de protocoles comme Internet Control Message Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) et Internet Group Management Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />). Votre application doit fournir un en-tête IP complet lors de l'envoi. Les datagrammes reçus retournent avec l'en-tête IP et les options intacts.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Rdm">
      <summary>Prend en charge des messages sans connexion, orientés message, livrés avec fiabilité, et préserve les limites de message dans les données. Les messages Rdm (Reliably Delivered Messages) arrivent non dupliqués et dans l'ordre. En outre, l'émetteur est averti si des messages sont perdus. Si vous initialisez <see cref="T:System.Net.Sockets.Socket" /> à l'aide de <see cref="F:System.Net.Sockets.SocketType.Rdm" />, vous n'avez pas besoin d'une connexion d'hôte pour envoyer et recevoir des données. Avec <see cref="F:System.Net.Sockets.SocketType.Rdm" />, vous pouvez communiquer avec plusieurs homologues.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Seqpacket">
      <summary>Fournit un mécanisme de transfert bidirectionnel orienté connexion et fiable pour les flux d'octets ordonnés sur un réseau. <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> ne duplique pas les données et conserve les limites dans le flux de données. Un <see cref="T:System.Net.Sockets.Socket" /> de type <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> communique avec un homologue unique et nécessite une connexion d'hôte distant pour permettre le début d'une communication.</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>Prend en charge les flux d'octets fiables, bidirectionnels, orientés connexion sans la duplication de données et sans préservation de limites. Un <see cref="T:System.Net.Sockets.Socket" /> de ce type communique avec un homologue unique et nécessite une connexion d'hôte distant avant que la communication puisse débuter. <see cref="F:System.Net.Sockets.SocketType.Stream" /> utilise le protocole TCP (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) et la famille d’adresses <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> .</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>Spécifie un type <see cref="T:System.Net.Sockets.Socket" /> inconnu.</summary>
    </member>
    <member name="T:System.Net.Sockets.TcpClient">
      <summary>Fournit des connexions clientes pour les services réseau TCP.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpClient" /> et la lie au point de terminaison local spécifié.</summary>
      <param name="localEP">L'élément <see cref="T:System.Net.IPEndPoint" /> auquel vous liez l'élément <see cref="T:System.Net.Sockets.Socket" /> TCP.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="localEP" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpClient" /> avec la famille spécifiée.</summary>
      <param name="family">
        <see cref="P:System.Net.IPAddress.AddressFamily" /> du protocole IP.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="family" /> n'est pas égal à AddressFamily.InterNetwork. 
- ou - 
Le paramètre <paramref name="family" /> n'est pas égal à AddressFamily.InterNetworkV6.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpClient" /> et établit une connexion au port spécifié sur l'hôte spécifié.</summary>
      <param name="hostname">Nom DNS de l'hôte distant auquel vous voulez vous connecter.</param>
      <param name="port">Numéro de port de l'hôte distant auquel vous voulez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="hostname" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n’est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant. L'hôte distant est spécifié par un élément <see cref="T:System.Net.IPAddress" /> et un numéro de port (<see cref="T:System.Int32" />).</summary>
      <param name="address">Élément <see cref="T:System.Net.IPAddress" /> de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui contient des informations sur l'opération de connexion. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à la connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant. L'hôte distant est spécifié par un tableau <see cref="T:System.Net.IPAddress" /> et un numéro de port (<see cref="T:System.Int32" />).</summary>
      <param name="addresses">Au moins un élément <see cref="T:System.Net.IPAddress" /> qui désigne les hôtes distants.</param>
      <param name="port">Numéro de port des hôtes distants.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui contient des informations sur l'opération de connexion. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="addresses" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à la connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Démarre une demande asynchrone pour une connexion d'hôte distant. L'hôte distant est spécifié par un nom d'hôte (<see cref="T:System.String" />) et un numéro de port (<see cref="T:System.Int32" />).</summary>
      <param name="host">Nom de l'hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui contient des informations sur l'opération de connexion. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="host" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à la connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Close">
      <summary>Supprime cette instance de <see cref="T:System.Net.Sockets.TcpClient" /> et demande que la connexion TCP sous-jacente soit fermée.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>Connecte le client à un hôte TCP distant en utilisant l'adresse IP et le numéro de port spécifiés.</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> de l'hôte auquel vous souhaitez vous connecter.</param>
      <param name="port">Numéro de port auquel vous voulez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n'est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>Connecte le client à un hôte TCP distant en utilisant les adresses IP et le numéro de port spécifiés.</summary>
      <param name="ipAddresses">Tableau <see cref="T:System.Net.IPAddress" /> de l'hôte auquel vous souhaitez vous connecter.</param>
      <param name="port">Numéro de port auquel vous souhaitez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="ipAddresses" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets qui utilisent l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)">
      <summary>Connecte le client à un hôte TCP distant en utilisant le point de terminaison réseau distant spécifié.</summary>
      <param name="remoteEP">
        <see cref="T:System.Net.IPEndPoint" /> auquel vous souhaitez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="remoteEp" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)">
      <summary>Connecte le client au port spécifié sur l'hôte spécifié.</summary>
      <param name="hostname">Nom DNS de l'hôte distant auquel vous voulez vous connecter.</param>
      <param name="port">Numéro de port de l'hôte distant auquel vous voulez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="hostname" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n’est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)">
      <summary>Connecte le client à un hôte TCP distant en utilisant l'adresse IP et le numéro de port spécifiés sous forme d'opération asynchrone.</summary>
      <param name="address">Élément <see cref="T:System.Net.IPAddress" /> de l'hôte auquel vous voulez vous connecter.</param>
      <param name="port">Numéro de port auquel vous voulez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n'est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32,System.Threading.CancellationToken)">
      <summary>Connecte le client à un hôte TCP distant en utilisant l'adresse IP et le numéro de port spécifiés sous forme d'opération asynchrone.</summary>
      <param name="address">Adresse IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="address" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n'est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)">
      <summary>Connecte le client à un hôte TCP distant en utilisant les adresses IP et le numéro de port spécifiés sous forme d'opération asynchrone.</summary>
      <param name="addresses">Tableau <see cref="T:System.Net.IPAddress" /> de l'hôte auquel vous souhaitez vous connecter.</param>
      <param name="port">Numéro de port auquel vous voulez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="ipAddresses" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets qui utilisent l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32,System.Threading.CancellationToken)">
      <summary>Connecte le client à un hôte TCP distant en utilisant les adresses IP et le numéro de port spécifiés sous forme d'opération asynchrone.</summary>
      <param name="addresses">Tableau d’adresses IP de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="ipAddresses" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le numéro de port n’est pas valide.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <exception cref="T:System.Security.SecurityException">Un appelant situé plus haut dans la pile des appels n’a pas l’autorisation pour l’opération demandée.</exception>
      <exception cref="T:System.NotSupportedException">Cette méthode est valide pour les sockets qui utilisent l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)">
      <summary>Connecte le client au port TCP spécifié sur l'hôte spécifié en tant qu'opération asynchrone.</summary>
      <param name="host">Nom DNS de l'hôte distant auquel vous voulez vous connecter.</param>
      <param name="port">Numéro de port de l'hôte distant auquel vous voulez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="hostname" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n’est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32,System.Threading.CancellationToken)">
      <summary>Connecte le client au port TCP spécifié sur l'hôte spécifié sous forme d'opération asynchrone.</summary>
      <param name="host">Nom DNS de l’hôte distant.</param>
      <param name="port">Numéro de port de l'hôte distant.</param>
      <param name="cancellationToken">Jeton d’annulation qui peut être utilisé pour signaler que l’opération asynchrone doit être annulée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="hostname" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> n’est pas compris entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> est fermé.</exception>
      <returns>Tâche qui représente l'opération de connexion asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose">
      <summary>Libère toutes les ressources managées et non managées utilisées par <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Net.Sockets.TcpClient" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">Défini à <see langword="true" /> pour libérer à la fois les ressources managées et non managées ; <see langword="false" /> pour ne libérer que les ressources non managées.</param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)">
      <summary>Met fin à une tentative de connexion asynchrone en attente.</summary>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> retourné par un appel à <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" />.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> a été précédemment appelée pour la connexion asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès à <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Finalize">
      <summary>Libère les ressources utilisées par la classe <see cref="T:System.Net.Sockets.TcpClient" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.GetStream">
      <summary>Retourne le <see cref="T:System.Net.Sockets.NetworkStream" /> utilisé pour l'envoi et la réception de données.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.TcpClient" /> n'est pas connecté à un hôte distant.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> a été fermé.</exception>
      <returns>L'élément <see cref="T:System.Net.Sockets.NetworkStream" /> sous-jacent.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Active">
      <summary>Obtient ou définit une valeur indiquant si une connexion a été établie.</summary>
      <returns>
        <see langword="true" /> si la connexion a été établie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Available">
      <summary>Obtient la quantité de données reçues du réseau et disponibles pour la lecture.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant la tentative d’accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d'octets de données reçus du réseau et disponibles pour la lecture.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Client">
      <summary>Obtient ou définit l'élément <see cref="T:System.Net.Sockets.Socket" /> sous-jacent.</summary>
      <returns>L'élément <see cref="T:System.Net.Sockets.Socket" /> du réseau sous-jacent.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Connected">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent de <see cref="T:System.Net.Sockets.TcpClient" /> est connecté à un hôte distant.</summary>
      <returns>
        <see langword="true" /> si le socket <see cref="P:System.Net.Sockets.TcpClient.Client" /> était connecté à une ressource distante lors de l'opération la plus récente ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si l'élément <see cref="T:System.Net.Sockets.TcpClient" /> n'autorise qu'un seul client à utiliser un port.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket sous-jacent.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.TcpClient" /> n'autorise qu'un seul client à utiliser un port spécifique ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" /> pour Windows Server 2003 et Windows XP Service Pack 2 et ultérieur, et <see langword="false" /> pour toutes les autres versions.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.LingerState">
      <summary>Obtient ou définit les informations relatives à l'état de maintien du socket associé.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.LingerOption" /> Par défaut, la persistance est désactivée.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.NoDelay">
      <summary>Obtient ou définit une valeur qui désactive un délai de temporisation quand les mémoires tampons d'envoi ou de réception ne sont pas saturées.</summary>
      <returns>
        <see langword="true" /> Si le délai est désactivé ; Sinon, <see langword="false" /> . La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveBufferSize">
      <summary>Obtient ou définit la taille de la mémoire tampon de réception.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la définition de la taille de la mémoire tampon.  
  
 - ou -  
  
 Dans les applications .NET Compact Framework, vous ne pouvez pas définir cette propriété. Pour obtenir une solution de contournement, consultez la partie Remarque sur la plateforme de la section Notes.</exception>
      <returns>Taille de la mémoire tampon de réception en octets. La valeur par défaut est de 8 192 octets.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveTimeout">
      <summary>Obtient ou définit la durée pendant laquelle <see cref="T:System.Net.Sockets.TcpClient" /> attendra de recevoir des données une fois l'opération de lecture initialisée.</summary>
      <returns>Valeur du délai d'attente de la connexion en millisecondes. La valeur par défaut est 0.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendBufferSize">
      <summary>Obtient ou définit la taille de la mémoire tampon d'envoi.</summary>
      <returns>Taille de la mémoire tampon d'envoi en octets. La valeur par défaut est de 8 192 octets.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendTimeout">
      <summary>Obtient ou définit la durée pendant laquelle un élément <see cref="T:System.Net.Sockets.TcpClient" /> attendra qu'une opération d'envoi se termine correctement.</summary>
      <returns>Valeur de délai d'attente d'envoi, en millisecondes. La valeur par défaut est 0.</returns>
    </member>
    <member name="T:System.Net.Sockets.TcpListener">
      <summary>Écoute des connexions de clients réseau TCP.</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpListener" /> qui écoute sur le port spécifié.</summary>
      <param name="port">Port sur lequel écouter les tentatives de connexion entrante.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> n'est pas entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpListener" /> qui écoute les tentatives de connexion entrante sur l'adresse IP locale et le numéro de port spécifiés.</summary>
      <param name="localaddr">
        <see cref="T:System.Net.IPAddress" /> qui représente l'adresse IP locale.</param>
      <param name="port">Port sur lequel écouter les tentatives de connexion entrante.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localaddr" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> n'est pas entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.TcpListener" /> avec le point de terminaison local spécifié.</summary>
      <param name="localEP">
        <see cref="T:System.Net.IPEndPoint" /> qui représente le point de terminaison local auquel lier l'écouteur <see cref="T:System.Net.Sockets.Socket" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocket">
      <summary>Accepte une demande de connexion en attente.</summary>
      <exception cref="T:System.InvalidOperationException">L'écouteur n'a pas démarré avec un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> utilisé pour envoyer et recevoir des données.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
      <summary>Accepte une demande de connexion en attente en tant qu'opération asynchrone.</summary>
      <exception cref="T:System.InvalidOperationException">L'écouteur n'a pas démarré avec un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
      <returns>Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.Net.Sockets.Socket" /> utilisé pour envoyer et recevoir des données.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
      <summary>Accepte une demande de connexion en attente.</summary>
      <exception cref="T:System.InvalidOperationException">L'écouteur n'a pas démarré avec un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Utilisez la propriété <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> pour obtenir le code d'erreur spécifique. Une fois que vous avez obtenu ce code, vous pouvez consulter la documentation sur les codes d’erreur de l’API Windows Sockets version 2 pour obtenir une description détaillée de l’erreur.</exception>
      <returns>
        <see cref="T:System.Net.Sockets.TcpClient" /> utilisé pour envoyer et recevoir des données.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
      <summary>Accepte une demande de connexion en attente en tant qu'opération asynchrone.</summary>
      <exception cref="T:System.InvalidOperationException">L'écouteur n'a pas démarré avec un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Utilisez la propriété <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> pour obtenir le code d'erreur spécifique. Une fois que vous avez obtenu ce code, vous pouvez consulter la documentation sur les codes d’erreur de l’API Windows Sockets version 2 pour obtenir une description détaillée de l’erreur.</exception>
      <returns>Objet de tâche représentant l'opération asynchrone. La propriété <see cref="P:System.Threading.Tasks.Task`1.Result" /> sur l'objet de tâche retourne un <see cref="T:System.Net.Sockets.TcpClient" /> utilisé pour envoyer et recevoir des données.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
      <summary>Active ou désactive la traversée du traducteur d'accès réseau (NAT) sur une instance de <see cref="T:System.Net.Sockets.TcpListener" />.</summary>
      <param name="allowed">Valeur booléenne qui spécifie s'il faut activer ou désactiver la traversée du NAT.</param>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> a été appelée après l'appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
      <summary>Démarre une opération asynchrone pour accepter une tentative de connexion entrante.</summary>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur comportant des informations sur l'opération d'acceptation. Cet objet est passé au délégué <paramref name="callback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la création asynchrone de <see cref="T:System.Net.Sockets.Socket" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
      <summary>Démarre une opération asynchrone pour accepter une tentative de connexion entrante.</summary>
      <param name="callback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur comportant des informations sur l'opération d'acceptation. Cet objet est passé au délégué <paramref name="callback" /> quand l'opération est terminée.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>
        <see cref="T:System.IAsyncResult" /> qui fait référence à la création asynchrone de <see cref="T:System.Net.Sockets.TcpClient" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
      <summary>Crée une nouvelle instance <see cref="T:System.Net.Sockets.TcpListener" /> pour écouter sur le port spécifié.</summary>
      <param name="port">Port sur lequel écouter les tentatives de connexion entrante.</param>
      <returns>Nouvelle instance <see cref="T:System.Net.Sockets.TcpListener" /> à écouter sur le port spécifié.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
      <summary>Accepte de manière asynchrone une tentative de connexion entrante et crée un nouveau <see cref="T:System.Net.Sockets.Socket" /> pour gérer les communications de l'hôte distant.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> retourné par un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="asyncResult" /> n'a pas été créé par un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">La méthode <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> a été appelée au préalable.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès à <see cref="T:System.Net.Sockets.Socket" />.</exception>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" />
        <see cref="T:System.Net.Sockets.Socket" /> utilisé pour envoyer et recevoir des données.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
      <summary>Accepte de manière asynchrone une tentative de connexion entrante et crée un nouveau <see cref="T:System.Net.Sockets.TcpClient" /> pour gérer les communications de l'hôte distant.</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> retourné par un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />.</param>
      <returns>
        <see cref="T:System.Net.Sockets.TcpClient" />
        <see cref="T:System.Net.Sockets.TcpClient" /> utilisé pour envoyer et recevoir des données.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Pending">
      <summary>Détermine la présence éventuelle de demandes de connexion en attente.</summary>
      <exception cref="T:System.InvalidOperationException">L'écouteur n'a pas démarré avec un appel à la méthode <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
      <returns>
        <see langword="true" /> si des connexions sont en attente ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start">
      <summary>Démarre l'écoute de demandes de connexion entrante.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Utilisez la propriété <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> pour obtenir le code d'erreur spécifique. Une fois que vous avez obtenu ce code, vous pouvez consulter la documentation sur les codes d’erreur de l’API Windows Sockets version 2 pour obtenir une description détaillée de l’erreur.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
      <summary>Lance l'écoute des demandes de connexion entrantes avec un nombre maximal de connexions en attente.</summary>
      <param name="backlog">Longueur maximale de la file d'attente des connexions en attente.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de l'accès au socket.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="backlog" /> est inférieur à zéro ou dépasse le nombre maximal de connexions autorisées.</exception>
      <exception cref="T:System.InvalidOperationException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent est null.</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Stop">
      <summary>Ferme l'écouteur.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Utilisez la propriété <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> pour obtenir le code d'erreur spécifique. Une fois que vous avez obtenu ce code, vous pouvez consulter la documentation sur les codes d’erreur de l’API Windows Sockets version 2 pour obtenir une description détaillée de l’erreur.</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Active">
      <summary>Obtient une valeur qui indique si <see cref="T:System.Net.Sockets.TcpListener" /> écoute activement des connexions clientes.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.TcpListener" /> écoute activement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.TcpListener" /> n'autorise qu'un seul socket sous-jacent à écouter un port spécifique.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.TcpListener" /> a démarré. Appelez la méthode <see cref="M:System.Net.Sockets.TcpListener.Stop" />, puis définissez la propriété <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket sous-jacent.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.TcpListener" /> n'autorise qu'un seul <see cref="T:System.Net.Sockets.TcpListener" /> à écouter un port spécifique ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" /> pour Windows Server 2003 et Windows XP Service Pack 2 et ultérieur, et <see langword="false" /> pour toutes les autres versions.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.LocalEndpoint">
      <summary>Obtient le <see cref="T:System.Net.EndPoint" /> sous-jacent du <see cref="T:System.Net.Sockets.TcpListener" /> actuel.</summary>
      <returns>
        <see cref="T:System.Net.EndPoint" /> auquel <see cref="T:System.Net.Sockets.Socket" /> est lié.</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Server">
      <summary>Obtient le <see cref="T:System.Net.Sockets.Socket" /> réseau sous-jacent.</summary>
      <returns>L'élément <see cref="T:System.Net.Sockets.Socket" /> sous-jacent.</returns>
    </member>
    <member name="T:System.Net.Sockets.TransmitFileOptions">
      <summary>L'énumération <see cref="T:System.Net.Sockets.TransmitFileOptions" /> définit les valeurs utilisées dans les demandes de transfert de fichiers.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.Disconnect">
      <summary>Démarrez une déconnexion de niveau transport lorsque toutes les données de fichiers sont mises en file d'attente en vue de leur transmission. En cas d'utilisation avec <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket" />, ces indicateurs rétablissent l'état déconnecté et réutilisable du socket une fois le fichier transmis.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket">
      <summary>Le handle de socket peut être réutilisé une fois la demande terminée. Cet indicateur n'est valide que si <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> est également spécifié. En cas d'utilisation avec <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" />, ces indicateurs rétablissent l'état déconnecté et réutilisable du socket une fois le fichier transmis.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread">
      <summary>Utilisez le thread par défaut pour traiter les longues demandes de transfert de fichiers.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseKernelApc">
      <summary>Utilisez des appels de procédure asynchrone du noyau plutôt que des threads de travail pour traiter les longues demandes de transfert de fichiers. Les longues demandes sont celles qui requièrent plusieurs lectures du fichier ou d'un cache. La demande dépend par conséquent de la taille du fichier et de la longueur spécifiée du paquet d'envoi.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseSystemThread">
      <summary>Utilisez des threads système pour traiter les longues demandes de transfert de fichiers.</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.WriteBehind">
      <summary>Exécutez immédiatement la demande de transfert de fichiers, sans la mettre en attente. Si cet indicateur est spécifié et si le transfert de fichiers réussit, les données sont acceptées par le système, mais pas nécessairement par l'extrémité distante. N'utilisez pas cet indicateur avec les indicateurs <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> et <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket" />.</summary>
    </member>
    <member name="T:System.Net.Sockets.UdpClient">
      <summary>Fournit les services de réseau UDP (User Datagram Protocol).</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpClient" /> et la lie au numéro de port local fourni.</summary>
      <param name="port">Numéro de port local à partir duquel vous souhaitez communiquer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="port" /> est supérieur au champ <see cref="F:System.Net.IPEndPoint.MaxPort" /> ou inférieur au champ <see cref="F:System.Net.IPEndPoint.MinPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpClient" /> et la lie au numéro de port local fourni.</summary>
      <param name="port">Port sur lequel écouter les tentatives de connexion entrante.</param>
      <param name="family">Une des valeurs <see cref="T:System.Net.Sockets.AddressFamily" /> qui spécifie le schéma d'adressage du socket.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> n'est pas <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, ni <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> est supérieur à <see cref="F:System.Net.IPEndPoint.MaxPort" /> ou inférieur à <see cref="F:System.Net.IPEndPoint.MinPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpClient" /> et la lie au point de terminaison local spécifié.</summary>
      <param name="localEP">
        <see cref="T:System.Net.IPEndPoint" /> qui représente le point de terminaison local auquel lier la connexion UDP.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
      <param name="family">Une des valeurs <see cref="T:System.Net.Sockets.AddressFamily" /> qui spécifie le schéma d'adressage du socket.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> n'est pas <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, ni <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpClient" /> et établit un hôte distant par défaut.</summary>
      <param name="hostname">Nom de l'hôte DNS distant auquel vous souhaitez vous connecter.</param>
      <param name="port">Numéro de port distant auquel vous souhaitez vous connecter.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> n'est pas entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)">
      <summary>Active ou désactive la traversée du traducteur d'accès réseau (NAT) sur une instance de <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
      <param name="allowed">Valeur booléenne qui spécifie s'il faut activer ou désactiver la traversée du NAT.</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>Reçoit un datagramme d'un hôte distant de manière asynchrone.</summary>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération de réception. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à la réception asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>Envoie un datagramme à un hôte distant de manière asynchrone. La destination a été spécifiée précédemment par un appel à <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />.</summary>
      <param name="datagram">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="bytes">Le nombre d’octets à envoyer.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération d'envoi. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
      <summary>Envoie un datagramme à une destination de manière asynchrone. La destination est spécifiée par un <see cref="T:System.Net.EndPoint" />.</summary>
      <param name="datagram">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="bytes">Le nombre d’octets à envoyer.</param>
      <param name="endPoint">
        <see cref="T:System.Net.EndPoint" /> qui représente la destination des données.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération d'envoi. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Envoie un datagramme à une destination de manière asynchrone. La destination est spécifiée par le nom d'hôte et le numéro de port.</summary>
      <param name="datagram">Tableau <see cref="T:System.Byte" /> qui contient les données à envoyer.</param>
      <param name="bytes">Le nombre d’octets à envoyer.</param>
      <param name="hostname">Hôte de destination.</param>
      <param name="port">Numéro du port de destination.</param>
      <param name="requestCallback">Délégué <see cref="T:System.AsyncCallback" /> qui fait référence à la méthode à appeler quand l'opération est terminée.</param>
      <param name="state">Objet défini par l'utilisateur qui comporte des informations sur l'opération d'envoi. Cet objet est passé au délégué <paramref name="requestCallback" /> quand l'opération est terminée.</param>
      <returns>Objet <see cref="T:System.IAsyncResult" /> qui fait référence à l'envoi asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Close">
      <summary>Ferme la connexion UDP.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>Établit un hôte distant par défaut en utilisant l'adresse IP et le numéro de port spécifiés.</summary>
      <param name="addr">
        <see cref="T:System.Net.IPAddress" /> de l'hôte distant auquel vous souhaitez envoyer des données.</param>
      <param name="port">Numéro de port auquel vous souhaitez envoyer des données.</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addr" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> n'est pas entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)">
      <summary>Établit un hôte distant par défaut en utilisant le point de terminaison du réseau spécifié.</summary>
      <param name="endPoint">
        <see cref="T:System.Net.IPEndPoint" /> qui spécifie le point de terminaison du réseau auquel vous souhaitez envoyer les données.</param>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endPoint" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)">
      <summary>Établit un hôte distant par défaut en utilisant le nom d'hôte et le numéro de port spécifiés.</summary>
      <param name="hostname">Nom DNS de l'hôte distant auquel vous souhaitez envoyer des données.</param>
      <param name="port">Numéro de port de l'hôte distant auquel vous souhaitez envoyer des données.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> n'est pas entre <see cref="F:System.Net.IPEndPoint.MinPort" /> et <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose">
      <summary>Libère toutes les ressources managées et non managées utilisées par <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Net.Sockets.UdpClient" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)">
      <summary>Quitte un groupe multicast.</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> du groupe multicast à quitter.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ArgumentException">L'adresse IP n'est pas compatible avec la valeur de <see cref="T:System.Net.Sockets.AddressFamily" /> qui définit le schéma d'adressage du socket.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>Quitte un groupe multicast.</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> du groupe multicast à quitter.</param>
      <param name="ifindex">Adresse locale du groupe multicast à quitter.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ArgumentException">L'adresse IP n'est pas compatible avec la valeur de <see cref="T:System.Net.Sockets.AddressFamily" /> qui définit le schéma d'adressage du socket.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)">
      <summary>Met fin à une réception asynchrone en attente.</summary>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> retourné par un appel à <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</param>
      <param name="remoteEP">Point de terminaison distant spécifié.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> a été précédemment appelé pour la lecture asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au <see cref="T:System.Net.Sockets.Socket" /> sous-jacent.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <returns>En cas de réussite, un tableau d’octets qui contient les données du datagramme.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)">
      <summary>Met fin à un envoi asynchrone en attente.</summary>
      <param name="asyncResult">Objet <see cref="T:System.IAsyncResult" /> retourné par un appel à <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> n'a pas été retourné par un appel à la méthode <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> a été précédemment appelé pour la lecture asynchrone.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket sous-jacent.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <returns>En cas de réussite, nombre d'octets envoyés à <see cref="T:System.Net.Sockets.UdpClient" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)">
      <summary>Ajoute <see cref="T:System.Net.Sockets.UdpClient" /> à un groupe multicast.</summary>
      <param name="ifindex">Index d'interface associé à l'adresse IP locale à laquelle joindre le groupe multicast.</param>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> multicast du groupe auquel vous souhaitez vous joindre.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
      <summary>Ajoute <see cref="T:System.Net.Sockets.UdpClient" /> à un groupe multicast.</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> multicast du groupe auquel vous souhaitez vous joindre.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ArgumentException">L'adresse IP n'est pas compatible avec la valeur de <see cref="T:System.Net.Sockets.AddressFamily" /> qui définit le schéma d'adressage du socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>Ajoute <see cref="T:System.Net.Sockets.UdpClient" /> à un groupe multicast avec la durée de vie (TTL, Time to Live) spécifiée.</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> du groupe multicast à joindre.</param>
      <param name="timeToLive">TTL mesurée en tronçons de routeur.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le TTL spécifié n'est pas compris entre 0 et 255.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">L'adresse IP n'est pas compatible avec la valeur de <see cref="T:System.Net.Sockets.AddressFamily" /> qui définit le schéma d'adressage du socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>Ajoute <see cref="T:System.Net.Sockets.UdpClient" /> à un groupe multicast.</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> multicast du groupe auquel vous souhaitez vous joindre.</param>
      <param name="localAddress">
        <see cref="T:System.Net.IPAddress" /> local.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)">
      <summary>Retourne un datagramme UDP qui a été envoyé par un hôte distant.</summary>
      <param name="remoteEP">
        <see cref="T:System.Net.IPEndPoint" /> qui représente l'hôte distant à partir duquel les données ont été envoyées.</param>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Tableau de type <see cref="T:System.Byte" /> qui contient les données du datagramme.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.ReceiveAsync">
      <summary>Retourne un datagramme UDP (de manière asynchrone), envoyé par un hôte distant.</summary>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Objet de tâche représentant l'opération asynchrone.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)">
      <summary>Envoie un datagramme UDP à un hôte distant.</summary>
      <param name="dgram">Tableau de type <see cref="T:System.Byte" /> qui spécifie le datagramme UDP à envoyer, représenté sous la forme d’un tableau d’octets.</param>
      <param name="bytes">Nombre d’octets dans le datagramme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> a déjà établi un hôte distant par défaut.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>Envoie un datagramme UDP à l’hôte au point de terminaison distant spécifié.</summary>
      <param name="dgram">Tableau de type <see cref="T:System.Byte" /> qui spécifie le datagramme UDP que vous voulez envoyer, représenté sous la forme d’un tableau d’octets.</param>
      <param name="bytes">Nombre d’octets dans le datagramme.</param>
      <param name="endPoint">
        <see cref="T:System.Net.IPEndPoint" /> qui représente l’hôte et le port auxquels envoyer le datagramme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> a déjà établi un hôte distant par défaut.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>Envoie un datagramme UDP à un port indiqué sur un hôte distant spécifié.</summary>
      <param name="dgram">Tableau de type <see cref="T:System.Byte" /> qui spécifie le datagramme UDP à envoyer, représenté sous la forme d’un tableau d’octets.</param>
      <param name="bytes">Nombre d’octets dans le datagramme.</param>
      <param name="hostname">Nom de l’hôte distant auquel vous voulez envoyer le datagramme.</param>
      <param name="port">Numéro de port distant avec lequel vous souhaitez communiquer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> a déjà établi un hôte distant par défaut.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Nombre d’octets envoyés.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)">
      <summary>Envoie un datagramme UDP à un hôte distant de manière asynchrone.</summary>
      <param name="datagram">Tableau de type <see cref="T:System.Byte" /> qui spécifie le datagramme UDP à envoyer, représenté sous la forme d’un tableau d’octets.</param>
      <param name="bytes">Nombre d’octets dans le datagramme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> a déjà établi un hôte distant par défaut.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>Envoie un datagramme UDP à un hôte distant de manière asynchrone.</summary>
      <param name="datagram">Tableau de type <see cref="T:System.Byte" /> qui spécifie le datagramme UDP à envoyer, représenté sous la forme d’un tableau d’octets.</param>
      <param name="bytes">Nombre d’octets dans le datagramme.</param>
      <param name="endPoint">
        <see cref="T:System.Net.IPEndPoint" /> qui représente l’hôte et le port auxquels envoyer le datagramme.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> a déjà établi un hôte distant par défaut.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>Envoie un datagramme UDP à un hôte distant de manière asynchrone.</summary>
      <param name="datagram">Tableau de type <see cref="T:System.Byte" /> qui spécifie le datagramme UDP à envoyer, représenté sous la forme d’un tableau d’octets.</param>
      <param name="bytes">Nombre d’octets dans le datagramme.</param>
      <param name="hostname">Nom de l’hôte distant auquel vous voulez envoyer le datagramme.</param>
      <param name="port">Numéro de port distant avec lequel vous souhaitez communiquer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> a déjà établi un hôte distant par défaut.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.UdpClient" /> est fermé.</exception>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s’est produite pendant l’accès au socket.</exception>
      <returns>Retourne <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Active">
      <summary>Obtient ou définit une valeur indiquant si un hôte distant par défaut a été établi.</summary>
      <returns>
        <see langword="true" /> si une connexion est active ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Available">
      <summary>Obtient le volume de données reçues du réseau et accessibles en lecture.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket.</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> a été fermé.</exception>
      <returns>Nombre d'octets de données reçues du réseau.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Client">
      <summary>Obtient ou définit le <see cref="T:System.Net.Sockets.Socket" /> de réseau sous-jacent.</summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> de réseau sous-jacent.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.DontFragment">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.UdpClient" /> autorise la fragmentation des datagrammes IP (Internet Protocol).</summary>
      <exception cref="T:System.NotSupportedException">Cette propriété ne peut être définie que pour les sockets qui utilisent l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ou l'indicateur <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.</exception>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.UdpClient" /> autorise la fragmentation des datagrammes ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.EnableBroadcast">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si <see cref="T:System.Net.Sockets.UdpClient" /> peut envoyer ou recevoir des paquets de diffusion.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.UdpClient" /> autorise les paquets de diffusion ; sinon, <see langword="false" />. La valeur par défaut est <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> qui spécifie si l'élément <see cref="T:System.Net.Sockets.UdpClient" /> n'autorise qu'un seul client à utiliser un port.</summary>
      <exception cref="T:System.Net.Sockets.SocketException">Une erreur s'est produite lors de la tentative d'accès au socket sous-jacent.</exception>
      <exception cref="T:System.ObjectDisposedException">Le <see cref="T:System.Net.Sockets.Socket" /> sous-jacent a été fermé.</exception>
      <returns>
        <see langword="true" /> si l'élément <see cref="T:System.Net.Sockets.UdpClient" /> n'autorise qu'un seul client à utiliser un port spécifique ; sinon, <see langword="false" />. La valeur par défaut est <see langword="true" /> pour Windows Server 2003 et Windows XP Service Pack 2 et ultérieur, et <see langword="false" /> pour toutes les autres versions.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.MulticastLoopback">
      <summary>Obtient ou définit une valeur <see cref="T:System.Boolean" /> spécifiant si les paquets multicast sortants sont remis à l'application émettrice.</summary>
      <returns>
        <see langword="true" /> si <see cref="T:System.Net.Sockets.UdpClient" /> reçoit les paquets multicast sortants ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Ttl">
      <summary>Obtient ou définit une valeur qui spécifie la durée de vie des paquets IP (Internet Protocol) envoyés par <see cref="T:System.Net.Sockets.UdpClient" />.</summary>
      <returns>Durée de vie.</returns>
    </member>
    <member name="T:System.Net.Sockets.UdpReceiveResult">
      <summary>Présente les informations du résultat d'une réception UDP provenant d'un appel à la méthode <see cref="M:System.Net.Sockets.UdpClient.ReceiveAsync" />.</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Net.Sockets.UdpReceiveResult" />.</summary>
      <param name="buffer">Mémoire tampon pour les données à recevoir dans le paquet UDP.</param>
      <param name="remoteEndPoint">Point de terminaison distant du paquet UDP.</param>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="other">Objet à comparer avec cette instance.</param>
      <returns>
        <see langword="true" /> si <paramref name="other" /> est une instance de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> et équivaut à la valeur de l'instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si cette instance est égale à un objet spécifié.</summary>
      <param name="obj">Objet à comparer avec cette instance.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est une instance de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> et équivaut à la valeur de l'instance ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.GetHashCode">
      <summary>Retourne le code de hachage de cette instance.</summary>
      <returns>Code de hachage.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)">
      <summary>Teste si deux instances de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> spécifiées sont équivalentes.</summary>
      <param name="left">Instance de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> figurant à gauche de l'opérateur d'égalité.</param>
      <param name="right">Instance de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> figurant à droite de l'opérateur d'égalité.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont égales ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)">
      <summary>Teste si deux instances de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> spécifiées ne sont pas égales.</summary>
      <param name="left">Instance de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> figurant à gauche de l'opérateur de différence.</param>
      <param name="right">Instance de <see cref="T:System.Net.Sockets.UdpReceiveResult" /> figurant à droite de l'opérateur de différence.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> sont inégaux ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpReceiveResult.Buffer">
      <summary>Obtient une mémoire tampon avec les données reçues dans le paquet UDP.</summary>
      <returns>Tableau <see cref="T:System.Byte" /> contenant les données reçues dans les paquets UDP.</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpReceiveResult.RemoteEndPoint">
      <summary>Obtient le point de terminaison distant depuis lequel le paquet UDP a été reçu.</summary>
      <returns>Point de terminaison distant depuis lequel le paquet UDP a été reçu.</returns>
    </member>
    <member name="T:System.Net.Sockets.UnixDomainSocketEndPoint">
      <summary>Représente un point de terminaison de socket de domaine Unix sous la forme d’un chemin.</summary>
    </member>
    <member name="M:System.Net.Sockets.UnixDomainSocketEndPoint.#ctor(System.String)">
      <summary>Initialise une nouvelle instance du <see cref="T:System.Net.Sockets.UnixDomainSocketEndPoint" /> avec le chemin de fichier sur lequel connecter un socket de domaine Unix.</summary>
      <param name="path">Chemin sur lequel connecter un socket de domaine Unix.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="path" /> est d’une longueur non valide pour une utilisation avec des sockets de domaine sur cette plateforme. La longueur doit être comprise entre 1 et la longueur autorisée du chemin natif.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Le système d’exploitation actuel ne prend pas en charge les sockets de domaine Unix.</exception>
    </member>
  </members>
</doc>
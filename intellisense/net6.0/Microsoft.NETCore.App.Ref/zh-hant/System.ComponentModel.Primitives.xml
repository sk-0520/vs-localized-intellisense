<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>指定屬性 (Property) 或事件是否應該顯示於 [屬性] 視窗中。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>指定在設計階段不可以修改的屬性或事件。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>指定在設計階段可以修改的屬性或事件。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 類別的新執行個體。</summary>
      <param name="browsable">如果在設計階段可以修改屬性或事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj">要比較的另一個物件。</param>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>取得值，表示物件是否為可瀏覽。</summary>
      <returns>如果物件是可瀏覽則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>指定分類的名稱，該分類會在將 <see cref="T:System.Windows.Forms.PropertyGrid" /> 控制項設定為 [分類] 模式時，以群組方式來顯示屬性或事件。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>使用分類名稱 Default 初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>使用指定的類別名稱來初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 類別的新執行個體。</summary>
      <param name="category">類別目錄的名稱。</param>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>傳回這個屬性的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>查閱指定分類的當地語系化名稱。</summary>
      <param name="value">所要查閱分類的識別項。</param>
      <returns>分類的當地語系化名稱，或者如果沒有當地語系化名稱時則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>取得代表動作分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>動作分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>取得代表 Appearance 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>外觀分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>取得代表 Asynchronous 分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>非同步分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>取得代表行為分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>行為分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>取得屬性 (Property) 分類的名稱或與這個屬性 (Attribute) 所套用的事件。</summary>
      <returns>屬性 (Property) 分類的名稱或與這個屬性 (Attribute) 所套用的事件。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>取得代表資料分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>資料分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>取得代表預設分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>預設分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>取得代表設計分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>設計分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>取得代表拖放分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>拖放分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>取得代表焦點分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>焦點分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>取得代表格式分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>格式分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>取得代表索引鍵分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>索引鍵分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>取得代表配置分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>配置分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>取得代表滑鼠分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>滑鼠分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>取得代表視窗樣式分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>視窗樣式分類的 <see cref="T:System.ComponentModel.CategoryAttribute" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Component">
      <summary>提供 <see cref="T:System.ComponentModel.IComponent" /> 介面的基底實作，並啟用應用程式之間的物件共用。</summary>
    </member>
    <member name="E:System.ComponentModel.Component.Disposed">
      <summary>當 <see cref="M:System.ComponentModel.Component.Dispose" /> 方法的呼叫處置元件時，就會發生。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Component" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose">
      <summary>釋放 <see cref="T:System.ComponentModel.Component" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.ComponentModel.Component" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.Component.Finalize">
      <summary>釋出 Unmanaged 資源並執行其他清除作業後，記憶體回收才能重新回收 <see cref="T:System.ComponentModel.Component" />。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.GetService(System.Type)">
      <summary>傳回表示 <see cref="T:System.ComponentModel.Component" /> 或其 <see cref="T:System.ComponentModel.Container" /> 所提供之服務的物件。</summary>
      <param name="service">
        <see cref="T:System.ComponentModel.Component" /> 所提供的服務。</param>
      <returns>
        <see cref="T:System.Object" />，表示 <see cref="T:System.ComponentModel.Component" /> 提供的服務，如果 <see cref="T:System.ComponentModel.Component" /> 沒有提供指定的服務，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Component.ToString">
      <summary>傳回任何包含 <see cref="T:System.ComponentModel.Component" /> 名稱的 <see cref="T:System.String" />。 不應覆寫此方法。</summary>
      <returns>任何包含 <see cref="T:System.ComponentModel.Component" /> 名稱的 <see cref="T:System.String" />，如果 <see cref="T:System.ComponentModel.Component" /> 未命名，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.CanRaiseEvents">
      <summary>取得值，指出元件是否能引發事件。</summary>
      <returns>如果元件可以引發事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Container">
      <summary>取得包含 <see cref="T:System.ComponentModel.IContainer" /> 的 <see cref="T:System.ComponentModel.Component" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" />，可能包含 <see cref="T:System.ComponentModel.Component" />，如果 <see cref="T:System.ComponentModel.Component" /> 未封裝在 <see cref="T:System.ComponentModel.IContainer" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.DesignMode">
      <summary>取得值，指出 <see cref="T:System.ComponentModel.Component" /> 目前是否處於設計模式。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.Component" /> 處於設計模式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Events">
      <summary>取得附加在這個 <see cref="T:System.ComponentModel.Component" /> 上的事件處理常式清單。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" />，提供這個元件的委派。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Site">
      <summary>取得或設定 <see cref="T:System.ComponentModel.Component" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>與 <see cref="T:System.ComponentModel.ISite" /> 關聯的 <see cref="T:System.ComponentModel.Component" />。如果 <see cref="T:System.ComponentModel.Component" /> 未封裝在 <see cref="T:System.ComponentModel.IContainer" />、<see cref="T:System.ComponentModel.Component" /> 沒有關聯的 <see cref="T:System.ComponentModel.ISite" />，或 <see cref="T:System.ComponentModel.Component" /> 從其 <see cref="T:System.ComponentModel.IContainer" /> 移除，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>提供 <see cref="T:System.ComponentModel.IComponent" /> 物件集合的唯讀容器。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])">
      <summary>使用指定的元件陣列，初始化 <see cref="T:System.ComponentModel.ComponentCollection" /> 類別的新執行個體。</summary>
      <param name="components">
        <see cref="T:System.ComponentModel.IComponent" /> 物件的陣列，用來初始化集合。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)">
      <summary>將整個集合複製至陣列，並於指定的陣列索引處開始寫入。</summary>
      <param name="array">要用來複製集合中物件的目的 <see cref="T:System.ComponentModel.IComponent" /> 陣列。</param>
      <param name="index">複製所要使用的起始 <paramref name="array" /> 索引。</param>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.Int32)">
      <summary>取得集合中指定集合索引上的 <see cref="T:System.ComponentModel.Component" />。</summary>
      <param name="index">所要取得的 <see cref="T:System.ComponentModel.Component" /> 集合索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">如果所指定的索引並不位於集合的索引範圍中。</exception>
      <returns>指定之索引處的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.String)">
      <summary>取得集合中符合指定名稱的所有元件。</summary>
      <param name="name">要取得之 <see cref="T:System.ComponentModel.IComponent" /> 的名稱。</param>
      <returns>名稱與 <paramref name="name" /> 參數所指定名稱相符的元件，如果在集合中找不到具名的元件，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>指定屬性或事件的描述。</summary>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 的預設值，也就是空字串 ("")。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>使用無參數的方式，初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>使用描述來初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">描述文字。</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DescriptionAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute">
      <summary>傳回數值，表示此項目是否為預設的 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 執行個體。</summary>
      <returns>如果這是預設的 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>取得儲存在這個屬性中的描述。</summary>
      <returns>儲存在這個屬性中的描述。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>取得或設定儲存為描述的字串。</summary>
      <returns>儲存為描述的字串。 預設值為空字串 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>指示序列化 (Serialization) 管理員要使用的序列化工具，以序列化這個屬性所套用的型別值。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerTypeName">序列化工具基底資料型別的完整名稱。 只要序列化工具有不同的基底型別，便可以為類別提供多個序列化工具。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerType">序列化工具的基底資料型別。 只要序列化工具有不同的基底型別，便可以為類別提供多個序列化工具。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerType">序列化工具的資料型別。</param>
      <param name="baseSerializerType">序列化工具的基底資料型別。 只要序列化工具有不同的基底型別，便可以為類別提供多個序列化工具。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>取得序列化工具基底型別的完整型別名稱。</summary>
      <returns>序列化工具基底型別的完整型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>取得序列化工具的完整型別名稱。</summary>
      <returns>序列化工具的完整型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>表示此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>指定用來實作元件之設計階段服務的類別。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>使用提供設計階段服務的型別名稱來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerTypeName">針對這個屬性所繫結至之元件提供設計階段服務的型別，其完整名稱的串連，以及這個型別所在的組件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>使用設計工具型別和設計工具的基底類別 (Base Class) 來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerTypeName">針對這個屬性所繫結至之元件提供設計階段服務的型別，其完整名稱的串連，以及這個型別所在的組件名稱。</param>
      <param name="designerBaseTypeName">與設計工具類別相關的基底類別的完整名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>使用設計工具類別的名稱和設計工具的基底類別來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerTypeName">針對這個屬性所繫結至之元件提供設計階段服務的型別，其完整名稱的串連，以及這個型別所在的組件名稱。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示與 <paramref name="designerTypeName" /> 相關的基底類別。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>使用提供設計階段服務的型別來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示為與這個屬性繫結的元件提供設計階段服務的類別。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>使用設計工具的型別和設計工具基底類別來初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 類別的新執行個體。</summary>
      <param name="designerType">
        <see cref="T:System.Type" />，表示為與這個屬性繫結的元件提供設計階段服務的類別。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，表示與 <paramref name="designerType" /> 相關的基底類別。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DesignerAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>取得這個設計工具的基底型別名稱。</summary>
      <returns>這個設計工具的基底型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>取得與這個設計工具屬性相關的設計工具型別名稱。</summary>
      <returns>與這個設計工具屬性相關的設計工具型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>取得此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerCategoryAttribute">
      <summary>指定類別的設計工具屬於特定的分類。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
      <summary>指定標記為這個分類的元件會使用元件設計工具。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Default">
      <summary>指定標記為這個分類的元件無法使用視覺化設計工具。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
      <summary>指定標記為這個分類的元件會使用表單設計工具。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
      <summary>指定標記為這個分類的元件會使用泛型設計工具。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
      <summary>使用空字串 ("") 來初始化 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
      <summary>使用指定的分類名稱來初始化 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 類別的新執行個體。</summary>
      <param name="category">類別目錄的名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
      <summary>取得分類的名稱。</summary>
      <returns>類別目錄的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.TypeId">
      <summary>取得這個屬性的唯一識別項。</summary>
      <returns>
        <see cref="T:System.Object" />，屬性的唯一識別項。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibility">
      <summary>指定屬性的可視度給設計階段序列化工具。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Content">
      <summary>程式碼產生器產生物件內容的程式碼，而非物件本身的程式碼。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Hidden">
      <summary>程式碼產生器不會產生物件的程式碼。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Visible">
      <summary>程式碼產生器會產生物件的程式碼。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
      <summary>指定於設計階段序列化元件上屬性時所使用的保存 (Persistence) 類型。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content">
      <summary>指定序列化程式應該序列化屬性的內容，而不是屬性本身。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Default">
      <summary>指定預設值 <see cref="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible" />，亦即，視覺化設計工具使用預設規則產生屬性值。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Hidden">
      <summary>指定序化程式不應該序列化屬性的值。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible">
      <summary>指定序列化程式應該要允許序列化屬性的值。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，初始化 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 類別的新執行個體。</summary>
      <param name="visibility">其中一個 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj">要比較的另一個物件。</param>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode">
      <summary>傳回此物件的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性設為預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visibility">
      <summary>在決定是否要或是如何保存屬性的值時，取得代表序列化程式所應使用基本序列化模式的值。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值。 預設為 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DesignOnlyAttribute">
      <summary>指定屬性是否只能在設計階段進行設定。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.DesignOnlyAttribute.No" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.No">
      <summary>指定屬性可在設計階段或 Run Time 進行設定。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Yes">
      <summary>指定屬性只能在設計階段進行設定。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 類別的新執行個體。</summary>
      <param name="isDesignOnly">如果屬性只能在設計階段進行設定則為 <see langword="true" />；如果屬性可以在設計階段和 Run Time 進行設定則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly">
      <summary>取得值，表示屬性是否只能在設計階段進行設定。</summary>
      <returns>如果屬性只能在設計階段進行設定則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DisplayNameAttribute">
      <summary>指定不使用引數之屬性、事件或 public void 方法的顯示名稱。</summary>
    </member>
    <member name="F:System.ComponentModel.DisplayNameAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 的預設值。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)">
      <summary>使用顯示名稱，初始化 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 類別的新執行個體。</summary>
      <param name="displayName">顯示名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 執行個體是否相等。</summary>
      <param name="obj">測試值相等的 <see cref="T:System.ComponentModel.DisplayNameAttribute" />。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayName">
      <summary>取得不使用這個屬性 (Attribute) 中所儲存引數之屬性 (Property)、事件或 public void 方法的顯示名稱。</summary>
      <returns>顯示名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayNameValue">
      <summary>取得或設定顯示名稱。</summary>
      <returns>顯示名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>指定用來變更屬性的編輯器。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>使用預設的編輯器 (也就是沒有編輯器)，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>使用編輯器的型別名稱和基底型別名稱，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">編輯器的完整型別名稱。</param>
      <param name="baseTypeName">基底類別或介面的完整型別名稱，用來做為編輯器的查閱索引鍵。 這個類別必須是或衍生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>使用型別名稱和基底型別，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">編輯器的完整型別名稱。</param>
      <param name="baseType">基底類別或介面的 <see cref="T:System.Type" />，用來做為編輯器的查閱索引鍵。 這個類別必須是或衍生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>使用型別和基底型別，初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示編輯器的型別。</param>
      <param name="baseType">基底類別或介面的 <see cref="T:System.Type" />，用來做為編輯器的查閱索引鍵。 這個類別必須是或衍生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>取得基底類別或介面的名稱，做為這個編輯器的查閱索引鍵。</summary>
      <returns>基底類別或介面的名稱，做為這個編輯器的查閱索引鍵。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>取得 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的編輯器類別的名稱。</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 格式的編輯器類別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>取得此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.EventHandlerList">
      <summary>提供委派 (Delegate) 的簡單清單。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.EventHandlerList" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)">
      <summary>將委派加入清單。</summary>
      <param name="key">擁有事件的物件。</param>
      <param name="value">要加入至清單的委派。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)">
      <summary>將委派清單加入目前清單內。</summary>
      <param name="listToAddFrom">要加入的清單。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.Dispose">
      <summary>處置委派清單。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
      <summary>將委派從清單移除。</summary>
      <param name="key">擁有事件的物件。</param>
      <param name="value">要從清單移除的委派。</param>
    </member>
    <member name="P:System.ComponentModel.EventHandlerList.Item(System.Object)">
      <summary>取得或設定指定物件的委派。</summary>
      <param name="key">要在清單中尋找的物件。</param>
      <returns>指定索引鍵的委派，如果委派不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>提供所有元件所需的功能。</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>表示處理元件的 <see cref="E:System.ComponentModel.IComponent.Disposed" /> 事件的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>取得或設定與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的 <see cref="T:System.ComponentModel.IComponent" />。</summary>
      <returns>與元件相關聯的 <see cref="T:System.ComponentModel.ISite" /> 物件；或為 <see langword="null" /> (如果元件沒有站台)。</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>提供容器的功能。 容器是邏輯上包含零個或多個元件的物件。</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>在清單結尾處，將指定的 <see cref="T:System.ComponentModel.IComponent" /> 加入 <see cref="T:System.ComponentModel.IContainer" />。</summary>
      <param name="component">要加入的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>在清單結尾處，將指定的 <see cref="T:System.ComponentModel.IComponent" /> 加入 <see cref="T:System.ComponentModel.IContainer" />，並指派名稱給元件。</summary>
      <param name="component">要加入的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要指派給元件的唯一、不區分大小寫的名稱。  
  
-或- 
 <see langword="null" />，表示沒有為元件命名。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>從 <see cref="T:System.ComponentModel.IContainer" /> 移除元件。</summary>
      <param name="component">要移除的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>取得 <see cref="T:System.ComponentModel.IContainer" /> 中的所有元件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 物件的集合，表示 <see cref="T:System.ComponentModel.IContainer" /> 中的所有元件。</returns>
    </member>
    <member name="T:System.ComponentModel.ImmutableObjectAttribute">
      <summary>指定物件不具有可供編輯的子屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 的預設值。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.No">
      <summary>指定物件至少具有一個可編輯的子屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Yes">
      <summary>指定物件不具有可供編輯的子屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 類別的新執行個體。</summary>
      <param name="immutable">如果物件是不變的，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute">
      <summary>表示此執行個體的值是否為預設值。</summary>
      <returns>如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ImmutableObjectAttribute.Immutable">
      <summary>取得值，表示物件是否為不變的。</summary>
      <returns>如果物件是不變的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InitializationEventAttribute">
      <summary>指定初始設定時引發的事件。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.InitializationEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.InitializationEventAttribute" /> 類別的新執行個體。</summary>
      <param name="eventName">初始設定事件的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.InitializationEventAttribute.EventName">
      <summary>取得初始設定物件的名稱。</summary>
      <returns>初始設定事件的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>在應該執行作業的執行緒不存在或沒有訊息迴圈時擲回。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>使用指定的詳細描述來初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
      <param name="innerException">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>使用為列舉值的無效引數時，會將例外狀況 (Exception) 擲回。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>不使用訊息來初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化資料和內容，初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 類別的新執行個體。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">與這個例外狀況一起顯示的訊息。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
      <param name="innerException">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>使用引數、無效值和列舉型別 (Enumeration) 類別所產生的訊息來初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 類別的新執行個體。</summary>
      <param name="argumentName">造成例外狀況的引數名稱。</param>
      <param name="invalidValue">失敗的引數值。</param>
      <param name="enumClass">
        <see cref="T:System.Type" />，表示具有有效值的列舉型別類別。</param>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>提供站台所需的功能。</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>當由類別實作時，取得與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的元件。</summary>
      <returns>與 <see cref="T:System.ComponentModel.IComponent" /> 相關聯的 <see cref="T:System.ComponentModel.ISite" /> 執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>當由類別實作時，取得與 <see cref="T:System.ComponentModel.IContainer" /> 相關聯的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>與 <see cref="T:System.ComponentModel.IContainer" /> 相關聯的 <see cref="T:System.ComponentModel.ISite" /> 執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>判斷由類別實作時，元件是否處於設計模式。</summary>
      <returns>如果元件處於設計模式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>當由類別實作時，取得或設定與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的元件名稱。</summary>
      <returns>與 <see cref="T:System.ComponentModel.ISite" /> 相關聯的元件名稱；或 <see langword="null" /> (如果沒有名稱指派給元件)。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
      <summary>指定這個物件對批次初始設定支援簡單的異動通知。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
      <summary>表示物件正在啟動初始設定。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
      <summary>表示物件已完成初始設定。</summary>
    </member>
    <member name="T:System.ComponentModel.ISynchronizeInvoke">
      <summary>提供同步或非同步執行委派 (Delegate) 的方式。</summary>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
      <summary>在建立此物件的執行緒上以非同步方式執行委派。</summary>
      <param name="method">方法的 <see cref="T:System.Delegate" />，採用包含在 <paramref name="args" /> 中的相同數字和型別的參數。</param>
      <param name="args">做為引數傳遞至指定方法的 <see cref="T:System.Object" /> 型別的陣列。 如果不需要引數，則這個可為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 介面，表示由呼叫這個方法所啟動的非同步作業 (Asynchronous Operation)。</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
      <summary>等候直到由呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 所啟動的處理序完成，然後傳回處理序所產生的值。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" /> 介面，表示透過呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 所啟動的非同步作業。</param>
      <returns>
        <see cref="T:System.Object" />，表示由非同步作業所產生的傳回值。</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
      <summary>在建立此物件的執行緒上同步執行委派，並封送處理對建立執行緒的呼叫。</summary>
      <param name="method">
        <see cref="T:System.Delegate" />，含有了要呼叫的方法，在控制項執行緒的內容中。</param>
      <param name="args">
        <see cref="T:System.Object" /> 型別的陣列，表示要傳遞至指定方法的引數。 如果不需要引數，則這個可為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Object" />，是表示來自所叫用的委派的傳回值，或者如果委派沒有任何傳回值，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
      <summary>取得值，表示當呼叫實作這個介面的物件時，呼叫端是否必須呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />。</summary>
      <returns>如果呼叫端必須呼叫 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LocalizableAttribute">
      <summary>指定是否應該當地語系化屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Default">
      <summary>指定預設值，即 <see cref="F:System.ComponentModel.LocalizableAttribute.No" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.No">
      <summary>指定屬性不應該當地語系化。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Yes">
      <summary>指定屬性應該當地語系化。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 類別的新執行個體。</summary>
      <param name="isLocalizable">如果屬性應該當地語系化則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.LocalizableAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LocalizableAttribute.IsLocalizable">
      <summary>取得值，表示是否應該將屬性當地語系化。</summary>
      <returns>如果屬性應該當地語系化則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MergablePropertyAttribute">
      <summary>指定這個屬性可以在 [屬性] 視窗中結合其他物件的屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Default">
      <summary>指定預設值，即 <see cref="F:System.ComponentModel.MergablePropertyAttribute.Yes" />，此屬性可與隸屬於 [屬性] 視窗中其他物件的屬性合併。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.No">
      <summary>指定屬性不可以在 [屬性] 視窗中結合其他物件的屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Yes">
      <summary>指定屬性可以在 [屬性] 視窗中結合其他物件的屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="allowMerge">如果這個屬性可以在 [屬性] 視窗中結合其他物件的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj">要比較的另一個物件。</param>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MergablePropertyAttribute.AllowMerge">
      <summary>取得值，表示這個屬性是否可在 [屬性] 視窗中結合其他物件的屬性。</summary>
      <returns>如果這個屬性可以在 [屬性] 視窗中結合其他物件的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NotifyParentPropertyAttribute">
      <summary>指示當屬性 (Attribute) 所套用的屬性 (Property) 值修改時，告知父代屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Default">
      <summary>表示預設的屬性 (Attribute) 狀態，屬性 (Property) 不會告知父代屬性值的變更。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.No">
      <summary>指示屬性值變更時不會告知父代屬性。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Yes">
      <summary>指示屬性值變更時會告知父代屬性。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.NotifyParentPropertyAttribute" /> 類別的新執行個體，使用指定的值判斷是否要在屬性值變更時告知父代屬性。</summary>
      <param name="notifyParent">如果變更時應該告知父代，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)">
      <summary>取得值，表示指定物件是否與目前物件相同。</summary>
      <param name="obj">要測試是否相等的物件。</param>
      <returns>如果物件與這個物件相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode">
      <summary>取得這個物件的雜湊程式碼。</summary>
      <returns>屬性所屬物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性目前的值是屬性的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NotifyParentPropertyAttribute.NotifyParent">
      <summary>取得或設定數值，表示是否應該在屬性值變更時告知父代屬性。</summary>
      <returns>如果變更時應該告知父代屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ParenthesizePropertyNameAttribute">
      <summary>指示關聯屬性的名稱是否使用括號在 [屬性] 視窗中顯示。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.ParenthesizePropertyNameAttribute.Default">
      <summary>使用指示關聯的屬性不應該以使用括號的方式顯示的預設值，初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 類別的新執行個體。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 類別的新執行個體，表示關聯的屬性不應該使用括號顯示。</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)">
      <summary>使用指示屬性是否要以括號的方式顯示的指定值，初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 類別的新執行個體。</summary>
      <param name="needParenthesis">如果名稱應該以括號顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(System.Object)">
      <summary>將指定的物件與這個物件相比較，以測試二者是否相等。</summary>
      <param name="obj" />
      <returns>如果相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode">
      <summary>取得這個物件的雜湊程式碼。</summary>
      <returns>屬性所屬物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性目前的值是屬性的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ParenthesizePropertyNameAttribute.NeedParenthesis">
      <summary>取得值，表示 [屬性] 視窗是否在 [屬性] 視窗中將屬性名稱以括號的方式顯示。</summary>
      <returns>如果屬性以括號顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>指定這個屬性 (Attribute) 繫結的屬性 (Property) 是唯讀的或是讀取/寫入的。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的預設值，即 <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" /> (換句話說，此屬性 (Attribute) 所繫結的屬性 (Property) 是可以讀取和寫入的)。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.No">
      <summary>指定這個屬性 (Attribute) 繫結的屬性 (Property) 是可讀取/寫入的，並可進行修改。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Yes">
      <summary>指定這個屬性 (Attribute) 繫結的屬性 (Property) 是唯讀的，並無法在伺服器總管中進行修改。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 類別的新執行個體。</summary>
      <param name="isReadOnly">如果這個屬性 (Attribute) 繫結的屬性 (Property) 是唯讀的，則為 <see langword="true" />；如果屬性 (property) 是可讀取/寫入的，則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="value">要比較的另一個物件。</param>
      <returns>如果 <paramref name="value" /> 等於這個執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>取得值，表示這個屬性 (Attribute) 繫結的內容 (Property) 是否為唯讀。</summary>
      <returns>如果這個屬性 (Attribute) 繫結的屬性 (Property) 是唯讀的則為 <see langword="true" />；如果屬性是可讀取/寫入的則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshProperties">
      <summary>定義識別項，表示 [屬性] 視窗的重新整理型別。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.All">
      <summary>必須查詢屬性，並重新整理檢視。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.None">
      <summary>不需要重新整理。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.Repaint">
      <summary>檢視必須重新整理。</summary>
    </member>
    <member name="T:System.ComponentModel.RefreshPropertiesAttribute">
      <summary>指出屬性方格應該在關聯的屬性值變更時重新整理。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.All">
      <summary>表示屬性值有任何變動時，需查詢並重新整理所有屬性。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Default">
      <summary>指示如果變更屬性值，不需重新整理其他屬性。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Repaint">
      <summary>指示如果屬性值變更，所有屬性都會重新繪製。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.#ctor(System.ComponentModel.RefreshProperties)">
      <summary>初始化 <see cref="T:System.ComponentModel.RefreshPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="refresh">代表重新整理方式的 <see cref="T:System.ComponentModel.RefreshProperties" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.Equals(System.Object)">
      <summary>覆寫此物件的 <see cref="Overload:System.Object.Equals" /> 方法。</summary>
      <param name="obj" />
      <returns>如果指定的物件相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode">
      <summary>傳回此物件的雜湊碼。</summary>
      <returns>屬性所屬物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshPropertiesAttribute.RefreshProperties">
      <summary>取得成員的重新整理屬性。</summary>
      <returns>
        <see cref="T:System.ComponentModel.RefreshProperties" />，表示成員目前的重新整理屬性。</returns>
    </member>
  </members>
</doc>
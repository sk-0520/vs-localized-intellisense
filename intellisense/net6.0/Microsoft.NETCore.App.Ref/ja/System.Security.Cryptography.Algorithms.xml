<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>AES (Advanced Encryption Standard) のすべての実装が継承する必要のある抽象基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.Aes" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>対称アルゴリズムを実行するために使用する暗号オブジェクトを作成します。</summary>
      <returns>対称アルゴリズムを実行するために使用する暗号オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>対称アルゴリズムを実行するために使用する AES の実装を指定する暗号オブジェクトを作成します。</summary>
      <param name="algorithmName">使用する AES の特定の実装の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmName" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>対称アルゴリズムを実行するために使用する暗号オブジェクト。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>操作の Counter with CBC-MAC (CCM) モードで使用される Advanced Encryption Standard (AES) キーを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>指定されたキーを使用して、<see cref="T:System.Security.Cryptography.AesCcm" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">このインスタンスに使用する秘密キー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> パラメーターの長さが 16、24、または 32 バイト (128、192、または 256 ビット) ではありません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>指定されたキーを使用して、<see cref="T:System.Security.Cryptography.AesCcm" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">このインスタンスに使用する秘密キー。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> パラメーターの長さが 16、24、または 32 バイト (128、192、または 256 ビット) ではありません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>認証タグを検証できる場合は、暗号化テキストを指定されたターゲット バッファーに暗号化解除します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。暗号化時に指定された値と一致する必要があります。</param>
      <param name="ciphertext">暗号化解除する暗号化されたコンテンツ。</param>
      <param name="tag">暗号化中にこのメッセージに対して生成された認証タグ。</param>
      <param name="plaintext">暗号化解除されたコンテンツを受け取るバイト配列。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化時に指定された値と一致する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" />、または <paramref name="plaintext" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">タグ値を検証できなかったか、暗号化解除操作に失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>認証タグを検証できる場合は、暗号化テキストを指定されたターゲット バッファーに暗号化解除します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。暗号化時に指定された値と一致する必要があります。</param>
      <param name="ciphertext">暗号化解除する暗号化されたコンテンツ。</param>
      <param name="tag">暗号化中にこのメッセージに対して生成された認証タグ。</param>
      <param name="plaintext">暗号化解除されたコンテンツを受け取るバイト スパン。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化時に指定された値と一致する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">タグ値を検証できなかったか、暗号化解除操作に失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.AesCcm" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>プレーンテキストを暗号化テキストのターゲット バッファーに暗号化し、別のバッファーに認証タグを生成します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。同じキーを持つすべての操作に対して一意の値である必要があります。</param>
      <param name="plaintext">暗号化するコンテンツ。</param>
      <param name="ciphertext">暗号化されたコンテンツを受け取るバイト配列。</param>
      <param name="tag">生成された認証タグを受け取るバイト配列。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化解除時にも指定する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" />、または <paramref name="plaintext" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">暗号化操作に失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>プレーンテキストを暗号化テキストのターゲット バッファーに暗号化し、別のバッファーに認証タグを生成します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。同じキーを持つすべての操作に対して一意の値である必要があります。</param>
      <param name="plaintext">暗号化するコンテンツ。</param>
      <param name="ciphertext">暗号化されたコンテンツを受け取るバイト スパン。</param>
      <param name="tag">生成された認証タグを受け取るバイト スパン。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化解除時にも指定する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">暗号化操作に失敗しました。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>このインスタンスでサポートされている nonce サイズをバイト単位で取得します。</summary>
      <returns>このインスタンスでサポートされている nonce サイズ: 7、8、9、10、11、12、または13バイト (56、64、72、80、88、96、または104ビット)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>このインスタンスでサポートされているタグ サイズをバイト単位で取得します。</summary>
      <returns>このインスタンスでサポートされるタグサイズ: 4、6、8、10、12、14、または16バイト (32、48、64、80、96、112、または128ビット)。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>操作の Galois/Counter Mode (GCM) モードで使用される Advanced Encryption Standard (AES) キーを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>指定されたキーを使用して、<see cref="T:System.Security.Cryptography.AesGcm" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">このインスタンスに使用する秘密キー。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> パラメーターの長さが 16、24、または 32 バイト (128、192、または 256 ビット) ではありません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>指定されたキーを使用して、<see cref="T:System.Security.Cryptography.AesGcm" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">このインスタンスに使用する秘密キー。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> パラメーターの長さが 16、24、または 32 バイト (128、192、または 256 ビット) ではありません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>認証タグを検証できる場合は、暗号化テキストを指定されたターゲット バッファーに暗号化解除します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。暗号化時に指定された値と一致する必要があります。</param>
      <param name="ciphertext">暗号化解除する暗号化されたコンテンツ。</param>
      <param name="tag">暗号化中にこのメッセージに対して生成された認証タグ。</param>
      <param name="plaintext">暗号化解除されたコンテンツを受け取るバイト配列。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化時に指定された値と一致する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" />、または <paramref name="plaintext" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">タグ値を検証できなかったか、暗号化解除操作に失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>認証タグを検証できる場合は、暗号化テキストを指定されたターゲット バッファーに暗号化解除します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。暗号化時に指定された値と一致する必要があります。</param>
      <param name="ciphertext">暗号化解除する暗号化されたコンテンツ。</param>
      <param name="tag">暗号化中にこのメッセージに対して生成された認証タグ。</param>
      <param name="plaintext">暗号化解除されたコンテンツを受け取るバイト スパン。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化時に指定された値と一致する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">タグ値を検証できなかったか、暗号化解除操作に失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.AesGcm" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>プレーンテキストを暗号化テキストのターゲット バッファーに暗号化し、別のバッファーに認証タグを生成します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。同じキーを持つすべての操作に対して一意の値である必要があります。</param>
      <param name="plaintext">暗号化するコンテンツ。</param>
      <param name="ciphertext">暗号化されたコンテンツを受け取るバイト配列。</param>
      <param name="tag">生成された認証タグを受け取るバイト配列。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化解除時にも指定する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" />、または <paramref name="plaintext" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">暗号化操作に失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>プレーンテキストを暗号化テキストのターゲット バッファーに暗号化し、別のバッファーに認証タグを生成します。</summary>
      <param name="nonce">このメッセージに関連付けられている nonce。同じキーを持つすべての操作に対して一意の値である必要があります。</param>
      <param name="plaintext">暗号化するコンテンツ。</param>
      <param name="ciphertext">暗号化されたコンテンツを受け取るバイト配列。</param>
      <param name="tag">生成された認証タグを受け取るバイト配列。</param>
      <param name="associatedData">このメッセージに関連付けられている追加データ。暗号化解除時にも指定する必要があります。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> パラメーターと <paramref name="ciphertext" /> の長さが同じではありません。

- または -

<paramref name="nonce" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> によって許可されていません。

- または -

<paramref name="tag" /> パラメーターの長さは <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> によって許可されていません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">暗号化操作に失敗しました。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>このインスタンスでサポートされている nonce サイズをバイト単位で取得します。</summary>
      <returns>このインスタンスでサポートされている nonce サイズ:12 バイト (96 ビット)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>このインスタンスでサポートされているタグ サイズをバイト単位で取得します。</summary>
      <returns>このインスタンスでサポートされるタグサイズ:12、13、14、15、または16バイト (96、104、112、120、または128ビット)。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>高度暗号化標準 (AES: Advanced Encryption Standard) 対称アルゴリズムのマネージド実装を提供します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AesManaged" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">FIPS に対する Windows セキュリティ ポリシーの設定が有効になっています。</exception>
      <exception cref="T:System.InvalidOperationException">この実装は、Windows プラットフォーム FIPS 準拠の暗号アルゴリズムには含まれません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>現在のキーおよび IV を使用して、対称復号化オブジェクトを作成します。</summary>
      <returns>対称復号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>指定したキーおよび IV を使用して、対称復号化オブジェクトを作成します。</summary>
      <param name="rgbKey">対称アルゴリズムに使用する共有キー。</param>
      <param name="rgbIV">対称アルゴリズムに使用する初期化ベクター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> または <paramref name="iv" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が無効です。</exception>
      <returns>対称復号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>現在のキーおよび IV を使用して、対称暗号化オブジェクトを作成します。</summary>
      <returns>対称暗号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>指定したキーおよび IV を使用して、対称暗号化オブジェクトを作成します。</summary>
      <param name="rgbKey">対称アルゴリズムに使用する共有キー。</param>
      <param name="rgbIV">対称アルゴリズムに使用する初期化ベクター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> または <paramref name="iv" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> が無効です。</exception>
      <returns>対称暗号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>対称アルゴリズムで使用するランダムな IV を生成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>対称アルゴリズムで使用するランダム キーを生成します。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>暗号操作のブロック サイズをビット単位で取得または設定します。</summary>
      <returns>暗号化操作のブロックサイズ (ビット単位)。 既定値は128ビットです。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>フィードバックとして使用するビット数を取得または設定します。</summary>
      <returns>フィードバック サイズ (ビット単位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>対称アルゴリズムで使用する初期化ベクター (IV: Initialization Vector) を取得または設定します。</summary>
      <returns>対称アルゴリズムで使用する IV。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>対称アルゴリズムで使用する共有キーを取得または設定します。</summary>
      <returns>対称アルゴリズム用のキー。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>対称アルゴリズムで使用する共有キーのサイズ (ビット単位) を取得または設定します。</summary>
      <returns>対称アルゴリズムで使用するキーのサイズ (ビット単位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>対称アルゴリズムでサポートされているブロック サイズをビット単位で取得します。</summary>
      <returns>対称アルゴリズムでサポートされているブロックサイズ (ビット単位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>対称アルゴリズムでサポートされているキー サイズをビット単位で取得します。</summary>
      <returns>対称アルゴリズムでサポートされているキーサイズ (ビット単位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>対称アルゴリズムの操作モードを取得または設定します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> が <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> または <see cref="F:System.Security.Cryptography.CipherMode.OFB" /> に設定されます。</exception>
      <returns>暗号化に使用するブロック暗号モードを指定する列挙値の 1 つ。 既定値は、<see cref="F:System.Security.Cryptography.CipherMode.CBC" /> です。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>対称アルゴリズムで使用する埋め込みモードを取得または設定します。</summary>
      <returns>適用するパディングの種類を指定する列挙値の 1 つ。 既定値は、<see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" /> です。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>すべての非対象キーの、交換逆フォーマッタの派生元になる基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>派生クラスでオーバーライドされると、暗号化されたキー交換データから機密情報を抽出します。</summary>
      <param name="rgb">機密情報が非表示にされるキー交換データ。</param>
      <returns>キー交換データから派生する機密情報。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>派生クラスでオーバーライドされるとき、機密情報の復号化に使用する秘密キーを設定します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> の実装のインスタンス。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>派生クラスでオーバーライドされたときに、非対称キー交換のパラメーターを取得または設定します。</summary>
      <returns>非対称キー交換操作のパラメーターを含む XML 形式の文字列。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>すべての非対称キーの交換フォーマッタの派生元となる基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>派生クラスでオーバーライドされた場合は、指定された入力データから暗号化したキー交換データを作成します。</summary>
      <param name="data">キー交換で渡される機密情報。</param>
      <returns>目的の受信者に送信する暗号化されたキー交換データ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>派生クラスでオーバーライドされた場合は、指定された入力データから暗号化したキー交換データを作成します。</summary>
      <param name="data">キー交換で渡される機密情報。</param>
      <param name="symAlgType">このパラメーターは、現在のバージョンでは使用されません。</param>
      <returns>目的の受信者に送信する暗号化されたキー交換データ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>派生クラスでオーバーライドされた場合に、機密情報の暗号化に使用する公開キーを設定します。</summary>
      <param name="key">公開キーを保持する <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> の実装のインスタンス。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>派生クラスでオーバーライドされると、非対称キー交換のパラメーターを取得します。</summary>
      <returns>非対称キー交換操作のパラメーターを含む XML 形式の文字列。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>非対称署名デフォーマッタ (逆フォーマッタ) のすべての実装の派生元である、抽象基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>派生クラスでオーバーライドされると、署名の検証に使用するハッシュ アルゴリズムを設定します。</summary>
      <param name="strName">署名の検証に使用するハッシュ アルゴリズムの名前。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>派生クラスでオーバーライドされると、署名の検証に使用する公開キーを設定します。</summary>
      <param name="key">公開キーを保持する <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> の実装のインスタンス。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>派生クラスでオーバーライドされると、指定されたデータの署名を検証します。</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" /> を使用して署名されたデータ。</param>
      <param name="rgbSignature">
        <paramref name="rgbHash" /> の検証対象の署名。</param>
      <returns>
        <paramref name="rgbSignature" /> が <paramref name="rgbHash" /> で指定したハッシュ アルゴリズムとキーを使用して計算された署名と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>指定したハッシュ値から署名を検証します。</summary>
      <param name="hash">署名の検証に使用するハッシュ アルゴリズム。</param>
      <param name="rgbSignature">検証対象の署名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>署名がハッシュで有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>非対称署名フォーマッタのすべての実装の派生元である、基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>派生クラスでオーバーライドされた場合、指定されたデータのシグネチャを作成します。</summary>
      <param name="rgbHash">署名する対象のデータ。</param>
      <returns>
        <paramref name="rgbHash" /> パラメーターのデジタル署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>指定されたハッシュ値から署名を作成します。</summary>
      <param name="hash">署名の作成に使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>指定されたハッシュ値の署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>派生クラスでオーバーライドされると、署名の作成に使用するハッシュ アルゴリズムを設定します。</summary>
      <param name="strName">署名の作成に使用するハッシュ アルゴリズムの名前。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>派生クラスでオーバーライドされると、署名の作成に使用する非対称アルゴリズムを設定します。</summary>
      <param name="key">署名の作成に使用する <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> の実装のインスタンス。</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>暗号構成情報にアクセスします。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.CryptoConfig" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>現在のアプリケーション ドメインに使用されるアルゴリズム マッピングに名前のセットを追加します。</summary>
      <param name="algorithm">割り当て先のアルゴリズム。</param>
      <param name="names">アルゴリズムに割り当てられる名前の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> パラメーターまたは <paramref name="names" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> には、アセンブリの外部からアクセスすることはできません。  
  
- または - 
<paramref name="names" /> パラメーター内のいずれかのエントリが、空か <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>現在のアプリケーション ドメインに使用されるオブジェクト識別子 (OID: Object Identifier) のマッピングに名前のセットを追加します。</summary>
      <param name="oid">割り当て先のオブジェクト識別子 (OID)。</param>
      <param name="names">OID に割り当てられる名前の配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid" /> パラメーターまたは <paramref name="names" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> パラメーター内のいずれかのエントリが、空か <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>指定した暗号オブジェクトの新しいインスタンスを作成します。</summary>
      <param name="name">インスタンスを作成する対象の暗号オブジェクトの簡易名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="name" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>指定した暗号オブジェクトの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>引数を指定して、指定した暗号オブジェクトの新しいインスタンスを作成します。</summary>
      <param name="name">インスタンスを作成する対象の暗号オブジェクトの簡易名。</param>
      <param name="args">指定した暗号オブジェクトを作成するために使用する引数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="name" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>指定した暗号オブジェクトの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>指定したオブジェクト識別子 (OID: Object IDentifier) をエンコードします。</summary>
      <param name="str">エンコードする OID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">OID のエンコーディング中にエラーが発生しました。</exception>
      <returns>エンコードされた OID を格納するバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>指定した簡易名に対応するアルゴリズムのオブジェクト識別子 (OID) を取得します。</summary>
      <param name="name">OID を取得する対象のアルゴリズムの簡易名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>指定したアルゴリズムの OID。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>FIPS (Federal Information Processing Standard) によって認定されたアルゴリズムのみを作成するポリシーをランタイムが適用するかどうかを示します。</summary>
      <returns>ポリシーを適用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>指定した長さのバイト シーケンスを派生させるすべてのクラスの継承元となる抽象基本クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.DeriveBytes" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Security.Cryptography.DeriveBytes" /> クラスによって使用されているアンマネージド リソースを解放します。オプションとして、マネージド リソースを解放することもできます。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>派生クラスでオーバーライドされた場合、擬似ランダム キー バイトを返します。</summary>
      <param name="cb">生成する擬似ランダム キー バイトの数。</param>
      <returns>擬似ランダム キー バイトを格納したバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>派生クラスでオーバーライドされた場合、演算の状態をリセットします。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>すべての <see cref="T:System.Security.Cryptography.DES" /> の実装の派生元となる DES (Data Encryption Standard) アルゴリズムの基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DES" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>暗号オブジェクトのインスタンスを作成して、Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />) アルゴリズムを実行します。</summary>
      <returns>暗号オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>暗号オブジェクトのインスタンスを作成して、<see cref="T:System.Security.Cryptography.DES" /> (Data Encryption Standard) アルゴリズムの指定した実装を実行します。</summary>
      <param name="algName">使用する <see cref="T:System.Security.Cryptography.DES" /> の特定の実装の名前。</param>
      <returns>暗号オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>指定したキーが半脆弱であるかどうかを判断します。</summary>
      <param name="rgbKey">半脆弱性をテストする共有キー。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> パラメーターのサイズが無効です。</exception>
      <returns>キーが半脆弱である場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>指定したキーが脆弱であるかどうかを判断します。</summary>
      <param name="rgbKey">脆弱性をテストする共有キー。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> パラメーターのサイズが無効です。</exception>
      <returns>キーが脆弱な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>
        <see cref="T:System.Security.Cryptography.DES" /> (Data Encryption Standard) アルゴリズム用の秘密鍵 (共通鍵) を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">鍵を <see langword="null" /> に設定しようとしました。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" /> と等しくない長さの鍵を設定しようとしました。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">弱い (脆弱) 鍵 (<see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" /> を参照) または部分的に弱い (準脆弱) 鍵 (<see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" /> を参照) を設定しようとしました。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.DES" /> アルゴリズムの秘密鍵 (共通鍵)。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) のすべての実装が継承する必要のある抽象基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>非対称アルゴリズムを実行するために使用する既定の暗号オブジェクトを作成します。</summary>
      <returns>非対象アルゴリズムを実行するために使用する暗号オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>キー サイズを指定して新しい短期 DSA キーを作成します。</summary>
      <param name="keySizeInBits">キー サイズ (ビット単位)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> は <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" /> によって許可されていません。</exception>
      <returns>指定したキー サイズの新しい短期 DSA キー。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>DSA キー パラメーターを指定して新しい短期 DSA キーを作成します。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムのパラメーター。</param>
      <returns>新しい短期 DSA キー。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>非対称アルゴリズムを実行するために使用する指定された暗号オブジェクトを作成します。</summary>
      <param name="algName">使用する <see cref="T:System.Security.Cryptography.DSA" /> の特定の実装の名前。</param>
      <returns>非対象アルゴリズムを実行するために使用する暗号オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>派生クラスでオーバーライドすると、指定したハッシュ値の <see cref="T:System.Security.Cryptography.DSA" /> 署名が作成されます。</summary>
      <param name="rgbHash">署名するハッシュ値。</param>
      <returns>指定したハッシュ値のデジタル署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定した形式で、指定したハッシュ値の DSA 署名を作成します。</summary>
      <param name="rgbHash">署名するハッシュ値。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定した形式で、指定したハッシュ値の DSA 署名を作成します。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.DSAParameters" /> をエクスポートします。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> のパラメーター。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>XML 文字列から <see cref="T:System.Security.Cryptography.DSA" /> オブジェクトを再構築します。</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.DSA" /> オブジェクトの再構築に使用する XML 文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> パラメーターの形式が正しくありません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>このキーによって生成された署名の最大サイズ (バイト単位) を指定した形式で取得します。</summary>
      <param name="signatureFormat">署名のエンコード形式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <returns>指定した形式の、このキーによって生成された署名の最大サイズ (バイト単位)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイト配列部分のハッシュ値が計算されます。</summary>
      <param name="data">ハッシュされるデータ。</param>
      <param name="offset">ハッシュされる <paramref name="data" /> の最初のバイトのインデックス。</param>
      <param name="count">ハッシュするバイト数。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>ハッシュされたデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイナリ ストリームのハッシュ値が計算されます。</summary>
      <param name="data">ハッシュするバイナリ ストリーム。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>ハッシュされたデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="source" /> のコンテンツは、適用するキー派生関数 (KDF) が、<see cref="T:System.Char" /> ベースのパスワードを必要とするレガシの PKCS#12 KDF であることを示しています。

または

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

または

            <paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

または

            <paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>RFC 7468 PEM でエンコードされたキーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートするキーの PEM テキスト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

または

            <paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。

または

            <paramref name="input" /> には、暗号化された、PEM でエンコードされたキーが含まれます。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="T:System.Security.Cryptography.DSAParameters" /> をインポートします。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> のパラメーター。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> に必須フィールドがありません。

または

<paramref name="parameters" /> に、有効なキーの長さに一貫性がないフィールドがあります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> が、有効な DSA キー パラメーター セットを表していません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、PKCS#8 PrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 PrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 PrivateKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、X.509 SubjectPublicKeyInfo 構造体から公開キーをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-DER エンコードでの X.509 SubjectPublicKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-DER でエンコードされた X.509 SubjectPublicKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したバイト配列の一部分のハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュを計算する対象の入力データ。</param>
      <param name="offset">配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="count">配列内でデータとして使用されるバイトの数。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が 0 未満です。  
  
または 
 <paramref name="count" /> が 0 未満です。  
  
または 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="offset">
        <paramref name="data" /> 内のハッシュの開始位置を示すオフセット。</param>
      <param name="count">
        <paramref name="data" /> から読み取るバイト数。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。
 
-または- <paramref name="offset" /> が 0 未満です。
 
-または- <paramref name="count" /> が 0 未満です。
 
-または- <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したバイト配列のハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュを計算する対象の入力データ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したストリームのハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュを計算する対象の入力ストリーム。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの DSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>現在の <see cref="T:System.Security.Cryptography.DSA" /> オブジェクトの XML 文字列形式を作成して返します。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>現在の <see cref="T:System.Security.Cryptography.DSA" /> オブジェクトの XML 文字列エンコーディング。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>指定されたハッシュの DSA 署名を、指定されたバッファーに作成しようとします。</summary>
      <param name="hash">署名するハッシュ。</param>
      <param name="destination">署名を受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このインスタンスでは公開キーのみ表されます。

または

この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、<paramref name="hash" /> は 20 バイトの値ではありません。

または

それ以外の場合は署名の作成が失敗しました。</exception>
      <returns>
        <paramref name="destination" /> が結果を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したハッシュ値の DSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したハッシュ値の DSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して、現在のキーを PKCS#8 EncryptedPrivateKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化するときにパスワードとして使用するバイト。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。

または

<paramref name="pbeParameters" /> は、<see cref="T:System.Char" /> ベースのパスワードを必要とする <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> を使用する必要があることを示しています。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して、PKCS#8 EncryptedPrivateKeyInfo 形式の現在のキーを、指定されたバッファーにエクスポートすることを試みます。</summary>
      <param name="password">キー マテリアルを暗号化するときに使用するパスワード。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 形式の現在のキーを、指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">PKCS#8 PrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを X.509 SubjectPublicKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>指定されたバッファーに指定されたデータのハッシュ値を計算しようとします。</summary>
      <param name="data">ハッシュされるデータ。</param>
      <param name="destination">ハッシュ値を受け取るバイト スパン。</param>
      <param name="hashAlgorithm">使用するハッシュ アルゴリズムの名前。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。</param>
      <returns>
        <paramref name="destination" /> が結果を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>指定されたデータの DSA 署名を、指定されたバッファーに作成しようとします。</summary>
      <param name="data">ハッシュおよび署名するデータ。</param>
      <param name="destination">署名を受け取るバイト スパン。</param>
      <param name="hashAlgorithm">使用するハッシュ アルゴリズムの名前。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。</param>
      <returns>
        <paramref name="destination" /> が結果を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したデータの DSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="data">ハッシュおよび署名するデータ。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したデータの DSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="data">ハッシュおよび署名するデータ。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したデータのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="signature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、ハッシュ アルゴリズムは SHA-1 ではありません。

または

それ以外の場合は署名の検証が失敗しました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>デジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、バイト配列の部分のデータのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="offset">ハッシュを計算する位置を示す開始インデックス。</param>
      <param name="count">ハッシュするバイト数。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="signature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が 0 未満です。  
  
または 
 <paramref name="count" /> が 0 未満です。  
  
または 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、ハッシュ アルゴリズムは SHA-1 ではありません。

または

それ以外の場合は署名の検証が失敗しました。</exception>
      <returns>デジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されたデータを格納している配列。</param>
      <param name="offset">
        <paramref name="data" /> の符号付き部分の開始インデックス。</param>
      <param name="count">署名された <paramref name="data" /> 内のバイト数。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。
 
-または- <paramref name="offset" /> が 0 未満です。
 
-または- <paramref name="count" /> が 0 未満です。
 
-または- <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したストリームのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="signature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、ハッシュ アルゴリズムは SHA-1 ではありません。

または

それ以外の場合は署名の検証が失敗しました。</exception>
      <returns>デジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定されたハッシュ アルゴリズムを使用して、バイト スパン内のデータのハッシュ値を計算し、これを指定された署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証対象の署名。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、ハッシュ アルゴリズムは SHA-1 ではありません。

または

それ以外の場合は署名の検証が失敗しました。</exception>
      <returns>デジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>派生クラスでオーバーライドされると、指定されたデータの <see cref="T:System.Security.Cryptography.DSA" /> 署名を検証します。</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" /> で署名したデータのハッシュ。</param>
      <param name="rgbSignature">
        <c>rgbData</c> の検証対象の署名。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、ハッシュ値の長さは 20 バイトではありません。

または

それ以外の場合は署名の検証が失敗しました。</exception>
      <returns>
        <paramref name="rgbSignature" /> が <paramref name="rgbHash" /> で指定したハッシュ アルゴリズムとキーを使用して計算された署名と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="rgbHash">署名されたハッシュ。</param>
      <param name="rgbSignature">検証する署名。</param>
      <param name="signatureFormat">
        <paramref name="rgbSignature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> または <paramref name="rgbSignature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>指定されたデータ ハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="hash">検証するデータ ハッシュ。</param>
      <param name="signature">検証する署名。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">この実装の種類では従来の DSA (FIPS 186-2) のみがサポートされます。また、ハッシュ値の長さは 20 バイトではありません。

または

それ以外の場合は署名の検証が失敗しました。</exception>
      <returns>デジタル署名がハッシュに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="hash">署名されたハッシュ。</param>
      <param name="signature">検証する署名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="hash">署名されたハッシュ。</param>
      <param name="signature">検証する署名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの標準のパラメーターを格納します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムのカウンターを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの <see langword="G" /> パラメーターを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの <see langword="J" /> パラメーターを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの <see langword="P" /> パラメーターを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの <see langword="Q" /> パラメーターを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムのシードを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの <see langword="X" /> パラメーターを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>
        <see cref="T:System.Security.Cryptography.DSA" /> アルゴリズムの <see langword="Y" /> パラメーターを指定します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />: Digital Signature Algorithm) PKCS#1 Version 1.5 署名を検証します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">キーを保持しているデジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) 署名逆フォーマッタのハッシュ アルゴリズムを指定します。</summary>
      <param name="strName">署名逆フォーマッタで使用するハッシュ アルゴリズムの名前。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> パラメーターが、<see cref="T:System.Security.Cryptography.SHA1" /> ハッシュ アルゴリズムに割り当てられません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) 署名逆フォーマッタで使用するキーを指定します。</summary>
      <param name="key">キーを保持している <see cref="T:System.Security.Cryptography.DSA" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>データのデジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) 署名を検証します。</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" /> を使用して署名されたデータ。</param>
      <param name="rgbSignature">
        <paramref name="rgbHash" /> の検証対象の署名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="rgbSignature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">DSA キーがありません。</exception>
      <returns>署名がデータに対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormat">
      <summary>アルゴリズムの DSA ファミリを使用した署名のデータ形式を指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.IeeeP1363FixedFieldConcatenation">
      <summary>指定したキーの署名を固定サイズで生成する、IEEE P1363 の署名形式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.Rfc3279DerSequence">
      <summary>署名をさまざまなサイズで生成する、IETF RFC 3279 の署名形式。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) 署名を作成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">キーを保持しているデジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>指定したデータのデジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) PKCS #1 署名を作成します。</summary>
      <param name="rgbHash">署名する対象のデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">OID が <see langword="null" /> です。  
  
- または - 
DSA キーが <see langword="null" /> です。</exception>
      <returns>指定したデータに対するデジタル署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) 署名フォーマッタのハッシュ アルゴリズムを指定します。</summary>
      <param name="strName">署名フォーマッタで使用するハッシュ アルゴリズムの名前。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> パラメーターが、<see cref="T:System.Security.Cryptography.SHA1" /> ハッシュ アルゴリズムに割り当てられません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>デジタル署名アルゴリズム (<see cref="T:System.Security.Cryptography.DSA" />) 署名フォーマッタで使用するキーを指定します。</summary>
      <param name="key">キーを保持している <see cref="T:System.Security.Cryptography.DSA" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>楕円曲線を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>明示的な曲線の 1 番目の係数。 <c>A</c> は、短いワイエルシュトラス、モントゴメリー、およびツイストしたエドワーズ曲線です。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>明示的な曲線の 2 番目の係数。 <c>B</c> は短いワイエルシュトラスで、<c>d</c> はツイストしたエドワーズ曲線です。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>曲線の余因子。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>
        <see cref="T:System.Security.Cryptography.ECCurve" /> オブジェクトのコンポジションを識別します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>曲線上の操作のジェネレーターまたは基点。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>ANSI X9.62 生成アルゴリズムで <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> から曲線の係数 (<see cref="F:System.Security.Cryptography.ECCurve.A" /> と <see cref="F:System.Security.Cryptography.ECCurve.B" />) を生成するために使用されたハッシュ アルゴリズムの名前。 明示的な曲線にのみ適用されます。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>曲線の順序。 明示的な曲線にのみ適用されます。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>多項式の曲線。 特性 2 曲線にのみ適用されます。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>基本フィールドを指定するプライム。 プライム曲線のみに適用されます。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>ANSI X9.62 生成アルゴリズムでの係数生成のシード値。 明示的な曲線にのみ適用されます。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>識別子の指定されたフレンドリ名を使用して名前付き曲線を作成します。</summary>
      <param name="oidFriendlyName">識別子のフレンドリ名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> が <see langword="null" />です。</exception>
      <returns>名前付き曲線を表すオブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>指定された <see cref="T:System.Security.Cryptography.Oid" /> オブジェクトを使用して名前付き曲線を作成します。</summary>
      <param name="curveOid">使用するオブジェクト識別子。</param>
      <returns>名前付き曲線を表すオブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>識別子の指定したドット形式 10 進表現を使用して名前付き曲線を作成します。</summary>
      <param name="oidValue">識別子のドット形式の数字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> が <see langword="null" />です。</exception>
      <returns>名前付き曲線を表すオブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>現在の曲線の整合性を検証します。 構造体が有効ではない場合は、<see cref="T:System.Security.Cryptography.CryptographicException" /> 例外をスローします。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">曲線パラメーターが現在の曲線の型に対して有効ではありません。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>曲線の型が明示的な特性 2 曲線を示すかどうかを示す値を取得します。</summary>
      <returns>曲線が明示的な特性 2 曲線である場合は <see langword="true" />。曲線が名前付き特性 2、プライム、または暗黙的な曲線である場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>曲線の型が明示的な曲線 (プライムまたは特性 2 のいずれか) を示すかどうかを示す値を取得します。</summary>
      <returns>曲線が明示的な曲線 (プライムまたは特性 2 のいずれか) である場合は <see langword="true" />。曲線が名前付きまたは暗黙的な曲線である場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>曲線の型が名前付き曲線を示すかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> 曲線が名前付き曲線の場合は。 <see langword="false" /> 曲線が暗黙的または明示的な曲線 (プライムまたは特性2のいずれか) である場合。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>曲線の型が明示的なプライム曲線を示すかどうかを示す値を取得します。</summary>
      <returns>曲線が明示的なプライム曲線である場合は <see langword="true" />。曲線が名前付きプライム、特性 2 または暗黙的な曲線である場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>名前付き曲線の識別子を取得します。</summary>
      <returns>名前付き曲線の識別子。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>
        <see cref="T:System.Security.Cryptography.ECCurve" /> オブジェクトに含まれているデータを解釈する方法を示します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>曲線パラメーターは、特性 2 曲線を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>曲線のデータが解釈されることはありません。 呼び出し元は曲線が何であるかを認識していると見なされます。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>曲線パラメーターは、名前付き曲線を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>曲線パラメーターは、数式 B*y^2 = x^3 + A*x^2 + x を持つプライム曲線を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>曲線パラメーターは、プライム フィールド P 内に数式 y^2 = x^3 + A*x + B を持つプライム曲線を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>曲線パラメーターは、プライム フィールド P 内に数式 A*x^2 + y^2 = 1 + B*x^2*y^2 を持つプライム曲線を表します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>名前付き曲線を作成するためのファクトリ クラスを表します。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>brainpoolP160r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP160r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>brainpoolP160t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP160t1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>brainpoolP192r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP192r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>brainpoolP192t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP192t1 名前付き曲線を取得します。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>brainpoolP224r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP224r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>brainpoolP224t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP224t1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>brainpoolP256r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP256r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>brainpoolP256t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP256t1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>brainpoolP320r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP320r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>brainpoolP320t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP320t1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>brainpoolP384r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP384r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>brainpoolP384t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP384t1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>brainpoolP512r1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP512r1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>brainpoolP512t1 名前付き曲線を取得します。</summary>
      <returns>brainpoolP512t1 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>nistP256 名前付き曲線を取得します。</summary>
      <returns>nistP256 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>nistP384 名前付き曲線を取得します。</summary>
      <returns>nistP384 名前付き曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>nistP521 名前付き曲線を取得します。</summary>
      <returns>nistP521 名前付き曲線。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>ECDH (Elliptic Curve Diffie-Hellman) アルゴリズム実装の派生元にすることができる抽象基本クラスを提供します。 このクラスは、すべての ECDH 実装がサポートする必要のある操作の基本セットを提供します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>ECDH アルゴリズムの既定の実装の新しいインスタンスを作成します。</summary>
      <returns>このクラスの既定の実装の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>指定した曲線に対して生成された新しい公開/秘密キー ペアで ECDH (Elliptic Curve Diffie-Hellman) アルゴリズムの既定の実装の新しいインスタンスを作成します。</summary>
      <param name="curve">新しい公開/秘密キー ペアを生成するために使用する曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> は検証されません。</exception>
      <returns>ECDH (Elliptic Curve Diffie-Hellman) アルゴリズムの既定の実装の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>指定した <see cref="T:System.Security.Cryptography.ECParameters" /> オブジェクトによって記述されたキーで Elliptic Curve Diffie-Hellman (ECDH) アルゴリズムの既定の実装の新しいインスタンスを作成します。</summary>
      <param name="parameters">楕円曲線暗号 (ECC) アルゴリズムのパラメーター。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> は検証されません。</exception>
      <returns>ECDH (Elliptic Curve Diffie-Hellman) アルゴリズムの既定の実装の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>ECDH (Elliptic Curve Diffie-Hellman) アルゴリズムの指定した実装の新しいインスタンスを作成します。</summary>
      <param name="algorithm">ECDH アルゴリズムの実装の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>このクラスの指定した実装の新しいインスタンス。 指定したアルゴリズム名が ECDH 実装にマップされない場合、このメソッドで <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定されたハッシュ アルゴリズムを使用して、キー派生を実行します。</summary>
      <param name="otherPartyPublicKey">もう一方のパーティの公開キー。</param>
      <param name="hashAlgorithm">キー マテリアルを派生させるために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線のサイズが、このキーの曲線のサイズと異なります。

- または -

<paramref name="hashAlgorithm" /> パラメーターにハッシュが指定されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線が、このキーの曲線と異なります。

- または -

このインスタンスでは公開キーのみ表されます。</exception>
      <returns>共有シークレットのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>派生クラスに実装されている場合、指定されたハッシュ アルゴリズムを省略可能な先頭または末尾に追加されたデータと共に使用して、キー派生を実行します。</summary>
      <param name="otherPartyPublicKey">もう一方のパーティの公開キー。</param>
      <param name="hashAlgorithm">キー マテリアルを派生させるために使用するハッシュ アルゴリズム。</param>
      <param name="secretPrepend">ハッシュ前に派生の機密情報の先頭に追加する値。</param>
      <param name="secretAppend">ハッシュ前に派生の機密情報に追加する値。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線のサイズが、このキーの曲線のサイズと異なります。

- または -

<paramref name="hashAlgorithm" /> パラメーターにハッシュが指定されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線が、このキーの曲線と異なります。

- または -

このインスタンスでは公開キーのみ表されます。</exception>
      <returns>要求に応じてデータを先頭または末尾に追加した後の共有シークレットのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>指定された HMAC (Hash-based Message Authentication Code) アルゴリズムを使用して、キー派生を実行します。</summary>
      <param name="otherPartyPublicKey">もう一方のパーティの公開キー。</param>
      <param name="hashAlgorithm">キー マテリアルを派生させるために使用するハッシュ アルゴリズム。</param>
      <param name="hmacKey">HMAC のキー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線のサイズが、このキーの曲線のサイズと異なります。

- または -

<paramref name="hashAlgorithm" /> パラメーターにハッシュが指定されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線が、このキーの曲線と異なります。

- または -

このインスタンスでは公開キーのみ表されます。</exception>
      <returns>共有シークレットの HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>派生クラスに実装されている場合、指定された HMAC (Hash-based Message Authentication Code) アルゴリズムを省略可能な先頭または末尾に追加されたデータと共に使用して、キー派生を実行します。</summary>
      <param name="otherPartyPublicKey">もう一方のパーティの公開キー。</param>
      <param name="hashAlgorithm">キー マテリアルを派生させるために使用するハッシュ アルゴリズム。</param>
      <param name="hmacKey">HMAC のキー。</param>
      <param name="secretPrepend">ハッシュ前に派生の機密情報の先頭に追加する値。</param>
      <param name="secretAppend">ハッシュ前に派生の機密情報に追加する値。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線のサイズが、このキーの曲線のサイズと異なります。

- または -

<paramref name="hashAlgorithm" /> パラメーターにハッシュが指定されていません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線が、このキーの曲線と異なります。

- または -

このインスタンスでは公開キーのみ表されます。</exception>
      <returns>要求に応じてデータを先頭または末尾に追加した後の共有シークレットの HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>派生クラスに実装されている場合、共有シークレットに対してキー派生を実行します。</summary>
      <param name="otherPartyPublicKey">もう一方のパーティの公開キー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線のサイズが、このキーの曲線のサイズと異なります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線が、このキーの曲線と異なります。

- または -

このインスタンスでは公開キーのみ表されます。</exception>
      <returns>共有シークレットを入力として使用したキー派生関数の結果。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>派生クラスに実装されている場合、TLS (トランスポート層セキュリティ) 1.1 PRF (擬似ランダム関数) を使用してキー派生を実行します。</summary>
      <param name="otherPartyPublicKey">もう一方のパーティの公開キー。</param>
      <param name="prfLabel">ASCII エンコードされた PRF ラベル。</param>
      <param name="prfSeed">64 バイト PRF シード。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> によって使用される曲線のサイズが、このキーの曲線のサイズと異なります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />、<paramref name="prfLabel" />、または <paramref name="prfSeed" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> は 64 バイト長に完全には一致しません。

- または -

<paramref name="otherPartyPublicKey" /> によって使用される曲線が、このキーの曲線と異なります。

- または -

このインスタンスでは公開キーのみ表されます。</exception>
      <returns>キーとして共有シークレットを使用した TLS 1.1 PRF の最初の 48 バイト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>現在のキーを ECPrivateKey 形式でエクスポートします。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>このキーの ECPrivateKey 表現を格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> メソッドに渡すために、処理中の <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> キーから <see cref="T:System.Security.Cryptography.ECParameters" /> 構造体に明示的な曲線フォームを使用して公開または公開および秘密キー情報のいずれかをエクスポートします。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>明示的な曲線形式を使用して、このキーの曲線上のポイントを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> メソッドに渡すために、処理中の <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> キーから <see cref="T:System.Security.Cryptography.ECParameters" /> 構造体に公開または公開および秘密キー情報のいずれかをエクスポートします。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は、パブリック パラメーターのみを含める場合は <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>このキーの曲線上のポイントを表すオブジェクト。 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> メソッドに渡すことができます。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>このメソッドでは常にスローされます。</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> オブジェクトの再構築に使用する XML 文字列。</param>
      <exception cref="T:System.NotImplementedException">すべての場合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>派生クラスでオーバーライドされると、指定した曲線の新しい一時的な公開/秘密キー ペアを生成します。</summary>
      <param name="curve">一時的な公開/秘密キー ペアを生成するために使用される曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> は検証されません。</exception>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>ECPrivateKey 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの ECPrivateKey 構造体のバイト。</param>
      <param name="bytesRead">このメソッドから制御が戻ったときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 ECPrivateKey 構造体を表していません。

- または -

キーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="source" /> のコンテンツは、適用するキー派生関数 (KDF) が、<see cref="T:System.Char" /> ベースのパスワードを必要とするレガシの PKCS#12 KDF であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

- または -

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

- または -

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>RFC 7468 PEM でエンコードされたキーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートするキーの PEM テキスト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

- または -

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。

- または -

<paramref name="input" /> には、暗号化された、PEM でエンコードされたキーが含まれます。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>派生クラスでオーバーライドされると、現在の <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> オブジェクトへの一時的なキーとして <see cref="T:System.Security.Cryptography.ECCurve" /> の指定されたパラメーターをインポートします。</summary>
      <param name="parameters">インポートする曲線のパラメーター。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> は検証されません。</exception>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、PKCS#8 PrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 PrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 PrivateKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、X.509 SubjectPublicKeyInfo 構造体から公開キーをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-DER エンコードでの X.509 SubjectPublicKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-DER でエンコードされた X.509 SubjectPublicKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>このメソッドでは常にスローされます。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">すべての場合。</exception>
      <returns>このメソッドは値を返しません。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>
        <see langword="ECPrivateKey" /> 形式の現在のキーを、指定されたバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">
        <see langword="ECPrivateKey" /> データを受け取るバイト範囲。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して、現在のキーを PKCS#8 EncryptedPrivateKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化するときにパスワードとして使用するバイト。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。

- または -

<paramref name="pbeParameters" /> は、<see cref="T:System.Char" /> ベースのパスワードを必要とする <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> を使用する必要があることを示しています。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して、PKCS#8 EncryptedPrivateKeyInfo 形式の現在のキーを、指定されたバッファーにエクスポートすることを試みます。</summary>
      <param name="password">キー マテリアルを暗号化するときに使用するパスワード。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 形式の現在のキーを、指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">PKCS#8 PrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを X.509 SubjectPublicKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>キー交換アルゴリズムの名前を取得します。</summary>
      <returns>キー交換アルゴリズムの名前。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>現在の ECDH インスタンスが使用している公開キーを取得します。</summary>
      <returns>ECDH キー ペアの公開部分は、この <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> インスタンスにより使用されます。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>署名アルゴリズムの名前を取得します。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>すべての <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 実装の継承元にする必要がある抽象基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="keyBlob">
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> オブジェクトを表すバイト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> クラスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.ECCurve" /> オブジェクトの明示的な <see cref="T:System.Security.Cryptography.ECParameters" /> をエクスポートします。</summary>
      <exception cref="T:System.NotSupportedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>明示的な曲線形式を使用して、このキーの曲線上のポイントを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.ECCurve" /> オブジェクトの名前付きまたは明示的な <see cref="T:System.Security.Cryptography.ECParameters" /> をエクスポートします。</summary>
      <exception cref="T:System.NotSupportedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>このキーの曲線上のポイントを表すオブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> キー BLOB をバイト配列にシリアル化します。</summary>
      <returns>シリアル化された ECDH (Elliptic Curve Diffie-Hellman) 公開キーを格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 公開キーを XML 文字列にシリアル化します。</summary>
      <returns>シリアル化された ECDH (Elliptic Curve Diffie-Hellman) 公開キーを格納している XML 文字列。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>楕円曲線デジタル署名アルゴリズム (ECDSA) をカプセル化する抽象基底クラスを提供します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.ECDsa" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>ECDSA の既定の実装の新しいインスタンスを作成します。</summary>
      <returns>このクラスの既定の実装 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>指定した曲線に対して新しく生成されたキーで ECDSA (Elliptic Curve Digital Signature Algorithm) の既定の実装の新しいインスタンスを作成します。</summary>
      <param name="curve">キーの生成に使用する曲線。</param>
      <returns>このクラスの既定の実装 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>指定したパラメーターをキーとして使って ECDSA (Elliptic Curve Digital Signature Algorithm) の既定の実装の新しいインスタンスを作成します。</summary>
      <param name="parameters">使用するキーを表すパラメーター。</param>
      <returns>このクラスの既定の実装 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>ECDSA の指定した実装の新しいインスタンスを作成します。</summary>
      <param name="algorithm">ECDSA 実装の名前。 次の文字列はすべて同じ実装を参照します。この実装は、.NET Framework が現在サポートしている唯一の実装です。 
- "ECDsa" 
- "ECDsaCng" 
- "System.Security.Cryptography.ECDsaCng" 
カスタム ECDSA 実装の名前も指定できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>このクラスの指定した実装の新しいインスタンス。 指定したアルゴリズム名が ECDSA 実装に割り当てられない場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>現在のキーを ECPrivateKey 形式でエクスポートします。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>このキーの ECPrivateKey 表現を格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、楕円曲線の明示的なパラメーターをエクスポートします。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>明示的な曲線形式を使用して、このキーの曲線上の地点を表すパラメーター。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、楕円曲線の名前付きまたは明示的なパラメーターをエクスポートします。 曲線に名前がある場合は、<see cref="F:System.Security.Cryptography.ECParameters.Curve" /> フィールドには名前付き曲線パラメーターが含まれます。それ以外の場合は、明示的なパラメーターが含まれます。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>このキーの曲線上の地点を表すパラメーター。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>このメソッドでは常にスローされます。</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> オブジェクトの再構築に使用する XML 文字列。</param>
      <exception cref="T:System.NotImplementedException">すべての場合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>派生クラスでオーバーライドされると、現在のキーに代えて、指定された曲線の新しい一時的な公開/秘密キーの組が生成されます。</summary>
      <param name="curve">キーの生成に使用する曲線。</param>
      <exception cref="T:System.NotSupportedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>このキーによって生成された署名の最大サイズ (バイト単位) を指定した形式で取得します。</summary>
      <param name="signatureFormat">署名のエンコード形式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <returns>指定した形式の、このキーによって生成された署名の最大サイズ (バイト単位)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイト配列部分のハッシュ値が計算されます。</summary>
      <param name="data">ハッシュされるデータ。</param>
      <param name="offset">ハッシュされる <paramref name="data" /> の最初のバイトのインデックス。</param>
      <param name="count">ハッシュするバイト数。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>ハッシュされたデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイナリ ストリームのハッシュ値が計算されます。</summary>
      <param name="data">ハッシュするバイナリ ストリーム。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>ハッシュされたデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>ECPrivateKey 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの ECPrivateKey 構造体のバイト。</param>
      <param name="bytesRead">このメソッドから制御が戻ったときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 ECPrivateKey 構造体を表していません。

- または -

キーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="source" /> のコンテンツは、適用するキー派生関数 (KDF) が、<see cref="T:System.Char" /> ベースのパスワードを必要とするレガシの PKCS#12 KDF であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

- または -

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または - 
<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

- または -

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>RFC 7468 PEM でエンコードされたキーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートするキーの PEM テキスト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

- または -

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。

- または -

<paramref name="input" /> には、暗号化された、PEM でエンコードされたキーが含まれます。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>派生クラスでオーバーライドされると、指定されたパラメーターをインポートします。</summary>
      <param name="parameters">曲線パラメーター。</param>
      <exception cref="T:System.NotSupportedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、PKCS#8 PrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 PrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 PrivateKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、X.509 SubjectPublicKeyInfo 構造体から公開キーをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-DER エンコードでの X.509 SubjectPublicKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-DER でエンコードされた X.509 SubjectPublicKeyInfo 構造体を表していません。

- または -

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

- または -

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

- または -

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したバイト配列の一部分のハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュを計算する対象の入力データ。</param>
      <param name="offset">配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="count">配列内でデータとして使用されるバイトの数。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="offset">
        <paramref name="data" /> 内のハッシュの開始位置を示すオフセット。</param>
      <param name="count">
        <paramref name="data" /> から読み取るバイト数。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。
 
- または - 
 <paramref name="offset" /> が 0 未満です。
 
- または - 
 <paramref name="count" /> が 0 未満です。
 
- または - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したバイト配列のハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュを計算する対象の入力データ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定したストリームのハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュを計算する対象の入力ストリーム。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータのハッシュ値を計算し、指定した署名形式を使用して署名します。</summary>
      <param name="data">署名するデータ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>指定したハッシュ値のデジタル署名を生成します。</summary>
      <param name="hash">署名されたデータのハッシュ値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>指定したハッシュ値のデジタル署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定した形式で、指定したハッシュ値の ECDSA 署名を計算します。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHashCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定した形式で、指定したハッシュ値の ECDSA 署名を計算します。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>指定されたデータの ECDSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>このメソッドでは常にスローされます。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">すべての場合。</exception>
      <returns>このメソッドは値を返しません。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを ECPrivateKey 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">ECPrivateKey データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドから制御が戻ったときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して、現在のキーを PKCS#8 EncryptedPrivateKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化するときにパスワードとして使用するバイト。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。

- または -

<paramref name="pbeParameters" /> は、<see cref="T:System.Char" /> ベースのパスワードを必要とする <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> を使用する必要があることを示しています。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して、PKCS#8 EncryptedPrivateKeyInfo 形式の現在のキーを、指定されたバッファーにエクスポートすることを試みます。</summary>
      <param name="password">キー マテリアルを暗号化するときに使用するパスワード。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 形式の現在のキーを、指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">PKCS#8 PrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを X.509 SubjectPublicKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>指定したハッシュ アルゴリズムを使用して、指定した宛先に、指定したバイト型の読み取り専用スパンのハッシュ値の計算を試みます。</summary>
      <param name="data">ハッシュされるデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> がハッシュ値を受け取るのに十分な長さでない場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>指定したハッシュ アルゴリズムと現在のキーを使用して、指定した宛先に、指定したバイト型の読み取り専用スパン用の ECDSA デジタル署名の計算を試みます。</summary>
      <param name="data">署名する対象のデータ。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="hashAlgorithm">署名のためのデータのハッシュに使用するアルゴリズム。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な長さでない場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したデータの ECDSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="data">ハッシュおよび署名するデータ。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したデータの ECDSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="data">ハッシュおよび署名するデータ。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを使用して、指定した宛先に、データ ハッシュを表す指定したバイト型の読み取り専用スパン用の ECDSA デジタル署名の計算を試みます。</summary>
      <param name="hash">署名されたデータのハッシュ値。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な長さでない場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したハッシュ値の ECDSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHashCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>指定したハッシュ値の ECDSA 署名を指定した形式で作成し、指定したバッファーへの配置を試みます。</summary>
      <param name="hash">署名するハッシュ値。</param>
      <param name="destination">署名を受け取るバッファー。</param>
      <param name="signatureFormat">署名に使用するエンコード形式。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">署名操作で発生したエラー。</exception>
      <returns>
        <paramref name="destination" /> が署名を受け取るのに十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、現在のキーおよび指定したデータに対してデジタル署名が適切であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="signature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、現在のキーおよびデータの指定した部分に対して、デジタル署名が適切であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="offset">ハッシュを計算する位置を示す開始インデックス。</param>
      <param name="count">ハッシュするバイト数。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="signature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されたデータを格納している配列。</param>
      <param name="offset">
        <paramref name="data" /> の符号付き部分の開始インデックス。</param>
      <param name="count">署名された <paramref name="data" /> 内のバイト数。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。
 
- または - 
 <paramref name="offset" /> が 0 未満です。
 
- または - 
 <paramref name="count" /> が 0 未満です。
 
- または - 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、現在のキーおよび指定したデータに対してデジタル署名が適切であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="signature" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> には <see langword="null" /> または空の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定したハッシュ アルゴリズムを使用して、現在のキーおよび指定したデータに対してデジタル署名が適切であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証対象の署名。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したデータに対してデジタル署名が有効であることを検証します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名。</param>
      <param name="hashAlgorithm">検証プロセスのデータをハッシュするために使用されるハッシュ アルゴリズム。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュまたは検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>デジタル署名が、現在のキーおよび指定したデータ ハッシュに対して適切であることを確認します。</summary>
      <param name="hash">検証するデータのハッシュ値。</param>
      <param name="signature">ハッシュ値に対して検証するデータのデジタル署名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="hash">署名されたハッシュ。</param>
      <param name="signature">検証する署名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> または <paramref name="signature" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>デジタル署名が、現在のキーおよび指定したデータ ハッシュに対して適切であることを確認します。</summary>
      <param name="hash">検証するデータのハッシュ値。</param>
      <param name="signature">ハッシュ値に対して検証するデータのデジタル署名。</param>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="hash">署名されたハッシュ。</param>
      <param name="signature">検証する署名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> は既知の形式ではありません。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>指定したハッシュに対してデジタル署名が有効であることを検証します。</summary>
      <param name="hash">署名されたハッシュ。</param>
      <param name="signature">検証する署名。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> のエンコード形式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">検証操作で発生したエラー。</exception>
      <returns>指定したデータに対してデジタル署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>キー交換アルゴリズムの名前を取得します。</summary>
      <returns>常に <see langword="null" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>署名アルゴリズムの名前を取得します。</summary>
      <returns>文字列 "ECDsa"。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>楕円曲線暗号 (ECC) アルゴリズムの標準的なパラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>公開キー (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) とオプションの秘密キー (<see cref="F:System.Security.Cryptography.ECParameters.D" />) に関連付けられた曲線を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>ビッグ エディアン形式で格納された、楕円曲線暗号 (ECC) アルゴリズムの秘密キー <see langword="D" /> を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>楕円曲線暗号 (ECC) アルゴリズムの公開キー <see langword="Q" /> を表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>現在のオブジェクトを検証します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーまたは曲線パラメーターが現在の曲線の型に対して有効ではありません。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>楕円曲線暗号 (ECC) 構造体の座標のペア (X, Y) を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>x 座標を表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>Y 座標を表します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.HKDF">
      <summary>RFC5869 HMAC ベースの抽出と展開のキー派生 (HKDF)</summary>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>キー派生 HKDF Expand 関数と Extract 関数を実行します。</summary>
      <param name="hashAlgorithmName">HMAC 操作に使用されるハッシュ アルゴリズム。</param>
      <param name="ikm">入力キー マテリアル。</param>
      <param name="outputLength">出力キー マテリアルの長さ。</param>
      <param name="salt">省略可能な salt 値 (秘密ではない乱数値)。 指定されていない場合、既定では、指定されたハッシュ アルゴリズムの出力と同じ長さのバイト配列になります。</param>
      <param name="info">省略可能な、コンテキストとアプリケーションに固有の情報。</param>
      <returns>出力キー マテリアル。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>キー派生 HKDF Expand 関数と Extract 関数を実行します。</summary>
      <param name="hashAlgorithmName">HMAC 操作に使用されるハッシュ アルゴリズム。</param>
      <param name="ikm">入力キー マテリアル。</param>
      <param name="output">出力キー マテリアルを表す出力バッファー。</param>
      <param name="salt">salt 値 (秘密ではない乱数値)。</param>
      <param name="info">コンテキストとアプリケーションに固有の情報 (空のスパンにすることができます)。</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[])">
      <summary>HKDF-Expand 関数を実行します。RFC5869 のセクション 2.3 を参照してください。</summary>
      <param name="hashAlgorithmName">HMAC 操作に使用されるハッシュ アルゴリズム。</param>
      <param name="prk">指定したハッシュ アルゴリズムの出力バイト配列と同じ長さ以上の疑似乱数キー (通常は展開ステップからの出力)。</param>
      <param name="outputLength">出力キー マテリアルの長さ。</param>
      <param name="info">省略可能な、コンテキストとアプリケーションに固有の情報。</param>
      <returns>出力キー マテリアル。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>HKDF-Expand 関数を実行します。 RFC5869 のセクション 2.3 を参照してください。</summary>
      <param name="hashAlgorithmName">HMAC 操作に使用されるハッシュ アルゴリズム。</param>
      <param name="prk">指定したハッシュ アルゴリズムの出力バイト配列と同じ長さ以上の疑似乱数キー (通常は展開ステップからの出力)。</param>
      <param name="output">出力キー マテリアルを受け取る宛先バッファー。</param>
      <param name="info">コンテキストとアプリケーションに固有の情報 (空のスパンにすることができます)。</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>HKDF-Extract 関数を実行します。
RFC5869 のセクション 2.2 を参照してください。</summary>
      <param name="hashAlgorithmName">HMAC 操作に使用されるハッシュ アルゴリズム。</param>
      <param name="ikm">入力キー マテリアル。</param>
      <param name="salt">省略可能な salt 値 (秘密ではない乱数値)。 指定しない場合、既定では、指定されたハッシュ アルゴリズムの出力と同じ長さのバイト配列になります。</param>
      <returns>疑似乱数キー (prk)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>HKDF-Extract 関数を実行します。
RFC5869 のセクション 2.2 を参照してください。</summary>
      <param name="hashAlgorithmName">HMAC 操作に使用されるハッシュ アルゴリズム。</param>
      <param name="ikm">入力キー マテリアル。</param>
      <param name="salt">salt 値 (秘密ではない乱数値)。</param>
      <param name="prk">擬似乱数キー (prk) を受け取る宛先バッファー。</param>
      <returns>
        <paramref name="prk" /> バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>ランダムに生成されたキーを使用して、<see cref="T:System.Security.Cryptography.HMACMD5" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>指定したキーを使用して <see cref="T:System.Security.Cryptography.HMACMD5" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACMD5" /> 暗号化の共有キー。 キーは任意の長さにできますが、64 バイトを超えた場合は、SHA-1 を使用してハッシュされ、最終的には 64 バイトのキーが生成されます。 したがって、共有キーの推奨サイズは 64 バイトです。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACMD5" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="rgb">HMAC を計算する対象の入力データ。</param>
      <param name="ib">バイト配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="cb">バイト配列内でデータとして使用されるバイトの数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="source">HMAC を計算する対象の入力データ。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal">
      <summary>アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了処理を行います。</summary>
      <returns>バイト配列での計算済された HMAC 値。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize">
      <summary>ハッシュ アルゴリズムを初期状態にリセットします。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>HMAC アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了を試みます。</summary>
      <param name="destination">HMAC 値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が HMAC 値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.Key">
      <summary>HMAC 計算で使用するキーを取得または設定します。</summary>
      <returns>HMAC 計算で使用するキー。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" /> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>ランダムに生成されたキーを指定して、<see cref="T:System.Security.Cryptography.HMACSHA1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>キー データを指定して、<see cref="T:System.Security.Cryptography.HMACSHA1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 暗号化の共有キー。 キーは任意の長さにできますが、64 バイトを超えた場合は、SHA-1 を使用してハッシュされ、最終的には 64 バイトのキーが生成されます。 したがって、共有キーの推奨サイズは 64 バイトです。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>SHA1 アルゴリズムのマネージド版を使用するかどうかを指定する値を使用して、<see cref="T:System.Security.Cryptography.HMACSHA1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 暗号化の共有キー。 キーは任意の長さにできますが、64 バイトを超えた場合は、SHA-1 を使用してハッシュされ、最終的には 64 バイトのキーが生成されます。 したがって、共有キーの推奨サイズは 64 バイトです。</param>
      <param name="useManagedSha1">SHA1 アルゴリズムのマネージド実装 (<see cref="T:System.Security.Cryptography.SHA1Managed" /> クラス) を使用する場合は <see langword="true" />。アンマネージド実装 (<see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> クラス) を使用する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>このメンバーは <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" /> をオーバーライドし、より詳細なドキュメントがそのトピックで使用できるようになる場合があります。

<see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースのみを解放する場合は false。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>ハッシュ メッセージ認証コード (HMAC) を計算するために、オブジェクトに書き込まれたデータを SHA1 ハッシュ アルゴリズムにルーティングします。</summary>
      <param name="rgb">入力データです。</param>
      <param name="ib">バイト配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="cb">配列内でデータとして使用されるバイトの数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="source">HMAC を計算する対象の入力データ。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <summary>アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了処理を行います。</summary>
      <returns>バイト配列での計算済された HMAC 値。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>ハッシュ アルゴリズムを初期状態にリセットします。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>HMAC アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了を試みます。</summary>
      <param name="destination">HMAC 値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が HMAC 値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>ハッシュ アルゴリズムで使用するキーを取得または設定します。</summary>
      <returns>ハッシュ アルゴリズムで使用するキー。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" /> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>ランダムに生成されたキーを指定して、<see cref="T:System.Security.Cryptography.HMACSHA256" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>キー データを指定して、<see cref="T:System.Security.Cryptography.HMACSHA256" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> 暗号化の共有キー。 キーは任意の長さにできます。 ただし、推奨されるサイズは 64 バイトです。 キーの長さが 64 バイトを超えた場合は、SHA-256 を使用してハッシュされ、64 バイトのキーが生成されます。 64 バイトよりも短い場合は、64 バイトまで埋められます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="rgb">HMAC を計算する対象の入力データ。</param>
      <param name="ib">バイト配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="cb">バイト配列内でデータとして使用されるバイトの数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="source">HMAC を計算する対象の入力データ。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal">
      <summary>アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了処理を行います。</summary>
      <returns>バイト配列での計算済された HMAC 値。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize">
      <summary>ハッシュ アルゴリズムを初期状態にリセットします。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>HMAC アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了を試みます。</summary>
      <param name="destination">HMAC 値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が HMAC 値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.Key">
      <summary>HMAC 計算で使用するキーを取得または設定します。</summary>
      <returns>HMAC 計算で使用するキー。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" /> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>ランダムに生成されたキーを使用して、<see cref="T:System.Security.Cryptography.HMACSHA384" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>指定されたキー データを使用して、<see cref="T:System.Security.Cryptography.HMACSHA384" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> 暗号化の共有キー。 キーは任意の長さにできます。 ただし、推奨されるサイズは 128 バイトです。 キーの長さが 128 バイトを超えた場合は、SHA-384 を使用してハッシュされ、128 バイトのキーが生成されます。 128 バイトよりも短い場合は、128 バイトまで埋められます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="rgb">HMAC を計算する対象の入力データ。</param>
      <param name="ib">バイト配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="cb">バイト配列内でデータとして使用されるバイトの数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="source">HMAC を計算する対象の入力データ。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal">
      <summary>アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了処理を行います。</summary>
      <returns>バイト配列での計算済された HMAC 値。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize">
      <summary>ハッシュ アルゴリズムを初期状態にリセットします。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>HMAC アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了を試みます。</summary>
      <param name="destination">HMAC 値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が HMAC 値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.Key">
      <summary>HMAC 計算で使用するキーを取得または設定します。</summary>
      <returns>HMAC 計算で使用するキー。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> アルゴリズムの .NET Framework 2.0 実装と整合しない、このアルゴリズムの .NET Framework 2.0 Service Pack 1 実装の代替手段を提供します。</summary>
      <returns>.NET Framework 2.0 Service Pack 1 アプリケーションを有効にして .NET Framework 2.0 アプリケーションとの対話を実現するには <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" /> ハッシュ関数を使用して、ハッシュ メッセージ認証コード (HMAC) を計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>ランダムに生成されたキーを指定して、<see cref="T:System.Security.Cryptography.HMACSHA512" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>キー データを指定して、<see cref="T:System.Security.Cryptography.HMACSHA512" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA512" /> 暗号化の共有キー。 キーは任意の長さにできます。 ただし、推奨されるサイズは 128 バイトです。 キーの長さが 128 バイトを超えた場合は、SHA-512 を使用してハッシュされ、128 バイトのキーが生成されます。 128 バイトよりも短い場合は、128 バイトまで埋められます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA512" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="rgb">HMAC を計算する対象の入力データ。</param>
      <param name="ib">バイト配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="cb">バイト配列内でデータとして使用されるバイトの数。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>HMAC を計算するために、オブジェクトに書き込んだデータを HMAC アルゴリズムにルーティングします。</summary>
      <param name="source">HMAC を計算する対象の入力データ。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal">
      <summary>アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了処理を行います。</summary>
      <returns>バイト配列での計算済された HMAC 値。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize">
      <summary>ハッシュ アルゴリズムを初期状態にリセットします。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>HMAC アルゴリズムによって最後のデータが処理された後、HMAC 計算の終了を試みます。</summary>
      <param name="destination">HMAC 値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> が HMAC 値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.Key">
      <summary>HMAC 計算で使用するキーを取得または設定します。</summary>
      <returns>HMAC 計算で使用するキー。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>.NET Framework 2.0 実装と整合しない <see cref="T:System.Security.Cryptography.HMACSHA512" /> アルゴリズムの .NET Framework 2.0 Service Pack 1 実装の代替手段を提供します。</summary>
      <returns>.NET Framework 2.0 Service Pack 1 アプリケーションを有効にして .NET Framework 2.0 アプリケーションとの対話を実現するには <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>いくつかのセグメントの間で、ハッシュ値または 	Hash-based Message Authentication Code (HMAC) 値の増分を計算するためのサポートを提供します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>ハッシュまたは HMAC で既に処理されたデータに、指定したデータを追加します。</summary>
      <param name="data">処理するデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> オブジェクトは既に破棄されています。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したオフセットから始まる、指定したデータからの指定したバイト数を、ハッシュまたは Hash-based Message Authentication Code(HMAC) で既に処理されたデータに追加します。</summary>
      <param name="data">処理するデータ。</param>
      <param name="offset">バイト配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="count">
        <paramref name="data" /> から使用するバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> または <paramref name="offset" /> が負の値です。  
  
- または - 
 <paramref name="count" /> は <paramref name="data" /> の長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> と <paramref name="count" /> の合計が、データ長を超えています。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> オブジェクトは既に破棄されています。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <summary>ハッシュまたはハッシュ ベース メッセージ認証コード (HMAC) で既に処理されたデータに、指定したデータを追加します。</summary>
      <param name="data">処理するデータ。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> オブジェクトは既に破棄されています。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定されたアルゴリズムについて、<see cref="T:System.Security.Cryptography.IncrementalHash" /> を作成します。</summary>
      <param name="hashAlgorithm">実行するハッシュ アルゴリズムの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は、<see langword="null" /> または空の文字列です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> は既知のハッシュ アルゴリズムではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> インスタンスは、<paramref name="hashAlgorithm" /> で指定したハッシュ アルゴリズムをすぐに計算できます。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>指定したハッシュ アルゴリズムとキーを使用してハッシュ ベース メッセージ認証コード (HMAC) アルゴリズムの <see cref="T:System.Security.Cryptography.IncrementalHash" /> を作成します。</summary>
      <param name="hashAlgorithm">HMAC 内で実行するハッシュ アルゴリズムの名前。</param>
      <param name="key">HMAC の秘密鍵。 キーの長さは任意で指定できますが、指定したハッシュ アルゴリズムの出力サイズよりも長いキーは、サイズのキーが正しくなるようにハッシュされます。 そのため、推奨される秘密鍵のサイズは、指定したハッシュ アルゴリズムの出力サイズです。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は、<see langword="null" /> または空の文字列です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> は既知のハッシュ アルゴリズムではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> クラスのインスタンスは、指定したハッシュ アルゴリズムをすぐに計算できます。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte})">
      <summary>
        <paramref name="hashAlgorithm" /> によって指定されているハッシュ アルゴリズムと、<paramref name="key" /> によって指定されているキーを利用して、ハッシュ ベースのメッセージ認証コード (HMAC) アルゴリズムに対する <see cref="T:System.Security.Cryptography.IncrementalHash" /> を作成します。</summary>
      <param name="hashAlgorithm">HMAC 内で実行するハッシュ アルゴリズムの名前。</param>
      <param name="key">HMAC の秘密鍵。 キーは任意の長さにすることができますが、<paramref name="hashAlgorithm" /> によって指定されたハッシュ アルゴリズムの出力サイズより長いキーは、正しいサイズのキーになるように (<paramref name="hashAlgorithm" /> によって指定されているアルゴリズムを使用して) ハッシュされます。 そのため、推奨される秘密鍵のサイズは、<paramref name="hashAlgorithm" /> によって指定されているハッシュの出力サイズです。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> が <see langword="null" /> か、または空の文字列です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> は既知のハッシュ アルゴリズムではありません。</exception>
      <returns>
        <paramref name="hashAlgorithm" /> で指定したハッシュ アルゴリズムを計算するハッシュ インスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash">
      <summary>オブジェクトを初期状態にリセットせず、<see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> メソッドのそれ以前の呼び出しから蓄積されたデータに対するハッシュまたはハッシュ ベースのメッセージ認証コード (HMAC) を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException">オブジェクトは既には帰されています。</exception>
      <returns>計算済みハッシュまたは HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash(System.Span{System.Byte})">
      <summary>オブジェクトを初期状態にリセットせず、<see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> メソッドのそれ以前の呼び出しから蓄積されたデータに対するハッシュまたはハッシュ ベースのメッセージ認証コード (HMAC) を取得します。</summary>
      <param name="destination">ハッシュ値または HMAC 値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> に、<see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" /> より小さい <see cref="P:System.Span`1.Length" /> 値が設定されています。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトは既には帰されています。</exception>
      <returns>
        <paramref name="destination" /> に書き込むバイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>前の呼び出しから <see cref="Overload:System.Security.Cryptography.IncrementalHash.AppendData" /> メソッドまで、蓄積されたデータのハッシュまたはハッシュ ベース メッセージ認証コード (HMAC) を取得し、オブジェクトを初期状態にリセットします。</summary>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> オブジェクトは既に破棄されています。</exception>
      <returns>計算済みハッシュまたは HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset(System.Span{System.Byte})">
      <summary>
        <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> メソッドのそれ以前の呼び出しから蓄積されたデータに対するハッシュまたはハッシュ ベースのメッセージ認証コード (HMAC) を取得し、オブジェクトを初期状態にリセットします。</summary>
      <param name="destination">ハッシュ値または HMAC 値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> に、<see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" /> より小さい <see cref="P:System.Span`1.Length" /> 値が設定されています。</exception>
      <exception cref="T:System.ObjectDisposedException">オブジェクトは既には帰されています。</exception>
      <returns>
        <paramref name="destination" /> に書き込むバイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetCurrentHash(System.Span{System.Byte},System.Int32@)">
      <summary>オブジェクトを初期状態にリセットせず、<see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> メソッドのそれ以前の呼び出しから蓄積されたデータに対するハッシュまたはハッシュ ベースのメッセージ認証コード (HMAC) の取得を試みます。</summary>
      <param name="destination">ハッシュ値または HMAC 値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。
このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ObjectDisposedException">オブジェクトは既には帰されています。</exception>
      <returns>
        <paramref name="destination" /> がハッシュまたは HMAC の値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <summary>ハッシュ アルゴリズムによって最後のデータが処理された後、ハッシュ計算の終了を試みます。</summary>
      <param name="destination">ハッシュまたはハッシュ ベース メッセージ認証コード (HMAC) の値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Security.Cryptography.IncrementalHash" /> オブジェクトは既に破棄されています。</exception>
      <returns>
        <paramref name="destination" /> がハッシュまたは HMAC の値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>実行されているアルゴリズムの名前を取得します。 キー付きでないダイジェストと区別するために、HMAC アルゴリズムの先頭には "HMAC" が追加されます。</summary>
      <returns>実行されているアルゴリズムの名前。</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes">
      <summary>このハッシュまたは HMAC アルゴリズムの出力サイズ (バイト単位) を取得します。</summary>
      <returns>このハッシュまたは HMAC アルゴリズムの出力サイズ (バイト単位)。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>すべてのマスク ジェネレーター アルゴリズムの派生元となる抽象クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>派生クラスでオーバーライドされるときに、指定したランダム シードを使用して、指定した長さのマスクを生成します。</summary>
      <param name="rgbSeed">マスクの計算に使用するランダム シード。</param>
      <param name="cbReturn">生成されるマスクの長さ (バイト単位)。</param>
      <returns>長さが <paramref name="cbReturn" /> パラメーターと等しい、ランダムに生成されるマスク。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> ハッシュ アルゴリズムのすべての実装が継承する、抽象クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> ハッシュ アルゴリズムの既定の実装のインスタンスを作成します。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理標準 (FIPS) モードが有効にされた状態でアルゴリズムが使用されましたが、このアルゴリズムは FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> ハッシュ アルゴリズムの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.MD5" /> ハッシュ アルゴリズムの指定された実装のインスタンスを作成します。</summary>
      <param name="algName">使用する <see cref="T:System.Security.Cryptography.MD5" /> の特定の実装の名前。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="algName" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> の指定した実装の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.Byte[])">
      <summary>MD5 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" />です。</exception>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>MD5 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>MD5 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> のバッファーが小さすぎて、計算されたハッシュ サイズを保持できません。 MD5 アルゴリズムでは常に、128 ビットつまり 16 バイトのハッシュが生成されます。</exception>
      <returns>
        <paramref name="destination" /> に書き込まれた合計バイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>MD5 アルゴリズムを使用してデータのハッシュの計算を試みます。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。</param>
      <returns>
        <paramref name="destination" /> が小さすぎて計算されたハッシュを保持できない場合は <see langword="false" />、それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>PKCS #1 に従って、キー交換アルゴリズムに使用するマスクを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>指定した長さの特定のランダム シードからマスクを生成して返します。</summary>
      <param name="rgbSeed">マスクの計算のために使用するランダム シード。</param>
      <param name="cbReturn">生成されるマスクの長さ (バイト単位)。</param>
      <returns>長さが <paramref name="cbReturn" /> パラメーターと等しい、ランダムに生成されるマスク。</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>マスクの生成に使用するハッシュ アルゴリズム タイプの名前を取得または設定します。</summary>
      <returns>マスクの計算に使用するハッシュ アルゴリズムを実装するタイプの名前。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>暗号乱数ジェネレーターのすべての実装の派生元である、抽象クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>ランダムなデータを生成するために使用できる暗号乱数ジェネレーターの、既定の実装のインスタンスを作成します。</summary>
      <returns>暗号乱数ジェネレーターの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>暗号乱数ジェネレーターの指定した実装のインスタンスを作成します。</summary>
      <param name="rngName">使用する乱数ジェネレーターの実装の名前。</param>
      <returns>暗号乱数ジェネレーターの新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>暗号強度の高いランダム バイトをスパンに格納します。</summary>
      <param name="data">暗号強度の高いランダム バイトを格納するスパン。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>派生クラスでオーバーライドされると、バイト配列に、暗号化に使用する厳密な値のランダム シーケンスを格納します。</summary>
      <param name="data">暗号化に使用する厳密なランダム バイトを格納する配列。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイト配列に、暗号化に使用するランダムな値の厳密なシーケンスを設定します。</summary>
      <param name="data">暗号化に使用する厳密なランダム バイトを格納する配列。</param>
      <param name="offset">格納操作の開始位置となる配列のインデックス。</param>
      <param name="count">格納するバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> と <paramref name="count" /> の合計が <paramref name="data" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>暗号強度の高いランダム バイトをスパンに格納します。</summary>
      <param name="data">暗号強度の高いランダム バイトを格納するスパン。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>暗号強度の高い乱数ジェネレーターを使用して、0 (その値を含む) から、指定された上限値 (その値を含まない) の間で、ランダムな整数を生成します。</summary>
      <param name="toExclusive">ランダムな範囲の上限値 (その値を含まない)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> パラメーターが 0 以下です。</exception>
      <returns>0 以上から <paramref name="toExclusive" /> (その値を含まない) の間の、ランダムな整数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>暗号強度の高い乱数ジェネレーターを使用して、指定された下限値 (その値を含む) から指定された上限値 (その値を含まない) の間で、ランダムな整数を生成します。</summary>
      <param name="fromInclusive">ランダムな範囲の下限値 (その値を含む)。</param>
      <param name="toExclusive">ランダムな範囲の上限値 (その値を含まない)。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> パラメーターが <paramref name="fromInclusive" /> パラメーター以下です。</exception>
      <returns>
        <paramref name="fromInclusive" /> (その値を含む) から <paramref name="toExclusive" /> (その値を含まない) の間の、ランダムな整数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>派生クラスでオーバーライドされると、バイト配列に、暗号化に使用する厳密な 0 以外の値のランダム シーケンスを格納します。</summary>
      <param name="data">暗号化に使用する厳密な 0 以外のランダム バイトを格納する配列。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>暗号強度の高い 0 以外の値のランダムなシーケンスをバイト スパンに格納します。</summary>
      <param name="data">暗号強度の高いランダムな 0 以外のバイトを格納するスパン。</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムのすべての実装の派生元となる基底クラスを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムで使用する共有キーの有効なサイズをビット単位で表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムを実行するための暗号オブジェクトのインスタンスを作成します。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理標準 (FIPS) モードが有効にされた状態でアルゴリズムが使用されましたが、このアルゴリズムは FIPS 準拠ではありません。</exception>
      <returns>暗号オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムの指定した実装を実行する暗号オブジェクトのインスタンスを作成します。</summary>
      <param name="AlgName">使用する <see cref="T:System.Security.Cryptography.RC2" /> の特定の実装の名前。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="algName" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>暗号オブジェクトのインスタンス。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムで使用する有効な秘密鍵のサイズ (ビット単位) を取得または設定します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">有効な鍵のサイズが正しくありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムで使用する有効な鍵のサイズ。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムで使用される秘密キーのサイズをビット単位で取得または設定します。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">RC2 キー サイズの値は、有効なキー サイズの値より小さくなります。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> アルゴリズムで使用される秘密キーのサイズ。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> に基づく擬似乱数ジェネレーターを使用して、パスワード ベースのキー派生機能 (PBKDF2) を実装します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>キーを派生させるために使用するパスワード、salt、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーを派生させるために使用するパスワード。</param>
      <param name="salt">キーを派生させるために使用するキー salt。</param>
      <param name="iterations">演算の反復処理回数。</param>
      <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">パスワードまたは salt は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定されたパスワード、salt、反復回数、およびキーを派生させるハッシュ アルゴリズム名を使用して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーの派生に使用するパスワード。</param>
      <param name="salt">キーを派生させるために使用するキー salt。</param>
      <param name="iterations">演算の反復処理回数。</param>
      <param name="hashAlgorithm">キーを派生させるために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> プロパティは <see langword="null" /> または <see cref="F:System.String.Empty" /> のいずれかです。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュ アルゴリズム名が無効です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>キーを派生させるために使用するパスワードおよび salt を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーを派生させるために使用するパスワード。</param>
      <param name="salt">キーを派生させるために使用するキー salt。</param>
      <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">パスワードまたは salt は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>キーを派生させるために使用するパスワード、salt、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーを派生させるために使用するパスワード。</param>
      <param name="salt">キーを派生させるために使用するキー salt。</param>
      <param name="iterations">演算の反復処理回数。</param>
      <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">パスワードまたは salt は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定されたパスワード、salt、反復回数、およびキーを派生させるハッシュ アルゴリズム名を使用して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーの派生に使用するパスワード。</param>
      <param name="salt">キーを派生させるために使用するキー salt。</param>
      <param name="iterations">演算の反復処理回数。</param>
      <param name="hashAlgorithm">キーを派生させるために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> プロパティは <see langword="null" /> または <see cref="F:System.String.Empty" /> のいずれかです。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュ アルゴリズム名が無効です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>キーを派生させるために使用するパスワードおよび salt サイズを指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーを派生させるために使用するパスワード。</param>
      <param name="saltSize">クラスで生成するランダム salt のサイズ。</param>
      <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイト未満です。</exception>
      <exception cref="T:System.ArgumentNullException">パスワードまたは salt は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>キーを派生させるために使用するパスワード、salt サイズ、および反復回数を指定して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーを派生させるために使用するパスワード。</param>
      <param name="saltSize">クラスで生成するランダム salt のサイズ。</param>
      <param name="iterations">演算の反復処理回数。</param>
      <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイト未満であるか、反復回数が 1 未満です。</exception>
      <exception cref="T:System.ArgumentNullException">パスワードまたは salt は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" /> が範囲外です。 このパラメーターには、負数以外を指定する必要があります。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>指定されたパスワード、salt のサイズ、反復回数、およびキーを派生させるハッシュ アルゴリズム名を使用して、<see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="password">キーの派生に使用するパスワード。</param>
      <param name="saltSize">クラスで生成するランダム salt のサイズ。</param>
      <param name="iterations">演算の反復処理回数。</param>
      <param name="hashAlgorithm">キーを派生させるために使用するハッシュ アルゴリズム。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> プロパティは <see langword="null" /> または <see cref="F:System.String.Empty" /> のいずれかです。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">ハッシュ アルゴリズム名が無効です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>
        <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> オブジェクトから暗号キーを派生させます。</summary>
      <param name="algname">キーを派生させる対象となるアルゴリズム名。</param>
      <param name="alghashname">キーを派生させるために使用するハッシュ アルゴリズム名。</param>
      <param name="keySize">派生させるキーのサイズ (ビット単位)。</param>
      <param name="rgbIV">キーを派生させるために使用する初期化ベクター (IV: Initialization Vector)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> パラメーターが正しくありません。  
  
- または - 
暗号化サービス プロバイダー (CSP) を取得できません。  
  
- または - 
<paramref name="algname" /> パラメーターが有効なアルゴリズム名ではありません。  
  
- または - 
<paramref name="alghashname" /> パラメーターが有効なハッシュ アルゴリズム名ではありません。</exception>
      <returns>派生させたキー。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> クラスによって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>このオブジェクトの擬似ランダム キーを返します。</summary>
      <param name="cb">生成する擬似ランダム キー バイトの数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" /> が範囲外です。 このパラメーターには、負数以外を指定する必要があります。</exception>
      <returns>擬似ランダム キー バイトを格納したバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>演算の状態をリセットします。</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>演算の反復処理回数を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">反復数が 1 未満です。</exception>
      <returns>演算の反復処理回数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>演算で使用するキー salt 値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">指定された salt のサイズが 8 バイト未満です。</exception>
      <exception cref="T:System.ArgumentNullException">salt が <see langword="null" /> です。</exception>
      <returns>演算で使用するキー salt 値。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> 対称暗号化アルゴリズムのすべての実装の継承元となる基本クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> アルゴリズムを実行する暗号オブジェクトを作成します。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理標準 (FIPS) モードが有効にされた状態でアルゴリズムが使用されましたが、このアルゴリズムは FIPS 準拠ではありません。</exception>
      <returns>暗号オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> アルゴリズムの特定の実装を実行する暗号オブジェクトを作成します。</summary>
      <param name="algName">作成する、<see cref="T:System.Security.Cryptography.Rijndael" /> の特定の実装の名前。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="algName" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>暗号オブジェクト。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>
        <see cref="T:System.Security.Cryptography.Rijndael" /> アルゴリズムのマネージド バージョンにアクセスします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RijndaelManaged" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">このクラスは、FIPS アルゴリズムに準拠していません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>現在の <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> プロパティおよび初期化ベクター (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) を使用して、対称復号化オブジェクトを作成します。</summary>
      <returns>対称復号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>指定した <see cref="T:System.Security.Cryptography.Rijndael" /> および初期化ベクター (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) を使用して、対称 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 復号化オブジェクトを作成します。</summary>
      <param name="rgbKey">対称アルゴリズムで使用する共有キー。 キー サイズは、128、192、または 256 ビットにする必要があります。</param>
      <param name="rgbIV">対称アルゴリズムで使用する IV。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> パラメーターが <see langword="null" /> です。  
  
- または - 
<paramref name="rgbIV" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> プロパティの値が <see cref="F:System.Security.Cryptography.CipherMode.ECB" />、<see cref="F:System.Security.Cryptography.CipherMode.CBC" />、または <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> ではありません。</exception>
      <returns>対称 <see cref="T:System.Security.Cryptography.Rijndael" /> 復号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>現在の <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> プロパティおよび初期化ベクター (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) を使用して、対称暗号化オブジェクトを作成します。</summary>
      <returns>対称暗号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>指定した <see cref="T:System.Security.Cryptography.Rijndael" /> および初期化ベクター (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) を使用して、対称 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 暗号化オブジェクトを作成します。</summary>
      <param name="rgbKey">対称アルゴリズムで使用する共有キー。 キー サイズは、128、192、または 256 ビットにする必要があります。</param>
      <param name="rgbIV">対称アルゴリズムで使用する IV。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> パラメーターが <see langword="null" /> です。  
  
- または - 
<paramref name="rgbIV" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> プロパティの値が <see cref="F:System.Security.Cryptography.CipherMode.ECB" />、<see cref="F:System.Security.Cryptography.CipherMode.CBC" />、または <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> ではありません。</exception>
      <returns>対称 <see cref="T:System.Security.Cryptography.Rijndael" /> 暗号化オブジェクト。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>アルゴリズムで使用するランダムな初期化ベクター (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) を生成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>アルゴリズムで使用するランダムな <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> を生成します。</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>暗号操作のブロック サイズをビット単位で取得または設定します。</summary>
      <returns>暗号化操作のブロックサイズ (ビット単位)。 既定値は128ビットです。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>対称アルゴリズムで使用する初期化ベクター (IV: Initialization Vector) を取得または設定します。</summary>
      <returns>対称アルゴリズムに使用する初期化ベクター (IV)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>対称アルゴリズムで使用する共有キーを取得または設定します。</summary>
      <returns>対称アルゴリズムに使用する秘密キー。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>対称アルゴリズムで使用する共有キーのサイズ (ビット単位) を取得または設定します。</summary>
      <returns>対称アルゴリズムに使用される秘密キーのサイズ (ビット単位)。 既定値は256ビットです。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>対称アルゴリズムでサポートされているキー サイズをビット単位で取得します。</summary>
      <returns>対称アルゴリズムでサポートされているキーサイズ (ビット単位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>対称アルゴリズムの操作モードを取得または設定します。</summary>
      <returns>対称アルゴリズムの操作モード。 既定値は <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> です</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>対称アルゴリズムで使用する埋め込みモードを取得または設定します。</summary>
      <returns>対称アルゴリズムで使用する埋め込みモード。 既定値は、<see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" /> です。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのすべての実装が継承する、基本クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの既定の実装のインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> の既定の実装の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>キー サイズを指定して新しい短期 RSA キーを作成します。</summary>
      <param name="keySizeInBits">キー サイズ (ビット単位)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">既定の実装では、<paramref name="keySizeInBits" /> はサポートされていません。</exception>
      <returns>指定されたキー サイズを持つ新しい短期的 RSA キー。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>RSA キー パラメーターを指定して新しい短期 RSA キーを作成します。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのパラメーター。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> は有効な RSA キーを表していません。</exception>
      <returns>新しい短期 RSA キー。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> の指定した実装のインスタンスを作成します。</summary>
      <param name="algName">使用する <see cref="T:System.Security.Cryptography.RSA" /> の実装の名前。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> の指定した実装の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>派生クラスでオーバーライドされると、指定されたパディング モードを使用して入力データを復号化します。</summary>
      <param name="data">復号化するデータ。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="padding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

<paramref name="data" /> の長さが <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> のバイト数と等しくありません。

または

このインスタンスでは公開キーのみ表されます。 

または

復号化操作に失敗しました。</exception>
      <returns>復号化されるデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>派生クラスでオーバーライドされると、秘密キーを使用して入力データの暗号化を解除します。</summary>
      <param name="rgb">復号化する暗号テキスト。</param>
      <exception cref="T:System.NotSupportedException">このメソッド呼び出しはサポートされていません。 この例外は .NET Framework 4.6 以降、スローされるようになりました。</exception>
      <returns>プレーンテキストの <paramref name="rgb" /> パラメーターの暗号化解除。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>派生クラスでオーバーライドされると、指定されたパディング モードを使用して入力データを暗号化します。</summary>
      <param name="data">暗号化するデータ。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="padding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

<paramref name="data" /> の長さが、<see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> と選択したパディングとの組み合わせに対して長すぎます。

または

暗号化操作に失敗しました。</exception>
      <returns>暗号化するデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>派生クラスでオーバーライドされると、公開キーを使用して入力データを暗号化します。</summary>
      <param name="rgb">暗号化されるプレーンテキスト。</param>
      <exception cref="T:System.NotSupportedException">このメソッド呼び出しはサポートされていません。 この例外は .NET Framework 4.6 以降、スローされるようになりました。</exception>
      <returns>暗号化テキストとなる <paramref name="rgb" /> パラメーターの暗号化。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Security.Cryptography.RSAParameters" /> をエクスポートします。</summary>
      <param name="includePrivateParameters">プライベート パラメーターを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パラメーターをエクスポートできませんでした。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> のパラメーター。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>現在のキーを PKCS#1 RSAPrivateKey 形式でエクスポートします。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>このキーの PKCS#1 RSAPrivateKey 表現を格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>現在のキーの公開キーの部分を、PKCS#1 RSAPublicKey 形式でエクスポートします。</summary>
      <returns>このキーの PKCS#1 RSAPublicKey 表現を格納しているバイト配列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>XML 文字列のキー情報から <see cref="T:System.Security.Cryptography.RSA" /> オブジェクトを初期化します。</summary>
      <param name="xmlString">
        <see cref="T:System.Security.Cryptography.RSA" /> キー情報を格納している XML 文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> パラメーターの形式が正しくありません。</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: このメンバーはサポートされていません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイト配列部分のハッシュ値が計算されます。</summary>
      <param name="data">ハッシュされるデータ。</param>
      <param name="offset">ハッシュされる <paramref name="data" /> の最初のバイトのインデックス。</param>
      <param name="count">ハッシュするバイト数。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>ハッシュされたデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>派生クラスでオーバーライドされると、指定したハッシュ アルゴリズムを使用して、指定したバイナリ ストリームのハッシュ値が計算されます。</summary>
      <param name="data">ハッシュするバイナリ ストリーム。</param>
      <param name="hashAlgorithm">ハッシュアルゴリズム。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <returns>ハッシュされたデータ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="source" /> のコンテンツは、適用するキー派生関数 (KDF) が、<see cref="T:System.Char" /> ベースのパスワードを必要とするレガシの PKCS#12 KDF であることを示しています。

または

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して暗号化解除した後に、PKCS#8 EncryptedPrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 EncryptedPrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="passwordBytes">キー マテリアルを暗号化解除するときにパスワードとして使用するバイト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

または

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>暗号化された RFC 7468 PEM でエンコードされた秘密キーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートする暗号化キーの PEM テキスト。</param>
      <param name="password">キー マテリアルの暗号化に使用するパスワード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

または

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">パスワードが正しくありません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、ASN.1-BER でエンコードされた PKCS#8 EncryptedPrivateKeyInfo 構造体を表していません。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、そのキーが、このインスタンスで表されるアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="input" /> の PEM テキストの、Base-64 でデコードされたコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>RFC 7468 PEM でエンコードされたキーをインポートして、このオブジェクトのキーを置き換えます。</summary>
      <param name="input">インポートするキーの PEM テキスト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> には、認識されたラベルを持つ、PEM でエンコードされたキーは含まれません。

または

<paramref name="input" /> には、認識されたラベルを持つ、複数の PEM でエンコードされたキーが含まれます。

または

<paramref name="input" /> には、暗号化された、PEM でエンコードされたキーが含まれます。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="T:System.Security.Cryptography.RSAParameters" /> をインポートします。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> のパラメーター。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、PKCS#8 PrivateKeyInfo 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの PKCS#8 PrivateKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#8 PrivateKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、PKCS#1 RSAPrivateKey 構造体から公開/秘密キー ペアをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの PKCS#1 RSAPrivateKey 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#1 RSAPrivateKey 構造体を表していません。

または

キーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、PKCS#1 RSAPublicKey 構造体から公開キーをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの PKCS#1 RSAPublicKey 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-BER でエンコードされた PKCS#1 RSAPublicKey 構造体を表していません。

または

キーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>暗号化解除した後に、X.509 SubjectPublicKeyInfo 構造体から公開キーをインポートし、このオブジェクトのキーを置き換えます。</summary>
      <param name="source">ASN.1-BER エンコードでの X.509 SubjectPublicKeyInfo 構造体のバイト。</param>
      <param name="bytesRead">このメソッドが戻るときに、<paramref name="source" /> から読み込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> のコンテンツは、ASN.1-DER でエンコードされた X.509 SubjectPublicKeyInfo 構造体を表していません。

または

<paramref name="source" /> のコンテンツは、そのキーが、このインスタンスで表されているアルゴリズム以外のアルゴリズム用であることを示しています。

または

<paramref name="source" /> のコンテンツは、サポートされていない形式のキーを表しています。

または

アルゴリズム固有のキーのインポートに失敗しました。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムおよびパディング モードを使用して、指定したバイト配列の一部分のハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュおよび署名する入力データ。</param>
      <param name="offset">配列内のデータの使用開始位置を示すオフセット。</param>
      <param name="count">配列内でデータとして使用されるバイトの数。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が 0 未満です。  
  
または 
 <paramref name="count" /> が 0 未満です。  
  
または 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

このインスタンスでは公開キーのみ表されます。

または

署名の作成でエラーが発生しました。</exception>
      <returns>指定されたデータの RSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムおよびパディング モードを使用して、指定したバイト配列のハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュおよび署名する入力データ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

このインスタンスでは公開キーのみ表されます。

または

署名の作成でエラーが発生しました。</exception>
      <returns>指定されたデータの RSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムおよびパディング モードを使用して、指定したストリームのハッシュ値を計算し、結果のハッシュ値に署名します。</summary>
      <param name="data">ハッシュおよび署名する入力ストリーム。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

このインスタンスでは公開キーのみ表されます。

または

署名の作成でエラーが発生しました。</exception>
      <returns>指定されたデータの RSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>派生クラスでオーバーライドされると、指定されたパディングを使用して、指定されたハッシュ値の署名を計算します。</summary>
      <param name="hash">署名されたデータのハッシュ値。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> または <paramref name="padding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

このインスタンスでは公開キーのみ表されます。

または

署名の作成でエラーが発生しました。</exception>
      <returns>指定されたハッシュ値の RSA 署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>現在の <see cref="T:System.Security.Cryptography.RSA" /> オブジェクトのキーを格納している XML 文字列を作成して返します。</summary>
      <param name="includePrivateParameters">公開および秘密の RSA キーを含める場合は <see langword="true" />。公開キーだけを含める場合は <see langword="false" />。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: このメンバーはサポートされていません。</exception>
      <returns>現在の <see cref="T:System.Security.Cryptography.RSA" /> オブジェクトのキーを格納している XML 文字列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>指定したパディング モードを使用して入力データを復号化し、その結果を指定したバッファーに書き込むことを試みます。</summary>
      <param name="data">復号化するデータ。</param>
      <param name="destination">復号化したデータを受け取るバッファー。</param>
      <param name="padding">パディング モード。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

<paramref name="data" /> の長さが <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> のバイト数と等しくありません。

または

このインスタンスでは公開キーのみ表されます。 

または

復号化操作に失敗しました。</exception>
      <returns>
        <paramref name="destination" /> が復号化したデータを受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>指定したパディング モードで、指定したバッファーに入力データを暗号化することを試みます。</summary>
      <param name="data">暗号化するデータ。</param>
      <param name="destination">暗号化したデータを受け取るバッファー。</param>
      <param name="padding">パディング モード。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

<paramref name="data" /> の長さが、<see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> と選択したパディングとの組み合わせに対して長すぎます。

または

暗号化操作に失敗しました。</exception>
      <returns>
        <paramref name="destination" /> が暗号化したデータを受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>バイトベースのパスワードを使用して、現在のキーを PKCS#8 EncryptedPrivateKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="passwordBytes">キー マテリアルを暗号化するときにパスワードとして使用するバイト。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。

または

<paramref name="pbeParameters" /> は、<see cref="T:System.Char" /> ベースのパスワードを必要とする <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> を使用する必要があることを示しています。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>char ベースのパスワードを使用して、PKCS#8 EncryptedPrivateKeyInfo 形式の現在のキーを、指定されたバッファーにエクスポートすることを試みます。</summary>
      <param name="password">キー マテリアルを暗号化するときに使用するパスワード。</param>
      <param name="pbeParameters">キー マテリアルを暗号化するときに使用する、パスワードベースの暗号化 (PBE) パラメーター。</param>
      <param name="destination">PKCS#8 EncryptedPrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>PKCS#8 PrivateKeyInfo 形式の現在のキーを、指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">PKCS#8 PrivateKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを PKCS#1 RSAPrivateKey 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">PKCS#1 RSAPrivateKey データを受け取るバイト範囲。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを PKCS#1 RSAPublicKey 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">PKCS#1 RSAPublicKey データを受け取るバイト範囲。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>現在のキーを X.509 SubjectPublicKeyInfo 形式で指定のバッファーにエクスポートすることを試みます。</summary>
      <param name="destination">X.509 SubjectPublicKeyInfo データを受け取るバイト スパン。</param>
      <param name="bytesWritten">このメソッドが戻るときに、<paramref name="destination" /> に書き込まれたバイト数を示す値が含まれます。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キーをエクスポートすることができませんでした。</exception>
      <returns>
        <paramref name="destination" /> が出力を受け入れるだけの十分な大きさの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>指定されたアルゴリズムを使用して指定されたデータのハッシュを計算し、その結果を指定されたバッファーに書き込むことを試みます。</summary>
      <param name="data">ハッシュされるデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="hashAlgorithm">データのハッシュに使用するアルゴリズム。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <returns>
        <paramref name="destination" /> がハッシュ値を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>指定されたアルゴリズムで、指定されたデータをハッシュし、現在のキーでハッシュを署名して、その結果を指定されたバッファーに書き込むことを試みます。</summary>
      <param name="data">ハッシュおよび署名する入力データ。</param>
      <param name="destination">RSA 署名を受け取るバッファー。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">このインスタンスでは公開キーのみ表されます。

または

署名の作成でエラーが発生しました。</exception>
      <returns>
        <paramref name="destination" /> が RSA 署名を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>現在のキーで、ハッシュを署名して、その結果を指定されたバッファーに書き込むことを試みます。</summary>
      <param name="hash">署名されたデータのハッシュ値。</param>
      <param name="destination" />
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。 このパラメーターは初期化前として処理されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。

または

このインスタンスでは公開キーのみ表されます。

または

署名の作成でエラーが発生しました。</exception>
      <returns>
        <paramref name="destination" /> が RSA 署名を受け取るのに十分な長さである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムとパディングを使用して、指定したデーターのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="signature" /> が <see langword="null" />です。  
  
または 
 <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムとパディングを使用して、バイト配列の部分のデータのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="offset">ハッシュを計算する位置を示す開始インデックス。</param>
      <param name="count">ハッシュするバイト数。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="signature" /> が <see langword="null" />です。  
  
または 
 <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> が 0 未満です。  
  
または 
 <paramref name="count" /> が 0 未満です。  
  
または 
 <paramref name="offset" /> + <paramref name="count" /> - 1 の結果は、<paramref name="data" /> の上限を超えるインデックスになります。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムとパディングを使用して、指定したストリームのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> が <see langword="null" />です。  
  
または 
 <paramref name="signature" /> が <see langword="null" />です。  
  
または 
 <paramref name="padding" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムとパディングを使用して、指定したデーターのハッシュ値を計算し、これを指定した署名と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="data">署名されるデータ。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">データのハッシュ値を作成するために使用されるハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムとパディングを使用して、署名のハッシュ値を決定し、これを指定したハッシュ値と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="hash">署名されたデータのハッシュ値。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.NotImplementedException">派生クラスはこのメソッドをオーバーライドする必要があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> または <paramref name="padding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定したハッシュ アルゴリズムとパディングを使用して、署名のハッシュ値を決定し、これを指定したハッシュ値と比較することによって、デジタル署名が有効であることを確認します。</summary>
      <param name="hash">署名されたデータのハッシュ値。</param>
      <param name="signature">検証する署名データ。</param>
      <param name="hashAlgorithm">ハッシュ値を作成するために使用するハッシュ アルゴリズム。</param>
      <param name="padding">パディング モード。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> または <paramref name="padding" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> は <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> が不明であるか、この実装ではサポートされていません。</exception>
      <returns>署名が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> のこの実装で使用可能なキー交換アルゴリズムの名前を取得します。</summary>
      <returns>"RSA" を返します。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> のこの実装で使用可能なキー交換アルゴリズムの名前を取得します。</summary>
      <returns>"RSA" を返します。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>RSA 暗号化または復号化の操作で使用されるパディング モードおよびパラメーターを指定します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>
        <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> が指定されたハッシュ アルゴリズムで <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> された、新しい <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> インスタンスを作成します。</summary>
      <param name="hashAlgorithm">ハッシュアルゴリズム。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> の <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> プロパティは <see langword="null" /> または <see cref="F:System.String.Empty" /> のいずれかです。</exception>
      <returns>モードが <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> であるオブジェクトは、<paramref name="hashAlgorithm" /> によって指定されたハッシュ アルゴリズムを含む <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> です。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>現在のインスタンスが、指定したオブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj">比較対象のオブジェクト。</param>
      <returns>
        <paramref name="obj" /> が現在のインスタンスと等しい場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>現在の <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> インスタンスが、指定したオブジェクトと等しいかどうかを判断します。</summary>
      <param name="other">比較対象のオブジェクト。</param>
      <returns>
        <paramref name="other" /> が現在のインスタンスと等しい場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>この <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> オブジェクトのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>指定した 2 つの <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> オブジェクトが等しいかどうかを示します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <see langword="left" /> と <see langword="right" /> が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>指定した 2 つの <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> オブジェクトが等しくないかどうかを示します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <see langword="left" /> と <see langword="right" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>現在の <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> インスタンスの文字列表現を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>この <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> インスタンスで表されているパディング モードを取得します。</summary>
      <returns>パディング モード。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>
        <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> パディング モードと組み合わせて使用するハッシュ アルゴリズムを取得します。</summary>
      <returns>ハッシュアルゴリズム。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>SHA1 ハッシュ アルゴリズムを含む OAEP (Optimal Asymmetric Encryption Padding) 暗号化標準を表すオブジェクトを取得します。</summary>
      <returns>SHA1 ハッシュ アルゴリズムを含む OAEP 暗号化標準を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>SHA256 ハッシュ アルゴリズムを含む OAEP (Optimal Asymmetric Encryption Padding) 暗号化標準を表すオブジェクトを取得します。</summary>
      <returns>SHA256 ハッシュ アルゴリズムを含む OAEP 暗号化標準を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>SHA-384 ハッシュ アルゴリズムを含む OAEP (Optimal Asymmetric Encryption Padding) 暗号化標準を表すオブジェクトを取得します。</summary>
      <returns>SHA384 ハッシュ アルゴリズムを含む OAEP 暗号化標準を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>SHA512 ハッシュ アルゴリズムを含む OAEP (Optimal Asymmetric Encryption Padding) 暗号化標準を表すオブジェクトを取得します。</summary>
      <returns>SHA512 ハッシュ アルゴリズムを含む OAEP 暗号化標準を表すオブジェクト。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>PKCS #1 暗号化標準を表すオブジェクトを取得します。</summary>
      <returns>PKCS #1 暗号化標準を表すオブジェクト。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>RSA 暗号化または復号化の操作で使用されるパディング モードを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>OAEP (Optimal Asymmetric Encryption Padding)。 新しいアプリケーションに対してはこれが推奨されます。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5。 これは既存のアプリケーションとの互換性のためにサポートされています。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>OAEP (最適非対称暗号化パディング) キー交換データを複合化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>暗号化されたキー交換データから機密情報を抽出します。</summary>
      <param name="rgbData">機密情報が非表示にされるキー交換データ。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">キー交換データの検証に失敗しました。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">キーがありません。</exception>
      <returns>キー交換データから派生する機密情報。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>機密情報の復号化に使用する秘密キーを設定します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>OAEP (最適非対称暗号化パディング) キー交換のパラメーターを取得します。</summary>
      <returns>OAEP キーの交換操作のパラメーターを含む XML 文字列。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> を使用して、OAEP (最適非対称暗号化パディング) キー交換データを作成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">公開キーを保持している <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>指定された入力データから暗号化したキー交換データを作成します。</summary>
      <param name="rgbData">キー交換で渡される機密情報。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">キーがありません。</exception>
      <returns>目的の受信者に送信する暗号化されたキー交換データ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>指定された入力データから暗号化したキー交換データを作成します。</summary>
      <param name="rgbData">キー交換で渡される機密情報。</param>
      <param name="symAlgType">このパラメーターは、現在のバージョンでは使用されません。</param>
      <returns>目的の受信者に送信する暗号化されたキー交換データ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>キー交換データの暗号化に使用する公開キーを設定します。</summary>
      <param name="key">公開キーを保持している <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>キー交換の作成プロセスでパディングの作成に使用するパラメーターを取得または設定します。</summary>
      <returns>パラメーター値。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>OAEP (最適非対称暗号化パディング) キー交換のパラメーターを取得します。</summary>
      <returns>OAEP キーの交換操作のパラメーターを含む XML 文字列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>キー交換の作成に使用する乱数ジェネレーター アルゴリズムを取得または設定します。</summary>
      <returns>使用する乱数ジェネレーター アルゴリズムのインスタンス。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの標準のパラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="D" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="DP" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="DQ" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="Exponent" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="InverseQ" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="Modulus" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="P" /> パラメーターを表します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムの <see langword="Q" /> パラメーターを表します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>PKCS #1 キー交換データを復号化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>暗号化されたキー交換データから機密情報を抽出します。</summary>
      <param name="rgbIn">機密情報が非表示にされるキー交換データ。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">キーがありません。</exception>
      <returns>キー交換データから派生する機密情報。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>機密情報の復号化に使用する秘密キーを設定します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>PKCS #1 キー交換のパラメーターを取得します。</summary>
      <returns>PKCS #1 キーの交換操作のパラメーターを含む XML 文字列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>キー交換の作成に使用する乱数ジェネレーター アルゴリズムを取得または設定します。</summary>
      <returns>使用する乱数ジェネレーター アルゴリズムのインスタンス。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> を使用して PKCS #1 キー交換データを作成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">公開キーを保持している <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>指定された入力データから暗号化したキー交換データを作成します。</summary>
      <param name="rgbData">キー交換で渡される機密情報。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData" /> が大きすぎます。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">キーは <see langword="null" /> です。</exception>
      <returns>目的の受信者に送信する暗号化されたキー交換データ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>指定された入力データから暗号化したキー交換データを作成します。</summary>
      <param name="rgbData">キー交換で渡される機密情報。</param>
      <param name="symAlgType">このパラメーターは、現在のバージョンでは使用されません。</param>
      <returns>目的の受信者に送信する暗号化されたキー交換データ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>キー交換データの暗号化に使用する公開キーを設定します。</summary>
      <param name="key">公開キーを保持している <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>PKCS #1 キー交換のパラメーターを取得します。</summary>
      <returns>PKCS #1 キーの交換操作のパラメーターを含む XML 文字列。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>キー交換の作成に使用する乱数ジェネレーター アルゴリズムを取得または設定します。</summary>
      <returns>使用する乱数ジェネレーター アルゴリズムのインスタンス。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 バージョン 1.5 署名を検証します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">公開キーを保持している <see cref="T:System.Security.Cryptography.RSA" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>署名の検証に使用するハッシュ アルゴリズムを設定します。</summary>
      <param name="strName">署名の検証に使用するハッシュ アルゴリズムの名前。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>署名の検証に使用する公開キーを設定します。</summary>
      <param name="key">公開キーを保持している <see cref="T:System.Security.Cryptography.RSA" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>指定されたデータの <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 署名を検証します。</summary>
      <param name="rgbHash">
        <paramref name="rgbSignature" /> を使用して署名されたデータ。</param>
      <param name="rgbSignature">
        <paramref name="rgbHash" /> の検証対象の署名。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">キーは <see langword="null" /> です。  
  
- または - 
ハッシュ アルゴリズムは <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> パラメーターが <see langword="null" /> です。  
  
- または - 
<paramref name="rgbSignature" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>
        <paramref name="rgbSignature" /> が <paramref name="rgbHash" /> で指定したハッシュ アルゴリズムとキーを使用して計算された署名と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>
        <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 バージョン 1.5 の署名を作成します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定したキーで、<see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>指定されたデータの <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 署名を作成します。</summary>
      <param name="rgbHash">署名する対象のデータ。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">キーは <see langword="null" /> です。  
  
- または - 
ハッシュ アルゴリズムは <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>
        <paramref name="rgbHash" /> のデジタル署名。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>署名の作成に使用するハッシュ アルゴリズムを設定します。</summary>
      <param name="strName">署名の作成に使用するハッシュ アルゴリズムの名前。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>署名の作成に使用する秘密キーを設定します。</summary>
      <param name="key">秘密キーを保持する <see cref="T:System.Security.Cryptography.RSA" /> アルゴリズムのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>RSA 署名作成または検証の操作で使用されるパディング モードおよびパラメーターを指定します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />です。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>このインスタンスが、指定した <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> オブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="other">現在のインスタンスと比較するオブジェクト。</param>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />です。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>この <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> インスタンスのハッシュ コードを返します。</summary>
      <returns>この <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> インスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定した 2 つの <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> オブジェクトが等しいかどうかを示します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <see langword="left" /> と <see langword="right" /> が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>指定した 2 つの <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> オブジェクトが等しくないかどうかを示します。</summary>
      <param name="left">比較する最初のオブジェクト。</param>
      <param name="right">比較する 2 番目のオブジェクト。</param>
      <returns>
        <see langword="left" /> と <see langword="right" /> が等しくない場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>現在の <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> インスタンスの文字列表現を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>この <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> インスタンスのパディング モードを取得します。</summary>
      <returns>このインスタンスのパディング モード (<see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> または <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> のいずれか) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>PKCS #1 v1.5 パディング モードを使用するオブジェクトを取得します。</summary>
      <returns>
        <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> パディング モードを使用するオブジェクト。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>PSS パディング モードを使用するオブジェクトを取得します。</summary>
      <returns>ハッシュのサイズに等しい salt バイト数を持つ <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> パディング モードを使用するオブジェクト。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>RSA 署名作成または検証の操作で使用されるパディング モードを指定します。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>確率的署名スキーム。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>入力データの <see cref="T:System.Security.Cryptography.SHA1" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" /> の新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">このオブジェクトのポリシーは、FIPS アルゴリズムに準拠していません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" /> の既定の実装のインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1" /> の指定した実装のインスタンスを作成します。</summary>
      <param name="hashName">使用する <see cref="T:System.Security.Cryptography.SHA1" /> の特定の実装の名前。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" /> の指定した実装を使用する新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.Byte[])">
      <summary>SHA1 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" />です。</exception>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>SHA1 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>SHA1 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> のバッファーが小さすぎて、計算されたハッシュ サイズを保持できません。 SHA1 アルゴリズムでは常に、160 ビットつまり 20 バイトのハッシュが生成されます。</exception>
      <returns>
        <paramref name="destination" /> に書き込まれた合計バイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>SHA1 アルゴリズムを使用してデータのハッシュの計算を試みます。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。</param>
      <returns>
        <paramref name="destination" /> が小さすぎて計算されたハッシュを保持できない場合は <see langword="false" />、それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>マネージド ライブラリを使用して、入力データの <see cref="T:System.Security.Cryptography.SHA1" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1Managed" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">このクラスは、FIPS アルゴリズムに準拠していません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA1Managed" /> のインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>入力データの <see cref="T:System.Security.Cryptography.SHA256" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" /> の既定の実装のインスタンスを作成します。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">.NET Framework 4.6.1 以前のバージョンのみ: 連邦情報処理標準 (FIPS) モードが有効にされた状態でアルゴリズムが使用されましたが、このアルゴリズムは FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" /> の新しいインスタンス。 .NET Framework で、FIPS モードがアクティブではない場合は、このメソッドによって <see cref="T:System.Security.Cryptography.SHA256Managed" /> クラスのインスタンスが作成されます。FIPS モードがアクティブな場合は、<see cref="T:System.Security.Cryptography.SHA256Cng" /> クラスのインスタンスが作成されます。 .NET Core では、<see cref="T:System.Security.Cryptography.SHA256" /> から派生したプライベート クラスのインスタンスが返されます。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256" /> の指定した実装のインスタンスを作成します。</summary>
      <param name="hashName">使用する <see cref="T:System.Security.Cryptography.SHA256" /> の特定の実装の名前。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">.NET Framework のみ: FIPS モードが有効ですが、<paramref name="hashName" /> は FIPS 互換ではない <see cref="T:System.Security.Cryptography.SHA256Managed" /> を要求しています。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" /> の指定した実装を使用する新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.Byte[])">
      <summary>SHA256 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" />です。</exception>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>SHA256 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>SHA256 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> のバッファーが小さすぎて、計算されたハッシュ サイズを保持できません。 SHA256 アルゴリズムでは常に、256 ビットつまり 32 バイトのハッシュが生成されます。</exception>
      <returns>
        <paramref name="destination" /> に書き込まれた合計バイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>SHA256 アルゴリズムを使用してデータのハッシュの計算を試みます。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。</param>
      <returns>
        <paramref name="destination" /> が小さすぎて計算されたハッシュを保持できない場合は <see langword="false" />、それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>マネージド ライブラリを使用して、入力データの <see cref="T:System.Security.Cryptography.SHA256" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>マネージド ライブラリを使用して、<see cref="T:System.Security.Cryptography.SHA256Managed" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) のセキュリティ設定が有効になっています。 この実装は、Windows プラットフォーム FIPS 準拠の暗号アルゴリズムには含まれません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA256Managed" /> のインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>入力データの <see cref="T:System.Security.Cryptography.SHA384" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" /> の既定の実装のインスタンスを作成します。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理標準 (FIPS) モードが有効にされた状態でアルゴリズムが使用されましたが、このアルゴリズムは FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384" /> の指定した実装のインスタンスを作成します。</summary>
      <param name="hashName">使用する <see cref="T:System.Security.Cryptography.SHA384" /> の特定の実装の名前。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="hashName" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" /> の指定した実装を使用する新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.Byte[])">
      <summary>SHA384 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" />です。</exception>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>SHA384 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>SHA384 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> のバッファーが小さすぎて、計算されたハッシュ サイズを保持できません。 SHA384 アルゴリズムでは常に、384 ビットつまり 48 バイトのハッシュが生成されます。</exception>
      <returns>
        <paramref name="destination" /> に書き込まれた合計バイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>SHA384 アルゴリズムを使用してデータのハッシュの計算を試みます。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。</param>
      <returns>
        <paramref name="destination" /> が小さすぎて計算されたハッシュを保持できない場合は <see langword="false" />、それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>マネージド ライブラリを使用して、入力データの <see cref="T:System.Security.Cryptography.SHA384" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384Managed" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) のセキュリティ設定が有効になっています。 この実装は、Windows プラットフォーム FIPS 準拠の暗号アルゴリズムには含まれません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA384Managed" /> のインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>入力データの <see cref="T:System.Security.Cryptography.SHA512" /> ハッシュを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" /> の既定の実装のインスタンスを作成します。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理標準 (FIPS) モードが有効にされた状態でアルゴリズムが使用されましたが、このアルゴリズムは FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512" /> の指定した実装のインスタンスを作成します。</summary>
      <param name="hashName">使用する <see cref="T:System.Security.Cryptography.SHA512" /> の特定の実装の名前。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) モードが有効になっていますが、<paramref name="hashName" /> パラメーターによって定義されたアルゴリズムは、FIPS 準拠ではありません。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" /> の指定した実装を使用する新しいインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.Byte[])">
      <summary>SHA512 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュ対象のデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が <see langword="null" />です。</exception>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>SHA512 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュ対象のデータ。</param>
      <returns>データのハッシュ。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>SHA512 アルゴリズムを使用してデータのハッシュを計算します。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> のバッファーが小さすぎて、計算されたハッシュ サイズを保持できません。 SHA1 アルゴリズムでは常に、512 ビットつまり 64 バイトのハッシュが生成されます。</exception>
      <returns>
        <paramref name="destination" /> に書き込まれた合計バイト数。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>SHA512 アルゴリズムを使用してデータのハッシュの計算を試みます。</summary>
      <param name="source">ハッシュを計算するデータ。</param>
      <param name="destination">ハッシュ値を受け取るバッファー。</param>
      <param name="bytesWritten">このメソッドから制御が戻るときに、<paramref name="destination" /> に書き込まれた合計バイト数。</param>
      <returns>
        <paramref name="destination" /> が小さすぎて計算されたハッシュを保持できない場合は <see langword="false" />、それ以外の場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>マネージド ライブラリを使用して、入力データの <see cref="T:System.Security.Cryptography.SHA512" /> ハッシュ アルゴリズムを計算します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SHA512Managed" /> クラスの新しいインスタンスを初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">連邦情報処理規格 (FIPS: Federal Information Processing Standard) のセキュリティ設定が有効になっています。 この実装は、Windows プラットフォーム FIPS 準拠の暗号アルゴリズムには含まれません。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>マネージド ライブラリを使用して、<see cref="T:System.Security.Cryptography.SHA512Managed" /> クラスのインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>デジタル署名のプロパティに関する情報を格納します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.SignatureDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>指定した <see cref="T:System.Security.SecurityElement" /> から <see cref="T:System.Security.Cryptography.SignatureDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="el">署名の説明に対するアルゴリズムの取得元の <see cref="T:System.Security.SecurityElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="el" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> プロパティを使用して、指定したキーを持つ <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" /> インスタンスを作成します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> で使用するキー。</param>
      <returns>新しく作成した <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> インスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> プロパティを使用して、<see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" /> インスタンスを作成します。</summary>
      <returns>新しく作成した <see cref="T:System.Security.Cryptography.HashAlgorithm" /> インスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> プロパティを使用して、指定したキーを持つ <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" /> インスタンスを作成します。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> で使用するキー。</param>
      <returns>新しく作成した <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> インスタンス。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>署名の説明に対する逆フォーマッタ アルゴリズムを取得または設定します。</summary>
      <returns>署名の説明に対する逆フォーマッタ アルゴリズム。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>署名の説明に対するダイジェスト アルゴリズムを取得または設定します。</summary>
      <returns>署名の説明に対するダイジェスト アルゴリズム。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>署名の説明に対するフォーマッタ アルゴリズムを取得または設定します。</summary>
      <returns>署名の説明に対するフォーマッタ アルゴリズム。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>署名の説明に対するキー アルゴリズムを取得または設定します。</summary>
      <returns>署名の説明に対するキー アルゴリズム。</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>すべての <see cref="T:System.Security.Cryptography.TripleDES" /> 実装の派生元となる Triple DES (Data Encryption Standard) アルゴリズムの基底クラスを表します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> アルゴリズムを実行するための暗号オブジェクトのインスタンスを作成します。</summary>
      <returns>暗号オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> アルゴリズムの指定した実装を実行する暗号オブジェクトのインスタンスを作成します。</summary>
      <param name="str">使用する <see cref="T:System.Security.Cryptography.TripleDES" /> の特定の実装の名前。</param>
      <returns>暗号オブジェクトのインスタンス。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>指定したキーが脆弱であるかどうかを判断します。</summary>
      <param name="rgbKey">脆弱性をテストする共有キー。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> パラメーターのサイズが無効です。</exception>
      <returns>キーが脆弱な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>
        <see cref="T:System.Security.Cryptography.TripleDES" /> アルゴリズムの秘密鍵を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">鍵を <see langword="null" /> に設定しようとしました。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">正しくない長さのキーを設定しようとしました。  
  
- または - 
弱いキーを設定しようとしました (<see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" /> をご覧ください)。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDES" /> アルゴリズムの秘密鍵 (共通鍵)。</returns>
    </member>
  </members>
</doc>
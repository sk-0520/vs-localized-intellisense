<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトおよび <see cref="T:System.Xml.XmlWriter" /> オブジェクトで実行する、入力チェックまたは出力チェックの量を指定します。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlWriter" /> オブジェクトは、ドキュメント レベルのチェックまたはフラグメント レベルのチェックを実行する必要があるかどうかを自動的に検出し、適切なチェックを実行します。 別の <see cref="T:System.Xml.XmlReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップしている場合、外側のオブジェクトは追加の準拠のチェックを実行しません。 準拠のチェックは、基になるオブジェクトだけで実行されます。  
  
準拠レベルの決定方法の詳細については、<see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> プロパティと <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> プロパティを参照してください。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>XML データは、W3C によって定義された整形式の XML 1.0 ドキュメントのルールに準拠します。 このレベルのチェックにより、どのプロセッサでも、読み書きされるストリームを XML 1.0 ドキュメントとして使用できることが保証されます。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>XML データは、W3C によって定義されている、整形式の XML フラグメントです。  この準拠レベルは、ルート要素がない可能性があっても、それ以外は整形式の XML ドキュメントを表します。 このレベルのチェックにより、どのプロセッサでも、読み書きされるストリームを XML 1.0 の外部解析対象エンティティとして使用できることが保証されます。</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>DTD を処理するためのオプションを指定します。 <see cref="T:System.Xml.DtdProcessing" /> 列挙体は <see cref="T:System.Xml.XmlReaderSettings" /> クラスによって使用されます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>DOCTYPE 要素は無視されます。 DTD 処理は発生せず、DTD/DOCTYPE は出力時に失われます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>DTD の解析に使用されます。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>DTD を検出したときに、DTD が禁止されていることを示すメッセージと共に <see cref="T:System.Xml.XmlException" /> をスローします。 これが既定の動作です。</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" /> または <see cref="T:System.Xml.XmlValidatingReader" /> でエンティティがどのように処理されるかを指定します。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>文字エンティティを展開し、<see cref="F:System.Xml.XmlNodeType.EntityReference" /> ノードとしての一般エンティティを返します。 
        
<see cref="Overload:System.Xml.XmlReader.ResolveEntity" /> を呼び出して、一般エンティティの展開先を確認する必要があります。 これにより、エンティティを初めて使用するときにのみ展開することで、エンティティの処理を最適化できます。  
  
<see langword="ExpandCharEntities" /> に設定した場合、リーダーによる <see cref="Overload:System.Xml.XmlReader.GetAttribute" /> メソッドの呼び出しによって、すべてのエンティティ (一般エンティティと文字エンティティの両方) が展開されます。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>すべてのエンティティを展開し、展開されたノードを返します。
        
<see cref="F:System.Xml.XmlNodeType.EntityReference" /> ノードは返されません。 エンティティのテキストがエンティティ参照の代わりに展開されます。</summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>
        <see cref="T:System.Xml.XmlTextWriter" /> の書式オプションを指定します。</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>子要素が、<see cref="P:System.Xml.XmlTextWriter.Indentation" /> の設定および <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> の設定に従ってインデント設定されます。

このオプションでは、要素コンテンツにのみインデントが設定されます。混合コンテンツは影響を受けません。 これらの用語の XML 1.0 定義については、World Wide Web コンソーシアム (W3C) のドキュメントの「Element Content (要素コンテンツ)」および「Mixed Content (混合コンテンツ)」をご覧ください。</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>特殊な書式は適用されません。 これは既定値です。</summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary>アプリケーションのリソース ストリーム リゾルバーを表します。</summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary>指定した URI からアプリケーション リソース ストリームを返します。</summary>
      <param name="relativeUri">相対 URI。</param>
      <returns>アプリケーションのリソース ストリーム。</returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>クラスが、現在のコンテキストまたは位置から <see cref="T:System.Xml.XmlNode" /> を返せるようにします。</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>現在位置の <see cref="T:System.Xml.XmlNode" /> を返します。</summary>
      <returns>現在位置の <see langword="XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>クラスが行情報および位置情報を返せるようにするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> および <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> を提供できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>現在の行番号を取得します。</summary>
      <returns>現在の行番号。または行情報が取得できない場合は 0。たとえば、<see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>現在の行の位置を取得します。</summary>
      <returns>現在の行の位置。または行情報が取得できない場合は 0。たとえば、<see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> は <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>プレフィックスと名前空間の一連の割り当てに対する読み取り専用アクセスを提供します。</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>現在スコープ内にあるプレフィックスと名前空間の間に定義された割り当てのコレクションを取得します。</summary>
      <param name="scope">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns>現在のスコープ内にある名前空間が格納された <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>指定したプレフィックスに割り当てられた名前空間 URI を取得します。</summary>
      <param name="prefix">検索対象の名前空間 URI を持つプレフィックス。</param>
      <returns>プレフィックスに割り当てられている名前空間 URI。このプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>指定した名前空間 URI に割り当てられたプレフィックスを取得します。</summary>
      <param name="namespaceName">検索対象のプレフィックスを持つ名前空間 URI。</param>
      <returns>名前空間 URI に割り当てられているプレフィックス。この名前空間 URI にプレフィックスが割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> で重複する名前空間宣言を削除するかどうかを指定します。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>重複する名前空間宣言が削除されないように指定します。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>重複する名前空間宣言を削除するように指定します。 重複する名前空間を削除するには、プレフィックスと名前空間が一致している必要があります。</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>シングルスレッド <see cref="T:System.Xml.XmlNameTable" /> を実装します。</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>
        <see langword="NameTable" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>指定した文字列を最小単位に分割し、<see langword="NameTable" /> に追加します。</summary>
      <param name="key">追加する文字列を格納している文字配列。</param>
      <param name="start">文字列の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="len">文字列の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
  
- または - 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
- または - 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
<paramref name="len" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.</exception>
      <returns>最小単位に分割された文字列。または <see langword="NameTable" /> に既に存在している場合は既存の文字列。 <paramref name="len" /> が 0 の場合は、String.Empty が返されます。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>指定した文字列を最小単位に分割し、<see langword="NameTable" /> に追加します。</summary>
      <param name="key">追加する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns>最小単位に分割された文字列。<see langword="NameTable" /> に既に存在している場合は既存の文字列。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>指定した配列内の指定した範囲の文字と同じ文字を含む、最小単位に分割された文字列を取得します。</summary>
      <param name="key">検索対象の名前を格納している文字配列。</param>
      <param name="start">名前の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="len">名前の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />  
  
- または - 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
- または - 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
<paramref name="len" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0.</exception>
      <returns>最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は <see langword="null" />。 <paramref name="len" /> が 0 の場合は、String.Empty が返されます。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>指定した値を持つ最小単位に分割された文字列を取得します。</summary>
      <param name="value">検索対象の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" />です。</exception>
      <returns>最小単位に分割された文字列オブジェクト。または文字列がまだ最小単位に分割されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>改行の処理方法を指定します。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>改行文字をエンティティ化します。 この設定では、正規化 <see cref="T:System.Xml.XmlReader" /> で出力を読み取るときにすべての文字が保持されます。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>改行文字を変更しません。 出力は入力と同じになります。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> プロパティに指定されている文字と一致するように、改行文字を置き換えます。</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>リーダーの状態を指定します。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlReader.Close" /> メソッドが呼び出されています。</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>ファイルの末尾に正常に到達しています。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>読み取り操作を継続できないようにするエラーが発生しました。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>
        <see langword="Read" /> メソッドが呼び出されていません。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>
        <see langword="Read" /> メソッドが呼び出されています。 リーダーで追加のメソッドが呼び出される場合があります。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 列挙型は、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> により使用され、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識する既知の DTD を定義します。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>現在サポートされているすべての DTD を <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識することを指定します。 これは既定の動作です。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が、定義済みの DTD を一切認識しないことを指定します。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>RSS 0.91 で定義されている DTD およびエンティティを <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識することを指定します。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>XHTML 1.0 で定義されている DTD およびエンティティを <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> が認識することを指定します。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>DTD ストリームまたは XML ストリームをキャッシュに事前に読み込むために使用されるクラスを表します。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>指定したプリロード済みの既知の DTD を使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="preloadedDtds">キャッシュに事前設定が必要な既知の DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>指定したフォールバック リゾルバーを使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" />、または独自のリゾルバー。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>指定したフォールバック リゾルバーとプリロード済みの既知の DTD を使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" />、または独自のリゾルバー。</param>
      <param name="preloadedDtds">キャッシュに事前設定が必要な既知の DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>指定したフォールバック リゾルバー、プリロード済みの既知の DTD、および URI の等値比較子を使用して、<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fallbackResolver">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" />、または独自のリゾルバー。</param>
      <param name="preloadedDtds">キャッシュに事前設定が必要な既知の DTD。</param>
      <param name="uriComparer">URI の比較に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアにバイト配列を追加して URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value">指定した URI に対応するデータを持つバイト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアにバイト配列を追加して URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value">指定した URI に対応するデータを持つバイト配列。</param>
      <param name="offset">指定したバイト配列内の、データの開始地点を表すオフセット。</param>
      <param name="count">指定したオフセットを開始地点として、バイト配列から読み込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
<paramref name="value" /> から <paramref name="offset" /> を引いた長さが、<paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>
        <see cref="T:System.IO.Stream" /> ストアに <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> を追加して URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value">指定した URI に対応するデータを持つ <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>プリロード済みのデータを持つ文字列を <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加し、それを URI にマップします。 同じ URI のマッピングがストアに既に格納されている場合、その既存のマッピングはオーバーライドされます。</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアに追加するデータの URI。</param>
      <param name="value">指定した URI に対応するデータを持つ <see langword="String" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトにマップします。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">.NET Framework for Silverlight の現在のバージョンでは、URI を解決するときにこのパラメーターは使用しません。 このパラメーターは、将来の拡張のために提供されています。 たとえば、このパラメーターを xlink:role に割り当て、別の場合に実装固有の引数として使用できます。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> は、<see langword="String" /> として追加された URI に対し <see cref="T:System.IO.Stream" /> オブジェクトと <see cref="T:System.IO.TextReader" /> オブジェクトをサポートしています。 要求した型をリゾルバーがサポートしていない場合、例外がスローされます。 リゾルバーが特定の <see langword="Type" /> をサポートしているかどうかを確認するには、<see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> メソッドを使用します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="absoluteUri" /> に渡された URI を解決できません。  
  
- または - 
 <paramref name="ofObjectToReturn" /> は、サポートされた型ではありません。</exception>
      <returns>
        <see cref="T:System.IO.Stream" /> または実際のソースに対応する <see cref="T:System.IO.TextReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">.NET Framework for Silverlight の現在のバージョンでは、URI を解決するときにこのパラメーターは使用しません。 このパラメーターは、将来の拡張のために提供されています。 たとえば、このパラメーターを xlink:role に割り当て、別の場合に実装固有の引数として使用できます。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> は、<see langword="String" /> として追加された URI に対し <see cref="T:System.IO.Stream" /> オブジェクトと <see cref="T:System.IO.TextReader" /> オブジェクトをサポートしています。 要求した型をリゾルバーがサポートしていない場合、例外がスローされます。 リゾルバーが特定の <see langword="Type" /> をサポートしているかどうかを確認するには、<see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> メソッドを使用します。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> または実際のソースに対応する <see cref="T:System.IO.TextReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>URI に対応するデータを <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> から削除します。</summary>
      <param name="uri">
        <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> ストアから削除する必要のあるデータの URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>ベース URI および 相対 URI を解決して絶対 URI を返します。</summary>
      <param name="baseUri">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> が <see langword="null" />です。</exception>
      <returns>絶対 URI を表す <see cref="T:System.Uri" />。相対 URI を解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>リゾルバーが <see cref="T:System.Type" /> 以外の <see cref="T:System.IO.Stream" /> をサポートするかどうかを判断します。</summary>
      <param name="absoluteUri">チェックする絶対 URI。</param>
      <param name="type">返される <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> が <see langword="null" />です。</exception>
      <returns>
        <see cref="T:System.Type" /> がサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary>基になる <see cref="T:System.Net.WebRequest" /> の認証に使用する資格情報を設定します。</summary>
      <returns>基になる Web 要求を認証するために使用する資格情報。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>プリロード済みの URI のコレクションを取得します。</summary>
      <returns>プリロード済みの URI のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary>検証済み XML ノードのスキーマ検証後の infoset を定義します。</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary>この検証済みの XML ノードが、XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマの検証を実行中に既定値を適用して設定されたかどうかを示す値を取得します。</summary>
      <returns>この検証済みの XML ノードが、スキーマの検証中に既定値を適用することによって設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary>この検証済み XML ノードの値が nil かどうかを示す値を取得します。</summary>
      <returns>この検証済みの XML ノードの値が nil の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary>この検証済み XML ノードの動的なスキーマ型を取得します。</summary>
      <returns>この検証済み XML ノードの動的スキーマ型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary>この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> を取得します。</summary>
      <returns>この検証済み XML ノードに対応する <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary>この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaElement" /> を取得します。</summary>
      <returns>この検証済み XML ノードに対応する <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary>この検証済み XML ノードの静的な XML スキーマ定義言語 (XSD) スキーマ型を取得します。</summary>
      <returns>この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary>この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値を取得します。</summary>
      <returns>この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary>
        <see langword="ValidationEventHandler" /> に関する詳細情報を返します。</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary>検証イベントに関連付けられている <see cref="T:System.Xml.Schema.XmlSchemaException" /> を取得します。</summary>
      <returns>検証イベントに関連付けられている <see langword="XmlSchemaException" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary>検証イベントに対応している説明テキストを取得します。</summary>
      <returns>説明テキスト。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary>検証イベントの重大度レベルを取得します。</summary>
      <returns>検証イベントの重大度レベルを表す <see cref="T:System.Xml.Schema.XmlSeverityType" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary>XML スキーマ検証イベントおよび <see cref="T:System.Xml.Schema.ValidationEventArgs" /> を処理するコールバック メソッドを表します。</summary>
      <param name="sender">イベントのソース。  
  
 メモ 送信元をコードで使用する前に、送信元の型を確認してください。 送信元が特定の型のインスタンスになるとは限りません。 また、送信元が null でないという保証もありません。 キャスト コマンドは、必ずエラー処理ロジックで囲むようにしてください。</param>
      <param name="e">イベントのデータ。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary>検証済みの XML 要素または XML 属性の型指定された値を表します。 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> クラスは継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary>この <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクトのコピーを返します。</summary>
      <returns>この <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクトのコピーである <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />」をご覧ください。</summary>
      <returns>この <see cref="T:System.Xml.Schema.XmlAtomicValue" /> オブジェクトのコピー。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary>検証済みの XML 要素または XML 属性の <see langword="string" /> 値を取得します。</summary>
      <returns>検証済みの XML 要素または XML 属性の <see langword="string" /> 値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>名前空間プレフィックスの解決用に指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して、検証済みの XML 要素または XML 属性の値を指定された型として返します。</summary>
      <param name="type">検証済みの XML 要素または XML 属性の値を返すときの型。</param>
      <param name="nsResolver">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.FormatException">検証済みの XML 要素または XML 属性の値が、目的の型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>検証済みの XML 要素または XML 属性の、要求された型としての値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary>検証済みの XML 要素または XML 属性が、XPath ノードと原子値のどちらであるかを示す値を取得します。</summary>
      <returns>検証済みの XML 要素または XML 属性が XPath ノードの場合は <see langword="true" />。検証済みの XML 要素または XML 属性が原子値の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary>現在の検証済みの XML 要素または XML 属性を、スキーマ型に従って最も適切な Microsoft .NET Framework 型にボックス化変換されたオブジェクトとして取得します。</summary>
      <returns>最も適切な .NET Framework 型にボックス化変換されたオブジェクトとしての、現在の検証済み XML 要素または XML 属性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary>検証済みの XML 要素または XML 属性の <see langword="string" /> 値を取得します。</summary>
      <returns>検証済みの XML 要素または XML 属性の <see langword="string" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary>検証済みの XML 要素または XML 属性の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <exception cref="T:System.FormatException">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Boolean" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Boolean" /> へのキャストは無効です。</exception>
      <returns>検証済みの XML 要素または XML 属性の <see cref="T:System.Boolean" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary>検証済みの XML 要素または XML 属性の値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <exception cref="T:System.FormatException">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.DateTime" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.DateTime" /> へのキャストは無効です。</exception>
      <returns>検証済みの XML 要素または XML 属性の <see cref="T:System.DateTime" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary>検証済みの XML 要素または XML 属性の値を <see cref="T:System.Double" /> として取得します。</summary>
      <exception cref="T:System.FormatException">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Double" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Double" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>検証済みの XML 要素または XML 属性の <see cref="T:System.Double" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary>検証済みの XML 要素または XML 属性の値を <see cref="T:System.Int32" /> として取得します。</summary>
      <exception cref="T:System.FormatException">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Int32" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Int32" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>検証済みの XML 要素または XML 属性の <see cref="T:System.Int32" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary>検証済みの XML 要素または XML 属性の値を <see cref="T:System.Int64" /> として取得します。</summary>
      <exception cref="T:System.FormatException">検証済みの XML 要素または XML 属性の値が、<see cref="T:System.Int64" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Int64" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>検証済みの XML 要素または XML 属性の <see cref="T:System.Int64" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary>検証済みの XML 要素または XML 属性の Microsoft .NET Framework 型を取得します。</summary>
      <returns>検証済みの XML 要素または XML 属性の .NET Framework 型。 既定値は <see cref="T:System.String" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary>検証済みの XML 要素または XML 属性の <see cref="T:System.Xml.Schema.XmlSchemaType" /> を取得します。</summary>
      <returns>検証済みの XML 要素または XML 属性の <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary>World Wide Web コンソーシアム (W3C) の『XML スキーマ、パート 1: 構造体』および『XML スキーマ、パート 2: データ型]』で指定されている XML スキーマのメモリ内表現です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary>XML スキーマ インスタンスの名前空間。 このフィールドは定数です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary>XML スキーマの名前空間。 このフィールドは定数です。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary>XML SOM (Schema Object Model) を検証用のスキーマ情報にコンパイルします。 プログラムによって構築された SOM の構文および意味構造をチェックするために使用します。 意味検証チェックは、コンパイル時に実行されます。</summary>
      <param name="validationEventHandler">XML スキーマ検証エラーに関する情報を受け取る検証イベント ハンドラー。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary>XML SOM (Schema Object Model) を検証用のスキーマ情報にコンパイルします。 プログラムによって構築された SOM の構文および意味構造をチェックするために使用します。 意味検証チェックは、コンパイル時に実行されます。</summary>
      <param name="validationEventHandler">XML スキーマ検証エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <param name="resolver">
        <see langword="include" /> 要素および <see langword="import" /> 要素で参照される名前空間を解決するために使用される <see langword="XmlResolver" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary>提供されたストリームから XML スキーマを読み込みます。</summary>
      <param name="stream">提供されたデータ ストリーム。</param>
      <param name="validationEventHandler">XML スキーマ構文エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> は、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていない場合に発生します。</exception>
      <returns>XML スキーマを表す <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>提供された <see cref="T:System.IO.TextReader" /> から XML スキーマを読み込みます。</summary>
      <param name="reader">読み取る XML スキーマを格納している <see langword="TextReader" />。</param>
      <param name="validationEventHandler">XML スキーマ構文エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> は、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていない場合に発生します。</exception>
      <returns>XML スキーマを表す <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary>提供された <see cref="T:System.Xml.XmlReader" /> から XML スキーマを読み込みます。</summary>
      <param name="reader">読み取る XML スキーマを格納している <see langword="XmlReader" />。</param>
      <param name="validationEventHandler">XML スキーマ構文エラーに関する情報を受け取る検証イベント ハンドラー。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> は、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていない場合に発生します。</exception>
      <returns>XML スキーマを表す <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary>提供されたデータ ストリームに XML スキーマを書き込みます。</summary>
      <param name="stream">提供されたデータ ストリーム。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary>指定された <see cref="T:System.IO.Stream" /> を使用し、指定された <see cref="T:System.Xml.XmlNamespaceManager" /> に XML スキーマを書き込みます。</summary>
      <param name="stream">提供されたデータ ストリーム。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary>提供された <see cref="T:System.IO.TextWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary>提供された <see cref="T:System.IO.TextWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary>提供された <see cref="T:System.Xml.XmlWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> パラメーターが null です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary>提供された <see cref="T:System.Xml.XmlWriter" /> に XML スキーマを書き込みます。</summary>
      <param name="writer">書き込み先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="namespaceManager">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary>スキーマのターゲット名前空間で宣言された属性の形式を取得または設定します。</summary>
      <returns>ターゲット名前空間の属性を名前空間プリフィックスで修飾する必要があるかどうかを示す <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary>スキーマ内のすべてのグローバル属性グループについて、スキーマ コンパイル後の値を取得します。</summary>
      <returns>スキーマ内のすべてのグローバル属性グループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary>スキーマ内のすべての属性について、スキーマ コンパイル後の値を取得します。</summary>
      <returns>スキーマ内のすべての属性の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary>スキーマの <see langword="blockDefault" /> の要素および複合型に対し、<see langword="block" /> 属性の既定値を設定する <see langword="targetNamespace" /> 属性を取得または設定します。</summary>
      <returns>派生を禁止する各種メソッドを表す <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値。 既定値は <see langword="XmlSchemaDerivationMethod.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary>スキーマのターゲット名前空間で宣言された要素の形式を取得または設定します。</summary>
      <returns>ターゲット名前空間からの要素を、名前空間プリフィックスで修飾する必要があるかどうかを示す <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary>スキーマ内のすべての要素について、スキーマ コンパイル後の値を取得します。</summary>
      <returns>スキーマ内のすべての要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary>スキーマのターゲット名前空間の要素および複合型に対し、<see langword="finalDefault" /> 属性の既定値を設定する <see langword="final" /> 属性を取得または設定します。</summary>
      <returns>派生を禁止する各種メソッドを表す <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値。 既定値は <see langword="XmlSchemaDerivationMethod.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary>スキーマ内のすべてのグループについて、スキーマ コンパイル後の値を取得します。</summary>
      <returns>スキーマ内のすべてのグループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary>文字列 ID を取得または設定します。</summary>
      <returns>文字列の ID。 既定値は <see langword="String.Empty" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary>インクルードされたスキーマとインポートされたスキーマのコレクションを取得します。</summary>
      <returns>インクルードされたスキーマとインポートされたスキーマの <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary>スキーマがコンパイル済みかどうかを示します。</summary>
      <returns>スキーマがコンパイル済みである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary>スキーマに含まれるスキーマ要素コレクションを取得します。新しい要素型を <see langword="schema" /> 要素レベルで追加する場合に使用します。</summary>
      <returns>スキーマに含まれるスキーマ要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary>スキーマ内のすべての注釈について、スキーマ コンパイル後の値を取得します。</summary>
      <returns>スキーマ内のすべての注釈の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> コレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary>スキーマ内のすべてのスキーマ型について、スキーマ コンパイル後の値を取得します。</summary>
      <returns>スキーマ内のすべてのスキーマ型の <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary>スキーマのターゲット名前空間の URI (Uniform Resource Identifier) を取得または設定します。</summary>
      <returns>スキーマのターゲット名前空間。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary>スキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns>スキーマのターゲット名前空間に属さない、修飾された <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary>スキーマのバージョンを取得または設定します。</summary>
      <returns>スキーマのバージョン。 既定値は <see langword="String.Empty" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary>W3C (World Wide Web Consortium) <see langword="all" /> 要素 (コンポジター) を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAll" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary>
        <see langword="XmlSchemaElement" /> コンポジター内に格納されている <see langword="all" /> 要素のコレクションを取得します。</summary>
      <returns>
        <see langword="XmlSchemaAll" /> に格納されている要素のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary>注釈要素を格納できる任意の要素の基本クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary>
        <see langword="annotation" /> プロパティを取得または設定します。</summary>
      <returns>
        <see langword="annotation" /> プロパティを表す <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary>文字列 ID を取得または設定します。</summary>
      <returns>文字列 id。既定値は <see langword="String.Empty" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary>現在のスキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns>スキーマのターゲット名前空間に属さない、修飾された <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary>W3C (World Wide Web Consortium) <see langword="annotation" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary>文字列 ID を取得または設定します。</summary>
      <returns>文字列 id。既定値は <see langword="String.Empty" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary>
        <see langword="Items" /> 子要素および <see langword="appinfo" /> 子要素を格納するために使用される <see langword="documentation" /> コレクションを取得します。</summary>
      <returns>
        <see langword="appinfo" /> 子要素および<see langword="documentation" /> 子要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary>スキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns>スキーマのターゲット名前空間に属さない <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary>W3C (World Wide Web Consortium) <see langword="any" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAny" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary>使用できる要素を格納している名前空間を取得または設定します。</summary>
      <returns>使用できる要素の名前空間。 既定値は、<see langword="##any" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary>
        <see langword="any" /> 要素によって指定された要素の XML ドキュメントの検証が、アプリケーションつまり XML プロセッサによってどのように処理されるかについての情報を、取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 値のいずれか 1 つ。 <see langword="processContents" /> 属性が指定されていない場合、既定値は <see langword="Strict" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary>W3C (World Wide Web Consortium) <see langword="anyAttribute" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary>使用できる属性を格納している名前空間を取得または設定します。</summary>
      <returns>使用できる属性の名前空間。 既定値は、<see langword="##any" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary>XML ドキュメントの、<see langword="anyAttribute" /> 要素によって指定された属性の検証をアプリケーションつまり XML プロセッサがどのように処理するかについての情報を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 値のいずれか 1 つ。 <see langword="processContents" /> 属性が指定されていない場合、既定値は <see langword="Strict" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary>W3C (World Wide Web Consortium) <see langword="appinfo" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary>
        <see langword="appinfo" /> の子ノードを表す <see cref="T:System.Xml.XmlNode" /> オブジェクトの配列を取得または設定します。</summary>
      <returns>
        <see langword="appinfo" /> の子ノードを表す <see cref="T:System.Xml.XmlNode" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary>アプリケーション情報のソースを取得または設定します。</summary>
      <returns>URI (Uniform Resource Identifier) 参照。 既定値は、<see langword="String.Empty" /> です。 省略可能。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="attribute" /> 要素を表します。 属性とは、他のドキュメント要素の追加情報を提供するものです。 属性タグは、スキーマのドキュメント要素のタグ間に入れ子にして指定します。 XML ドキュメントでは、要素の開始タグの名前付き項目として属性が表示されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary>属性の <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> または <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> に基づいて、属性の型を表す <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary>
        <see langword="AttributeType" /> プロパティのコンパイル後の値を保持する属性の <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> または <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> を基に、共通言語ランタイム (CRL: Common Language Runtime) オブジェクトを取得します。</summary>
      <returns>
        <see langword="AttributeType" /> プロパティのコンパイル後の値を保持する共通言語ランタイム (CLR) オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary>属性の既定値を取得または設定します。</summary>
      <returns>属性の既定値。 既定値は null 参照です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary>属性の固定値を取得または設定します。</summary>
      <returns>属性の固定値。 既定値は null です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary>属性の形式を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値のいずれか 1 つ。 既定値は、この属性を格納しているスキーマ要素の <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> の値です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary>属性の名前を取得または設定します。</summary>
      <returns>属性の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary>属性の修飾名を取得します。</summary>
      <returns>
        <see langword="QualifiedName" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary>このスキーマまたは指定した名前空間で示された別のスキーマで宣言された属性の名前を取得または設定します。</summary>
      <returns>宣言された属性の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary>属性型を取得、または単純型に設定します。</summary>
      <returns>このスキーマで定義された単純型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary>このスキーマまたは指定した名前空間で示された別のスキーマで定義された単純型の名前を取得または設定します。</summary>
      <returns>単純型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary>属性がどのように使用されたかに関する情報を取得または設定します。</summary>
      <returns>None、Prohibited、Optional、または Required の値の 1 つ。 既定値は Optional です。 省略可能。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="attributeGroup" /> 要素を表します。 AttributesGroups は、属性宣言のセットをグループ化し、グループとして複合型定義に組み込むことができるようにします。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary>属性グループの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントを取得または設定します。</summary>
      <returns>W3C (World Wide Web Consortium) <see langword="anyAttribute" /> 要素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary>属性グループの属性のコレクションを取得します。 <see langword="XmlSchemaAttribute" /> 要素と <see langword="XmlSchemaAttributeGroupRef" /> 要素を格納します。</summary>
      <returns>属性グループの属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary>属性グループの名前を取得または設定します。</summary>
      <returns>属性グループの名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary>属性グループの修飾名を取得します。</summary>
      <returns>属性グループの修飾名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary>再定義された属性グループのプロパティを XML スキーマから取得します。</summary>
      <returns>再定義された属性グループのプロパティ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary>W3C (World Wide Web Consortium) で指定された XML スキーマの <see langword="ref" /> 属性を持つ <see langword="attributeGroup" /> 要素を表します。 AttributesGroupRef は attributeGroup の参照であり、参照される属性グループは name プロパティに格納されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary>参照される <see langword="attributeGroup" /> 要素の名前を取得または設定します。</summary>
      <returns>参照される属性グループの名前。 値は QName である必要があります。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="choice" /> 要素 (コンポジター) を表します。 <see langword="choice" /> では、子要素のうち、いずれか 1 つだけが出現できることを意味します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary>コンポジター (<see langword="choice" />) を使用して、格納されている要素のコレクションである <see langword="XmlSchemaElement" />、<see langword="XmlSchemaGroupRef" />、<see langword="XmlSchemaChoice" />、<see langword="XmlSchemaSequence" />、または <see langword="XmlSchemaAny" /> を取得します。</summary>
      <returns>
        <see langword="XmlSchemaChoice" /> 内に格納されている要素のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary>XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマおよび XDR (XML-Data Reduced) スキーマのキャッシュを格納します。 <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> クラスは廃止されています。 代わりに、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> を使用してください。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary>XDR および XML スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを設定します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary>
        <see langword="XmlSchemaCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <see langword="XmlSchemaCollection" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。 スキーマを読み込むときに、<see langword="XmlNameTable" /> が使用されます。</summary>
      <param name="nametable">使用する <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary>指定した URL で配置されたスキーマをスキーマ コレクションに追加します。</summary>
      <param name="ns">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これは <see langword="targetNamespace" /> です。</param>
      <param name="uri">読み込むスキーマを指定する URL。</param>
      <exception cref="T:System.Xml.XmlException">スキーマが、有効なスキーマではありません。</exception>
      <returns>スキーマ コレクションに追加される <see cref="T:System.Xml.Schema.XmlSchema" />。追加されるスキーマが XDR スキーマであるか、またはスキーマにコンパイル エラーがある場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されているスキーマをスキーマ コレクションに追加します。</summary>
      <param name="ns">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これは <see langword="targetNamespace" /> です。</param>
      <param name="reader">追加するスキーマを格納する <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">スキーマが、有効なスキーマではありません。</exception>
      <returns>スキーマ コレクションに追加される <see cref="T:System.Xml.Schema.XmlSchema" />。追加されるスキーマが XDR スキーマであるか、またはスキーマにコンパイル エラーがある場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されているスキーマをスキーマ コレクションに追加します。 指定した <see cref="T:System.Xml.XmlResolver" /> は、外部リソースを解決するために使用します。</summary>
      <param name="ns">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これは <see langword="targetNamespace" /> です。</param>
      <param name="reader">追加するスキーマを格納する <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="resolver">
        <see langword="include" /> 要素、<see langword="import" /> 要素、または <see langword="x-schema" /> 属性 (XDR スキーマ) で参照される名前空間を解決するために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部参照が解決されません。</param>
      <exception cref="T:System.Xml.XmlException">スキーマが、有効なスキーマではありません。</exception>
      <returns>スキーマ コレクションに追加される <see cref="T:System.Xml.Schema.XmlSchema" />。追加されるスキーマが XDR スキーマであるか、またはスキーマにコンパイル エラーがある場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> をコレクションに追加します。</summary>
      <param name="schema">コレクションに追加する <see langword="XmlSchema" />。</param>
      <returns>
        <see langword="XmlSchema" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> をコレクションに追加します。 指定した <see cref="T:System.Xml.XmlResolver" /> は、外部参照を解決するために使用します。</summary>
      <param name="schema">コレクションに追加する <see langword="XmlSchema" />。</param>
      <param name="resolver">
        <see langword="include" /> 要素および <see langword="import" /> 要素で参照される名前空間を解決するために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部参照が解決されません。</param>
      <exception cref="T:System.Xml.XmlException">スキーマが、有効なスキーマではありません。</exception>
      <returns>スキーマ コレクションに追加する <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary>指定したコレクションで定義されたすべての名前空間 (関連付けられたスキーマを含む) をこのコレクションに追加します。</summary>
      <param name="schema">このコレクションに追加する <see langword="XmlSchemaCollection" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary>指定した名前空間を持つスキーマがコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="ns">スキーマに関連付けられた名前空間 URI。 XML スキーマの場合、通常これはターゲット名前空間です。</param>
      <returns>指定した名前空間を持つスキーマがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary>指定した <see cref="T:System.Xml.Schema.XmlSchema" /> の <see langword="targetNamespace" /> がコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="schema">
        <see langword="XmlSchema" /> オブジェクト。</param>
      <returns>同じ <see langword="true" /> を持つスキーマがコレクション内に存在する場合は <see langword="targetNamespace" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>このコレクション内のすべての <see langword="XmlSchema" /> オブジェクトを、指定したインデックスから始まる指定した配列にコピーします。</summary>
      <param name="array">オブジェクトのコピー先の配列。</param>
      <param name="index">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary>スキーマのコレクションに対する "for each" スタイルの反復をサポートします。</summary>
      <returns>現在のコレクションのすべてのスキーマを反復する列挙子。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />」をご覧ください。</summary>
      <param name="array">オブジェクトのコピー先の配列。</param>
      <param name="index">
        <paramref name="array" /> 内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />」をご覧ください。</summary>
      <returns>コレクションの <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary>このコレクションで定義されている名前空間の数を取得します。</summary>
      <returns>このコレクションで定義されている名前空間の数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary>指定した名前空間 URI に関連付けられている <see cref="T:System.Xml.Schema.XmlSchema" /> を取得します。</summary>
      <param name="ns">返すスキーマに関連付けられている名前空間 URI。 通常、これはそのスキーマの <see langword="targetNamespace" /> です。</param>
      <returns>名前空間 URI に関連付けられている <see langword="XmlSchema" />。指定した名前空間に関連付けられているスキーマが読み込まれていないか、名前空間が XDR スキーマに関連付けられている場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary>新しいスキーマを読み込むときに、<see langword="XmlNameTable" /> で使用される既定の <see langword="XmlSchemaCollection" /> を取得します。</summary>
      <returns>
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />」をご覧ください。</summary>
      <returns>コレクション内の項目の数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" />」をご覧ください。</summary>
      <returns>コレクションが同期される場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" />」をご覧ください。</summary>
      <returns>
        <see cref="P:System.Collections.ICollection.SyncRoot" />コレクションへのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary>コレクションに対する単純な反復処理をサポートします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary>列挙子をコレクション内の次のスキーマに進めます。</summary>
      <returns>正常に移動した場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />」をご覧ください。</summary>
      <returns>次のノード。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />」をご覧ください。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary>コレクション内の現在の <see cref="T:System.Xml.Schema.XmlSchema" /> を取得します。</summary>
      <returns>コレクション内の現在の <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />」をご覧ください。</summary>
      <returns>現在のノード。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> クラスのスキーマ コンパイル オプションを提供します。このクラスは、継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> で UPA 違反をチェックする必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> で UPA 違反をチェックする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="complexContent" /> 要素を表します。 このクラスは、複合型の複合コンテンツ モデルを表します。 要素のみ、または混合コンテンツを含む複合型に対しての拡張または制限を格納します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary>コンテンツを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> クラスまたは <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> クラスのいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary>型が混合コンテンツ モデルを持つかどうかを判断する情報を取得または設定します。</summary>
      <returns>このプロパティが <see langword="true" /> の場合は、文字データを複合型 (混合コンテンツ モデル) の子要素間に表示できます。 既定値は、<see langword="false" /> です。 省略可能。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="extension" /> 要素を表します。 このクラスは、拡張によって派生した複合コンテンツ モデルを持つ複合型に使用されます。 属性または要素を追加して、複合型を拡張します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary>複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントを取得または設定します。</summary>
      <returns>複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネント。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary>複合コンテンツの属性のコレクションを取得します。 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 要素と <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 要素を格納します。</summary>
      <returns>複合コンテンツの属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary>拡張によるこの型の派生元の複合型の名前を取得または設定します。</summary>
      <returns>拡張によるこの型の派生元の複合型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="restriction" /> 要素を表します。 このクラスは、制限によって派生した複合コンテンツ モデルを持つ複合型に使用されます。 複合型のコンテンツを、継承される複合型のサブセットに制限します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary>複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントを取得または設定します。</summary>
      <returns>複合コンテンツ モデルの <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネント。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary>複合型の属性のコレクションを取得します。 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 要素と <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 要素を格納します。</summary>
      <returns>複合型の属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary>制限によるこの型の派生元の複合型の名前を取得または設定します。</summary>
      <returns>制限によるこの型の派生元の複合型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="complexType" /> 要素を表します。 このクラスは、要素の属性およびコンテンツのセットを決定する複合型を定義します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary>複合型の <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネントの値を取得または設定します。</summary>
      <returns>複合型の <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> コンポーネント。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary>複合型の属性のコレクションを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> クラスおよび <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> クラスを格納します。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary>この複合型およびその基本型について、コンパイル済みのすべての属性のコレクションを取得します。</summary>
      <returns>この複合型およびその基本型のすべての属性のコレクション。 <see langword="AttributeUses" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary>この複合型およびその基本型について、<see langword="anyAttribute" /> のコンパイル後の値を取得します。</summary>
      <returns>
        <see langword="anyAttribute" /> 要素のコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary>
        <see langword="block" /> 属性を取得または設定します。</summary>
      <returns>
        <see langword="block" /> 属性は、複合型が、指定した派生型で使用されないようにします。 既定値は、<see langword="XmlSchemaDerivationMethod.None" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary>型がスキーマ検証後の情報セット (infoset) にコンパイルされた後の値を取得します。 この値は、インスタンス ドキュメントで <see langword="xsi:type" /> が使用される場合に、型がどのように適用されるかを示します。</summary>
      <returns>スキーマ検証後の infoset 値。 既定値は <see langword="BlockDefault" /> 要素の <see langword="schema" /> 値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary>この複合型について、コンパイル後の <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> クラスまたは <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> クラスであるコンテンツ モデル型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary>コンパイル後の値を保持する複合型のコンテンツ モデルを取得します。</summary>
      <returns>複合型のコンテンツ モデルのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary>
        <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> パーティクルのコンパイル後の値を保持するパーティクルを取得します。</summary>
      <returns>コンテンツ型のパーティクル。 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> パーティクルのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary>
        <see langword="complexType" /> 要素をインスタンス ドキュメントで使用できるかどうかを決定する情報を取得または設定します。</summary>
      <returns>
        <see langword="true" /> の場合、要素は、この <see langword="complexType" /> 要素を直接使用できず、この <see langword="complexType" /> 要素から派生する複合型を使用する必要があります。 既定値は、<see langword="false" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary>複合型が混合コンテンツ モデル (コンテンツ内のマークアップ) を持つかどうかを決定する情報を取得または設定します。</summary>
      <returns>この複合型の子要素間に文字データを表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスの 1 つとして、コンポジター型を取得または設定します。</summary>
      <returns>コンポジター型。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary>スキーマ コンテンツの抽象クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary>型の子要素の順序と構造を指定します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary>型のコンテンツを取得または設定します。</summary>
      <returns>型のコンテンツを提供します。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary>
        <see langword="any" /> 要素および <see langword="anyAttribute" /> 要素の置換の検証モードに関する情報を提供します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary>関連付けられたスキーマが見つかった場合、ドキュメントの項目が検証されます。 それ以外の場合、エラーはスローされません。
        
項目が検証されていない場合、XML プロセッサは、<see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> が設定された検証イベント ハンドラーを介してクライアントへの通知を試みます。 検証イベント ハンドラーが設定されていない場合、警告が生成されても情報は返されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary>ドキュメントの項目は検証されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary>ドキュメントの項目は、整形式の XML で構成される必要があり、スキーマで検証されません。
        
XML プロセッサは、<see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> が設定された検証イベント ハンドラーを介して、指定の項目の検証が行われなかったことをクライアントに通知するよう試みます。 検証イベント ハンドラーが設定されていない場合、警告が生成されても情報は返されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary>スキーマ プロセッサは、ドキュメントの項目を検証するために、指定された名前空間に関連付けられたスキーマを検索する必要があります。
        
プロセッサがスキーマを見つけることができない場合や項目が無効の場合、XML プロセッサは、<see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> が設定された検証イベント ハンドラーを介してクライアントへの通知を試みます。 検証エラーが発生し、検証イベント ハンドラーが提供されていない場合は、例外がスローされます。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary>複合型のコンテンツ モデルの列挙体。 これは、スキーマ検証後の情報セット (infoset) のコンテンツを表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary>要素だけのコンテンツ。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary>空のコンテンツ。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary>混合コンテンツ。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary>テキストだけのコンテンツ。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> クラスは、XML スキーマ定義言語 (XSD: XML Schema Definition Language) 型を共通言語ランタイム (CLR: Common Language Runtime) 型に割り当てるための抽象クラスです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary>型が <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> で表された XML スキーマ型の有効な共通言語ランタイム (CLR) 表現の 1 つである指定された値を、指定された CLR 型に変換します。</summary>
      <param name="value">指定された型に変換する入力値。</param>
      <param name="targetType">入力値変換後の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> パラメーターまたは <see cref="T:System.Type" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> で表された型では、指定された値の型から指定された型への変換がサポートされません。</exception>
      <returns>変換された入力値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> が xs:QName 型を表すか、またはそれから派生した型を表す場合に、型が <see cref="T:System.Xml.IXmlNamespaceResolver" /> で表された XML スキーマ型の有効な共通言語ランタイム (CLR) 表現の 1 つである指定された値を、<see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> を使用して指定された CLR 型に変換します。</summary>
      <param name="value">指定された型に変換する入力値。</param>
      <param name="targetType">入力値変換後の型。</param>
      <param name="namespaceResolver">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" />。 これは、<see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> が xs:QName 型またはそれから派生した型を表す場合にのみ使用します。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Object" /> パラメーターまたは <see cref="T:System.Type" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidCastException">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> で表された型では、指定された値の型から指定された型への変換がサポートされません。</exception>
      <returns>変換された入力値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary>
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> メソッドは常に <see langword="false" /> を返します。</summary>
      <param name="datatype">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <returns>常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary>派生クラスでオーバーライドされると、組み込みの単純型またはユーザー定義の単純型に対して指定された <see langword="string" /> を検証します。</summary>
      <param name="s">単純型に対して検証する <see langword="string" />。</param>
      <param name="nameTable">この <see cref="T:System.Xml.XmlNameTable" /> オブジェクトが xs:NCName 型を表す場合に、<see langword="string" /> の解析時に最小単位に分割するために使用する <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <param name="nsmgr">この <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトが xs:QName 型を表す場合に、<see langword="string" /> の解析時に使用する <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">入力値は、この W3C XML スキーマ型の有効なインスタンスではありません。</exception>
      <exception cref="T:System.ArgumentNullException">解析する値を <see langword="null" /> にすることはできません。</exception>
      <returns>
        <see cref="T:System.Object" /> プロパティで返される型に安全にキャストできる <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary>派生クラスでオーバーライドされると、W3C (World Wide Web Consortium) XML 1.0 仕様で指定された <see langword="string" /> の型を取得します。</summary>
      <returns>
        <see langword="string" /> の <see cref="T:System.Xml.XmlTokenizedType" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary>単純型の <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値を取得します。</summary>
      <returns>単純型の <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary>派生クラスでオーバーライドされた場合、項目の共通言語ランタイム (CLR) 型を取得します。</summary>
      <returns>項目の共通言語ランタイム (CLR) 型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary>単純型の <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 値を取得します。</summary>
      <returns>単純型の <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary>W3C XML スキーマ データ型の種類の型を指定します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary>W3C XML スキーマの原子型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary>W3C XML スキーマのリスト型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary>W3C XML スキーマの共用体型。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary>派生しないようにする別のメソッドを提供します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary>
        <see langword="#all" />. すべての派生メソッドを参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary>任意の派生を許可するには、既定の派生メソッドをオーバーライドします。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary>
        <see langword="Extension" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary>
        <see langword="List" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary>既定の派生メソッドを承認します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary>
        <see langword="Restriction" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary>
        <see langword="Substitution" /> で派生を参照します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary>
        <see langword="Union" /> で派生を参照します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="documentation" /> 要素を表します。 このクラスは、<see langword="annotation" /> 内でユーザーが読み取る情報またはユーザーが使用する情報を指定します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary>
        <see langword="xml:lang" /> 属性を取得または設定します。 この属性は、コンテンツで使用される言語のインジケーターとして機能します。</summary>
      <returns>
        <see langword="xml:lang" /> 属性。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary>ドキュメントの子ノードを表す <see langword="XmlNodes" /> の配列を取得または設定します。</summary>
      <returns>ドキュメントの子ノードを表す配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary>情報の URI (Uniform Resource Identifier) ソースを取得または設定します。</summary>
      <returns>URI 参照。 既定値は、<see langword="String.Empty" /> です。 省略可能。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="element" /> 要素を表します。 このクラスはすべてのパーティクル型の基本クラスであり、XML ドキュメント内の要素を記述するために使用されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary>
        <see langword="Block" /> 派生を取得または設定します。</summary>
      <returns>型派生をブロックするために使用される属性。 既定値は <see langword="XmlSchemaDerivationMethod.None" />にする必要があります。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary>
        <see langword="Block" /> プロパティのコンパイル後の値を取得します。</summary>
      <returns>
        <see langword="Block" /> プロパティのコンパイル後の値。 既定値は <see langword="BlockDefault" /> 要素の <see langword="schema" /> 値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary>要素に関する制約のコレクションを取得します。</summary>
      <returns>制約のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary>要素の内容が単純型または <see langword="textOnly" /> である場合は、その要素の既定値を取得または設定します。</summary>
      <returns>この要素の既定値。 既定値は null 参照です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary>要素の <see cref="T:System.Xml.Schema.XmlSchemaType" /> または <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> の値に基づいて、要素の型を表す <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary>
        <see langword="ElementType" /> プロパティのコンパイル後の値を保持する要素の <see cref="T:System.Xml.Schema.XmlSchemaElement" /> または <see cref="T:System.Xml.Schema.XmlSchemaElement" /> に基づいた共通言語ランタイム (CLR: Common Language Runtime) オブジェクトを取得します。</summary>
      <returns>共通言語ランタイム オブジェクト。 <see langword="ElementType" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary>これ以上派生が許可されないことを示す <see langword="Final" /> プロパティを取得または設定します。</summary>
      <returns>
        <see langword="Final" /> プロパティ。 既定値は、<see langword="XmlSchemaDerivationMethod.None" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary>
        <see langword="Final" /> プロパティのコンパイル後の値を取得します。</summary>
      <returns>
        <see langword="Final" /> プロパティのコンパイル後の値。 既定値は <see langword="FinalDefault" /> 要素の <see langword="schema" /> 値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary>固定値を取得または設定します。</summary>
      <returns>事前に決定されており、変更できない固定値。 既定値は null 参照です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary>要素の形式を取得または設定します。</summary>
      <returns>要素の形式。 既定値は、<see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary>要素をインスタンス ドキュメントで使用できるかどうかを示す情報を取得または設定します。</summary>
      <returns>
        <see langword="true" /> の場合は、要素をインスタンス ドキュメントに表示できません。 既定値は、<see langword="false" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary>
        <see langword="xsi:nil" /> がインスタンス データに発生するかどうかを示す情報を取得または設定します。 明示的な nil 値を要素に割り当てることができるかどうかを示します。</summary>
      <returns>nillable が <see langword="true" /> の場合、これを使用すると、要素のインスタンスは <see langword="nil" /> 属性を <see langword="true" /> に設定できます。 <see langword="nil" /> 属性は、インスタンスの XML スキーマ名前空間の一部として定義されます。 既定値は、<see langword="false" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary>要素の名前を取得または設定します。</summary>
      <returns>要素の名前です。 既定値は、<see langword="String.Empty" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary>指定した要素の実際の限定名を取得します。</summary>
      <returns>要素の限定名。 <see langword="QualifiedName" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary>このスキーマ (または指定した名前空間によって示された別のスキーマ) で宣言された要素の参照名を取得または設定します。</summary>
      <returns>要素の参照名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary>要素の型を取得または設定します。 これは、複合型または単純型に設定できます。</summary>
      <returns>要素の型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary>このスキーマまたは指定した名前空間で示された別のスキーマで定義された組み込みデータ型の名前を取得または設定します。</summary>
      <returns>組み込みデータ型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary>この要素に置き換えられる要素の名前を取得または設定します。</summary>
      <returns>この要素に置き換えられる要素の限定名。 省略可能。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="enumeration" /> ファセットを表します。 このクラスは、simpleType 要素の有効な値のリストを指定します。 宣言は、<see langword="restriction" /> 宣言の中に含まれます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary>スキーマ例外に関する詳細情報を返します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see langword="XmlSchemaException" /> のすべてのプロパティを含む指定した <see langword="SerializationInfo" /> 情報および <see langword="StreamingContext" /> 情報を使用して、新しい <see langword="XmlSchemaException" /> オブジェクトを構築します。</summary>
      <param name="info">SerializationInfo。</param>
      <param name="context">StreamingContext。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを、指定された例外メッセージを使用して初期化します。</summary>
      <param name="message">エラー状態の <see langword="string" /> の説明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを、例外メッセージおよびこの例外が発生する原因になった元の <see cref="T:System.Exception" /> オブジェクトを指定して初期化します。</summary>
      <param name="message">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException">この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaException" /> クラスの新しいインスタンスを、例外メッセージ、この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト、XML の行番号、および XML の行位置を指定して初期化します。</summary>
      <param name="message">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException">この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト。</param>
      <param name="lineNumber">この例外が発生する原因になった XML の行番号。</param>
      <param name="linePosition">この例外が発生する原因になった XML の行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>すべての <see langword="XmlSchemaException" /> プロパティを、指定した <see langword="SerializationInfo" /> の <see langword="StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info">
        <see langword="SerializationInfo" />。</param>
      <param name="context">
        <see langword="StreamingContext" /> 情報。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary>エラーの発生場所を示す行番号を取得します。</summary>
      <returns>エラーの発生場所を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary>エラーの発生場所を示す行の位置を取得します。</summary>
      <returns>エラーの発生場所を示す行の位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary>この例外のエラー状態の説明を取得します。</summary>
      <returns>この例外のエラー状態についての説明。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary>
        <see langword="XmlSchemaObject" /> を生成した <see langword="XmlSchemaException" />。</summary>
      <returns>XML SOM (Schema Object Model) の構造的な検証エラーを表す有効なオブジェクト インスタンス。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary>例外の発生原因となったスキーマの URI (Uniform Resource Identifier) 位置を取得します。</summary>
      <returns>例外の発生原因となったスキーマの URI 位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary>抽象クラスです。 インクルードされるスキーマに関する情報を提供します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary>文字列 ID を取得または設定します。</summary>
      <returns>文字列 id。既定値は <see langword="String.Empty" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary>参照されるスキーマの <see langword="XmlSchema" /> を取得または設定します。</summary>
      <returns>参照されるスキーマの <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary>スキーマの URI (Uniform Resource Identifier) 位置を取得または設定します。これにより、スキーマが物理的に存在する場所がスキーマ プロセッサに通知されます。</summary>
      <returns>スキーマの URI 位置。 インポートされるスキーマに対しては、省略できます。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary>スキーマのターゲット名前空間に属さない、修飾された属性を取得または設定します。</summary>
      <returns>別のターゲット名前空間に属している限定された属性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary>制限により単純型が派生するときに使用されるすべてのファセットの抽象クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary>ファセットが固定されていることを示す情報を取得または設定します。</summary>
      <returns>値が固定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary>ファセットの <see langword="value" /> 属性を取得または設定します。</summary>
      <returns>属性値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary>属性または要素を名前空間プレフィックスで修飾する必要があるかどうかを示します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary>スキーマには、要素および属性の形式が指定されません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary>要素および属性は、名前空間プレフィックスで修飾する必要があります。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary>要素および属性は、名前空間プレフィックスで修飾する必要はありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary>simpleType 要素の端数値として入力できる桁数の制限を指定します。 fractionDigits の値は正の整数である必要があります。 W3C (World Wide Web Consortium) <see langword="fractionDigits" /> ファセットを表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="group" /> 要素を表します。 このクラスは、複合型から参照される <see langword="schema" /> レベルのグループを定義します。 要素宣言セットをグループ化し、グループとして複合型定義に組み込むことができるようにします。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary>スキーマ グループの名前を取得または設定します。</summary>
      <returns>スキーマ グループの名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の各クラスのいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary>スキーマ グループの修飾名を取得します。</summary>
      <returns>スキーマ グループの修飾名を表す <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAll" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> の抽象クラス。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary>このコレクションは、コンポジターに新しい要素を追加するために使用されます。</summary>
      <returns>
        <see langword="XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary>W3C (World Wide Web Consortium) で指定された XML スキーマの、<see langword="ref" /> 属性を持つ <see langword="group" /> 要素を表します。 このクラスは、<see langword="group" /> レベルで定義された <see langword="schema" /> を参照する複合型で使用されます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> クラス、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> クラス、または <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> クラスのうち、<see langword="Particle" /> プロパティのコンパイル後の値を保持するクラスを 1 つ取得します。</summary>
      <returns>
        <see langword="Particle" /> プロパティのコンパイル後の値。<see cref="T:System.Xml.Schema.XmlSchemaChoice" /> クラス、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> クラス、<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> クラスのいずれかのクラスになります。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary>このスキーマ (または指定した名前空間で示された別のスキーマ) で定義されたグループの名前を取得または設定します。</summary>
      <returns>このスキーマで定義されたグループの名前。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary>ID 制約である <see langword="key" />、<see langword="keyref" />、<see langword="unique" /> の各要素のクラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary>XML Path Language (XPath) 式セレクターの子として適用されるフィールドのコレクションを取得します。</summary>
      <returns>フィールドのコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary>ID 制約の名前を取得または設定します。</summary>
      <returns>ID 制約の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary>
        <see langword="QualifiedName" /> プロパティのコンパイル後の値を保持する ID 制約の限定名を取得します。</summary>
      <returns>
        <see langword="QualifiedName" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary>XPath 式 <see langword="selector" /> 要素を取得または設定します。</summary>
      <returns>XPath 式 <see langword="selector" /> 要素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="import" /> 要素を表します。 このクラスは、スキーマ コンポーネントを他のスキーマからインポートする場合に使用します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaImport" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary>
        <see langword="annotation" /> プロパティを取得または設定します。</summary>
      <returns>注釈。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary>インポートされたスキーマのターゲット名前空間を URI (Uniform Resource Identifier) 参照として取得または設定します。</summary>
      <returns>インポートされたスキーマの URI 参照のターゲット名前空間。 省略可能。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="include" /> 要素を表します。 このクラスは、外部スキーマから宣言や定義をインクルードする場合に使用します。 インクルードされる宣言および定義は、それを格納するスキーマで処理できるようになります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary>
        <see langword="annotation" /> プロパティを取得または設定します。</summary>
      <returns>注釈。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary>XML ドキュメントから XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマを推論します。 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスは継承できません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトに格納されている XML ドキュメントから XML スキーマ定義言語 (XSD) スキーマを推論します。</summary>
      <param name="instanceDocument">スキーマの推論元となる XML ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException">XML ドキュメントは、整形式ではありません。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトは、ルート ノードまたは要素に配置されていません。 スキーマ推論の処理中にエラーが発生しました。</exception>
      <returns>推論されるスキーマが格納される <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトに格納されている XML ドキュメントから XML スキーマ定義言語 (XSD) スキーマを推論し、同じターゲット名前空間で指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト内の既存のスキーマを使用して、推論されたスキーマを詳細に指定します。</summary>
      <param name="instanceDocument">スキーマの推論元となる XML ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <param name="schemas">推論されたスキーマを詳細に指定するために使用する既存のスキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException">XML ドキュメントは、整形式ではありません。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトは、ルート ノードまたは要素に配置されていません。 スキーマ推論の処理中にエラーが発生しました。</exception>
      <returns>推論されるスキーマが格納される <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary>XML ドキュメントから推論されるスキーマ出現宣言に影響する <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary>XML ドキュメントから推論される型に影響を与える <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary>XML ドキュメントの要素と属性に対して <see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスで推論される出現情報と型情報に影響します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary>特定の要素または属性に対して、より制限の少ないスキーマ宣言を推論する必要があることを示します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary>特定の要素または属性に対して、より制限の多いスキーマ宣言を推論する必要があることを示します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary>XML ドキュメントからスキーマを推測しているときに、<see cref="T:System.Xml.Schema.XmlSchemaInference" /> クラスで検出されたエラーに関する情報を返します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、<see cref="T:System.Runtime.Serialization.SerializationInfo" /> のすべてのプロパティが格納されている、指定された <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトと <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクトを使用して初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、指定されたエラー メッセージを使用して初期化します。</summary>
      <param name="message">エラーの説明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、指定されたエラー メッセージおよび指定された <see cref="T:System.Exception" /> が発生する原因になった <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> を使用して初期化します。</summary>
      <param name="message">エラーの説明。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> が発生する原因になった例外が含まれている <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> クラスの新しいインスタンスを、指定されたエラー メッセージ、指定された <see cref="T:System.Exception" /> が発生する原因になった元の <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />、および指定された XML ドキュメント内のエラーの行番号と行位置を使用して初期化します。</summary>
      <param name="message">エラーの説明。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> が発生する原因になった例外が含まれている <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクト。</param>
      <param name="lineNumber">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> が発生する原因になった XML ドキュメント内の行番号。</param>
      <param name="linePosition">
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> が発生する原因になった XML ドキュメント内の行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> オブジェクトのすべてのプロパティを、指定された <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトの指定された <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトにストリーム転送します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary>検証済み XML ノードのスキーマ検証後の infoset を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary>この検証済み XML ノードの内容の種類に対応する <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary>この検証済みの XML ノードが、XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマの検証の実行中に既定値を適用して設定されたかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="bool" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary>この検証済み XML ノードの値が nil かどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="bool" /> 値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary>この検証済み XML ノードの動的なスキーマ型を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary>この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary>この検証済み XML ノードに対応するコンパイルされた <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary>この検証済み XML ノードの静的な XML スキーマ定義言語 (XSD) スキーマ型を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary>この検証済み XML ノードの <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary>このクラスは、W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="key" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaKey" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary>このクラスは、W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="keyref" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary>この制約が別の単純型または複合型で参照するキーの名前を取得または設定します。</summary>
      <returns>この制約が参照するキーの QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="length" /> ファセットを表します。 このクラスを使用すると、<see langword="simpleType" /> 要素のデータ型に対して、長さの制限を設定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="maxExclusive" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の最大値に制限を設定できます。 要素の値は <see langword="maxExclusive" /> の値未満であることが必要です。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="maxInclusive" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の最大値に制限を設定できます。 要素の値は <see langword="maxInclusive" /> 要素の値以下である必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="maxLength" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素のデータ値の最大長に制限を設定できます。 データ値の長さは、<see langword="maxLength" /> 要素の値未満であることが必要です。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="minExclusive" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の最小値に制限を設定できます。 要素の値は <see langword="minExclusive" /> 要素の値より大きくなければなりません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="minInclusive" /> 要素を表します。 このクラスを使用すると、simpleType 要素の最小値に制限を設定できます。 要素の値は <see langword="minInclusive" /> 要素の値以上でなければなりません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="minLength" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素のデータ値の最小長に制限を設定できます。 データ値の長さの値は、<see langword="minLength" /> 要素の値より大きくなければなりません。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="notation" /> 要素を表します。 XML スキーマの <see langword="notation" /> 宣言は、<see langword="XML 1.0 NOTATION" /> 宣言を再構築したものです。 表記の目的は、XML ドキュメント内の XML 以外のデータの書式を記述することです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary>表記の名前を取得または設定します。</summary>
      <returns>表記法の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary>
        <see langword="public" /> 識別子を取得または設定します。</summary>
      <returns>
        <see langword="public" /> 識別子です。 値は有効な URI (Uniform Resource Identifier) である必要があります。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary>
        <see langword="system" /> 識別子を取得または設定します。</summary>
      <returns>
        <see langword="system" /> 識別子です。 値は有効な URI である必要があります。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary>
        <see langword="numeric" /> ファセットを定義するための抽象クラス。 このクラスは、<see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> など、numeric ファセット クラスの基本クラスです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary>Xml スキーマ オブジェクト モデルの階層構造におけるルート クラスを表し、<see cref="T:System.Xml.Schema.XmlSchema" /> などのクラスの基本クラスとして機能します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary>
        <see langword="schema" /> 要素が参照するファイルの行番号を取得または設定します。</summary>
      <returns>行番号。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary>
        <see langword="schema" /> 要素が参照するファイルの行番号を取得または設定します。</summary>
      <returns>行の位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary>このスキーマ オブジェクトと一緒に使用する <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> を取得または設定します。</summary>
      <returns>スキーマ オブジェクト用の <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> プロパティ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary>この <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の親を取得または設定します。</summary>
      <returns>この <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の親 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary>スキーマを読み込んだファイルのソース位置を取得または設定します。</summary>
      <returns>ファイルのソース位置 (URI)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のコレクション。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary>
        <see langword="XmlSchemaObjectCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を受け取る <see langword="XmlSchemaObjectCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を <see langword="XmlSchemaObjectCollection" /> に追加します。</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see langword="Count" /> より大きくなっています。</exception>
      <exception cref="T:System.InvalidCastException">指定された <see cref="T:System.Xml.Schema.XmlSchemaObject" /> パラメーターの型が <see cref="T:System.Xml.Schema.XmlSchemaExternal" />、またはその派生型 (<see cref="T:System.Xml.Schema.XmlSchemaImport" />、<see cref="T:System.Xml.Schema.XmlSchemaInclude" />、および <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />) ではありません。</exception>
      <returns>項目が追加されたインデックス位置。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary>指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> が <see langword="XmlSchemaObjectCollection" /> に存在するかどうかを示します。</summary>
      <param name="item">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns>指定した修飾名がコレクションにある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 null が提供されると、null 名を持つ限定名がないため、<see langword="false" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary>コレクション内のすべての <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を、指定したインデックスから始まる指定した配列にコピーします。</summary>
      <param name="array">
        <see langword="XmlSchemaObjectCollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index">配列内のコピーを開始する位置を示す、0 から始まるインデックスです。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null 参照 (Visual Basic の場合は <see langword="Nothing" />) です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="index" /> が <paramref name="array" /> の長さ以上です。  
  
- または - 
コピー元の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の要素数が、インデックスからコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.InvalidCastException">コピー元の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> の型をコピー先の配列の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary>
        <see langword="XmlSchemaObjects" /> に格納されている <see langword="XmlSchemaObjectCollection" /> の反復処理する列挙子を返します。</summary>
      <returns>この反復子は、<see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary>指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> に対応するコレクション インデックスを取得します。</summary>
      <param name="item">返すインデックスの対象の <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns>指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> に対応するインデックス。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を <see langword="XmlSchemaObjectCollection" /> に挿入します。</summary>
      <param name="index">項目を挿入する位置の、0 から始まるインデックス番号。</param>
      <param name="item">挿入する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see langword="Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary>標準の <see langword="OnClear" /> 動作の前に、<see langword="Clear" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の OnClear メソッドのトピックを参照してください。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary>標準の <see langword="OnInsert" /> 動作の前に、<see langword="Insert" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の <see langword="OnInsert" /> メソッドのトピックを参照してください。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <param name="item">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary>標準の <see langword="OnRemove" /> 動作の前に、<see langword="Remove" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の <see langword="OnRemove" /> メソッドのトピックを参照してください。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <param name="item">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>標準の <see langword="OnSet" /> 動作の前に、<see langword="Set" /> が呼び出されます。 詳細については、<see cref="T:System.Collections.CollectionBase" /> の OnSet メソッドのトピックを参照してください。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <param name="oldValue">古い値。</param>
      <param name="newValue">新しい値。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary>
        <see langword="XmlSchemaObjectCollection" /> から <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を削除します。</summary>
      <param name="item">削除する <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary>指定されたインデックス位置にある <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を取得します。</summary>
      <param name="index">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> のインデックス。</param>
      <returns>指定したインデックスにある <see cref="T:System.Xml.Schema.XmlSchemaObject" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> の列挙子を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary>コレクションの次の項目に移動します。</summary>
      <returns>コレクションの末尾の <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary>列挙子をコレクションの先頭にリセットします。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />」をご覧ください。</summary>
      <returns>次の <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />」をご覧ください。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary>コレクション内の現在の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> を取得します。</summary>
      <returns>現在の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />」をご覧ください。</summary>
      <returns>現在の <see cref="T:System.Xml.Schema.XmlSchemaObject" /> です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> クラスに格納される要素のコレクションを提供します (Attributes、AttributeGroups、Elements など)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary>指定した修飾名がコレクション内にあるかどうかを調べます。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>指定した修飾名がコレクションに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を反復処理できる列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> を反復処理できる <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> に格納されている項目の数を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> に格納されている項目の数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary>修飾名で指定した <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内の要素を返します。</summary>
      <param name="name">返される要素の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>修飾名で指定した <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 内の要素の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての名前付き要素のコレクションを返します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての名前付き要素のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての要素値のコレクションを返します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 内のすべての要素値のコレクション。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary>すべてのパーティクル型 (<see cref="T:System.Xml.Schema.XmlSchemaAny" /> など) の基底クラスとなる抽象クラスです。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary>パーティクルが発生する最大回数を取得または設定します。</summary>
      <returns>パーティクルが発生する最大回数。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary>数字を文字列値として取得または設定します。 パーティクルが発生する最大回数。</summary>
      <returns>文字列値としての数値。 <see langword="String.Empty" /> は <see langword="MaxOccurs" /> が既定値に等しいことを示します。 既定値は null 参照です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary>パーティクルが発生する最小回数を取得または設定します。</summary>
      <returns>パーティクルが発生する最小回数。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary>数字を文字列値として取得または設定します。 パーティクルが発生する最小回数。</summary>
      <returns>文字列値としての数値。 <see langword="String.Empty" /> は <see langword="MinOccurs" /> が既定値に等しいことを示します。 既定値は null 参照です。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="pattern" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素に対して入力できる値に制限を設定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="redefine" /> 要素を表します。 このクラスは、外部スキーマ ファイルの単純型と複合型、グループ、および属性グループを現在のスキーマで再定義できるようにする場合に使用します。 また、このクラスを使用して、スキーマ要素のバージョン管理を実行することもできます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary>
        <see langword="AttributeGroups" /> プロパティのコンパイル後の値を保持する、スキーマのすべての属性の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を取得します。</summary>
      <returns>スキーマ内のすべての属性の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="AttributeGroups" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary>
        <see langword="Groups" /> プロパティのコンパイル後の値を保持するスキーマのすべてのグループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を取得します。</summary>
      <returns>スキーマ内のすべてのグループの <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="Groups" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />、<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />、<see cref="T:System.Xml.Schema.XmlSchemaGroup" /> の各クラスのコレクションを取得します。</summary>
      <returns>再定義要素内に格納される要素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary>
        <see langword="SchemaTypes" /> プロパティのコンパイル後の値を保持する、スキーマのすべての単純型および複合型の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> を取得します。</summary>
      <returns>スキーマ内のすべてのスキーマ型の <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="SchemaTypes" /> プロパティのコンパイル後の値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="sequence" /> 要素 (コンポジター) を表します。 <see langword="sequence" /> では、グループ内の要素が、指定した順番で出現する必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary>コンポジター内に格納される要素。 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaSequence" />、または <see cref="T:System.Xml.Schema.XmlSchemaAny" /> のコレクション。</summary>
      <returns>コンポジター内に格納される要素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary>XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマのキャッシュを格納します。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary>XML スキーマ定義言語 (XSD) スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを指定します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameTable">使用する <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡される <see cref="T:System.Xml.XmlNameTable" /> オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary>指定された URL の XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="targetNamespace">スキーマの <paramref name="targetNamespace" /> プロパティ。またはスキーマの指定された <paramref name="targetNamespace" /> を使用する場合は <see langword="null" />。</param>
      <param name="schemaUri">読み込むスキーマを指定する URL。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡された URL が <see langword="null" /> または <see cref="F:System.String.Empty" /> です。</exception>
      <returns>スキーマが有効な場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されている XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="targetNamespace">スキーマの <paramref name="targetNamespace" /> プロパティ。またはスキーマの指定された <paramref name="targetNamespace" /> を使用する場合は <see langword="null" />。</param>
      <param name="schemaDocument">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡される <see cref="T:System.Xml.XmlReader" /> オブジェクトは <see langword="null" /> です。</exception>
      <returns>スキーマが有効な場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchema" /> を <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加する <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡される <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは <see langword="null" /> です。</exception>
      <returns>スキーマが有効な場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary>指定された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加します。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> のスキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡される <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトは <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に追加された XML スキーマ定義言語 (XSD) スキーマを 1 つの論理スキーマにコンパイルします。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のスキーマを検証およびコンパイルしているときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary>指定されたターゲット名前空間 URI を持つ XML スキーマ定義言語 (XSD) スキーマが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に存在するかどうかを示します。</summary>
      <param name="targetNamespace">スキーマの <paramref name="targetNamespace" /> プロパティ。</param>
      <returns>指定されたターゲット名前空間 URI を持つスキーマが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary>指定された XML スキーマ定義言語 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に存在するかどうかを示します。</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトが <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 内のすべての <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトを、指定したインデックスから始まる指定した配列にコピーします。</summary>
      <param name="schemas">オブジェクトのコピー先の配列。</param>
      <param name="index">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary>指定された XML スキーマ定義言語 (XSD) スキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> から削除します。</summary>
      <param name="schema">
        <see cref="T:System.Xml.Schema.XmlSchema" /> から削除する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが、有効なスキーマではありません。</exception>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> から削除された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。または、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内にスキーマが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary>指定された XML スキーマ定義言語 (XSD) スキーマとそれがインポートしたすべてのスキーマを <see cref="T:System.Xml.Schema.XmlSchemaSet" /> から削除します。</summary>
      <param name="schemaToRemove">
        <see cref="T:System.Xml.Schema.XmlSchema" /> から削除する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトが <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトとそれがインポートしたすべてのスキーマが正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内に既に存在している XML スキーマ定義言語 (XSD) スキーマを再処理します。</summary>
      <param name="schema">再処理するスキーマ。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">スキーマが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">パラメーターとして渡される <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">パラメーターとして渡された <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクトは、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> に存在していません。</exception>
      <returns>スキーマが有効なスキーマの場合は <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。 スキーマが無効で <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されている場合は、<see langword="null" /> が返され、該当する検証イベントが発生します。 それ以外の場合は、<see cref="T:System.Xml.Schema.XmlSchemaException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマのコレクションを返します。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> に追加されたすべてのスキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> にスキーマが追加されていない場合は、空の <see cref="T:System.Collections.ICollection" /> オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary>指定された名前空間に属している <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマのコレクションを返します。</summary>
      <param name="targetNamespace">スキーマの <paramref name="targetNamespace" /> プロパティ。</param>
      <returns>指定された名前空間に属する <see cref="T:System.Collections.ICollection" /> に追加されたすべてのスキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> にスキーマが追加されていない場合は、空の <see cref="T:System.Collections.ICollection" /> オブジェクトが返されます。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> の <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定では、<see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> プロパティが <see langword="true" /> に設定された <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> のインスタンス。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内の論理的な XML スキーマ定義言語 (XSD) スキーマの数を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内の論理スキーマの数。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマ内にあるすべてのグローバル属性を取得します。</summary>
      <returns>グローバル属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマ内にあるすべてのグローバル要素を取得します。</summary>
      <returns>グローバル要素のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のすべての XML スキーマ定義言語 (XSD) スキーマ内にあるすべてのグローバル単純型とグローバル複合型を取得します。</summary>
      <returns>グローバル単純型とグローバル複合型のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内の XML スキーマ定義言語 (XSD) スキーマがコンパイル済みかどうかを示す値を取得します。</summary>
      <returns>前回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に対してスキーマの追加または削除を行った後で、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> 内のスキーマをコンパイルしたことがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary>新しい XML スキーマ定義言語 (XSD) スキーマを読み込むときに <see cref="T:System.Xml.XmlNameTable" /> で使用する既定の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得します。</summary>
      <returns>最小単位に分割された文字列オブジェクトのテーブル。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary>スキーマのインクルード要素およびインポート要素で参照される名前空間または場所を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns>スキーマのインクルード要素およびインポート要素で参照される名前空間または場所を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="simpleContent" /> 要素を表します。 このクラスは、単純なコンテンツ モデルを持つ単純型および複合型に使用します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> または <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> の 1 つを取得します。</summary>
      <returns>
        <see langword="XmlSchemaSimpleContentRestriction" /> クラスまたは <see langword="XmlSchemaSimpleContentExtension" /> クラスに格納される内容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの単純コンテンツに対する <see langword="extension" /> 要素を表します。 このクラスを使用すると、拡張することによって単純型を派生できます。 この派生方法は、属性を追加することによって単純型の要素の内容を拡張する場合に使用します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary>属性値で使用する <see langword="XmlSchemaAnyAttribute" /> を取得または設定します。</summary>
      <returns>
        <see langword="XmlSchemaAnyAttribute" />。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> および <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> のコレクションを取得します。</summary>
      <returns>
        <see langword="simpleType" /> 要素の属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary>この型の拡張元の組み込みデータ型または単純型の名前を取得または設定します。</summary>
      <returns>基本型名。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの単純コンテンツに対する <see langword="restriction" /> 要素を表します。 このクラスを使用すると、制限を指定した単純型を派生できます。 この方法で単純型を派生させることにより、要素に対する値の範囲を、継承元の単純型で指定されている値のサブセットに制限できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary>属性値で使用する <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> を取得または設定します。</summary>
      <returns>属性値の <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。 省略可能。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary>単純型の属性の <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> および <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> コレクションを取得します。</summary>
      <returns>単純型の属性のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary>単純型の基本値を取得または設定します。</summary>
      <returns>単純型の基本値。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary>この型の派生元の組み込みデータ型または単純型の名前を取得または設定します。</summary>
      <returns>基本型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary>XML スキーマのファセットを取得または設定します。</summary>
      <returns>次のファセット クラスの 1 つ。 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの単純コンテンツに対する <see langword="simpleType" /> 要素を表します。 このクラスは単純型を定義します。 単純型では、テキストだけの内容を持つ属性または要素の値に関する情報や制約を指定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />、または <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> のいずれか 1 つを取得または設定します。</summary>
      <returns>
        <see langword="XmlSchemaSimpleTypeUnion" />、<see langword="XmlSchemaSimpleTypeList" />、または <see langword="XmlSchemaSimpleTypeRestriction" /> のいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary>単純型のコンテンツ クラスの抽象クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="list" /> 要素を表します。 このクラスを使用すると、<see langword="simpleType" /> 要素を、指定したデータ型の値のリストとして定義できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary>
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> を、単純型の <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 値および <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" /> 値に基づいて取得または設定します。</summary>
      <returns>
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary>基本値で指定した型から派生する <see langword="simpleType" /> 要素を取得または設定します。</summary>
      <returns>単純型要素の項目の型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary>このスキーマまたは指定した名前空間で示された別のスキーマで定義された組み込みデータ型または <see langword="simpleType" /> 要素の名前を取得または設定します。</summary>
      <returns>単純型リストの型名。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの単純型に対する <see langword="restriction" /> 要素を表します。 このクラスを使用して、<see langword="simpleType" /> 要素を制限できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary>基本型に関する情報を取得または設定します。</summary>
      <returns>
        <see langword="simpleType" /> 要素の基本型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary>限定基本型の名前を取得または設定します。</summary>
      <returns>単純型の制限基本型の限定名。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary>XML スキーマのファセットを取得または設定します。</summary>
      <returns>次のファセット クラスの 1 つ。 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの単純型に対する <see langword="union" /> 要素を表します。 <see langword="union" /> データ型を使用すると、<see langword="simpleType" /> の内容を設定できます。 <see langword="simpleType" /> 要素の値は、この共用体で指定されている複数のデータ型のうちの、いずれか 1 つであることが必要です。 共用体型は常に派生型であり、許容するデータ型が複数指定されている必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary>
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクトの配列を、単純型の <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 値および <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 値に基づいて取得します。</summary>
      <returns>
        <see langword="simpleType" /> 要素の型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary>基本型のコレクションを取得します。</summary>
      <returns>単純型の基本値のコレクション。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary>このスキーマまたは指定した名前空間で示された別のスキーマで定義された組み込みデータ型または <see langword="simpleType" /> 要素の限定メンバー名の配列を取得または設定します。</summary>
      <returns>組み込みデータ型または単純型のメンバーのリストで構成される配列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="totalDigits" /> ファセットを表します。 このクラスを使用すると、<see langword="simpleType" /> 要素の値として入力できる桁数を制限できます。 <see langword="totalDigits" /> の値は正の整数である必要があります。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary>すべての単純型と複合型の基本クラス。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary>指定された複合型の組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> を返します。</summary>
      <param name="typeCode">複合型を表す <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値の 1 つ。</param>
      <returns>組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary>修飾名で指定された複合型の組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> を返します。</summary>
      <param name="qualifiedName">複合型の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>組み込み複合型を表す <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary>指定された単純型の組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> を返します。</summary>
      <param name="typeCode">単純型を表す <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値の 1 つ。</param>
      <returns>組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary>修飾名で指定された単純型の組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> を返します。</summary>
      <param name="qualifiedName">単純型の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlQualifiedName" /> パラメーターが <see langword="null" /> です。</exception>
      <returns>組み込み単純型を表す <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary>指定された派生スキーマ型が、指定された基本スキーマ型から派生したかどうかを示す値を返します。</summary>
      <param name="derivedType">テスト対象の派生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="baseType">テスト対象の派生 <see cref="T:System.Xml.Schema.XmlSchemaType" /> の基本 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="except">テストから除外する型派生メソッドを表す <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値の 1 つ。</param>
      <returns>派生型が基本型から派生した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary>組み込み XML スキーマ定義言語 (XSD: XML Schema Definition Language) データ型、simpleType 要素、または complexType 要素のコンパイル後のオブジェクト型を取得します。 これは、スキーマ コンパイル後の infoset プロパティです。</summary>
      <returns>組み込み XSD データ型、simpleType 要素、または complexType 要素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary>このスキーマ型の基本型に対応するコンパイル後の値を取得します。</summary>
      <returns>このスキーマ型の基本型を表す <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary>複合型のデータ型に対応するコンパイル後の値を取得します。</summary>
      <returns>スキーマ コンパイル後の値の <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary>この要素が基本型から派生された方法に関するコンパイル後の情報を取得します。</summary>
      <returns>有効な <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary>さらに派生が可能かどうかを示す、型派生の final 属性を取得または設定します。</summary>
      <returns>有効な <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 値の 1 つ。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary>
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> プロパティのコンパイル後の値を取得します。</summary>
      <returns>
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> プロパティのコンパイル後の値。 既定値は <see langword="finalDefault" /> 要素の <see langword="schema" /> 属性値です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary>この型が混合コンテンツ モデルを持つかどうかを示す値を取得または設定します。 このプロパティは、複合型でだけ有効です。</summary>
      <returns>型が混合コンテンツ モデルを持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary>型の名前を取得します。値の設定も可能です。</summary>
      <returns>型の名前。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary>この型の <see langword="Name" /> 属性から構築された型の限定名を取得します。 これは、スキーマ コンパイル後のプロパティです。</summary>
      <returns>この型の <see langword="Name" /> 属性から構築された型の <see cref="T:System.Xml.XmlQualifiedName" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary>型の <see cref="T:System.Xml.Schema.XmlTypeCode" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlTypeCode" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary>W3C (World Wide Web Consortium) によって指定された XML スキーマの <see langword="unique" /> 要素を表します。 このクラスを使用すると、一連の要素の中での UNIQUE 制約を設定できます。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary>属性の使用方法を示すインジケーター。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary>属性の使用が指定されていません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary>属性は省略可能です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary>属性を使用できません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary>属性は一度使用する必要があります。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary>XML ドキュメントを検証しているときに XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマの検証エラーおよび検証警告を検出するとスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、指定された <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトと <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトを使用して初期化します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、指定された例外メッセージを使用して初期化します。</summary>
      <param name="message">エラー状態の <see langword="string" /> の説明。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、例外メッセージおよびこの例外が発生する原因になった元の <see cref="T:System.Exception" /> オブジェクトを指定して初期化します。</summary>
      <param name="message">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException">この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> クラスの新しいインスタンスを、例外メッセージ、この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト、XML の行番号、および XML の行位置を指定して初期化します。</summary>
      <param name="message">エラー状態の <see langword="string" /> の説明。</param>
      <param name="innerException">この例外が発生する原因になった <see cref="T:System.Exception" /> オブジェクト。</param>
      <param name="lineNumber">この例外が発生する原因になった XML の行番号。</param>
      <param name="linePosition">この例外が発生する原因になった XML の行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> のすべてのプロパティを含む指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 情報および <see cref="T:System.Runtime.Serialization.StreamingContext" /> 情報を使用して、新しい <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> オブジェクトを構築します。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary>エラーの原因となった XML ノードを設定します。</summary>
      <param name="sourceObject">ソース オブジェクト。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary>この <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> が発生する原因になった XML ノードを取得します。</summary>
      <returns>この <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> が発生する原因になった XML ノード。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスおよび <see cref="T:System.Xml.XmlReader" /> クラスで使用するスキーマ検証のオプションを指定します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary>スキーマで定義されていない場合でも、xml:* 属性を許可します。 属性は対応するデータ型に基づいて検証されます。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary>ID 制約、インライン スキーマ、スキーマ位置ヒントを処理せず、スキーマ検証警告を報告しません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary>検証を実行しているときに検出された ID 制約 (<c>xs:ID</c>、<c>xs:IDREF</c>、<c>xs:key</c>、<c>xs:keyref</c>、<c>xs:unique</c>) を処理します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary>検証を実行しているときに検出されたインライン スキーマを処理します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary>検証を実行しているときに検出されたスキーマ位置ヒント (<c>xsi:schemaLocation</c>、<c>xsi:noNamespaceSchemaLocation</c>) を処理します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary>検証を実行しているときに検出されたスキーマ検証警告を報告します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary>XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマ検証エンジンを表します。 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスは継承できません。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary>スキーマを検証しているときに検出されるスキーマの検証警告と検証エラーを受信する <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameTable">要素名と属性名の最小単位に分割された文字列が格納された <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
      <param name="schemas">検証に使用する XML スキーマ定義言語 (XSD) スキーマが格納された <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</param>
      <param name="namespaceResolver">検証中に検出される名前空間を解決するために使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <param name="validationFlags">スキーマ検証オプションを指定する <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 値。</param>
      <exception cref="T:System.ArgumentNullException">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> パラメーター内のスキーマをコンパイルしているときにエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary>検証に使用するスキーマのセットに XML スキーマ定義言語 (XSD) スキーマを追加します。</summary>
      <param name="schema">検証に使用するスキーマのセットに追加する <see cref="T:System.Xml.Schema.XmlSchema" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターの対象名前空間が、既に <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトで検出されているいずれかの要素または属性の名前空間に一致します。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException">
        <see cref="T:System.Xml.Schema.XmlSchema" /> パラメーターが正しくありません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary>検証を終了し、XML ドキュメント全体に対して ID 制約をチェックします。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">XML ドキュメント内で ID 制約エラーが見つかりました。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary>現在の要素コンテキストに対して予期される属性を返します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクトの配列。または、予期される属性がない場合は空の配列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary>現在の要素コンテキストで予期されるパーティクルを返します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> オブジェクトの配列。または、予期されるパーティクルがない場合は空の配列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary>既定の属性に対する ID 制約を検証します。さらに、これまで要素コンテキストで <see cref="T:System.Collections.ArrayList" /> メソッドを使用して検証されたことのない、既定値を持つ任意の属性について、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> オブジェクトで指定された <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> を設定します。</summary>
      <param name="defaultAttributes">要素コンテキストで検証を実行しているときにまだ検出されたことのない属性について、<see cref="T:System.Collections.ArrayList" /> オブジェクトを使用して設定する <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトの状態を初期化します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> メソッドの呼び出しは、<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを構築した直後または <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> を呼び出した後にだけ有効です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary>部分検証用として指定された <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> を使用して、<see cref="T:System.Xml.Schema.XmlSchemaObject" /> オブジェクトの状態を初期化します。</summary>
      <param name="partialValidationType">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> オブジェクトの検証コンテキストを部分検証用に初期化するために使用する、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />、<see cref="T:System.Xml.Schema.XmlSchemaType" />、または <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> メソッドの呼び出しは、<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを構築した直後または <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> を呼び出した後にだけ有効です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> パラメーターが、<see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />、または <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクトのいずれでもありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> パラメーターとして <see langword="null" /> を使用することはできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>現在の要素コンテンツの検証をスキップし、親要素のコンテキストでコンテンツの検証するために <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを準備します。</summary>
      <param name="schemaInfo">現在の要素の内容が正常にスキップされた場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>現在の要素コンテキストで属性の名前、名前空間 URI、および値を検証します。</summary>
      <param name="localName">検証する属性のローカル名。</param>
      <param name="namespaceUri">検証する属性の名前空間 URI。</param>
      <param name="attributeValue">検証する属性の値。</param>
      <param name="schemaInfo">属性が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">現在の要素コンテキストではこの属性は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
      <returns>検証された属性の値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary>現在の要素コンテキストで属性の名前、名前空間 URI、および値を検証します。</summary>
      <param name="localName">検証する属性のローカル名。</param>
      <param name="namespaceUri">検証する属性の名前空間 URI。</param>
      <param name="attributeValue">属性の値を、属性の XML スキーマ定義言語 (XSD) 型と互換性のある共通言語ランタイム (CLR: Common Language Runtime) 型にして渡すために使用する <see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />。</param>
      <param name="schemaInfo">属性が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">現在の要素コンテキストではこの属性は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
      <returns>検証された属性の値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary>現在のコンテキストで要素を検証します。</summary>
      <param name="localName">検証する要素のローカル名。</param>
      <param name="namespaceUri">検証する要素の名前空間 URI。</param>
      <param name="schemaInfo">要素の名前が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">現在のコンテキストではこの要素の名前は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary>指定された <c>xsi:Type</c>、<c>xsi:Nil</c>、<c>xsi:SchemaLocation</c>、および <c>xsi:NoNamespaceSchemaLocation</c> の各属性値を使用して、現在のコンテキストで要素を検証します。</summary>
      <param name="localName">検証する要素のローカル名。</param>
      <param name="namespaceUri">検証する要素の名前空間 URI。</param>
      <param name="schemaInfo">要素の名前が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiType">要素の <c>xsi:Type</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiNil">要素の <c>xsi:Nil</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiSchemaLocation">要素の <c>xsi:SchemaLocation</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="xsiNoNamespaceSchemaLocation">要素の <c>xsi:NoNamespaceSchemaLocation</c> 属性値。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">現在のコンテキストではこの要素の名前は有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary>単純な内容の要素に対しては、要素のテキストがそのデータ型に従った有効な内容かどうかについて検証し、複雑な内容の要素に対しては、現在の要素の内容が完全かどうかを検証します。</summary>
      <param name="schemaInfo">要素が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">要素の内容が有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> メソッドを呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> メソッドを呼び出した場合が該当します。</exception>
      <returns>要素が単純な内容の場合、要素の解析および型指定されたテキスト値。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary>指定された要素のテキストが、そのデータ型に従った有効な内容であるかどうかを検証します。</summary>
      <param name="schemaInfo">要素のテキストの内容が正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="typedValue">要素の型指定されたテキストの内容。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">要素のテキストの内容が有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> メソッドが正しいシーケンスで呼び出されなかった (たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> が呼び出された後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> メソッドが呼び出された) か、以前に <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドの呼び出しが行われているか、または要素が複雑な内容です。</exception>
      <exception cref="T:System.ArgumentNullException">型指定されたテキストの内容のパラメーターは <see langword="null" /> にできません。</exception>
      <returns>要素の解析および型指定された単純な内容。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary>要素コンテキスト中の必須属性がすべて揃っていることを検証し、要素の子コンテンツを検証するために <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトを準備します。</summary>
      <param name="schemaInfo">必要なすべての属性が要素コンテキストに存在することが正常に検証された場合にプロパティが設定される <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> オブジェクト。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">1 つ以上の必要な属性が、現在の要素コンテキストで見つかりませんでした。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した後で <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> を呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException">指定されたパラメーターの 1 つ以上が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary>現在の要素コンテキストで、指定されたテキスト <see langword="string" /> が許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用のテキストを累積します。</summary>
      <param name="elementValue">現在の要素コンテキストで検証するテキスト <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">指定されたテキスト <see langword="string" /> は、現在の要素コンテキストでは許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException">テキスト <see langword="string" /> パラメーターを <see langword="null" /> にすることはできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary>現在の要素コンテキストで、指定された <see cref="T:System.Xml.Schema.XmlValueGetter" /> オブジェクトで返されるテキストが許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用のテキストを累積します。</summary>
      <param name="elementValue">テキスト値を属性の XML スキーマ定義言語 (XSD) 型と互換性のある共通言語ランタイム (CLR) 型にして渡すために使用する、<see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">指定されたテキスト <see langword="string" /> は、現在の要素コンテキストでは許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
      <exception cref="T:System.ArgumentNullException">テキスト <see langword="string" /> パラメーターを <see langword="null" /> にすることはできません。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary>現在の要素コンテキストで、指定された <see langword="string" /> 内に空白が許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用の空白を累積します。</summary>
      <param name="elementValue">現在の要素コンテキストで検証する空白 <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">現在の要素コンテキストでは空白は許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary>現在の要素コンテキストで、指定された <see cref="T:System.Xml.Schema.XmlValueGetter" /> オブジェクトで返される空白が許可されているかどうかを検証し、現在の要素が単純な内容の場合は検証用の空白を累積します。</summary>
      <param name="elementValue">空白値を属性の XML スキーマ定義言語 (XSD) 型と互換性のある共通言語ランタイム (CLR) 型にして渡すために使用する、<see cref="T:System.Xml.Schema.XmlValueGetter" /><see langword="delegate" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">現在の要素コンテキストでは空白は許可されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドは、正しいシーケンスで呼び出されませんでした。 たとえば、<see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> メソッドを呼び出した後で <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> メソッドを呼び出した場合が該当します。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary>検証する XML ノードの行番号の情報を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.IXmlLineInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary>検証する XML ノードのソース URI を取得または設定します。</summary>
      <returns>検証する XML ノードのソース URI を表す <see cref="T:System.Uri" /> オブジェクト。既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary>検証イベントの送信元オブジェクトとして送信されるオブジェクトを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Object" />。既定値はこの <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> オブジェクトです。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary>
        <c>xs:import</c> 要素と <c>xs:include</c> 要素および <c>xsi:schemaLocation</c> 属性と <c>xsi:noNamespaceSchemaLocation</c> 属性の解決に使用する <see cref="T:System.Xml.XmlResolver" /> オブジェクトを設定します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlResolver" /> オブジェクト。既定値は <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトです。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスによって検証された XML 項目の有効性を表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary>XML 項目が無効です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary>XML 項目の有効性が不明です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary>XML 項目が有効です。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary>W3C (World Wide Web Consortium) <see langword="whiteSpace" /> ファセットを表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary>W3C (World Wide Web Consortium) <see langword="selector" /> 要素を表します。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary>
        <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary>XPath 式の属性を取得または設定します。</summary>
      <returns>XPath 式の文字列の属性値。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary>検証イベントの重大度レベルを表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary>インスタンス ドキュメントの検証時に発生した検証エラーを示します。 これは、文書型定義 (DTD: Document Type Definition) スキーマおよび XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマに適用されます。 W3C (World Wide Web Consortium) 検証制約は、エラーと見なされます。 検証イベント ハンドラーが作成されていない場合、エラーは例外をスローします。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary>エラー以外の検証イベントが発生したことを示します。 通常、警告は、特定の要素または属性を検証する DTD、または XML スキーマがないときに発行されます。 エラーとは異なり、検証イベント ハンドラーがない場合、警告は例外をスローしません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary>W3C XML スキーマ定義言語 (XSD: XML Schema Definition Language) スキーマ型を表します。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary>共用体を構成する任意の原子値です。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary>W3C XML スキーマの <see langword="xs:anyURI" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary>W3C XML スキーマの <see langword="xs:base64Binary" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary>W3C XML スキーマの <see langword="xs:boolean" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary>W3C XML スキーマの <see langword="xs:byte" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary>W3C XML スキーマの <see langword="xs:date" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary>W3C XML スキーマの <see langword="xs:dateTime" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary>W3C XML スキーマの <see langword="xs:decimal" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary>W3C XML スキーマの <see langword="xs:double" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary>W3C XML スキーマの <see langword="xs:Duration" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary>W3C XML スキーマの <see langword="xs:ENTITY" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary>W3C XML スキーマの <see langword="xs:float" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary>W3C XML スキーマの <see langword="xs:gDay" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary>W3C XML スキーマの <see langword="xs:gMonth" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary>W3C XML スキーマの <see langword="xs:gMonthDay" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary>W3C XML スキーマの <see langword="xs:gYear" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary>W3C XML スキーマの <see langword="xs:gYearMonth" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary>W3C XML スキーマの <see langword="xs:hexBinary" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary>W3C XML スキーマの <see langword="xs:ID" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary>W3C XML スキーマの <see langword="xs:IDREF" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary>W3C XML スキーマの <see langword="xs:int" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary>W3C XML スキーマの <see langword="xs:integer" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary>ノードや原子値などの項目。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary>W3C XML スキーマの <see langword="xs:language" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary>W3C XML スキーマの <see langword="xs:long" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary>W3C XML スキーマの <see langword="xs:Name" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary>W3C XML スキーマの <see langword="xs:NCName" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary>W3C XML スキーマの <see langword="xs:negativeInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary>W3C XML スキーマの <see langword="xs:NMTOKEN" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary>型情報なし。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary>W3C XML スキーマの <see langword="xs:nonNegativeInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary>W3C XML スキーマの <see langword="xs:nonPositiveInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary>W3C XML スキーマの <see langword="xs:normalizedString" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary>W3C XML スキーマの <see langword="xs:NOTATION" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary>W3C XML スキーマの <see langword="xs:positiveInteger" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary>W3C XML スキーマの <see langword="xs:QName" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary>W3C XML スキーマの <see langword="xs:short" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary>W3C XML スキーマの <see langword="xs:string" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary>W3C XML スキーマの <see langword="xs:time" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary>W3C XML スキーマの <see langword="xs:token" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary>W3C XML スキーマの <see langword="xs:unsignedByte" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary>W3C XML スキーマの <see langword="xs:unsignedInt" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary>W3C XML スキーマの <see langword="xs:unsignedLong" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary>W3C XML スキーマの <see langword="xs:unsignedShort" /> 型。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary>型指定されていない原子値。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary>この値は .NET Framework インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary>属性、テキスト、および空白の各値を、属性、テキスト、または空白の XML スキーマ定義言語 (XSD: XML Schema Definition Language) 型と互換性のある共通言語ランタイム (CLR: Common Language Runtime) 型にして渡すために、<see cref="T:System.Xml.Schema.XmlSchemaValidator" /> クラスで使用する <see langword="delegate" />。</summary>
      <returns>属性、テキスト、または空白の各値を保持するオブジェクト。 このオブジェクトは、属性、テキスト、空白の各値の XSD 型に対応する CLR 型になります。</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary>XML シリアル化および逆シリアル化のカスタム書式を提供します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary>このメソッドは予約されているため、使用できません。 <see langword="IXmlSerializable" /> インターフェイスを実装する場合、このメソッドから <see langword="null" /> (Visual Basic では <see langword="Nothing" />) を返す必要があります。また、カスタム スキーマの指定が要求されている場合は、このクラスに <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> を適用します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> メソッドで生成され、<see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> メソッドで利用されるオブジェクトの XML 表現を表す <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> です。</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary>XML 表現からオブジェクトを生成します。</summary>
      <param name="reader">オブジェクトの逆シリアル化元である <see cref="T:System.Xml.XmlReader" /> ストリーム。</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary>オブジェクトを XML 表現に変換します。</summary>
      <param name="writer">オブジェクトをシリアル化する <see cref="T:System.Xml.XmlWriter" /> ストリーム。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary>メンバー (<see cref="T:System.Xml.XmlAttribute" /> オブジェクトの配列を返すフィールド) に任意の XML 属性を含めることができるように指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> クラスの新しいインスタンスを生成します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary>メンバー (<see cref="T:System.Xml.XmlElement" /> オブジェクトまたは <see cref="T:System.Xml.XmlNode" /> オブジェクトの配列を返すフィールド) に、シリアル化または逆シリアル化対象のオブジェクト内に対応するメンバーがない任意の XML 要素を表すオブジェクトを含めるように指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化し、XML ドキュメントに生成される XML 要素名を指定します。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 要素の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> クラスの新しいインスタンスを初期化し、XML ドキュメントに生成される XML 要素名とその XML 名前空間を指定します。</summary>
      <param name="name">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 要素の名前。</param>
      <param name="ns">XML 要素の XML 名前空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary>XML 要素名を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">配列メンバーの要素名が、<see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> プロパティに指定されている要素名と一致しません。</exception>
      <returns>XML 要素の名前。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary>XML ドキュメントに生成される XML 名前空間を取得または設定します。</summary>
      <returns>XML 名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary>要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns>コード生成の順序。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> がクラス メンバーを XML 属性としてシリアル化する必要があることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化し、生成される XML 属性の名前を指定します。</summary>
      <param name="attributeName">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する XML 属性の名前。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeName">生成される XML 属性の名前。</param>
      <param name="type">属性を取得するために使用する <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">属性を取得するために使用する <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary>XML 属性の名前を取得または設定します。</summary>
      <returns>XML 属性の名前。 既定値はメンバー名です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成された XML 属性の XSD データ型を取得または設定します。</summary>
      <returns>XSD (XML スキーマドキュメント) データ型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成された XML 属性名が修飾されているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値のいずれか 1 つ。 既定値は、<see langword="XmlForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary>XML 属性の XML 名前空間を取得または設定します。</summary>
      <returns>XML 属性の XML 名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary>XML 属性の複合型を取得または設定します。</summary>
      <returns>XML 属性の型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary>パブリック フィールドまたはパブリック プロパティを持つオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化または逆シリアル化するときに、それらのフィールドまたはプロパティが XML 要素を表すかどうかを示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary>XML 要素の名前を指定して、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="elementName">シリアル化されたメンバーの XML 要素名。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の新しいインスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の適用先であるメンバーの XML 要素の名前と派生型を指定します。 このメンバー型が使用されるのは、その型を含むオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化する場合です。</summary>
      <param name="elementName">シリアル化されたメンバーの XML 要素名。</param>
      <param name="type">メンバーの型から派生したオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlElementAttribute" /> の適用先のメンバーの型を指定します。 この型が使用されるのは、その型を含むオブジェクトを <see cref="T:System.Xml.Serialization.XmlSerializer" /> がシリアル化または逆シリアル化する場合です。</summary>
      <param name="type">メンバーの型から派生したオブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成された XML 要素の XML スキーマ定義 (XSD: XML Schema Definition) データ型を取得または設定します。</summary>
      <exception cref="T:System.Exception">指定した XML スキーマ データ型を .NET データ型に割り当てることはできません。</exception>
      <returns>XML スキーマデータ型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary>生成された XML 要素の名前を取得または設定します。</summary>
      <returns>生成された XML 要素の名前。 既定値はメンバー識別子です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary>要素が修飾されているかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.Schema.XmlSchemaForm.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が、<see langword="null" /> に設定されているメンバーを、<see langword="xsi:nil" /> 属性が <see langword="true" /> に設定されている空タグとしてシリアル化する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が <see langword="true" /> 属性を生成する場合は <see langword="xsi:nil" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary>クラスがシリアル化されたときに、結果として XML 要素に割り当てられた名前空間を取得または設定します。</summary>
      <returns>XML 要素の名前空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary>要素のシリアル化または逆シリアル化を行う明示的な順序を取得または設定します。</summary>
      <returns>コード生成の順序。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary>XML 要素を表すために使用されるオブジェクト型を取得または設定します。</summary>
      <returns>メンバーの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙体メンバーをシリアル化する方法を制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> クラスの新しいインスタンスを初期化し、<see cref="T:System.Xml.Serialization.XmlSerializer" /> が生成する (列挙体をシリアル化する場合) または認識する (列挙体を逆シリアル化する場合) XML 値を指定します。</summary>
      <param name="name">オーバーライドする側の列挙体メンバーの名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙体をシリアル化する場合は XML ドキュメント インスタンスに生成された値を、列挙体メンバーを逆シリアル化する場合は認識した値を、取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が列挙体をシリアル化する場合は XML ドキュメント インスタンスに生成された値、列挙体メンバーを逆シリアル化する場合は認識した値。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary>
        <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> の <see cref="T:System.Xml.Serialization.XmlSerializer" /> メソッドに対して、パブリック フィールドまたはパブリックな読み書き可能プロパティの値をシリアル化しないように指示します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary>ターゲットのプロパティ、パラメーター、戻り値、またはクラス メンバーに、XML ドキュメント内で使用される名前空間に関連付けられたプレフィックスを含めるように指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary>属性ターゲットを XML ルート要素として XML シリアル化する方法を制御します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> クラスの新しいインスタンスを初期化し、XML ルート要素の名前を指定します。</summary>
      <param name="elementName">XML ルート要素の名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary>XML ルート要素の XSD データ型を取得または設定します。</summary>
      <returns>XSD (XML スキーマドキュメント) データ型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> クラスの <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> メソッドおよび <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> メソッドによって生成および認識される XML 要素名を取得または設定します。</summary>
      <returns>XML ドキュメント インスタンスで生成および認識された XML ルート要素名。 既定値は、シリアル化されたクラスの名前です。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> で、<see langword="null" /> に設定されているメンバーを、<see langword="xsi:nil" /> に設定されている <see langword="true" /> 属性にシリアル化するかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が <see langword="true" /> 属性を生成する場合は <see langword="xsi:nil" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary>XML ルート要素の名前空間を取得または設定します。</summary>
      <returns>XML 要素の名前空間。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary>型に適用された場合、XML スキーマを返す型の静的メソッドの名前と、型のシリアル化を制御する<see cref="T:System.Xml.XmlQualifiedName" /> (または匿名型の <see cref="T:System.Xml.Schema.XmlSchemaType" />) を格納します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary>型の XML スキーマを提供する静的メソッドの名前を受け取って、<see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="methodName">実装する必要がある静的メソッドの名前。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary>ターゲット クラスがワイルドカードかどうか、またはクラスのスキーマに <see langword="xs:any" /> 要素のみが含まれているかどうかを判断する値を取得または設定します。</summary>
      <returns>クラスがワイルドカードの場合、またはスキーマに <see langword="xs:any" /> 要素のみが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary>型の XML スキーマおよびその XML スキーマ データ型の名前を提供する静的メソッドの名前を取得します。</summary>
      <returns>XML スキーマを返すために XML インフラストラクチャによって呼び出されるメソッドの名前。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が XML ドキュメント インスタンスで修飾名を生成するために使用する XML 名前空間とプレフィックスが格納されています。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>プレフィックスと名前空間のペアのコレクションを保持する <see langword="XmlSerializerNamespaces" /> のインスタンスを指定して、<see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="namespaces">名前空間とプレフィックスのペアを保持する <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> のインスタンス。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="namespaces">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> オブジェクトにプレフィックスと名前空間のペアを追加します。</summary>
      <param name="prefix">XML 名前空間に関連付けられているプリフィックス。</param>
      <param name="ns">XML 名前空間。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> オブジェクト内のプレフィックスと名前空間のペアの配列を取得します。</summary>
      <returns>XML ドキュメントで修飾名として使用される <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの配列。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>コレクション内のプレフィックスと名前空間のペアの数を取得します。</summary>
      <returns>コレクション内のプレフィックスと名前空間のペアの数。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> が、クラスをシリアル化または逆シリアル化するときに、そのクラスに含まれる特定のメンバーを XML テキストとして処理する必要があることを指定します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">シリアル化するメンバーの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary>
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> によって生成されたテキストの XML スキーマ定義言語 (XSD: XML Schema Definition Language) データ型を取得または設定します。</summary>
      <exception cref="T:System.Exception">指定した XML スキーマ データ型を .NET データ型に割り当てることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">指定した XML スキーマ データ型はプロパティとしては無効なので、そのメンバー型に変換できません。</exception>
      <returns>XML スキーマ (XSD) データ型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary>メンバーの型を取得または設定します。</summary>
      <returns>メンバーの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>実行する検証のタイプを指定します。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>DTD 情報またはスキーマ情報が検索されたかどうかを検証します。 

.NET Framework 2.0 以降、このフィールドは廃止されました。 これは古い <see cref="T:System.Xml.XmlValidatingReader" /> クラスにのみ適用されます。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>DTD に従って検証します。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>検証が実行されていないので、検証エラーはスローされません。 この設定では、XML 1.0 準拠の非検証パーサーが作成されます。
        
<see cref="M:System.Xml.XmlReader.ResolveEntity" /> の呼び出しにより、既定の属性が報告され、一般エンティティが解決されます。 DOCTYPE は検証目的には使用されません。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>インライン XML スキーマを含む XML スキーマ定義言語 (XSD) スキーマに従って検証します。 XML スキーマは、<see langword="schemaLocation" /> 属性または提供された <see langword="Schemas" /> プロパティを使用して、名前空間 URI に関連付けられます。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>インライン XDR (XML-Data Reduced) スキーマを含む XDR スキーマに従って検証します。 XDR スキーマは、<see langword="x-schema" /> 名前空間プリフィックスまたは <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> プロパティを使用して認識されます。
        
.NET Framework 2.0 以降、このフィールドは廃止されました。 これは古い <see cref="T:System.Xml.XmlValidatingReader" /> クラスにのみ適用されます。</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>空白の処理方法を指定します。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>
        <see langword="Whitespace" /> ノードおよび <see langword="SignificantWhitespace" /> ノードを返します。 これは既定値です。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>
        <see langword="Whitespace" /> ノードおよび <see langword="SignificantWhitespace" /> ノードを返しません。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>
        <see langword="SignificantWhitespace" /> ノードだけを返します。</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> の状態を指定します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>属性値が書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>
        <see cref="M:System.Xml.XmlWriter.Close" /> メソッドが呼び出されていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>要素の内容が書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>要素開始タグが書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>例外がスローされ、<see cref="T:System.Xml.XmlWriter" /> が無効な状態になっています。 <see cref="M:System.Xml.XmlWriter.Close" /> メソッドを呼び出すと、<see cref="T:System.Xml.XmlWriter" /> を <see cref="F:System.Xml.WriteState.Closed" /> 状態にできます。 それ以外の <see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出した場合、<see cref="T:System.InvalidOperationException" /> が発生します。

このフィールドは、.NET Framework 2.0 で追加されました。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>プロローグが書き込まれていることを示します。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>Write メソッドがまだ呼び出されていないことを示します。</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>1 つの属性を表します。 属性の有効値と既定値は、ドキュメント型定義 (DTD) またはスキーマの中で定義されます。</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix">名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">名前空間 URI (Uniform Resource Identifier)。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>このノードの子ノードのリストの末尾に、指定したノードを追加します。</summary>
      <param name="newChild">追加する <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
このノードは読み取り専用です。</exception>
      <returns>追加された <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>複製されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>指定したノードを指定した参照ノードの直後に挿入します。</summary>
      <param name="newChild">挿入する <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild">参照ノードである <see cref="T:System.Xml.XmlNode" />。 <paramref name="newChild" /> は、<paramref name="refChild" /> の後に配置されます。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
<paramref name="refChild" /> がこのノードの子ではありません。  
  
このノードは読み取り専用です。</exception>
      <returns>挿入された <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>指定したノードを指定した参照ノードの直前に挿入します。</summary>
      <param name="newChild">挿入する <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild">参照ノードである <see cref="T:System.Xml.XmlNode" />。 <paramref name="newChild" /> は、このノードの前に配置されます。</param>
      <exception cref="T:System.InvalidOperationException">現在のノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
<paramref name="refChild" /> がこのノードの子ではありません。  
  
このノードは読み取り専用です。</exception>
      <returns>挿入された <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>このノードの子ノードのリストの先頭に、指定したノードを追加します。</summary>
      <param name="newChild">追加する <see cref="T:System.Xml.XmlNode" />。 そのノードが <see cref="T:System.Xml.XmlDocumentFragment" /> の場合は、ドキュメント フラグメントの内容全体がこのノードの子リストに移動されます。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
このノードは読み取り専用です。</exception>
      <returns>追加された <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>指定した子ノードを削除します。</summary>
      <param name="oldChild">削除する <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> がこのノードの子ではありません。 または、このノードが読み取り専用です。</exception>
      <returns>削除された <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>指定した子ノードを、新たに指定された子ノードで置き換えます。</summary>
      <param name="newChild">新しい子 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldChild">置き換える <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
このノードは読み取り専用です。  
  
<paramref name="oldChild" /> がこのノードの子ではありません。</exception>
      <returns>置き換えられた <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>ノードのベース URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>ノードの読み込み元の場所。ノードにベース URI がない場合は String.Empty。 属性ノードのベース URI は、その所有者要素と同じです。 属性ノードに所有者要素がない場合、<see langword="BaseURI" /> は String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>ノードとすべての子の連結された値を設定します。</summary>
      <returns>ノードとすべての子の連結された値。 属性ノードの場合、このプロパティは <see cref="P:System.Xml.XmlAttribute.Value" /> プロパティと同じ機能を持ちます。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>属性の値を設定します。</summary>
      <exception cref="T:System.Xml.XmlException">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
      <returns>属性値。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>プリフィックスを削除した属性ノードの名前。 次の例の book の例で &lt; は、ジャンル = ' 斬新 ' &gt; ,、 <see langword="LocalName" /> 属性のは <see langword="genre" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>属性ノードの限定名。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>このノードの名前空間 URI を取得します。</summary>
      <returns>このノードの名前空間 URI。 属性に明示的に名前空間が指定されていない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see langword="XmlAttribute" /> ノードのノード型は XmlNodeType.Attribute です。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns>このノードが所属する XML ドキュメント。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>属性が属する <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <returns>属性が属している <see langword="XmlElement" />。この属性が <see langword="null" /> の一部でない場合は <see langword="XmlElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>このノードの親を取得します。 <see langword="XmlAttribute" /> ノードの場合、このプロパティは常に <see langword="null" /> を返します。</summary>
      <returns>
        <see langword="XmlAttribute" /> ノードの場合、このプロパティは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>このノードの名前空間プリフィックスを取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">このノードは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException">指定したプレフィックスに無効な文字が含まれています。  
  
指定されたプリフィックスの書式が正しくありません。  
  
このノードの属性の namespaceURI が <see langword="null" /> です。  
  
指定したプリフィックスが "xml" であり、このノードの namespaceURI が "http://www.w3.org/XML/1998/namespace" と異なっています。  
  
このノードが属性で、指定したプリフィックスが "xmlns" であり、このノードの namespaceURI が "http://www.w3.org/2000/xmlns/" と異なっています。  
  
このノードが属性で、このノードの qualifiedName が "xmlns" [Namespaces] です。</exception>
      <returns>このノードの名前空間プリフィックス。 プリフィックスがない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>スキーマ検証の結果、このノードに割り当てられているスキーマ検証後の infoset を取得します。</summary>
      <returns>このノードのスキーマ検証後の infoset が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>属性値が明示的に設定されたかどうかを示す値を取得します。</summary>
      <returns>元のインスタンス ドキュメントでこの属性に明示的に値が指定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の値は、属性の値が DTD に由来していることを示します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">ノードが読み取り専用であり、set 操作が呼び出されます。</exception>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="XmlAttribute" /> ノードの場合、このプロパティは属性の値です。</returns>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>名前またはインデックスによってアクセス可能な属性のコレクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>指定した属性をコレクション内の最後のノードとして挿入します。</summary>
      <param name="node">挿入する属性。</param>
      <exception cref="T:System.ArgumentException">このコレクションを作成したドキュメントと異なるドキュメントから <paramref name="node" /> が作成されました。</exception>
      <returns>コレクションの末尾に追加する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>このコレクション内のすべての <see cref="T:System.Xml.XmlAttribute" /> オブジェクトを、指定した配列にコピーします。</summary>
      <param name="array">このコレクションからコピーされたオブジェクトのコピー先の配列。</param>
      <param name="index">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>指定した属性を、指定した参照属性の直後に挿入します。</summary>
      <param name="newNode">挿入する属性。</param>
      <param name="refNode">参照属性。 <paramref name="newNode" /> は、<paramref name="refNode" /> の後に配置されます。</param>
      <exception cref="T:System.ArgumentException">このコレクションを作成したドキュメントと異なるドキュメントから <paramref name="newNode" /> が作成されました。 または、<paramref name="refNode" /> がこのコレクションのメンバーではありません。</exception>
      <returns>コレクションに挿入する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>指定した属性を、指定した参照属性の直前に挿入します。</summary>
      <param name="newNode">挿入する属性。</param>
      <param name="refNode">参照属性。 <paramref name="newNode" /> は <paramref name="refNode" /> の前に配置されます。</param>
      <exception cref="T:System.ArgumentException">このコレクションを作成したドキュメントと異なるドキュメントから <paramref name="newNode" /> が作成されました。 または、<paramref name="refNode" /> がこのコレクションのメンバーではありません。</exception>
      <returns>コレクションに挿入する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>指定した属性をコレクション内の最初のノードとして挿入します。</summary>
      <param name="node">挿入する属性。</param>
      <returns>コレクションに追加する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>指定した属性をコレクションから削除します。</summary>
      <param name="node">削除する属性。</param>
      <returns>削除されたノード。ノードがコレクション内で見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>コレクションからすべての属性を削除します。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>コレクション内の指定したインデックスに対応する属性を削除します。</summary>
      <param name="i">削除するノードのインデックス。 最初のノードのインデックスは 0 です。</param>
      <returns>指定したインデックスに属性がない場合、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>
        <see cref="P:System.Xml.XmlNode.Name" /> プロパティを使用して <see cref="T:System.Xml.XmlNode" /> を追加します。</summary>
      <param name="node">このコレクションに格納する属性ノード。 このノードは、ノードの名前を使用すると後からアクセスできます。 その名前のノードが既にコレクションに存在している場合は、新しいノードと置き換えられます。それ以外の場合は、ノードがコレクションの末尾に追加されます。</param>
      <exception cref="T:System.ArgumentException">このコレクションを作成した XML ドキュメントと異なる <see cref="T:System.Xml.XmlDocument" /> から <paramref name="node" /> が作成されました。  
  
この <see langword="XmlAttributeCollection" /> は読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> は、既に別の <see cref="T:System.Xml.XmlAttribute" /> オブジェクトの属性である <see cref="T:System.Xml.XmlElement" /> です。 その他の要素の属性を再利用するには、再利用する <see langword="XmlAttribute" /> オブジェクトのクローンを作成する必要があります。</exception>
      <returns>
        <paramref name="node" /> によって同じ名前の既存のノードが置換される場合は、古いノードが返されます。それ以外の場合は、追加されたノードが返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />」をご覧ください。</summary>
      <param name="array">このコレクションからコピーされたオブジェクトのコピー先の配列。</param>
      <param name="index">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>指定したインデックスの属性を取得します。</summary>
      <param name="i">属性のインデックス。</param>
      <exception cref="T:System.IndexOutOfRangeException">範囲外に渡されるインデックス。</exception>
      <returns>指定したインデックス位置にある属性。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>指定した名前の属性を取得します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>指定した名前の属性。 属性の名前が存在しない場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI (Uniform Resource Identifier) の属性を取得します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>指定されたローカル名と名前空間 URI を持つ属性。 属性の名前が存在しない場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />」をご覧ください。</summary>
      <returns>
        <see langword="int" />属性の数を格納している。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" />」をご覧ください。</summary>
      <returns>
        <see langword="true" /> コレクションが同期されている場合はです。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>このメンバーの詳細については、「<see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" />」をご覧ください。</summary>
      <returns>
        <see cref="T:System.Object" />コレクションのルートである。</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>CDATA セクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlCDataSection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="data">文字データを格納している <see cref="T:System.String" />。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 CDATA ノードには子がないため、パラメーターの設定に関係なく、クローンとして作成されたノードには常にデータ コンテンツが含まれます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>ノードの子を、指定した <see cref="T:System.Xml.XmlWriter" /> に保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>CDATA ノードの場合、ローカル名は <see langword="#cdata-section" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>CDATA ノードの場合、名前は <see langword="#cdata-section" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>ノード型。 CDATA ノードの場合、値は XmlNodeType.CDATA です。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary>このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns>現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary>このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>いくつかのクラスによって使用されるさまざまなテキスト操作メソッドを提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlCharacterData" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="data">ドキュメントに追加される文字データが格納されている文字列。</param>
      <param name="doc">文字データを格納する <see cref="T:System.Xml.XmlDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>指定した文字列をノードの文字データの末尾に追加します。</summary>
      <param name="strData">既存の文字列に挿入する文字列。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>ノードから文字の範囲を削除します。</summary>
      <param name="offset">削除を開始する、文字列内の位置。</param>
      <param name="count">削除する文字数。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>指定した文字オフセット位置に指定した文字列を挿入します。</summary>
      <param name="offset">指定した文字列データを挿入する、文字列内の位置。</param>
      <param name="strData">既存の文字列に挿入される文字列データ。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>指定したオフセットを開始位置として、指定した数の文字を指定した文字列に置き換えます。</summary>
      <param name="offset">置換を開始する、文字列内の位置。</param>
      <param name="count">置換する文字数。</param>
      <param name="strData">古い文字列データを置換する新しいデータ。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>指定した範囲から、完全な文字列の部分文字列を取得します。</summary>
      <param name="offset">取得を開始する、文字列内の位置。 オフセットが 0 の場合は、データの先頭が開始点になることを示します。</param>
      <param name="count">取得する文字数。</param>
      <returns>指定した範囲に対応している部分文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>ノードのデータを格納します。</summary>
      <returns>ノードのデータ。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>ノードとノードのすべての子の連結された値を取得または設定します。</summary>
      <returns>ノードとノードのすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>文字単位でデータの長さを取得します。</summary>
      <returns>
        <see cref="P:System.Xml.XmlCharacterData.Data" /> プロパティに格納されている文字列の長さ (文字単位)。 長さは 0、つまり CharacterData ノードが空の場合があります。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">ノードが読み取り専用です。</exception>
      <returns>ノードの値。</returns>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>XML コメントの内容を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlComment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comment">コメント要素の内容。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 コメント ノードには子がないため、パラメーターの設定に関係なく、クローンとして作成されたノードには、常にテキスト コンテンツが含まれます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 コメント ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>コメント ノードの場合、この値は <see langword="#comment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>コメント ノードの場合、この値は <see langword="#comment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>コメント ノードの場合、この値は XmlNodeType.Comment です。</returns>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>XML 名をエンコードおよびデコードし、共通言語ランタイム型と XML スキーマ定義言語 (XSD) 型との間で変換を実行するメソッドを提供します。 データ型を変換する場合、返される値はロケールには依存しません。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlConvert" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>名前をデコードします。 このメソッドは、<see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> メソッドおよび <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> メソッドの変換を元に戻します。</summary>
      <param name="name">変換対象の名前。</param>
      <returns>デコードされた名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>名前を有効な XML ローカル名に変換します。</summary>
      <param name="name">エンコードする名前。</param>
      <returns>エンコードされた名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>名前を有効な XML 名に変換します。</summary>
      <param name="name">変換する対象の名前。</param>
      <returns>無効な文字をエスケープ文字列で置換した名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>XML 仕様に従って有効な名前であることを検証します。</summary>
      <param name="name">エンコードする名前。</param>
      <returns>エンコードされた名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>渡された文字が有効なコロン以外の文字型かどうかを確認します。</summary>
      <param name="ch">検証対象の文字 (コロン以外の文字)。</param>
      <returns>文字が有効なコロン以外の文字型の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>引数の文字が有効な公開識別子の文字の場合は渡された文字インスタンスを返し、それ以外の場合は <see langword="null" /> を返します。</summary>
      <param name="ch">検証対象の <see cref="T:System.Char" /> オブジェクト。</param>
      <returns>文字が有効な公開識別子の文字の場合は渡された文字。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>渡された文字が有効な Start Name Character 型かどうかをチェックします。</summary>
      <param name="ch">検証対象の文字。</param>
      <returns>文字が有効な Start Name Character 型の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>渡された文字が有効な XML 空白文字かどうかを確認します。</summary>
      <param name="ch">検証対象の文字。</param>
      <returns>渡された文字が有効な XML 空白文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>渡された文字が有効な XML 文字かどうかを確認します。</summary>
      <param name="ch">検証対象の文字。</param>
      <returns>渡された文字が有効な XML 文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>渡された文字のサロゲート ペアが有効な XML 文字かどうかを確認します。</summary>
      <param name="lowChar">検証対象のサロゲート文字。</param>
      <param name="highChar">検証対象のサロゲート文字。</param>
      <returns>渡された文字のサロゲート ペアが有効な XML 文字である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Boolean" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が <see langword="Boolean" /> 値を表していません。</exception>
      <returns>
        <see langword="Boolean" /> 値。つまり <see langword="true" /> または <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Byte" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Byte.MinValue" /> 未満の数値か、<see cref="F:System.Byte.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see langword="Byte" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Char" /> に変換します。</summary>
      <param name="s">変換する単一の文字を含んでいる文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> パラメーターの値が <see langword="null" /> です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> パラメーターに複数の文字が含まれています。</exception>
      <returns>単一の文字を表す <see langword="Char" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が空の文字列です。または正しい形式ではありません。</exception>
      <returns>文字列と等価の <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="format">変換後の <see langword="DateTime" /> に適用する形式構造。 有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。 文字列はこの形式に対して妥当性が検査されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> または <paramref name="format" /> が String.Empty です。 
- または - 
 <paramref name="s" /> に、<paramref name="format" /> に対応する日付と時刻が格納されていません。</exception>
      <returns>文字列と等価の <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="formats">変換後の <see langword="DateTime" /> に適用する形式構造を格納している配列。 有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" />、または <paramref name="formats" /> の要素が String.Empty です。 
- または - 
 <paramref name="s" /> に、<paramref name="formats" /> のいずれかの要素に対応する日付と時刻が格納されていません。</exception>
      <returns>文字列と等価の <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>指定された <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> を使用して、<see cref="T:System.String" /> を <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="s">変換する <see cref="T:System.String" /> 値。</param>
      <param name="dateTimeOption">世界協定時刻 (UTC) 日付を使用している場合に、日付を現地時間に変換するか、または UTC のままにするかを指定する列挙値の 1 つ。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOption" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が空の文字列です。または有効な形式ではありません。</exception>
      <returns>
        <see cref="T:System.String" /> と等価の <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>指定した <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="s">変換する文字列。  
  
 注 文字列は、W3C 勧告の XML dateTime 型のサブセットに準拠している必要があります。 詳細については、XML スキーマ仕様の dateTime セクションを参照してください。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">このメソッドに渡した引数が、許容値の範囲外にあります。 許容値については、<see cref="T:System.DateTimeOffset" /> を参照してください。</exception>
      <exception cref="T:System.FormatException">このメソッドに渡した引数が、W3C 勧告の XML dateTime 型のサブセットに準拠していません。 詳細については、XML スキーマ仕様の dateTime セクションを参照してください。</exception>
      <returns>指定した文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>指定した <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="format">変換前の <paramref name="s" /> の形式。 フォーマット パラメーターには、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。 (詳細については、XML スキーマ仕様の dateTime セクションを参照してください。)文字列 <paramref name="s" /> はこの形式に対して妥当性が検査されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> または <paramref name="format" /> が空の文字列です。または指定された形式ではありません。</exception>
      <returns>指定した文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>指定した <see cref="T:System.String" /> を等価の <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <param name="formats">
        <paramref name="s" /> に変換可能な形式の配列。 <paramref name="formats" /> の各形式には、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。 (詳細については、XML スキーマ仕様の dateTime セクションを参照してください。)文字列 <paramref name="s" /> は、これらの形式のいずれかに対して妥当性が検査されます。</param>
      <returns>指定した文字列と等価の <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Decimal" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Decimal.MinValue" /> 未満の数値か、<see cref="F:System.Decimal.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see langword="Decimal" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Double" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Double.MinValue" /> 未満の数値か、<see cref="F:System.Double.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Guid" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <returns>文字列と等価の <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int16" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Int16.MinValue" /> 未満の数値か、<see cref="F:System.Int16.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int32" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Int32.MinValue" /> 未満の数値か、<see cref="F:System.Int32.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Int64" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Int64.MinValue" /> 未満の数値か、<see cref="F:System.Int64.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.SByte" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.SByte.MinValue" /> 未満の数値か、<see cref="F:System.SByte.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see langword="SByte" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.Single" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.Single.MinValue" /> 未満の数値か、<see cref="F:System.Single.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="Boolean" /> の文字列形式。つまり "true" または "false"。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>
        <see cref="T:System.Byte" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="Byte" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>
        <see cref="T:System.Char" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="Char" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>yyyy-MM-ddTHH:mm:ss の形式での <see langword="DateTime" /> の文字列形式。'T' は定数リテラル。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>
        <see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="format">変換後の文字列の表示方法を定義する形式構造。 有効な形式には、"yyyy-MM-ddTHH:mm:sszzzzzz" およびそのサブセットが含まれます。</param>
      <returns>指定した形式での <see langword="DateTime" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>指定された <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> を使用して、<see cref="T:System.DateTime" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する <see cref="T:System.DateTime" /> 値。</param>
      <param name="dateTimeOption">
        <see cref="T:System.DateTime" /> 値を処理する方法を指定する <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 値の 1 つ。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOption" /> 値が有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> または <paramref name="dateTimeOption" /> の値が <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.DateTime" /> と等価の <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>指定した <see cref="T:System.DateTimeOffset" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <returns>指定した <see cref="T:System.DateTimeOffset" /> の <see cref="T:System.String" /> 表現。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>指定した <see cref="T:System.DateTimeOffset" /> を指定した形式の <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <param name="format">変換後の <paramref name="s" /> の形式。 フォーマット パラメーターには、W3C 勧告の XML dateTime 型の任意のサブセットを指定できます。 (詳細については、XML スキーマ仕様の dateTime セクションを参照してください。)</param>
      <returns>指定した <see cref="T:System.DateTimeOffset" /> の指定した形式での <see cref="T:System.String" /> 表現。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="Decimal" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>
        <see cref="T:System.Double" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.Double" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="Guid" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>
        <see cref="T:System.Int16" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.Int16" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.Int32" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.Int64" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>
        <see cref="T:System.SByte" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="SByte" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>
        <see cref="T:System.Single" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.Single" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see langword="TimeSpan" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>
        <see cref="T:System.UInt16" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.UInt16" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>
        <see cref="T:System.UInt32" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.UInt32" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>
        <see cref="T:System.UInt64" /> を <see cref="T:System.String" /> に変換します。</summary>
      <param name="value">変換する値。</param>
      <returns>
        <see cref="T:System.UInt64" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <param name="s">変換する文字列。 文字列の形式は、W3C『XML Schema Part 2: Datatypes』の期間に関する勧告に準拠している必要があります。</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が <see langword="TimeSpan" /> 値を表す正しい形式ではありません。</exception>
      <returns>文字列と等価の <see langword="TimeSpan" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt16" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.UInt16.MinValue" /> 未満の数値か、<see cref="F:System.UInt16.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt32" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.UInt32.MinValue" /> 未満の数値か、<see cref="F:System.UInt32.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>
        <see cref="T:System.String" /> を等価の <see cref="T:System.UInt64" /> に変換します。</summary>
      <param name="s">変換する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> が正しい形式ではありません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> は、<see cref="F:System.UInt64.MinValue" /> 未満の数値か、<see cref="F:System.UInt64.MaxValue" /> より大きい数値を表します。</exception>
      <returns>文字列と等価の <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>W3C 勧告『Extended Markup Language』に照らし合わせて、名前が有効な名前であることを検証します。</summary>
      <param name="name">検証対象となる名前。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> が有効な XML 名ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" /> または String.Empty です。</exception>
      <returns>有効な XML 名の場合は、その名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>W3C 勧告『Extended Markup Language』に照らし合わせて、名前が有効な <see langword="NCName" /> であることを検証します。 <see langword="NCName" /> は、コロンを入れることができない名前です。</summary>
      <param name="name">検証対象となる名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> は、<see langword="null" /> または <c>String.Empty</c> です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> はコロンが含まれていない有効な名前ではありません。</exception>
      <returns>有効な NCName の場合は、その名前。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>W3C 勧告『XML Schema Part 2: Datatypes』に照らし合わせて、文字列が有効なトークンであることを検証します。</summary>
      <param name="name">検証する文字列。</param>
      <exception cref="T:System.Xml.XmlException">文字列が、有効な名前トークンではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" />です。</exception>
      <returns>有効な NMTOKEN の場合は、名前トークン。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>文字列引数のすべての文字が有効な公開識別子の文字の場合、渡された文字列インスタンスを返します。</summary>
      <param name="publicId">検証対象の識別子が格納されている <see cref="T:System.String" />。</param>
      <returns>引数のすべての文字が有効な公開識別子の文字の場合の、渡された文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>W3C 勧告『XML Schema Part 2: Datatypes』に照らし合わせて、文字列が有効なトークンであることを検証します。</summary>
      <param name="token">検証する文字列値。</param>
      <exception cref="T:System.Xml.XmlException">文字列値が、有効なトークンではありません。</exception>
      <returns>有効なトークンの場合は、トークン。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>文字列引数のすべての文字が有効な空白文字の場合、渡された文字列インスタンスを返します。</summary>
      <param name="content">検証する <see cref="T:System.String" />。</param>
      <returns>文字列引数のすべての文字が有効な空白文字の場合は渡された文字列インスタンス。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>文字列引数の中にあるすべての文字とサロゲート ペア文字が有効な XML 文字である場合は、渡された文字列が返されます。それ以外の場合は、見つかった最初の無効な文字に関する情報を含む <see langword="XmlException" /> がスローされます。</summary>
      <param name="content">検証対象の文字が格納されている <see cref="T:System.String" />。</param>
      <returns>文字列引数の中にあるすべての文字とサロゲート ペア文字が有効な XML 文字である場合は渡された文字列。それ以外の場合は、見つかった最初の無効な文字に関する情報を含む <see langword="XmlException" /> がスローされます。</returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>文字列と <see cref="T:System.DateTime" /> の間で変換を行うときに、時刻の値をどのように処理するかを指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>現地時刻として処理します。 <see cref="T:System.DateTime" /> オブジェクトが世界協定時刻 (UTC: Coordinated Universal Time) を表す場合、これを現地時刻に変換します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>変換を行うときに、タイム ゾーン情報が保持されます。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>
        <see cref="T:System.DateTime" /> を文字列に変換する場合は、現地時刻として処理します。 文字列を <see cref="T:System.DateTime" /> に変換する場合、タイム ゾーンが指定されていれば現地時刻に変換します。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>UTC として処理します。 <see cref="T:System.DateTime" /> オブジェクトが現地時刻を表す場合は、UTC に変換します。</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>XML 宣言ノード &lt;?xml version='1.0'...?&gt; を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">XML バージョン。<see cref="P:System.Xml.XmlDeclaration.Version" /> プロパティのトピックを参照してください。</param>
      <param name="encoding">エンコーディング スキーム。<see cref="P:System.Xml.XmlDeclaration.Encoding" /> プロパティのトピックを参照してください。</param>
      <param name="standalone">XML ドキュメントが外部 DTD に依存するかどうかを示します。<see cref="P:System.Xml.XmlDeclaration.Standalone" /> プロパティのトピックを参照してください。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 <see langword="XmlDeclaration" /> ノードには子がないため、パラメーターの設定に関係なく、クローンとして作成されたノードには、常にデータ値が含まれます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>ノードの子を、指定した <see cref="T:System.Xml.XmlWriter" /> に保存します。 <see langword="XmlDeclaration" /> ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>XML ドキュメントのエンコーディング レベルを取得または設定します。</summary>
      <returns>有効な文字エンコーディング名。 通常サポートされている XML の文字エンコーディング名を次に示します。  
  
 <list type="table"><listheader><term> カテゴリ</term><description> エンコーディング名</description></listheader><item><term> Unicode</term><description> UTF-8、UTF-16</description></item><item><term> ISO 10646</term><description> ISO-10646-UCS-2、ISO-10646-UCS-4</description></item><item><term> ISO 8859</term><description> ISO-8859-n ("n" は 1 から 9 までの数字)</description></item><item><term> JIS X-0208-1997</term><description> ISO-2022-JP、Shift_JIS、EUC-JP</description></item></list>  

 この値は省略可能です。 値が設定されていない場合は、このプロパティが String.Empty を返します。  
  
 エンコーディング属性が含まれていない場合は、ドキュメントが書き込まれたり保存されるときに、UTF-8 エンコーディングであると見なされます。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>
        <see langword="XmlDeclaration" /> の連結している値を取得または設定します。</summary>
      <returns>の連結された値 <see langword="XmlDeclaration" /> ( <c> &lt; ? xml</c>と<c>? &gt; </c>の間のすべての要素)。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>
        <see langword="XmlDeclaration" /> ノードの場合、ローカル名は <see langword="xml" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>
        <see langword="XmlDeclaration" /> ノードの場合、名前は <see langword="xml" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see langword="XmlDeclaration" /> ノードの場合、この値は XmlNodeType.XmlDeclaration です。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>スタンドアロン属性の値を取得または設定します。</summary>
      <returns>XML ドキュメントで必要なすべてのエンティティ宣言がドキュメント内に格納されている場合、有効値は <see langword="yes" /> です。外部の文書型宣言 (DTD : Document Type Definition) が必要な場合は <see langword="no" /> です。 XML 宣言内にスタンドアロン属性が存在しない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>
        <see langword="XmlDeclaration" /> の値を取得します。値の設定も可能です。</summary>
      <returns>の内容 <see langword="XmlDeclaration" /> ( <c> &lt; ? xml</c>と<c>? &gt; </c>の間のすべてのもの)。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>ドキュメントの XML バージョンを取得します。</summary>
      <returns>値は常に <see langword="1.0" /> です。</returns>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>XML ドキュメントを表します。 このクラスを使用すると、XML のドキュメントへの読み込み、検証、編集、追加、および配置が可能です。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>このドキュメントに属するノードの <see cref="P:System.Xml.XmlNode.Value" /> が変更されると発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>このドキュメントに属するノードの <see cref="P:System.Xml.XmlNode.Value" /> が変更される直前に発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>このドキュメントに属するノードが別のノードに挿入されると発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>このドキュメントに属するノードが別のノードに挿入される直前に発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>このドキュメントに属するノードが親から削除されると発生します。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>このドキュメントに属するノードがドキュメントから削除される直前に発生します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlDocument" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>
        <see langword="XmlDocument" /> を指定して、<see cref="T:System.Xml.XmlImplementation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="imp">使用する <see langword="XmlImplementation" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <see langword="XmlDocument" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>クローンとして作成された <see langword="XmlDocument" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlDocument.Name" /> を使用して <see cref="T:System.Xml.XmlAttribute" /> を作成します。</summary>
      <param name="name">属性の限定名。 名前にコロンが含まれている場合は、名前のうち最初のコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、最初のコロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。 プリフィックスが xmlns などの認識された組み込みプリフィックスでない限り、<see cref="P:System.Xml.XmlNode.NamespaceURI" /> は空のままです。 この場合、<see langword="NamespaceURI" /> の値は <c>http://www.w3.org/2000/xmlns/</c> です。</param>
      <returns>新しい <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>指定した限定名と <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して <see cref="T:System.Xml.XmlAttribute" /> を作成します。</summary>
      <param name="qualifiedName">属性の限定名。 名前にコロンが含まれている場合は、名前のうちコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、コロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。</param>
      <param name="namespaceURI">属性の namespaceURI。 限定名に xmlns というプレフィックスが含まれている場合、このパラメーターは <c>http://www.w3.org/2000/xmlns/</c> である必要があります。</param>
      <returns>新しい <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlAttribute" /> を作成します。</summary>
      <param name="prefix">属性のプリフィックス (存在する場合)。 String.Empty と <see langword="null" /> は等価です。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI (存在する場合)。 String.Empty と <see langword="null" /> は等価です。 <paramref name="prefix" /> が xmlns の場合、このパラメーターは <c>http://www.w3.org/2000/xmlns/</c> である必要があります。そうでない場合は、例外がスローされます。</param>
      <returns>新しい <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>指定されたデータを格納している <see cref="T:System.Xml.XmlCDataSection" /> を作成します。</summary>
      <param name="data">新しい <see langword="XmlCDataSection" /> の内容。</param>
      <returns>新しい <see langword="XmlCDataSection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>指定されたデータを格納している <see cref="T:System.Xml.XmlComment" /> を作成します。</summary>
      <param name="data">新しい <see langword="XmlComment" /> の内容。</param>
      <returns>新しい <see langword="XmlComment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>指定したプリフィックス、ローカル名、および名前空間 URI の既定の属性を作成します。</summary>
      <param name="prefix">属性のプリフィックス (存在する場合)。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI (存在する場合)。</param>
      <returns>新しい <see cref="T:System.Xml.XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>
        <see cref="T:System.Xml.XmlDocumentFragment" /> を作成します。</summary>
      <returns>新しい <see langword="XmlDocumentFragment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>新しい <see cref="T:System.Xml.XmlDocumentType" /> オブジェクトを返します。</summary>
      <param name="name">ドキュメントの種類の名前。</param>
      <param name="publicId">ドキュメントの種類のパブリック ID または <see langword="null" />。 パブリック URI およびシステム ID を指定して、外部 DTD サブセットの場所を特定できます。</param>
      <param name="systemId">ドキュメントの種類のシステム ID または <see langword="null" />。 外部 DTD サブセットのファイル位置の URL を指定します。</param>
      <param name="internalSubset">ドキュメントの種類の DTD 内部サブセットまたは <see langword="null" />。</param>
      <returns>新しい <see langword="XmlDocumentType" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>指定した名前を使用して要素を作成します。</summary>
      <param name="name">要素の限定名。 名前にコロンが含まれている場合は、名前のうちコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、コロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。 限定名に 'xmlns' というプリフィックスを含めることはできません。</param>
      <returns>新しい <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>限定名と <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して <see cref="T:System.Xml.XmlElement" /> を作成します。</summary>
      <param name="qualifiedName">要素の限定名。 名前にコロンが含まれている場合は、名前のうちコロンの前にある部分が <see cref="P:System.Xml.XmlNode.Prefix" /> プロパティに反映され、コロンの後ろの部分が <see cref="P:System.Xml.XmlDocument.LocalName" /> プロパティに反映されます。 限定名に 'xmlns' というプリフィックスを含めることはできません。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <returns>新しい <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、要素を作成します。</summary>
      <param name="prefix">新しい要素のプリフィックス (存在する場合)。 String.Empty と <see langword="null" /> は等価です。</param>
      <param name="localName">新しい要素のローカル名。</param>
      <param name="namespaceURI">新しい要素の名前空間 URI (存在する場合)。 String.Empty と <see langword="null" /> は等価です。</param>
      <returns>新しい <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.Xml.XmlEntityReference" /> を作成します。</summary>
      <param name="name">エンティティ参照の名前。</param>
      <exception cref="T:System.ArgumentException">名前が正しくありません (たとえば、# で始まる名前は使用できません)</exception>
      <returns>新しい <see langword="XmlEntityReference" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>このドキュメント内を移動するための、新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>指定した <see cref="T:System.Xml.XmlNode" /> に配置されているこのドキュメント内を移動するための <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを作成します。</summary>
      <param name="node">ナビゲーターを最初に配置する <see cref="T:System.Xml.XmlNode" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>指定したノード型、<see cref="P:System.Xml.XmlDocument.Name" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlNode" /> を作成します。</summary>
      <param name="nodeTypeString">新しいノードの <see cref="T:System.Xml.XmlNodeType" /> の文字列バージョン。 このパラメーターは、次の表に示す一覧の値のいずれかである必要があります。</param>
      <param name="name">新しいノードの修飾名。 名前にコロンが含まれている場合は、解析結果は <see cref="P:System.Xml.XmlNode.Prefix" /> コンポーネントと <see cref="P:System.Xml.XmlDocument.LocalName" /> コンポーネントになります。</param>
      <param name="namespaceURI">新しいノードの名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">名前が指定されていませんが、<see langword="XmlNodeType" /> には名前が必要です。または <paramref name="nodeTypeString" /> が以下に示す文字列のいずれでもありません。</exception>
      <returns>新しい <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>指定した <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlDocument.Name" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlNode" /> を作成します。</summary>
      <param name="type">新しいノードの <see langword="XmlNodeType" />。</param>
      <param name="name">新しいノードの修飾名。 名前にコロンが含まれている場合は、解析結果は <see cref="P:System.Xml.XmlNode.Prefix" /> コンポーネントと <see cref="P:System.Xml.XmlDocument.LocalName" /> コンポーネントになります。</param>
      <param name="namespaceURI">新しいノードの名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">名前が指定されませんでした。<see langword="XmlNodeType" /> には名前が必要です。</exception>
      <returns>新しい <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>指定した <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.Name" />、および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を使用して、<see cref="T:System.Xml.XmlNode" /> を作成します。</summary>
      <param name="type">新しいノードの <see langword="XmlNodeType" />。</param>
      <param name="prefix">新しいノードのプリフィックス。</param>
      <param name="name">新しいノードのローカル名。</param>
      <param name="namespaceURI">新しいノードの名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">名前が指定されませんでした。<see langword="XmlNodeType" /> には名前が必要です。</exception>
      <returns>新しい <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>指定した名前とデータを使用して <see cref="T:System.Xml.XmlProcessingInstruction" /> を作成します。</summary>
      <param name="target">処理命令の名前。</param>
      <param name="data">処理命令のデータ。</param>
      <returns>新しい <see langword="XmlProcessingInstruction" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> ノードを作成します。</summary>
      <param name="text">文字列には、&amp;#20;、&amp;#10;、&amp;#13;、&amp;#9; の文字だけを含める必要があります。</param>
      <returns>新しい <see langword="XmlSignificantWhitespace" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>指定したテキストを使用して、<see cref="T:System.Xml.XmlText" /> を作成します。</summary>
      <param name="text">Text ノードのテキスト。</param>
      <returns>新しい <see langword="XmlText" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>
        <see cref="T:System.Xml.XmlWhitespace" /> ノードを作成します。</summary>
      <param name="text">文字列には、&amp;#20;、&amp;#10;、&amp;#13;、&amp;#9; の文字だけを含める必要があります。</param>
      <returns>新しい <see langword="XmlWhitespace" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>指定した値を使用して、<see cref="T:System.Xml.XmlDeclaration" /> ノードを作成します。</summary>
      <param name="version">バージョンは "1.0" にする必要があります。</param>
      <param name="encoding">エンコーディング属性の値。 これは、<see cref="T:System.Xml.XmlDocument" /> をファイルまたはストリームに保存するときに使用するエンコーディングです。したがって、<see cref="T:System.Text.Encoding" /> クラスでサポートされる文字列に設定する必要があります。それ以外の場合、<see cref="M:System.Xml.XmlDocument.Save(System.String)" /> は失敗します。 この値が <see langword="null" /> または String.Empty の場合は、 <see langword="Save" /> メソッドが XML 宣言にエンコーディング属性を書き込まないため、既定のエンコーディング UTF-8 が使用されます。  
  
メモ : <see langword="XmlDocument" /> が <see cref="T:System.IO.TextWriter" /> または <see cref="T:System.Xml.XmlTextWriter" />に保存される場合、このエンコーディング値は破棄されます。 代わりに、 <see langword="TextWriter" /> または <see langword="XmlTextWriter" /> のエンコーディングが使用されます。 これにより、正しいエンコーディングを使用して、書き込まれた XML を読み戻すことができます。</param>
      <param name="standalone">この値は、"yes" または "no" のいずれかにする必要があります。 この値が <see langword="null" /> または String.Empty の場合、<see langword="Save" /> メソッドは XML 宣言にスタンドアロン属性を書き込みません。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="version" /> または <paramref name="standalone" /> の値は上記で指定したものとは別のものです。</exception>
      <returns>新しい <see langword="XmlDeclaration" /> ノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>指定した ID の <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <param name="elementId">一致する属性 ID。</param>
      <returns>一致する ID の <see langword="XmlElement" />。一致する要素が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlDocument.Name" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="name">一致する限定名。 一致するノードの <see langword="Name" /> プロパティに一致します。 特殊値の "*" は、すべてのタグに一致します。</param>
      <returns>一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 <paramref name="name" /> と一致するノードがない場合、返されるコレクションは空になります。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlDocument.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="localName">一致する LocalName。 特殊値の "*" は、すべてのタグに一致します。</param>
      <param name="namespaceURI">一致する NamespaceURI。</param>
      <returns>一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 指定した <paramref name="localName" /> および <paramref name="namespaceURI" /> と一致するノードがない場合、返されるコレクションは空になります。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>別のドキュメントから現在のドキュメントにノードをインポートします。</summary>
      <param name="node">インポートしているノード。</param>
      <param name="deep">詳細クローンを実行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">インポートできないノード型でこのメソッドを呼び出しています。</exception>
      <returns>インポートされた <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>指定したストリームから XML ドキュメントを読み込みます。</summary>
      <param name="inStream">読み込む XML ドキュメントが含まれているストリーム。</param>
      <exception cref="T:System.Xml.XmlException">XML で読み込みまたは解析のエラーが発生しました。 ここでは <see cref="T:System.IO.FileNotFoundException" /> が発生しました。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>指定した <see cref="T:System.IO.TextReader" /> から XML ドキュメントを読み込みます。</summary>
      <param name="txtReader">XML データをドキュメントに送るために使用する <see langword="TextReader" />。</param>
      <exception cref="T:System.Xml.XmlException">XML で読み込みまたは解析のエラーが発生しました。 この場合は、ドキュメントは空のままです。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>指定した URL から XML ドキュメントを読み込みます。</summary>
      <param name="filename">読み込む XML ドキュメントを格納しているファイルの URL。 URL には、ローカル ファイルまたは HTTP の URL (Web アドレス) を指定できます。</param>
      <exception cref="T:System.Xml.XmlException">XML で読み込みまたは解析のエラーが発生しました。 ここでは <see cref="T:System.IO.FileNotFoundException" /> が発生しました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> は長さ 0 の文字列か、空白のみで構成されるか、または <see cref="F:System.IO.Path.InvalidPathChars" />で定義される 1 つ以上の正しくない文字を含んでいます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.IO.PathTooLongException">指定したパス、ファイル名、またはその両方がシステム定義の最大長を超えています。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">指定されたパスが正しくありません (たとえば、マップされていないドライブにあるなど)。</exception>
      <exception cref="T:System.IO.IOException">ファイルを開くときに、I/O エラーが発生しました。</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" /> が読み取り専用のファイルを指定しました。  
  
- または - 
この操作は、現在のプラットフォームではサポートされていません。  
  
- または - 
 <paramref name="filename" /> がディレクトリを指定しました。  
  
- または - 
呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="filename" /> で指定されたファイルが見つかりませんでした。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" /> の形式が正しくありません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Xml.XmlReader" /> から XML ドキュメントを読み込みます。</summary>
      <param name="reader">XML データをドキュメントに送るために使用する <see langword="XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException">XML で読み込みまたは解析のエラーが発生しました。 この場合は、ドキュメントは空のままです。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>指定した文字列から XML ドキュメントを読み込みます。</summary>
      <param name="xml">読み込む XML ドキュメントを格納している文字列。</param>
      <exception cref="T:System.Xml.XmlException">XML で読み込みまたは解析のエラーが発生しました。 この場合は、ドキュメントは空のままです。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> 内の情報に基づいて、<see cref="T:System.Xml.XmlNode" /> オブジェクトを作成します。 リーダーは、ノードまたは属性に配置されている必要があります。</summary>
      <param name="reader">XML ソース。</param>
      <exception cref="T:System.NullReferenceException">リーダーが、EndElement や EndEntity など、正しい DOM ノードに変換されないノード型に配置されています。</exception>
      <returns>新しい <see langword="XmlNode" />。ノードがそれ以上存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>指定したストリームに XML ドキュメントを保存します。</summary>
      <param name="outStream">保存先のストリーム。</param>
      <exception cref="T:System.Xml.XmlException">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>指定した <see cref="T:System.IO.TextWriter" /> に XML ドキュメントを保存します。</summary>
      <param name="writer">保存先の <see langword="TextWriter" />。</param>
      <exception cref="T:System.Xml.XmlException">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>指定したファイルに XML ドキュメントを保存します。 指定したファイルが存在する場合は、このメソッドはそれを上書きします。</summary>
      <param name="filename">ドキュメントを保存するファイルの位置。</param>
      <exception cref="T:System.Xml.XmlException">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> に XML ドキュメントを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
      <exception cref="T:System.Xml.XmlException">操作によって、適切な形式の XML ドキュメントが生成されません (たとえば、ドキュメントの要素がない、XML 宣言が重複している、など)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <see cref="P:System.Xml.XmlDocument.Schemas" /> プロパティに格納されている XML スキーマ定義言語 (XSD) スキーマと照合して <see cref="T:System.Xml.XmlDocument" /> を検証します。</summary>
      <param name="validationEventHandler">スキーマ検証の警告とエラーに関する情報を受け取る <see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">スキーマ検証イベントが発生しましたが、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクトが指定されていませんでした。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>
        <see cref="P:System.Xml.XmlDocument.Schemas" /> プロパティの XML スキーマ定義言語 (XSD) スキーマと照合し、指定された <see cref="T:System.Xml.XmlNode" /> オブジェクトを検証します。</summary>
      <param name="validationEventHandler">スキーマ検証の警告とエラーに関する情報を受け取る <see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクト。</param>
      <param name="nodeToValidate">
        <see cref="T:System.Xml.XmlDocument" /> から作成された、検証対象の <see cref="T:System.Xml.XmlNode" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlNode" /> オブジェクト パラメーターが <see cref="T:System.Xml.XmlDocument" /> から作成されていません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlNode" /> オブジェクト パラメーターが要素、属性、ドキュメント フラグメント、ルート ノードのいずれでもありません。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">スキーマ検証イベントが発生しましたが、<see cref="T:System.Xml.Schema.ValidationEventHandler" /> オブジェクトが指定されていませんでした。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> に <see langword="XmlDocument" /> ノードのすべての子を保存します。</summary>
      <param name="xw">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> に <see langword="XmlDocument" /> ノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>現在のノードのベース URI を取得します。</summary>
      <returns>読み込まれたノードの読み込み元の場所。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>ドキュメントのルート <see cref="T:System.Xml.XmlElement" /> を取得します。</summary>
      <returns>XML ドキュメント ツリーのルートを表す <see langword="XmlElement" />。 ルートが存在しない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>DOCTYPE 宣言を格納しているノードを取得します。</summary>
      <returns>DocumentType (DOCTYPE 宣言) を格納している <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>現在のドキュメントの <see cref="T:System.Xml.XmlImplementation" /> オブジェクトを取得します。</summary>
      <returns>現在のドキュメントの <see langword="XmlImplementation" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>常に <see cref="T:System.InvalidOperationException" /> をスローします。</summary>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
      <returns>ノードとそのすべての子ノードの値。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>現在のノードの子を表すマークアップを取得または設定します。</summary>
      <exception cref="T:System.Xml.XmlException">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
      <returns>現在のノードの子のマークアップ。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>現在のノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>現在のノードが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlDocument" /> ノードは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>
        <see langword="XmlDocument" /> ノードの場合、ローカル名は #document です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>
        <see langword="XmlDocument" /> ノードの場合、名前は #document です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>ドキュメント内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>ノード型。 <see langword="XmlDocument" /> ノードの場合、この値は XmlNodeType.Document です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>現在のノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns>
        <see langword="XmlDocument" /> ノード (<see cref="P:System.Xml.XmlDocument.NodeType" /> が XmlNodeType.Document に等しい) の場合、このプロパティは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>このノードの親ノード (親を持つノードの場合) を取得します。</summary>
      <returns>常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>要素のコンテンツにある空白を保存するかどうかを示す値を取得または設定します。</summary>
      <returns>空白を保存する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>ノードの PSVI (Post-Schema-Validation-Infoset) を返します。</summary>
      <returns>ノードの PSVI を表す <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>この <see cref="T:System.Xml.XmlDocument" /> に関連付けられている <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトを取得または設定します。</summary>
      <returns>この <see cref="T:System.Xml.XmlDocument" /> に関連付けられた、XML スキーマ定義言語 (XSD) のスキーマが格納されている <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。それ以外の場合は空の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>外部リソースを解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <exception cref="T:System.Xml.XmlException">このプロパティは <see langword="null" /> に設定され、外部 DTD または外部エンティティが検出されました。</exception>
      <returns>使用する <see langword="XmlResolver" />。  
  
.NET Framework Version 1.1 の場合、完全に信頼されている呼び出し元だけが <see langword="XmlResolver" /> を指定できます。</returns>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>ツリー挿入操作に使用できる、簡易オブジェクトを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocumentFragment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="ownerDocument">フラグメントのソースである XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>このノードの子を表すマークアップを取得または設定します。</summary>
      <exception cref="T:System.Xml.XmlException">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
      <returns>このノードの子のマークアップ。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>
        <see langword="XmlDocumentFragment" /> ノードの場合、ローカル名は <see langword="#document-fragment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>
        <see langword="XmlDocumentFragment" /> の場合、名前は <see langword="#document-fragment" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see langword="XmlDocumentFragment" /> ノードの場合、この値は XmlNodeType.DocumentFragment です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns>このノードが属する <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns>このノードの親。  
  
<see langword="XmlDocumentFragment" /> ノードの場合、このプロパティは常に <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>ドキュメント型宣言を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlDocumentType" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">修飾名。<see cref="P:System.Xml.XmlDocumentType.Name" /> プロパティを参照してください。</param>
      <param name="publicId">公開識別子。<see cref="P:System.Xml.XmlDocumentType.PublicId" /> プロパティを参照してください。</param>
      <param name="systemId">システム識別子。<see cref="P:System.Xml.XmlDocumentType.SystemId" /> プロパティを参照してください。</param>
      <param name="internalSubset">DTD 内部サブセット。<see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> プロパティを参照してください。</param>
      <param name="doc">親ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 ドキュメント型ノードの場合、パラメーターの設定に関係なく、クローンとして作成されたノードには常にサブツリーが含まれます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 <see langword="XmlDocumentType" /> ノードの場合、このメソッドは無効です。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>ドキュメント型宣言で宣言された <see cref="T:System.Xml.XmlEntity" /> ノードのコレクションを取得します。</summary>
      <returns>
        <see langword="XmlEntity" /> ノードを格納している <see cref="T:System.Xml.XmlNamedNodeMap" />。 返された <see langword="XmlNamedNodeMap" /> は読み取り専用です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>DOCTYPE 宣言の文書型定義 (DTD : Document Type Definition) 内部サブセットの値を取得します。</summary>
      <returns>DOCTYPE の DTD 内部サブセット。 DTD 内部サブセットがない場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> ノードが読み取り専用の場合は。それ以外の場合は <see langword="false" /> 。  
  
DocumentType ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>DocumentType ノードの場合、このプロパティはドキュメント型の名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>DocumentType ノードの場合、このプロパティはドキュメント型の名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>DocumentType ノードの場合、この値は XmlNodeType.DocumentType です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>ドキュメント型宣言に存在する <see cref="T:System.Xml.XmlNotation" /> ノードのコレクションを取得します。</summary>
      <returns>
        <see langword="XmlNotation" /> ノードを格納している <see cref="T:System.Xml.XmlNamedNodeMap" />。 返された <see langword="XmlNamedNodeMap" /> は読み取り専用です。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>DOCTYPE 宣言のパブリック ID の値を取得します。</summary>
      <returns>DOCTYPE のパブリック ID。 パブリック ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>DOCTYPE 宣言のシステム ID の値を取得します。</summary>
      <returns>DOCTYPE のシステム ID。 システム ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>1 つの要素を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlElement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prefix">名前空間プリフィックス。<see cref="P:System.Xml.XmlElement.Prefix" /> プロパティのトピックを参照してください。</param>
      <param name="localName">ローカル名。<see cref="P:System.Xml.XmlElement.LocalName" /> プロパティのトピックを参照してください。</param>
      <param name="namespaceURI">名前空間 URI。<see cref="P:System.Xml.XmlElement.NamespaceURI" /> プロパティのトピックを参照してください。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノード (ノードが <see langword="XmlElement" /> の場合はその属性も含む) だけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>指定された名前を持つ属性の値を返します。</summary>
      <param name="name">取得する属性の名前。 これは修飾名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <returns>指定した属性の値。 一致する属性が見つからなかった場合や、属性には指定された値も既定値もない場合は、空の文字列が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の属性の値を返します。</summary>
      <param name="localName">取得する属性のローカル名。</param>
      <param name="namespaceURI">取得する属性の名前空間 URI。</param>
      <returns>指定した属性の値。 一致する属性が見つからなかった場合や、属性には指定された値も既定値もない場合は、空の文字列が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>指定された名前を持つ <see langword="XmlAttribute" /> を返します。</summary>
      <param name="name">取得する属性の名前。 これは修飾名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <returns>指定された <see langword="XmlAttribute" /> または一致する属性が見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の <see cref="T:System.Xml.XmlAttribute" /> を返します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>指定された <see langword="XmlAttribute" /> または一致する属性が見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlElement.Name" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="name">一致する名前タグ。 これは修飾名です。 一致するノードの <see langword="Name" /> プロパティに一致します。 アスタリスク (*) は、すべてのタグに一致する特殊値です。</param>
      <returns>一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 一致するノードがない場合、リストは空です。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlElement.LocalName" /> および <see cref="P:System.Xml.XmlElement.NamespaceURI" /> に一致するすべての子孫の要素のリストを格納している <see cref="T:System.Xml.XmlNodeList" /> を返します。</summary>
      <param name="localName">一致するローカル名。 アスタリスク (*) は、すべてのタグに一致する特殊値です。</param>
      <param name="namespaceURI">一致する名前空間 URI。</param>
      <returns>一致しているすべてのノードのリストを格納している <see cref="T:System.Xml.XmlNodeList" />。 一致するノードがない場合、リストは空です。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>現在のノードに指定した名前の属性があるかどうかを判断します。</summary>
      <param name="name">検索対象の属性名です。 これは修飾名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <returns>現在のノードに指定した属性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の属性が現在のノードにあるかどうかを確認します。</summary>
      <param name="localName">検索する属性のローカル名。</param>
      <param name="namespaceURI">検索する属性の名前空間 URI。</param>
      <returns>現在のノードに指定した属性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>すべての指定した属性と、現在のノードの子ノードを削除します。 既存の属性は削除されません。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>指定されたすべての属性が要素から削除されます。 既存の属性は削除されません。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>名前によって属性を削除します。</summary>
      <param name="name">削除する属性の名前。 これは修飾名です。 一致するノードの <see langword="Name" /> プロパティに一致します。</param>
      <exception cref="T:System.ArgumentException">ノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の属性を削除します。 (削除された属性に既定値がある場合は、すぐに置き換えられます)。</summary>
      <param name="localName">削除する属性のローカル名。</param>
      <param name="namespaceURI">削除する属性の名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">ノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>指定したインデックスの属性ノードを要素から削除します。 (削除された属性に既定値がある場合は、すぐに置き換えられます)。</summary>
      <param name="i">削除するノードのインデックス。 最初のノードのインデックスは 0 です。</param>
      <returns>削除された属性ノード。指定したインデックス位置にノードがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>ローカル名および名前空間 URI で指定された <see cref="T:System.Xml.XmlAttribute" /> を削除します。 (削除された属性に既定値がある場合は、すぐに置き換えられます)。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">このノードは読み取り専用です。</exception>
      <returns>削除された <see langword="XmlAttribute" />。<see langword="null" /> に一致する属性ノードがない場合は <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>指定した <see cref="T:System.Xml.XmlAttribute" /> を削除します。</summary>
      <param name="oldAttr">削除する <see langword="XmlAttribute" /> ノード。 削除された属性に既定値がある場合は、すぐに置き換えられます。</param>
      <exception cref="T:System.ArgumentException">このノードは読み取り専用です。</exception>
      <returns>削除された <see langword="XmlAttribute" />。<paramref name="oldAttr" /> が <see langword="null" /> の属性ノードでない場合は <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>指定した名前の属性の値を設定します。</summary>
      <param name="name">作成または変更する属性の名前。 これは修飾名です。 名前にコロンが含まれている場合、その名前はプリフィックスとローカル名コンポーネントに解析されます。</param>
      <param name="value">属性に設定する値。</param>
      <exception cref="T:System.Xml.XmlException">指定した名前に無効な文字が含まれています。</exception>
      <exception cref="T:System.ArgumentException">ノードは読み取り専用です。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の属性の値を設定します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <param name="value">属性に設定する値。</param>
      <returns>属性値。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>指定した <see cref="T:System.Xml.XmlAttribute" /> を追加します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>追加する <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>指定した <see cref="T:System.Xml.XmlAttribute" /> を追加します。</summary>
      <param name="newAttr">この要素の属性コレクションに追加する <see langword="XmlAttribute" /> ノード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="newAttr" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。 または、このノードが読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="newAttr" /> は、既に別の <see langword="XmlElement" /> オブジェクトの属性になっています。 <see langword="XmlAttribute" /> ノードのクローンを明示的に作成し、それらのクローンを他の <see langword="XmlElement" /> オブジェクトで再利用する必要があります。</exception>
      <returns>属性によって同じ名前の既存の属性が置換される場合は、古い <see langword="XmlAttribute" /> が返されます。それ以外の場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> に現在のノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>このノードの属性の一覧を格納している <see cref="T:System.Xml.XmlAttributeCollection" /> を取得します。</summary>
      <returns>このノードの属性の一覧を格納している <see cref="T:System.Xml.XmlAttributeCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>現在のノードに属性があるかどうかを示す <see langword="boolean" /> 値を取得します。</summary>
      <returns>現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>ノードとそのすべての子の連結している値を取得または設定します。</summary>
      <returns>ノードとすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>このノードの子だけを表すマークアップを取得または設定します。</summary>
      <exception cref="T:System.Xml.XmlException">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
      <returns>このノードの子のマークアップ。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>要素のタグ形式を取得または設定します。</summary>
      <returns>
        <see langword="true" />要素を短いタグ形式 "item/" でシリアル化する場合は &lt; &gt; <see langword="false" /> 。長い形式の場合は " &lt; item/ &gt; &lt; item &gt; "。  
  
このプロパティを設定する際、<see langword="true" /> に設定された場合は、要素の子が削除され、要素は短いタグ形式でシリアル化されます。 <see langword="false" /> に設定された場合は、プロパティの値が変更されます (要素にコンテンツがあるかどうかは関係ありません)。要素が空の場合は、長い形式でシリアル化されます。  
  
このプロパティは、ドキュメント オブジェクト モデル (DOM) の Microsoft 拡張機能です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>現在のノードのローカル名を取得します。</summary>
      <returns>プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" /> は要素 &lt; bk: book の book です &gt; 。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>ノードの限定名。 <see langword="XmlElement" /> ノードの場合、これは要素のタグ名です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>このノードの名前空間 URI を取得します。</summary>
      <returns>このノードの名前空間 URI。 名前空間 URI がない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>この要素の直後の <see cref="T:System.Xml.XmlNode" /> を取得します。</summary>
      <returns>この要素の直後の <see langword="XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>ノード型。 <see langword="XmlElement" /> ノードの場合、この値は XmlNodeType.Element です。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns>この要素が属する <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary>このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns>現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>このノードの名前空間プリフィックスを取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">このノードは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException">指定したプレフィックスに無効な文字が含まれています。  
  
指定されたプリフィックスの書式が正しくありません。  
  
このノードの属性の namespaceURI が <see langword="null" /> です。  
  
指定したプレフィックスは "xml" で、このノードの namespaceURI が http://www.w3.org/XML/1998/namespace と異なります。</exception>
      <returns>このノードの名前空間プリフィックス。 プリフィックスがない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>スキーマ検証の結果、このノードに割り当てられているスキーマ検証後の infoset を取得します。</summary>
      <returns>このノードのスキーマ検証後の infoset が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>エンティティの宣言を表します (&lt;!ENTITY... &gt; など)。</summary>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。 エンティティ ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlEntity" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">エンティティ ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlEntity" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</exception>
      <returns>メソッドの呼び出し元の <see cref="T:System.Xml.XmlNode" /> のコピー。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 <see langword="XmlEntity" /> ノードの場合、このメソッドは無効です。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。 <see langword="XmlEntity" /> ノードの場合、このメソッドは無効です。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>現在のノードのベース URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>読み込まれたノードの読み込み元の場所。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>エンティティ ノードとそのすべての子の連結された値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">プロパティを設定しようとしています。</exception>
      <returns>ノードとすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>このノードの子を表すマークアップを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">プロパティを設定しようとしています。</exception>
      <returns>
        <see langword="XmlEntity" /> ノードの場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> ノードが読み取り専用の場合は。それ以外の場合は <see langword="false" /> 。  
  
<see langword="XmlEntity" /> ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>ノードの名前を名前空間プリフィックスを付けずに取得します。</summary>
      <returns>
        <see langword="XmlEntity" /> ノードの場合、このプロパティはエンティティの名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>ノードの名前を取得します。</summary>
      <returns>エンティティの名前。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>ノードの種類を取得します。</summary>
      <returns>ノード型。 <see langword="XmlEntity" /> ノードの場合、値は XmlNodeType.Entity です。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>エンティティ宣言のオプションの NDATA 属性の名前を取得します。</summary>
      <returns>NDATA 属性の名前。 NDATA がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>このノードとそのすべての子を表すマークアップを取得します。</summary>
      <returns>
        <see langword="XmlEntity" /> ノードの場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>エンティティ宣言のパブリック ID の値を取得します。</summary>
      <returns>エンティティのパブリック ID。 パブリック ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>エンティティ宣言のシステム ID の値を取得します。</summary>
      <returns>エンティティのシステム ID。 システム ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>エンティティ参照ノードを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlEntityReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">エンティティ参照の名前。<see cref="P:System.Xml.XmlEntityReference.Name" /> プロパティに関するトピックを参照してください。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 <see langword="XmlEntityReference" /> ノードの場合、このメソッドは常に子を持たないエンティティ参照を返します。 置換テキストは、ノードが親に挿入されると設定されます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>現在のノードのベース URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>読み込まれたノードの読み込み元の場所。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>ノードが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
  
<see langword="XmlEntityReference" /> ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>
        <see langword="XmlEntityReference" /> ノードの場合、このプロパティは参照されたエンティティの名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>ノードの名前を取得します。</summary>
      <returns>参照されたエンティティの名前。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>ノードの種類を取得します。</summary>
      <returns>ノード型。 <see langword="XmlEntityReference" /> ノードの場合、値は XmlNodeType.EntityReference です。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">ノードが読み取り専用です。</exception>
      <exception cref="T:System.InvalidOperationException">プロパティを設定しています。</exception>
      <returns>ノードの値。 <see langword="XmlEntityReference" /> ノードの場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>最後の例外に関する詳細情報を返します。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>
        <see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトおよび <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトの情報を使用して、<see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> のすべてのプロパティを格納している <see langword="XmlException" /> オブジェクト。</param>
      <param name="context">コンテキスト情報を格納している <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーの説明。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>
        <see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> をスローした <see langword="XmlException" /> (存在する場合)。 この値は、<see langword="null" /> の場合もあります。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>指定したメッセージ、内部例外、行番号、行の位置を使用して、<see langword="XmlException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーの説明。</param>
      <param name="innerException">現在の例外の原因となった例外。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="lineNumber">エラーの発生場所を示す行番号。</param>
      <param name="linePosition">エラーの発生場所を示す行の位置。</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>すべての <see langword="XmlException" /> プロパティを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> の <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>エラーの発生場所を示す行番号を取得します。 行番号は 1 から始まります。</summary>
      <returns>エラーの発生場所を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>エラーの発生場所を示す行の位置を取得します。 行の位置は 1 から始まります。</summary>
      <returns>エラーの発生場所を示す行の位置。</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>現在の例外を説明するメッセージを取得します。</summary>
      <returns>例外の原因を説明するエラー メッセージ。</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>XML ファイルの場所を取得します。</summary>
      <returns>XML データのソース URI。 ソース URI がない場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>
        <see cref="T:System.Xml.XmlDocument" /> オブジェクトのセットのコンテキストを定義します。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlImplementation" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <see cref="T:System.Xml.XmlImplementation" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">
        <see cref="T:System.Xml.XmlNameTable" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>新しい <see cref="T:System.Xml.XmlDocument" /> を作成します。</summary>
      <returns>新しい <see langword="XmlDocument" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>DOM (Document Object Model) 実装が特定の機能を実装するかどうかをテストします。</summary>
      <param name="strFeature">テスト対象の機能のパッケージ名。 この名前は大文字と小文字を区別しません。</param>
      <param name="strVersion">これは、テストする対象のパッケージ名のバージョン番号です。 バージョンを指定しない場合 (<see langword="null" />)、機能のいずれかのバージョンがサポートされていれば、このメソッドは <see langword="true" /> を返します。</param>
      <returns>指定したバージョンでその機能が実装される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
  
<see langword="HasFeature" /> が <see langword="true" /> を返す組み合わせを次の表に示します。  
  
 <list type="table"><listheader><term> strFeature</term><description> strVersion</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description> 2.0</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>このノードの直前または直後のノードを取得します。</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>このノードの直後のノードを取得します。</summary>
      <returns>このノードの直後の <see cref="T:System.Xml.XmlNode" />。直後のノードが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>このノードの直前のノードを取得します。</summary>
      <returns>直前の <see cref="T:System.Xml.XmlNode" />。直前のノードが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>名前またはインデックスによってアクセス可能なノードのコレクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>
        <see langword="XmlNamedNodeMap" /> 内のノードのコレクションに対する "foreach" スタイルの反復をサポートします。</summary>
      <returns>列挙子オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>名前で指定した <see cref="T:System.Xml.XmlNode" /> を取得します。</summary>
      <param name="name">取得するノードの限定名。 一致するノードの <see cref="P:System.Xml.XmlNode.Name" /> プロパティに一致します。</param>
      <returns>指定した名前の <see langword="XmlNode" />。一致するノードが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>一致する <see cref="P:System.Xml.XmlNode.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を持つノードを取得します。</summary>
      <param name="localName">取得するノードのローカル名。</param>
      <param name="namespaceURI">取得するノードの名前空間 URI (Uniform Resource Identifier)。</param>
      <returns>一致するローカル名および名前空間 URI を持つ <see cref="T:System.Xml.XmlNode" />。一致するノードが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>
        <see langword="XmlNamedNodeMap" /> 内の指定したインデックス位置にあるノードを取得します。</summary>
      <param name="index">
        <see langword="XmlNamedNodeMap" /> から取得するノードのインデックス位置。 インデックスは 0 から始まるため、最初のノードのインデックスは 0 で、最後のノードのインデックスは <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1 になります。</param>
      <returns>指定したインデックスにある <see cref="T:System.Xml.XmlNode" /> です。 <paramref name="index" /> が 0 未満か、<see cref="P:System.Xml.XmlNamedNodeMap.Count" /> プロパティ以上の場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>ノードを <see langword="XmlNamedNodeMap" /> から削除します。</summary>
      <param name="name">削除するノードの限定名。 名前は、一致するノードの <see cref="P:System.Xml.XmlNode.Name" /> プロパティに一致します。</param>
      <returns>この <see langword="XmlNode" /> から削除した <see langword="XmlNamedNodeMap" />。一致するノードが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>一致する <see cref="P:System.Xml.XmlNode.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> を持つノードを削除します。</summary>
      <param name="localName">削除するノードのローカル名。</param>
      <param name="namespaceURI">削除するノードの名前空間 URI。</param>
      <returns>削除した <see cref="T:System.Xml.XmlNode" />。一致するノードが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>
        <see cref="T:System.Xml.XmlNode" /> をその <see cref="P:System.Xml.XmlNode.Name" /> プロパティを使用して追加します。</summary>
      <param name="node">
        <see langword="XmlNode" /> に格納する <see langword="XmlNamedNodeMap" />。 その名前のノードが既にマップに存在している場合は、新しいノードに置き換えられます。</param>
      <exception cref="T:System.ArgumentException">
        <see langword="XmlNamedNodeMap" /> を作成したものとは異なる <see cref="T:System.Xml.XmlDocument" /> から <paramref name="node" /> が作成されました。または、<see langword="XmlNamedNodeMap" /> が読み取り専用です。</exception>
      <returns>
        <paramref name="node" /> によって同じ名前の既存のノードが置換される場合、古いノードが返されます。それ以外の場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>
        <see langword="XmlNamedNodeMap" /> 内のノードの数を取得します。</summary>
      <returns>ノードの数。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>名前空間の解決、コレクションへの追加と削除を実行します。また、名前空間のスコープ管理機能を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameTable">使用する <see cref="T:System.Xml.XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <see langword="null" /> がコンストラクターに渡されます。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>指定した名前空間をコレクションに追加します。</summary>
      <param name="prefix">追加する名前空間に関連付けるプリフィックス。 String.Empty を使用して、既定の名前空間を追加します。  
  
 注 XML Path Language (XPath) 式の名前空間の解決に <see cref="T:System.Xml.XmlNamespaceManager" /> を使用する場合は、プレフィックスを指定する必要があります。 XPath 式にプレフィックスが含まれていない場合、名前空間 URI (Uniform Resource Identifier) は、空の名前空間であると見なされます。 XPath 式および <see cref="T:System.Xml.XmlNamespaceManager" /> の詳細については、<see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> メソッドおよび <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> メソッドの説明を参照してください。</param>
      <param name="uri">追加する名前空間。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="prefix" /> の値が "xml" または "xmlns" です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> または <paramref name="uri" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" /> 内の名前空間を反復処理するために使用する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> によって格納されているプレフィックスを含む <see cref="T:System.Xml.XmlNamespaceManager" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>現在スコープ内にある名前空間を列挙するために使用できる、プレフィックスをキーとした、名前空間の名前のコレクションを取得します。</summary>
      <param name="scope">返される名前空間ノードの種類を指定する列挙値。</param>
      <returns>現在スコープ内にある名前空間とプレフィックスのペアのコレクション。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>提供されたプリフィックスに現在のプッシュされたスコープに対して定義された名前空間があるかどうかを示す値を取得します。</summary>
      <param name="prefix">検索する対象の名前空間のプリフィックス。</param>
      <returns>定義された名前空間がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>指定したプリフィックスの名前空間 URI を取得します。</summary>
      <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間に一致するようにするには、String.Empty を渡します。</param>
      <returns>マップされた名前空間がない場合は <paramref name="prefix" /> または <see langword="null" /> の名前空間 URI。 返される文字列は最小単位に分割されます。  
  
最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> クラスを参照してください。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>指定した名前空間 URI に対して宣言されたプリフィックスを検索します。</summary>
      <param name="uri">プリフィックスに対して解決する名前空間。</param>
      <returns>一致するプリフィックス。 割り当てられたプリフィックスがない場合、メソッドは String.Empty を返します。 null 値を指定した場合、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>名前空間スコープをスタックからポップします。</summary>
      <returns>スタックに名前空間スコープが残されている場合は <see langword="true" />。ポップする名前空間がそれ以上ない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>名前空間スコープをスタックにプッシュします。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>指定したプリフィックスの指定した名前空間を削除します。</summary>
      <param name="prefix">名前空間のプリフィックス。</param>
      <param name="uri">指定したプリフィックスに対して削除する名前空間。 削除された名前空間は、現在の名前空間スコープに由来しています。 現在のスコープ外の名前空間は無視されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> または <paramref name="uri" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>既定の名前空間の名前空間 URI を取得します。</summary>
      <returns>既定の名前空間の名前空間 URI。既定の名前空間がない場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>このオブジェクトに関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>このオブジェクトで使用される <see cref="T:System.Xml.XmlNameTable" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>名前空間のスコープを定義します。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>現在のノードのスコープに定義されているすべての名前空間。 この名前空間には、常に暗黙的に宣言される xmlns:xml 名前空間が含まれます。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>常に暗黙的に宣言される xmlns:xml 名前空間を除く、現在のノードのスコープに定義されているすべての名前空間。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>現在のノードでローカルに定義されているすべての名前空間。</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>最小単位に分割された文字列オブジェクトのテーブル。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定した文字列を最小単位に分割し、<see langword="XmlNameTable" /> に追加します。</summary>
      <param name="array">追加する名前を格納している文字配列。</param>
      <param name="offset">名前の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="length">名前の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
  
- または - 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
- または - 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
<paramref name="length" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.</exception>
      <returns>新しく最小単位に分割された文字列。既に存在している場合は既存の文字列。 長さが 0 の場合は、String.Empty が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した文字列を最小単位に分割し、<see langword="XmlNameTable" /> に追加します。</summary>
      <param name="array">追加する名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <returns>新しく最小単位に分割された文字列。既に存在している場合は既存の文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定した配列内の指定した範囲の文字と同じ文字を含む、最小単位に分割された文字列を取得します。</summary>
      <param name="array">検索対象の名前を格納している文字配列。</param>
      <param name="offset">名前の最初の文字を指定する配列の、0 から始まるインデックス番号。</param>
      <param name="length">名前の文字数。</param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />  
  
- または - 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
- または - 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
<paramref name="length" /> =0 の場合は、上記の条件によって例外がスローされることはありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0.</exception>
      <returns>最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は <see langword="null" />。 <paramref name="length" /> が 0 の場合は、String.Empty が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した文字列と同じ値を含む最小単位に分割された文字列を取得します。</summary>
      <param name="array">検索する名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <returns>最小単位に分割された文字列。文字列がまだ最小単位に分割されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>XML ドキュメント内の単一のノードを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>このノードの子ノードのリストの末尾に、指定したノードを追加します。</summary>
      <param name="newChild">追加するノード。 追加するノードのすべての内容が、指定した場所に移動します。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
このノードは読み取り専用です。</exception>
      <returns>追加されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>このノードの複製を作成します。</summary>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>派生クラスでオーバーライドされた場合は、ノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">クローンを作成できないノード型でこのメソッドを呼び出しています。</exception>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>このオブジェクト内を移動するための <see cref="T:System.Xml.XPath.XPathNavigator" /> を作成します。</summary>
      <returns>ノードに移動するために使用される <see langword="XPathNavigator" /> オブジェクト。 <see langword="XPathNavigator" /> は、メソッドの呼び出し元のノードに配置されます。 ドキュメントのルートには配置されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>現在のノード内の子ノードを反復処理する列挙子を取得します。</summary>
      <returns>現在のノードの子ノードを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>現在のノードのスコープ内にある指定したプレフィックスに対する最も近い xmlns 宣言を検索し、宣言内の名前空間 URI を返します。</summary>
      <param name="prefix">検索対象の名前空間 URI を持つプレフィックス。</param>
      <returns>指定したプリフィックスの名前空間 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>現在のノードのスコープ内にある指定した名前空間 URI に対する最も近い xmlns 宣言を検索し、宣言で定義されているプレフィックスを返します。</summary>
      <param name="namespaceURI">検索対象のプリフィックスを持つ名前空間 URI。</param>
      <returns>指定した名前空間 URI のプリフィックス。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>指定したノードを指定した参照ノードの直後に挿入します。</summary>
      <param name="newChild">挿入するノードです。</param>
      <param name="refChild">参照ノードです。 <paramref name="newChild" /> は、<paramref name="refChild" /> の後に配置されます。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
<paramref name="refChild" /> がこのノードの子ではありません。  
  
このノードは読み取り専用です。</exception>
      <returns>挿入されるノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>指定したノードを指定した参照ノードの直前に挿入します。</summary>
      <param name="newChild">挿入するノードです。</param>
      <param name="refChild">参照ノードです。 <paramref name="newChild" /> は、このノードの前に配置されます。</param>
      <exception cref="T:System.InvalidOperationException">現在のノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
<paramref name="refChild" /> がこのノードの子ではありません。  
  
このノードは読み取り専用です。</exception>
      <returns>挿入されるノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>この XmlNode の一番下のサブツリーまで含め、すべての XmlText ノードをマークアップ (タグ、コメント、処理命令、CDATA セクション、およびエンティティ参照) だけが XmlText ノードを区分する "通常の" 書式にします。したがって、隣接する XmlText ノードはありません。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>このノードの子ノードのリストの先頭に、指定したノードを追加します。</summary>
      <param name="newChild">追加するノード。 追加するノードのすべての内容が、指定した場所に移動します。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
このノードは読み取り専用です。</exception>
      <returns>追加されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>現在のノードのすべての子ノードと属性の両方、またはそのいずれかを削除します。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>指定した子ノードを削除します。</summary>
      <param name="oldChild">削除されるノード。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldChild" /> がこのノードの子ではありません。 または、このノードが読み取り専用です。</exception>
      <returns>削除されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>子ノード <paramref name="oldChild" /> を <paramref name="newChild" /> ノードに置き換えます。</summary>
      <param name="newChild">子リストに入れる新しいノード。</param>
      <param name="oldChild">リスト内の置換されるノード。</param>
      <exception cref="T:System.InvalidOperationException">このノードは、<paramref name="newChild" /> ノードの型の子ノードが許可されない型です。  
  
<paramref name="newChild" /> がこのノードの先祖です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newChild" /> は、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
このノードは読み取り専用です。  
  
<paramref name="oldChild" /> がこのノードの子ではありません。</exception>
      <returns>置き換えられたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>XPath 式と一致するノードのリストを選択します。</summary>
      <param name="xpath">XPath 式。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式にプリフィックスが含まれています。 「XPath の例」をご覧ください。</exception>
      <returns>XPath クエリと一致するノードのコレクションを格納している <see cref="T:System.Xml.XmlNodeList" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>XPath 式と一致するノードのリストを選択します。 XPath 式で見つかったプリフィックスは、指定した <see cref="T:System.Xml.XmlNamespaceManager" /> を使用して解決されます。</summary>
      <param name="xpath">XPath 式。 「XPath の例」をご覧ください。</param>
      <param name="nsmgr">XPath 式のプリフィックスの名前空間を解決するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式に、<see langword="XmlNamespaceManager" /> で定義されていないプリフィックスが含まれています。</exception>
      <returns>XPath クエリと一致するノードのコレクションを格納している <see cref="T:System.Xml.XmlNodeList" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>XPath 式と一致する最初の <see langword="XmlNode" /> を選択します。</summary>
      <param name="xpath">XPath 式。 「XPath の例」をご覧ください。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式にプリフィックスが含まれています。</exception>
      <returns>XPath クエリと一致する最初の <see langword="XmlNode" />。一致するノードが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>XPath 式と一致する最初の <see langword="XmlNode" /> を選択します。 XPath 式で見つかったプリフィックスは、指定した <see cref="T:System.Xml.XmlNamespaceManager" /> を使用して解決されます。</summary>
      <param name="xpath">XPath 式。 「XPath の例」をご覧ください。</param>
      <param name="nsmgr">XPath 式のプリフィックスの名前空間を解決するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式に、<see langword="XmlNamespaceManager" /> で定義されていないプリフィックスが含まれています。</exception>
      <returns>XPath クエリと一致する最初の <see langword="XmlNode" />。一致するノードが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>DOM 実装が特定の機能を実装するかどうかをテストします。</summary>
      <param name="feature">テスト対象の機能のパッケージ名。 この名前は大文字と小文字を区別しません。</param>
      <param name="version">テストする対象のパッケージ名のバージョン番号。 バージョンを指定しない場合、つまりバージョンが null の場合は、いずれかのバージョンの機能がサポートされていれば、メソッドは true を返します。</param>
      <returns>指定したバージョンでその機能が実装される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="true" /> を返す組み合わせを次の表に示します。  
  
 <list type="table"><listheader><term> 機能</term><description> バージョン</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description> 2.0</description></item></list></returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.XmlNode.GetEnumerator" />」をご覧ください。</summary>
      <returns>コレクションの列挙子。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.XmlNode.Clone" />」をご覧ください。</summary>
      <returns>ノードの呼び出し元ノードのコピー。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>派生クラスでオーバーライドされた場合は、指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子ノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>派生クラスでオーバーライドされた場合は、指定した <see cref="T:System.Xml.XmlWriter" /> に現在のノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>このノードの属性を格納している <see cref="T:System.Xml.XmlAttributeCollection" /> を取得します。</summary>
      <returns>ノードの属性を格納している <see langword="XmlAttributeCollection" />。  
  
XmlNodeType.Element 型のノードの場合は、ノードの属性が返されます。 それ以外の場合は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>現在のノードのベース URI を取得します。</summary>
      <returns>ノードの読み込み元の場所。ノードにベース URI がない場合は String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>ノードのすべての子ノードを取得します。</summary>
      <returns>ノードのすべての子ノードを格納しているオブジェクト。  
  
子ノードがない場合、このプロパティは空の <see cref="T:System.Xml.XmlNodeList" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>ノードの最初の子を取得します。</summary>
      <returns>ノードの最初の子。 そのようなノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>このノードに子ノードがあるかどうかを示す値を取得します。</summary>
      <returns>ノードが子ノードを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>ノードとそのすべての子の連結された値を取得または設定します。</summary>
      <returns>ノードとそのすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>このノードの子ノードだけを表すマークアップを取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">子ノードを持つことができないノードでこのプロパティを設定します。</exception>
      <exception cref="T:System.Xml.XmlException">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
      <returns>このノードの子ノードのマークアップ。  
  
 <block subset="none" type="note"><para><see langword="InnerXml" /> は既定の属性を返しません。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> ノードが読み取り専用の場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlNode.Name" /> の最初の子要素を取得します。</summary>
      <param name="name">取得する要素の限定名。</param>
      <returns>指定した名前と一致する最初の <see cref="T:System.Xml.XmlElement" />。 一致するものがない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>指定した <see cref="P:System.Xml.XmlNode.LocalName" /> および <see cref="P:System.Xml.XmlNode.NamespaceURI" /> の最初の子要素を取得します。</summary>
      <param name="localname">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <returns>
        <paramref name="localname" /> および <paramref name="ns" /> が一致する最初の <see cref="T:System.Xml.XmlElement" />。 一致するものがない場合は、null 参照 (Visual Basic の場合は <see langword="Nothing" />) が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>ノードの最後の子を取得します。</summary>
      <returns>ノードの最後の子。 そのようなノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>派生クラスでオーバーライドされた場合は、ノードのローカル名を取得します。</summary>
      <returns>プリフィックスが削除されたノードの名前。 たとえば、 <see langword="LocalName" /> は要素 &lt; bk: book の book です &gt; 。  
  
返される名前は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 
 <list type="table"><listheader><term> Type</term><description> 名前</description></listheader><item><term> 属性</term><description> 属性のローカル名。</description></item><item><term> CDATA</term><description> #cdata-section</description></item><item><term> コメント</term><description> #comment</description></item><item><term> ドキュメント</term><description> #document</description></item><item><term> DocumentFragment</term><description> #document-fragment</description></item><item><term> DocumentType</term><description> ドキュメントの種類の名前。</description></item><item><term> 要素</term><description> 要素のローカル名。</description></item><item><term> エンティティ</term><description> エンティティの名前。</description></item><item><term> EntityReference</term><description> 参照されたエンティティの名前。</description></item><item><term> 表記</term><description> 表記名。</description></item><item><term> ProcessingInstruction</term><description> 処理命令の対象。</description></item><item><term> Text</term><description> #text</description></item><item><term> 空白</term><description> #whitespace</description></item><item><term> SignificantWhitespace</term><description> #significant-whitespace</description></item><item><term> XmlDeclaration</term><description> #xml-declaration</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>派生クラスでオーバーライドされた場合は、ノードの修飾名を取得します。</summary>
      <returns>ノードの限定名。 返される名前は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 
 <list type="table"><listheader><term> Type</term><description> 名前</description></listheader><item><term> 属性</term><description> 属性の限定名。</description></item><item><term> CDATA</term><description> #cdata-section</description></item><item><term> コメント</term><description> #comment</description></item><item><term> ドキュメント</term><description> #document</description></item><item><term> DocumentFragment</term><description> #document-fragment</description></item><item><term> DocumentType</term><description> ドキュメントの種類の名前。</description></item><item><term> 要素</term><description> 要素の限定名。</description></item><item><term> エンティティ</term><description> エンティティの名前。</description></item><item><term> EntityReference</term><description> 参照されたエンティティの名前。</description></item><item><term> 表記</term><description> 表記名。</description></item><item><term> ProcessingInstruction</term><description> 処理命令の対象。</description></item><item><term> Text</term><description> #text</description></item><item><term> 空白</term><description> #whitespace</description></item><item><term> SignificantWhitespace</term><description> #significant-whitespace</description></item><item><term> XmlDeclaration</term><description> #xml-declaration</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>このノードの名前空間 URI を取得します。</summary>
      <returns>このノードの名前空間 URI。 名前空間 URI がない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>このノードの直後のノードを取得します。</summary>
      <returns>次の <see langword="XmlNode" />。 次のノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>派生クラスでオーバーライドされている場合は、現在のノードの型を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNodeType" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>このノードとそのすべての子ノードを格納しているマークアップを取得します。</summary>
      <returns>このノードとそのすべての子ノードを格納しているマークアップ。  
  
 <block subset="none" type="note"><para><see langword="OuterXml" /> は既定の属性を返しません。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
      <returns>このノードが属する <see cref="T:System.Xml.XmlDocument" />。  
  
ノードが <see cref="T:System.Xml.XmlDocument" /> (NodeType が XmlNodeType.Document と等しい) の場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns>現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。  
  
 <list type="table"><listheader><term> NodeType</term><description> ParentNode の戻り値。</description></listheader><item><term> Attribute、Document、DocumentFragment、Entity、Notation</term><description><see langword="null" /> を返します。これらのノードには親がありません。</description></item><item><term> CDATA</term><description> CDATA セクションを含む要素またはエンティティ参照を返します。</description></item><item><term> コメント</term><description> コメントを含む要素、エンティティ参照、ドキュメントの種類、またはドキュメントを返します。</description></item><item><term> DocumentType</term><description> ドキュメント ノードを返します。</description></item><item><term> 要素</term><description> 要素の親ノードを返します。 要素がツリーにおいてルート ノードである場合、親はドキュメント ノードです。</description></item><item><term> EntityReference</term><description> エンティティ参照を含む要素、属性、またはエンティティ参照を返します。</description></item><item><term> ProcessingInstruction</term><description> 処理命令を含むドキュメント、要素、ドキュメントの種類、またはエンティティ参照を返します。</description></item><item><term> Text</term><description> テキスト ノードを含む親要素、属性、またはエンティティ参照を返します。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>このノードの名前空間プリフィックスを取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">このノードは読み取り専用です。</exception>
      <exception cref="T:System.Xml.XmlException">指定したプレフィックスに無効な文字が含まれています。  
  
 指定されたプリフィックスの書式が正しくありません。  
  
 指定したプレフィックスが "xml" であり、このノードの namespaceURI が "http://www.w3.org/XML/1998/namespace" と異なっています。  
  
 このノードが属性で、指定したプレフィックスが "xmlns" で、このノードの namespaceURI が "http://www.w3.org/2000/xmlns/" と異なります。  
  
 このノードが属性で、このノードの qualifiedName が "xmlns" です。</exception>
      <returns>このノードの名前空間プリフィックス。 たとえば、 <see langword="Prefix" /> は要素 &lt; bk: book の bk です &gt; 。 プリフィックスがない場合、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>このノードの直前のノードを取得します。</summary>
      <returns>直前の <see langword="XmlNode" />。 直前のノードがない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary>このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>スキーマ検証の結果、このノードに割り当てられているスキーマ検証後の infoset を取得します。</summary>
      <returns>このノードのスキーマ検証後の infoset が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">読み取り専用のノードの値を設定します。</exception>
      <exception cref="T:System.InvalidOperationException">値がないと想定されているノード (Element ノードなど) の値を設定します。</exception>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 
 <list type="table"><listheader><term> Type</term><description> 値</description></listheader><item><term> 属性</term><description> 属性の値。</description></item><item><term> CDATASection</term><description> CDATA セクションの内容。</description></item><item><term> コメント</term><description> コメントの内容。</description></item><item><term> ドキュメント</term><description><see langword="null" />.</description></item><item><term> DocumentFragment</term><description><see langword="null" />.</description></item><item><term> DocumentType</term><description><see langword="null" />.</description></item><item><term> 要素</term><description><see langword="null" />. <see cref="P:System.Xml.XmlElement.InnerText" /> プロパティまたは <see cref="P:System.Xml.XmlElement.InnerXml" /> プロパティを使用すると、要素ノードの値にアクセスできます。</description></item><item><term> エンティティ</term><description><see langword="null" />.</description></item><item><term> EntityReference</term><description><see langword="null" />.</description></item><item><term> 表記</term><description><see langword="null" />.</description></item><item><term> ProcessingInstruction</term><description> ターゲットを含まない全体の内容。</description></item><item><term> Text</term><description> テキスト ノードの内容。</description></item><item><term> SignificantWhitespace</term><description> 空白文字。 空白は、1 つ以上の空白文字、キャリッジ リターン、ライン フィード、またはタブによって構成できます。</description></item><item><term> 空白</term><description> 空白文字。 空白は、1 つ以上の空白文字、キャリッジ リターン、ライン フィード、またはタブによって構成できます。</description></item><item><term> XmlDeclaration</term><description> 宣言の内容 (? xml と? の間のすべての要素 &lt; &gt; )。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>ノード変更の型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>ノード値が変更されています。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>ノードがツリーに挿入されています。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>ノードがツリーから削除されています。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>
        <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" />、<see cref="E:System.Xml.XmlDocument.NodeRemoving" /> の各イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>
        <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="node">イベントの生成元の <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldParent">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の以前の親 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="newParent">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の新しい親 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldValue">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の以前の値。</param>
      <param name="newValue">イベントを生成した <see cref="T:System.Xml.XmlNode" /> の新しい値。</param>
      <param name="action">
        <see cref="T:System.Xml.XmlNodeChangedAction" />。</param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>発生しているノード変更イベントの型を示す値を取得します。</summary>
      <returns>ノード変更イベントを説明する列挙値の1つ。 <see langword="Action" /> 値は、イベントがいつ発生したか、つまり発生前であるか発生後であるかを区別しません。 イベント ハンドラーを個別に作成して、両方のインスタンスを処理できます。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>操作を完了した後の <see cref="P:System.Xml.XmlNode.ParentNode" /> の値を取得します。</summary>
      <returns>操作を完了した後の <see langword="ParentNode" /> の値。 ノードが削除されている場合、このプロパティは <see langword="null" /> を返します。  
  
 <block subset="none" type="note"><para>  
 属性ノードの場合、このプロパティは <see cref="P:System.Xml.XmlAttribute.OwnerElement" /> を返します。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>ノードの新しい値を取得します。</summary>
      <returns>ノードの新しい値。 ノードが属性ノードでもテキスト ノードでもない場合、またはノードが削除されている場合、このプロパティは <see langword="null" /> を返します。  
  
<see cref="E:System.Xml.XmlDocument.NodeChanging" /> イベントで呼び出された場合、<see langword="NewValue" /> は変更が成功したときにノードの値を返します。 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> イベントで呼び出された場合、<see langword="NewValue" /> はノードの現在の値を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>追加、削除、または変更されている <see cref="T:System.Xml.XmlNode" /> を取得します。</summary>
      <returns>追加、削除、または変更されている <see langword="XmlNode" />。このプロパティは <see langword="null" /> を返しません。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>操作を開始する前の <see cref="P:System.Xml.XmlNode.ParentNode" /> の値を取得します。</summary>
      <returns>操作を開始する前の <see langword="ParentNode" /> の値。 ノードに親がなかった場合、このプロパティは <see langword="null" /> を返します。  
  
 <block subset="none" type="note"><para>  
 属性ノードの場合、このプロパティは <see cref="P:System.Xml.XmlAttribute.OwnerElement" /> を返します。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>ノードの元の値を取得します。</summary>
      <returns>ノードの元の値。 ノードが属性ノードでもテキスト ノードでもない場合、またはノードが挿入されている場合、このプロパティは <see langword="null" /> を返します。  
  
<see cref="E:System.Xml.XmlDocument.NodeChanging" /> イベントで呼び出された場合、<see langword="OldValue" /> は変更が成功したときに置き換えられるノードの現在の値を返します。 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> イベントで呼び出された場合、<see langword="OldValue" /> は変更前のノードの値を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>
        <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" />、<see cref="E:System.Xml.XmlDocument.NodeRemoving" /> の各イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Xml.XmlNodeChangedEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>ノードの順序付きコレクションを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlNodeList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>ノードを反復処理する列挙子を取得します。</summary>
      <returns>ノードのコレクションを反復処理するために使用される列挙子。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>指定したインデックス位置にあるノードを取得します。</summary>
      <param name="index">ノードのリストの 0 から始まるインデックス番号。</param>
      <returns>コレクション内の指定したインデックスに関連付けられている <see cref="T:System.Xml.XmlNode" />。 <paramref name="index" /> がリスト内のノード数以上の場合は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary>ノード リスト内のリソースをプライベートに破棄します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary>
        <see cref="T:System.Xml.XmlNodeList" /> クラスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>
        <see langword="XmlNodeList" /> 内のノードの数を取得します。</summary>
      <returns>
        <see langword="XmlNodeList" /> に含まれるノードの数。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>指定したインデックス位置にあるノードを取得します。</summary>
      <param name="i">ノードのリストの 0 から始まるインデックス番号。</param>
      <returns>コレクション内の指定したインデックスに関連付けられている <see cref="T:System.Xml.XmlNode" />。 インデックスがリスト内のノード数以上の場合は、<see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>ノードのドキュメント順を 2 番目のノードと比較して記述します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>このナビゲーターの現在のノードが、提供されたナビゲーターの現在のノードの後にあります。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>このナビゲーターの現在のノードが、提供されたナビゲーターの現在のノードの前にあります。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>2 つのナビゲーターが同じノードに配置されています。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>ノードの位置は、互いを基準にしてドキュメント順に比較できません。 2 つのノードが別のツリーにある場合は比較できます。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>
        <see cref="T:System.Xml.XmlNode" /> 内の XML データに対する、高速で非キャッシュの前方向アクセスを提供するリーダーを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>指定した <see cref="T:System.Xml.XmlNode" /> を使用して <see langword="XmlNodeReader" /> クラスのインスタンスを作成します。</summary>
      <param name="node">読み取る対象の <see langword="XmlNode" />。</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>
        <see cref="P:System.Xml.XmlNodeReader.ReadState" /> を <see langword="Closed" /> に変更します。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>指定したインデックスの属性の値を取得します。</summary>
      <param name="attributeIndex">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlNodeReader.AttributeCount" /> 以上です。</exception>
      <returns>指定した属性の値。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>指定した名前の属性の値を取得します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
      <param name="name">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
      <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。 この文字列は、最小単位に分割する必要はありません。</param>
      <returns>プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>指定したインデックスを持つ属性に移動します。</summary>
      <param name="attributeIndex">属性のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>指定した名前を持つ属性へ移動します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の属性に移動します。</summary>
      <param name="name">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>現在の属性ノードを含む要素に移動します。</summary>
      <returns>リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary>最初の属性に移動します。</summary>
      <returns>属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary>次の属性に移動します。</summary>
      <returns>次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary>ストリームから次のノードを読み取ります。</summary>
      <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary>属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns>返すノードがある場合は <see langword="true" />。  
  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
  
<c>misc=""</c> などの空の属性は、値 String.Empty を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、BinHex でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、BinHex のコンテンツをデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary>要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
      <returns>要素ノードまたはテキストのようなノード (CDATA、Text ノード、など) の内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
  
 <see langword="Note:" /> テキスト ノードは、要素テキスト ノードまたは属性テキスト ノードのいずれかが可能です。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary>
        <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException">リーダーが <see langword="EntityReference" /> ノードに配置されていません。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary>現在のノードの子をスキップします。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」をご覧ください。</summary>
      <param name="scope">
        <see cref="T:System.Xml.XmlNamespaceScope" /> オブジェクト。</param>
      <returns>スコープ内の名前空間が格納されている <see cref="T:System.Collections.IDictionary" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />」をご覧ください。</summary>
      <param name="prefix">名前空間プレフィックスが格納されている <see cref="T:System.String" />。</param>
      <returns>名前空間の名前が格納されている <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />」をご覧ください。</summary>
      <param name="namespaceName">名前空間を識別する <see cref="T:System.String" /> オブジェクト。</param>
      <returns>名前空間プレフィックスが格納されている <see cref="T:System.String" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>現在のノードにある属性の数を取得します。</summary>
      <returns>現在のノードにある属性の数。 この属性数には、既定の属性も含まれます。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>現在のノードのベース URI を取得します。</summary>
      <returns>現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlNodeReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns>バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlNodeReader" /> クラスは、常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns>リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlNodeReader" /> は常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns>XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns>ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>現在のノードに属性があるかどうかを示す値を取得します。</summary>
      <returns>現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>現在のノードが <see cref="P:System.Xml.XmlNodeReader.Value" /> を持つことができるかどうかを示す値を取得します。</summary>
      <returns>リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>現在のノードがドキュメント型定義 (DTD) またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <returns>現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> 現在のノードが要素であり、 <see cref="P:System.Xml.XmlNodeReader.NodeType" /> が <see langword="XmlNodeType.Element" /> で終わる場合は <c>/&gt;</c> 。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>現在のノードのローカル名を取得します。</summary>
      <returns>プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" /> は <see langword="book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" />、など) の場合は、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary>現在のノードの限定名を取得します。</summary>
      <returns>現在のノードの限定名。 たとえば、 <see langword="Name" /> は <see langword="bk:book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
返される名前は、ノードの <see cref="P:System.Xml.XmlNodeReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> name</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の名前。</description></item><item><term><see langword="DocumentType" /></term><description> ドキュメントの種類の名前。</description></item><item><term><see langword="Element" /></term><description> タグ名。</description></item><item><term><see langword="EntityReference" /></term><description> 参照されたエンティティの名前。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 処理命令の対象。</description></item><item><term><see langword="XmlDeclaration" /></term><description> リテラル文字列 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary>リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <returns>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary>この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary>現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
      <returns>現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary>リーダーの状態を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary>現在のノードに割り当てられているスキーマ情報を取得します。</summary>
      <returns>現在のノードのスキーマ情報を含む <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary>現在のノードのテキスト値を取得します。</summary>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlNodeReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 その他のすべてのノード型は、String.Empty を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> [値]</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の値。</description></item><item><term><see langword="CDATA" /></term><description> CDATA セクションの内容。</description></item><item><term><see langword="Comment" /></term><description> コメントの内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部サブセット。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> ターゲットを除く全内容。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合コンテンツ モデル内のマークアップ間の空白。</description></item><item><term><see langword="Text" /></term><description> テキスト ノードの内容。</description></item><item><term><see langword="Whitespace" /></term><description> マークアップ間の空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣言の内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary>現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns>現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary>現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary>ノードの型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary>属性 (例: <c>id='123'</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary>CDATA セクション (例: <c>&lt;![CDATA[my escaped text]]&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary>コメント (例: <c>&lt;!-- my comment --&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary>ドキュメント ツリーのルートして、XML ドキュメント全体へのアクセスを実現するドキュメント オブジェクト。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary>ドキュメント フラグメント。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary>次のようなタグで示されるドキュメント型宣言 (例: <c>&lt;!DOCTYPE...&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary>要素 (例: <c>&lt;item&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary>終了要素タグ (例: <c>&lt;/item&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary>
        <see cref="M:System.Xml.XmlReader.ResolveEntity" /> を呼び出した結果、<see langword="XmlReader" /> がエンティティ置換の末尾に到達したときに返されます。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary>エンティティ宣言 (例: <c>&lt;!ENTITY...&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary>エンティティへの参照 (例: <c>&amp;num;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary>
        <see langword="Read" /> メソッドが呼び出されなかった場合に、<see cref="T:System.Xml.XmlReader" /> によって返されます。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary>ドキュメント型宣言内の表記 (例: <c>&lt;!NOTATION...&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary>処理命令 (例: <c>&lt;?pi test?&gt;</c>)。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary>混合コンテンツ モデル内のマークアップ間にある空白、または <c>xml:space="preserve"</c> スコープ内の空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary>ノードのテキストの内容。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary>マークアップ間の空白。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary>XML 宣言 (例: <c>&lt;?xml version='1.0'?&gt;</c>)。</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary>表記宣言を表します (&lt;!NOTATION... &gt; など)。</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。 表記ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlNotation" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">表記ノードのクローンは作成できません。 <see cref="T:System.Xml.XmlNotation" /> オブジェクトでこのメソッドを呼び出すと、例外がスローされます。</exception>
      <returns>メソッドの呼び出し元ノードの <see cref="T:System.Xml.XmlNode" /> のコピーです。</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary>ノードの子を、指定した <see cref="T:System.Xml.XmlWriter" /> に保存します。 このメソッドは、<see langword="XmlNotation" /> ノードに対しては適用されません。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。 このメソッドは、<see langword="XmlNotation" /> ノードに対しては適用されません。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary>このノードの子を表すマークアップを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">プロパティを設定しようとしています。</exception>
      <returns>
        <see langword="XmlNotation" /> ノードの場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary>ノードが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> ノードが読み取り専用の場合は。それ以外の場合は <see langword="false" /> 。  
  
<see langword="XmlNotation" /> ノードは読み取り専用であるため、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary>現在のノードの名前を名前空間プリフィックスを付けずに取得します。</summary>
      <returns>
        <see langword="XmlNotation" /> ノードの場合、このプロパティは表記の名前を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary>現在のノードの名前を取得します。</summary>
      <returns>表記法の名前。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>ノード型。 <see langword="XmlNotation" /> ノードの場合、値は XmlNodeType.Notation です。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary>このノードとそのすべての子を表すマークアップを取得します。</summary>
      <returns>
        <see langword="XmlNotation" /> ノードの場合は、String.Empty が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary>表記宣言のパブリック ID の値を取得します。</summary>
      <returns>表記のパブリック ID。 パブリック ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary>表記宣言のシステム ID を取得します。</summary>
      <returns>表記のシステム ID。 システム ID がない場合は、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 出力をシリアル化するために使用するメソッドを指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary>XSLT の規則を使用して、実行時に <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 出力メソッドと <see cref="F:System.Xml.XmlOutputMethod.Html" /> 出力メソッドのいずれかを選択します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary>XSLT で指定された HTML の規則に従ってシリアル化します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary>テキスト ブロックだけをシリアル化します。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary>XML 1.0 の規則に従ってシリアル化します。</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary>XML フラグメントを解析するために <see cref="T:System.Xml.XmlReader" /> が必要とするコンテキスト情報をすべて提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary>
        <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、ベース URI、<see langword="XmlParserContext" />、<see langword="xml:lang" />、ドキュメント型のそれぞれの値を指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="docTypeName">ドキュメント型宣言の名前。</param>
      <param name="pubId">パブリック識別子。</param>
      <param name="sysId">システム識別子。</param>
      <param name="internalSubset">内部 DTD サブセット。 DTD サブセットはエンティティ解決に使用され、ドキュメント検証には使用されません。</param>
      <param name="baseURI">XML フラグメントのベース URI (フラグメントの読み込み元の場所)。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
        <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、ベース URI、<see langword="XmlParserContext" />、<see langword="xml:lang" />、エンコーディング、およびドキュメント型のそれぞれの値を指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="docTypeName">ドキュメント型宣言の名前。</param>
      <param name="pubId">パブリック識別子。</param>
      <param name="sysId">システム識別子。</param>
      <param name="internalSubset">内部 DTD サブセット。 DTD はエンティティ解決に使用され、ドキュメント検証には使用されません。</param>
      <param name="baseURI">XML フラグメントのベース URI (フラグメントの読み込み元の場所)。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <param name="enc">エンコーディングの設定を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary>
        <see langword="XmlParserContext" />、<see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、および <see langword="xml:lang" /> のそれぞれの値を指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary>
        <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="XmlParserContext" />、<see langword="xml:lang" />、およびエンコーディングを指定して、<see langword="xml:space" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">文字列を最小単位に分割するために使用する <see cref="T:System.Xml.XmlNameTable" />。 このパラメーターが <see langword="null" /> の場合は、<paramref name="nsMgr" /> を構築するために使用される名前テーブルが代わりに使用されます。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</param>
      <param name="nsMgr">名前空間情報を検索するために使用する <see cref="T:System.Xml.XmlNamespaceManager" />。または <see langword="null" />。</param>
      <param name="xmlLang">
        <see langword="xml:lang" /> スコープ。</param>
      <param name="xmlSpace">
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</param>
      <param name="enc">エンコーディングの設定を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="nt" /> が、<paramref name="nsMgr" /> を構築するために使用される <see langword="XmlNameTable" /> と異なります。</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary>ベース URI を取得または設定します。</summary>
      <returns>DTD ファイルを解決するために使用するベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary>ドキュメント型宣言の名前を取得または設定します。</summary>
      <returns>ドキュメント型宣言の名前。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary>エンコーディングの種類を取得または設定します。</summary>
      <returns>エンコーディングの種類を示す <see cref="T:System.Text.Encoding" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary>内部 DTD サブセットを取得または設定します。</summary>
      <returns>内部 DTD サブセット。 たとえば、このプロパティは、角かっこで囲まれたすべての要素を返します<c> &lt; 。DOCTYPE ドキュメント [...] &gt; </c></returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary>
        <see cref="T:System.Xml.XmlNamespaceManager" /> を取得または設定します。</summary>
      <returns>
        <see langword="XmlNamespaceManager" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary>文字列を最小単位に分割するために使用される <see cref="T:System.Xml.XmlNameTable" /> を取得します。 最小単位に分割された文字列の詳細については、<see cref="T:System.Xml.XmlNameTable" /> のトピックを参照してください。</summary>
      <returns>
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary>パブリック識別子を取得または設定します。</summary>
      <returns>パブリック識別子。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary>システム識別子を取得または設定します。</summary>
      <returns>システム識別子。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary>現在の <see langword="xml:lang" /> スコープを取得または設定します。</summary>
      <returns>現在の <see langword="xml:lang" /> スコープ。 スコープ内に <see langword="xml:lang" /> がない場合は、<see langword="String.Empty" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary>現在の <see langword="xml:space" /> スコープを取得または設定します。</summary>
      <returns>
        <see langword="xml:space" /> スコープを示す <see cref="T:System.Xml.XmlSpace" /> 値。</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary>XML がプロセッサ固有の情報をドキュメントのテキストに保持するために定義する処理命令を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlProcessingInstruction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="target">処理命令の対象。<see cref="P:System.Xml.XmlProcessingInstruction.Target" /> プロパティに関するトピックを参照してください。</param>
      <param name="data">命令の内容。<see cref="P:System.Xml.XmlProcessingInstruction.Data" /> プロパティに関するトピックを参照してください。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>複製されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 ProcessingInstruction ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary>対象を含まない、処理命令の内容を取得または設定します。</summary>
      <returns>対象を含まない、処理命令の内容。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary>ノードとそのすべての子の連結している値を取得または設定します。</summary>
      <returns>ノードとすべての子の連結された値。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>処理命令ノードの場合、このプロパティは処理命令の対象を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>処理命令ノードの場合、このプロパティは処理命令の対象を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see langword="XmlProcessingInstruction" /> ノードの場合、この値は XmlNodeType.ProcessingInstruction です。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary>処理命令の対象を取得します。</summary>
      <returns>処理命令の対象。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">ノードが読み取り専用です。</exception>
      <returns>対象を含まない処理命令の全内容。</returns>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary>XML 修飾名を表します。</summary>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary>空の <see cref="T:System.Xml.XmlQualifiedName" /> を提供します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary>指定した名前を使用して、<see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前として使用するローカル名。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary>指定した名前と名前空間を使用して、<see cref="T:System.Xml.XmlQualifiedName" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前として使用するローカル名。</param>
      <param name="ns">
        <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトの名前空間。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトが、現在の <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="other">比較対象の <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns>2 つのオブジェクトが同じインスタンス オブジェクトである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> のハッシュ コードを返します。</summary>
      <returns>このオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>2 つの <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを比較します。</summary>
      <param name="a">比較する <see cref="T:System.Xml.XmlQualifiedName" /> です。</param>
      <param name="b">比較する <see cref="T:System.Xml.XmlQualifiedName" /> です。</param>
      <returns>2 つのオブジェクトの名前の値および名前空間の値が同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>2 つの <see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを比較します。</summary>
      <param name="a">比較する <see cref="T:System.Xml.XmlQualifiedName" /> です。</param>
      <param name="b">比較する <see cref="T:System.Xml.XmlQualifiedName" /> です。</param>
      <returns>2 つのオブジェクトの名前の値および名前空間の値が異なっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値を返します。</summary>
      <returns>
        <see langword="namespace:localname" /> の形式の <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値。 オブジェクトに名前空間が定義されていない場合、このメソッドはローカル名だけを返します。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値を返します。</summary>
      <param name="name">オブジェクトの名前。</param>
      <param name="ns">オブジェクトの名前空間。</param>
      <returns>
        <see langword="namespace:localname" /> の形式の <see cref="T:System.Xml.XmlQualifiedName" /> の文字列値。 オブジェクトに名前空間が定義されていない場合、このメソッドはローカル名だけを返します。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> が空かどうかを示す値を取得します。</summary>
      <returns>名前と名前空間が空の文字列である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の限定名の文字列形式を取得します。</summary>
      <returns>限定名の文字列形式。オブジェクトに対して名前が定義されていない場合は String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary>
        <see cref="T:System.Xml.XmlQualifiedName" /> の名前空間の文字列形式を取得します。</summary>
      <returns>名前空間の文字列形式。オブジェクトに対して名前空間が定義されていない場合は String.Empty。</returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary>XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary>
        <see langword="XmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary>派生クラスでオーバーライドされると、<see cref="P:System.Xml.XmlReader.ReadState" /> を <see cref="F:System.Xml.ReadState.Closed" /> に変更します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary>既定の設定で指定されたストリームを使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データを格納しているストリーム。  
  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary>指定されたストリームと設定で、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データを格納しているストリーム。  
  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary>指定されたストリーム、ベース URI、設定を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データを格納しているストリーム。  
  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="baseUri">読み取るエンティティまたはドキュメントのベース URI。 この値は、<see langword="null" /> の場合もあります。  
  
 セキュリティに関するメモ ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。 信頼関係のないソースからベース URI を使用することは避けてください。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>解析のために指定されたストリーム、設定、およびコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データを格納しているストリーム。  
  
<see cref="T:System.Xml.XmlReader" /> は、バイト オーダー マークや、エンコードに関するその他の記号を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を (Unicode) 文字のストリームとして解析する処理を継続します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
  
この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary>指定されたテキスト リーダーを使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary>指定されたテキスト リーダーと設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> の設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary>指定されたテキスト リーダー、設定、およびベース URI を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> は XML 宣言に指定されたエンコーディングをデータ ストリームのデコードに使用しません。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="baseUri">読み取るエンティティまたはドキュメントのベース URI。 この値は、<see langword="null" /> の場合もあります。  
  
 セキュリティに関するメモ ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。 信頼関係のないソースからベース URI を使用することは避けてください。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>指定したテキスト リーダー、設定、および解析するためのコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
  
この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が含まれています。 (これらの <see langword="NameTable" /> プロパティの 1 つのみを設定して使用できます。)</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary>指定された URI で新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="inputUri">XML データを格納しているファイルの URI。 <see cref="T:System.Xml.XmlUrlResolver" /> クラスは、パスを正規データ形式に変換するときに使用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI によって識別されるファイルが存在しません。</exception>
      <exception cref="T:System.UriFormatException">
        <block subset="none" type="note">
          <para>Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
        </block>  
  
 URI の形式が正しくありません。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary>指定された URI と設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="inputUri">XML データを格納しているファイルの URI。 <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト上の <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ形式に変換するときに使用されます。 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が <see langword="null" /> の場合は、新しい <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトが使用されます。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI で指定したファイルが見つかりません。</exception>
      <exception cref="T:System.UriFormatException">
        <block subset="none" type="note">
          <para>Windows ストア アプリ用 .NET またはポータブル クラス ライブラリでは、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。</para>
        </block>  
  
 URI の形式が正しくありません。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary>指定された URI、設定、解析するためのコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="inputUri">XML データを格納しているファイルの URI。 <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト上の <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ形式に変換するときに使用されます。 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が <see langword="null" /> の場合は、新しい <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトが使用されます。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
  
この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.ArgumentNullException">
        <see langword="inputUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が含まれています。 (これらの <see langword="NameTable" /> プロパティの 1 つのみを設定して使用できます。)</exception>
      <exception cref="T:System.IO.FileNotFoundException">URI で指定したファイルが見つかりません。</exception>
      <exception cref="T:System.UriFormatException">URI の形式が正しくありません。</exception>
      <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary>指定された XML リーダーと設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
      <param name="reader">基になる XML リーダーとして使用するオブジェクト。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。  
  
<see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトの準拠レベルは、基になるリーダーの準拠レベルと一致するか、<see cref="F:System.Xml.ConformanceLevel.Auto" /> に設定する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトが、基になるリーダーの準拠レベルと一致しない準拠レベルを指定した場合。  
  
- または - 
基になる <see cref="T:System.Xml.XmlReader" /> が <see cref="F:System.Xml.ReadState.Error" /> 状態か <see cref="F:System.Xml.ReadState.Closed" /> 状態。</exception>
      <returns>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトをラップするオブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定したインデックスの属性の値を取得します。</summary>
      <param name="i">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> が範囲外です。 負の値以外で、属性コレクションのサイズよりも小さくなければなりません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>指定した属性の値。 このメソッドは、リーダーを移動しません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.Name" /> の属性の値を取得します。</summary>
      <param name="name">属性の限定名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>指定した属性の値。 属性が見つからないか、値が <see langword="String.Empty" /> の場合、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性の値を取得します。</summary>
      <param name="name">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>指定した属性の値。 属性が見つからないか、値が <see langword="String.Empty" /> の場合、<see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary>現在のノードのテキスト値を非同期に取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、"非同期操作は既に実行されています" というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードの値。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary>文字列引数が有効な XML 名かどうかを示す値を返します。</summary>
      <param name="str">検証対象の名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 値は <see langword="null" /> です。</exception>
      <returns>名前が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary>文字列引数が有効な XML 名トークンかどうかを示す値を返します。</summary>
      <param name="str">検証対象の名前トークン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 値は <see langword="null" /> です。</exception>
      <returns>有効な名前トークンの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうかをテストします。</summary>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> が開始タグまたは空の要素タグを見つけた場合は <see langword="true" />。<see langword="XmlNodeType.Element" /> 以外のノード型が見つかった場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうか、また、見つかった要素の <see cref="P:System.Xml.XmlReader.Name" /> プロパティが、指定した引数と一致するかどうかをテストします。</summary>
      <param name="name">見つかった要素の <see langword="Name" /> プロパティと一致する文字列。</param>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>見つかったノードが要素であり、<see langword="Name" /> プロパティが指定した文字列と一致する場合は <see langword="true" />。 <see langword="XmlNodeType.Element" /> 以外のノード型が見つかった場合、または要素の <see langword="Name" /> プロパティが指定した文字列と一致しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary>
        <see cref="M:System.Xml.XmlReader.MoveToContent" /> を呼び出し、現在のコンテンツ ノードが開始タグまたは空の要素タグかどうか、また、見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが、指定した文字列と一致するかどうかをテストします。</summary>
      <param name="localname">見つかった要素の <see langword="LocalName" /> プロパティと一致する文字列。</param>
      <param name="ns">見つかった要素の <see langword="NamespaceURI" /> プロパティと一致する文字列。</param>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>見つかったノードが要素の場合は <see langword="true" />。 <see langword="XmlNodeType.Element" /> 以外のノード型が見つかった場合、または要素の <see langword="LocalName" /> および <see langword="NamespaceURI" /> プロパティが指定した文字列と一致しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary>派生クラスでオーバーライドされると、現在の要素のスコープの名前空間プリフィックスを解決します。</summary>
      <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定したインデックスの属性に移動します。</summary>
      <param name="i">属性のインデックス。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">パラメーターの値が負数です。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.Name" /> の属性に移動します。</summary>
      <param name="name">属性の限定名。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">パラメーターは空の文字列です。</exception>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性に移動します。</summary>
      <param name="name">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" /> です。</exception>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary>現在のノードがコンテンツ (空白でないテキスト、<see langword="CDATA" />、<see langword="Element" />、<see langword="EndElement" />、<see langword="EntityReference" />、または <see langword="EndEntity" />) ノードかどうかを確認します。 ノードがコンテンツ ノードでない場合、リーダーは、次のコンテンツ ノードまたはファイルの末尾までスキップします。 リーダーは、<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" />、または <see langword="SignificantWhitespace" /> の型のノードをスキップします。</summary>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は <see langword="XmlNodeType.None" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary>現在のノードがコンテンツ ノードであるかどうかを非同期的に確認します。 ノードがコンテンツ ノードでない場合、リーダーは、次のコンテンツ ノードまたはファイルの末尾までスキップします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は <see langword="XmlNodeType.None" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary>派生クラスでオーバーライドされると、現在の属性ノードを含む要素に移動します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary>派生クラスでオーバーライドされると、最初の属性に移動します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary>派生クラスでオーバーライドされると、次の属性に移動します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary>派生クラスでオーバーライドされると、ストリームから次のノードを読み取ります。</summary>
      <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary>ストリームから次のノードを非同期に読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary>派生クラスでオーバーライドされると、属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、または <see langword="EndEntity" /> の各ノードに格納します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>返すノードがある場合は <see langword="true" />。  
  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
  
<c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>指定された型のオブジェクトとして内容を読み取ります。</summary>
      <param name="returnType">返される値の型。  
  
 注 .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。 たとえば、<see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを <c>xs:string</c> に変換するときにこれを使用できます。  
  
この値は、<see langword="null" /> の場合もあります。</param>
      <exception cref="T:System.FormatException">コンテンツが、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは、サポートされているノード型ではありません。 詳細については、次の表を参照してください。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.OverflowException">
        <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
      <returns>要求された型に変換された、連結されたテキストの内容または属性値。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>指定された型のオブジェクトとして内容を非同期に読み取ります。</summary>
      <param name="returnType">返される値の型。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>要求された型に変換された、連結されたテキストの内容または属性値。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを非同期に読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを非同期に読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary>現在の位置でテキスト コンテンツを <see langword="Boolean" /> として読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.Boolean" /> オブジェクトとしてのテキスト コンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.DateTime" /> オブジェクトとして読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.DateTime" /> オブジェクトとしてのテキスト コンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.DateTimeOffset" /> オブジェクトとして読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.DateTimeOffset" /> オブジェクトとしてのテキスト コンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.Decimal" /> オブジェクトとして読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在の位置における <see cref="T:System.Decimal" /> オブジェクトとしてのテキスト コンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary>現在の位置のテキストの内容を、倍精度浮動小数点数として読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>倍精度浮動小数点数としてのテキストの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary>現在の位置のテキストの内容を、単精度浮動小数点数として読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在の位置における単精度浮動小数点数としてのテキストの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary>現在の位置でテキストの内容を 32 ビット符号付き整数として読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>32 ビット符号付き整数としてのテキストの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary>現在の位置でテキストの内容を 64 ビット符号付き整数として読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>64 ビット符号付き整数としてのテキストの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.Object" /> として読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>最も適切な共通言語ランタイム (CLR) オブジェクトとしてのテキストの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.Object" /> として非同期に読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>最も適切な共通言語ランタイム (CLR) オブジェクトとしてのテキストの内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.String" /> オブジェクトとして読み取ります。</summary>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.FormatException">文字列書式が無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしてのテキスト コンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary>現在の位置でテキスト コンテンツを <see cref="T:System.String" /> オブジェクトとして非同期に読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.String" /> オブジェクトとしてのテキスト コンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>要素の内容を要求された型として返します。</summary>
      <param name="returnType">返される値の型。  
  
 注 .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.OverflowException">
        <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
      <returns>要求された型のオブジェクトに変換された要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、要素の内容を要求された型として読み込みます。</summary>
      <param name="returnType">返される値の型。  
  
 注 .NET Framework 3.5 のリリースでは、<paramref name="returnType" /> パラメーターの値に <see cref="T:System.DateTimeOffset" /> 型を指定できるようになりました。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <exception cref="T:System.OverflowException">
        <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
      <returns>要求された型のオブジェクトに変換された要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>要素の内容を要求された型として非同期に読み取ります。</summary>
      <param name="returnType">返される値の型。</param>
      <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>要求された型のオブジェクトに変換された要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、<see langword="Base64" /> の内容をデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を非同期に読み取り、<see langword="Base64" /> の内容をデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を非同期に読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary>現在の要素を読み取り、そのコンテンツを <see cref="T:System.Boolean" /> オブジェクトとして返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
- または - 
要素のコンテンツを <see cref="T:System.Boolean" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>コンテンツの要素、<see cref="T:System.Boolean" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.Boolean" /> オブジェクトとして返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>コンテンツの要素、<see cref="T:System.Boolean" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary>現在の要素を読み取り、そのコンテンツを <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
- または - 
要素のコンテンツを <see cref="T:System.DateTime" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>コンテンツの要素、<see cref="T:System.DateTime" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.DateTime" /> オブジェクトとして返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>
        <see cref="T:System.DateTime" /> オブジェクトとしての要素のコンテンツ。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary>現在の要素を読み取り、そのコンテンツを <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
- または - 
要素のコンテンツを <see cref="T:System.Decimal" /> に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>コンテンツの要素、<see cref="T:System.Decimal" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.Decimal" /> オブジェクトとして返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
- または - 
要素のコンテンツを <see cref="T:System.Decimal" /> に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>コンテンツの要素、<see cref="T:System.Decimal" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary>現在の要素を読み込み、その内容を倍精度浮動小数点数として返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを倍精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>倍精度浮動小数点数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を倍精度浮動小数点数として返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>倍精度浮動小数点数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary>現在の要素を読み込み、その内容を単精度浮動小数点数として返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを単精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>単精度浮動小数点数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を単精度浮動小数点数として返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを単精度浮動小数点数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>単精度浮動小数点数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary>現在の要素を読み取り、その内容を 32 ビット符号付き整数として返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを 32 ビット符号付き整数に変換できません。</exception>
      <returns>32 ビット符号付き整数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を 32 ビット符号付き整数として返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを 32 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>32 ビット符号付き整数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary>現在の要素を読み取り、その内容を 64 ビット符号付き整数として返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素の内容を 64 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>64 ビット符号付き整数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を 64 ビット符号付き整数として返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素の内容を 64 ビット符号付き整数に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>64 ビット符号付き整数としての要素の内容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary>現在の要素を読み取り、そのコンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。 <see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 - または -  
  
 要素のコンテンツを要求された型に変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。 <see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary>現在の要素を非同期に読み取り、そのコンテンツを <see cref="T:System.Object" /> として返します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>最も適切な型のボックス化された共通言語ランタイム (CLR) オブジェクト。 <see cref="P:System.Xml.XmlReader.ValueType" /> プロパティは、適切な CLR 型を判断します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary>現在の要素を読み取り、そのコンテンツを <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
- または - 
要素のコンテンツを <see cref="T:System.String" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <returns>コンテンツの要素、<see cref="T:System.String" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み取って、コンテンツを <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlReader" /> が要素に配置されません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
- または - 
要素のコンテンツを <see cref="T:System.String" /> オブジェクトに変換できません。</exception>
      <exception cref="T:System.ArgumentNullException">引数に <see langword="null" /> を渡してメソッドが呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI は、現在読み取り中の要素と一致しません。</exception>
      <returns>コンテンツの要素、<see cref="T:System.String" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary>現在の要素を非同期に読み取り、そのコンテンツを <see cref="T:System.String" /> オブジェクトとして返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>コンテンツの要素、<see cref="T:System.String" />オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary>テキストのみの要素を読みます。 ただし、<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <exception cref="T:System.Xml.XmlException">次のコンテンツ ノードが開始タグでないか、見つかった要素に単純なテキスト値が格納されていません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary>テキストだけの要素を読み取る前に、見つかった要素の <see cref="P:System.Xml.XmlReader.Name" /> プロパティが、指定した文字列と一致することを確認します。 ただし、<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <param name="name">確認対象の名前。</param>
      <exception cref="T:System.Xml.XmlException">次のコンテンツ ノードが開始タグでない、要素 <see langword="Name" /> が指定した引数と一致しない、または見つかった要素に単純なテキスト値が含まれていない場合。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary>テキストだけの要素を読み取る前に、見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが、指定した文字列と一致することを確認します。 ただし、<see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <param name="localname">確認対象のローカル名。</param>
      <param name="ns">確認対象の名前空間 URI。</param>
      <exception cref="T:System.Xml.XmlException">次のコンテンツ ノードが開始タグでない、要素 <see langword="LocalName" /> または <see langword="NamespaceURI" /> が指定した引数と一致しない、または見つかった要素に単純なテキスト値が含まれていない場合。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary>現在のコンテンツ ノードが終了タグで、リーダーを次のノードに進めることを確認します。</summary>
      <exception cref="T:System.Xml.XmlException">現在のノードが終了タグでないか、入力ストリームで正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary>派生クラスでオーバーライドされると、マークアップを含むすべての内容を文字列として読み取ります。</summary>
      <exception cref="T:System.Xml.XmlException">XML が整形式ではありませんでした。または、XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノード内の、マークアップを含むすべての XML の内容。 現在のノードが子を持っていない場合は、空の文字列が返されます。  
  
 現在のノードが要素でも属性でもない場合は、空の文字列が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary>マークアップを含むすべてのコンテンツを文字列として非同期に読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノード内の、マークアップを含むすべての XML の内容。 現在のノードが子を持っていない場合は、空の文字列が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary>派生クラスでオーバーライドされると、このノードとそのすべての子を表す内容 (マークアップを含む) を読み取ります。</summary>
      <exception cref="T:System.Xml.XmlException">XML が整形式ではありませんでした。または、XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary>このノードとその子を表すコンテンツをマークアップを含めて非同期に読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary>現在のノードが要素であるか調べ、リーダーを次のノードに進めます。</summary>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary>現在のコンテンツ ノードが、指定した <see cref="P:System.Xml.XmlReader.Name" /> を持つ要素で、リーダーを次のノードに進めることを確認します。</summary>
      <param name="name">要素の限定名。</param>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。  
  
- または - 
要素の <see cref="P:System.Xml.XmlReader.Name" /> が指定した <paramref name="name" /> と一致しません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary>現在のコンテンツ ノードが、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> を持つ要素で、リーダーを次のノードに進めることを確認します。</summary>
      <param name="localname">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <exception cref="T:System.Xml.XmlException">入力ストリームで、正しくない XML が検出されました。  
  
- または - 
見つかった要素の <see cref="P:System.Xml.XmlReader.LocalName" /> プロパティと <see cref="P:System.Xml.XmlReader.NamespaceURI" /> プロパティが指定した引数と一致しません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary>派生クラスでオーバーライドされると、要素ノードまたはテキスト ノードの内容を文字列として読み取ります。 ただし、<see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> メソッドを代わりに使用するほうが、この操作を簡単に処理できるため、こちらの方法をお勧めします。</summary>
      <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>要素の内容または空の文字列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary>現在のノードおよびそのすべての子孫ノードを読み取るために使用できる、新しい <see langword="XmlReader" /> インスタンスを返します。</summary>
      <exception cref="T:System.InvalidOperationException">このメソッドを呼び出すときに XML リーダーが要素に配置されていません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="F:System.Xml.ReadState.Initial" /> に設定された新しい XML リーダーのインスタンス。 <see cref="M:System.Xml.XmlReader.Read" /> メソッドを呼び出すと、<see cref="M:System.Xml.XmlReader.ReadSubtree" /> メソッドを呼び出す前に処理対象だったノードに新しいリーダーが配置されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary>指定された修飾名を使用して <see cref="T:System.Xml.XmlReader" /> を次の子孫要素に進めます。</summary>
      <param name="name">移動先となる要素の修飾名。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">パラメーターは空の文字列です。</exception>
      <returns>一致する子孫要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する子要素が見つからない場合、要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に <see cref="T:System.Xml.XmlReader" /> が配置されます。  
  
<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> が呼び出されたときに <see cref="T:System.Xml.XmlReader" /> が要素に配置されていない場合、このメソッドは <see langword="false" /> を返し、<see cref="T:System.Xml.XmlReader" /> の位置を変更しません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI を使用して <see cref="T:System.Xml.XmlReader" /> を次の子孫要素に進めます。</summary>
      <param name="localName">移動先となる要素のローカル名。</param>
      <param name="namespaceURI">移動先となる要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" /> です。</exception>
      <returns>一致する子孫要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する子要素が見つからない場合、要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に <see cref="T:System.Xml.XmlReader" /> が配置されます。  
  
<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> が呼び出されたときに <see cref="T:System.Xml.XmlReader" /> が要素に配置されていない場合、このメソッドは <see langword="false" /> を返し、<see cref="T:System.Xml.XmlReader" /> の位置を変更しません。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary>指定された修飾名の要素が見つかるまで読み込みます。</summary>
      <param name="name">要素の限定名。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">パラメーターは空の文字列です。</exception>
      <returns>一致する要素が見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" /> になり、<see cref="T:System.Xml.XmlReader" /> がファイルの末尾に置かれます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI が見つかるまで要素を読み込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" /> です。</exception>
      <returns>一致する要素が見つかる場合は <see langword="true" />。それ以外の場合は <see langword="false" /> になり、<see cref="T:System.Xml.XmlReader" /> がファイルの末尾に置かれます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary>指定された修飾名を使用して <see langword="XmlReader" /> を次の兄弟要素に進めます。</summary>
      <param name="name">移動先となる兄弟要素の修飾名。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">パラメーターは空の文字列です。</exception>
      <returns>一致する兄弟要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する兄弟要素が見つからない場合、<see langword="XmlReader" /> が親要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に配置されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI を使用して、<see langword="XmlReader" /> を次の兄弟要素に進めます。</summary>
      <param name="localName">移動先となる兄弟要素のローカル名。</param>
      <param name="namespaceURI">移動先となる兄弟要素の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" /> です。</exception>
      <returns>一致する兄弟要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する兄弟要素が見つからない場合、<see langword="XmlReader" /> が親要素の終了タグ (<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />) に配置されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary>XML ドキュメントに埋め込まれたテキストの大量のストリームを読み込みます。</summary>
      <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">
        <see cref="T:System.Xml.XmlReader" /> が結果のコピーを開始できる、バッファー内のオフセット。</param>
      <param name="count">バッファーにコピーする最大文字数。 コピーされた実際の文字数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">現在のノードに値がありません (<see cref="P:System.Xml.XmlReader.HasValue" /> が <see langword="false" />)。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML データは、整形式ではありません。</exception>
      <returns>バッファー内へ読み取られた文字数。 それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary>XML ドキュメントに埋め込まれたテキストの大量のストリームを非同期に読み取ります。</summary>
      <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">
        <see cref="T:System.Xml.XmlReader" /> が結果のコピーを開始できる、バッファー内のオフセット。</param>
      <param name="count">バッファーにコピーする最大文字数。 コピーされた実際の文字数は、このメソッドから返されます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。
- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>バッファー内へ読み取られた文字数。 それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary>派生クラスでオーバーライドされると、<see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException">リーダーが <see langword="EntityReference" /> ノードに配置されていません。つまり、このリーダーの実装では、エンティティを解決できません。<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> は <see langword="false" /> を返します。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary>現在のノードの子をスキップします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary>現在のノードの子を非同期にスキップします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノード。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary>派生クラスでオーバーライドされると、現在のノードの属性数を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードにある属性の数。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary>派生クラスでオーバーライドされると、現在のノードのベース URI を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary>派生クラスでオーバーライドされると、XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary>派生クラスでオーバーライドされると、リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary>現在のノードに属性があるかどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary>派生クラスでオーバーライドされると、現在のノードが <see cref="P:System.Xml.XmlReader.Value" /> を持つことができるかどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、ノードは <see langword="String.Empty" /> の値を持ちます。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary>派生クラスでオーバーライドされると、現在のノードが DTD またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary>派生クラスでオーバーライドされると、現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see langword="true" /> 現在のノードがで終わる要素 (equals) である場合は <see cref="P:System.Xml.XmlReader.NodeType" /><see langword="XmlNodeType.Element" /><c>/&gt;</c> 。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定したインデックスの属性の値を取得します。</summary>
      <param name="i">属性のインデックス。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>指定した属性の値。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.Name" /> の属性の値を取得します。</summary>
      <param name="name">属性の限定名。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した <see cref="P:System.Xml.XmlReader.LocalName" /> および <see cref="P:System.Xml.XmlReader.NamespaceURI" /> の属性の値を取得します。</summary>
      <param name="name">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary>派生クラスでオーバーライドされると、現在のノードのローカル名を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" /> は <see langword="book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" /> など) の場合、このプロパティは <see langword="String.Empty" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary>派生クラスでオーバーライドされると、現在のノードの限定名を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードの限定名。 たとえば、 <see langword="Name" /> は <see langword="bk:book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
返される名前は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> 名前</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の名前。</description></item><item><term><see langword="DocumentType" /></term><description> ドキュメントの種類の名前。</description></item><item><term><see langword="Element" /></term><description> タグ名。</description></item><item><term><see langword="EntityReference" /></term><description> 参照されたエンティティの名前。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 処理命令の対象。</description></item><item><term><see langword="XmlDeclaration" /></term><description> リテラル文字列 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary>派生クラスでオーバーライドされると、リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary>派生クラスでオーバーライドされると、この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary>派生クラスでオーバーライドされると、現在のノードの型を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードの型を指定する列挙値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary>派生クラスでオーバーライドされると、現在のノードに関連付けられている名前空間プリフィックスを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary>派生クラスでオーバーライドされると、属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>属性ノードの値を囲むために使用されている引用符 (" または ')。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary>派生クラスでオーバーライドされると、リーダーの状態を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>リーダーの状態を指定する列挙値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary>スキーマ検証の結果、現在のノードに割り当てられているスキーマ情報を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在のノードのスキーマ情報を含む <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。 スキーマ情報は、非 null <see cref="P:System.Xml.XmlReader.ValueType" /> (型指定された値) で、要素、属性、またはテキスト ノードに設定できます。  
  
現在のノードがこれらのノード型以外の場合、または <see langword="XmlReader" /> インスタンスがスキーマ情報を報告しない場合、このプロパティは <see langword="null" /> を返します。  
  
このプロパティが <see cref="T:System.Xml.XmlTextReader" /> オブジェクトまたは <see cref="T:System.Xml.XmlValidatingReader" /> オブジェクトから呼び出された場合は、常に <see langword="null" /> を返します。 これらの <see langword="XmlReader" /> 実装は、<see langword="SchemaInfo" /> プロパティによるスキーマ情報の公開を行いません。  
  
 <block subset="none" type="note"><para>  
 要素のスキーマ検証後の情報セット (PSVI) を取得する必要がある場合は要素の終了タグにリーダーを配置し、それ以外の場合は開始タグに配置します。 PSVI は、リーダーの <see langword="SchemaInfo" /> プロパティから取得します。 <see cref="Overload:System.Xml.XmlReader.Create" /> プロパティが <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> に設定された <see cref="F:System.Xml.ValidationType.Schema" /> で作成された検証リーダーが、要素の終了タグに配置されている場合にのみ、要素の完全な PSVI が存在します。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary>この <see cref="T:System.Xml.XmlReader" /> インスタンスを作成するために使用された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>このリーダーのインスタンスを作成するために使用した <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。 <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドを使用しないでこのリーダーを作成した場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary>派生クラスでオーバーライドされると、現在のノードのテキスト値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 これ以外のノード型はすべて <see langword="String.Empty" /> を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> [値]</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の値。</description></item><item><term><see langword="CDATA" /></term><description> CDATA セクションの内容。</description></item><item><term><see langword="Comment" /></term><description> コメントの内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部サブセット。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> ターゲットを除く全内容。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合コンテンツ モデル内のマークアップ間の空白。</description></item><item><term><see langword="Text" /></term><description> テキスト ノードの内容。</description></item><item><term><see langword="Whitespace" /></term><description> マークアップ間の空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣言の内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary>現在のノードの共通言語ランタイム (CLR) 型を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>ノードの型指定された値に対応する CLR 型。 既定値は、<see langword="System.String" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary>派生クラスでオーバーライドされると、現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary>派生クラスでオーバーライドされると、現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> メソッドで作成された <see cref="Overload:System.Xml.XmlReader.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary>リーダーが検証エラーを検出すると発生します。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary>
        <see cref="T:System.Xml.XmlReaderSettings" /> インスタンスのコピーを作成します。</summary>
      <returns>複製された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトです。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary>設定クラスのメンバーを既定値にリセットします。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary>非同期 <see cref="T:System.Xml.XmlReader" /> メソッドを <see cref="T:System.Xml.XmlReader" /> の特定のインスタンスで使用できるかどうかを取得または設定します。</summary>
      <returns>非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary>文字のチェックを行うかどうかを示す値を取得または設定します。</summary>
      <returns>文字をチェックする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。  
  
 <block subset="none" type="note"><para><see cref="T:System.Xml.XmlReader" /> がテキスト データの処理を行う場合は、プロパティの設定に関係なく、XML 名とテキストの内容が有効であることを常にチェックします。 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> を <see langword="false" /> に設定すると、文字エンティティ参照に対する文字のチェック機能がオフになります。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary>リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> が従う準拠のレベルを取得または設定します。</summary>
      <returns>XML リーダーが適用する準拠のレベルを指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary>DTD の処理を決定する値を取得または設定します。</summary>
      <returns>DTD の処理を決定する列挙値の 1 つ。 既定値は、<see cref="F:System.Xml.DtdProcessing.Prohibit" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary>コメントを無視するかどうかを示す値を取得または設定します。</summary>
      <returns>コメントを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary>処理命令を無視するかどうかを示す値を取得または設定します。</summary>
      <returns>処理命令を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary>意味のない空白を無視するかどうかを示す値を取得または設定します。</summary>
      <returns>空白を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
      <returns>行番号オフセット。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
      <returns>ラインの位置のオフセット。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary>エンティティの展開時に許容されるドキュメント内の最大文字数を示す値を取得または設定します。</summary>
      <returns>エンティティの展開時に許容される最大文字数。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary>XML ドキュメントの最大文字数を示す値を取得または設定します。 ゼロ (0) の値は、XML ドキュメントのサイズに制限がないことを示します。 0 以外の値は、最大サイズを文字数で示します。</summary>
      <returns>XML ドキュメント内の最大文字数。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary>最小単位に分割された文字列の比較に使用する <see cref="T:System.Xml.XmlNameTable" /> を取得または設定します。</summary>
      <returns>この <see cref="T:System.Xml.XmlNameTable" /> オブジェクトを使用して作成されたすべての <see cref="T:System.Xml.XmlReader" /> インスタンスで使用する、最小単位に分割されたすべての文字列を格納する <see cref="T:System.Xml.XmlReaderSettings" />。  
  
既定値は、<see langword="null" /> です。 この値が <see langword="null" /> の場合、作成された <see cref="T:System.Xml.XmlReader" /> インスタンスは、新しい空の <see cref="T:System.Xml.NameTable" /> を使用します。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary>文書型定義 (DTD) 処理を禁止するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
      <returns>DTD 処理を禁止する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary>スキーマの検証を行うときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
      <returns>スキーマ検証を実行するときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定値は空の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトです。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary>スキーマ検証の設定を示す値を取得または設定します。 この設定は、スキーマを検証する <see cref="T:System.Xml.XmlReader" /> オブジェクトに適用されます (<see langword="ValidationType.Schema" /> に設定されている <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> プロパティ)。</summary>
      <returns>検証オプションを指定する列挙値のビットごとの組み合わせ。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> は既定で有効になります。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />、および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> は既定で無効になります。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> で読み込むときに検証または型の割り当てを実行するかどうかを示す値を取得または設定します。</summary>
      <returns>読み込むときに XmlReader で検証または型の割り当てを実行するかどうかを示す <see cref="T:System.Xml.ValidationType" /> 値の 1 つ。 既定値は、<see langword="ValidationType.None" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" />。 <see langword="null" /> に設定されている場合、<see cref="T:System.Xml.XmlException" /> が外部リソースにアクセスしようとすると、<see cref="T:System.Xml.XmlReader" /> がスローされます。 既定値は、資格情報のない新しい <see cref="T:System.Xml.XmlUrlResolver" /> です。  .NET Framework 4.5.2 以降では、この設定の既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary>URI (Uniform Resource Identifier) で名前が指定された外部 XML リソースを解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>派生クラスでオーバーライドされると、URI を実際のリソースを格納しているオブジェクトに割り当てます。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在は使用されていません。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 現在のバージョンでは、System.IO.Stream オブジェクトだけを返します。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> が <see langword="Stream" /> 型ではありません。</exception>
      <exception cref="T:System.UriFormatException">指定した URI が絶対 URI ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Exception">実行時エラー (サーバー接続の中断など) があります。</exception>
      <returns>ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在は使用されていません。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <returns>ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary>派生クラスでオーバーライドされると、ベース URI および相対 URI から絶対 URI を解決します。</summary>
      <param name="baseUri">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> が <see langword="null" />です。</exception>
      <returns>絶対 URI。相対 URI を解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary>リゾルバーが <see cref="T:System.IO.Stream" /> 以外の型を返せるようにします。</summary>
      <param name="absoluteUri">URI。</param>
      <param name="type">返す型。</param>
      <returns>
        <paramref name="type" /> がサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary>派生クラスでオーバーライドされると、Web 要求を認証するために使用する資格情報を設定します。</summary>
      <returns>Web 要求を認証するために使用する資格情報。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see langword="XmlResolver" /> にはユーザーの資格情報がありません。</returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> オブジェクトをラップし、基になっている <see cref="T:System.Xml.XmlResolver" /> がアクセスできるリソースを制限することによって、<see cref="T:System.Xml.XmlResolver" /> の別の実装のセキュリティ保護を支援します。</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> と URL を指定して、<see cref="T:System.Xml.XmlSecureResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="resolver">
        <see cref="T:System.Xml.XmlSecureResolver" /> によってラップされた XML リゾルバー。</param>
      <param name="securityUrl">基になる <see cref="T:System.Xml.XmlResolver" /> に適用される <see cref="T:System.Security.PermissionSet" /> の作成に使用される URL。 <see cref="T:System.Xml.XmlSecureResolver" /> は、基になる <see cref="T:System.Xml.XmlResolver" /> で <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> を呼び出す前に、作成された <see cref="T:System.Security.PermissionSet" /> で <see cref="M:System.Security.PermissionSet.PermitOnly" /> を呼び出します。</param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトにマップします。 このメソッドは、基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出す前に <see cref="M:System.Security.PermissionSet.PermitOnly" /> を呼び出すことで、コンストラクターで作成された <see cref="T:System.Security.PermissionSet" /> を一時的に設定してリソースを開きます。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在は使用されていません。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> が <see langword="null" /> でも <see cref="T:System.IO.Stream" /> 型でもありません。</exception>
      <exception cref="T:System.UriFormatException">指定した URI が絶対 URI ではありません。</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="absoluteUri" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Exception">実行時エラー (サーバー接続の中断など) があります。</exception>
      <returns>基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出すことによって返されるストリーム。 <see cref="T:System.IO.Stream" /> 以外の型が指定された場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在は使用されていません。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
      <returns>基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出すことによって返されるストリーム。 <see cref="T:System.IO.Stream" /> 以外の型が指定された場合、このメソッドは <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary>基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="ResolveUri" /> を呼び出して、ベース URI と相対 URI から絶対 URI を解決します。</summary>
      <param name="baseUri">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relativeUri" /> が <see langword="null" />です。</exception>
      <returns>絶対 URI。相対 URI を解決できない場合は <see langword="null" /> (基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="ResolveUri" /> を呼び出すことによって返されます)。</returns>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary>Web 要求を認証するために使用する資格情報を設定します。</summary>
      <returns>Web 要求を認証するために使用する資格情報。 <see cref="T:System.Xml.XmlSecureResolver" /> は、基になる <see cref="T:System.Xml.XmlResolver" /> で、指定した資格情報を設定します。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see cref="T:System.Xml.XmlSecureResolver" /> にはユーザーの資格情報がありません。</returns>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary>混合コンテンツ ノードのマークアップ間にある空白、または xml:space= 'preserve' スコープ内の空白を表します。 これは有意の空白とも呼ばれます。</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="strData">ノードの空白文字。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 有意の空白ノードの場合、クローンとして作成されたノードには、パラメーターの設定に関係なく、常にデータ値が含まれます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>
        <see langword="XmlSignificantWhitespace" /> ノードの場合、このプロパティは <see langword="#significant-whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>
        <see langword="XmlSignificantWhitespace" /> ノードの場合、このプロパティは <see langword="#significant-whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>
        <see langword="XmlSignificantWhitespace" /> ノードの場合、この値は XmlNodeType.SignificantWhitespace です。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary>現在のノードの親を取得します。</summary>
      <returns>現在のノードの <see cref="T:System.Xml.XmlNode" /> 親ノード。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary>このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">
        <see langword="Value" /> が無効な空白文字に設定されています。</exception>
      <returns>ノードで検出された空白文字。</returns>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary>現在の <see langword="xml:space" /> スコープを指定します。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary>
        <see langword="xml:space" /> スコープと <see langword="default" /> は等価です。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary>
        <see langword="xml:space" /> スコープがありません。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary>
        <see langword="xml:space" /> スコープと <see langword="preserve" /> は等価です。</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary>要素または属性のテキストの内容を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlText" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="strData">ノードの内容。<see cref="P:System.Xml.XmlText.Value" /> プロパティに関するトピックを参照してください。</param>
      <param name="doc">親 XML ドキュメント。</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary>指定したオフセット位置でノードを 2 つのノードに分割し、両方とも兄弟としてツリーに保持します。</summary>
      <param name="offset">ノードを分割する位置のオフセット。</param>
      <returns>新しいノード。</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。 <see langword="XmlText" /> ノードには子がないため、このメソッドによる影響はありません。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>テキスト ノードの場合、このプロパティは <see langword="#text" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>テキスト ノードの場合、このプロパティは <see langword="#text" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>テキスト ノードの場合、この値は XmlNodeType.Text です。</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary>このノードの親 (親を持つノードの場合) を取得します。</summary>
      <returns>現在のノードの親である <see langword="XmlNode" />。 ノードが作成された直後でまだツリーに追加されていない場合や、ノードがツリーから削除された場合、親は <see langword="null" /> です。 他のすべてのノードについては、返される値はノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。 <see langword="ParentNode" /> プロパティの使用可能な戻り値を次の表に示します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary>このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <returns>テキスト ノードの内容。</returns>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary>XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。  
  
.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlReader" /> クラスを使用することをお勧めします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary>
        <see langword="XmlTextReader" />の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary>指定したストリームで <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input">読み取る XML データを格納しているストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>指定したストリームと <see cref="T:System.Xml.XmlNameTable" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input">読み取る XML データを格納しているストリーム。</param>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> または <paramref name="nt" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>指定したストリーム、<see cref="T:System.Xml.XmlNodeType" /> および <see cref="T:System.Xml.XmlParserContext" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment">解析する XML フラグメントを含んでいるストリーム。</param>
      <param name="fragType">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これもフラグメントに何を含めることができるかを判断します。 下の表を参照してください。</param>
      <param name="context">
        <paramref name="xmlFragment" /> の解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c> と <c>xml:space</c> スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> が Element、Attribute、または Document のいずれかの <see langword="XmlNodeType" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" /> を指定して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>指定された <see cref="T:System.Xml.XmlTextReader" /> と <see cref="T:System.IO.TextReader" /> を使用して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary>指定したファイルで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">XML データを格納しているファイルの URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
      <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ファイル名またはディレクトリの一部が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> が空の文字列です。</exception>
      <exception cref="T:System.Net.WebException">リモート ファイル名を解決できません。  
  
 - または -  
  
 この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> は有効な URI ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary>指定した URL とストリームで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
      <param name="input">読み取る XML データを格納しているストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary>指定した URL、ストリーム、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。 <paramref name="url" /> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</param>
      <param name="input">読み取る XML データを格納しているストリーム。</param>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="input" /> または <paramref name="nt" /> の値が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary>指定した URL と <see cref="T:System.IO.TextReader" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
      <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary>指定した URL、<see cref="T:System.IO.TextReader" />、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">外部リソースを解決するために使用する URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。 <paramref name="url" /> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</param>
      <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nt" /> 値は <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary>指定したファイルと <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="url">読み取る XML データを格納しているファイルの URL。</param>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="nt" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileNotFoundException">指定されたファイルが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">ファイル名またはディレクトリの一部が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="url" /> が空の文字列です。</exception>
      <exception cref="T:System.Net.WebException">リモート ファイル名を解決できません。  
  
 - または -  
  
 この要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="url" /> は有効な URI ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>指定した文字列、<see cref="T:System.Xml.XmlNodeType" />、および <see cref="T:System.Xml.XmlParserContext" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment">解析する XML フラグメントを含んでいる文字列。</param>
      <param name="fragType">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これもフラグメント文字列に何を含めることができるかを判断します。 下の表を参照してください。</param>
      <param name="context">
        <paramref name="xmlFragment" /> の解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c> と <c>xml:space</c> スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> が <see langword="Element" />、<see langword="Attribute" />、または <see langword="Document" /> のいずれかの <see langword="XmlNodeType" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlFragment" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nt">使用する <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary>
        <see cref="P:System.Xml.XmlReader.ReadState" /> を <see langword="Closed" /> に変更します。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary>指定したインデックスの属性の値を取得します。</summary>
      <param name="i">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlTextReader.AttributeCount" /> 以上です。</exception>
      <returns>指定した属性の値。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary>指定した名前の属性の値を取得します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>現在スコープ内にあるすべての名前空間が含まれたコレクションを取得します。</summary>
      <param name="scope">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns>現在スコープ内にあるすべての名前空間が含まれた <see cref="T:System.Collections.IDictionary" /> オブジェクト。 要素にリーダーが配置されていない場合は、名前空間が含まれていない空のディクショナリが返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary>バッファー内の XML の剰余を取得します。</summary>
      <returns>バッファー内の XML の剰余を格納している <see cref="T:System.IO.TextReader" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns>クラスが行情報を返せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary>現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
      <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。 この文字列は、最小単位に分割する必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> プロパティが <see langword="true" /> に設定され、<paramref name="prefix" /> 値が <see langword="null" /> です。</exception>
      <returns>プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary>指定したインデックスを持つ属性に移動します。</summary>
      <param name="i">属性のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary>指定した名前を持つ属性へ移動します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI の属性に移動します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary>現在の属性ノードを含む要素に移動します。</summary>
      <returns>リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary>最初の属性に移動します。</summary>
      <returns>属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary>次の属性に移動します。</summary>
      <returns>次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary>ストリームから次のノードを読み取ります。</summary>
      <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
      <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary>属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns>返すノードがある場合は <see langword="true" />。  
  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
  
<c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>Base64 をデコードし、デコードされたバイナリ バイトを返します。</summary>
      <param name="array">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</param>
      <param name="offset">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス (0 から始まる)。</param>
      <param name="len">バッファーに書き込むバイト数。</param>
      <exception cref="T:System.Xml.XmlException">Base64 シーケンスが無効です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see langword="BinHex" /> をデコードし、デコードされたバイナリ バイトを返します。</summary>
      <param name="array">デコードされたバイナリ バイトが書き込まれるバッファーとして機能するバイト配列。</param>
      <param name="offset">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス (0 から始まる)。</param>
      <param name="len">バッファーに書き込むバイト数。</param>
      <exception cref="T:System.Xml.XmlException">
        <see langword="BinHex" /> シーケンスが有効ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary>要素のテキストの内容を文字バッファーに読み取ります。 このメソッドは、連続して呼び出すことによって埋め込みテキストの大量のストリームを読み取るように設計されています。</summary>
      <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</param>
      <param name="index">メソッドがテキストの内容の書き込みを開始できる <paramref name="buffer" /> 内の位置。</param>
      <param name="count">
        <paramref name="buffer" /> に書き込む文字数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> が <paramref name="buffer" /> (バッファー サイズ - <paramref name="index" />) で指定した値を超えています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />
        <see langword="&lt; 0" /> または <paramref name="count" /><see langword="&lt; 0" />。</exception>
      <returns>読み取った文字数。 リーダーが要素に配置されていない場合、または返す対象となるテキストの内容が現在のコンテキスト内にこれ以上ない場合は、<see langword="0" /> になる可能性があります。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、<see langword="Base64" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlTextReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary>要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
      <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
      <exception cref="T:System.InvalidOperationException">無効な操作を実行しようとしました。</exception>
      <returns>要素ノードまたはテキスト ノードの内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
  
 <see langword="Note:" /> テキスト ノードは、要素テキスト ノードまたは属性テキスト ノードのいずれかが可能です。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary>リーダーの状態を ReadState.Initial にリセットします。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XmlParserContext" /> を使用してリーダーを構築した場合の <see langword="ResetState" /> の呼び出し。</exception>
      <exception cref="T:System.Xml.XmlException">単一ストリーム内のドキュメントが同じエンコーディングを共有していません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary>
        <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary>現在のノードの子をスキップします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」をご覧ください。</summary>
      <param name="scope">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns>現在のスコープ内にある名前空間が格納された <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />」をご覧ください。</summary>
      <param name="prefix">検索対象の名前空間 URI を持つプレフィックス。</param>
      <returns>プレフィックスに割り当てられている名前空間 URI。このプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />」をご覧ください。</summary>
      <param name="namespaceName">検索対象のプレフィックスを持つ名前空間 URI。</param>
      <returns>名前空間 URI に割り当てられているプレフィックス。この名前空間 URI にプレフィックスが割り当てられていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary>現在のノードにある属性の数を取得します。</summary>
      <returns>現在のノードにある属性の数。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary>現在のノードのベース URI を取得します。</summary>
      <returns>現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns>バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary>
        <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns>リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary>XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns>XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary>
        <see cref="T:System.Xml.DtdProcessing" /> 列挙体を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.DtdProcessing" /> 列挙体。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary>ドキュメントのエンコーディングを取得します。</summary>
      <returns>エンコーディング値。 エンコーディング属性が存在せず、バイト順のマークもない場合は、既定として UTF-8 が使用されます。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary>リーダーによるエンティティの処理方法を指定する値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 値のいずれか 1 つ。 <see langword="EntityHandling" /> が指定されていない場合は、既定で <see langword="EntityHandling.ExpandCharEntities" /> に設定されます。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary>リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns>ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary>現在のノードが <see langword="String.Empty" /> 以外の <see cref="P:System.Xml.XmlTextReader.Value" /> を保持できるかどうかを示す値を取得します。</summary>
      <returns>リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary>現在のノードが、DTD またはスキーマで定義された既定値から生成された属性であるかどうかを示す値を取得します。</summary>
      <returns>このプロパティは常に <see langword="false" /> を返します。 (<see cref="T:System.Xml.XmlTextReader" /> は既定の属性を展開しません。)</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary>現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> 現在のノードがで終わる要素 (equals) である場合は <see cref="P:System.Xml.XmlTextReader.NodeType" /><see langword="XmlNodeType.Element" /><c>/&gt;</c> 。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary>現在の行番号を取得します。</summary>
      <returns>現在の行番号。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary>現在の行の位置を取得します。</summary>
      <returns>現在の行の位置。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary>現在のノードのローカル名を取得します。</summary>
      <returns>プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" /> は <see langword="book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" /> など) の場合、このプロパティは <see langword="String.Empty" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary>現在のノードの限定名を取得します。</summary>
      <returns>現在のノードの限定名。 たとえば、 <see langword="Name" /> は <see langword="bk:book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
返される名前は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> name</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の名前。</description></item><item><term><see langword="DocumentType" /></term><description> ドキュメントの種類の名前。</description></item><item><term><see langword="Element" /></term><description> タグ名。</description></item><item><term><see langword="EntityReference" /></term><description> 参照されたエンティティの名前。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 処理命令の対象。</description></item><item><term><see langword="XmlDeclaration" /></term><description> リテラル文字列 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary>名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">読み取り操作が発生した後で (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Initial" /> でないとき)、このプロパティを設定します。</exception>
      <returns>名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary>リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</summary>
      <returns>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary>この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary>空白と属性値を正規化するかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">リーダーが閉じているとき (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Closed" /> のとき) にこのプロパティを設定します。</exception>
      <returns>正規化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary>現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
      <returns>現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary>DTD 処理を許可するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
      <returns>DTD 処理を許可しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary>属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
      <returns>属性ノードの値を囲むために使用されている引用符 (" または ')。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary>リーダーの状態を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary>現在のノードのテキスト値を取得します。</summary>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 これ以外のノード型はすべて <see langword="String.Empty" /> を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> [値]</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の値。</description></item><item><term><see langword="CDATA" /></term><description> CDATA セクションの内容。</description></item><item><term><see langword="Comment" /></term><description> コメントの内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部サブセット。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> ターゲットを除く全内容。</description></item><item><term><see langword="SignificantWhitespace" /></term><description><see langword="xml:space" />= 'preserve' スコープ内の空白。</description></item><item><term><see langword="Text" /></term><description> テキスト ノードの内容。</description></item><item><term><see langword="Whitespace" /></term><description> マークアップ間の空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣言の内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary>空白の処理方法を指定する値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">無効な値を指定しています。</exception>
      <exception cref="T:System.InvalidOperationException">リーダーが閉じているとき (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Closed" /> のとき) にこのプロパティを設定します。</exception>
      <returns>
        <see cref="T:System.Xml.WhitespaceHandling" /> 値のいずれか 1 つ。 既定値は <see langword="WhitespaceHandling.All" /> で、<see langword="Whitespace" /> と <see langword="SignificantWhitespace" /> ノードを返します。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary>現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns>現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary>DTD 参照を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
      <returns>使用する <see langword="XmlResolver" />。 <see langword="null" /> に設定されていると、外部リソースが解決されません。  
  
.NET Framework バージョン 1.1 では、<see langword="XmlResolver" /> を指定するには呼び出し元が完全に信頼されている必要があります。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary>現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary>W3C 勧告『Extensible Markup Language (XML) 1.0』および勧告『Namespaces in XML』に準拠する XML データを格納するストリームまたはファイルを高速に、非キャッシュで、前方向に生成する方法を提供するライターを表します。  
  
.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlWriter" /> クラスを使用することをお勧めします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary>指定したストリームおよびエンコーディングを使用して、<see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</summary>
      <param name="w">書き込み先のストリーム。</param>
      <param name="encoding">生成するエンコーディング。 エンコーディングが <see langword="null" /> の場合は、ストリームを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</param>
      <exception cref="T:System.ArgumentException">エンコーディングがサポートされていないか、ストリームに書き込むことができません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="w" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary>指定した <see cref="T:System.IO.TextWriter" /> を使用して <see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</summary>
      <param name="w">書き込み先の <see langword="TextWriter" />。 <see langword="TextWriter" /> が既に正しいエンコーディングに設定されていることを前提にしています。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary>指定したファイルを使用して <see cref="T:System.Xml.XmlTextWriter" /> クラスのインスタンスを作成します。</summary>
      <param name="filename">書き込むファイル名。 ファイルが存在する場合は、ファイルを切り詰め、新しい内容で上書きします。</param>
      <param name="encoding">生成するエンコーディング。 エンコーディングが <see langword="null" /> の場合は、ファイルを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</param>
      <exception cref="T:System.ArgumentException">エンコーディングがサポートされていません。ファイル名が空で、空白しか含んでいないか、無効な文字を 1 つ以上含んでいます。</exception>
      <exception cref="T:System.UnauthorizedAccessException">アクセスが拒否されました。</exception>
      <exception cref="T:System.ArgumentNullException">ファイル名が <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">書き込むディレクトリが見つかりません。</exception>
      <exception cref="T:System.IO.IOException">ファイル名には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary>このストリームおよび基になるストリームを閉じます。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary>バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary>名前空間 URI の現在の名前空間スコープで定義されたものに最も近いプリフィックスを返します。</summary>
      <param name="ns">検索する対象となるプリフィックスを持つ名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <returns>一致するプリフィックス。 一致する名前空間 URI が現在のスコープで見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイナリ バイトを base64 としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイナリ バイトを binhex としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary>指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを書き込みます。</summary>
      <param name="text">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary>指定した Unicode 文字値の文字エンティティを強制的に生成します。</summary>
      <param name="ch">文字エンティティを生成する対象の Unicode 文字。</param>
      <exception cref="T:System.ArgumentException">文字がサロゲート ペアの文字範囲、つまり <see langword="0xd800" /> - <see langword="0xdfff" />内にあります。これ以外の場合、テキストは非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>一度に 1 つのバッファーにテキストを書き込みます。</summary>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
バッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary>指定したテキストを格納するコメント &lt;!--...--&gt; を書き込みます。</summary>
      <param name="text">コメント内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>名前とオプション属性を指定して、DOCTYPE 宣言を書き込みます。</summary>
      <param name="name">DOCTYPE の名前。 これを空にすることはできません。</param>
      <param name="pubid">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid">
        <paramref name="pubid" /> が null で <paramref name="sysid" /> が非 null の場合は、<paramref name="sysid" /> がこの引数の値に置き換えられる SYSTEM "sysid" を書き込みます。</param>
      <param name="subset">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
  
- または - 
<paramref name="name" /> の値が、無効な XML になることがあります。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary>前の <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 呼び出しを閉じます。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary>開いている要素または属性を閉じ、ライターを Start 状態に戻します。</summary>
      <exception cref="T:System.ArgumentException">XML ドキュメントが無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary>1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary>
        <see langword="&amp;name;" /> のようにエンティティ参照を書き込みます。</summary>
      <param name="name">エンティティ参照の名前。</param>
      <exception cref="T:System.ArgumentException">テキストが非整形式の XML ドキュメントになるか、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary>1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary>指定した名前が W3C 勧告『XML 1.0』に準拠した有効な名前であることを確認して、それを書き込みます。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が有効な XML 名ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary>指定した名前が W3C 勧告『XML 1.0』に準拠した有効な <see langword="NmToken" /> であることを確認して、それを書き込みます。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が有効な <see langword="NmToken" /> ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>名前とテキストの間にスペースがある処理命令を、次のように書き込みます: &lt;?name text?&gt;。</summary>
      <param name="name">処理命令の名前。</param>
      <param name="text">処理命令に含めるテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。  
  
 <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
  
このメソッドは、<see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary>名前空間の修飾名を書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName">書き込むローカル名。</param>
      <param name="ns">名前に関連付ける名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
  
 <paramref name="localName" /> が、W3C の名前空間の仕様に準拠した有効な名前ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>文字バッファーから手動で生のマークアップを書き込みます。</summary>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary>文字列から手動で生のマークアップを書き込みます。</summary>
      <param name="data">書き込むテキストを格納している文字列。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>属性の開始を書き込みます。</summary>
      <param name="prefix">属性の <see langword="Namespace" /> プリフィックス。</param>
      <param name="localName">属性の <see langword="LocalName" />。</param>
      <param name="ns">属性の <see langword="NamespaceURI" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary>バージョン "1.0" で XML 宣言を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary>バージョン "1.0" とスタントアロン属性を使用して XML 宣言を書き込みます。</summary>
      <param name="standalone">
        <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>指定した開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
      <param name="prefix">要素の名前空間プリフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。 この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary>指定したテキストの内容を書き込みます。</summary>
      <param name="text">書き込むテキスト。</param>
      <exception cref="T:System.ArgumentException">テキスト文字列に、無効なサロゲート ペアが含まれています。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</summary>
      <param name="lowChar">下位サロゲート。 この値は、<see langword="0xDC00" /> から <see langword="0xDFFF" /> の範囲内にある必要があります。</param>
      <param name="highChar">上位サロゲート。 この値は、<see langword="0xD800" /> から <see langword="0xDBFF" /> の範囲内にある必要があります。</param>
      <exception cref="T:System.Exception">無効なサロゲート文字ペアが渡されました。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary>指定した空白を書き込みます。</summary>
      <param name="ws">空白文字の文字列。</param>
      <exception cref="T:System.ArgumentException">文字列に空白以外の文字が含まれています。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary>基になるストリーム オブジェクトを取得します。</summary>
      <returns>
        <see langword="XmlTextWriter" /> の書き込み先のストリーム。<see cref="T:System.IO.TextWriter" /> クラスから継承されない <see cref="T:System.IO.StreamWriter" /> を使用して <see langword="null" /> が構築された場合は <see langword="XmlTextWriter" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary>出力の書式設定方法を示します。</summary>
      <returns>
        <see cref="T:System.Xml.Formatting" /> 値のいずれか 1 つ。 既定値は <see langword="Formatting.None" /> (特定の書式設定なし) です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary>
        <see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、階層構造のレベルごとに書き込む IndentChar の数を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">このプロパティを負の値に設定。</exception>
      <returns>各レベルの <see langword="IndentChars" /> の数。 既定値は 2 です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary>
        <see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、インデントに使用する文字を取得または設定します。</summary>
      <returns>インデントに使用する文字。 既定値は空白です。  
  
 <block subset="none" type="note"><para><see langword="XmlTextWriter" /> を使用すると、このプロパティを任意の文字に設定できます。 有効な XML を確認するには、有効な空白文字、0x9、0x10、0x13、または 0x20 を指定する必要があります。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary>名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティを変更できるのは、<see langword="WriteState.Start" /> 状態のときだけです。</exception>
      <returns>名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  
  
既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary>属性値を囲む引用符に使用する文字を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">このプロパティを単一引用符または二重引用符以外の値に設定。</exception>
      <returns>属性値を囲む引用符に使用する文字。 これは単一引用符でなければなりません ( &amp; #39;)または二重引用符 ( &amp; #34;)。 既定値は二重引用符です。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary>ライターの状態を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary>現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns>現在の <see langword="xml:lang" />。または現在のスコープ内に <see langword="null" /> がない場合は <see langword="xml:lang" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary>現在の <see langword="xml:space" /> スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</summary>
      <returns>現在の <see langword="XmlSpace" /> スコープを表す <see langword="xml:space" />。  
  
 <list type="table"><listheader><term> [値]</term><description> 説明</description></listheader><item><term> None</term><description><see langword="xml:space" /> スコープが存在しない場合は、これが既定値になります。</description></item><item><term> Default</term><description> 現在のスコープは、<see langword="xml:space" />="default" です。</description></item><item><term> Preserve</term><description> 現在のスコープは、<see langword="xml:space" />="preserve" です。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary>文字列の XML 型を表します。 これにより、文字列を CDATA セクション型などの特定の XML 型として読み取ることができます。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary>CDATA 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary>ENTITIES 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary>ENTITY 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary>ENUMERATION 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary>ID 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary>IDREF 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary>IDREFS 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary>NCName 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary>NMTOKEN 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary>NMTOKENS 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary>型なし。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary>NOTATION 型。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary>QName 型。</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary>URI (Uniform Resource Identifier) で名前が指定された外部 XML リソースを解決します。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlUrlResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトにマップします。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在は使用されていません。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 現在の実装では、<see cref="T:System.IO.Stream" /> オブジェクトだけを返します。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="ofObjectToReturn" /> が <see langword="null" /> でも <see langword="Stream" /> 型でもありません。</exception>
      <exception cref="T:System.UriFormatException">指定した URI が絶対 URI ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="absoluteUri" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Exception">実行時エラー (サーバー接続の中断など) があります。</exception>
      <returns>ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary>URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
      <param name="absoluteUri">
        <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
      <param name="role">現在は使用されていません。</param>
      <param name="ofObjectToReturn">返すオブジェクトの型。 現在の実装では、<see cref="T:System.IO.Stream" /> オブジェクトだけを返します。</param>
      <returns>ストリーム オブジェクト。ストリーム以外の型が指定された場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary>ベース URI および 相対 URI を解決して絶対 URI を返します。</summary>
      <param name="baseUri">相対 URI の解決に使用するベース URI。</param>
      <param name="relativeUri">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <paramref name="baseUri" /> 値を効率的に置き換えます。 相対 URI の場合、この値は <paramref name="baseUri" /> と結合して絶対 URI を作成します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> が <see langword="null" /> または <paramref name="relativeUri" /> が <see langword="null" /> です。</exception>
      <returns>絶対 URI。相対 URI を解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary>基になる <see cref="T:System.Net.WebRequest" /> オブジェクトのキャッシュ ポリシーを取得または設定します。</summary>
      <returns>基になる Web 要求のキャッシュ ポリシー。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary>Web 要求を認証するために使用する資格情報を設定します。</summary>
      <returns>Web 要求を認証するために使用する資格情報。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see langword="XmlUrlResolver" /> にはユーザーの資格情報がありません。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary>基になる <see cref="T:System.Net.WebRequest" /> オブジェクトのネットワーク プロキシを取得または設定します。</summary>
      <returns>インターネット リソースにアクセスするために使用する <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary>ドキュメント型定義 (DTD: Document Type Definition)、XML-Data Reduced (XDR) スキーマ、および XML スキーマ定義言語 (XSD) 検証を提供するリーダーを表します。  
  
このクラスは今後は使用しません。 .NET Framework 2.0 以降は、検証 XML リーダーを作成するのに <see cref="T:System.Xml.XmlReaderSettings" /> クラスおよび <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドを使用することをお勧めします。</summary>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary>ドキュメント型定義 (DTD)、XML-Data Reduced (XDR) スキーマ、および XML スキーマ定義言語 (XSD) スキーマ検証エラーに関する情報を受信するためのイベント ハンドラーを設定します。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>値を指定して、<see langword="XmlValidatingReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment">解析する XML フラグメントを含んでいるストリーム。</param>
      <param name="fragType">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これは、フラグメントに何を含めることができるかを判断します (次の表を参照)。</param>
      <param name="context">XML フラグメントの解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <see langword="xml:lang" />、および <see langword="xml:space" /> スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> が、次の表に示すノード型の 1 つではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary>値を指定して、<see langword="XmlValidatingReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlFragment">解析する XML フラグメントを含んでいる文字列。</param>
      <param name="fragType">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これは、フラグメント文字列に何を含めることができるかも判断します (次の表を参照)。</param>
      <param name="context">XML フラグメントの解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.NameTable" />、エンコーディング、名前空間スコープ、現在の xml:lang、および xml:space スコープが含まれます。</param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="fragType" /> が、次の表に示すノード型の 1 つではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary>指定した <see cref="T:System.Xml.XmlReader" /> から返される内容を検証する <see langword="XmlValidatingReader" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reader">検証中に読み取る対象の <see langword="XmlReader" />。 現在の実装では、<see cref="T:System.Xml.XmlTextReader" /> のみサポートします。</param>
      <exception cref="T:System.ArgumentException">指定したリーダーが <see langword="XmlTextReader" /> ではありません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary>
        <see cref="P:System.Xml.XmlReader.ReadState" /> を Closed に変更します。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary>指定したインデックスの属性の値を取得します。</summary>
      <param name="i">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlValidatingReader.AttributeCount" /> 以上です。</exception>
      <returns>指定した属性の値。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary>指定した名前の属性の値を取得します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI (Uniform Resource Identifier) の属性値を取得します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
      <returns>クラスが行情報を返せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary>現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
      <param name="prefix">解決する対象となる名前空間 URI (Uniform Resource Identifier) を持つプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。</param>
      <returns>プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary>指定したインデックスを持つ属性に移動します。</summary>
      <param name="i">属性のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary>指定した名前を持つ属性へ移動します。</summary>
      <param name="name">属性の限定名。</param>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI (Uniform Resource Identifier) の属性に移動します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary>現在の属性ノードを含む要素に移動します。</summary>
      <returns>リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary>最初の属性に移動します。</summary>
      <returns>属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary>次の属性に移動します。</summary>
      <returns>次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary>ストリームから次のノードを読み取ります。</summary>
      <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary>属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
      <returns>返すノードがある場合は <see langword="true" />。  
  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
  
<c>misc=""</c> などの空の属性は、値 String.Empty を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>コンテンツを読み取り、BinHex でデコードされたバイナリ バイトを返します。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、Base64 のコンテンツをデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>要素を読み取り、BinHex のコンテンツをデコードします。</summary>
      <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
      <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
      <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">現在のノードは要素ノードではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XmlValidatingReader" /> 実装が、このメソッドをサポートしていません。</exception>
      <exception cref="T:System.Xml.XmlException">要素には混合コンテンツが含まれます。</exception>
      <exception cref="T:System.FormatException">コンテンツを要求された型に変換できません。</exception>
      <returns>バッファーに書き込まれたバイト数。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary>要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
      <returns>要素ノードまたはテキスト ノードの内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
  
 <block subset="none" type="note"><para>  
 テキスト ノードは、要素ノードまたは属性ノードのいずれかにできます。</para></block></returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary>指定した XML スキーマ定義言語 (XSD) 型の共通言語ランタイム型を取得します。</summary>
      <returns>指定した XML スキーマ型の共通言語ランタイム型。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary>
        <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
      <exception cref="T:System.InvalidOperationException">リーダーが <see langword="EntityReference" /> ノードに配置されていません。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」をご覧ください。</summary>
      <param name="scope">リーダーのスコープを識別する <see cref="T:System.Xml.XmlNamespaceScope" /> オブジェクト。</param>
      <returns>スコープ内の名前空間を識別する <see cref="T:System.Collections.IDictionary" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />」をご覧ください。</summary>
      <param name="prefix">名前空間プレフィックス。</param>
      <returns>プレフィックスに関連付けられた名前空間 URI が格納されている文字列値。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />」をご覧ください。</summary>
      <param name="namespaceName">プレフィックスに関連付けられた名前空間。</param>
      <returns>
        <paramref name="namespaceName" /> に関連付けられた名前空間プレフィックスが格納されている文字列値。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary>現在のノードにある属性の数を取得します。</summary>
      <returns>現在のノードにある属性の数。 この属性数には、既定の属性も含まれます。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary>現在のノードのベース URI を取得します。</summary>
      <returns>現在のノードのベース URI。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary>
        <see cref="T:System.Xml.XmlValidatingReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
      <returns>バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Xml.XmlValidatingReader" /> クラスは <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
      <returns>リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="XmlValidatingReader" /> は常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary>XML ドキュメント内の現在のノードの深さを取得します。</summary>
      <returns>XML ドキュメント内の現在のノードの深さ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary>ドキュメントのエンコーディング属性を取得します。</summary>
      <returns>エンコーディング値。 エンコーディング属性が存在せず、バイト順のマークもない場合は、既定として UTF-8 が使用されます。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary>リーダーによるエンティティの処理方法を指定する値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">無効な値が指定されました。</exception>
      <returns>
        <see cref="T:System.Xml.EntityHandling" /> 値のいずれか 1 つ。 <see langword="EntityHandling" /> が指定されていない場合は、既定で EntityHandling.ExpandEntities が使用されます。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary>リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
      <returns>ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary>現在のノードが String.Empty 以外の <see cref="P:System.Xml.XmlValidatingReader.Value" /> を保持できるかどうかを示す値を取得します。</summary>
      <returns>リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary>現在のノードがドキュメント型定義 (DTD) またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
      <returns>現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary>現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> 現在のノードがで終わる要素 (equals) である場合は <see cref="P:System.Xml.XmlValidatingReader.NodeType" /><see langword="XmlNodeType.Element" /><c>/&gt;</c> 。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary>現在の行番号を取得します。</summary>
      <returns>現在の行番号。 このプロパティの開始値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary>現在の行の位置を取得します。</summary>
      <returns>現在の行の位置。 このプロパティの開始値は 1 です。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary>現在のノードのローカル名を取得します。</summary>
      <returns>プリフィックスを削除した現在のノードの名前。 たとえば、 <see langword="LocalName" /> は <see langword="book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" />、など) の場合は、このプロパティは String.Empty を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary>現在のノードの限定名を取得します。</summary>
      <returns>現在のノードの限定名。 たとえば、 <see langword="Name" /> は <see langword="bk:book" /> 要素<c> &lt; bk: &gt; book</c>用です。  
  
返される名前は、ノードの <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> name</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の名前。</description></item><item><term><see langword="DocumentType" /></term><description> ドキュメントの種類の名前。</description></item><item><term><see langword="Element" /></term><description> タグ名。</description></item><item><term><see langword="EntityReference" /></term><description> 参照されたエンティティの名前。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 処理命令の対象。</description></item><item><term><see langword="XmlDeclaration" /></term><description> リテラル文字列 <see langword="xml" />。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary>名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
      <returns>名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary>リーダーが配置されているノードの、W3C (World Wide Web Consortium) の名前空間の仕様における定義に基づいた名前空間 URI (Uniform Resource Identifier) を取得します。</summary>
      <returns>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary>この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
      <returns>ノード内の最小単位に分割された文字列の取得を可能にする <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary>現在のノードの種類を取得します。</summary>
      <returns>現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary>現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
      <returns>現在のノードに関連付けられた名前空間プリフィックス。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary>属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
      <returns>属性ノードの値を囲むために使用されている引用符 (" または ')。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary>この <see langword="XmlValidatingReader" /> を構築するために使用する <see cref="T:System.Xml.XmlReader" /> を取得します。</summary>
      <returns>コンストラクターで指定した <see langword="XmlReader" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary>リーダーの状態を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary>検証に使用する <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> を取得します。</summary>
      <returns>検証に使用する <see langword="XmlSchemaCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary>スキーマ型のオブジェクトを取得します。</summary>
      <returns>ノード値が XML スキーマ定義言語 (XSD) 型またはユーザー定義の simpleType あるいは complexType に組み込まれているかどうかに応じて、<see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />、または <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />。現在のノードにスキーマ型がない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary>実行する検証のタイプを示す値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">Read を呼び出した後、このプロパティを設定。</exception>
      <returns>
        <see cref="T:System.Xml.ValidationType" /> 値のいずれか 1 つ。 このプロパティを設定しないと、既定により ValidationType.Auto が設定されます。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary>現在のノードのテキスト値を取得します。</summary>
      <returns>返される値は、ノードの <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 その他のすべてのノード型は、String.Empty を返します。  
  
 <list type="table"><listheader><term> ノード型</term><description> [値]</description></listheader><item><term><see langword="Attribute" /></term><description> 属性の値。</description></item><item><term><see langword="CDATA" /></term><description> CDATA セクションの内容。</description></item><item><term><see langword="Comment" /></term><description> コメントの内容。</description></item><item><term><see langword="DocumentType" /></term><description> 内部サブセット。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> ターゲットを除く全内容。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 混合コンテンツ モデル内のマークアップ間の空白。</description></item><item><term><see langword="Text" /></term><description> テキスト ノードの内容。</description></item><item><term><see langword="Whitespace" /></term><description> マークアップ間の空白。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣言の内容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary>現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <returns>現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary>外部ドキュメント型定義 (DTD) およびスキーマ位置参照を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。 <see langword="XmlResolver" /> は、XML スキーマ定義言語 (XSD) スキーマで見つかったインポート要素またはインクルード要素を処理するためにも使用されます。</summary>
      <returns>使用する <see langword="XmlResolver" />。 <see langword="null" /> に設定されていると、外部リソースが解決されません。  
  
.NET Framework バージョン 1.1 の場合、<see langword="XmlResolver" /> を指定するには呼び出し元が完全に信頼されている必要があります。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary>現在の <see langword="xml:space" /> スコープを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。 <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary>要素の内容の中にある空白を表します。</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>
        <see cref="T:System.Xml.XmlWhitespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="strData">ノードの空白文字。</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary>このノードの複製を作成します。</summary>
      <param name="deep">指定したノードの下にあるサブツリーのクローンを順次作成していく場合は <see langword="true" />。指定したノードだけのクローンを作成する場合は <see langword="false" />。 空白ノードの場合、クローンとして作成されたノードには、パラメーターの設定に関係なく、常にデータ値が含まれます。</param>
      <returns>クローンとして作成されたノード。</returns>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
      <param name="w">保存先の <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードを保存します。</summary>
      <param name="w">保存先の <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary>ノードのローカル名を取得します。</summary>
      <returns>
        <see langword="XmlWhitespace" /> ノードの場合、このプロパティは <see langword="#whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary>ノードの限定名を取得します。</summary>
      <returns>
        <see langword="XmlWhitespace" /> ノードの場合、このプロパティは <see langword="#whitespace" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary>ノードの種類を取得します。</summary>
      <returns>
        <see langword="XmlWhitespace" /> ノードの場合、値は <see cref="F:System.Xml.XmlNodeType.Whitespace" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary>現在のノードの親を取得します。</summary>
      <returns>現在のノードの <see cref="T:System.Xml.XmlNode" /> 親ノード。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary>このノードの直前にあるテキスト ノードを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary>ノードの値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Xml.XmlWhitespace.Value" /> が無効な空白文字に設定されています。</exception>
      <returns>ノードで検出された空白文字。</returns>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary>XML データが格納されたストリームまたはファイルを、高速かつ非キャッシュで前方のみに生成する方法を提供するライターを表します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary>派生クラスでオーバーライドされると、このストリームと基になるストリームを閉じます。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see langword="Close" /> が呼び出された後に、追加出力を書き込む呼び出しが行われたか、この呼び出しの結果が無効な XML ドキュメントです。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary>指定されたストリームを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">書き込み先のストリーム。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定されたストリームにそれを付加します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary>ストリームと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">書き込み先のストリーム。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定されたストリームにそれを付加します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary>指定された <see cref="T:System.IO.TextWriter" /> を使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">書き込み先の <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定された <see cref="T:System.IO.TextWriter" /> にそれを付加します。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary>
        <see cref="T:System.IO.TextWriter" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">書き込み先の <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> は、XML 1.0 テキスト構文を書き込み、指定された <see cref="T:System.IO.TextWriter" /> にそれを付加します。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary>指定されたファイル名を使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="outputFileName">書き込み先のファイル。 <see cref="T:System.Xml.XmlWriter" /> は、指定されたパスにファイルを作成し、XML 1.0 テキスト構文でファイルに書き込みます。 <paramref name="outputFileName" /> はファイル システム パスにする必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary>ファイル名と <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="outputFileName">書き込み先のファイル。 <see cref="T:System.Xml.XmlWriter" /> は、指定されたパスにファイルを作成し、XML 1.0 テキスト構文でファイルに書き込みます。 <paramref name="outputFileName" /> はファイル システム パスにする必要があります。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="url" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary>指定された <see cref="T:System.Text.StringBuilder" /> を使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">書き込み先の <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> で書き込まれたコンテンツが、<see cref="T:System.Text.StringBuilder" /> に付加されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary>
        <see cref="T:System.Text.StringBuilder" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">書き込み先の <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> で書き込まれたコンテンツが、<see cref="T:System.Text.StringBuilder" /> に付加されます。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="builder" /> 値は <see langword="null" /> です。</exception>
      <returns>
        <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">基になるライターとして使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 値は <see langword="null" /> です。</exception>
      <returns>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップする <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成します。</summary>
      <param name="output">基になるライターとして使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
      <param name="settings">新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを構成するために使用される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 これが <see langword="null" /> である場合は、既定の設定で <see cref="T:System.Xml.XmlWriterSettings" /> が使用されます。  
  
<see cref="T:System.Xml.XmlWriter" /> を <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドと組み合わせて使用する場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティを使って、正しい設定の割り当てられた <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得する必要があります。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトに正しい出力設定が適用されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 値は <see langword="null" /> です。</exception>
      <returns>指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトをラップする <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.DisposeAsync">
      <summary>アンマネージ リソースの非同期の解放およびリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.DisposeAsyncCore">
      <summary>管理対象リソースの非同期の解放、リリース、またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary>派生クラスでオーバーライドされると、バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary>バッファー内のデータをすべて基になるストリームに非同期にフラッシュし、基になるストリームもフラッシュします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="Flush" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary>派生クラスでオーバーライドされると、名前空間 URI の現在の名前空間スコープで定義された最も近いプリフィックスを返します。</summary>
      <param name="ns">検索対象のプリフィックスを持つ名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ns" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>一致するプリフィックス。現在のスコープに一致する名前空間 URI が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XmlReader" /> の現在の位置で見つかったすべての属性を書き込みます。</summary>
      <param name="reader">属性のコピー元の <see langword="XmlReader" />。</param>
      <param name="defattr">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Xml.XmlException">リーダーが <see langword="element" /> ノード、<see langword="attribute" /> ノード、または <see langword="XmlDeclaration" /> ノードに配置されていません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> の現在の位置で見つかったすべての属性を非同期に書き込みます。</summary>
      <param name="reader">属性のコピー元の <see langword="XmlReader" />。</param>
      <param name="defattr">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteAttributes" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定したローカル名と値の属性を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">ライターが <see langword="WriteState.Element" /> の状態にないか、またはライターが閉じています。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 属性値または <see langword="xml:lang" /> 属性値が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定したローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性に関連付ける名前空間 URI。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">ライターが <see langword="WriteState.Element" /> の状態にないか、またはライターが閉じています。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 属性値または <see langword="xml:lang" /> 属性値が無効です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定したプリフィックス、ローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">ライターが <see langword="WriteState.Element" /> の状態にないか、またはライターが閉じています。

- または - 
先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">
        <see langword="xml:space" /> 属性値または <see langword="xml:lang" /> 属性値が無効です。</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="localName" /> または <paramref name="ns" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して属性を非同期に書き込みます。</summary>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <param name="value">属性の値。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または - 
<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteAttributeString" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定したバイナリ バイトを Base64 としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイナリ バイトを base64 として非同期にエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteBase64" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、指定されたバイナリ バイトを <see langword="BinHex" /> としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">ライターが閉じているかエラー状態です。
- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary>指定したバイナリ バイトを <see langword="BinHex" /> として非同期にエンコードし、その結果生成されるテキストを書き込みます。</summary>
      <param name="buffer">エンコードするバイト配列。</param>
      <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
      <param name="count">書き込むバイト数。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteBinHex" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したテキストを含む &lt;![CDATA[...]]&gt; ブロックを書き込みます。</summary>
      <param name="text">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary>指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを非同期に書き込みます。</summary>
      <param name="text">CDATA ブロック内に配置するテキスト。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteCData" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary>派生クラスでオーバーライドされると、指定した Unicode 文字値の文字エンティティを強制的に生成します。</summary>
      <param name="ch">文字エンティティを生成する Unicode 文字。</param>
      <exception cref="T:System.ArgumentException">文字がサロゲート ペアの文字範囲、つまり <see langword="0xd800" /> - <see langword="0xdfff" /> 内にあります。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary>指定した Unicode 文字値の文字エンティティを非同期に強制的に生成します。</summary>
      <param name="ch">文字エンティティを生成する Unicode 文字。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteCharEntity" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、一度に 1 つのバッファーにテキストを書き込みます。</summary>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
バッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffer" /> パラメーター値が有効ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary>一度に 1 つのバッファーにテキストを非同期に書き込みます。</summary>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteChars" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したテキストを格納している &lt;!--...--&gt; コメントを書き込みます。</summary>
      <param name="text">コメント内に配置するテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary>指定したテキストを含むコメント &lt;!--...--&gt; を非同期に書き込みます。</summary>
      <param name="text">コメント内に配置するテキスト。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteComment" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した名前とオプションの属性を含む DOCTYPE 宣言を書き込みます。</summary>
      <param name="name">DOCTYPE の名前。 これを空にすることはできません。</param>
      <param name="pubid">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid">
        <paramref name="pubid" /> が <see langword="null" /> で <paramref name="sysid" /> が null でない場合は、SYSTEM "sysid" を書き込みます。<paramref name="sysid" /> は、この引数の値に置き換えられます。</param>
      <param name="subset">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <exception cref="T:System.InvalidOperationException">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> の値が、無効な XML になることがあります。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary>指定された名前とオプション属性を使用して DOC 宣言を非同期に書き込みます。</summary>
      <param name="name">DOCTYPE の名前。 これを空にすることはできません。</param>
      <param name="pubid">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</param>
      <param name="sysid">
        <paramref name="pubid" /> が <see langword="null" /> で <paramref name="sysid" /> が null でない場合は、SYSTEM "sysid" を書き込みます。<paramref name="sysid" /> は、この引数の値に置き換えられます。</param>
      <param name="subset">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteDocType" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary>指定されたローカル名および値を使用して要素を書き込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 値が <see langword="null" /> または空の文字列です。  
  
- または - 
パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>指定されたローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 値が <see langword="null" /> または空の文字列です。  
  
- または - 
パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
      <param name="prefix">要素のプレフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> 値が <see langword="null" /> または空の文字列です。  
  
- または - 
パラメーターの値が有効ではありません。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して要素を非同期に書き込みます。</summary>
      <param name="prefix">要素のプレフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素の名前空間 URI。</param>
      <param name="value">要素の値。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteElementString" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary>派生クラスでオーバーライドされると、前の <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出しを閉じます。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary>前の <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出しを非同期に閉じます。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteEndAttribute" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary>派生クラスでオーバーライドされると、開いている任意の要素または属性を閉じ、ライターを Start 状態に戻します。</summary>
      <exception cref="T:System.ArgumentException">XML ドキュメントが無効です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary>開いている要素または属性を非同期に閉じ、ライターを Start 状態に戻します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteEndDocument" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary>派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException">結果が無効な XML ドキュメントになります。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary>1 つの要素を非同期に閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteEndElement" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary>派生クラスでオーバーライドされると、<see langword="&amp;name;" /> などのエンティティ参照を書き込みます。</summary>
      <param name="name">エンティティ参照の名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary>エンティティ参照を <see langword="&amp;name;" /> として非同期的に書き込みます。</summary>
      <param name="name">エンティティ参照の名前。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteEntityRef" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary>派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary>1 つの要素を非同期に閉じ、対応する名前空間スコープをポップします。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteFullEndElement" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な名前であるようにします。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が有効な XML 名ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary>指定した名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な名前であることを確認し、それを非同期に書き込みます。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteName" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な NmToken であるようにします。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が有効な NmToken ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary>指定した名前が W3C 勧告『XML 1.0』(https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な NmToken であることを確認し、それを非同期に書き込みます。</summary>
      <param name="name">書き込む名前。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteNmToken" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>派生クラスでオーバーライドされると、リーダーのデータをすべてライターにコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> に無効な文字が含まれています。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトからライターにすべてをコピーします。 <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</summary>
      <param name="navigator">コピー元の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr">既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigator" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary>派生クラスでオーバーライドされると、リーダーのデータをすべてライターに非同期にコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
      <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr">
        <see langword="XmlReader" /> の既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteNode" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのすべてをライターに非同期にコピーします。 <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</summary>
      <param name="navigator">コピー元の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr">既定の属性をコピーする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteNode" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、名前とテキストの間にスペースがある処理命令を、次のように非同期的に書き込みます: &lt;?name text?&gt;。</summary>
      <param name="name">処理命令の名前。</param>
      <param name="text">処理命令に含めるテキスト。</param>
      <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。  
  
 <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
  
このメソッドは、<see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary>名前とテキストの間にスペースがある処理命令を、次のように非同期的に書き込みます: &lt;?name text?&gt;。</summary>
      <param name="name">処理命令の名前。</param>
      <param name="text">処理命令に含めるテキスト。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteProcessingInstruction" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、名前空間の限定名を書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName">書き込むローカル名。</param>
      <param name="ns">名前の名前空間 URI。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。  
  
 <paramref name="localName" /> が有効な名前ではありません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary>名前空間の修飾名を非同期に書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
      <param name="localName">書き込むローカル名。</param>
      <param name="ns">名前の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteQualifiedName" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary>派生クラスでオーバーライドされると、手動で文字バッファーから生のマークアップを書き込みます。</summary>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
- または - 
バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary>派生クラスでオーバーライドされると、手動で文字列から生のマークアップを書き込みます。</summary>
      <param name="data">書き込むテキストを格納している文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="data" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary>文字バッファーから手動で生のマークアップを非同期に書き込みます。</summary>
      <param name="buffer">書き込むテキストを格納している文字配列。</param>
      <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
      <param name="count">書き込む文字数。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteRaw" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary>文字列から手動で生のマークアップを非同期に書き込みます。</summary>
      <param name="data">書き込むテキストを格納している文字列。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteRaw" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary>指定されたローカル名を使用して属性の開始を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じています。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary>指定されたローカル名および名前空間 URI を使用して属性の開始を書き込みます。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定されたプリフィックス、ローカル名、および名前空間 URI を使用して属性の開始を書き込みます。</summary>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary>指定されたプレフィックス、ローカル名、および名前空間 URI を使用して属性の開始を非同期に書き込みます。</summary>
      <param name="prefix">属性の名前空間プレフィックス。</param>
      <param name="localName">属性のローカル名。</param>
      <param name="ns">属性の名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteStartAttribute" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary>派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary>派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言とスタンドアロン属性を書き込みます。</summary>
      <param name="standalone">
        <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary>バージョン "1.0" で XML 宣言を非同期に書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteStartDocument" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary>バージョン "1.0" とスタントアロン属性を使用して XML 宣言を非同期に書き込みます。</summary>
      <param name="standalone">
        <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteStartDocument" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したローカル名の開始タグを書き込みます。</summary>
      <param name="localName">要素のローカル名。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じています。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間に関連付けます。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。 この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じています。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間とプリフィックスに関連付けます。</summary>
      <param name="prefix">要素の名前空間プリフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">ライターが閉じています。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字であるが出力エンコーディングには有効でない文字がバッファー内にあります。 たとえば、出力エンコーディングが ASCII の場合、要素名と属性名には 0 ～ 127 の範囲の文字だけを使用する必要があります。 無効な文字は、このメソッドの引数か、バッファーに書き込んでいた以前のメソッドの引数に含まれている可能性があります。 このような文字は、可能であれば文字エンティティ参照によってエスケープされます (たとえば、テキスト ノード内や属性値内で)。 ただし、文字エンティティの参照は、要素名と属性名、コメント、処理命令、または CDATA セクションでは使用できません。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary>指定した開始タグを非同期に書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
      <param name="prefix">要素の名前空間プリフィックス。</param>
      <param name="localName">要素のローカル名。</param>
      <param name="ns">要素に関連付ける名前空間 URI。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteStartElement" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary>派生クラスでオーバーライドされると、指定したテキスト内容を書き込みます。</summary>
      <param name="text">書き込むテキスト。</param>
      <exception cref="T:System.ArgumentException">テキスト文字列に、無効なサロゲート ペアが含まれています。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary>指定したテキストの内容を非同期に書き込みます。</summary>
      <param name="text">書き込むテキスト。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteString" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary>派生クラスでオーバーライドされると、サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</summary>
      <param name="lowChar">下位サロゲート。 この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
      <param name="highChar">上位サロゲート。 この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
      <exception cref="T:System.ArgumentException">無効なサロゲート文字ペアが渡されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary>サロゲート文字ペアのサロゲート文字エンティティを非同期に生成して書き込みます。</summary>
      <param name="lowChar">下位サロゲート。 この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
      <param name="highChar">上位サロゲート。 この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteSurrogateCharEntity" /> 操作を表すタスク。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary>
        <see cref="T:System.Boolean" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Boolean" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.DateTime" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.DateTimeOffset" /> 値。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Decimal" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary>
        <see cref="T:System.Double" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Double" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary>
        <see cref="T:System.Int32" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Int32" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.Int64" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary>オブジェクト値を書き込みます。</summary>
      <param name="value">書き込むオブジェクト値。  
  
 メモ .NET Framework 3.5 のリリースでは、このメソッドは <see cref="T:System.DateTimeOffset" /> をパラメーターとして受け入れます。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">ライターが閉じているかエラー状態です。

- または -

先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary>単精度浮動小数点数を書き込みます。</summary>
      <param name="value">書き込む単精度浮動小数点数。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary>
        <see cref="T:System.String" /> 値を書き込みます。</summary>
      <param name="value">書き込む <see cref="T:System.String" /> 値。</param>
      <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary>派生クラスでオーバーライドされると、指定した空白を書き込みます。</summary>
      <param name="ws">空白文字の文字列。</param>
      <exception cref="T:System.ArgumentException">文字列に空白以外の文字が含まれています。</exception>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary>指定した空白を非同期に書き込みます。</summary>
      <param name="ws">空白文字の文字列。</param>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。

- または -

<see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlWriter" /> 非同期メソッドが呼び出されました。 この場合、非同期メソッドを使用するには XmlWriterSettings.Async を true に設定する必要があることを示すメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>非同期の <see langword="WriteWhitespace" /> 操作を表すタスク。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary>この <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成するために使用された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>このライターのインスタンスを作成するために使用した <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。 このライターが <see cref="Overload:System.Xml.XmlWriter.Create" /> メソッドを使用して作成されなかった場合、このプロパティは <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary>派生クラスでオーバーライドされると、ライターの状態を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>
        <see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary>派生クラスでオーバーライドされると、現在の <see langword="xml:lang" /> スコープを取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在の <see langword="xml:lang" /> スコープ。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary>派生クラスでオーバーライドされると、現在の <see langword="xml:space" /> スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      <returns>現在の <see langword="XmlSpace" /> スコープを表す <see langword="xml:space" />。  
  
 <list type="table"><listheader><term> [値]</term><description> 説明</description></listheader><item><term><see langword="None" /></term><description><see langword="xml:space" /> スコープが存在しない場合は、これが既定値になります。</description></item><item><term><see langword="Default" /></term><description> 現在のスコープは、<see langword="xml:space" />="default" です。</description></item><item><term><see langword="Preserve" /></term><description> 現在のスコープは、<see langword="xml:space" />="preserve" です。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> メソッドで作成された <see cref="Overload:System.Xml.XmlWriter.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary>
        <see cref="T:System.Xml.XmlWriterSettings" /> インスタンスのコピーを作成します。</summary>
      <returns>複製された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary>設定クラスのメンバーを既定値にリセットします。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary>非同期 <see cref="T:System.Xml.XmlWriter" /> メソッドを <see cref="T:System.Xml.XmlWriter" /> の特定のインスタンスで使用できるかどうかを示す値を取得または設定します。</summary>
      <returns>非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary>ドキュメント内のすべての文字が W3C の「XML 1.0 Recommendation に準拠していることを XML ライターがチェックする必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>文字をチェックする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出したときに、<see cref="T:System.IO.TextWriter" /> が、基になるストリームまたは <see cref="M:System.Xml.XmlWriter.Close" /> も閉じる必要があるかどうかを示す値を取得または設定します。</summary>
      <returns>基になるストリームまたは <see cref="T:System.IO.TextWriter" /> も閉じる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary>XML ライターが XML 出力をチェックする準拠のレベルを取得または設定します。</summary>
      <returns>準拠のレベル (ドキュメント、フラグメント、自動検出) を指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> が URI 属性をエスケープしないかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> が <see cref="T:System.Xml.XmlWriter" /> URI 属性をエスケープしない場合は。それ以外の場合は <see langword="false" /> 。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary>使用するテキスト エンコーディングの種類を取得または設定します。</summary>
      <returns>使用するテキスト エンコーディング。 既定値は、<see langword="Encoding.UTF8" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary>要素にインデントを設定するかどうかを示す値を取得または設定します。</summary>
      <returns>各要素を新しい行に書き込んでインデントを設定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary>インデント処理を行うときに使用する文字列を取得または設定します。 この設定は、<see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティが <see langword="true" /> に設定されている場合に使用します。</summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> に代入された値が <see langword="null" /> です。</exception>
      <returns>インデント処理を行うときに使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は 2 つのスペースです。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary>XML コンテンツの書き込み時に、重複する名前空間宣言を <see cref="T:System.Xml.XmlWriter" /> で削除するかどうかを示す値を取得または設定します。 既定の動作では、ライターの名前空間リゾルバーに存在するすべての名前空間宣言がライターによって出力されます。</summary>
      <returns>
        <see cref="T:System.Xml.NamespaceHandling" /> で重複する名前空間宣言を削除するかどうかを指定するための <see cref="T:System.Xml.XmlWriter" /> 列挙体。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary>改行に使用する文字列を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> に代入された値が <see langword="null" /> です。</exception>
      <returns>改行に使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は <c>\r\n</c> (キャリッジリターン、改行) です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary>出力内の改行を正規化するかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Xml.NewLineHandling" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.NewLineHandling.Replace" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary>新しい行に属性を書き込むかどうかを示す値を取得または設定します。</summary>
      <returns>個々の行に属性を書き込む場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。  
  
 <block subset="none" type="note"><para><see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティ値が <see langword="false" /> の場合、この設定は無効です。</para></block><see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> を <see langword="true" /> に設定すると、各属性は、新しい行にインデントを 1 レベル増やして記述されます。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary>XML 宣言を省略するかどうかを示す値を取得または設定します。</summary>
      <returns>XML 宣言を省略する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> で、XML 宣言が書き込まれます。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> 出力をシリアル化するために使用するメソッドを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlOutputMethod" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.XmlOutputMethod.Xml" /> です。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary>
        <see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されるときに <see cref="M:System.Xml.XmlWriter.Close" /> がすべての閉じられていない要素タグに終了タグを追加するかどうかを示す値を取得または設定します。</summary>
      <returns>閉じられていない要素タグがすべて閉じられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスのアクセサーを提供します。</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary>新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary>大文字と小文字の並べ替え順序を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary>小文字は、大文字の前に並べ替えられます。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary>大文字と小文字の区別を無視します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary>大文字は、小文字の前に並べ替えられます。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary>並べ替え順序を決定するためのデータ型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary>値は数値順に並べ替えられます。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary>値はアルファベット順に並べ替えられます。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary>並べ替え順序を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary>ノードは昇順に並べ替えられます。 たとえば、数字 1、2、3、4 を昇順に並べ替えると、1、2、3、4 となります。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary>ノードは降順に並べ替えられます。 たとえば、数字 1、2、3、4 を降順に並べ替えると、4、3、2、1 となります。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary>コンパイル済みの XPath 式を表す型クラスが指定されます。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary>派生クラスでオーバーライドされた場合、XPath 式で選択されたノードを、指定された <see cref="T:System.Collections.IComparer" /> オブジェクトに従って並べ替えます。</summary>
      <param name="expr">ソート キーを表すオブジェクト。 これはノードの <see langword="string" /> 値またはコンパイル済みの XPath 式を持つ <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトの場合もあります。</param>
      <param name="comparer">2 つのオブジェクトが等しいかどうかを比較するために特定のデータ型を提供する <see cref="T:System.Collections.IComparer" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> または並べ替えキーにプレフィックスが含まれていて、<see cref="T:System.Xml.XmlNamespaceManager" /> が指定されていないか、または指定された <see cref="T:System.Xml.XmlNamespaceManager" /> にプレフィックスが見つかりません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary>派生クラスでオーバーライドされると、指定されたパラメーターに応じて、XPath 式で選択されたノードを並べ替えます。</summary>
      <param name="expr">ソート キーを表すオブジェクト。 これはノードの <see langword="string" /> 値またはコンパイル済みの XPath 式を持つ <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトの場合もあります。</param>
      <param name="order">並べ替え順序を示す <see cref="T:System.Xml.XPath.XmlSortOrder" /> 値。</param>
      <param name="caseOrder">大文字と小文字を並べ替える方法を示す <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 値。</param>
      <param name="lang">比較に使用する言語。 言語の種類に応じて <see cref="T:System.Globalization.CultureInfo" /> メソッドに渡すことができる <see cref="Overload:System.String.Compare" /> クラスを使用します。たとえば、米国英語の場合は "us-en" になります。 空の文字列を指定すると、システム環境を使用して <see cref="T:System.Globalization.CultureInfo" /> を決定します。</param>
      <param name="dataType">データ型の並べ替え順序を示す <see cref="T:System.Xml.XPath.XmlDataType" /> 値。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XPath.XPathExpression" /> または並べ替えキーにプレフィックスが含まれていて、<see cref="T:System.Xml.XmlNamespaceManager" /> が指定されていないか、または指定された <see cref="T:System.Xml.XmlNamespaceManager" /> にプレフィックスが見つかりません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary>派生クラスでオーバーライドされた場合、この <see cref="T:System.Xml.XPath.XPathExpression" /> の複製を返します。</summary>
      <returns>新しい <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary>指定された XPath 式をコンパイルし、XPath 式を表す <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを返します。</summary>
      <param name="xpath">XPath 式。</param>
      <exception cref="T:System.ArgumentException">XPath 式のパラメーターが有効な XPath 式ではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>指定された XPath 式を、名前空間の解決用に指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用してコンパイルし、XPath 式を表す <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを返します。</summary>
      <param name="xpath">XPath 式。</param>
      <param name="nsResolver">名前空間を解決するための <see cref="T:System.Xml.IXmlNamespaceResolver" /> インターフェイスを実装するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath 式のパラメーターが有効な XPath 式ではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>
        <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary>派生クラスでオーバーライドされると、名前空間の解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを指定します。</summary>
      <param name="nsResolver">名前空間の解決のために使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> インターフェイスを実装するオブジェクト。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトのパラメーターが <see cref="T:System.Xml.IXmlNamespaceResolver" /> から派生していません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary>派生クラスでオーバーライドされると、名前空間の解決に使用する <see cref="T:System.Xml.XmlNamespaceManager" /> オブジェクトを指定します。</summary>
      <param name="nsManager">名前空間の解決に使用する <see cref="T:System.Xml.XmlNamespaceManager" /> オブジェクト。</param>
      <exception cref="T:System.Xml.XPath.XPathException">
        <see cref="T:System.Xml.XmlNamespaceManager" /> オブジェクトのパラメーターは <see cref="T:System.Xml.XmlNamespaceManager" /> クラスから派生していません。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Xml.XPath.XPathExpression" /> の <see langword="string" /> 表現を取得します。</summary>
      <returns>
        <see langword="string" /> の <see cref="T:System.Xml.XPath.XPathExpression" /> 表現。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary>派生クラスでオーバーライドされると、XPath 式の結果の型を取得します。</summary>
      <returns>XPath 式の結果の型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> 値です。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary>XQuery 1.0 および XPath 2.0 データ モデルの項目を表します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary>
        <see cref="T:System.Xml.XPath.XPathItem" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary>項目の値を、指定した型にして返します。</summary>
      <param name="returnType">返す項目の値に指定する型。</param>
      <exception cref="T:System.FormatException">項目の値が、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>要求した型に変換された項目の値。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>派生クラスでオーバーライドされた場合、名前空間プレフィックスの解決に指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して、項目の値を指定された型にして返します。</summary>
      <param name="returnType">返す項目の値に指定する型。</param>
      <param name="nsResolver">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.FormatException">項目の値が、指定した型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>要求した型に変換された項目の値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary>派生クラスでオーバーライドされた場合、項目が XPath ノードと原子値のどちらであるかを示す値を取得します。</summary>
      <returns>項目が XPath ノードを表す場合は <see langword="true" />。原子値を表す場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary>派生クラスでオーバーライドされた場合、現在の項目を、そのスキーマ型に従って、最適な .NET Framework 2.0 型のボックス化変換されたオブジェクトとして取得します。</summary>
      <returns>最適な .NET Framework 型のボックス化変換されたオブジェクトとして扱われた現在の項目。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary>派生クラスでオーバーライドされた場合、項目の <see langword="string" /> 値を取得します。</summary>
      <returns>項目の <see langword="string" /> 値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary>派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <exception cref="T:System.FormatException">項目の値が、<see cref="T:System.Boolean" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Boolean" /> へのキャストは無効です。</exception>
      <returns>
        <see cref="T:System.Boolean" /> としての項目の値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary>派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <exception cref="T:System.FormatException">項目の値が、<see cref="T:System.DateTime" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.DateTime" /> へのキャストは無効です。</exception>
      <returns>
        <see cref="T:System.DateTime" /> としての項目の値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary>派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Double" /> として取得します。</summary>
      <exception cref="T:System.FormatException">項目の値が、<see cref="T:System.Double" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Double" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>
        <see cref="T:System.Double" /> としての項目の値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary>派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Int32" /> として取得します。</summary>
      <exception cref="T:System.FormatException">項目の値が、<see cref="T:System.Int32" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Int32" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>
        <see cref="T:System.Int32" /> としての項目の値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary>派生クラスでオーバーライドされた場合、項目の値を <see cref="T:System.Int64" /> として取得します。</summary>
      <exception cref="T:System.FormatException">項目の値が、<see cref="T:System.Int64" /> 型の正しい形式になっていません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Int64" /> へのキャストは無効です。</exception>
      <exception cref="T:System.OverflowException">試行されたキャストで、オーバーフローが発生しました。</exception>
      <returns>
        <see cref="T:System.Int64" /> としての項目の値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary>派生クラスでオーバーライドされた場合、項目の .NET Framework 2.0 型を取得します。</summary>
      <returns>項目の .NET Framework 型。 既定値は <see cref="T:System.String" /> です。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary>派生クラスでオーバーライドされた場合は、項目の <see cref="T:System.Xml.Schema.XmlSchemaType" /> を取得します。</summary>
      <returns>項目の <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary>名前空間のスコープを定義します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary>現在のノードのスコープに定義されている名前空間をすべて返します。 この名前空間には、常に暗黙的に宣言される <c>xmlns:xml</c> 名前空間が含まれます。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary>現在のノードのスコープに定義されている名前空間をすべて返します。ただし、<c>xmlns:xml</c> 名前空間は除きます。 <c>xmlns:xml</c> 名前空間は、常に暗黙的に宣言されます。 返される名前空間の順序は定義されません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary>現在のノードでローカルに定義されている名前空間をすべて返します。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary>XML データ内を移動したり XML データを編集したりするためのカーソル モデルを提供します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary>現在のノード下に存在する子ノードのリストの末尾に 1 つまたは複数の新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <returns>現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary>指定された XML データ文字列を使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成します。</summary>
      <param name="newChild">新しい子ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException">XML データの文字列パラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML データの文字列パラメーターは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML コンテンツを使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成します。</summary>
      <param name="newChild">新しい子ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> のノードを使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子ノードを作成します。</summary>
      <param name="newChild">新しい子ノードとして追加するノードに配置される <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary>指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノード下に存在する子ノードのリストの末尾に新しい子要素ノードを作成します。</summary>
      <param name="prefix">新しい子要素ノードの名前空間プレフィックス (存在する場合)。</param>
      <param name="localName">新しい子要素ノードのローカル名 (存在する場合)。</param>
      <param name="namespaceURI">新しい子要素ノードの名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value">新しい子要素ノードの値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、ルート ノードでも要素ノードでもありません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 内の XML データが、提供された XML スキーマ定義言語 (XSD) スキーマに準拠していることを検証します。</summary>
      <param name="schemas">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> に格納されている XML データを検証するために使用するスキーマを格納している <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="validationEventHandler">スキーマ検証の警告とエラーに関する情報を受け取る <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">スキーマ検証エラーが発生しましたが、検証エラーを処理する <see cref="T:System.Xml.Schema.ValidationEventHandler" /> が指定されていませんでした。</exception>
      <exception cref="T:System.InvalidOperationException">要素、属性、およびルート ノードではないノードに <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されているか、または検証を実行するための型情報がありません。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> が XML データのルート ノードに配置されていないときに、<see cref="T:System.Xml.Schema.XmlSchemaSet" /> パラメーターを使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> メソッドが呼び出されました。</exception>
      <returns>スキーマ検証エラーが発生しなかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary>派生クラスでオーバーライドされると、この <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じノードに配置される新しい <see cref="T:System.Xml.XPath.XPathNavigator" /> を作成します。</summary>
      <returns>この <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じノードに配置された新しい <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary>現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置と指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置を比較します。</summary>
      <param name="nav">比較対象の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>2 つの <see cref="T:System.Xml.XmlNodeOrder" /> オブジェクトの比較位置を表す <see cref="T:System.Xml.XPath.XPathNavigator" /> 値。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary>XPath 式を表す文字列をコンパイルし、<see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを返します。</summary>
      <param name="xpath">XPath 式を表す文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="xpath" /> パラメーターに無効な XPath 式が含まれています。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>XPath 式を表す <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary>指定された値で指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在の要素ノードに属性ノードを作成します。</summary>
      <param name="prefix">新しい属性ノードの名前空間プレフィックス (存在する場合)。</param>
      <param name="localName">新しい属性ノードのローカル名。これには<see cref="F:System.String.Empty" /> や <see langword="null" /> を設定できません。</param>
      <param name="namespaceURI">新しい属性ノードの名前空間 URI (存在する場合)。</param>
      <param name="value">新しい属性ノードの値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> が渡される場合、空の属性ノードが作成されます。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は要素ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary>現在の要素に新しい属性を作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は要素ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <returns>現在の要素に新しい属性を作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> のコピーを返します。</summary>
      <returns>この <see cref="T:System.Xml.XPath.XPathNavigator" /> の <see cref="T:System.Xml.XPath.XPathNavigator" /> コピー。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary>現在のノードから指定されたノードまでの範囲にある兄弟ノードを削除します。</summary>
      <param name="lastSiblingToDelete">削除する範囲内にある最後の兄弟ノードに配置された <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.InvalidOperationException">指定された削除する最後のノードは、現在のノードの有効な兄弟ノードではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary>現在のノードとその子ノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は、ルート ノードまたは名前空間ノードなど、削除できないノードに配置されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary>指定された XPath 式を評価し、型指定された結果を返します。</summary>
      <param name="xpath">評価可能な XPath 式を表す文字列。</param>
      <exception cref="T:System.ArgumentException">XPath 式の戻り値の型は、ノードのセットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" /> オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して XPath 式の名前空間プレフィックスを解決することにより、指定された XPath 式を評価して、型指定された結果を返します。</summary>
      <param name="xpath">評価可能な XPath 式を表す文字列。</param>
      <param name="resolver">XPath 式の名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath 式の戻り値の型は、ノードのセットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" /> オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathExpression" /> を評価し、型指定された結果を返します。</summary>
      <param name="expr">評価できる <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <exception cref="T:System.ArgumentException">XPath 式の戻り値の型は、ノードのセットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" /> オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary>提供されたコンテキストを使用して <see cref="T:System.Xml.XPath.XPathExpression" /> を評価し、型指定された結果を返します。</summary>
      <param name="expr">評価できる <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <param name="context">評価の実行対象となる選択したノード セットを指す <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</param>
      <exception cref="T:System.ArgumentException">XPath 式の戻り値の型は、ノードのセットです。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>式の結果 (ブール値、数値、文字列、またはノード セット)。 <see cref="T:System.Boolean" /> オブジェクト、<see cref="T:System.Double" /> オブジェクト、<see cref="T:System.String" /> オブジェクト、または <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトにそれぞれ割り当てられます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary>指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
      <param name="localName">属性のローカル名。 <paramref name="localName" /> では、大文字と小文字が区別されます。</param>
      <param name="namespaceURI">属性の名前空間 URI。</param>
      <returns>指定された属性の値が格納された <see cref="T:System.String" />。一致する属性が見つからないか、または <see cref="F:System.String.Empty" /> が要素ノードに配置されていない場合は <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary>指定したローカル名に対応する名前空間ノードの値を返します。</summary>
      <param name="name">名前空間ノードのローカル名。</param>
      <returns>名前空間ノードの値が格納された <see cref="T:System.String" />。一致する名前空間ノードが見つからないか、または <see cref="F:System.String.Empty" /> が要素ノードに配置されていない場合は <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>現在のノードのスコープ内の名前空間を返します。</summary>
      <param name="scope">返す名前空間を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
      <returns>プレフィックスをキーとした名前空間名の <see cref="T:System.Collections.Generic.IDictionary`2" /> コレクション。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary>現在選択されているノードの後に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの後に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <returns>現在選択されているノードの後に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary>指定された XML 文字列を使用して、現在選択されているノードの後に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling">新しい兄弟ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException">XML 文字列パラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの後に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML 文字列パラメーターは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML の内容を使用して、現在選択されているノードの後に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling">新しい兄弟ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの後に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのノードを使用して、現在選択されているノードの後に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling">新しい兄弟ノードとして追加するノードに配置されている <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの後に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary>現在選択されているノードの前に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの前に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <returns>現在選択されているノードの前に新しい兄弟ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary>指定された XML 文字列を使用して、現在選択されているノードの前に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling">新しい兄弟ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException">XML 文字列パラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの前に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML 文字列パラメーターは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML の内容を使用して、現在選択されているノードの前に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling">新しい兄弟ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの前に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> のノードを使用して、現在選択されているノードの前に新しい兄弟ノードを作成します。</summary>
      <param name="newSibling">新しい兄弟ノードとして追加するノードに配置されている <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの前に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary>指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノードの後に新しい兄弟要素を作成します。</summary>
      <param name="prefix">新しい子要素の名前空間プレフィックス (存在する場合)。</param>
      <param name="localName">新しい子要素のローカル名 (存在する場合)。</param>
      <param name="namespaceURI">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value">新しい子要素の値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの後に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary>指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノードの前に新しい兄弟要素を作成します。</summary>
      <param name="prefix">新しい子要素の名前空間プレフィックス (存在する場合)。</param>
      <param name="localName">新しい子要素のローカル名 (存在する場合)。</param>
      <param name="namespaceURI">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value">新しい子要素の値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> の位置には、現在のノードの前に新しい兄弟ノードを挿入できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary>指定した <see cref="T:System.Xml.XPath.XPathNavigator" /> が、現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> の子孫かどうかを判断します。</summary>
      <param name="nav">この <see cref="T:System.Xml.XPath.XPathNavigator" /> と比較する <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> の子孫である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary>派生クラスでオーバーライドされると、現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> が、指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じ位置にあるかどうかを判断します。</summary>
      <param name="other">この <see cref="T:System.Xml.XPath.XPathNavigator" /> と比較する <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>2 つの <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトが同じ位置にある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary>指定したプリフィックスの名前空間 URI を取得します。</summary>
      <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致するようにするには、<see cref="F:System.String.Empty" /> を渡します。</param>
      <returns>指定した名前空間プレフィックスに割り当てられている名前空間 URI が格納された <see cref="T:System.String" />。指定したプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。 返される <see cref="T:System.String" /> は最小単位に分割されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary>指定された名前空間 URI に対して宣言されたプレフィックスを取得します。</summary>
      <param name="namespaceURI">プレフィックスに対して解決する名前空間 URI。</param>
      <returns>指定した名前空間 URI に割り当てられた名前空間プレフィックスが格納された <see cref="T:System.String" />。指定した名前空間 URI にプレフィックスが割り当てられていない場合は <see cref="F:System.String.Empty" />。 返される <see cref="T:System.String" /> は最小単位に分割されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary>現在のノードが、指定された XPath 式と一致するかどうかを判断します。</summary>
      <param name="xpath">XPath 式。</param>
      <exception cref="T:System.ArgumentException">XPath 式を評価できません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>現在のノードが、指定された XPath 式と一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary>現在のノードが、指定された <see cref="T:System.Xml.XPath.XPathExpression" /> 式と一致するかどうかを判断します。</summary>
      <param name="expr">コンパイル済みの XPath 式が格納されている <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath 式を評価できません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>現在のノードが <see cref="T:System.Xml.XPath.XPathExpression" /> に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じ位置に移動します。</summary>
      <param name="other">移動先のノードに配置される <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> と同じ位置に正常に移動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、ローカル名および名前空間 URI が一致する属性に移動します。</summary>
      <param name="localName">属性のローカル名。</param>
      <param name="namespaceURI">属性の名前空間 URI。空の名前空間に対しては <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が属性に正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定されたローカル名と名前空間 URI を持つ子ノードに移動します。</summary>
      <param name="localName">移動先となる子ノードのローカル名。</param>
      <param name="namespaceURI">移動先となる子ノードの名前空間 URI。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が子ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNodeType" /> の子ノードに移動します。</summary>
      <param name="type">移動先となる子ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が子ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の兄弟ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの最初の兄弟ノードに正常に移動した場合は <see langword="true" />。最初のレベルに兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> が現在属性ノードに配置されている場合は <see langword="false" />。 <see cref="T:System.Xml.XPath.XPathNavigator" /> が既に最初の兄弟に配置されている場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> は <see langword="true" /> を返し、その位置を移動しません。  
  
最初の兄弟がないために <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" /> が <see langword="false" /> を返す場合、または <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在属性に配置されている場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の属性に移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの最初の属性に正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の子ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの最初の子ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの最初の名前空間ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が最初の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> と一致する最初の名前空間ノードに移動します。</summary>
      <param name="namespaceScope">名前空間スコープを記述する <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 値。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が最初の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI を持つ要素に、<see cref="T:System.Xml.XPath.XPathNavigator" /> をドキュメント順に移動します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary>指定されたローカル名と名前空間 URI を持つ要素から指定された境界に、<see cref="T:System.Xml.XPath.XPathNavigator" /> をドキュメント順に移動します。</summary>
      <param name="localName">要素のローカル名。</param>
      <param name="namespaceURI">要素の名前空間 URI。</param>
      <param name="end">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> が、次の要素の検索でこれより先に進まないようにする、要素の境界に配置された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathNodeType" /> の次の要素に、<see cref="T:System.Xml.XPath.XPathNavigator" /> をドキュメント順に移動します。</summary>
      <param name="type">要素の <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> は、<see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> および <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" /> にはできません。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathNodeType" /> の次の要素までの <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された境界に、ドキュメント順に移動します。</summary>
      <param name="type">要素の <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> は、<see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> および <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" /> にはできません。</param>
      <param name="end">現在の <see cref="T:System.Xml.XPath.XPathNavigator" /> が、次の要素の検索でこれより先に進まないようにする、要素の境界に配置された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary>派生クラスでオーバーライドされると、指定された <see cref="T:System.String" /> と値が一致する型 <c>ID</c> の属性を持つノードに移動します。</summary>
      <param name="id">移動先のノードの <c>ID</c> 値を表す <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が正常に移動された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、ナビゲーターの位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された名前空間プレフィックスを持つ名前空間ノードに移動します。</summary>
      <param name="name">名前空間ノードの名前空間プレフィックス。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が、指定された名前空間に正常に移動された場合は <see langword="true" />。一致する名前空間ノードが見つからないか、または <see cref="T:System.Xml.XPath.XPathNavigator" /> が要素ノードに配置されていない場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの次の兄弟ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の兄弟ノードに正常に移動された場合は <see langword="true" />。それ以上兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> が属性ノードに現在配置されている場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定されたローカル名と名前空間 URI を持つ次の兄弟ノードに移動します。</summary>
      <param name="localName">移動先となる次の兄弟ノードのローカル名。</param>
      <param name="namespaceURI">移動先となる次の兄弟ノードの名前空間 URI。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の兄弟ノードに正常に移動した場合は <see langword="true" />。それ以上兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> の現在位置が属性ノードの場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNodeType" /> に一致する現在のノードの次の兄弟ノードに移動します。</summary>
      <param name="type">移動先となる兄弟ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の兄弟ノードに正常に移動された場合は <see langword="true" />。それ以上兄弟がないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> が属性ノードに現在配置されている場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を次の属性に移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の属性に正常に移動した場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を次の名前空間ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を、指定された <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> と一致する次の名前空間ノードに移動します。</summary>
      <param name="namespaceScope">名前空間スコープを記述する <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 値。</param>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が次の名前空間ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの親ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が現在のノードの親ノードに正常に移動した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary>派生クラスでオーバーライドされると、<see cref="T:System.Xml.XPath.XPathNavigator" /> を現在のノードの前の兄弟ノードに移動します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が前の兄弟ノードに正常に移動した場合は <see langword="true" />。前の兄弟ノードがないか、<see cref="T:System.Xml.XPath.XPathNavigator" /> の現在位置が属性ノードの場合は <see langword="false" />。 <see langword="false" /> の場合、<see cref="T:System.Xml.XPath.XPathNavigator" /> の位置は変更されません。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> を、現在のノードが属しているルート ノードに移動します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary>現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、新しい子ノードを付加できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <returns>現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary>指定された XML 文字列を使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成します。</summary>
      <param name="newChild">新しい子ノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException">XML 文字列パラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、新しい子ノードを付加できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML 文字列パラメーターは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの XML コンテンツを使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成します。</summary>
      <param name="newChild">新しい子ノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、新しい子ノードを付加できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト内のノードを使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子ノードを作成します。</summary>
      <param name="newChild">新しい子ノードとして追加するノードに配置される <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、新しい子ノードを付加できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary>指定された値と共に指定した名前空間プレフィックス、ローカル名、および名前空間 URI を使用して、現在のノード下に存在する子ノードのリストの先頭に新しい子要素を作成します。</summary>
      <param name="prefix">新しい子要素の名前空間プレフィックス (存在する場合)。</param>
      <param name="localName">新しい子要素のローカル名 (存在する場合)。</param>
      <param name="namespaceURI">新しい子要素の名前空間 URI (存在する場合)。 <see cref="F:System.String.Empty" /> と <see langword="null" /> は等価です。</param>
      <param name="value">新しい子要素の値。 <see cref="F:System.String.Empty" /> または <see langword="null" /> を渡すと、空の要素が作成されます。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されている現在のノードは、新しい子ノードを付加できません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary>現在のノードとその子ノードが格納された <see cref="T:System.Xml.XmlReader" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は要素ノードまたはルート ノードに配置されていません。</exception>
      <returns>現在のノードとその子ノードが格納された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary>現在のノードから指定されたノードまでの範囲内にある兄弟ノードを置き換えます。</summary>
      <param name="lastSiblingToReplace">置き換える範囲内にある最後の兄弟ノードに配置された <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.InvalidOperationException">指定された置換する最後のノードは、現在のノードの有効な兄弟ノードではありません。</exception>
      <returns>置き換える範囲を指定するために使用する <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary>現在のノードを指定された文字列の内容に置き換えます。</summary>
      <param name="newNode">新しいノード用の XML データ文字列。</param>
      <exception cref="T:System.ArgumentNullException">XML 文字列パラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は、要素、テキスト、処理命令、またはコメント ノードには配置されません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">XML 文字列パラメーターは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary>現在のノードを指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトの内容に置き換えます。</summary>
      <param name="newNode">新しいノード用の XML データに配置された <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトがエラー状態または閉じています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は、要素、テキスト、処理命令、またはコメント ノードには配置されません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XmlReader" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary>現在のノードを指定された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの内容に置き換えます。</summary>
      <param name="newNode">新しいノードに配置された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトのパラメーターは <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は、要素、テキスト、処理命令、またはコメント ノードには配置されません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
      <exception cref="T:System.Xml.XmlException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト パラメーターの XML コンテンツは整形式ではありません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary>指定された XPath 式を使用して、ノード セットを選択します。</summary>
      <param name="xpath">XPath 式を表す <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentException">XPath 式にエラーがあるか、またはその戻り値の型がノード セットではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>選択されたノード セットを指している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>名前空間プレフィックスを解決するように指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトと共に指定した XPath 式を使用して、ノード セットを選択します。</summary>
      <param name="xpath">XPath 式を表す <see cref="T:System.String" />。</param>
      <param name="resolver">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath 式にエラーがあるか、またはその戻り値の型がノード セットではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>選択されたノード セットを指している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary>指定した <see cref="T:System.Xml.XPath.XPathExpression" /> を使用して、ノード セットを選択します。</summary>
      <param name="expr">コンパイル済みの XPath クエリが格納されている <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath 式にエラーがあるか、またはその戻り値の型がノード セットではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath 式が有効ではありません。</exception>
      <returns>選択されたノード セットを指している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary>指定されたローカル名と名前空間 URI を持つ現在のノードのすべての先祖ノードを選択します。</summary>
      <param name="name">先祖ノードのローカル名。</param>
      <param name="namespaceURI">先祖ノードの名前空間 URI。</param>
      <param name="matchSelf">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターとして <see langword="null" /> を渡すことはできません。</exception>
      <returns>選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。 ノードは、ドキュメントの逆順で返されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>一致する <see cref="T:System.Xml.XPath.XPathNodeType" /> を持つ現在のノードのすべての先祖ノードを選択します。</summary>
      <param name="type">先祖ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。 ノードは、ドキュメントの逆順で返されます。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary>指定されたローカル名と名前空間 URI を持つ現在のノードのすべての子ノードを選択します。</summary>
      <param name="name">子ノードのローカル名。</param>
      <param name="namespaceURI">子ノードの名前空間 URI。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターとして <see langword="null" /> を渡すことはできません。</exception>
      <returns>選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary>一致する <see cref="T:System.Xml.XPath.XPathNodeType" /> を持つ現在のノードのすべての子ノードを選択します。</summary>
      <param name="type">子ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns>選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary>指定されたローカル名と名前空間 URI を持つ現在のノードのすべての子孫ノードを選択します。</summary>
      <param name="name">子孫ノードのローカル名。</param>
      <param name="namespaceURI">子孫ノードの名前空間 URI。</param>
      <param name="matchSelf">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">パラメーターとして <see langword="null" /> を渡すことはできません。</exception>
      <returns>選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary>一致する <see cref="T:System.Xml.XPath.XPathNodeType" /> を持つ現在のノードのすべての子孫ノードを選択します。</summary>
      <param name="type">子孫ノードの <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf">選択項目にコンテキスト ノードを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>選択されたノードを格納している <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary>指定された XPath クエリを使用して、<see cref="T:System.Xml.XPath.XPathNavigator" /> 内の単一のノードを選択します。</summary>
      <param name="xpath">XPath 式を表す <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentException">XPath クエリでエラーが発生したか、または XPath 式の戻り値の型がノードではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath クエリが無効です。</exception>
      <returns>指定された XPath クエリに対して最初に一致するノードが格納された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。クエリ結果がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>名前空間プレフィックスを解決するために指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトと共に、指定された XPath クエリを使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト内の単一のノードを選択します。</summary>
      <param name="xpath">XPath 式を表す <see cref="T:System.String" />。</param>
      <param name="resolver">XPath クエリの名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath クエリでエラーが発生したか、または XPath 式の戻り値の型がノードではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath クエリが無効です。</exception>
      <returns>指定された XPath クエリに対して最初に一致するノードが格納された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。クエリ結果がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary>指定された <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクトを使用して、<see cref="T:System.Xml.XPath.XPathNavigator" /> 内の単一のノードを選択します。</summary>
      <param name="expression">コンパイル済みの XPath クエリが格納されている <see cref="T:System.Xml.XPath.XPathExpression" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException">XPath クエリでエラーが発生したか、または XPath 式の戻り値の型がノードではありません。</exception>
      <exception cref="T:System.Xml.XPath.XPathException">XPath クエリが無効です。</exception>
      <returns>指定された XPath クエリに対して最初に一致するノードが格納された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。クエリ結果がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary>現在のノードの型指定された値を設定します。</summary>
      <param name="typedValue">ノードの型指定された新しい値。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は指定されたオブジェクトの型をサポートしていません。</exception>
      <exception cref="T:System.ArgumentNullException">指定された値を <see langword="null" /> にすることはできません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> は要素ノードまたは属性ノードに配置されていません。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary>現在のノードの値を設定します。</summary>
      <param name="value">ノードの新しい値。</param>
      <exception cref="T:System.ArgumentNullException">値パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">名前空間ノードであるルート ノードに <see cref="T:System.Xml.XPath.XPathNavigator" /> が配置されているか、または指定された値が無効です。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> では、編集はサポートされていません。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの新しいコピーを作成します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの新しいコピーです。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary>現在のノードのテキスト値を取得します。</summary>
      <returns>現在のノードのテキスト値が格納された <see langword="string" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>現在のノードの値を指定された <see cref="T:System.Type" /> として取得し、指定された <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクトを使用して名前空間プレフィックスを解決します。</summary>
      <param name="returnType">現在のノードの値を返すときの <see cref="T:System.Type" />。</param>
      <param name="nsResolver">名前空間プレフィックスの解決に使用する <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
      <exception cref="T:System.FormatException">現在のノードの値が、指定した型に適した形式ではありません。</exception>
      <exception cref="T:System.InvalidCastException">試行されたキャストが無効です。</exception>
      <returns>要求した <see cref="T:System.Type" /> に変換された現在のノードの値。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary>現在のノードとその子ノードを、指定された <see cref="T:System.Xml.XmlWriter" /> オブジェクトにストリーム転送します。</summary>
      <param name="writer">ストリーム転送先の <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary>派生クラスでオーバーライドされると、現在のノードのベース URI を取得します。</summary>
      <returns>ノードの読み込み元となった場所。または、値がない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> で、基になる XML データを編集できるかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> が <see cref="T:System.Xml.XPath.XPathNavigator" /> 基になる XML データを編集できる場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary>現在のノードに属性があるかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" /> 現在のノードに属性がある場合は。 <see langword="false" /> 現在のノードに属性がない場合、または <see cref="T:System.Xml.XPath.XPathNavigator" /> が要素ノードに配置されていない場合は、を返します。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary>現在のノードに子ノードがあるかどうかを示す値を取得します。</summary>
      <returns>現在のノードが子ノードを持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary>現在のノードの子ノードを表すマークアップを取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> プロパティは設定できません。</exception>
      <returns>現在のノードの子ノードのマークアップが含まれる <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary>派生クラスでオーバーライドされると、現在のノードが終了要素タグのない空の要素かどうかを示す値を取得します。</summary>
      <returns>現在のノードが空の要素の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary>現在のノードが XPath ノードかどうかを表す値を取得します。</summary>
      <returns>常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary>派生クラスでオーバーライドされると、現在のノードの名前空間プレフィックスなしの <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> を取得します。</summary>
      <returns>現在のノードのローカル名が含まれる <see cref="T:System.String" />。現在のノードが名前を持たない場合 (たとえばテキスト ノードまたはコメント ノード) は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary>派生クラスでオーバーライドされると、現在のノードの限定名を取得します。</summary>
      <returns>現在のノードの修飾 <see cref="P:System.Xml.XPath.XPathNavigator.Name" /> が格納された <see cref="T:System.String" />。現在のノードが名前を持たない場合 (たとえばテキスト ノードまたはコメント ノード) は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary>派生クラスでオーバーライドされると、現在のノードの名前空間 URI を取得します。</summary>
      <returns>現在のノードの名前空間 URI が格納された <see cref="T:System.String" />。現在のノードが名前空間 URI を持っていない場合は <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Xml.XmlNameTable" /> の <see cref="T:System.Xml.XPath.XPathNavigator" /> を取得します。</summary>
      <returns>XML ドキュメント内の最小単位に分割された <see cref="T:System.Xml.XmlNameTable" /> を取得できる <see cref="T:System.String" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの等価性を比較するために使用される <see cref="T:System.Collections.IEqualityComparer" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトの等価性を比較するために使用される <see cref="T:System.Collections.IEqualityComparer" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary>派生クラスでオーバーライドされると、現在のノードの <see cref="T:System.Xml.XPath.XPathNodeType" /> を取得します。</summary>
      <returns>現在のノードを表す <see cref="T:System.Xml.XPath.XPathNodeType" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary>現在のノードとその子ノードの開始タグおよび終了タグを表すマークアップを取得または設定します。</summary>
      <returns>現在のノードとその子ノードの開始タグおよび終了タグを表すマークアップが格納された <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary>派生クラスでオーバーライドされると、現在のノードに関連付けられている名前空間プリフィックスを取得します。</summary>
      <returns>現在のノードに関連付けられた名前空間プレフィックスが格納された <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary>スキーマ検証の結果、現在のノードに割り当てられているスキーマ情報を取得します。</summary>
      <returns>現在のノードのスキーマ情報が格納された <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary>現在のノードを、最も適切な .NET Framework 型にボックス化変換したオブジェクトとして取得します。</summary>
      <returns>最も適切な .NET Framework 型にボックス化変換されたオブジェクトとしての現在のノード。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary>ストアに対する "仮想化された" XML ビューを提供する <see cref="T:System.Xml.XPath.XPathNavigator" /> 実装で使用し、基になるオブジェクトへのアクセスを提供します。</summary>
      <returns>既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary>現在のノードの値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <exception cref="T:System.FormatException">現在のノードの文字列値を、<see cref="T:System.Boolean" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Boolean" /> へのキャストは無効です。</exception>
      <returns>現在のノードの <see cref="T:System.Boolean" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary>現在のノードの値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <exception cref="T:System.FormatException">現在のノードの文字列値を、<see cref="T:System.DateTime" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.DateTime" /> へのキャストは無効です。</exception>
      <returns>現在のノードの <see cref="T:System.DateTime" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary>現在のノードの値を <see cref="T:System.Double" /> として取得します。</summary>
      <exception cref="T:System.FormatException">現在のノードの文字列値を、<see cref="T:System.Double" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Double" /> へのキャストは無効です。</exception>
      <returns>現在のノードの <see cref="T:System.Double" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary>現在のノードの値を <see cref="T:System.Int32" /> として取得します。</summary>
      <exception cref="T:System.FormatException">現在のノードの文字列値を、<see cref="T:System.Int32" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Int32" /> へのキャストは無効です。</exception>
      <returns>現在のノードの <see cref="T:System.Int32" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary>現在のノードの値を <see cref="T:System.Int64" /> として取得します。</summary>
      <exception cref="T:System.FormatException">現在のノードの文字列値を、<see cref="T:System.Int64" /> に変換することはできません。</exception>
      <exception cref="T:System.InvalidCastException">試行された <see cref="T:System.Int64" /> へのキャストは無効です。</exception>
      <returns>現在のノードの <see cref="T:System.Int64" /> としての値。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary>現在のノードの .NET Framework <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のノードの .NET Framework <see cref="T:System.Type" />。 既定値は <see cref="T:System.String" /> です。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary>現在のノードの <c>xml:lang</c> スコープを取得します。</summary>
      <returns>
        <see cref="T:System.String" />
        <c>Xml: lang</c>スコープの値を格納している。または、 <see cref="F:System.String.Empty" /> 返される<c>xml: lang</c>スコープ値が現在のノードにない場合は。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary>現在のノードの <see cref="T:System.Xml.Schema.XmlSchemaType" /> 情報を取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> オブジェクト。既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary>選択したノード セットに対する反復子を指定します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNodeIterator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary>派生クラスでオーバーライドされた場合、この <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトの複製を返します。</summary>
      <returns>この <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクトを複製した新しい <see cref="T:System.Xml.XPath.XPathNodeIterator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary>選択したノード セットを反復処理する <see cref="T:System.Collections.IEnumerator" /> オブジェクトを返します。</summary>
      <returns>選択したノード セットを反復処理する <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary>派生クラスでオーバーライドされると、<see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> プロパティによって返された <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを、選択されたノード セットにおける次のノードに移動させます。</summary>
      <returns>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトが次のノードに移動された場合は、<see langword="true" />。これ以上、選択されたノードがない場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary>現在のインスタンスのコピーである新しいオブジェクトを作成します。</summary>
      <returns>このインスタンスのコピーである新しいオブジェクト。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary>選択したノード セットの最後のノードのインデックスを取得します。</summary>
      <returns>選択したノード セットの最後のノードのインデックス。ノードが選択されていない場合は 0。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary>派生クラスでオーバーライドされると、現在のコンテキスト ノードに位置する、この <see cref="T:System.Xml.XPath.XPathNodeIterator" /> の <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクトを取得します。</summary>
      <returns>ノード セットの選択元となるコンテキスト ノードに位置する <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> メソッドを呼び出して、選択したセットの最初のノードに <see cref="T:System.Xml.XPath.XPathNodeIterator" /> を移動する必要があります。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary>派生クラスでオーバーライドされると、選択したノード セットの現在の位置のインデックスを取得します。</summary>
      <returns>現在の位置のインデックス。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスから返される XPath ノード型を定義します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary>任意の <see cref="T:System.Xml.XPath.XPathNodeType" /> ノード型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary>
        <c>id='123'</c> などの属性。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary>
        <c>&lt;!-- my comment --&gt;</c> などのコメント。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary>
        <c>&lt;element&gt;</c> などの要素。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary>
        <c>xmlns="namespace"</c> などの名前空間。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary>
        <c>&lt;?pi test?&gt;</c> などの処理命令。 XML 宣言は <see cref="T:System.Xml.XPath.XPathNavigator" /> クラスから参照できないため、これには含まれません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary>XML ドキュメントまたはノード ツリーのルート ノード。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary>空白文字を含み、<c>xml:space</c> が <c>preserve</c> に設定されているノード。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary>ノードのテキストの内容。 ドキュメント オブジェクト モデル (DOM: Document Object Model) Text 型および CDATA ノード型と等価です。 少なくとも 1 文字を含みます。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary>空白文字だけを含み、有意な空白を含まないノード。 空白文字は <c>#x20</c>、<c>#x9</c>、<c>#xD</c>、または <c>#xA</c> です。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary>XPath 式の戻り値の型を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary>任意の XPath ノード型。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary>
        <see cref="T:System.Boolean" />
        <see langword="true" /> 値、または <see langword="false" /> 値。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary>式が正しい XPath 型を評価しません。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary>ツリー フラグメント。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary>ノード コレクション。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary>数値を指定します。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary>
        <see cref="T:System.String" /> 値。</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary>XSLT (Extensible Stylesheet Language Transformations) スタイル シートに定義されている特定の関数へのインターフェイスをランタイム実行時に提供します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary>特定のコンテキストにおいて、引数を指定して関数を呼び出すメソッドを提供します。</summary>
      <param name="xsltContext">関数の呼び出し時の XSLT コンテキスト。</param>
      <param name="args">関数の呼び出し時に渡す引数。 各引数は配列内の要素です。</param>
      <param name="docContext">関数の呼び出し時のコンテキスト ノード。</param>
      <returns>関数の戻り値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary>関数の引数リストに対して指定されている XPath (XML Path Language) 型を取得します。 この情報を使用すると、オーバーロードされた関数を区別するための関数のシグネチャを検出できます。</summary>
      <returns>関数の引数リストの型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> の配列。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary>関数の引数の最大数を取得します。 この情報を使用すると、オーバーロードされた関数を区別できます。</summary>
      <returns>関数の引数の最大数。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary>関数の引数の最小数を取得します。 この情報を使用すると、オーバーロードされた関数を区別できます。</summary>
      <returns>関数の引数の最小数。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary>関数によって返された XPath 型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> を取得します。</summary>
      <returns>関数によって返された XPath 型を表す <see cref="T:System.Xml.XPath.XPathResultType" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary>スタイル シートに定義されている特定の変数へのインターフェイスを、ランタイムでの実行中に提供します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary>実行時に変数を評価し、変数の値を表すオブジェクトを返します。</summary>
      <param name="xsltContext">変数の実行コンテキストを表す <see cref="T:System.Xml.Xsl.XsltContext" />。</param>
      <returns>変数の値を表す <see cref="T:System.Object" />。 有効な戻り値の型には、数字、文字列、ブール値、ドキュメントの断片、またはノード セットがあります。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary>変数がローカルかどうかを示す値を取得します。</summary>
      <returns>変数が現在のコンテキストにおいてローカル変数である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary>変数が、XSLT (Extensible Stylesheet Language Transformations) パラメーターかどうかを示す値を取得します。 これは、スタイル シートまたはテンプレートに対するパラメーターになります。</summary>
      <returns>変数が XSLT パラメーターの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary>変数の XPath (XML Path Language) 型を表す <see cref="T:System.Xml.XPath.XPathResultType" /> を取得します。</summary>
      <returns>変数の XPath 型を表す <see cref="T:System.Xml.XPath.XPathResultType" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary>XSLT スタイル シートを使用して、XML データを変換します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> クラスの新しいインスタンスを、指定されたデバッグ設定を使用して初期化します。</summary>
      <param name="enableDebug">デバッグ情報を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 これを <see langword="true" /> に設定すると、Microsoft Visual Studio デバッガーを使用してスタイル シートをデバッグできます。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary>
        <see langword="XSLTC.exe" /> ユーティリティを使用してコンパイルされたスタイル シートからメソッドを読み込みます。</summary>
      <param name="executeMethod">コンパイラが生成した、コンパイル済みスタイル シートの <c>execute</c> メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> オブジェクト。</param>
      <param name="queryData">
        <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> メソッドによって生成されたコンパイル済みスタイル シートの <c>staticData</c> フィールドに含まれるシリアル化されたデータ構造のバイト配列。</param>
      <param name="earlyBoundTypes">コンパイラが生成した、コンパイル済みスタイル シートの <c>ebTypes</c> フィールドに格納された型の配列。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary>指定された URI にあるスタイル シートの読み込みおよびコンパイルを行います。</summary>
      <param name="stylesheetUri">スタイル シートの URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">スタイル シートが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="stylesheetUri" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">スタイル シートの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>URI で指定された XSLT スタイル シートの読み込みおよびコンパイルを行います。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
      <param name="stylesheetUri">スタイル シートの URI。</param>
      <param name="settings">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
      <param name="stylesheetResolver">XSLT の <c>import</c> 要素および <c>include</c> 要素で参照されるスタイル シート URI および任意のスタイル シートを解決するために使用する <see cref="T:System.Xml.XmlResolver" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheetUri" /> または <paramref name="stylesheetResolver" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
      <exception cref="T:System.IO.FileNotFoundException">スタイル シートが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="stylesheetUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="stylesheetUri" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="stylesheetUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">スタイル シートの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary>XSLT コンパイラ (xsltc.exe) を使用して作成されたコンパイル済みスタイル シートを読み込みます。</summary>
      <param name="compiledStylesheet">コンパイル済みスタイル シートを含むクラスの名前。  
  
 これは、通常、スタイル シート名です。 別途指定しない限り、xsltc.exe ツールはスタイル シート名をクラス名およびアセンブリ名に使用します。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されているスタイル シートをコンパイルします。</summary>
      <param name="stylesheet">スタイル シートが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートをコンパイルします。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
      <param name="stylesheet">スタイル シートが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
      <param name="stylesheetResolver">XSLT の <c>import</c> 要素および <c>include</c> 要素で参照される任意のスタイル シートを解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトに格納されているスタイル シートをコンパイルします。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、またはスタイル シートが格納されている <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートをコンパイルします。 <see cref="T:System.Xml.XmlResolver" /> は、XSLT の <c>import</c> 要素または <c>include</c> 要素を解決し、XSLT 設定でスタイル シートに対するアクセス許可を確認します。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、またはスタイル シートが格納されている <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="settings">スタイル シートに適用する <see cref="T:System.Xml.Xsl.XsltSettings" />。 これが <see langword="null" /> の場合は、<see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定が適用されます。</param>
      <param name="stylesheetResolver">XSLT の <c>import</c> 要素および <c>include</c> 要素で参照される任意のスタイル シートを解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stylesheet" /> 値は <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">スタイル シートにエラーが含まれています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果をファイルに出力します。</summary>
      <param name="inputUri">入力ドキュメントの URI。</param>
      <param name="resultsFile">出力ファイルの URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> または <paramref name="resultsFile" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.FileNotFoundException">入力ドキュメントが見つかりません。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> 値または <paramref name="resultsFile" /> 値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 値または <paramref name="resultsFile" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> または <paramref name="resultsFile" /> が有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="inputUri">入力ドキュメントの URI。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="inputUri">入力ドキュメントの URI。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先のストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="inputUri">入力ドキュメントの URI。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>URI で指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="inputUri">入力ドキュメントの URI。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputUri" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">
        <paramref name="inputtUri" /> の値に、存在しないファイル名またはディレクトリが含まれています。</exception>
      <exception cref="T:System.Net.WebException">
        <paramref name="inputUri" /> 値を解決できません。  
  
- または - 
要求の処理中にエラーが発生しました。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="inputUri" /> は有効な URI ではありません。</exception>
      <exception cref="T:System.Xml.XmlException">入力ドキュメントの読み込み中に解析エラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先のストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には追加の実行時引数を指定し、XmlResolver で XSLT の <c>document()</c> 関数を解決します。</summary>
      <param name="input">入力ドキュメントが格納されている <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <param name="documentResolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果をストリームに出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先のストリーム。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.IO.TextWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には、追加の実行時引数を指定します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 Microsoft .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="arguments">変換に対する入力として使用された名前空間限定引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。 この値は、<see langword="null" /> の場合もあります。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <c>xsl:output</c> 要素が含まれている場合は、<see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="T:System.Xml.XmlWriter" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="results" /> の値が <see langword="null" /> です。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException">XSLT 変換の実行中にエラーが発生しました。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された入力ドキュメントを使用して変換を実行し、結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> には追加の実行時引数を指定し、<see cref="T:System.Xml.XmlResolver" /> で XSLT の <see langword="document()" /> 関数を解決します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> オブジェクトで指定された変換対象のドキュメント。</param>
      <param name="arguments">引数リスト (<see cref="T:System.Xml.Xsl.XsltArgumentList" />)。</param>
      <param name="results">出力先の <see cref="T:System.Xml.XmlWriter" />。  
  
スタイル シートに <see langword="xsl:output" /> 要素が含まれている場合は、<see cref="T:System.Xml.XmlWriter" /> プロパティから返される <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを使用して <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を作成する必要があります。 これにより、<see cref="T:System.Xml.XmlWriter" /> に正しい出力設定が設定されます。</param>
      <param name="documentResolver">XSLT の <see langword="document()" /> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<see langword="document()" /> 関数は解決されません。</param>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary>スタイル シートの <c>xsl:output</c> 要素から派生した出力情報が格納された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.XmlWriterSettings" />スタイルシートの<c>xsl: output</c>要素から派生した出力情報を格納している読み取り専用のオブジェクト。 この値は、<see langword="null" /> の場合もあります。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary>XSLT パラメーターまたは拡張オブジェクトで、可変な数の引数を格納します。</summary>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary>スタイル シートに <c>xsl:message</c> 要素でメッセージが指定されている場合に発生します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> の新しいインスタンスを実装します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary>新しいオブジェクトを <see cref="T:System.Xml.Xsl.XsltArgumentList" /> に追加し、それを名前空間 URI に関連付けます。</summary>
      <param name="namespaceUri">オブジェクトに関連付ける名前空間 URI。 既定の名前空間を使用するには、空の文字列を指定します。</param>
      <param name="extension">リストに追加するオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> が <see langword="null" /> または http://www.w3.org/1999/XSL/Transform のいずれかです 
<paramref name="namespaceUri" /> には、既に拡張オブジェクトが関連付けられています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、このメソッドを呼び出すための十分なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary>パラメーターを <see cref="T:System.Xml.Xsl.XsltArgumentList" /> に追加し、それを名前空間限定名に関連付けます。</summary>
      <param name="name">パラメーターに関連付ける名前。</param>
      <param name="namespaceUri">パラメーターに関連付ける名前空間 URI。 既定の名前空間を使用するには、空の文字列を指定します。</param>
      <param name="parameter">リストに追加するパラメーター値またはオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceUri" /> が <see langword="null" /> または http://www.w3.org/1999/XSL/Transform です。  
  
<paramref name="name" /> が、W3C XML 仕様に準拠した有効な名前ではありません。  
  
<paramref name="namespaceUri" /> には、既にパラメーターが関連付けられています。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> からすべてのパラメーターと拡張オブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary>指定した名前空間に関連付けられているオブジェクトを取得します。</summary>
      <param name="namespaceUri">オブジェクトの名前空間 URI。</param>
      <returns>名前空間 URI オブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary>名前空間限定名に関連付けられているパラメーターを取得します。</summary>
      <param name="name">パラメーターの名前。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> は、渡された名前が有効なローカル名であるかどうかを確認しません。ただし、名前を <see langword="null" /> にすることはできません。</param>
      <param name="namespaceUri">パラメーターに関連付けられた名前空間 URI。</param>
      <returns>パラメーター オブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> から名前空間 URI を持つオブジェクトを削除します。</summary>
      <param name="namespaceUri">削除するオブジェクトに関連付けられている名前空間 URI。</param>
      <returns>名前空間 URI を含むオブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltArgumentList" /> からパラメーターを削除します。</summary>
      <param name="name">削除するパラメーターの名前。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> は、渡された名前が有効なローカル名であるかどうかを確認しません。ただし、名前を <see langword="null" /> にすることはできません。</param>
      <param name="namespaceUri">削除するパラメーターの名前空間 URI。</param>
      <returns>パラメーター オブジェクト。見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary>XSLT スタイル シートでエラーが見つかったときに、Load メソッドによってスローされる例外。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary>
        <see langword="XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="inner">
        <see langword="XsltCompileException" /> をスローした <see cref="T:System.Exception" />。</param>
      <param name="sourceUri">スタイル シートの位置パス。</param>
      <param name="lineNumber">スタイル シートで発生したエラーの位置を示す行番号。</param>
      <param name="linePosition">スタイル シートで発生したエラーの位置を示す行番号。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトおよび <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトの情報を使用して、<see langword="XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> のすべてのプロパティを格納している <see langword="XsltCompileException" /> オブジェクト。</param>
      <param name="context">コンテキスト情報を格納している <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Xml.Xsl.XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary>指定されたエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Xml.Xsl.XsltCompileException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因である例外。または、内部例外を指定しない場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>すべての <see langword="XsltCompileException" /> プロパティを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> の <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary>XSLT (Extensible Stylesheet Language Transformations) プロセッサの現在の実行コンテキストをカプセル化して、XPath (XML Path Language) が、XPath 式内の関数、パラメーター、および名前空間を解決できるようにします。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltContext" /> を指定して、<see cref="T:System.Xml.NameTable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">使用する <see cref="T:System.Xml.NameTable" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary>派生クラスでオーバーライドされた場合、2 つのドキュメントのベース URI (Uniform Resource Identifier) が XSLT プロセッサ (<see cref="T:System.Xml.Xsl.XslTransform" /> クラス) によって読み込まれた順序に基づいて、それらのドキュメントのベース URI を比較します。</summary>
      <param name="baseUri">比較対象の最初のドキュメントのベース URI。</param>
      <param name="nextbaseUri">比較対象の 2 番目のドキュメントのベース URI。</param>
      <returns>2 つのベース URI の相対的な順序を記述する整数値。<paramref name="baseUri" /> が <paramref name="nextbaseUri" /> の前になる場合は -1。2 つのベース URI が同じ場合は 0。<paramref name="baseUri" /> が <paramref name="nextbaseUri" /> の後になる場合は 1。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary>派生クラスでオーバーライドされた場合、空白ノードを維持するか、特定のコンテキストでは空白ノードを除去するかを評価します。</summary>
      <param name="node">現在のコンテキストで維持または除去される空白ノード。</param>
      <returns>空白が維持される場合は <see langword="true" />。空白が除去される場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary>派生クラスでオーバーライドされた場合、関数参照を解決し、その関数を表す <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> を返します。 実行時に <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> を使用して、関数の戻り値を取得します。</summary>
      <param name="prefix">XPath 式内に示されている、関数のプリフィックス。</param>
      <param name="name">関数の名前。</param>
      <param name="ArgTypes">解決対象の関数の引数型の配列。 この配列を使用すると、同じ名前の複数のメソッド (オーバーロードされたメソッドなど) の中から 1 つ選択できるようになります。</param>
      <returns>関数を表す <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary>派生クラスでオーバーライドされた場合、変数参照を解決し、その変数を表す <see cref="T:System.Xml.Xsl.IXsltContextVariable" /> を返します。</summary>
      <param name="prefix">XPath 式内に示されている、変数のプレフィックス。</param>
      <param name="name">変数の名前。</param>
      <returns>実行時の変数を表す <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary>派生クラスでオーバーライドされた場合、出力に空白ノードが含まれるかどうかを示す値を取得します。</summary>
      <returns>ソース ドキュメントの空白ノードをチェックして出力に含める場合は <see langword="true" />。空白ノードをチェックしない場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary>XSLT 変換の処理中にエラーが発生したときにスローされる例外。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトおよび <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクトの情報を使用して、<see langword="XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> のすべてのプロパティを格納している <see langword="XsltException" /> オブジェクト。</param>
      <param name="context">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Xml.Xsl.XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary>
        <see langword="XsltException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラー状態の説明。</param>
      <param name="innerException">
        <see langword="XsltException" /> をスローした <see cref="T:System.Exception" /> (存在する場合)。 この値は、<see langword="null" /> の場合もあります。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>すべての <see langword="XsltException" /> プロパティを、指定した <see cref="T:System.Runtime.Serialization.SerializationInfo" /> の <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスにストリーム転送します。</summary>
      <param name="info">
        <see langword="SerializationInfo" /> オブジェクト。</param>
      <param name="context">
        <see langword="StreamingContext" /> オブジェクト。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary>スタイル シートで発生したエラーの位置を示す行番号を取得します。</summary>
      <returns>スタイル シートで発生したエラーの位置を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary>スタイル シートで発生したエラーの位置を示す行番号を取得します。</summary>
      <returns>スタイル シートで発生したエラーの位置を示す行番号。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary>現在の例外を記述する書式設定されたエラー メッセージを取得します。</summary>
      <returns>現在の例外を記述する書式設定されたエラー メッセージ。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary>スタイル シートの位置パスを取得します。</summary>
      <returns>スタイル シートの位置パス。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary>
        <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary>
        <c>xsl:message</c> 要素の内容を取得します。</summary>
      <returns>
        <c>Xsl: message</c>要素の内容。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary>
        <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データが格納されている <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary>XSLT (Extensible Stylesheet Language Transformations) スタイル シートを使用して XML データを変換します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XslTransform" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary>URL で指定された XSLT スタイル シートを読み込みます。</summary>
      <param name="url">読み込む XSLT スタイル シートを指定する URL。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary>URL で指定された XSLT スタイル シートを読み込みます。</summary>
      <param name="url">読み込む XSLT スタイル シートを指定する URL。</param>
      <param name="resolver">スタイル シート、および <c>xsl:import</c> 要素と <c>xsl:include</c> 要素で参照される任意のスタイル シートの読み込みに使用する <see cref="T:System.Xml.XmlResolver" />。  
  
これが <see langword="null" /> の場合は、ユーザー資格情報を持たない既定の <see cref="T:System.Xml.XmlUrlResolver" /> がスタイル シートを開くときに使用されます。 既定の <see cref="T:System.Xml.XmlUrlResolver" /> は、スタイル シート内の外部リソースの解決には使用されないため、<c>xsl:import</c> 要素と <c>xsl:include</c> 要素は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XmlReader" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
      <param name="resolver">
        <c>xsl:import</c> 要素および <c>xsl:include</c> 要素で参照される任意のスタイル シートを読み込むために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または XSLT スタイル シートを含んでいる <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="resolver">
        <c>xsl:import</c> 要素および <c>xsl:include</c> 要素で参照される任意のスタイル シートを読み込むために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">読み込まれたリソースが、有効なスタイル シートではありません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary>
        <see cref="T:System.Xml.XPath.XPathNavigator" /> に格納されている XSLT スタイル シートを読み込みます。</summary>
      <param name="stylesheet">XSLT スタイル シートを格納している <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト。</param>
      <param name="resolver">
        <c>xsl:import</c> 要素および <c>xsl:include</c> 要素で参照される任意のスタイル シートを読み込むために使用される <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合は、外部リソースが解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> がキャッシュされていません。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException">現在のノードは、有効なスタイル シートに準拠していません。</exception>
      <exception cref="T:System.Security.SecurityException">スタイル シートに埋め込みスクリプトが含まれており、読み出し元に <see langword="UnmanagedCode" /> アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary>XML データを入力ファイルに変換し、その結果を出力ファイルに出力します。</summary>
      <param name="inputfile">変換するソース ドキュメントの URL。</param>
      <param name="outputfile">出力ファイルの URL。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary>XML データを入力ファイルに変換し、その結果を出力ファイルに出力します。</summary>
      <param name="inputfile">変換するソース ドキュメントの URL。</param>
      <param name="outputfile">出力ファイルの URL。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> がキャッシュされていません。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先のストリーム。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先のストリーム。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.IXPathNavigable" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> インターフェイスを実装するオブジェクトです。 .NET Framework では、これは <see cref="T:System.Xml.XmlNode" /> (通常は <see cref="T:System.Xml.XmlDocument" />)、または変換されるデータを含む <see cref="T:System.Xml.XPath.XPathDocument" /> になります。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
      <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先のストリーム。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.Stream" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先のストリーム。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.IO.TextWriter" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary>指定した <paramref name="args" /> を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlReader" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
      <returns>変換結果を格納している <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary>指定した args を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary>指定した args を使用して <see cref="T:System.Xml.XPath.XPathNavigator" /> の XML データを変換し、その結果を <see cref="T:System.Xml.XmlWriter" /> に出力します。</summary>
      <param name="input">変換されるデータを含む <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args">変換に対する入力として使用される名前空間修飾引数を含む <see cref="T:System.Xml.Xsl.XsltArgumentList" />。</param>
      <param name="output">出力先の <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver">XSLT の <c>document()</c> 関数を解決するために使用する <see cref="T:System.Xml.XmlResolver" />。 これが <see langword="null" /> の場合、<c>document()</c> 関数は解決されません。  
  
<see cref="T:System.Xml.XmlResolver" /> メソッドが完了した後、<see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> がキャッシュされていません。</param>
      <exception cref="T:System.InvalidOperationException">XSLT 変換の処理中にエラーが発生しました。  
  
メモ : これは、旧バージョンからの動作の変更です。 Microsoft .NET Framework Version 1.1 以前のバージョンを使用している場合は、<see cref="T:System.Xml.Xsl.XsltException" /> がスローされます。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary>
        <see cref="T:System.Xml.XmlResolver" /> メソッドの呼び出し時に外部リソースの解決に使用する <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> を設定します。</summary>
      <returns>変換中に使用する <see cref="T:System.Xml.XmlResolver" />。 に設定すると <see langword="null" /> 、XSLT <c>ドキュメント ()</c> 関数は解決されません。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary>XSLT スタイル シートを実行しているときにサポートする XSLT 機能を指定します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> クラスの新しいインスタンスを既定の設定で初期化します。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary>指定された設定を使用して、<see cref="T:System.Xml.Xsl.XsltSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="enableDocumentFunction">XSLT の <c>document()</c> 関数に対するサポートを有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="enableScript">埋め込みスクリプト ブロックに対するサポートを有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary>既定の設定を使用して <see cref="T:System.Xml.Xsl.XsltSettings" /> オブジェクトを取得します。 XSLT の <c>document()</c> 関数と埋め込みスクリプト ブロックのサポートは無効になっています。</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> プロパティと <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> プロパティが <see langword="false" /> に設定された <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary>XSLT の <c>document()</c> 関数に対するサポートを有効にするかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> XSLT <c>ドキュメント ()</c> 関数をサポートするには、それ以外の場合は <see langword="false" /> 。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary>埋め込みスクリプト ブロックに対するサポートを有効にするかどうかを示す値を取得または設定します。</summary>
      <returns>XSLT スタイル シートのスクリプト ブロックをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary>XSLT の <c>document()</c> 関数および埋め込みスクリプト ブロックのサポートを有効にする <see cref="T:System.Xml.Xsl.XsltSettings" /> オブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Xml.Xsl.XsltSettings" /> プロパティと <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> プロパティが <see langword="true" /> に設定された <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> オブジェクト。</returns>
    </member>
  </members>
</doc>
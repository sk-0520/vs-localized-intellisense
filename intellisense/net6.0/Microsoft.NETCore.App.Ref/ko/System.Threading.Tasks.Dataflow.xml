<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Action`1" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="TInput">이 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />이 수행되는 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>지정한 동작을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>지정된 작업 및 구성 옵션을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="dataflowBlockOptions" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>지정한 동작을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>지정된 작업 및 구성 옵션을 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="action">수신하는 각 데이터 요소를 사용하여 호출할 작업입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="dataflowBlockOptions" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>데이터 흐름 블록에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>대상 데이터 흐름 블록에 대한 항목을 게시합니다.</summary>
      <param name="item">대상에 제공되는 항목입니다.</param>
      <returns>데이터 흐름 블록에 항목을 게시하는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>오류 상태에서 데이터 흐름 블록이 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 예외입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 데이터 흐름 블록에 제공하며 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 데이터 흐름 블록입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept">메시지를 사용하기 위해 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />이고 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />가 잘못된 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우에만 <paramref name="consumeToAccept" />가 <see langword="true" />일 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다.  메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 메시지를 연기하더라도 원본이 <see langword="null" />이면 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" /> 개체를 가져옵니다.</summary>
      <returns>완료된 작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</summary>
      <returns>이 블록에서 처리되도록 대기 중인 입력 항목의 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>배열로 입력을 일괄 처리하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="T">일괄 처리될 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>지정된 배치 크기를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />을 초기화합니다.</summary>
      <param name="batchSize">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>지정된 배치 크기, 거부 옵션 및 블록 옵션을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />을 초기화합니다.</summary>
      <param name="batchSize">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" />는 양수여야 합니다.  
  
또는 
기본값이 설정되지 않은 경우 <paramref name="batchSize" />는 <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> 옵션 값보다 작아야 합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 유효하지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다. 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 messageValue로 전달된 값을 사용하는 대신 반환된 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. null일 수 있습니다.</param>
      <param name="consumeToAccept">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>현재 대기 중이거나 연기된 항목 수가 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />보다 작으면 <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />을 트리거하여 일괄 처리 작업을 시작합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />에서 생성한 배치의 크기를 가져옵니다.</summary>
      <returns>일괄 처리 크기입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>하나 이상의 대상에 제공되어 차이가 있을 수 있는 형식에서 지정한 입력 수를 배치로 나누는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="T1">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />를 초기화합니다.</summary>
      <param name="batchSize">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />를 초기화합니다.</summary>
      <param name="batchSize">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" />가 1보다 작은 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />가 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 인스턴스의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달합니다.</summary>
      <param name="messageHeader">사용할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 사용될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지가 성공적으로 사용되었으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <paramref name="messageHeader" />로 이 메서드에 전달된 것이 아닌 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스일 수 있습니다. 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은 <paramref name="messageValue" />로 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />에 전달된 값이 아닌 반환된 값을 사용해야 합니다. 요청한 메시지를 사용할 수 없는 경우 반환 값은 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 해제합니다.</summary>
      <param name="messageHeader">예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">현재 예약을 보유하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 보유합니다.</summary>
      <param name="messageHeader">예약할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 예약될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)입니다.</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />에서 생성한 배치의 크기를 가져옵니다.</summary>
      <returns>일괄 처리 크기입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>하나 이상의 대상에 제공되어 차이가 있을 수 있는 형식에서 지정한 입력 수를 배치로 나누는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="T1">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3">블록의 세 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />를 초기화합니다.</summary>
      <param name="batchSize">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>지정된 구성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />를 초기화합니다.</summary>
      <param name="batchSize">일괄 처리로 그룹화할 항목 개수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" />는 양수여야 합니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">단일 메시지를 전파한 후 소스와 대상 간 연결을 끊어야 하는 경우 <see langword="true" />이고, 단일 메시지가 전파된 후에도 연결된 상태로 유지하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />가 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 인스턴스의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달합니다.</summary>
      <param name="messageHeader">사용할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 사용될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지가 성공적으로 사용되었으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <paramref name="messageHeader" />로 이 메서드에 전달된 것이 아닌 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스일 수 있습니다. 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은 <paramref name="messageValue" />로 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />에 전달된 값이 아닌 반환된 값을 사용해야 합니다. 요청한 메시지를 사용할 수 없는 경우 반환 값은 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 해제합니다.</summary>
      <param name="messageHeader">예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">현재 예약을 보유하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 보유합니다.</summary>
      <param name="messageHeader">예약할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 예약될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)입니다.</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  모든 항목이 통과할 경우 <paramref name="filter" />가 <see langword="null" />일 수 있습니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />에서 생성한 배치의 크기를 가져옵니다.</summary>
      <returns>일괄 처리 크기입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>제 3의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>최대 한 개의 요소를 한 번에 저장하고 각 메시지가 도착하면 다음 메시지로 덮어쓰기 위한 버퍼를 제공합니다.</summary>
      <typeparam name="T">이 데이터 흐름 블록으로 버퍼링된 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>지정된 복제 함수를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />을 초기화합니다.</summary>
      <param name="cloningFunction">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>지정된 복제 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />을 초기화합니다.</summary>
      <param name="cloningFunction">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 상태에서 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. null일 수 있습니다.</param>
      <param name="consumeToAccept">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>데이터 흐름에 대한 데이터를 저장하기 위한 버퍼를 제공합니다.</summary>
      <typeparam name="T">이 데이터 흐름 블록으로 버퍼링된 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>지정된 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />를 초기화합니다.</summary>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept">메시지를 사용하기 위해 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 동기적으로 호출하도록 대상에 지시하려면 true로 설정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다. <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>버퍼에 현재 저장된 항목의 수를 가져옵니다.</summary>
      <returns>항목의 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>데이터 흐름 블록으로 작업하기 위한 static(Visual Basic의 경우 Shared) 메서드 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>
        <see cref="T:System.IObservable`1" /> 위에 새 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 추상화를 만듭니다.</summary>
      <param name="source">래핑할 소스입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 <see langword="null" />인 경우</exception>
      <returns>관찰자가 소스를 구독할 수 있도록 하는 <see cref="T:System.IObservable`1" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 위에 새 <see cref="T:System.IObserver`1" /> 추상화를 만듭니다.</summary>
      <param name="target">래핑할 대상입니다.</param>
      <typeparam name="TInput">대상 블록에서 허용하는 입력 형식을 지정합니다.</typeparam>
      <returns>대상 블록을 래핑하는 관찰자입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>두 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1">첫 번째 소스입니다.</param>
      <param name="action1">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2">두 번째 소스입니다.</param>
      <param name="action2">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <typeparam name="T1">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우</exception>
      <returns>비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택이 완료되기 전에 두 소스가 완료되면 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 또는 작업은 0 또는 1로 설정된 상태의 <see cref="P:System.Threading.Tasks.Task`1.Result" />로 끝나 첫 번째나 두 번째 소스를 각각 나타냅니다.  
  
이 메서드는 두 데이터 소스의 요소를 모두 사용하는 것이 아니라 둘 중 한 소스의 요소만 사용합니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>두 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1">첫 번째 소스입니다.</param>
      <param name="action1">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2">두 번째 소스입니다.</param>
      <param name="action2">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="dataflowBlockOptions">이 선택을 구성하는 옵션입니다.</param>
      <typeparam name="T1">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
      <returns>비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택을 완료하기 전에 두 소스가 모두 완료된 경우나 <paramref name="dataflowBlockOptions" />의 일부로 제공된 <see cref="T:System.Threading.CancellationToken" />이 선택 완료 전에 취소된 경우 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 또는 작업은 0 또는 1로 설정된 상태의 <see cref="P:System.Threading.Tasks.Task`1.Result" />로 끝나 첫 번째나 두 번째 소스를 각각 나타냅니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>세 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1">첫 번째 소스입니다.</param>
      <param name="action1">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2">두 번째 소스입니다.</param>
      <param name="action2">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source3">세 번째 소스입니다.</param>
      <param name="action3">세번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <typeparam name="T1">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3">세 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="source3" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action3" />이 <see langword="null" />인 경우</exception>
      <returns>비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택이 완료되기 전에 모든 소스가 완료되면 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 그렇지 않으면 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 0부터 시작하는 소스 인덱스로 설정되어 종료됩니다.  
  
이 메서드는 데이터 소스 중 두 개 이상이 아닌 하나의 요소만 사용합니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>세 개의 데이터 흐름 소스를 모니터링하여 제공된 처리기 중에서 데이터를 가장 먼저 사용할 수 있도록 하는 소스를 호출합니다.</summary>
      <param name="source1">첫 번째 소스입니다.</param>
      <param name="action1">첫 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source2">두 번째 소스입니다.</param>
      <param name="action2">두 번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="source3">세 번째 소스입니다.</param>
      <param name="action3">세번째 소스에서 데이터에 실행할 처리기입니다.</param>
      <param name="dataflowBlockOptions">이 선택을 구성하는 옵션입니다.</param>
      <typeparam name="T1">첫 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">두 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3">세 번째 소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action1" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="source2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action2" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="source3" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="action3" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
      <returns>비동기 선택을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 선택을 완료하기 전에 모든 소스가 완료된 경우나 <paramref name="dataflowBlockOptions" />의 일부로 제공된 <see cref="T:System.Threading.CancellationToken" />이 선택 완료 전에 취소된 경우 결과 작업이 취소됩니다. 소스 중 하나가 사용 가능한 데이터가 있으며 선택한 내용으로 성공적으로 전파하면 처리기가 완료될 때 결과 작업이 완료되고 처리기에서 예외가 throw되면 작업이 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 종료되며 처리되지 않은 예외를 포함합니다. 그렇지 않으면 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 0부터 시작하는 소스 인덱스로 설정되어 종료됩니다.  
  
이 메서드는 데이터 소스 중 두 개 이상이 아닌 하나의 요소만 사용합니다. 요소를 받은 후 취소가 요청된 경우 취소 요청이 무시되고 관련 처리기가 실행될 수 있도록 허용됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>대상 및 소스를 단일 전파자로 캡슐화합니다.</summary>
      <param name="target">캡슐화할 대상입니다.</param>
      <param name="source">캡슐화할 소스입니다.</param>
      <typeparam name="TInput">대상에서 필요로 하는 입력 형식을 지정합니다.</typeparam>
      <typeparam name="TOutput">소스에서 생성된 출력 형식을 지정합니다.</typeparam>
      <returns>캡슐화된 대상 및 원본입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="source">링크할 소스입니다.</param>
      <param name="target">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>
        <see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>지정된 필터를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="source">링크할 소스입니다.</param>
      <param name="target">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="predicate">메시지를 소스에서 대상까지 전파하도록 전달해야 하는 필터입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="target" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="predicate" />이 <see langword="null" />인 경우</exception>
      <returns>
        <see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>지정된 필터를 사용하여 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="source">링크할 소스입니다.</param>
      <param name="target">소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">데이터 흐름 블록 사이의 링크를 구성하는 방법을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="predicate">메시지를 소스에서 대상까지 전파하도록 전달해야 하는 필터입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />은 null(Visual Basic에서는 Nothing)입니다.  
  
또는 
<paramref name="target" />은 null(Visual Basic에서는 Nothing)입니다.  
  
또는 
<paramref name="linkOptions" />은 null(Visual Basic에서는 Nothing)입니다.  
  
또는 
<paramref name="predicate" />은 null(Visual Basic에서는 Nothing)입니다.</exception>
      <returns>
        <see langword="Dispose" /> 호출 시 대상에서 소스의 연결을 해제할 <see cref="T:System.IDisposable" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>제공된 모든 메시지를 동기적으로 수락하고 삭제하는 대상 블록을 가져옵니다.</summary>
      <typeparam name="TInput">이 블록에서 허용할 수 있는 메시지의 형식입니다.</typeparam>
      <returns>제공된 모든 메시지를 수락하고 이후에 삭제하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>사용 가능한 출력에 대한 소스를 비동기적으로 모니터링하는 <see cref="T:System.Threading.Tasks.Task`1" />을 제공합니다.</summary>
      <param name="source">모니터링할 소스입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns>추가 출력이 가능한지 여부와 가능한 시기를 알려주는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 작업이 완료되고 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 <see langword="true" />인 경우 소스의 다른 소비자가 데이터를 검색할 수는 있어도 소스에서 더 많은 출력이 사용됩니다.  
  
<see langword="false" />를 반환하는 경우 출력을 사용할 수 있게 되기 전에 소스가 완료되었기 때문에 추가 출력을 현재와 이후에 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>사용 가능한 출력에 대한 소스를 비동기적으로 모니터링하는 <see cref="T:System.Threading.Tasks.Task`1" />을 제공합니다.</summary>
      <param name="source">모니터링할 소스입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하는 데 사용할 취소 토큰입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns>추가 출력이 가능한지 여부와 가능한 시기를 알려주는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 작업이 완료되고 <see cref="P:System.Threading.Tasks.Task`1.Result" />가 <see langword="true" />인 경우 소스의 다른 소비자가 데이터를 검색할 수는 있어도 소스에서 더 많은 출력이 사용됩니다. <see langword="false" />를 반환하는 경우 출력을 사용할 수 있게 되기 전에 소스가 완료되었기 때문에 추가 출력을 현재와 이후에 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 항목을 게시합니다.</summary>
      <param name="target">대상 블록입니다.</param>
      <param name="item">대상에 제공되는 항목입니다.</param>
      <typeparam name="TInput">대상 블록에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <returns>대상 블록이 해당 항목을 허용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>지정된 소스에서 값을 동기적으로 받습니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">항목을 소스에서 받을 수 없습니다.</exception>
      <returns>받은 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>지정된 소스에서 값을 동기적으로 받고 작업을 취소하는 토큰을 제공합니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <param name="cancellationToken">받기 작업을 취소하는 데 사용할 토큰입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">항목을 소스에서 받을 수 없습니다.</exception>
      <exception cref="T:System.OperationCanceledException">소스에서 항목을 받기 전에 작업이 취소되었습니다.</exception>
      <returns>받은 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>지정된 소스에서 값을 동기적으로 받으며 최적의 시간 초과 기간을 관찰합니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <param name="timeout">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">항목을 소스에서 받을 수 없습니다.</exception>
      <exception cref="T:System.TimeoutException">항목을 소스에서 받기 전에 지정된 제한 시간이 만료된 경우</exception>
      <returns>받은 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>지정된 원본에서 값을 동기적으로 받으면서 작업을 취소하는 토큰을 제공하고 최적의 시간 초과 간격을 관찰합니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <param name="timeout">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <param name="cancellationToken">받기 작업을 취소하는 데 사용할 토큰입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.InvalidOperationException">항목을 소스에서 받을 수 없습니다.</exception>
      <exception cref="T:System.TimeoutException">항목을 소스에서 받기 전에 지정된 제한 시간이 만료된 경우</exception>
      <exception cref="T:System.OperationCanceledException">소스에서 항목을 받기 전에 작업이 취소되었습니다.</exception>
      <returns>받은 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>지정된 소스에서 값을 비동기적으로 받습니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <returns>비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 항목 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 받은 값을 반환합니다. 소스가 비어 있고 완료되었기 때문에 항목 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>지정된 소스에서 값을 비동기적으로 받고 작업을 취소하는 토큰을 제공합니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <param name="cancellationToken">받기 작업을 취소하는 데 사용할 토큰입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <returns>비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다. 취소가 요청되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다. 소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>지정된 소스에서 값을 비동기적으로 받으며 최적의 시간 초과 기간을 관찰합니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <param name="timeout">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <returns>비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다. 시간 초과가 만료되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다. 소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>지정된 원본에서 값을 비동기적으로 받으면서 작업을 취소하는 토큰을 제공하고 최적의 시간 초과 간격을 관찰합니다.</summary>
      <param name="source">값을 받는 소스입니다.</param>
      <param name="timeout">동기 작업이 완료될 때까지 기다리는 최대 시간 간격(밀리초)이거나 무한히 대기하는 -1 밀리초를 나타내는 시간 간격입니다.</param>
      <param name="cancellationToken">받기 작업을 취소하는 데 사용할 수 있는 토큰입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />이 무기한 시간 제한 기간을 나타내는 -1밀리초 이외의 음수인 경우  
  
또는 
 <paramref name="timeout" />가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <returns>비동기 수신 작업을 나타내는 작업입니다. 원본으로부터 값을 받았으면 반환된 작업이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" />에서 값을 반환합니다. 시간 초과가 만료되었거나 취소가 요청되었기 때문에 값을 검색할 수 없는 경우 반환된 작업이 취소됩니다. 소스가 비어 있고 완료되었기 때문에 값을 검색할 수 없는 경우 <see cref="T:System.InvalidOperationException" /> 예외가 반환된 작업에서 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>대상 메시지 블록에 메시지를 비동기적으로 제공하며, 연기를 허용합니다.</summary>
      <param name="target">데이터를 게시할 대상입니다.</param>
      <param name="item">대상에 제공되는 항목입니다.</param>
      <typeparam name="TInput">대상에 게시할 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>비동기 전송을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다. 대상에서 <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />을 호출하는 동안 제안된 요소를 수락하여 사용할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 <see langword="true" />로 반환됩니다. 대상에서 호출하는 동안 제안된 요소를 거부할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />이 완료되고 해당 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성은 <see langword="false" />로 반환됩니다. 대상에서 제안된 요소를 연기하면 대상에서 해당 요소를 사용하거나 릴리스할 때까지 요소가 버퍼링됩니다. 이 시점에서 메시지가 사용되었는지 여부를 나타내는 <see cref="P:System.Threading.Tasks.Task`1.Result" />와 함께 작업이 완료됩니다. 대상이 메시지를 소비 또는 해제하려고 하지 않으면 반환된 작업이 절대 완료되지 않습니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>대상 메시지 블록에 메시지를 비동기적으로 제공하며, 연기를 허용합니다.</summary>
      <param name="target">데이터를 게시할 대상입니다.</param>
      <param name="item">대상에 제공되는 항목입니다.</param>
      <param name="cancellationToken">보내기 작업의 취소를 요청하는 데 사용할 취소 토큰입니다.</param>
      <typeparam name="TInput">대상에 게시할 데이터 형식을 지정합니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 null(Visual Basic에서는 Nothing)입니다.</exception>
      <returns>비동기 전송을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.  대상에서 SendAsync를 호출하는 동안 제안된 요소를 수락하여 사용할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <c>Result</c> 속성은 true로 반환됩니다.  대상에서 호출하는 동안 제안된 요소를 거부할 경우 해당 호출에서 반환될 때 그 결과로 생성되는 <see cref="T:System.Threading.Tasks.Task`1" />가 완료되고 해당 <c>Result</c> 속성은 false로 반환됩니다. 대상에서 제안된 요소를 연기하면 대상에서 해당 요소를 사용하거나 릴리스할 때까지 요소가 버퍼링됩니다. 이 시점에서 메시지가 사용되었는지 여부를 나타내는 <c>Result</c>와 함께 작업이 완료됩니다. 대상이 메시지를 소비 또는 해제하려고 하지 않으면 반환된 작업이 절대 완료되지 않습니다.  
  
대상이 전송된 데이터를 성공적으로 사용하기 전에 취소가 요청된 경우 반환된 작업이 취소됨 상태에서 완료되고 대상에서 해당 데이터를 더 이상 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에서 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="source">받는 소스입니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <typeparam name="TOutput">소스에 포함된 데이터 형식을 지정합니다.</typeparam>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>데이터 흐름 블록에서 수행하는 처리를 구성하는 데 사용되는 옵션을 제공합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>상한을 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 멤버의 무제한 수량을 지정하는 데 사용되는 상수입니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />를 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>블록이 버퍼링할 수 있는 메시지의 최대 개수를 가져오거나 설정합니다.</summary>
      <returns>최대 메시지 수입니다. 기본값은 무제한의 메시지 수를 나타내는 -1입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>취소 요청에 대해 모니터링할 <see cref="T:System.Threading.CancellationToken" />을 가져오거나 설정합니다.</summary>
      <returns>토큰입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>블록의 메시지 처리에 순차적 처리를 적용해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> 순차적 처리를 적용 해야 하면이 고, 그렇지 않으면 <see langword="false" /> 입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>작업 당 처리될 수 있는 메시지의 최대 개수를 가져오거나 설정합니다.</summary>
      <returns>최대 메시지 수입니다. 기본값은 무제한의 메시지 수를 나타내는 -1입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>블록의 이름을 쿼리할 때 사용할 서식 문자열을 가져오거나 설정합니다.</summary>
      <returns>블록의 이름을 쿼리할 때 사용할 서식 문자열입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>작업 예약에 사용할 <see cref="T:System.Threading.Tasks.TaskScheduler" />를 가져오거나 설정합니다.</summary>
      <returns>작업 스케줄러입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>데이터 흐름 블록 사이의 링크를 구성하는 데 사용되는 옵션을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />을 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>링크가 소스의 링크 목록 뒤에 추가되어야 하는지 아니면 앞에 추가되어야 하는지를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>링크에서 사용될 수 있는 메시지의 최대 개수를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Int32" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>연결된 대상이 완성 및 오류 알림을 자동으로 전파 받는지 여부를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>데이터 흐름 블록 간 전달을 위한 데이터 특성의 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>지정된 특성을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 초기화합니다.</summary>
      <param name="id">메시지 ID입니다. 원래 소스 블록 내에서 고유해야 합니다. 전역적으로 고유할 필요는 없습니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>boxing된 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같은지 확인합니다.</summary>
      <param name="obj">boxed <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns>인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>boxing하지 않고 두 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같은지 확인합니다.</summary>
      <param name="other">다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns>인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스의 해시 코드를 생성합니다.</summary>
      <returns>해시 코드입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>두 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같은지 확인합니다.</summary>
      <param name="left">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="right">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns>인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>두 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스가 ID별로 같지 않은지 확인합니다.</summary>
      <param name="left">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="right">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <returns>인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>원본 내의 메시지의 ID를 가져옵니다.</summary>
      <returns>인스턴스에 포함 된 ID  <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>메시지의 유효성을 가져옵니다.</summary>
      <returns>메시지의 ID가 0이 아니면 <see langword="true" />입니다. 메시지의 ID가 0이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>데이터 흐름 블록 간에 전달될 때 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />의 상태를 나타냅니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 메시지를 수락했음을 나타냅니다. 대상에서 메시지를 받아들이면 이는 대상에서 전체를 소유합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 메시지를 거부했음을 나타냅니다. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />이 메시지를 계속 소유합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 메시지를 거부했음을 나타냅니다. <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />이 메시지를 계속 소유합니다.  
  
또한 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />는 소스에서 보내는 이후의 모든 메시지를 거부합니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 메시지를 수락하려고 했으나 더 이상 사용할 수 없는 메시지임을 나타냅니다.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 나중에 소비할 수 있도록 메시지를 연기했음을 나타냅니다.  
  
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />이 메시지를 계속 소유합니다.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>사용자가 제공한 대리자의 호출을 통해 각 메시지를 처리하는 데이터 흐름 블록에 따라 수행되는 처리를 구성하는 데 사용되는 옵션을 제공합니다. <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 등의 데이터 흐름 블록입니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>블록이 동시에 처리할 수 있는 메시지의 최대 개수를 가져옵니다.</summary>
      <returns>최대 메시지 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>데이터 흐름 블록을 사용하는 코드가 한 번에 하나의 생산자로 제한되어 있는지 여부를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>여러 개의 메시지를 그룹화하는 데이터 흐름 블록에 의해 수행된 처리를 구성하는 데 사용되는 옵션을 제공합니다. <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> 및 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 등의 데이터 흐름 블록입니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />를 초기화합니다.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>제공된 메시지를 많이 소비할지 여부를 결정하는 데 사용할 부울 값을 가져오거나 설정합니다.</summary>
      <returns>제공된 메시지를 많이 소비하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>블록에 의해 생성되어야 하는 최대 그룹 수를 가져오거나 설정합니다.</summary>
      <returns>최대 그룹 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>데이터 흐름 블록을 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>데이터의 대상 및 소스인 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TInput">허용 하는 데이터의 형식을 지정 합니다 <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />합니다.</typeparam>
      <typeparam name="TOutput">제공한 데이터의 형식을 지정 합니다 <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" />합니다.</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>링크하지 않고 수신 메시지를 지원하는 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TOutput">
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 제공하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>데이터의 소스인 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TOutput">제공한 데이터의 형식을 지정 합니다 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">messageHeader가 유효하지 않습니다.</exception>
      <exception cref="T:System.ArgumentNullException">대상은 <see langword="null" />입니다.</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 null이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>데이터의 대상인 데이터 흐름 블록을 나타냅니다.</summary>
      <typeparam name="TInput">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. null일 수 있습니다.</param>
      <param name="consumeToAccept">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 메시지를 연기해야 하지만 원본이 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>형식당 하나의 항목을 구성하는 튜플로서 모두 함께 릴리스되기 전에 각 형식이 도착할 때까지 한 항목을 기다리는 과정으로, 여러 데이터 흐름 소스 간에 연결하는 데이터 흐름 블록을 제공합니다. 이 경우 소스는 반드시 같은 유형이 아닐 수도 있습니다.</summary>
      <typeparam name="T1">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />를 초기화합니다.</summary>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />가 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 상태에서 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 인스턴스의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달합니다.</summary>
      <param name="messageHeader">사용할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 사용될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지가 성공적으로 사용되었으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <paramref name="messageHeader" />로 이 메서드에 전달된 것과 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />에 <paramref name="messageValue" />로 전달된 값 대신 반환된 값을 사용해야 합니다. 요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 해제합니다.</summary>
      <param name="messageHeader">예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">현재 예약을 보유하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 보유합니다.</summary>
      <param name="messageHeader">예약할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 예약될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>형식당 하나의 항목을 포함하는 튜플로서 모두 함께 릴리스되기 전에 각 형식이 도착할 때까지 한 항목을 기다리는 과정으로, 여러 데이터 흐름 소스 간에 연결하는 데이터 흐름 블록을 제공합니다. 이 경우 소스는 같은 유형이 아닐 수도 있습니다.</summary>
      <typeparam name="T1">블록의 첫 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T2">블록의 두 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="T3">블록의 세 번째 대상에서 허용하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />를 초기화합니다.</summary>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>소스 블록을 지정된 대상 블록에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 대상 블록입니다.</param>
      <param name="linkOptions">링크를 구성하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="linkOptions" />이(가) <see langword="null" />인 경우</exception>
      <returns>해당 <see cref="M:System.IDisposable.Dispose" /> 메서드를 호출하는 경우 대상에서 소스의 연결을 해제하는 삭제 가능한 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 인스턴스의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달합니다.</summary>
      <param name="messageHeader">사용할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 사용될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지가 성공적으로 사용되었으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <paramref name="messageHeader" />로 이 메서드에 전달된 것이 아닌 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스일 수 있습니다. 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은 <paramref name="messageValue" />로 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />에 전달된 값이 아닌 반환된 값을 사용해야 합니다. 요청한 메시지를 사용할 수 없는 경우 반환 값은 <see langword="null" />(Visual Basic에서는 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 해제합니다.</summary>
      <param name="messageHeader">예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">현재 예약을 보유하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />로 식별된 메시지의 소유권을 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />으로 전달할 권한을 보유합니다.</summary>
      <param name="messageHeader">예약할 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지가 예약될 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />은 <see langword="null" />(Visual Basic에서는 없음)입니다.</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>제 1의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>제 2의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>제 3의 형식의 메시지를 제공하는 데 사용할 수 있는 대상을 가져옵니다.</summary>
      <returns>대상입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Func`2" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="TInput">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />에서 수신하고 작업하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="TOutput">이에서 출력 하는 데이터 형식을 지정 합니다  <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> .</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>지정된 <see cref="T:System.Func`2" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />를 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>지정된 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 및 <see cref="T:System.Func`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>지정된 <see cref="T:System.Func`2" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />를 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>지정된 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 및 <see cref="T:System.Func`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept">대상이 메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />에 대한 호출 중 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출해야 하면 <see langword="true" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 연기되더라도 원본이 <see langword="null" />인 경우 대신 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</summary>
      <returns>입력 항목 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>수신한 모든 데이터 요소에 대해 제공된 <see cref="T:System.Func`2" /> 대리자를 호출하는 데이터 흐름 블록을 제공합니다.</summary>
      <typeparam name="TInput">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />에서 수신하고 작업하는 데이터 형식을 지정합니다.</typeparam>
      <typeparam name="TOutput">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />에서 출력하는 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>지정된 함수를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. 반환된 <see cref="T:System.Collections.Generic.IEnumerable`1" />의 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>지정된 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>지정된 함수를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 비동기적으로 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>지정된 함수 및 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />를 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />를 초기화합니다.</summary>
      <param name="transform">수신하는 각 데이터 요소를 사용하여 호출할 함수입니다. <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 비동기적으로 반환된 모든 데이터를 이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />의 출력으로 사용할 수 있게 됩니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="transform" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 상태에서 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept">대상이 메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 대한 호출 중 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출해야 하면 <see langword="true" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우  
  
또는 
 null이 아닌 <paramref name="consumeToAccept" />가 제공되는 경우 <paramref name="source" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 연기되더라도 원본이 <see langword="null" />인 경우 대신 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>이 블록에서 처리되도록 대기 중인 입력 항목의 수를 가져옵니다.</summary>
      <returns>입력 항목 수입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>이 블록에서 받을 수 있는 출력 항목의 개수를 가져옵니다.</summary>
      <returns>출력 항목 수입니다.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>데이터 흐름 블록의 네트워크에서 최대 하나의 요소를 수신 및 저장하기 위한 버퍼를 제공합니다.</summary>
      <typeparam name="T">이 데이터 흐름 블록으로 버퍼링된 데이터 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>새 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />를 초기화합니다.</summary>
      <param name="cloningFunction">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>지정된 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />을 사용하여 새 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />를 초기화합니다.</summary>
      <param name="cloningFunction">다른 블록을 제공했을 때 데이터 복제하는 데 사용할 함수입니다.</param>
      <param name="dataflowBlockOptions">이 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />을 구성하는 옵션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />에 대한 신호를 통해 더 이상의 메시지를 받거나 생성할 수 없으며 추가로 지연된 메시지를 사용하면 안 됩니다.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />을 지정된 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 연결합니다.</summary>
      <param name="target">이 소스를 연결할 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="linkOptions">링크를 구성하는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 null(Visual Basic에서는 없음)이거나 <paramref name="linkOptions" />이 null(Visual Basic에서는 없음)입니다.</exception>
      <returns>Dispose 호출 시 대상에서 소스의 연결을 해제할 IDisposable입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 상태에서 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />가 완료되도록 합니다.</summary>
      <param name="exception">오류를 발생시킨 <see cref="T:System.Exception" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 모든 사용 가능한 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="items">소스에서 받은 항목입니다.</param>
      <returns>하나 이상의 항목을 받을 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에서 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 받아 사용하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">사용 중인 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 사용하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <param name="messageConsumed">메시지를 성공적으로 사용했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>사용한 메시지의 값입니다. 이전에 예약되어 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />에 <paramref name="messageHeader" />로 전달된 다른 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스에 해당할 수 있습니다. 사용 중인 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />은  <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 통해 <paramref name="messageValue" />로 전달되는 값 대신 반환되는 값을 사용해야 합니다.  
  
요청한 메시지를 사용할 수 없으면 반환 값은 <see langword="null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 예약한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 해제하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">해제하고 있는 예약된 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">이전에 예약한 메시지를 해제하고 있는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="target" />에 예약된 메시지가 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 의해 이전에 제공한 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />를 예약하기 위해 연결된 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />에 의해 호출됩니다.</summary>
      <param name="messageHeader">받고 있는 메시지의 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />입니다.</param>
      <param name="target">메시지를 예약하는 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 올바르지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" />이 <see langword="null" />인 경우</exception>
      <returns>메시지를 성공적으로 예약했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>메시지를 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />에 제공하며 대상에서 메시지를 선택적으로 사용하거나 연기할 수 있습니다.</summary>
      <param name="messageHeader">제공되는 메시지의 헤더를 나타내는 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 인스턴스입니다.</param>
      <param name="messageValue">제공되는 메시지의 값입니다.</param>
      <param name="source">메시지를 제공하는 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />입니다. 이 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="consumeToAccept">메시지를 사용하기 위해 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />를 반환하기 전에 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />를 호출하는 동안 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />를 동기적으로 호출하도록 대상에 지시하려면 <see langword="true" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" />이 유효하지 않은 경우  
  
또는 null이 아닌 <paramref name="source" />가 제공되는 경우 <paramref name="consumeToAccept" />는 true만 될 수 있습니다.</exception>
      <returns>제공된 메시지의 상태입니다. 메시지가 대상에서 허용된 경우  <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />가 반환되고 원본은 현재 대상에서 그대로 소유하고 있으므로 제안된 메시지를 더 이상 사용할 수 없습니다. 메시지가 대상에 의해 연기된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />는 나중에 메시지를 사용하거나 예약하려고 시도할 수 있는 알림으로 반환됩니다. 그 동안 소스는 메시지를 계속 소유하고 있으며 다른 블록에 메시지를 제공할 수 있습니다.  
  
대상이 메시지를 연기해야 하지만 <paramref name="source" />가 <see langword="null" />인 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />가 대신 반환됩니다.  
  
대상이 메시지를 받으려고 시도했지만 다른 대상에 메시지를 전달하는 소스 또는 단순히 삭제로 인해 누락된 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />이 반환됩니다.  
  
대상이 메시지를 수락하지 않도록 선택한 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />이 반환 됩니다. 대상이 메시지를 받지 않도록 선택했고 이 소스에서 다른 메시지를 받지 않을 경우 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />이 반환됩니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 인스턴스의 형식 지정된 이름을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>
        <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />에서 사용 가능한 출력 항목을 비동기적으로 받으려고 시도합니다.</summary>
      <param name="filter">값을 수신하려면 성공적으로 전달해야 하는 조건자입니다.  <paramref name="filter" />는 <see langword="null" />일 수 있으며, 이 경우 모든 항목이 통과합니다.</param>
      <param name="item">소스에서 받은 항목입니다.</param>
      <returns>항목을 수신할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>비동기 작업 및 데이터 흐름 블록의 완료를 나타내는 <see cref="T:System.Threading.Tasks.Task" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Memory</name>
  </assembly>
  <members>
    <member name="T:System.Buffers.ArrayBufferWriter`1">
      <summary>Представляет приемник выходных данных на основе кучи с резервным массивом, в который <typeparam name="T" /> можно записать данные.</summary>
      <typeparam name="T">Тип элементов в этом <see cref="T:System.Buffers.ArrayBufferWriter`1" /> экземпляре.</typeparam>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor">
      <summary>Создает экземпляр <see cref="T:System.Buffers.ArrayBufferWriter`1" />, в который можно записать данные, с исходной емкостью по умолчанию.</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.#ctor(System.Int32)">
      <summary>Создает экземпляр <see cref="T:System.Buffers.ArrayBufferWriter`1" />, в который можно записать данные, с указанной исходной емкостью.</summary>
      <param name="initialCapacity">Минимальная емкость, с которой инициализируется базовый буфер.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCapacity" /> меньше или равно 0.</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Advance(System.Int32)">
      <summary>Уведомляет <see cref="T:System.Buffers.IBufferWriter`1" /> о том, что элементы <paramref name="count" /> были записаны в выходной объект <see cref="T:System.Span`1" />/<see cref="T:System.Memory`1" />.</summary>
      <param name="count">Число записанных элементов.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> является отрицательным значением.</exception>
      <exception cref="T:System.InvalidOperationException">Вызов метода пытается выйти за пределы базового буфера.</exception>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.Clear">
      <summary>Удаляет данные, записанные в базовый буфер.</summary>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetMemory(System.Int32)">
      <summary>Возвращает <see cref="T:System.Memory`1" /> для записи данных с минимальной длиной, указанной в <paramref name="sizeHint" />.</summary>
      <param name="sizeHint">Минимальная запрошенная длина <see cref="T:System.Memory`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sizeHint" /> является отрицательным значением.</exception>
      <returns>Объект <see cref="T:System.Memory`1" />, длина которого не менее <paramref name="sizeHint" />.  Если значение <paramref name="sizeHint" /> не указано или равно 0, возвращается непустой буфер.</returns>
    </member>
    <member name="M:System.Buffers.ArrayBufferWriter`1.GetSpan(System.Int32)">
      <summary>Возвращает <see cref="T:System.Span`1" /> для записи данных с длиной не менее указанной.</summary>
      <param name="sizeHint">Минимальная запрошенная длина <see cref="T:System.Span`1" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="sizeHint" /> является отрицательным значением.</exception>
      <returns>Диапазон длиной не менее <paramref name="sizeHint" />. Если значение <paramref name="sizeHint" /> не указано или равно 0, возвращается непустой буфер.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.Capacity">
      <summary>Возвращает общий объем места в базовом буфере.</summary>
      <returns>Общая емкость базового буфера.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.FreeCapacity">
      <summary>Возвращает объем доступного места, которое может заполняться данными без увеличения размера базового буфера.</summary>
      <returns>Пространство, доступное для записи, без принудительного увеличения размера базового буфера.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenCount">
      <summary>Возвращает объем данных, записанных в базовый буфер.</summary>
      <returns>Объем данных, записываемых в базовый буфер.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenMemory">
      <summary>Возвращает объект <see cref="T:System.ReadOnlyMemory`1" />, который содержит данные, записанные в базовый буфер на данный момент.</summary>
      <returns>Данные, записанные в базовый буфер.</returns>
    </member>
    <member name="P:System.Buffers.ArrayBufferWriter`1.WrittenSpan">
      <summary>Возвращает объект <see cref="T:System.ReadOnlySpan`1" />, который содержит данные, записанные в базовый буфер на данный момент.</summary>
      <returns>Данные, записанные в базовый буфер.</returns>
    </member>
    <member name="T:System.Buffers.Binary.BinaryPrimitives">
      <summary>Считывает байты как примитивы с конкретным порядок следования байтов.</summary>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadDoubleBigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Double" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Double" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Double" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Double" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Int16" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Int16" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Int32" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Int32" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Int64" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Int64" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadSingleBigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Single" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Single" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadSingleLittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.Single" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.Single" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.UInt16" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.UInt16" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Доступный только для чтения диапазон для чтения.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.UInt32" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.UInt32" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64BigEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.UInt64" />.</exception>
      <returns>Значение с обратным порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="source" /> не помещается <see cref="T:System.UInt64" />.</exception>
      <returns>Значение с прямым порядком байтов.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Byte)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Byte" />, что фактически никак не влияет на <see cref="T:System.Byte" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Переданное значение, неизмененное.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int16)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Int16" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int32)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Int32" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.Int64)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.Int64" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.SByte)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.SByte" />, что фактически никак не влияет на <see cref="T:System.SByte" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Переданное значение, неизмененное.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt16)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.UInt16" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt32)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.UInt32" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.ReverseEndianness(System.UInt64)">
      <summary>Изменяет значение примитива на обратное, изменяя порядок следования байтов указанного значения <see cref="T:System.UInt64" />.</summary>
      <param name="value">Обращаемое значение.</param>
      <returns>Обращенное значение.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadDoubleBigEndian(System.ReadOnlySpan{System.Byte},System.Double@)">
      <summary>Считывает объект <see cref="T:System.Double" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода содержит значение, которое считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte},System.Double@)">
      <summary>Считывает объект <see cref="T:System.Double" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода содержит значение, считанное из диапазона байтов только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16BigEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary>Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.Int16@)">
      <summary>Считывает объект <see cref="T:System.Int16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32BigEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Считывает объект <see cref="T:System.Int32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64BigEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary>Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.Int64@)">
      <summary>Считывает объект <see cref="T:System.Int64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadSingleBigEndian(System.ReadOnlySpan{System.Byte},System.Single@)">
      <summary>Считывает объект <see cref="T:System.Single" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода содержит значение, которое считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadSingleLittleEndian(System.ReadOnlySpan{System.Byte},System.Single@)">
      <summary>Считывает объект <see cref="T:System.Single" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода содержит значение, считанное из диапазона байтов только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16BigEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary>Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt16LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt16@)">
      <summary>Считывает объект <see cref="T:System.UInt16" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32BigEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary>Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt32LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt32@)">
      <summary>Считывает объект <see cref="T:System.UInt32" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64BigEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary>Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с обратным порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryReadUInt64LittleEndian(System.ReadOnlySpan{System.Byte},System.UInt64@)">
      <summary>Считывает объект <see cref="T:System.UInt64" /> с начала доступного только для чтения диапазона байтов с прямым порядком байтов.</summary>
      <param name="source">Массив байтов с доступом только для чтения, который необходимо прочитать.</param>
      <param name="value">При возврате из этого метода значение считывается из диапазона байтов, доступного только для чтения, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteDoubleBigEndian(System.Span{System.Byte},System.Double)">
      <summary>Записывает <see cref="T:System.Double" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteDoubleLittleEndian(System.Span{System.Byte},System.Double)">
      <summary>Записывает <see cref="T:System.Double" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Double" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary>Записывает <see cref="T:System.Int16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary>Записывает <see cref="T:System.Int16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary>Записывает <see cref="T:System.Int32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary>Записывает <see cref="T:System.Int32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary>Записывает <see cref="T:System.Int64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary>Записывает <see cref="T:System.Int64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Int64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteSingleBigEndian(System.Span{System.Byte},System.Single)">
      <summary>Записывает <see cref="T:System.Single" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteSingleLittleEndian(System.Span{System.Byte},System.Single)">
      <summary>Записывает <see cref="T:System.Single" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.Single" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary>Записывает <see cref="T:System.UInt16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary>Записывает <see cref="T:System.UInt16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt16" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary>Записывает <see cref="T:System.UInt32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary>Записывает <see cref="T:System.UInt32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt32" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary>Записывает <see cref="T:System.UInt64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.TryWriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary>Записывает <see cref="T:System.UInt64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <returns>Значение <see langword="true" />, если диапазон способен вместить <see cref="T:System.UInt64" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteDoubleBigEndian(System.Span{System.Byte},System.Double)">
      <summary>Записывает <see cref="T:System.Double" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteDoubleLittleEndian(System.Span{System.Byte},System.Double)">
      <summary>Записывает <see cref="T:System.Double" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16BigEndian(System.Span{System.Byte},System.Int16)">
      <summary>Записывает <see cref="T:System.Int16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt16LittleEndian(System.Span{System.Byte},System.Int16)">
      <summary>Записывает <see cref="T:System.Int16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32BigEndian(System.Span{System.Byte},System.Int32)">
      <summary>Записывает <see cref="T:System.Int32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt32LittleEndian(System.Span{System.Byte},System.Int32)">
      <summary>Записывает <see cref="T:System.Int32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64BigEndian(System.Span{System.Byte},System.Int64)">
      <summary>Записывает <see cref="T:System.Int64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteInt64LittleEndian(System.Span{System.Byte},System.Int64)">
      <summary>Записывает <see cref="T:System.Int64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteSingleBigEndian(System.Span{System.Byte},System.Single)">
      <summary>Записывает <see cref="T:System.Single" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Single" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteSingleLittleEndian(System.Span{System.Byte},System.Single)">
      <summary>Записывает <see cref="T:System.Single" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.Single" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16BigEndian(System.Span{System.Byte},System.UInt16)">
      <summary>Записывает <see cref="T:System.UInt16" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt16LittleEndian(System.Span{System.Byte},System.UInt16)">
      <summary>Записывает <see cref="T:System.UInt16" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32BigEndian(System.Span{System.Byte},System.UInt32)">
      <summary>Записывает <see cref="T:System.UInt32" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt32LittleEndian(System.Span{System.Byte},System.UInt32)">
      <summary>Записывает <see cref="T:System.UInt32" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64BigEndian(System.Span{System.Byte},System.UInt64)">
      <summary>Записывает <see cref="T:System.UInt64" /> в диапазон байтов с обратным порядком байтов.</summary>
      <param name="destination">Диапазон байтов, в который должно быть записано значение, с обратным порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Buffers.Binary.BinaryPrimitives.WriteUInt64LittleEndian(System.Span{System.Byte},System.UInt64)">
      <summary>Записывает <see cref="T:System.UInt64" /> в диапазон байтов с прямым порядком байтов.</summary>
      <param name="destination">Диапазон байтов, куда должно быть записано значение, с прямым порядком байтов.</param>
      <param name="value">Значение, записываемое в диапазон байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="T:System.Buffers.BuffersExtensions">
      <summary>Предоставляет методы расширения для <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.CopyTo``1(System.Buffers.ReadOnlySequence{``0},System.Span{``0})">
      <summary>Копирует <see cref="T:System.Buffers.ReadOnlySequence`1" /> в указанный экземпляр <see cref="T:System.Span`1" />.</summary>
      <param name="source">Источник <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <param name="destination">
        <see cref="T:System.Span`1" /> — объект назначения.</param>
      <typeparam name="T">Тип элементов в <see cref="T:System.Buffers.ReadOnlySequence`1" /> .</typeparam>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.PositionOf``1(System.Buffers.ReadOnlySequence{``0},``0)">
      <summary>Возвращает позицию первого вхождения <paramref name="item" /> в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <param name="source">Источник <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <param name="value">Элемент, который требуется найти в <see cref="T:System.Buffers.ReadOnlySequence`1" />.</param>
      <typeparam name="T">Тип элементов в <see cref="T:System.Buffers.ReadOnlySequence`1" /> .</typeparam>
      <returns>Объект, чей метод <see cref="M:System.SequencePosition.GetInteger" /> возвращает позицию первого вхождения <paramref name="item" />, или объект, чье свойство <see langword="Nullable&lt;SequencePosition&gt;.HasValue" /> имеет значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.ToArray``1(System.Buffers.ReadOnlySequence{``0})">
      <summary>Преобразует <see cref="T:System.Buffers.ReadOnlySequence`1" /> в массив.</summary>
      <param name="sequence">Преобразование последовательности только для чтения в массив.</param>
      <typeparam name="T">Тип элементов в <see cref="T:System.Buffers.ReadOnlySequence`1" /> .</typeparam>
      <returns>Массив, содержащий данные в текущей последовательности только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.BuffersExtensions.Write``1(System.Buffers.IBufferWriter{``0},System.ReadOnlySpan{``0})">
      <summary>Записывает содержимое <paramref name="value" /> в <paramref name="writer" />.</summary>
      <param name="writer">Средство записи в буфер, в которое необходимо записать <paramref name="value" />.</param>
      <param name="value">Доступный только для чтения объем для записи в <paramref name="writer" />.</param>
      <typeparam name="T">Тип элементов в <see cref="T:System.ReadOnlySpan`1" /> .</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="writer" /> короче значения параметра <paramref name="value" />.</exception>
    </member>
    <member name="T:System.Buffers.IBufferWriter`1">
      <summary>Представляет приемник выходных данных, в который можно записать данные <typeparamref name="T" />.</summary>
      <typeparam name="T">Тип элементов в <see cref="T:System.Buffers.IBufferWriter`1" /> .</typeparam>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.Advance(System.Int32)">
      <summary>Уведомляет <see cref="T:System.Buffers.IBufferWriter`1" /> о том, что элементы данных <paramref name="count" /> записаны в <see cref="T:System.Span`1" /> или <see cref="T:System.Memory`1" /> выходных данных.</summary>
      <param name="count">Число элементов данных, записанных в <see cref="T:System.Span`1" /> или <see cref="T:System.Memory`1" />.</param>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetMemory(System.Int32)">
      <summary>Возвращает <see cref="T:System.Memory`1" /> для записи минимального запрошенного размера (определяется <paramref name="sizeHint" />).</summary>
      <param name="sizeHint">Минимальная длина возвращаемого значения <see cref="T:System.Memory`1" />. Если значение равно 0, возвращается непустой буфер.</param>
      <exception cref="T:System.OutOfMemoryException">Запрошенный размер буфера недоступен.</exception>
      <returns>
        <see cref="T:System.Memory`1" /> с минимальным размером <paramref name="sizeHint" />. Если значение <paramref name="sizeHint" /> равно 0, возвращается непустой буфер.</returns>
    </member>
    <member name="M:System.Buffers.IBufferWriter`1.GetSpan(System.Int32)">
      <summary>Возвращает <see cref="T:System.Span`1" /> для записи минимального запрошенного размера (определяется <paramref name="sizeHint" />).</summary>
      <param name="sizeHint">Минимальная длина возвращаемого значения <see cref="T:System.Span`1" />. Если значение равно 0, возвращается непустой буфер.</param>
      <returns>
        <see cref="T:System.Span`1" /> с минимальным размером <paramref name="sizeHint" />. Если значение <paramref name="sizeHint" /> равно 0, возвращается непустой буфер.</returns>
    </member>
    <member name="T:System.Buffers.MemoryPool`1">
      <summary>Представляет пул блоков памяти.</summary>
      <typeparam name="T">Тип элементов в пуле памяти.</typeparam>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.#ctor">
      <summary>Создает новый экземпляр исключения пула памяти.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose">
      <summary>Освобождает все ресурсы, используемые пулом памяти.</summary>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые пулом памяти, а при необходимости освобождает и управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Buffers.MemoryPool`1.Rent(System.Int32)">
      <summary>Возвращает блок памяти, которая может хранить элементы T <paramref name="minBufferSize" />.</summary>
      <param name="minBufferSize">Минимальное число элементов <typeparamref name="T" />, которые могут храниться в пуле памяти. Значение -1 возвращает пул памяти, для которого настроен размер по умолчанию.</param>
      <returns>Блок памяти, которая может хранить элементы T <paramref name="minBufferSize" />.</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.MaxBufferSize">
      <summary>Возвращает максимальный размер буфера, поддерживаемого этим пулом.</summary>
      <returns>Максимальный размер буфера, поддерживаемый этим пулом.</returns>
    </member>
    <member name="P:System.Buffers.MemoryPool`1.Shared">
      <summary>Получает отдельный экземпляр пула памяти на основе массивов.</summary>
      <returns>Одноэлементный экземпляр пула памяти.</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1">
      <summary>Представляет последовательность, которая может считывать последовательные наборы <typeparamref name="T" />.</summary>
      <typeparam name="T">Тип элементов в последовательности, доступной только для чтения.</typeparam>
    </member>
    <member name="F:System.Buffers.ReadOnlySequence`1.Empty">
      <summary>Возвращает пустой массив <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[])">
      <summary>Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из <paramref name="array" />.</summary>
      <param name="array">Массив, из которого будет создана последовательность только для чтения.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(`0[],System.Int32,System.Int32)">
      <summary>Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из фрагмента массива.</summary>
      <param name="array">Массив, из которого будет создана последовательность только для чтения.</param>
      <param name="start">Индекс первого элемента в массиве (начиная с нуля), который необходимо включить в последовательность только для чтения.</param>
      <param name="length">Число элементов, добавляемых в последовательность только для чтения.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.Buffers.ReadOnlySequenceSegment{`0},System.Int32,System.Buffers.ReadOnlySequenceSegment{`0},System.Int32)">
      <summary>Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из связанного списка в памяти, который представлен начальным и конечным сегментами и соответствующими индексами для них.</summary>
      <param name="startSegment">Начальный узел связанного списка в памяти.</param>
      <param name="startIndex">Положение в начале последовательности в <paramref name="startSegment" />.</param>
      <param name="endSegment">Конечный узел связанного списка в памяти.</param>
      <param name="endIndex">Положение в конце последовательности в <paramref name="endSegment" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="startSegment" /> или <paramref name="endSegment" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Выполняющийся индекс <paramref name="startSegment" /> больше выполняющегося индекса <paramref name="endSegment" />, при том что <paramref name="startSegment" /> отличается от <paramref name="endSegment" />.

-или-

<paramref name="startSegment" /> равен <paramref name="endSegment" />, но <paramref name="endIndex" /> меньше <paramref name="startIndex" />.

-или-

<paramref name="startIndex" /> превышает длину базового блока памяти <paramref name="startSegment" />.</exception>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.#ctor(System.ReadOnlyMemory{`0})">
      <summary>Создает экземпляр класса <see cref="T:System.Buffers.ReadOnlySequence`1" /> из <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="memory">Блок памяти, доступный только для чтения, с элементами типа <typeparamref name="T" />.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetEnumerator">
      <summary>Возвращает перечислитель по коллекции <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns>Возвращает перечислитель по коллекции <see cref="T:System.Buffers.ReadOnlySequence`1" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetOffset(System.SequencePosition)">
      <summary>Возвращает смещение <paramref name="position" /> в этой последовательности от начала.</summary>
      <param name="position">
        <see cref="T:System.SequencePosition" />, с которого считывается смещение.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Положение не входит в диапазон.</exception>
      <returns>Смещение от начала последовательности.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64)">
      <summary>Возвращает новый экземпляр <see cref="T:System.SequencePosition" /> в положении <paramref name="offset" /> от начала последовательности.</summary>
      <param name="offset">Смещение от начала последовательности.</param>
      <returns>Объект, представляющий положение последовательности, которая начинается с указанного <paramref name="offset" /> от начала последовательности.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.GetPosition(System.Int64,System.SequencePosition)">
      <summary>Возвращает новое положение <see cref="T:System.SequencePosition" />, начинающееся с указанного смещения от положения <paramref name="origin" />.</summary>
      <param name="offset">Смещение от указанного положения последовательности <paramref name="origin" />.</param>
      <param name="origin">Положение последовательности, представляющее точку, с которой начинается смещение.</param>
      <returns>Объект, представляющий положение последовательности, которая начинается с положения <paramref name="offset" /> указанного объекта положения <paramref name="origin" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.Int32)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <param name="length">Длина среза.</param>
      <returns>Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с индекса <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int32,System.SequencePosition)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и заканчивается <paramref name="end" /> (исключая границы).</summary>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <param name="end">Окончание среза (исключая границы) <see cref="T:System.SequencePosition" />.</param>
      <returns>Срез, который состоит из элементов, размещенных в текущей последовательности только для чтения между индексом <paramref name="start" /> и позицией <paramref name="end" />, не включая ее.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с указанного индекса и продолжается до конца последовательности только для чтения.</summary>
      <param name="start">Стартовый индекс, с которого нужно начать этот срез.</param>
      <returns>Срез, который начинается с индекса <paramref name="start" /> и продолжается до конца текущей последовательности только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.Int64)">
      <summary>Формирует из заданного экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <param name="length">Длина среза.</param>
      <returns>Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с индекса <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.Int64,System.SequencePosition)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и заканчивается <paramref name="end" /> (исключая границы).</summary>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <param name="end">Окончание среза (исключая границы).</param>
      <returns>Срез, который состоит из элементов, размещенных в текущей последовательности только для чтения между индексом <paramref name="start" /> и позицией <paramref name="end" />, не включая ее.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с указанной позиции последовательности и продолжается до конца последовательности только для чтения.</summary>
      <param name="start">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <returns>Срез, который начинается с позиции последовательности <paramref name="start" /> и продолжается до конца текущей последовательности только для чтения.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int32)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <param name="length">Длина среза.</param>
      <returns>Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с позиции последовательности <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.Int64)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и содержит элементы <paramref name="length" />.</summary>
      <param name="start">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <param name="length">Длина среза.</param>
      <returns>Срез, состоящий из элементов <paramref name="length" /> текущего экземпляра, начиная с позиции последовательности <paramref name="start" />.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Slice(System.SequencePosition,System.SequencePosition)">
      <summary>Формирует из текущего экземпляра <see cref="T:System.Buffers.ReadOnlySequence`1" /> срез, который начинается с <paramref name="start" /> и заканчивается <paramref name="end" /> (исключая границы).</summary>
      <param name="start">Начальный экземпляр <see cref="T:System.SequencePosition" /> (включительно), с которого нужно начать этот срез.</param>
      <param name="end">Окончание среза (исключая границы) <see cref="T:System.SequencePosition" />.</param>
      <returns>Срез, который состоит из элементов, размещенных в текущей последовательности только для чтения между позицией <paramref name="start" />, и позицией <paramref name="end" />, не включая ее.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.ToString">
      <summary>Возвращает строку, представляющую текущую последовательность.</summary>
      <returns>Строка, представляющая текущую последовательность.</returns>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.TryGet(System.SequencePosition@,System.ReadOnlyMemory{`0}@,System.Boolean)">
      <summary>Пытается получить следующий сегмент после <paramref name="position" /> и возвращает значение, которое обозначает успешность выполнения этой операции.</summary>
      <param name="position">Текущее положение в последовательности.</param>
      <param name="memory">Доступная только для чтения область памяти, которая содержит следующий сегмент после <paramref name="position" />.</param>
      <param name="advance">
        <see langword="true" />, если <paramref name="position" /> обозначает начало следующего сегмента; в противном случае <see langword="false" />.</param>
      <returns>Возвращает <see langword="true" />, если метод вернул следующий сегмент, или <see langword="false" />, если достигнут конец последовательности только для чтения.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.End">
      <summary>Получает позицию конца <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.First">
      <summary>Получает <see cref="T:System.ReadOnlyMemory`1" /> из первого сегмента.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.FirstSpan">
      <summary>Получает <see cref="T:System.ReadOnlySpan`1" /> из первого сегмента.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsEmpty">
      <summary>Возвращает значение, указывающее, является ли коллекция <see cref="T:System.Buffers.ReadOnlySequence`1" /> пустой.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.IsSingleSegment">
      <summary>Получает значение, которое обозначает, содержит ли <see cref="T:System.Buffers.ReadOnlySequence`1" /> один сегмент <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <returns>
        <see langword="true" /> значение, если последовательность, доступная только для чтения, пуста; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Length">
      <summary>Возвращает длину <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns>Длина последовательности, доступной только для чтения.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Start">
      <summary>Получает положение в начале <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="T:System.Buffers.ReadOnlySequence`1.Enumerator">
      <summary>Представляет объект перечислителя для <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.#ctor(System.Buffers.ReadOnlySequence{`0}@)">
      <summary>Инициализирует перечислитель.</summary>
      <param name="sequence">Объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> для перечисления.</param>
    </member>
    <member name="M:System.Buffers.ReadOnlySequence`1.Enumerator.MoveNext">
      <summary>Переходит к следующему объекту <see cref="T:System.ReadOnlyMemory`1" /> в коллекции <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <returns>
        <see langword="true" />, если перечислитель успешно перемещен к следующему элементу; <see langword="false" />, если достигнут конец последовательности.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequence`1.Enumerator.Current">
      <summary>Возвращает текущий <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <returns>Текущий контекст <see cref="T:System.ReadOnlyMemory`1" />.</returns>
    </member>
    <member name="T:System.Buffers.ReadOnlySequenceSegment`1">
      <summary>Представляет связанный список узлов <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <typeparam name="T">Тип элементов в сегменте последовательности, доступном только для чтения.</typeparam>
    </member>
    <member name="M:System.Buffers.ReadOnlySequenceSegment`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Buffers.ReadOnlySequenceSegment`1" />.</summary>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Memory">
      <summary>Получает или задает значение <see cref="T:System.ReadOnlyMemory`1" /> для текущего узла.</summary>
      <returns>
        <see cref="T:System.ReadOnlyMemory`1" />Значение для текущего узла.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.Next">
      <summary>Получает или задает следующий узел.</summary>
      <returns>Следующий узел.</returns>
    </member>
    <member name="P:System.Buffers.ReadOnlySequenceSegment`1.RunningIndex">
      <summary>Получает или задает сумму длин узлов перед текущим узлом.</summary>
      <returns>Сумма длин узлов, предшествующих текущему узлу.</returns>
    </member>
    <member name="T:System.Buffers.SequenceReader`1">
      <summary>Предоставляет методы для чтения двоичных и текстовых данных за пределами <see cref="T:System.Buffers.ReadOnlySequence`1" />, уделяя особое внимание производительности и тому, чтобы количество выделений кучи было минимальным или нулевым.</summary>
      <typeparam name="T">Тип последовательности, доступной только для чтения.</typeparam>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.#ctor(System.Buffers.ReadOnlySequence{`0})">
      <summary>Создает объект <see cref="T:System.Buffers.SequenceReader`1" /> для данной последовательности <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
      <param name="sequence">Последовательность только для чтения, для которой требуется создать <see cref="T:System.Buffers.SequenceReader`1" />.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Advance(System.Int64)">
      <summary>Перемещает средство чтения вперед на заданное число элементов.</summary>
      <param name="count">Количество элементов, на которое необходимо переместиться.</param>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePast(`0)">
      <summary>Выполняет перемещение за идущие подряд экземпляры <paramref name="value" />.</summary>
      <param name="value">Значение, за которое необходимо переместить средство чтения.</param>
      <returns>Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0)">
      <summary>Выполняет перемещение за идущие подряд экземпляры одного из двух указанных значений.</summary>
      <param name="value0">Первое пропускаемое значение.</param>
      <param name="value1">Второе пропускаемое значение.</param>
      <returns>Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0)">
      <summary>Выполняет перемещение за идущие подряд экземпляры одного из трех указанных значений.</summary>
      <param name="value0">Первое пропускаемое значение.</param>
      <param name="value1">Второе пропускаемое значение.</param>
      <param name="value2">Третье пропускаемое значение.</param>
      <returns>Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(`0,`0,`0,`0)">
      <summary>Выполняет перемещение за идущие подряд экземпляры одного из четырех указанных значений.</summary>
      <param name="value0">Первое пропускаемое значение.</param>
      <param name="value1">Второе пропускаемое значение.</param>
      <param name="value2">Третье пропускаемое значение.</param>
      <param name="value3">Четвертое пропускаемое значение.</param>
      <returns>Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvancePastAny(System.ReadOnlySpan{`0})">
      <summary>Пропускает идущие подряд экземпляры любых указанных значений <paramref name="values" />.</summary>
      <param name="values">Пропускаемые значения.</param>
      <returns>Количество позиций, на которое переместилось средство чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.AdvanceToEnd">
      <summary>Перемещает средство чтения в конец последовательности.</summary>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(`0,System.Boolean)">
      <summary>Проверяет, является ли указанное значение следующим в последовательности.</summary>
      <param name="next">Значение, с которым необходимо сравнить следующие элементы.</param>
      <param name="advancePast">
        <see langword="true" /> для перемещения за найденные значения <paramref name="next" />; в противном случае — <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если значения расположены далее в последовательности; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.IsNext(System.ReadOnlySpan{`0},System.Boolean)">
      <summary>Проверяет, являются ли значения, указанные в диапазоне только для чтения, следующими в последовательности.</summary>
      <param name="next">Диапазон, с которым необходимо сравнить следующие элементы.</param>
      <param name="advancePast">
        <see langword="true" /> для перемещения за найденные значения <paramref name="next" />; в противном случае — <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если значения расположены далее в последовательности; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.Rewind(System.Int64)">
      <summary>Перемещает средство чтения назад на заданное число элементов.</summary>
      <param name="count">Количество элементов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> является отрицательным или больше <see cref="P:System.Buffers.SequenceReader`1.Consumed" />.</exception>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceTo(`0,System.Boolean)">
      <summary>Ищет указанный разделитель и при необходимости выполняет перемещение за него.</summary>
      <param name="delimiter">Искомый разделитель.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если данный разделитель <paramref name="delimiter" /> найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryAdvanceToAny(System.ReadOnlySpan{`0},System.Boolean)">
      <summary>Ищет любой из указанных разделителей и при необходимости выполняет перемещение за первый найденный разделитель.</summary>
      <param name="delimiters">Искомые разделители.</param>
      <param name="advancePastDelimiter">
        <see langword="true" /> для перемещения за первый экземпляр любого из данных разделителей <paramref name="delimiters" />; <see langword="false" />, если выполнять перемещение за разделитель не требуется.</param>
      <returns>Значение <see langword="true" />, если любой из данных разделителей <paramref name="delimiters" /> найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryCopyTo(System.Span{`0})">
      <summary>Копирует данные из текущей позиции в указанный конечный диапазон, если их достаточно для заполнения этого диапазона.</summary>
      <param name="destination">Конечный диапазон, в который выполняется копирование.</param>
      <returns>Значение <see langword="true" />, если данных достаточно для полного заполнения диапазона <paramref name="destination" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(`0@)">
      <summary>Считывает следующее значение, не перемещая средство чтения.</summary>
      <param name="value">Следующее значение или значение по умолчанию, если достигнут конец средства чтения.</param>
      <returns>Значение <see langword="true" />, если не достигнут конец средства чтения и операция считывания была выполнена успешно; значение <see langword="false" />, если достигнут конец средства чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryPeek(System.Int64,`0@)">
      <summary>Считывает следующее значение в текущем смещении, не перемещая средство чтения.</summary>
      <param name="offset">Смещение от текущей позиции.</param>
      <param name="value">Следующее значение или значение по умолчанию, если достигнут конец средства чтения.</param>
      <returns>Значение <see langword="true" />, если не достигнут конец средства чтения и операция считывания была выполнена успешно; значение <see langword="false" />, если достигнут конец средства чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryRead(`0@)">
      <summary>Считывает следующее значение и перемещает средство чтения.</summary>
      <param name="value">Следующее значение или значение по умолчанию, если достигнут конец средства чтения.</param>
      <returns>Значение <see langword="true" />, если не достигнут конец средства чтения и операция считывания была выполнена успешно; значение <see langword="false" />, если достигнут конец средства чтения.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,`0,System.Boolean)">
      <summary>Пытается считать все данные до данного разделителя <paramref name="delimiter" />, пропуская разделители, перед которыми указан <paramref name="delimiterEscape" />.</summary>
      <param name="sequence">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter">Искомый разделитель.</param>
      <param name="delimiterEscape">Значение, которое указывает, что следующий разделитель <paramref name="delimiter" /> необходимо пропустить.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,`0,System.Boolean)">
      <summary>Пытается считать все данные до указанного разделителя <paramref name="delimiter" />.</summary>
      <param name="sequence">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter">Искомый разделитель.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>Пытается считать данные до нахождения полного разделителя, указанного как диапазон только для чтения.</summary>
      <param name="sequence">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter">Диапазон только для чтения, который содержит один или несколько разделителей.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,`0,System.Boolean)">
      <summary>Пытается считать все данные до данного разделителя <paramref name="delimiter" />, пропуская разделители, перед которыми указан <paramref name="delimiterEscape" />.</summary>
      <param name="span">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter">Искомый разделитель.</param>
      <param name="delimiterEscape">Значение, которое указывает, что следующий разделитель <paramref name="delimiter" /> необходимо пропустить.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,`0,System.Boolean)">
      <summary>Пытается считать все данные до указанного разделителя <paramref name="delimiter" />.</summary>
      <param name="span">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiter">Искомый разделитель.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadTo(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>Попытаться считать все данные до указанного разделителя <paramref name="delimiter" />.</summary>
      <param name="sequence">Считанные данные, если таковые имеются.</param>
      <param name="delimiter">Искомый разделитель.</param>
      <param name="advancePastDelimiter">Значение <see langword="true" /> для перемещения за найденный разделитель <paramref name="delimiter" />.</param>
      <param name="span">Считанные данные, если таковые имеются.</param>
      <returns>Значение <see langword="true" />, если разделитель <paramref name="delimiter" /> был найден; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.Buffers.ReadOnlySequence{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>Пытается считать все данные до любого из указанных разделителей <paramref name="delimiters" />.</summary>
      <param name="sequence">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiters">Искомые разделители.</param>
      <param name="advancePastDelimiter">
        <see langword="true" /> для перемещения за первый найденный экземпляр любого из данных разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если был найден любой из разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReader`1.TryReadToAny(System.ReadOnlySpan{`0}@,System.ReadOnlySpan{`0},System.Boolean)">
      <summary>Пытается считать все данные до любого из указанных разделителей <paramref name="delimiters" />.</summary>
      <param name="span">При возвращении метода содержит считанные данные, если они имеются.</param>
      <param name="delimiters">Искомые разделители.</param>
      <param name="advancePastDelimiter">
        <see langword="true" /> для перемещения за первый найденный экземпляр любого из данных разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</param>
      <returns>Значение <see langword="true" />, если был найден любой из разделителей <paramref name="delimiters" />; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Consumed">
      <summary>Возвращает общее количество значений <typeparamref name="T" />, обработанных средством чтения.</summary>
      <returns>Общее число значений, обработанных модулем чтения.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpan">
      <summary>Возвращает объект <see cref="T:System.Span`1" />, который содержит текущий сегмент в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</summary>
      <returns>Диапазон, содержащий текущий сегмент в последовательности.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.CurrentSpanIndex">
      <summary>Возвращает индекс в <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />.</summary>
      <returns>Индекс в <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> .</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.End">
      <summary>Возвращает значение, которое указывает, есть ли еще данные в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</summary>
      <returns>
        <see langword="true" /> значение, если больше нет данных в <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> ; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Length">
      <summary>Возвращает число элементов в последовательности <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> средства чтения.</summary>
      <returns>Число элементов в модуле чтения <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> .</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Position">
      <summary>Возвращает текущую позицию в <see cref="P:System.Buffers.SequenceReader`1.Sequence" />.</summary>
      <returns>Текущая позицией в <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> .</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Remaining">
      <summary>Возвращает оставшиеся элементы в последовательности <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> средства чтения.</summary>
      <returns>Остальные элементы в <see cref="P:System.Buffers.SequenceReader`1.Sequence" /></returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.Sequence">
      <summary>Возвращает базовый объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> для средства чтения.</summary>
      <returns>Базовая последовательность только для чтения для модуля чтения.</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSequence">
      <summary>Возвращает часть диапазона <see cref="P:System.Buffers.SequenceReader`1.Sequence" />, которая не была считана.</summary>
      <returns>Непрочтенная часть <see cref="P:System.Buffers.SequenceReader`1.Sequence" /> .</returns>
    </member>
    <member name="P:System.Buffers.SequenceReader`1.UnreadSpan">
      <summary>Возвращает часть диапазона <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" />, которая не была считана.</summary>
      <returns>Непрочтенная часть <see cref="P:System.Buffers.SequenceReader`1.CurrentSpan" /> .</returns>
    </member>
    <member name="T:System.Buffers.SequenceReaderExtensions">
      <summary>Предоставляет для класса <see cref="T:System.Buffers.SequenceReader`1" /> расширенные функциональные возможности, позволяющие считывать числовые значения с прямым или обратным порядком байтов из двоичных данных.</summary>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary>Пытается считать <see cref="T:System.Int16" /> как содержимое с обратным порядком байтов.</summary>
      <param name="reader">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int16" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary>Пытается считать <see cref="T:System.Int32" /> как содержимое с обратным порядком байтов.</summary>
      <param name="reader">Средство чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int32" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadBigEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary>Пытается считать <see cref="T:System.Int64" /> как содержимое с обратным порядком байтов.</summary>
      <param name="reader">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с обратным порядком байтов.</param>
      <returns>Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int64" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int16@)">
      <summary>Пытается считать <see cref="T:System.Int16" /> как содержимое с прямым порядком байтов.</summary>
      <param name="reader">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int16" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int32@)">
      <summary>Пытается считать <see cref="T:System.Int32" /> как содержимое с прямым порядком байтов.</summary>
      <param name="reader">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int32" /> недостаточно.</returns>
    </member>
    <member name="M:System.Buffers.SequenceReaderExtensions.TryReadLittleEndian(System.Buffers.SequenceReader{System.Byte},System.Int64@)">
      <summary>Пытается считать <see cref="T:System.Int64" /> как содержимое с прямым порядком байтов.</summary>
      <param name="reader">Экземпляр средства чтения последовательности байтов, из которого считывается значение.</param>
      <param name="value">При возврате метод содержит значение, считанное из средства чтения последовательности байтов, с прямым порядком байтов.</param>
      <returns>Значение <see langword="true" />, если операция чтения была выполнена успешно; значение <see langword="false" />, если данных для <see cref="T:System.Int64" /> недостаточно.</returns>
    </member>
    <member name="T:System.Buffers.StandardFormat">
      <summary>Представляет строку стандартного формата без использования фактической строки.</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.MaxPrecision">
      <summary>Определяет максимально допустимое значение точности.</summary>
    </member>
    <member name="F:System.Buffers.StandardFormat.NoPrecision">
      <summary>Указывает, что формат не использует точность или что точность не определена.</summary>
    </member>
    <member name="M:System.Buffers.StandardFormat.#ctor(System.Char,System.Byte)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="symbol">Описатель формата определенного типа, например G, D или X.</param>
      <param name="precision">Необязательный описатель точности с диапазоном от 0 до 99 или специальное значение <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> (по умолчанию).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="symbol" /> не равно <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> и превышает <see cref="F:System.Buffers.StandardFormat.MaxPrecision" />.

-или-

Параметр <paramref name="symbol" /> не может быть преобразован в <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Buffers.StandardFormat)">
      <summary>Возвращает значение, которое показывает, равен ли текущий экземпляр указанному объекту <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="other">Формат для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если два экземпляра равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Equals(System.Object)">
      <summary>Возвращает значение, которое показывает, равен ли текущий экземпляр <see cref="T:System.Buffers.StandardFormat" /> указанному объекту.</summary>
      <param name="obj">Объект, сравниваемый с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если два экземпляра равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Equality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary>Возвращает значение, указывающее, равны ли два экземпляра <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="left">Первый сравниваемый формат.</param>
      <param name="right">Второй сравниваемый формат.</param>
      <returns>Значение <see langword="true" />, если два экземпляра равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Implicit(System.Char)~System.Buffers.StandardFormat">
      <summary>Преобразует символ в экземпляр <see cref="T:System.Buffers.StandardFormat" />, используя точность <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</summary>
      <param name="symbol">Символ для преобразования в значение <see cref="T:System.Buffers.StandardFormat" />.</param>
      <returns>Формат с о свойством<see cref="P:System.Buffers.StandardFormat.Symbol" />, равным <paramref name="symbol" />, и свойством <see cref="P:System.Buffers.StandardFormat.Precision" />, равным <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.op_Inequality(System.Buffers.StandardFormat,System.Buffers.StandardFormat)">
      <summary>Определяет неравенство двух экземпляров <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="left">Первый сравниваемый формат.</param>
      <param name="right">Второй сравниваемый формат.</param>
      <returns>
        <see langword="true" />, если два формата не равны; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.ReadOnlySpan{System.Char})">
      <summary>Преобразует <see langword="ReadOnlySpan&lt;System.Char&gt;" /> в экземпляр <see cref="T:System.Buffers.StandardFormat" /> с использованием точности <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</summary>
      <param name="format">Область только для чтения, которая содержит символ для синтаксического анализа.</param>
      <returns>Значение, значение свойства <see cref="P:System.Buffers.StandardFormat.Symbol" /> которого является символом в <paramref name="format" />, и значение свойства <see cref="P:System.Buffers.StandardFormat.Precision" /> которого является <see cref="F:System.Buffers.StandardFormat.NoPrecision" />.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.Parse(System.String)">
      <summary>Преобразует классическую строку стандартного формата .NET в экземпляр <see cref="T:System.Buffers.StandardFormat" />.</summary>
      <param name="format">Классическая строка стандартного формата .NET.</param>
      <exception cref="T:System.FormatException">Параметр <paramref name="format" /> не является допустимой строкой стандартного формата.</exception>
      <returns>Формат.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.ToString">
      <summary>Возвращает строковое представление этого формата.</summary>
      <returns>Строковое представление этого формата.</returns>
    </member>
    <member name="M:System.Buffers.StandardFormat.TryParse(System.ReadOnlySpan{System.Char},System.Buffers.StandardFormat@)">
      <summary>Пытается преобразовать <see langword="ReadOnlySpan&lt;Char&gt;" /> в экземпляр <see cref="T:System.Buffers.StandardFormat" /> и возвращает значение, которое указывает, выполнена ли успешно операция синтаксического анализа.</summary>
      <param name="format">Область только для чтения, которая содержит символ для преобразования.</param>
      <param name="result">При возвращении метода содержит проанализированный экземпляр <see cref="T:System.Buffers.StandardFormat" />, если операция выполнена успешно.</param>
      <returns>
        <see langword="true" />, если синтаксический анализ выполнен успешно; в противном случае <see langword="false" />.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.HasPrecision">
      <summary>Получает значение, которое показывает, имеет ли формат заданную точность.</summary>
      <returns>
        <see langword="true" /> значение, если у формата есть точность, отличная от <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> ; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.IsDefault">
      <summary>Получает значение, которое показывает, имеет ли текущий экземпляр формат по умолчанию.</summary>
      <returns>
        <see langword="true" /> значение, если текущий экземпляр является форматом по умолчанию; в противном случае — <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Precision">
      <summary>Получает компонент точности формата.</summary>
      <returns>Компонент точности, который может иметь значение <see cref="F:System.Buffers.StandardFormat.NoPrecision" /> , или может находиться в диапазоне от 0 до 9.</returns>
    </member>
    <member name="P:System.Buffers.StandardFormat.Symbol">
      <summary>Получает компонент символа формата.</summary>
      <returns>Символьный компонент формата.</returns>
    </member>
    <member name="T:System.Buffers.Text.Base64">
      <summary>Преобразует текст между форматами двоичных данных и текста UTF-8, представленного в кодировке Base64.</summary>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>Декодирует диапазон текста UTF-8, представленного в кодировке Base64, в двоичные данные. Если размер исходных данных не кратен 4, декодируется максимально возможный объем текста до ближайшего кратного 4.</summary>
      <param name="utf8">Исходный диапазон, который содержит текст UTF-8 в кодировке Base64, предназначенный для декодирования.</param>
      <param name="bytes">Целевой диапазон, который содержит результат операции, то есть декодированные двоичные данные.</param>
      <param name="bytesConsumed">Число входных байтов, полученных при выполнении операции. Если потребуется, так можно отделить сегмент исходных данных для последующих вызовов.</param>
      <param name="bytesWritten">Число байтов, записанных в целевой диапазон. Если потребуется, так можно отделить сегмент выходных данных для последующих вызовов.</param>
      <param name="isFinalBlock">
        <see langword="true" /> (по умолчанию), если исходный диапазон содержит все данные для декодирования. <see langword="false" />, если входной диапазон содержит только часть данных, продолжение которых будет предоставлено позднее.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции декодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.DecodeFromUtf8InPlace(System.Span{System.Byte},System.Int32@)">
      <summary>Декодирует (на месте) диапазон текста UTF-8, представленного в кодировке Base64, в двоичные данные. Декодированные данные в двоичном формате занимают меньше места, чем входные данные (эта операция сжимает данные). Если размер исходных данных не кратен 4, метод не выполняет никаких действий.</summary>
      <param name="buffer">Исходный диапазон, который содержит текст в кодировке Base64, предназначенный для декодирования.</param>
      <param name="bytesWritten">Число байтов, записанных в буфер.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции декодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@,System.Int32@,System.Boolean)">
      <summary>Кодирует диапазон двоичных данных в текст UTF-8, представленный в кодировке Base64.</summary>
      <param name="bytes">Исходный диапазон, который содержит двоичные данные, предназначенные для кодирования.</param>
      <param name="utf8">Целевой диапазон, который содержит результат операции, то есть текст UTF-8 в кодировке base64.</param>
      <param name="bytesConsumed">Число входных байтов, полученных при выполнении операции. Если потребуется, так можно отделить сегмент исходных данных для последующих вызовов.</param>
      <param name="bytesWritten">Число байтов, записанных в целевой диапазон. Если потребуется, так можно отделить сегмент выходных данных для последующих вызовов.</param>
      <param name="isFinalBlock">
        <see langword="true" /> (по умолчанию), если исходный диапазон содержит все данные для кодирования. <see langword="false" />, если входной диапазон содержит только часть данных, продолжение которых будет предоставлено позднее.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции кодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.EncodeToUtf8InPlace(System.Span{System.Byte},System.Int32,System.Int32@)">
      <summary>Кодирует (на месте) диапазон двоичных данных в текст UTF-8, представленный в кодировке Base64. Кодированные данные занимают больше места, чем входные данные в двоичном формате (эта операция расширяет данные).</summary>
      <param name="buffer">Исходный диапазон, который содержит двоичные данные, предназначенные для кодирования. Так как этот метод выполняет преобразование на месте, нужен достаточный размер для хранения результата операции.</param>
      <param name="dataLength">Число байтов двоичных данных, содержащихся в буфере и подлежащих кодированию. Это значение не может превышать длину буфера.</param>
      <param name="bytesWritten">Число байтов, записанных в буфер.</param>
      <returns>Одно из значений перечисления, которое указывает результат выполнения операции кодирования.</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxDecodedFromUtf8Length(System.Int32)">
      <summary>Возвращает максимальную длину результата (в байтах), который будет получен при декодировании текста в кодировке Base64 в диапазоне байтов с указанной длиной.</summary>
      <param name="length">Размер диапазона байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра<paramref name="length" /> меньше 0.</exception>
      <returns>Максимальная длина результата (в байтах).</returns>
    </member>
    <member name="M:System.Buffers.Text.Base64.GetMaxEncodedToUtf8Length(System.Int32)">
      <summary>Возвращает максимальную длину результата (в байтах), который будет получен при кодировании двоичных данных в диапазоне байтов с указанной длиной.</summary>
      <param name="length">Размер диапазона байтов.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="length" /> меньше 0 или больше 1610612733 (так как кодирование увеличивает объем данных в 4/3 раза).</exception>
      <returns>Максимальная длина результата (в байтах).</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Formatter">
      <summary>Предоставляет статические методы для форматирования общих типов данных в виде строк Utf8.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Boolean,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Boolean" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Byte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Byte" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTime,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.DateTime" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.DateTimeOffset,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.DateTimeOffset" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Decimal,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Decimal" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Double,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Double" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Guid,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Guid" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Int16" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Int32" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Int64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Int64" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.SByte,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.SByte" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.Single,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.Single" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.TimeSpan,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.TimeSpan" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt16,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.UInt16" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt32,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.UInt32" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Formatter.TryFormat(System.UInt64,System.Span{System.Byte},System.Int32@,System.Buffers.StandardFormat)">
      <summary>Форматирует значение <see cref="T:System.UInt64" /> как строку UTF-8.</summary>
      <param name="value">Форматируемое значение.</param>
      <param name="destination">Буфер, в который записывается форматированное значение UTF-8.</param>
      <param name="bytesWritten">Когда метод возвращает управление, содержит длину форматированного текста в байтах.</param>
      <param name="format">Стандартный формат, который необходимо использовать.</param>
      <returns>Значение <see langword="true" />, если операция форматирования завершается успешно; значение <see langword="false" />, если буфер <paramref name="buffer" /> слишком мал.</returns>
    </member>
    <member name="T:System.Buffers.Text.Utf8Parser">
      <summary>Предоставляет статические методы для преобразования строк в кодировке UTF-8 в распространенные типы данных.</summary>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Boolean@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Boolean" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Byte@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Byte" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTime@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.DateTime" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.DateTimeOffset@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.DateTimeOffset" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Decimal@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Decimal" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Double@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Double" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Guid@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Guid" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int16@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Int16" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Int32" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Int64@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Int64" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.SByte@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.SByte" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.Single@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.Single" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.TimeSpan@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.TimeSpan" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt16@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.UInt16" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt32@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.UInt32" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="M:System.Buffers.Text.Utf8Parser.TryParse(System.ReadOnlySpan{System.Byte},System.UInt64@,System.Int32@,System.Char)">
      <summary>Анализирует значение <see cref="T:System.UInt64" /> в начале строки в кодировке UTF-8.</summary>
      <param name="source">Строка в кодировке UTF-8 для анализа.</param>
      <param name="value">При возвращении управления методом содержит проанализированное значение <paramref name="source" />, если операция анализа прошла успешно.</param>
      <param name="bytesConsumed">Если операция анализа прошла успешно, содержит длину проанализированной подстроки в байтах при возвращении управления методом. Если выполнение метода завершилось неудачно, <paramref name="bytesConsumed" /> имеет значение 0.</param>
      <param name="standardFormat">Ожидаемый формат строки в кодировке UTF-8.</param>
      <returns>Значение <see langword="true" /> в случае успешного выполнения; значение <see langword="false" />, если строка синтаксически неправильна либо если произошло переполнение или потеря значимости.</returns>
    </member>
    <member name="T:System.MemoryExtensions">
      <summary>Предоставляет методы расширения для типов, связанных с памятью и диапазоном, таких как <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> и <see cref="T:System.ReadOnlySpan`1" />.</summary>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String)">
      <summary>Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> для части целевой строки.</summary>
      <param name="text">Целевая строка.</param>
      <returns>Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Index)">
      <summary>Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанного индекса.</summary>
      <param name="text">Целевая строка.</param>
      <param name="startIndex">Индекс, с которого нужно начать срез.</param>
      <returns>Представление строки в памяти только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32)">
      <summary>Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанной позиции символа.</summary>
      <param name="text">Целевая строка.</param>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" /> не находится в диапазоне <paramref name="text" /> (<paramref name="start" /> имеет значение &lt; 0 или &gt; <c>text.Length</c>).</exception>
      <returns>Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Int32,System.Int32)">
      <summary>Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> на основе части целевой строки, начиная с указанной позиции с заданной длиной.</summary>
      <param name="text">Целевая строка.</param>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <param name="length">Требуемая длина для среза.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</exception>
      <returns>Представление строки в памяти только для чтения или <see langword="default" />, если <paramref name="text" /> имеет значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory(System.String,System.Range)">
      <summary>Создает новый <see langword="ReadOnlyMemory&lt;Char&gt;" /> с заданным диапазоном целевой строки.</summary>
      <param name="text">Целевая строка.</param>
      <param name="range">Диапазон, указывающий начало и длину строки среза.</param>
      <returns>Представление строки в памяти только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[])">
      <summary>Создает новую область памяти для целевого массива.</summary>
      <param name="array">Преобразуемый массив.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Index)">
      <summary>Создает новую область памяти для части целевого массива, начиная с указанного индекса и заканчивая концом массива.</summary>
      <param name="array">Преобразуемый массив.</param>
      <param name="startIndex">Первая позиция массива.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32)">
      <summary>Создает новую область памяти для части целевого массива, начиная с указанной позиции и заканчивая концом массива.</summary>
      <param name="array">Целевой массив.</param>
      <param name="start">Индекс, с которого нужно начать память.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Индекс <paramref name="start" /> имеет значение меньше 0 или больше <see langword="array.Length" />.</exception>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Int32,System.Int32)">
      <summary>Создает новую область памяти для части целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="array">Целевой массив.</param>
      <param name="start">Индекс, с которого определяется начало области памяти.</param>
      <param name="length">Число элементов в области памяти.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="array" />.</exception>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(``0[],System.Range)">
      <summary>Создает новую область памяти для части целевого массива, начиная с включающего начального индекса диапазона и заканчивая исключающим конечным индексом диапазона.</summary>
      <param name="array">Преобразуемый массив.</param>
      <param name="range">Диапазон для преобразования из массива.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0})">
      <summary>Создает новую область памяти для части целевого сегмента массива.</summary>
      <param name="segment">Преобразуемый сегмент.</param>
      <typeparam name="T">Тип сегмента.</typeparam>
      <returns>Представление сегмента в памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32)">
      <summary>Создает новую область памяти для части сегмента целевого массива, начиная с указанной позиции и заканчивая концом сегмента.</summary>
      <param name="segment">Сегмент целевого массива.</param>
      <param name="start">Индекс, с которого нужно начать память.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="segment" /> является ковариантным, и <paramref name="segment" /> не обязательно будет иметь тип <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="segment.Count" />.</exception>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsMemory``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary>Создает новую область памяти для части сегмента целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="segment">Сегмент целевого массива.</param>
      <param name="start">Индекс, с которого нужно начать память.</param>
      <param name="length">Число элементов в памяти.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="segment" />.</exception>
      <returns>Представление в памяти всего массива или части массива.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String)">
      <summary>Создает новый диапазон, предназначенный только для чтения, для части целевой строки, начиная с указанной позиции и с учетом заданного числа символов.</summary>
      <param name="text">Целевая строка.</param>
      <returns>Представление строки в диапазоне только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32)">
      <summary>Создает новый диапазон, предназначенный только для чтения, для части целевой строки, начиная с указанной позиции и до конца строки.</summary>
      <param name="text">Целевая строка.</param>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="text.Length" />.</exception>
      <returns>Представление строки в диапазоне только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan(System.String,System.Int32,System.Int32)">
      <summary>Создает новый диапазон, доступный только для чтения, для строки.</summary>
      <param name="text">Целевая строка.</param>
      <param name="start">Индекс, с которого нужно начать срез.</param>
      <param name="length">Требуемая длина для среза.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</exception>
      <returns>Представление строки в диапазоне только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[])">
      <summary>Создает новый диапазон для целевого массива.</summary>
      <param name="array">Преобразуемый массив.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Index)">
      <summary>Создает новый диапазон для части целевого массива, определенного значением <see cref="T:System.Index" />.</summary>
      <param name="array">Преобразуемый массив.</param>
      <param name="startIndex">Начальный индекс.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32)">
      <summary>Создает новый диапазон для части целевого массива, начиная с указанной позиции и заканчивая концом массива.</summary>
      <param name="array">Преобразуемый массив.</param>
      <param name="start">Начальный индекс, с которого будет преобразован массив.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Int32,System.Int32)">
      <summary>Создает новый диапазон для части целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="array">Целевой массив.</param>
      <param name="start">Индекс, с которого нужно начать диапазон.</param>
      <param name="length">Число элементов в диапазоне.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="array" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="text" />.</exception>
      <returns>Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(``0[],System.Range)">
      <summary>Создает новый диапазон для части целевого массива, определенного значением <see cref="T:System.Range" />.</summary>
      <param name="array">Преобразуемый массив.</param>
      <param name="range">Преобразуемый диапазон массива.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <returns>Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0})">
      <summary>Создает новый диапазон для сегмента целевого массива.</summary>
      <param name="segment">Сегмент массива для преобразования.</param>
      <typeparam name="T">Тип сегмента массива.</typeparam>
      <returns>Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Index)">
      <summary>Создает новый диапазон для части сегмента целевого массива, начиная с указанного индекса и заканчивая концом сегмента.</summary>
      <param name="segment">Сегмент целевого массива.</param>
      <param name="startIndex">Индекс, с которого нужно начать диапазон.</param>
      <typeparam name="T">Тип сегмента массива.</typeparam>
      <returns>Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32)">
      <summary>Создает новый диапазон для части сегмента целевого массива, начиная с указанной позиции и заканчивая концом сегмента.</summary>
      <param name="segment">Сегмент целевого массива.</param>
      <param name="start">Индекс, с которого нужно начать диапазон.</param>
      <typeparam name="T">Тип сегмента массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="start" /> имеет значение меньше 0 или больше <see langword="segment.Count" />.</exception>
      <returns>Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Int32,System.Int32)">
      <summary>Создает новый диапазон для части сегмента целевого массива, начиная с указанной позиции с учетом заданной длины.</summary>
      <param name="segment">Сегмент целевого массива.</param>
      <param name="start">Индекс, с которого нужно начать диапазон.</param>
      <param name="length">Число элементов в диапазоне.</param>
      <typeparam name="T">Тип сегмента массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="segment" /> является ковариантным, и тип массива необязательно будет <see langword="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="start" />, <paramref name="length" /> или <paramref name="start" /> + <paramref name="length" /> не находятся в диапазоне <paramref name="segment" />.</exception>
      <returns>Представление массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.AsSpan``1(System.ArraySegment{``0},System.Range)">
      <summary>Создает диапазон для части сегмента целевого массива с использованием начального и конечного индексов диапазона.</summary>
      <param name="segment">Сегмент целевого массива.</param>
      <param name="range">Диапазон, в котором находятся индексы начала и конца, используемые для разбиения массива на части.</param>
      <typeparam name="T">Тип сегмента массива.</typeparam>
      <returns>Представление сегмента массива в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.ReadOnlySpan{``0},System.IComparable{``0})">
      <summary>Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный интерфейс <see cref="T:System.IComparable`1" />.</summary>
      <param name="span">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</param>
      <param name="comparable">
        <see cref="T:System.IComparable`1" />, используемый при сравнении.</param>
      <typeparam name="T">Тип элемента диапазона.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" /> имеет значение <see langword="null" />.</exception>
      <returns>Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``1(System.Span{``0},System.IComparable{``0})">
      <summary>Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный интерфейс <see cref="T:System.IComparable`1" />.</summary>
      <param name="span">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</param>
      <param name="comparable">
        <see cref="T:System.IComparable`1" />, используемый при сравнении.</param>
      <typeparam name="T">Тип элемента диапазона.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" /> имеет значение <see langword="null" />.</exception>
      <returns>Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``0,``1)">
      <summary>Выполняет поиск указанного значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный тип <typeparamref name="TComparer" />.</summary>
      <param name="span">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</param>
      <param name="value">Искомый объект. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="comparer">
        <typeparamref name="TComparer" />, используемый при сравнении.</param>
      <typeparam name="T">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparer">Конкретный тип <see cref="T:System.Collections.Generic.IComparer`1" /> .</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> имеет значение <see langword="null" />.</exception>
      <returns>Отсчитываемый от нуля индекс элемента <paramref name="value" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="value" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.ReadOnlySpan{``0},``1)">
      <summary>Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.ReadOnlySpan`1" />, используя заданный универсальный тип <typeparamref name="TComparable" />.</summary>
      <param name="span">Отсортированный массив <see cref="T:System.ReadOnlySpan`1" />, в котором выполняется поиск.</param>
      <param name="comparable">
        <typeparamref name="TComparable" />, используемый при сравнении.</param>
      <typeparam name="T">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparable">Конкретный тип <see cref="T:System.IComparable`1" /> .</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" /> имеет значение <see langword="null" />.</exception>
      <returns>Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.ReadOnlySpan`1.Length" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``0,``1)">
      <summary>Выполняет поиск указанного значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный тип <typeparamref name="TComparer" />.</summary>
      <param name="span">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</param>
      <param name="value">Искомый объект. Для ссылочных типов допускается значение <see langword="null" />.</param>
      <param name="comparer">
        <typeparamref name="TComparer" />, используемый при сравнении.</param>
      <typeparam name="T">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparer">Конкретный тип <see cref="T:System.Collections.Generic.IComparer`1" /> .</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> имеет значение <see langword="null" />.</exception>
      <returns>Отсчитываемый от нуля индекс элемента <paramref name="value" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="value" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="value" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.BinarySearch``2(System.Span{``0},``1)">
      <summary>Выполняет поиск значения во всем отсортированном массиве <see cref="T:System.Span`1" />, используя заданный универсальный тип <typeparamref name="TComparable" />.</summary>
      <param name="span">Отсортированный массив <see cref="T:System.Span`1" />, в котором выполняется поиск.</param>
      <param name="comparable">
        <typeparamref name="TComparable" />, используемый при сравнении.</param>
      <typeparam name="T">Тип элемента диапазона.</typeparam>
      <typeparam name="TComparable">Конкретный тип <see cref="T:System.IComparable`1" /> .</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparable" /> имеет значение <see langword="null" />.</exception>
      <returns>Отсчитываемый от нуля индекс элемента <paramref name="comparable" /> в отсортированном списке <paramref name="span" />, если элемент <paramref name="comparable" /> найден; в противном случае — отрицательное число, которое является поразрядным дополнением индекса следующего элемента, большего, чем <paramref name="comparable" />, или, если большего элемента не существует, поразрядным дополнением значения <see cref="P:System.Span`1.Length" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.CompareTo(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Сравнивает один диапазон символов с другим с помощью указанного сравнения строк и возвращает целое число, которое указывает их относительное расположение в порядке сортировки.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="other">Значение для сравнения с исходным диапазоном.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="other" />.</param>
      <returns>Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:   — Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.   — Если 0, <paramref name="span" /> равно <paramref name="other" />.   — Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Указывает, находится ли указанное значение в пределах диапазона символов, доступного только для чтения.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Значение, которое необходимо найти в исходном диапазоне.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения символов в <paramref name="span" /> и <paramref name="value" />.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value" /> находится в диапазоне; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.ReadOnlySpan{``0},``0)">
      <summary>Указывает, найдено ли указанное значение в диапазоне, доступном только для чтения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Значение, которое нужно найти.</param>
      <typeparam name="T">Тип диапазона.</typeparam>
      <returns>Значение <see langword="true" />, если найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Contains``1(System.Span{``0},``0)">
      <summary>Указывает, найдено ли указанное значение в диапазоне. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Значение, которое нужно найти.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Значение <see langword="true" />, если найдено; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Memory{``0})">
      <summary>Копирует содержимое массива в область памяти.</summary>
      <param name="source">Массив, из которого необходимо скопировать элементы.</param>
      <param name="destination">Память, в которую необходимо скопировать элементы.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArgumentException">Место назначения короче исходного массива.</exception>
    </member>
    <member name="M:System.MemoryExtensions.CopyTo``1(``0[],System.Span{``0})">
      <summary>Копирует содержимое массива в диапазон.</summary>
      <param name="source">Массив, из которого необходимо скопировать элементы.</param>
      <param name="destination">Диапазон для копирования элементов.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArgumentException">Диапазон назначения короче исходного массива.</exception>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Определяет, совпадает ли конец <paramref name="span" /> с заданным <paramref name="value" /> при сравнении с учетом заданного параметра <paramref name="comparisonType" />.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Последовательность, сравниваемая с концом исходного диапазона.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns>Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, отображается ли указанная последовательность в конце диапазона, доступного только для чтения.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Последовательность, сравниваемая с концом исходного диапазона.</param>
      <typeparam name="T">Тип диапазона.</typeparam>
      <returns>Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EndsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, отображается ли указанная последовательность в конце диапазона.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Последовательность, сравниваемая с концом исходного диапазона.</param>
      <typeparam name="T">Тип диапазона.</typeparam>
      <returns>Значение <see langword="true" />, если <paramref name="value" /> соответствует концу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.ReadOnlySpan{System.Char})">
      <summary>Возвращает перечисление <see cref="T:System.Text.Rune" /> из предоставленного диапазона, доступного только для чтения.</summary>
      <param name="span">Исходный диапазон.</param>
      <returns>Перечислитель Rune.</returns>
    </member>
    <member name="M:System.MemoryExtensions.EnumerateRunes(System.Span{System.Char})">
      <summary>Возвращает перечисление <see cref="T:System.Text.Rune" /> из предоставленного диапазона.</summary>
      <param name="span">Исходный диапазон.</param>
      <returns>Перечислитель Rune.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Equals(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Определяет, имеет ли <paramref name="span" /> и указанный диапазон <paramref name="other" /> одинаковые символы при сравнении с использованием указанного параметра <paramref name="comparisonType" />.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="other">Значение для сравнения с исходным диапазоном.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="other" />.</param>
      <returns>Значение <see langword="true" />, если объекты равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Возвращает индекс с отсчетом от нуля первого вхождения указанного <paramref name="value" /> в текущем <paramref name="span" />.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Значение, которое необходимо найти в исходном диапазоне.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns>Индекс вхождения значения в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary>Выполняет поиск указанного значения и возвращает индекс его первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Значение, которое нужно найти.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск указанной последовательности и возвращает индекс ее первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Искомая последовательность.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},``0)">
      <summary>Выполняет поиск указанного значения и возвращает индекс его первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Значение, которое нужно найти.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск указанной последовательности и возвращает индекс ее первого вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Искомая последовательность.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary>Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary>Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <param name="value2">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="values">Набор значений для поиска.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0)">
      <summary>Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary>Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <param name="value2">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск первого индекса любого из указанных значений аналогичного вызову IndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="values">Набор значений для поиска.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Первый индекс вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.IsWhiteSpace(System.ReadOnlySpan{System.Char})">
      <summary>Указывает, содержит ли указанный диапазон только символы пробела.</summary>
      <param name="span">Исходный диапазон.</param>
      <returns>Значение <see langword="true" />, если диапазон содержит только пробелы, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Возвращает индекс с отсчетом от нуля последнего вхождения указанного <paramref name="value" /> в текущем <paramref name="span" />.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Значение, которое необходимо найти в исходном диапазоне.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns>Индекс последнего вхождения значения в диапазоне.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},``0)">
      <summary>Выполняет поиск указанного значения и возвращает индекс его последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Значение, которое нужно найти.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск указанной последовательности и возвращает индекс ее последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Искомая последовательность.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},``0)">
      <summary>Выполняет поиск указанного значения и возвращает индекс его последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Значение, которое нужно найти.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOf``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск указанной последовательности и возвращает индекс ее последнего вхождения. Значения сравниваются с помощью IEquatable {T}.Equals (T).</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Искомая последовательность.</param>
      <typeparam name="T">Тип диапазона и значения.</typeparam>
      <returns>Индекс последнего вхождения значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0)">
      <summary>Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},``0,``0,``0)">
      <summary>Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <param name="value2">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="values">Набор значений для поиска.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0)">
      <summary>Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},``0,``0,``0)">
      <summary>Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value0">Одно из искомых значений.</param>
      <param name="value1">Одно из искомых значений.</param>
      <param name="value2">Одно из искомых значений.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.LastIndexOfAny``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Выполняет поиск последнего индекса любого из указанных значений аналогичного вызову LastIndexOf несколько раз с помощью логического оператора ИЛИ.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="values">Набор значений для поиска.</param>
      <typeparam name="T">Тип диапазона и значений.</typeparam>
      <returns>Индекс последнего вхождения любого значения в диапазоне. Возвращает значение –1, если не найдено.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, перекрываются ли две последовательности только для чтения в памяти.</summary>
      <param name="span">Первая последовательность.</param>
      <param name="other">Вторая последовательность.</param>
      <typeparam name="T">Тип элементов в последовательности, доступной только для чтения.</typeparam>
      <returns>Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary>Определяет, перекрываются ли две последовательности только для чтения в памяти, и выводит смещение элементов.</summary>
      <param name="span">Первая последовательность.</param>
      <param name="other">Вторая последовательность.</param>
      <param name="elementOffset">При возврате из метода содержит смещение между <paramref name="span" /> и <paramref name="other" />.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, перекрываются ли диапазон и диапазон только для чтения в памяти.</summary>
      <param name="span">Сравниваемый диапазон.</param>
      <param name="other">Доступный только для чтения диапазон для сравнения.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Overlaps``1(System.Span{``0},System.ReadOnlySpan{``0},System.Int32@)">
      <summary>Определяет, перекрываются ли диапазон и диапазон только для чтения в памяти, и выводит смещение элементов.</summary>
      <param name="span">Сравниваемая первая последовательность.</param>
      <param name="other">Сравниваемая вторая последовательность.</param>
      <param name="elementOffset">При возврате из метода содержит смещение между <paramref name="span" /> и <paramref name="other" />.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Значение <see langword="true" />, если две последовательности перекрываются; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Reverse``1(System.Span{``0})">
      <summary>Изменяет порядок элементов во всем массиве на обратный.</summary>
      <param name="span">Диапазон для изменения порядка.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет относительный порядок двух последовательностей только для чтения путем сравнения их элементов с помощью IComparable{T}.CompareTo (T).</summary>
      <param name="span">Сравниваемая первая последовательность.</param>
      <param name="other">Сравниваемая вторая последовательность.</param>
      <typeparam name="T">Тип элементов в последовательности.</typeparam>
      <returns>Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:   — Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.   — Если 0, <paramref name="span" /> равно <paramref name="other" />.   — Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceCompareTo``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет относительный порядок диапазона и диапазона только для чтения путем сравнения их элементов с помощью IComparable{T}.CompareTo (T).</summary>
      <param name="span">Сравниваемый диапазон.</param>
      <param name="other">Доступный только для чтения диапазон для сравнения.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Целое число со знаком, представляющее относительный порядок <paramref name="span" /> и <paramref name="other" />:   — Если значение меньше 0, <paramref name="span" /> предшествует <paramref name="other" />.   — Если 0, <paramref name="span" /> равно <paramref name="other" />.   — Если значение больше 0, <paramref name="span" /> стоит после <paramref name="other" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, равны ли две последовательности только для чтения, сравнивая элементы с помощью IEquatable{T}.Equals (T).</summary>
      <param name="span">Сравниваемая первая последовательность.</param>
      <param name="other">Сравниваемая вторая последовательность.</param>
      <typeparam name="T">Тип элементов в последовательности.</typeparam>
      <returns>Значение <see langword="true" />, если две последовательности равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.SequenceEqual``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, равны ли диапазон и диапазон только для чтения, сравнивая элементы с помощью IEquatable{T}.Equals (T).</summary>
      <param name="span">Сравниваемый диапазон.</param>
      <param name="other">Доступный только для чтения диапазон для сравнения.</param>
      <typeparam name="T">Тип элементов в последовательности.</typeparam>
      <returns>Значение <see langword="true" />, если две последовательности равны, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Sort``1(System.Span{``0})">
      <summary>Сортирует элементы во всем <see cref="T:System.Span`1" />, используя реализацию <see cref="T:System.IComparable`1" /> каждого элемента <see cref="T:System.Span`1" /></summary>
      <param name="span">Диапазон памяти для сортировки.</param>
      <typeparam name="T">Тип элементов диапазона.</typeparam>
      <exception cref="T:System.InvalidOperationException">Один или несколько элементов в <paramref name="span" /> не реализуют интерфейс <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Sort``1(System.Span{``0},System.Comparison{``0})">
      <summary>Сортирует элементы во всем списке <see cref="T:System.Span`1" /> с использованием указанного <see cref="T:System.Comparison`1" />.</summary>
      <param name="span">Диапазон памяти для сортировки.</param>
      <param name="comparison">Метод, используемый при сравнении элементов.</param>
      <typeparam name="T">Тип элементов диапазона.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Sort``2(System.Span{``0},``1)">
      <summary>Сортирует элементы во всем <see cref="T:System.Span`1" /> с использованием <typeparamref name="TComparer" />.</summary>
      <param name="span">Диапазон памяти для сортировки.</param>
      <param name="comparer">Метод, используемый при сравнении элементов, или значение <see langword="null" /> для использования реализации интерфейса <see cref="T:System.IComparable`1" /> каждого элемента.</param>
      <typeparam name="T">Тип элементов диапазона.</typeparam>
      <typeparam name="TComparer">Тип компаратора, используемый для сравнения элементов.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение <see langword="null" />, и один или несколько элементов в <paramref name="span" /> не реализуют интерфейс <see cref="T:System.IComparable`1" />.</exception>
      <exception cref="T:System.ArgumentException">Реализация <paramref name="comparer" /> вызвала ошибку во время сортировки.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Sort``2(System.Span{``0},System.Span{``1})">
      <summary>Сортирует пару диапазонов (один диапазон с ключами, а второй с соответствующими элементами) на основе ключей в первом <see cref="T:System.Span`1" /> с использованием реализации <see cref="T:System.IComparable`1" /> каждого ключа.</summary>
      <param name="keys">Диапазон, содержащий ключи для сортировки.</param>
      <param name="items">Диапазон, содержащий элементы, соответствующие ключам в <paramref name="keys" />.</param>
      <typeparam name="TKey">Тип элементов диапазона ключей.</typeparam>
      <typeparam name="TValue">Тип элементов, занимаемых элементами.</typeparam>
      <exception cref="T:System.ArgumentException">Длина <paramref name="keys" /> не равна длине <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">Один или несколько элементов в <paramref name="keys" /> не реализуют интерфейс <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Sort``2(System.Span{``0},System.Span{``1},System.Comparison{``0})">
      <summary>Сортирует пару диапазонов (один диапазон с ключами, а второй с соответствующими элементами) на основе ключей в первом <see cref="T:System.Span`1" /> с использованием указанного сравнения.</summary>
      <param name="keys">Диапазон, содержащий ключи для сортировки.</param>
      <param name="items">Диапазон, содержащий элементы, соответствующие ключам в <paramref name="keys" />.</param>
      <param name="comparison">
        <see cref="T:System.Comparison`1" />, используемый при сравнении элементов.</param>
      <typeparam name="TKey">Тип элементов диапазона ключей.</typeparam>
      <typeparam name="TValue">Тип элементов, занимаемых элементами.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Длина <paramref name="keys" /> не равна длине <paramref name="items" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.Sort``3(System.Span{``0},System.Span{``1},``2)">
      <summary>Сортирует пару диапазонов (один диапазон с ключами, а второй с соответствующими элементами) на основе ключей в первом <see cref="T:System.Span`1" /> с использованием указанного компаратора.</summary>
      <param name="keys">Диапазон, содержащий ключи для сортировки.</param>
      <param name="items">Диапазон, содержащий элементы, соответствующие ключам в <paramref name="keys" />.</param>
      <param name="comparer">Реализация <see cref="T:System.Collections.Generic.IComparer`1" />, используемая при сравнении элементов, или значение <see langword="null" /> для использования реализации интерфейса <see cref="T:System.IComparable`1" /> каждого элемента.</param>
      <typeparam name="TKey">Тип элементов диапазона ключей.</typeparam>
      <typeparam name="TValue">Тип элементов, занимаемых элементами.</typeparam>
      <typeparam name="TComparer">Тип компаратора, используемый для сравнения элементов.</typeparam>
      <exception cref="T:System.ArgumentException">Длина <paramref name="keys" /> не равна длине <paramref name="items" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> имеет значение <see langword="null" />, и один или несколько элементов в <paramref name="keys" /> не реализуют интерфейс <see cref="T:System.IComparable`1" />.</exception>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char},System.StringComparison)">
      <summary>Определяет, начинается ли диапазон символов только для чтения с указанного значения при сравнении с использованием указанного значения <see cref="T:System.StringComparison" />.</summary>
      <param name="span">Исходный диапазон.</param>
      <param name="value">Последовательность, сравниваемая с началом исходного диапазона.</param>
      <param name="comparisonType">Значение перечисления, определяющее способ сравнения <paramref name="span" /> и <paramref name="value" />.</param>
      <returns>
        <see langword="true" />, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, отображается ли указанная последовательность в начале диапазона, доступного только для чтения.</summary>
      <param name="span">Искомый диапазон символов только для чтения.</param>
      <param name="value">Последовательность для поиска в начале <paramref name="span" />.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>
        <see langword="true" />, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.StartsWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Определяет, отображается ли указанная последовательность в начале диапазона.</summary>
      <param name="span">Искомый диапазон.</param>
      <param name="value">Последовательность для поиска в начале <paramref name="span" />.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>
        <see langword="true" />, если <paramref name="value" /> соответствует началу <paramref name="span" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLower(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary>Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в нижний регистр, используя правила учета регистра указанного языка и региональных параметров.</summary>
      <param name="source">Исходный диапазон.</param>
      <param name="destination">Целевой диапазон, содержащий преобразованные символы.</param>
      <param name="culture">Объект, задающий правила определения регистра для языка и региональных параметров.</param>
      <exception cref="T:System.InvalidOperationException">Исходный и целевой буферы перекрываются.</exception>
      <returns>Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToLowerInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary>Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в нижний регистр, используя правила учета регистра инвариантного языка и региональных параметров.</summary>
      <param name="source">Исходный диапазон.</param>
      <param name="destination">Целевой диапазон, содержащий преобразованные символы.</param>
      <exception cref="T:System.InvalidOperationException">Исходный и целевой буферы перекрываются.</exception>
      <returns>Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToUpper(System.ReadOnlySpan{System.Char},System.Span{System.Char},System.Globalization.CultureInfo)">
      <summary>Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в верхний регистр, используя правила учета регистра указанного языка и региональных параметров.</summary>
      <param name="source">Исходный диапазон.</param>
      <param name="destination">Целевой диапазон, содержащий преобразованные символы.</param>
      <param name="culture">Объект, задающий правила определения регистра для языка и региональных параметров.</param>
      <exception cref="T:System.InvalidOperationException">Исходный и целевой буферы перекрываются.</exception>
      <returns>Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
    </member>
    <member name="M:System.MemoryExtensions.ToUpperInvariant(System.ReadOnlySpan{System.Char},System.Span{System.Char})">
      <summary>Копирует символы из исходного диапазона в место назначения, преобразуя каждый символ в верхний регистр, используя правила учета регистра инвариантного языка и региональных параметров.</summary>
      <param name="source">Исходный диапазон.</param>
      <param name="destination">Целевой диапазон, содержащий преобразованные символы.</param>
      <exception cref="T:System.InvalidOperationException">Исходный и целевой буферы перекрываются.</exception>
      <returns>Количество символов, записанных в целевой диапазон. Если целевой диапазон слишком мал, возвращает значение –1.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Memory{System.Char})">
      <summary>Удаляет все начальные и конечные пробелы из области памяти символов.</summary>
      <param name="memory">Исходная память, из которой удаляются символы.</param>
      <returns>Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlyMemory{System.Char})">
      <summary>Удаляет все начальные и конечные пробелы из области памяти символов только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляются символы.</param>
      <returns>Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char})">
      <summary>Удаляет все начальные и конечные пробелы из диапазона символов только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>Удаляет все начальные и конечные вхождения указанного символа из диапазона символов, доступного только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляется символ.</param>
      <param name="trimChar">Указанный символ для поиска и удаления.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Удаляет все начальные и конечные вхождения набора символов, указанного в диапазоне только для чтения, из диапазона символов, доступного только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <param name="trimChars">Диапазон, содержащий набор символов для удаления.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim(System.Span{System.Char})">
      <summary>Удаляет все начальные и конечные пробелы из диапазона символов.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <returns>Диапазон усеченных символов.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},``0)">
      <summary>Удаляет все начальные и конечные вхождения указанного элемента из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в области памяти.</typeparam>
      <returns>Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в области памяти.</typeparam>
      <returns>Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},``0)">
      <summary>Удаляет все начальные и конечные вхождения указанного элемента из области памяти только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns>Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns>Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},``0)">
      <summary>Удаляет все начальные и конечные вхождения указанного элемента из диапазона только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns>Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns>Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},``0)">
      <summary>Удаляет все начальные и конечные вхождения указанного элемента из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.Trim``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные и конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Memory{System.Char})">
      <summary>Удаляет все конечные пробелы из области памяти символов.</summary>
      <param name="memory">Исходная память, из которой удаляются символы.</param>
      <returns>Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlyMemory{System.Char})">
      <summary>Удаляет все конечные пробелы из области памяти символов только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляются символы.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char})">
      <summary>Удаляет все конечные пробелы из диапазона символов только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>Удаляет все конечные вхождения указанного символа из диапазона только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляется символ.</param>
      <param name="trimChar">Указанный символ для поиска и удаления.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Удаляет все конечные вхождения набора символов, указанного в диапазоне только для чтения, из диапазона символов, доступного только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <param name="trimChars">Диапазон, содержащий набор символов для удаления.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd(System.Span{System.Char})">
      <summary>Удаляет все конечные пробелы из диапазона символов.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <returns>Диапазон усеченных символов.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},``0)">
      <summary>Удаляет все конечные вхождения указанного элемента из области памяти символов.</summary>
      <param name="memory">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в области памяти.</typeparam>
      <returns>Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в области памяти.</typeparam>
      <returns>Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},``0)">
      <summary>Удаляет все конечные вхождения указанного элемента из области памяти только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns>Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns>Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},``0)">
      <summary>Удаляет все конечные вхождения указанного элемента из диапазона только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns>Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns>Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},``0)">
      <summary>Удаляет все конечные вхождения указанного элемента из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimEnd``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все конечные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Memory{System.Char})">
      <summary>Удаляет все начальные пробелы из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляются символы.</param>
      <returns>Область памяти с усеченными символами.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlyMemory{System.Char})">
      <summary>Удаляет все начальные пробелы из области памяти только для чтения.</summary>
      <param name="memory">Исходная память, из которой удаляются символы.</param>
      <returns>Область памяти усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char})">
      <summary>Удаляет все начальные пробелы из диапазона только для чтения.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.Char)">
      <summary>Удаляет все начальные вхождения указанного символа из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляется символ.</param>
      <param name="trimChar">Указанный символ для поиска и удаления.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Удаляет все начальные вхождения набора символов, заданного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <param name="trimChars">Диапазон, содержащий набор символов для удаления.</param>
      <returns>Диапазон усеченных символов только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart(System.Span{System.Char})">
      <summary>Удаляет все начальные пробелы из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляются символы.</param>
      <returns>Диапазон усеченных символов.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},``0)">
      <summary>Удаляет все начальные вхождения указанного элемента из области памяти.</summary>
      <param name="memory">Исходная область памяти, из которой удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в области памяти.</typeparam>
      <returns>Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Memory{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в области памяти.</typeparam>
      <returns>Область усеченной памяти.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},``0)">
      <summary>Удаляет все начальные вхождения указанного элемента из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns>Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из области памяти.</summary>
      <param name="memory">Исходная память, из которой удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в области памяти, доступной только для чтения.</typeparam>
      <returns>Усеченная область памяти, доступная только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},``0)">
      <summary>Удаляет все начальные вхождения указанного элемента из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns>Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <returns>Усеченный диапазон, доступный только для чтения.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},``0)">
      <summary>Удаляет все начальные вхождения указанного элемента из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляется элемент.</param>
      <param name="trimElement">Указанный элемент для поиска и удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Усеченный диапазон.</returns>
    </member>
    <member name="M:System.MemoryExtensions.TrimStart``1(System.Span{``0},System.ReadOnlySpan{``0})">
      <summary>Удаляет все начальные вхождения набора элементов, указанного в диапазоне только для чтения, из диапазона.</summary>
      <param name="span">Исходный диапазон, из которого удаляются элементы.</param>
      <param name="trimElements">Диапазон, содержащий набор элементов для удаления.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Усеченный диапазон.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MemoryMarshal">
      <summary>Предоставляет методы для взаимодействия с объектами <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" /> и <see cref="T:System.ReadOnlySpan`1" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})">
      <summary>Приводит объект <see cref="T:System.ReadOnlySpan`1" /> одного примитивного типа (<paramref name="T" />) к <see langword="ReadOnlySpan&lt;Byte&gt;" />.</summary>
      <param name="span">Преобразуемый исходный срез.</param>
      <typeparam name="T">Тип элементов в диапазоне, доступном только для чтения.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.OverflowException">Свойство <see cref="P:System.ReadOnlySpan`1.Length" /> нового типа <see cref="T:System.ReadOnlySpan`1" /> будет превышать <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Массив с доступом только для чтения с типом <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})">
      <summary>Приводит объект <see cref="T:System.Span`1" /> одного примитивного типа (<paramref name="T" />) к <see langword="Span&lt;Byte&gt;" />.</summary>
      <param name="span">Преобразуемый исходный срез.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.OverflowException">Свойство <see cref="P:System.Span`1.Length" /> нового типа <see cref="T:System.Span`1" /> будет превышать <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Массив с типом <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})">
      <summary>Создание экземпляра <see cref="T:System.Memory`1" /> на основе <see cref="T:System.ReadOnlyMemory`1" />.</summary>
      <param name="memory">Буфер памяти с доступом только для чтения.</param>
      <typeparam name="T">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <returns>Блок памяти, который представляет ту же область памяти, что и <see cref="T:System.ReadOnlyMemory`1" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})">
      <summary>Повторно интерпретирует массив байтов только для чтения как ссылку только для чтения на структуру типа <paramref name="T" />.</summary>
      <param name="span">Повторно интерпретируемый массив с доступом только для чтения.</param>
      <typeparam name="T">Тип возвращаемой ссылки.</typeparam>
      <returns>Ссылка только для чтения на структуру типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})">
      <summary>Повторно интерпретирует массив байтов как ссылку на структуру типа <paramref name="T" />.</summary>
      <param name="span">Повторно интерпретируемая массив.</param>
      <typeparam name="T">Тип возвращаемой ссылки.</typeparam>
      <returns>Ссылка на структуру типа <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})">
      <summary>Приводит массив с доступом только для чтения с одним примитивным типом к массиву с доступом только для чтения с другим примитивным типом.</summary>
      <param name="span">Преобразуемый исходный срез.</param>
      <typeparam name="TFrom">Тип исходного диапазона.</typeparam>
      <typeparam name="TTo">Тип целевого диапазона.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> или <paramref name="TTo" /> содержит ссылки либо указатели.</exception>
      <returns>Преобразованный массив с доступом только для чтения.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})">
      <summary>Приводит массив одного примитивного типа к массиву другого примитивного типа.</summary>
      <param name="span">Преобразуемый исходный срез.</param>
      <typeparam name="TFrom">Тип исходного диапазона.</typeparam>
      <typeparam name="TTo">Тип целевого диапазона.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="TFrom" /> или <paramref name="TTo" /> содержит ссылки либо указатели.</exception>
      <returns>Преобразованный массив.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)">
      <summary>Создает новый буфер памяти размером, который соответствует части предварительно привязанного целевого массива с начальным индексом <paramref name="start" /> и количеством элементов <paramref name="length" />.</summary>
      <param name="array">Исходный массив с предварительной привязкой.</param>
      <param name="start">Индекс <paramref name="array" />, с которого определяется начало блока памяти.</param>
      <param name="length">Количество элементов, которые будут включены в блок памяти.</param>
      <typeparam name="T">Тип массива.</typeparam>
      <exception cref="T:System.ArrayTypeMismatchException">Параметр <paramref name="array" /> является ковариантным, и <paramref name="array" /> не обязательно будет иметь тип <paramref name="T[]" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Индекс <paramref name="start" /> или конечный индекс не входит в диапазон от 0 до <see cref="P:System.Array.Length" />.</exception>
      <returns>Блок памяти, содержащий указанные элементы <paramref name="array" />. Если <paramref name="array" /> имеет значение <see langword="null" />, а <paramref name="start" /> и <paramref name="length" /> — 0, метод возвращает экземпляр <see cref="T:System.Memory`1" /> со свойством <see cref="P:System.Memory`1.Length" />, равным 0.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)">
      <summary>Создает новый массив с доступом только для чтения в области памяти, которая соответствует части обычного управляемого объекта.</summary>
      <param name="reference">Ссылка на данные.</param>
      <param name="length">Количество элементов <paramref name="T" />, содержащихся в <paramref name="reference" />.</param>
      <typeparam name="T">Тип элементов данных.</typeparam>
      <returns>Массив с доступом только для чтения.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)">
      <summary>Создает массив в области памяти, которая соответствует части обычного управляемого объекта.</summary>
      <param name="reference">Ссылка на данные.</param>
      <param name="length">Количество элементов <paramref name="T" />, содержащихся в <paramref name="reference" />.</param>
      <typeparam name="T">Тип элементов данных.</typeparam>
      <returns>Массив.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetArrayDataReference``1(``0[])">
      <summary>Возвращает ссылку на нулевой элемент <paramref name="array" />. Если массив пуст, возвращает ссылку на то место, где находился бы нулевой элемент. Такая ссылка может использоваться для закрепления, но никогда не должна разыменовываться.</summary>
      <param name="array">Анализируемый массив.</param>
      <typeparam name="T">Тип элементов массива.</typeparam>
      <exception cref="T:System.NullReferenceException">
        <paramref name="array" /> имеет значение <see langword="null" />.</exception>
      <returns>Ссылка на нулевой элемент <paramref name="array" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})">
      <summary>Возвращает ссылку на элемент массива с доступом только для чтения с нулевым индексом.</summary>
      <param name="span">Массив с доступом только для чтения, из которого извлекается ссылка.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Ссылка на элемент с нулевым индексом.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})">
      <summary>Возвращает ссылку на элемент массива с нулевым индексом.</summary>
      <param name="span">Массив, из которого извлекается ссылка.</param>
      <typeparam name="T">Тип элементов в диапазоне.</typeparam>
      <returns>Ссылка на элемент с нулевым индексом.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})">
      <summary>Считывает структуру типа <param name="T" /> из массива байтов с доступом только для чтения.</summary>
      <param name="source">Массив с доступом только для чтения.</param>
      <typeparam name="T">Тип элемента, извлекаемого из диапазона, доступного только для чтения.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="source" /> меньше <paramref name="T" />.</exception>
      <returns>Структура, полученная из массива с доступом только для чтения.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})">
      <summary>Создает представление <see cref="T:System.Collections.Generic.IEnumerable`1" /> для указанного буфера памяти с доступом только для чтения.</summary>
      <param name="memory">Буфер памяти только для чтения.</param>
      <typeparam name="T">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <returns>Представление перечисляемого типа <paramref name="memory" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)">
      <summary>Предпринимается попытка получить сегмент массива из внутреннего буфера памяти с доступом только для чтения. Возвращаемое значение указывает на успешное выполнение операции.</summary>
      <param name="memory">Буфер памяти только для чтения.</param>
      <param name="segment">При возврате из метода содержит сегмент массива, полученный из внутреннего буфера памяти с доступом только для чтения. Если при выполнении метода произойдет сбой, метод вернет сегмент массива по умолчанию.</param>
      <typeparam name="T">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <returns>Если вызов метода выполнен успешно, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)">
      <summary>Предпринимается попытка получить <see cref="T:System.Buffers.MemoryManager`1" /> из внутреннего памяти буфера памяти с доступом только для чтения.</summary>
      <param name="memory">Буфер памяти с доступом только для чтения, для которого нужно получить объект диспетчера памяти.</param>
      <param name="manager">После возврата из метода содержится объект диспетчера <paramref name="memory" />.</param>
      <typeparam name="T">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <typeparam name="TManager">Тип <see cref="T:System.Buffers.MemoryManager`1" /> извлекаемого объекта.</typeparam>
      <returns>Если методу удалось получить объект диспетчера памяти, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)">
      <summary>Предпринимается попытка получить <see cref="T:System.Buffers.MemoryManager`1" /> (начальный индекс) из внутреннего буфера памяти с доступом только для чтения.</summary>
      <param name="memory">Буфер памяти с доступом только для чтения, для которого нужно получить объект диспетчера памяти.</param>
      <param name="manager">После возврата из метода содержится объект диспетчера <paramref name="memory" />.</param>
      <param name="start">После возврата из метода этот параметр указывает на смещение от начала <paramref name="manager" />, которое представляет <paramref name="memory" />.</param>
      <param name="length">После возврата из метода этот параметр указывает длину <paramref name="manager" />, которое представляет <paramref name="memory" />.</param>
      <typeparam name="T">Тип элементов в буфере памяти, доступном только для чтения.</typeparam>
      <typeparam name="TManager">Тип <see cref="T:System.Buffers.MemoryManager`1" /> извлекаемого объекта.</typeparam>
      <returns>Если метод выполнен успешно, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)">
      <summary>Предпринимает попытку получить базовую строку из <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</summary>
      <param name="memory">Память с доступом только для чтения, содержащая блок символов.</param>
      <param name="text">После возврата из метода этот параметр указывает на строку, содержащуюся в буфере памяти.</param>
      <param name="start">Начальное расположение в <paramref name="text" />.</param>
      <param name="length">Количество символов в <paramref name="text" />.</param>
      <returns>Если метод успешно извлекает базовую строку, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)">
      <summary>Пытается считать структуру типа <paramref name="T" /> из массива байтов только для чтения.</summary>
      <param name="source">Массив байтов с доступом только для чтения.</param>
      <param name="value">После возврата из метода этот параметр указывает на экземпляр <paramref name="T" />.</param>
      <typeparam name="T">Тип извлекаемой структуры.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <returns>Если метод успешно извлекает экземпляр структуры, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)">
      <summary>Предпринимается попытка записать структуру типа <paramref name="T" /> в массив байтов.</summary>
      <param name="destination">Массив байтов, который содержит структуру.</param>
      <param name="value">Структура, которая будет записана в массив.</param>
      <typeparam name="T">Тип структуры.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <returns>Если операция записи выполнена успешно, возвращается значение <see langword="true" />. В противном случае возвращается <see langword="false" />. Метод возвращает <see langword="false" />, если в массив не помещается <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)">
      <summary>Записывает структуру типа <paramref name="T" /> в массив байтов.</summary>
      <param name="destination">Массив байтов, который содержит структуру.</param>
      <param name="value">Структура, которая будет записана в массив.</param>
      <typeparam name="T">Тип структуры.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> содержит ссылки или указатели.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В <paramref name="destination" /> не помещается <paramref name="value" />.</exception>
    </member>
    <member name="T:System.Runtime.InteropServices.SequenceMarshal">
      <summary>Предоставляет коллекцию методов для взаимодействия с <see cref="T:System.Buffers.ReadOnlySequence`1" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetArray``1(System.Buffers.ReadOnlySequence{``0},System.ArraySegment{``0}@)">
      <summary>Возвращает сегмент массива из базовой последовательности, доступной только для чтения.</summary>
      <param name="sequence">Доступная только для чтения последовательность, из которой будет извлечен сегмент массива.</param>
      <param name="segment">Возвращаемый сегмент массива.</param>
      <typeparam name="T">Тип последовательности, доступной только для чтения.</typeparam>
      <returns>Значение <see langword="true" />, если можно извлечь сегмент массива; в противном случае — значение <see langword="false" /> и возвращается сегмент массива по умолчанию.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlyMemory``1(System.Buffers.ReadOnlySequence{``0},System.ReadOnlyMemory{``0}@)">
      <summary>Пытается получить доступную только для чтения память из указанной последовательности, доступной только для чтения.</summary>
      <param name="sequence">Доступная только для чтения последовательность, из которой будет извлечена память.</param>
      <param name="memory">Возвращенная память только для чтения типа T.</param>
      <typeparam name="T">Тип последовательности, доступной только для чтения.</typeparam>
      <returns>Значение <see langword="true" />, если можно получить доступную только для чтения память; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryGetReadOnlySequenceSegment``1(System.Buffers.ReadOnlySequence{``0},System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@,System.Buffers.ReadOnlySequenceSegment{``0}@,System.Int32@)">
      <summary>Пытается получить доступный только для чтения сегмент последовательности из указанной последовательности, доступной только для чтения.</summary>
      <param name="sequence">Доступная только для чтения последовательность, из которой будет извлечен сегмент последовательности только для чтения.</param>
      <param name="startSegment">Начальный сегмент последовательности только для чтения.</param>
      <param name="startIndex">Начальная позиция.</param>
      <param name="endSegment">Конечный сегмент последовательности только для чтения.</param>
      <param name="endIndex">Конечная позиция.</param>
      <typeparam name="T">Тип последовательности, доступной только для чтения.</typeparam>
      <returns>Значение <see langword="true" />, если можно получить доступный только для чтения сегмент последовательности; в противном случае —значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.SequenceMarshal.TryRead``1(System.Buffers.SequenceReader{System.Byte}@,``0@)">
      <summary>Пытается прочитать указанный тип из буфера. Использовать этот метод с произвольными структурами небезопасно — дополнительные сведения см. в примечаниях.</summary>
      <param name="reader">Ссылка на средство чтения последовательности.</param>
      <param name="value">Возвращаемое значение, если чтение прошло успешно. <paramref name="value" /> будет иметь значение <see langword="default" />, если завершится сбоем (из-за нехватки места).</param>
      <typeparam name="T">Тип значения.</typeparam>
      <returns>Значение <see langword="true" />, если попытка чтения была успешной; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.SequencePosition">
      <summary>Представляет расположение в несмежном наборе памяти. Свойства этого типа должны интерпретироваться только типом, который его создал.</summary>
    </member>
    <member name="M:System.SequencePosition.#ctor(System.Object,System.Int32)">
      <summary>Инициализирует новый экземпляр структуры <see cref="T:System.SequencePosition" />.</summary>
      <param name="object">Несмежный набор памяти.</param>
      <param name="integer">Позиция в <paramref name="object" />.</param>
    </member>
    <member name="M:System.SequencePosition.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли текущий экземпляр другому объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если значение <paramref name="obj" /> имеет тип <see cref="T:System.SequencePosition" /> и равно текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.SequencePosition.Equals(System.SequencePosition)">
      <summary>Определяет равенство текущего экземпляра и другого объекта <see cref="T:System.SequencePosition" />.</summary>
      <param name="other">Расположение последовательности, сравниваемое с текущим экземпляром.</param>
      <returns>
        <see langword="true" />, если два экземпляра равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.SequencePosition.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.SequencePosition.GetInteger">
      <summary>Возвращает целую часть <see cref="T:System.SequencePosition" />.</summary>
      <returns>Целая часть этой позиции последовательности.</returns>
    </member>
    <member name="M:System.SequencePosition.GetObject">
      <summary>Возвращает часть объекта <see cref="T:System.SequencePosition" />.</summary>
      <returns>Объектная часть этой позиции последовательности.</returns>
    </member>
    <member name="T:System.Text.EncodingExtensions">
      <summary>Предоставляет методы расширения для типов кодирования, такие как <see cref="T:System.Text.Encoding" />, <see cref="T:System.Text.Encoder" /> и <see cref="T:System.Text.Decoder" />.</summary>
    </member>
    <member name="M:System.Text.EncodingExtensions.Convert(System.Text.Decoder,System.Buffers.ReadOnlySequence{System.Byte}@,System.Buffers.IBufferWriter{System.Char},System.Boolean,System.Int64@,System.Boolean@)">
      <summary>Преобразует <see cref="T:System.Buffers.ReadOnlySequence`1" /> в символы в кодировке UTF-16 и записывает результат в <paramref name="writer" />.</summary>
      <param name="decoder">Экземпляр декодера, который может преобразовывать байты в значения <see langword="char" />.</param>
      <param name="bytes">Последовательность байтов для декодирования.</param>
      <param name="writer">Буфер, в который будут записаны декодированные символы.</param>
      <param name="flush">Имеет значение <see langword="true" />, если данные больше не нужно преобразовывать, или значение <see langword="false" /> в противном случае.</param>
      <param name="charsUsed">При возврате из этого метода содержит количество символов, записанных в <paramref name="writer" />.</param>
      <param name="completed">При возврате из этого метода содержит <see langword="true" />, если <paramref name="decoder" /> не содержит внутреннего состояния "частично выполнено", или <see langword="false" /> в противном случае.
Если <paramref name="flush" /> имеет значение <see langword="true" />, этот параметр при возврате из метода всегда имеет значение <see langword="true" />.</param>
      <exception cref="T:System.Text.DecoderFallbackException">
        <paramref name="bytes" /> содержит данные, которые не могут быть декодированы, а при обнаружении таких данных генерируется <paramref name="decoder" />.</exception>
    </member>
    <member name="M:System.Text.EncodingExtensions.Convert(System.Text.Decoder,System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Char},System.Boolean,System.Int64@,System.Boolean@)">
      <summary>Преобразует <see cref="T:System.ReadOnlySpan`1" /> в символы с помощью <paramref name="decoder" /> и записывает результат в <paramref name="writer" />.</summary>
      <param name="decoder">Экземпляр декодера, который может преобразовывать байты в значения <see langword="char" />.</param>
      <param name="bytes">Последовательность байтов для декодирования.</param>
      <param name="writer">Буфер, в который будут записаны декодированные символы.</param>
      <param name="flush">Имеет значение <see langword="true" />, если данные больше не нужно преобразовывать, или значение <see langword="false" /> в противном случае.</param>
      <param name="charsUsed">При возврате из этого метода содержит количество <see langword="char" />, записанных в <paramref name="writer" />.</param>
      <param name="completed">При возврате из этого метода содержит <see langword="true" />, если <paramref name="decoder" /> не содержит внутреннего состояния "частично выполнено", или <see langword="false" /> в противном случае.
Если <paramref name="flush" /> имеет значение <see langword="true" />, этот параметр при возврате из метода всегда имеет значение <see langword="true" />.</param>
      <exception cref="T:System.Text.DecoderFallbackException">
        <paramref name="bytes" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="decoder" />.</exception>
    </member>
    <member name="M:System.Text.EncodingExtensions.Convert(System.Text.Encoder,System.Buffers.ReadOnlySequence{System.Char}@,System.Buffers.IBufferWriter{System.Byte},System.Boolean,System.Int64@,System.Boolean@)">
      <summary>Преобразует <see cref="T:System.Buffers.ReadOnlySequence`1" /> в закодированные байты и записывает результат в <paramref name="writer" />.</summary>
      <param name="encoder">Экземпляр кодировщика, который может преобразовывать значения <see langword="char" /> в байты.</param>
      <param name="chars">Последовательность символов для кодирования.</param>
      <param name="writer">Буфер, в который будут записаны закодированные байты.</param>
      <param name="flush">Имеет значение <see langword="true" />, если данные больше не нужно преобразовывать, или значение <see langword="false" /> в противном случае.</param>
      <param name="bytesUsed">При возврате из этого метода содержит количество <see langword="byte" />, записанных в <paramref name="writer" />.</param>
      <param name="completed">При возврате этого метода содержит <see langword="true" />, если были преобразованы все входящие данные вплоть до <paramref name="bytesUsed" />, или <see langword="false" /> в противном случае. Если <paramref name="flush" /> имеет значение <see langword="true" />, этот параметр при возврате из метода всегда имеет значение <see langword="true" />.</param>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="chars" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="encoder" />.</exception>
    </member>
    <member name="M:System.Text.EncodingExtensions.Convert(System.Text.Encoder,System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Byte},System.Boolean,System.Int64@,System.Boolean@)">
      <summary>Преобразует <see cref="T:System.ReadOnlySpan`1" /> в байты с помощью <paramref name="encoder" /> и записывает результат в <paramref name="writer" />.</summary>
      <param name="encoder">Экземпляр кодировщика, который может преобразовывать значения <see langword="char" /> в байты.</param>
      <param name="chars">Последовательность символов для кодирования.</param>
      <param name="writer">Буфер, в который будут записаны закодированные байты.</param>
      <param name="flush">Имеет значение <see langword="true" />, если данные больше не нужно преобразовывать, или значение <see langword="false" /> в противном случае.</param>
      <param name="bytesUsed">При возврате из этого метода содержит количество <see langword="byte" />, записанных в <paramref name="writer" />.</param>
      <param name="completed">При возврате из этого метода содержит <see langword="true" />, если <paramref name="encoder" /> не содержит внутреннего состояния "частично выполнено", или <see langword="false" /> в противном случае.
Если <paramref name="flush" /> имеет значение <see langword="true" />, этот параметр при возврате из метода всегда имеет значение <see langword="true" />.</param>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="chars" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="encoder" />.</exception>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@)">
      <summary>Кодирует указанный объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> в массив <see cref="T:System.Byte" />, используя указанную кодировку <see cref="T:System.Text.Encoding" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат кодирования данных в <paramref name="chars" />.</param>
      <param name="chars">Последовательность, которую необходимо закодировать в байты.</param>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="chars" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Массив <see cref="T:System.Byte" />, который представляет закодированное содержимое <paramref name="chars" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@,System.Buffers.IBufferWriter{System.Byte})">
      <summary>Декодирует указанный объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> в <see langword="byte" /> с использованием указанной кодировки <see cref="T:System.Text.Encoding" /> и записывает результат в <paramref name="writer" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат кодирования данных в <paramref name="chars" />.</param>
      <param name="chars">Объект <see cref="T:System.Buffers.ReadOnlySequence`1" />, содержимое которого должно быть закодировано.</param>
      <param name="writer">Буфер, в который будут записаны закодированные байты.</param>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="chars" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Число байтов, записанных в <paramref name="writer" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Char}@,System.Span{System.Byte})">
      <summary>Кодирует указанный объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> в <see langword="byte" /> с использованием указанной кодировки <see cref="T:System.Text.Encoding" /> и выводит результат в <paramref name="bytes" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат кодирования данных в <paramref name="chars" />.</param>
      <param name="chars">Последовательность, которую необходимо закодировать в байты.</param>
      <param name="bytes">Буфер назначения, в который будут записаны закодированные байты.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" /> недостаточно велик для хранения <paramref name="chars" /> в закодированном формате.</exception>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="chars" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Число байтов, записанных в <paramref name="bytes" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetBytes(System.Text.Encoding,System.ReadOnlySpan{System.Char},System.Buffers.IBufferWriter{System.Byte})">
      <summary>Кодирует указанный объект <see cref="T:System.ReadOnlySpan`1" /> в <see langword="byte" /> с использованием указанной кодировки <see cref="T:System.Text.Encoding" /> и записывает результат в <paramref name="writer" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат кодирования данных в <paramref name="chars" />.</param>
      <param name="chars">Последовательность, которую необходимо закодировать в байты.</param>
      <param name="writer">Буфер, в который будут записаны закодированные байты.</param>
      <exception cref="T:System.Text.EncoderFallbackException">
        <paramref name="chars" /> содержит данные, которые не могут быть закодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Число байтов, записанных в <paramref name="writer" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Buffers.IBufferWriter{System.Char})">
      <summary>Декодирует указанный объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> в <see langword="char" /> с использованием указанной кодировки <see cref="T:System.Text.Encoding" /> и записывает результат в <paramref name="writer" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат декодирования данных в <paramref name="bytes" />.</param>
      <param name="bytes">Последовательность, байты которой нужно декодировать.</param>
      <param name="writer">Буфер, в который будут записаны декодированные символы.</param>
      <exception cref="T:System.Text.DecoderFallbackException">
        <paramref name="bytes" /> содержит данные, которые не могут быть декодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Число символов, записанных в <paramref name="writer" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@,System.Span{System.Char})">
      <summary>Декодирует указанный объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> в <see langword="char" /> с использованием указанной кодировки <see cref="T:System.Text.Encoding" /> и выводит результат в <paramref name="chars" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат кодирования данных в <paramref name="bytes" />.</param>
      <param name="bytes">Последовательность для декодирования символов.</param>
      <param name="chars">Буфер назначения, в который будут записаны декодированные символы.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="chars" /> недостаточно велик для хранения <paramref name="bytes" /> в закодированном формате.</exception>
      <exception cref="T:System.Text.DecoderFallbackException">
        <paramref name="bytes" /> содержит данные, которые не могут быть декодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Число символов, записанных в <paramref name="chars" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetChars(System.Text.Encoding,System.ReadOnlySpan{System.Byte},System.Buffers.IBufferWriter{System.Char})">
      <summary>Декодирует указанный объект <see cref="T:System.ReadOnlySpan`1" /> в <see langword="char" /> с использованием указанной кодировки <see cref="T:System.Text.Encoding" /> и записывает результат в <paramref name="writer" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат декодирования данных в <paramref name="bytes" />.</param>
      <param name="bytes">Диапазон байтов для декодирования.</param>
      <param name="writer">Буфер, в который будут записаны декодированные символы.</param>
      <exception cref="T:System.Text.DecoderFallbackException">
        <paramref name="bytes" /> содержит данные, которые не могут быть декодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Число символов, записанных в <paramref name="writer" />.</returns>
    </member>
    <member name="M:System.Text.EncodingExtensions.GetString(System.Text.Encoding,System.Buffers.ReadOnlySequence{System.Byte}@)">
      <summary>Декодирует указанный объект <see cref="T:System.Buffers.ReadOnlySequence`1" /> в <see cref="T:System.String" />, используя указанную кодировку <see cref="T:System.Text.Encoding" />.</summary>
      <param name="encoding">Кодировка, которая представляет формат кодирования данных в <paramref name="bytes" />.</param>
      <param name="bytes">Последовательность для декодирования символов.</param>
      <exception cref="T:System.Text.DecoderFallbackException">
        <paramref name="bytes" /> содержит данные, которые не могут быть декодированы, а при обнаружении таких данных генерируется <paramref name="encoding" />.</exception>
      <returns>Объект <see cref="T:System.String" />, который представляет декодированное содержимое <paramref name="bytes" />.</returns>
    </member>
    <member name="T:System.Text.SpanRuneEnumerator">
      <summary>Предоставляет перечислитель для значений <see cref="T:System.Text.Rune" />, представленных диапазоном текста в кодировке UTF-16.</summary>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.GetEnumerator">
      <summary>Возвращает текущий экземпляр перечислителя.</summary>
      <returns>Текущий экземпляр перечислителя.</returns>
    </member>
    <member name="M:System.Text.SpanRuneEnumerator.MoveNext">
      <summary>Перемещает перечислитель к следующему элементу <see cref="T:System.Text.Rune" /> диапазона.</summary>
      <returns>Значение <see langword="true" />, если перечислитель успешно перемещен к следующему элементу. Значение <see langword="false" />, если достигнут конец диапазона.</returns>
    </member>
    <member name="P:System.Text.SpanRuneEnumerator.Current">
      <summary>Возвращает <see cref="T:System.Text.Rune" /> в текущем положении перечислителя.</summary>
      <returns>
        <see cref="T:System.Text.Rune" /> в текущем положении перечислителя.</returns>
    </member>
  </members>
</doc>
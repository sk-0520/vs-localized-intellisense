<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>封裝記憶體位置以儲存區域資料。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>確認釋出資源，並在記憶體回收行程回收 <see cref="T:System.LocalDataStoreSlot" /> 物件時執行其他清除作業。</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>指定 <see cref="T:System.Threading.Thread" /> 的 Apartment 狀態。</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <see cref="T:System.Threading.Thread" /> 會建立並且輸入多執行緒 Apartment。</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <see cref="T:System.Threading.Thread" /> 會建立並且輸入單一執行緒 Apartment。</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>
        <see cref="P:System.Threading.Thread.ApartmentState" /> 屬性尚未設定。</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>提供用來在目前執行緒上設定及擷取壓縮堆疊的方法。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>從目前的執行緒擷取壓縮堆疊。</summary>
      <returns>
        <see cref="T:System.Threading.CompressedStack" /> 物件。</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>建立目前壓縮堆疊的複本。</summary>
      <returns>
        <see cref="T:System.Threading.CompressedStack" /> 物件，表示目前的壓縮堆疊。</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>取得目前執行緒的壓縮堆疊。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫鏈結中的呼叫端沒有存取 Unmanaged 程式碼的使用權限。  
  
-或- 
<see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> 的要求失敗。</exception>
      <returns>目前執行緒的 <see cref="T:System.Threading.CompressedStack" />。</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將具有邏輯內容資訊的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，設定為需要重新建立此執行內容的執行個體。</summary>
      <param name="info">要填入序列化資訊的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 結構，表示序列化的目的內容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>在目前執行緒上的指定壓縮堆疊中執行方法。</summary>
      <param name="compressedStack">要設定的 <see cref="T:System.Threading.CompressedStack" />。</param>
      <param name="callback">
        <see cref="T:System.Threading.ContextCallback" />，表示要在指定安全性內容中執行的方法。</param>
      <param name="state">要傳遞至回呼 (Callback) 方法的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>代表在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</summary>
      <param name="obj">物件，包含執行緒程序的資料。</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>可建立和控制執行緒，設定執行緒的優先權，並取得它的狀態。</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>初始化 <see cref="T:System.Threading.Thread" /> 類別的新執行個體，並指定委派，讓物件可以在執行緒啟動時傳遞到執行緒。</summary>
      <param name="start">委派，代表在這個執行緒開始執行時要叫用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Thread" /> 類別的新執行個體，指定委派，讓物件可以在執行緒啟動時傳遞到執行緒，並指定執行緒的堆疊大小上限。</summary>
      <param name="start">
        <see cref="T:System.Threading.ParameterizedThreadStart" /> 委派，代表在這個執行緒開始執行時要叫用的方法。</param>
      <param name="maxStackSize">執行緒使用的最大堆疊大小 (以位元組為單位)，或是 0，使用可執行檔標頭中指定的預設最大堆疊大小。  
  
重要資訊：對於部分信任的程式碼，如果 <paramref name="maxStackSize" /> 大於預設堆疊大小，則會加以忽略。 不會有例外狀況擲回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> 小於零。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>初始化 <see cref="T:System.Threading.Thread" /> 類別的新執行個體。</summary>
      <param name="start">
        <see cref="T:System.Threading.ThreadStart" /> 委派，代表在這個執行緒開始執行時要叫用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Thread" /> 類別的新執行個體，並指定執行緒的堆疊大小上限。</summary>
      <param name="start">
        <see cref="T:System.Threading.ThreadStart" /> 委派，代表在這個執行緒開始執行時要叫用的方法。</param>
      <param name="maxStackSize">執行緒使用的最大堆疊大小 (以位元組為單位)，或是 0，使用可執行檔標頭中指定的預設最大堆疊大小。  
  
重要資訊：對於部分信任的程式碼，如果 <paramref name="maxStackSize" /> 大於預設堆疊大小，則會加以忽略。 不會有例外狀況擲回。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> 小於零。</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>於被叫用的所在執行緒中引發 <see cref="T:System.Threading.ThreadAbortException" />，開始處理執行緒的結束作業。 呼叫這個方法通常會結束執行緒。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在所有情況中。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.Threading.ThreadStateException">要中止的執行緒目前已暫止。</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>於被叫用的所在執行緒中引發 <see cref="T:System.Threading.ThreadAbortException" />，開始結束執行緒的處理作業，同時也提供執行緒結束的相關例外狀況資訊。 呼叫這個方法通常會結束執行緒。</summary>
      <param name="stateInfo">包含特定應用程式資訊 (例如狀態) 的物件，正在中止的執行緒可以使用這個物件。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在所有情況中。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.Threading.ThreadStateException">要中止的執行緒目前已暫止。</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>在所有的執行緒上配置未命名的資料位置。 為獲得較佳的效能，請改用以 <see cref="T:System.ThreadStaticAttribute" /> 屬性標示的欄位。</summary>
      <returns>在所有執行緒上已配置的具名資料位置。</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>在所有的執行緒上配置命名的資料位置。 為獲得較佳的效能，請改用以 <see cref="T:System.ThreadStaticAttribute" /> 屬性標示的欄位。</summary>
      <param name="name">要配置之資料插槽的名稱。</param>
      <exception cref="T:System.ArgumentException">具有指定名稱的具名資料位置已存在。</exception>
      <returns>在所有執行緒上已配置的具名資料位置。</returns>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>通知主機在即將執行的程式碼區域中，執行緒中止或未處理例外狀況的影響，可能會危及應用程式定義域中的其他工作。</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>通知主機 Managed 程式碼即將執行指令，而這些指令相依於目前實體作業系統執行緒的識別 (Identity)。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>關閉目前執行緒之執行階段可呼叫包裝函式 (RCW) 的自動清除功能。</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>通知主機在即將執行的程式碼區域中，執行緒中止或未處理例外狀況影響的對象只限於目前的工作。</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>通知主機 Managed 程式碼已完成執行指令，而這些指令相依於目前實體作業系統執行緒的識別。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>確認釋出資源，並在記憶體回收行程回收 <see cref="T:System.Threading.Thread" /> 物件時執行其他清除作業。</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>排除處理序中所有執行緒的名稱和位置之間的關聯。 為獲得較佳的效能，請改用以 <see cref="T:System.ThreadStaticAttribute" /> 屬性標示的欄位。</summary>
      <param name="name">要釋放之資料插槽的名稱。</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>傳回表示 Apartment 狀態的 <see cref="T:System.Threading.ApartmentState" /> 值。</summary>
      <returns>其中一個 <see cref="T:System.Threading.ApartmentState" /> 值，表示 Managed 執行緒的 Apartment 狀態。 預設為 <see cref="F:System.Threading.ApartmentState.Unknown" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>傳回 <see cref="T:System.Threading.CompressedStack" /> 物件，可以用來擷取目前執行緒的堆疊。</summary>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
      <returns>無。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId">
      <summary>取得用來指出目前執行緒正在哪個處理器上執行的識別碼。</summary>
      <returns>代表已快取之處理器識別碼的整數。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>從目前執行緒上、目前執行緒之目前定義域中的指定位置擷取數值。 為獲得較佳的效能，請改用以 <see cref="T:System.ThreadStaticAttribute" /> 屬性標示的欄位。</summary>
      <param name="slot">要從其中取得值的 <see cref="T:System.LocalDataStoreSlot" />。</param>
      <returns>擷取的數值。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>傳回目前執行緒正在其中執行的目前定義域。</summary>
      <returns>
        <see cref="T:System.AppDomain" />，代表執行中的執行緒目前的應用程式定義域。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>傳回唯一的應用程式定義域識別項。</summary>
      <returns>唯一識別應用程式定義域的 32 位元帶正負號的整數 (Signed Integer)。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>傳回目前執行緒的雜湊碼。</summary>
      <returns>整數雜湊碼值。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>尋找具名的資料位置。 為獲得較佳的效能，請改用以 <see cref="T:System.ThreadStaticAttribute" /> 屬性標示的欄位。</summary>
      <param name="name">本機資料位置的名稱。</param>
      <returns>為這個執行緒配置的 <see cref="T:System.LocalDataStoreSlot" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>中斷處於 <see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> 執行緒狀態的執行緒。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有合適的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>封鎖呼叫執行緒，直到此執行個體所代表的執行緒終止為止，但仍會繼續執行標準的 COM 與 <see langword="SendMessage" /> 提取作業。</summary>
      <exception cref="T:System.Threading.ThreadStateException">呼叫端嘗試聯結處於 <see cref="F:System.Threading.ThreadState.Unstarted" /> 狀態的執行緒。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">執行緒在等待時中斷。</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>封鎖呼叫執行緒，直到此執行個體代表的執行緒終止或超過指定的時間為止，但仍繼續執行標準的 COM 與 SendMessage 提取作業。</summary>
      <param name="millisecondsTimeout">等候執行緒終止的毫秒數。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 的值為負數，且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> (以毫秒為單位)。</exception>
      <exception cref="T:System.Threading.ThreadStateException">無法啟動此執行緒。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> 小於 -1 (Timeout.Infinite)。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">執行緒在等待時中斷。</exception>
      <returns>如果執行緒已經終止，為 <see langword="true" />；如果 <see langword="false" /> 參數指定的時間量已經過去，而執行緒還沒有終止，則為 <paramref name="millisecondsTimeout" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>封鎖呼叫執行緒，直到此執行個體代表的執行緒終止或超過指定的時間為止，但仍繼續執行標準的 COM 與 SendMessage 提取作業。</summary>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />，設定為等候執行緒終止的時間量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="timeout" /> 為負數且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> 毫秒，或大於 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
      <exception cref="T:System.Threading.ThreadStateException">呼叫端嘗試聯結處於 <see cref="F:System.Threading.ThreadState.Unstarted" /> 狀態的執行緒。</exception>
      <returns>如果執行緒終止了，為 <see langword="true" />；如果 <see langword="false" /> 參數指定的時間量已經過去，而執行緒還沒有終止，則為 <paramref name="timeout" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>同步處理記憶體存取，如下所示：執行目前執行緒的處理器無法以下列方式重新排列指示：呼叫 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 之前的記憶體存取在呼叫 <see cref="M:System.Threading.Thread.MemoryBarrier" /> 後的記憶體存取之後執行。</summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>取消為目前執行緒要求的 <see cref="M:System.Threading.Thread.Abort(System.Object)" />。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在所有情況中。</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> 不是在目前執行緒上所叫用。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有目前執行緒的必要安全性權限。</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>繼續已暫止的執行緒。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在所有情況中。</exception>
      <exception cref="T:System.Threading.ThreadStateException">執行緒未啟動、已無作用，或不是處於暫停狀態。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有合適的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>在執行緒啟動之前設定其 Apartment 狀態。</summary>
      <param name="state">新的 Apartment 狀態。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在 macOS 和 Linux 上的所有情況中。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 的 Apartment 狀態無效。</exception>
      <exception cref="T:System.Threading.ThreadStateException">已經啟動執行緒。</exception>
      <exception cref="T:System.InvalidOperationException">Apartment 狀態已經初始化。</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>將擷取的 <see cref="T:System.Threading.CompressedStack" /> 套用到目前的執行緒。</summary>
      <param name="stack">要套用到目前執行緒的 <see cref="T:System.Threading.CompressedStack" /> 物件。</param>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>針對那個執行緒目前的定義域，在目前執行之執行緒上的指定位置中設定資料。 為獲得較佳的效能，請改用以 <see cref="T:System.ThreadStaticAttribute" /> 屬性標示的欄位。</summary>
      <param name="slot">要在其中設定數值的 <see cref="T:System.LocalDataStoreSlot" />。</param>
      <param name="data">要設定的值。</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>在指定的毫秒數內暫止目前的執行緒。</summary>
      <param name="millisecondsTimeout">暫止執行緒的毫秒數。 如果 <paramref name="millisecondsTimeout" /> 引數的值為零，則執行緒會將其剩餘的時間配量讓與準備好要執行的任何同等優先權執行緒。 如果沒有其他準備好要執行的同等優先權執行緒，則目前執行緒的執行不會暫停。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">逾時值為負且不等於 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>在指定長度的時間內暫止目前的執行緒。</summary>
      <param name="timeout">暫止執行緒的時間長度。 如果 <paramref name="timeout" /> 引數的值為 <see cref="F:System.TimeSpan.Zero" />，則執行緒會將其剩餘的時間配量讓與準備好要執行的任何同等優先權執行緒。 如果沒有其他準備好要執行的同等優先權執行緒，則目前執行緒的執行不會暫停。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">值 <paramref name="timeout" /> 為負數且不等於 <see cref="F:System.Threading.Timeout.Infinite" /> 毫秒，或大於 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>造成執行緒等候 <paramref name="iterations" /> 參數定義的次數。</summary>
      <param name="iterations">32 位元帶正負號的整數，定義執行緒要等候多久。</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>造成作業系統將目前執行個體的狀態變更為 <see cref="F:System.Threading.ThreadState.Running" />。</summary>
      <exception cref="T:System.Threading.ThreadStateException">已經啟動執行緒。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可用來啟動這個執行緒。</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>使作業系統將目前執行個體的狀態改成 <see cref="F:System.Threading.ThreadState.Running" />，並選擇性地提供物件，在物件中包含執行緒執行之方法所要使用的資料。</summary>
      <param name="parameter">物件，包含執行緒執行之方法所要使用的資料。</param>
      <exception cref="T:System.Threading.ThreadStateException">已經啟動執行緒。</exception>
      <exception cref="T:System.OutOfMemoryException">沒有足夠的記憶體可用來啟動這個執行緒。</exception>
      <exception cref="T:System.InvalidOperationException">這個執行緒是使用 <see cref="T:System.Threading.ThreadStart" /> 委派建立，而非 <see cref="T:System.Threading.ParameterizedThreadStart" /> 委派。</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>將執行緒暫止；或者如果執行緒已經暫止，則沒有影響。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在所有情況中。</exception>
      <exception cref="T:System.Threading.ThreadStateException">執行緒未啟動或無作用。</exception>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有合適的 <see cref="T:System.Security.Permissions.SecurityPermission" />。</exception>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>在執行緒啟動之前設定其 Apartment 狀態。</summary>
      <param name="state">新的 Apartment 狀態。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 和更新版本以及 .NET Core：在 macOS 和 Linux 上的所有情況中。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 的 Apartment 狀態無效。</exception>
      <exception cref="T:System.Threading.ThreadStateException">執行緒曾啟動但已終止，或未在執行緒執行時從執行緒的內容中發出呼叫。</exception>
      <returns>如果已設定 Apartment 狀態，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>讀取欄位值。 值是由電腦中的任意處理器最新寫入的，與處理器的數目或處理器快取的狀態無關。</summary>
      <param name="address">要讀取的欄位。</param>
      <returns>由任意處理器寫入欄位的最新值。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>立即將值寫入欄位，讓電腦中的所有處理器都可以看到這個值。</summary>
      <param name="address">要寫入值的欄位。</param>
      <param name="value">要寫入的值。</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>造成呼叫執行緒執行目前處理器上已就緒可執行的其他執行緒。 作業系統會選擇要執行的執行緒。</summary>
      <returns>如果作業系統切換為執行其他執行緒，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>取得或設定這個執行緒的 Apartment 狀態。</summary>
      <exception cref="T:System.ArgumentException">已嘗試將此屬性狀態設定為無效 Apartment 狀態 (單一執行緒 Apartment (<see langword="STA" />) 或多執行緒 Apartment (<see langword="MTA" />) 以外的狀態)。</exception>
      <returns>其中一個 <see cref="T:System.Threading.ApartmentState" /> 值。 初始值為 <see langword="Unknown" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>取得或設定目前執行緒的文化特性 (Culture)。</summary>
      <exception cref="T:System.ArgumentNullException">該屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">僅限 .NET Core：不支援從另一個執行緒讀取或寫入執行緒的文化特性。</exception>
      <returns>表示目前執行緒之文化特性的物件。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>取得或設定執行緒目前的原則 (角色架構安全性之用)。</summary>
      <exception cref="T:System.Security.SecurityException">呼叫端沒有設定主體的必要權限。</exception>
      <returns>
        <see cref="T:System.Security.Principal.IPrincipal" /> 值，代表安全性的內容。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>取得目前執行的執行緒。</summary>
      <returns>
        <see cref="T:System.Threading.Thread" />，是目前執行之執行緒的表示。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>取得或設定資源管理員目前用以在執行階段查詢特定文化特性資源所用的文化特性。</summary>
      <exception cref="T:System.ArgumentNullException">該屬性設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此屬性設為無法用來尋找資源檔的文化特性名稱。 資源檔名稱只可以包含字母、數字、連字號或底線。</exception>
      <exception cref="T:System.InvalidOperationException">僅限 .NET Core：不支援從另一個執行緒讀取或寫入執行緒的文化特性。</exception>
      <returns>表示目前文化特性的物件。</returns>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>取得 <see cref="T:System.Threading.ExecutionContext" /> 物件，包含目前執行緒各種內容的相關資訊。</summary>
      <returns>
        <see cref="T:System.Threading.ExecutionContext" /> 物件，合併目前執行緒的內容資訊。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>取得值，指出目前執行緒的執行狀態。</summary>
      <returns>如果這個執行緒已經啟動但還沒有正常終止或者中止，則為<see langword="true" /> ，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>取得或設定值，指出執行緒是不是背景執行緒。</summary>
      <exception cref="T:System.Threading.ThreadStateException">執行緒已無作用</exception>
      <returns>如果這個執行緒是背景執行緒或者會成為背景執行緒，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>取得值，指出執行緒是否屬於 Managed 執行緒集區。</summary>
      <returns>
        <see langword="true" />，表示這個執行緒屬於 Managed 執行緒集區，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>取得目前 Managed 執行緒的唯一識別項。</summary>
      <returns>整數，表示這個 Managed 執行緒的唯一識別項。</returns>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>取得或設定執行緒的名稱。</summary>
      <exception cref="T:System.InvalidOperationException">要求了一組作業，但是早已設定了 <see langword="Name" /> 屬性。</exception>
      <returns>含有執行緒名稱的字串；如果沒有設定名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>取得或設定值，指出執行緒的排程優先權。</summary>
      <exception cref="T:System.Threading.ThreadStateException">此執行緒已達到最終狀態，例如 <see cref="F:System.Threading.ThreadState.Aborted" />。</exception>
      <exception cref="T:System.ArgumentException">針對設定作業指定的值不是有效的 <see cref="T:System.Threading.ThreadPriority" /> 值。</exception>
      <returns>其中一個 <see cref="T:System.Threading.ThreadPriority" /> 值。 預設值是 <see cref="F:System.Threading.ThreadPriority.Normal" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>取得數值，包含目前執行緒的狀態。</summary>
      <returns>其中一個 <see cref="T:System.Threading.ThreadState" /> 數值，指出目前執行緒的狀態。 初始值為 <see cref="F:System.Threading.ThreadState.Unstarted" />。</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>對 <see cref="M:System.Threading.Thread.Abort(System.Object)" /> 方法呼叫時所擲回的例外狀況。 此類別無法獲得繼承。</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>取得物件，其中包含有關執行緒中止之特定應用程式的資訊。</summary>
      <returns>包含特定應用程式資訊的物件。</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>提供 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>初始化 <see cref="T:System.Threading.ThreadExceptionEventArgs" /> 類別的新執行個體。</summary>
      <param name="t">所發生的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>取得發生的 <see cref="T:System.Exception" />。</summary>
      <returns>所發生的 <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>代表將處理 <see cref="T:System.Windows.Forms.Application" /> 的 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件之方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.Threading.ThreadExceptionEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>
        <see cref="T:System.Threading.Thread" /> 處於等候狀態時被插斷而擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Threading.ThreadInterruptedException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Threading.ThreadInterruptedException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.ThreadInterruptedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Threading.ThreadInterruptedException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>指定 <see cref="T:System.Threading.Thread" /> 的排程優先權。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> 可排定於具有 <see langword="Highest" /> 優先權的執行緒之後、具有 <see langword="Normal" /> 優先權的執行緒之前。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> 可排定於具有 <see langword="Normal" /> 優先權的執行緒之後、具有 <see langword="Lowest" /> 優先權的執行緒之前。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <see cref="T:System.Threading.Thread" /> 可排定在具有任何他優先權的執行緒之前。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <see cref="T:System.Threading.Thread" /> 可排定在具有任何其他優先權的執行緒之後。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <see cref="T:System.Threading.Thread" /> 可排定於具有 <see langword="AboveNormal" /> 優先權的執行緒之後、具有 <see langword="BelowNormal" /> 優先權的執行緒之前。 執行緒依預設具有 <see langword="Normal" /> 優先權。</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>代表在 <see cref="T:System.Threading.Thread" /> 上執行的方法。</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>當基礎作業系統執行緒已經啟動，但此執行緒還沒準備好執行使用者程式碼之前，如果 Managed 執行緒內有任何錯誤發生，就會擲回這個例外狀況。</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>指定 <see cref="T:System.Threading.Thread" /> 的執行狀態。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>執行緒狀態包括 <see cref="F:System.Threading.ThreadState.AbortRequested" />，且執行緒目前無作用，但其狀態尚未變更為 <see cref="F:System.Threading.ThreadState.Stopped" />。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>
        <see cref="M:System.Threading.Thread.Abort(System.Object)" /> 方法已在執行緒上被叫用 (Invoke)，但執行緒還沒有收到會嘗試終結它的暫止 <see cref="T:System.Threading.ThreadAbortException" />。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>執行緒正做為背景執行緒執行當中 (相對於前景執行緒)。 這個狀態以設定 <see cref="P:System.Threading.Thread.IsBackground" /> 屬性來控制。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>執行緒已啟動且尚未停止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>執行緒已經停止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>執行緒正被要求停止中。 僅供內部使用。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>執行緒已經暫止。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>執行緒正被要求暫止中。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>
        <see cref="M:System.Threading.Thread.Start" /> 方法還沒有在執行緒上被叫用。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>執行緒已封鎖。 這可能是呼叫 <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> 或 <see cref="M:System.Threading.Thread.Join" />、要求鎖定 (例如藉由呼叫 <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> 或 <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />)，或是在執行緒同步處理物件 (例如 <see cref="T:System.Threading.ManualResetEvent" />) 上等候的結果。</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>當 <see cref="T:System.Threading.Thread" /> 對於方法的呼叫來說處於無效 <see cref="P:System.Threading.Thread.ThreadState" /> 時所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>使用預設屬性，初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含所擲回之例外狀況的相關序列化物件資料。</param>
      <param name="context">包含有關來源或目的端內容資訊的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>使用指定的錯誤訊息，初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Threading.ThreadStateException" /> 類別的新執行個體。</summary>
      <param name="message">解釋例外狀況原因的錯誤訊息。</param>
      <param name="innerException">做為目前例外狀況發生原因的例外狀況。 如果 <paramref name="innerException" /> 參數不是 <see langword="null" />，則目前的例外狀況會在處理內部例外的 <see langword="catch" /> 區塊中引發。</param>
    </member>
  </members>
</doc>
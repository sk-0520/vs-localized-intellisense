<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>提供 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>不使用參數來初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>使用指定的物件當做新項目，初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 類別的新執行個體。</summary>
      <param name="newObject">
        <see cref="T:System.Object" />，做為新項目值。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>取得或設定要加入至繫結清單的物件。</summary>
      <returns>
        <see cref="T:System.Object" />，當做要加入至關聯集合的新項目。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>表示處理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。</summary>
      <param name="sender">事件的來源，通常為資料容器或資料繫結集合。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.AddingNewEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>指定要傳遞至屬性的值，讓屬性從其他來源取得其值。 這稱為「環境」**。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 Boolean 值。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 8 位元不帶正負號的整數 (Unsigned Integer)。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 Unicode 字元。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為雙精度浮點數。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 16 位元帶正負號的整數。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 32 位元帶正負號的整數。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為 64 位元帶正負號的整數。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為物件。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為單精確度浮點數。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定其值為字串。</summary>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 類別的新執行個體，需指定值和型別。</summary>
      <param name="type">
        <paramref name="value" /> 參數的 <see cref="T:System.Type" />。</param>
      <param name="value">這個屬性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等於目前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <param name="obj">與目前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 相比較的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 和目前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>取得物件，其為這個 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</summary>
      <returns>物件，為這個 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的值。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Array" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>取得由值參數所指定之陣列型別的屬性集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有公開給陣列的屬性；如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示這個物件是否支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see langword="true" />，因為應該呼叫 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 尋找這個物件的屬性。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>表示屬性的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>指定可使用的空集合，而非建立新集合。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 類別的新執行個體。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 型別的陣列，提供這個集合的屬性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>判斷這個屬性集合是否具有指定屬性。</summary>
      <param name="attribute">要在集合中尋找的 <see cref="T:System.Attribute" />。</param>
      <returns>如果集合包含屬性，或者是屬性型別的預設屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>判斷這個屬性集合是否包含屬性陣列中所有的指定屬性。</summary>
      <param name="attributes">要在集合中尋找之 <see cref="T:System.Attribute" /> 型別的陣列。</param>
      <returns>如果集合包含所有的屬性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合至陣列，開始於指定的索引處。</summary>
      <param name="array">集合要複製到的 <see cref="T:System.Array" />。</param>
      <param name="index">做為開頭的索引。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>從現有的 <see cref="T:System.ComponentModel.AttributeCollection" /> 建立新 <see cref="T:System.ComponentModel.AttributeCollection" />。</summary>
      <param name="existing">用於建立複本的 <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes">
        <see cref="T:System.Attribute" /> 型別的陣列，提供這個集合的屬性。 可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> 為 <see langword="null" />。</exception>
      <returns>新的 <see cref="T:System.ComponentModel.AttributeCollection" />，是 <paramref name="existing" /> 的複本。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>傳回指定 <see cref="T:System.Attribute" /> 的預設 <see cref="T:System.Type" />。</summary>
      <param name="attributeType">要擷取屬性的 <see cref="T:System.Type" />。</param>
      <returns>指定之 <paramref name="attributeType" /> 的預設 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>取得這個集合的列舉程式。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>判斷指定屬性是否和集合中的屬性相同。</summary>
      <param name="attribute">要與這個集合中屬性相比較之 <see cref="T:System.Attribute" /> 的執行個體。</param>
      <returns>如果屬性包含在集合中，並且具有和集合中屬性相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>判斷指定陣列中的屬性是否與集合中的屬性相同。</summary>
      <param name="attributes">要與這個集合中屬性相比較之 <see cref="T:System.CodeDom.MemberAttributes" /> 的陣列。</param>
      <returns>如果陣列中的所有屬性都包含在集合中，並且具有和集合中屬性相同的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>取得屬性集合。</summary>
      <returns>屬性集合。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>取得屬性的數目。</summary>
      <returns>屬性的數目。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>取得具有指定索引編號的屬性。</summary>
      <param name="index">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 之以零起始的索引。</param>
      <returns>具有指定索引編號的 <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>取得具有指定型別的屬性。</summary>
      <param name="attributeType">要從集合中取得之 <see cref="T:System.Type" /> 的 <see cref="T:System.Attribute" />。</param>
      <returns>具有指定型別的 <see cref="T:System.Attribute" />，或者，如果屬性不存在，則為屬性型別的預設值。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>取得集合所包含的項目數目。</summary>
      <returns>集合中包含的元素數目。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>如果同步存取集合 (安全執行緒)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>啟用屬性重新導向。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>使用指定的型別名稱，初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">要指定的型別名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的型別名稱和屬性名稱，初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">要指定的型別名稱。</param>
      <param name="propertyName">將擷取屬性 (Attribute) 的屬性 (Property) 名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>使用指定的型別，初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="type">要指定的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>取得將擷取屬性 (Attribute) 的屬性 (Property) 名稱。</summary>
      <returns>將擷取屬性 (Attribute) 的屬性 (Property) 名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>取得傳入建構函式的組件限定型別名稱。</summary>
      <returns>在建構函式中指定的組件限定型別名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>提供非浮點數值類型的基底類型轉換器。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出這個轉換子是否可以使用內容來將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換之目的型別。</param>
      <returns>如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示數字的文化特性。</param>
      <param name="value">要轉換的物件。</param>
      <exception cref="T:System.Exception">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換為另一個型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示數字的文化特性。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>指定成員是否通常使用於繫結。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.BindableAttribute.No" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>指定屬性通常不用於繫結。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>指定屬性通常用於繫結。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>使用布林值 (Boolean)，初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="bindable">
        <see langword="true" /> 表示使用繫結屬性，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="bindable">
        <see langword="true" /> 表示使用繫結屬性，否則為 <see langword="false" />。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.BindingDirection" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>使用其中一個 <see cref="T:System.ComponentModel.BindableSupport" />值，初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="flags">其中一個 <see cref="T:System.ComponentModel.BindableSupport" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的新執行個體。</summary>
      <param name="flags">其中一個 <see cref="T:System.ComponentModel.BindableSupport" /> 值。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.BindingDirection" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.ComponentModel.BindableAttribute" /> 物件是否相等。</summary>
      <param name="obj">要比較的物件。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.BindableAttribute" /> 和目前的 <see cref="T:System.ComponentModel.BindableAttribute" /> 相等，則為 <see langword="true" />，如果不相等，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>做為 <see cref="T:System.ComponentModel.BindableAttribute" /> 類別的雜湊函式。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>取得值，指出屬性通常用於繫結。</summary>
      <returns>如果屬性通常用於繫結，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>取得值，指出這個屬性的資料繫結方向。</summary>
      <returns>這個屬性的資料系結方向。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>指定數值，表示屬性是否可以繫結至資料項目或另一個屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>屬性設為預設值。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>屬性在設計階段是不可繫結的。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>屬性在設計階段是可繫結的。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>指定可以用一或兩個方法繫結樣板。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>樣板只能接受屬性值。 與泛型 <see cref="T:System.Web.UI.ITemplate" /> 一起使用。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>樣板可以接受和公開屬性值。 與 <see cref="T:System.Web.UI.IBindableTemplate" /> 一起使用。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>提供支援資料繫結的泛型集合。</summary>
      <typeparam name="T">清單中的元素類型。</typeparam>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>在項目加入至清單之前發生。</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>在清單變更或清單項目變更時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>初始化具有指定的清單之 <see cref="T:System.ComponentModel.BindingList`1" /> 類別的新執行個體。</summary>
      <param name="list">在 <see cref="T:System.Collections.Generic.IList`1" /> 中所要包含之項目的 <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>將新項目加入至集合中。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 屬性設定為 <see langword="false" />。  
  
-或- 
目前項目類型找不到公用無參數建構函式。</exception>
      <returns>加入此清單的項目。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>將新項目加入至集合的結尾。</summary>
      <exception cref="T:System.InvalidCastException">新項目與 <see cref="T:System.ComponentModel.BindingList`1" /> 中所含物件為不同型別。</exception>
      <returns>已加入至集合中的項目。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>如果在衍生類別中覆寫時，排序項目，否則擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，指定要排序的屬性。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
      <exception cref="T:System.NotSupportedException">在衍生類別中未覆寫方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>捨棄暫止的新項目。</summary>
      <param name="itemIndex">要加入之新項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>從集合中移除所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>將暫止的新項目認可到集合中。</summary>
      <param name="itemIndex">要加入之新項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>如果在衍生類別中實作搜尋時，搜尋具有指定之屬性描述項和值之項目的索引，否則為 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">要搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要比對的 <paramref name="prop" /> 值。</param>
      <exception cref="T:System.NotSupportedException">在衍生類別中未覆寫 <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" />。</exception>
      <returns>符合屬性描述項並包含特定值的項目之以零起始的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>將指定的項目插入清單中的指定索引處。</summary>
      <param name="index">將插入項目之以零起始的索引處。</param>
      <param name="item">在清單中要插入的項目。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>移除指定之索引處的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">您正在移除新加入的元素，而且 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 已設定為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>如果在衍生類別中實作排序時，移除以 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 所套用的任何排序，否則引發 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">在衍生類別中未覆寫方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 型別的 <see cref="F:System.ComponentModel.ListChangedType.Reset" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>為指定之位置的項目，引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 型別的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。</summary>
      <param name="position">要重設之項目的索引，這個索引以零起始。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>以指定的項目取代位於指定索引上的項目。</summary>
      <param name="index">要被取代之項目的索引，這個索引以零起始。</param>
      <param name="item">指定之索引處的項目新值。 參考類型的值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">要加入做為搜尋準則的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>將新的項目加入至清單中。 如需詳細資訊，請參閱<see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <exception cref="T:System.NotSupportedException">不支援這個方法。</exception>
      <returns>加入此清單的項目。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根據 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 來排序清單。 如需這個成員的完整說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="prop">要做為排序依據的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="prop">要在其上搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜尋的 <paramref name="prop" /> 參數值。</param>
      <returns>具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>如需這個成員的說明，請參閱 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">從用來搜尋的索引中所要移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>如需這個成員的描述，請參閱 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />。</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>取得或設定值，指出清單中的項目是否可以編輯。</summary>
      <returns>如果可以編輯清單項目則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>取得或設定值，指出您是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法，將項目加入至清單中。</summary>
      <returns>如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法將項目加入至清單，則為 <see langword="true" />，否則為 <see langword="false" />。 預設取決於清單中所含的基礎型別。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>取得或設定值，指出您是否可以從集合移除項目。</summary>
      <returns>如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法從清單移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>取得值，指出清單是否為排序。</summary>
      <returns>如果清單已排序，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>取得或設定值，指出在清單中加入或移除項目時是否引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>如果加入或移除項目會引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>取得清單的排序方向。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。 預設為 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>如果在衍生類別中實作排序，取得排序清單時所使用的屬性描述項，否則傳回 <see langword="null" />。</summary>
      <returns>用來排序清單的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>取得值，指出是否已啟用 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>如果支援 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>取得值，指出清單是否支援搜尋。</summary>
      <returns>如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>取得值，指出清單是否支援排序。</summary>
      <returns>如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>取得值，指出清單中的項目是否可以編輯。</summary>
      <returns>如果可以編輯清單項目則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>取得值，指出是否可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法，將新項目加入至清單中。</summary>
      <returns>如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法將項目加入至清單，則為 <see langword="true" />，否則為 <see langword="false" />。 預設取決於清單中所含的基礎型別。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>取得值，指出是否可以從清單中移除項目。</summary>
      <returns>如果您可以使用 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法從清單移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>如果已呼叫 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 而尚未呼叫 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>已經用來排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>如果清單變更或項目變更時引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>如果清單支援使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法的搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>取得值，指出項目屬性值變更是否會引發 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 型別的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 事件。 在衍生類別中不可覆寫這個成員。</summary>
      <returns>
        <see langword="true" /> 如果清單類型為，則 <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 為，否則為 <see langword="false" /> 。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Boolean" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成布林物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定值物件轉換為布林物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定要轉換成的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得布林資料型別的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，含有標準的有效值集合。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示從 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的詳盡清單，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示這個物件是否支援可以從清單選取的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為可以呼叫 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>提供類型轉換器，將 8 位元不帶正負號的整數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>表示處理可取消事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.CancelEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>提供類型轉換器，將 Unicode 字元物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CharConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 Unicode 字元物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成 Unicode 字元物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用引數，將指定值物件轉換成 Unicode 字元物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>指定變更集合的方式。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>指定將元素加入集合中。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>指定整個集合已經變更。 這是由於使用操作整個集合的方法 (例如 <see cref="M:System.Collections.CollectionBase.Clear" />) 所導致的。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>指定將元素從集合中移除。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>提供 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 類別的新執行個體。</summary>
      <param name="action">其中一個 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值，指定集合的變更方式。</param>
      <param name="element">
        <see cref="T:System.Object" />，指定發生變更的集合之執行個體。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>取得指定集合變更方式的動作。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>取得變更的集合執行個體。</summary>
      <returns>
        <see cref="T:System.Object" />，表示變更的集合之執行個體，如果重新整理集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>表示當在集合中加入或移除元素時，會處理引發的 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>提供類型轉換器，將集合物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <paramref name="value" /> 所要轉換的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。 這個參數必須繼承自 <see cref="T:System.Collections.ICollection" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的內容和屬性 (Attribute)，取得由值參數所指定之陣列型別的屬性 (Property) 集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns>具有為這個資料類型所公開之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果沒有屬性則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示這個物件是否支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為不應該呼叫 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 來尋找這個物件的屬性，所以會是 <see langword="false" />。 這個方法永遠不會傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>指定支援複雜資料繫結之元件的資料來源和資料成員屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>不使用參數來初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>使用指定的資料來源，初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="dataSource">做為資料來源的屬性名稱。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>使用指定的資料來源和資料成員，初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="dataSource">做為資料來源的屬性名稱。</param>
      <param name="dataMember">做為資料來源的屬性名稱。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 執行個體是否相等。</summary>
      <param name="obj">要與目前 <see cref="T:System.Object" /> 執行個體比較的 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />。</param>
      <returns>如果物件和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />，表示不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>取得 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料成員屬性名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料成員屬性名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>取得 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>提供型別轉換子 (Type Converter) 將元件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，代表要與此元件轉換器建立關聯的型別。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>取得由值參數所指定的元件型別的屬性集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，表示要其取得其屬性的元件型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個元件所公開的屬性；如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定內容取得值，表示這個物件是否使用支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see langword="true" />，因為應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 尋找這個物件的屬性。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>提供自訂元件編輯器的基底類別。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>編輯元件並傳回值，表示是否已根據指定的內容修改元件。</summary>
      <param name="context">選擇性的內容物件，可用於取得有關編輯的詳細資訊。</param>
      <param name="component">要編輯的元件。</param>
      <returns>如果已修改元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>編輯元件並傳回指示是否已修改元件的值。</summary>
      <param name="component">要編輯的元件。</param>
      <returns>如果已修改元件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>提供簡單的功能，列舉元件或物件的資源。 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 類別是 <see cref="T:System.Resources.ResourceManager" />。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>使用預設值，初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>根據指定 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 的資訊，建立可查閱附屬組件中的 <see cref="T:System.Type" />。</summary>
      <param name="t">
        <see cref="T:System.Type" />，<see cref="T:System.ComponentModel.ComponentResourceManager" /> 會自其中衍生用以尋找資源檔的所有資訊。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>將資源的值套用至物件的對應屬性。</summary>
      <param name="value">
        <see cref="T:System.Object" />，包含要套用的屬性值。</param>
      <param name="objectName">
        <see cref="T:System.String" />，包含要在資源中查詢的物件名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>將資源的值套用至物件的對應屬性。</summary>
      <param name="value">
        <see cref="T:System.Object" />，包含要套用的屬性值。</param>
      <param name="objectName">
        <see cref="T:System.String" />，包含要在資源中查詢的物件名稱。</param>
      <param name="culture">要套用資源的文化特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>封裝零個或多個元件。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Container" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>將指定的 <see cref="T:System.ComponentModel.Component" /> 加入至 <see cref="T:System.ComponentModel.Container" />。 元件未命名。</summary>
      <param name="component">要加入的元件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>將指定的 <see cref="T:System.ComponentModel.Component" /> 加入 <see cref="T:System.ComponentModel.Container" />，並指派名稱給它。</summary>
      <param name="component">要加入的元件。</param>
      <param name="name">要指派給元件的唯一、不區分大小寫的名稱。  
  
-或- 
 <see langword="null" />，表示沒有為元件命名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>為指定的 <see cref="T:System.ComponentModel.ISite" /> 建立站台 <see cref="T:System.ComponentModel.IComponent" />，並將指定的名稱指派給站台。</summary>
      <param name="component">要為其建立站台的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要指派給 <paramref name="component" /> 的名稱，或 <see langword="null" />，表示略過名稱的指派。</param>
      <returns>新建立的站台。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>釋放 <see cref="T:System.ComponentModel.Container" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.ComponentModel.Container" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>釋出 Unmanaged 資源並執行其他清除作業後，記憶體回收才能重新回收 <see cref="T:System.ComponentModel.Container" />。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>取得指定型別的服務物件 (如果有的話)。</summary>
      <param name="service">要擷取之服務的 <see cref="T:System.Type" />。</param>
      <returns>實作要求服務的 <see cref="T:System.Object" />，或 <see langword="null" /> (如果無法解析服務)。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>從 <see cref="T:System.ComponentModel.Container" /> 移除元件。</summary>
      <param name="component">要移除的元件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>從 <see cref="T:System.ComponentModel.Container" /> 移除元件，而不必將 <see cref="P:System.ComponentModel.IComponent.Site" /> 設定為 <see langword="null" />。</summary>
      <param name="component">要移除的元件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>判斷元件名稱對這個容器而言是否唯一。</summary>
      <param name="component">具名元件。</param>
      <param name="name">要驗證的元件名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>取得 <see cref="T:System.ComponentModel.Container" /> 中的所有元件。</summary>
      <returns>集合，含有 <see cref="T:System.ComponentModel.Container" /> 中的元件。</returns>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>提供容器篩選服務的基底類別</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>篩選元件集合。</summary>
      <param name="components">要篩選的元件集合。</param>
      <returns>
        <see cref="T:System.ComponentModel.ComponentCollection" />，表示修改的集合。</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Globalization.CultureInfo" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的值物件轉換為 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定要轉換成的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定的文化特性無效。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定要轉換成的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>擷取指定之文化特性的名稱。</summary>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定要取得其名稱的文化特性。</param>
      <returns>指定之文化特性的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，取得 <see cref="T:System.Globalization.CultureInfo" /> 物件的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 含有標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示從 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 傳回的標準值清單是否為詳盡清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 不是可能值 (也就是說，其他值也有可能) 的詳盡清單，所以會是 <see langword="false" />。 這個方法永遠不會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，指出這個物件是否支援可以使用指定內容從清單選取的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為應該呼叫 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>提供 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 介面的簡單預設實作。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>使用父自訂型別描述項，初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 類別的新執行個體。</summary>
      <param name="parent">父自訂型別描述項。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>傳回這個型別描述項所表示之型別的自訂屬性集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />，包含型別的屬性。 預設為 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>傳回此類型描述元所代表之類別的完整格式名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含此類型描述元所描述之類型的完整類別名稱。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>傳回這個型別描述項所表示之類別的名稱。</summary>
      <returns>
        <see cref="T:System.String" />，包含這個型別描述項所描述之元件執行個體的名稱。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>傳回這個型別描述項所表示之類別的型別轉換子。</summary>
      <returns>這個型別描述項所表示之類別的 <see cref="T:System.ComponentModel.TypeConverter" />。 預設為新建立的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>傳回這個型別描述項所表示之物件的預設事件描述項。</summary>
      <returns>這個型別描述項所表示之物件的預設事件 <see cref="T:System.ComponentModel.EventDescriptor" />。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>傳回這個型別描述項所表示之物件的預設屬性描述項。</summary>
      <returns>這個型別描述項所表示之物件的預設屬性 <see cref="T:System.ComponentModel.PropertyDescriptor" />。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>傳回指定型別的編輯器，這個指定型別與這個型別描述項所表示的類別關聯。</summary>
      <param name="editorBaseType">要擷取之編輯器的基底型別。</param>
      <returns>指定型別的編輯器，這個指定型別與這個型別描述項所表示的類別關聯。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>傳回這個型別描述項所表示之物件的事件描述項集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含這個型別描述項所描述之物件的事件描述項。 預設為 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>傳回這個型別描述項所表示之物件的已篩選事件描述項集合。</summary>
      <param name="attributes">當做篩選條件之型別的陣列。 這可以是 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，包含這個型別描述項所描述之物件的事件描述項。 預設為 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>傳回這個型別描述項所表示之物件的屬性描述項集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含這個型別描述項所描述之物件的屬性描述項。 預設為 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>傳回這個型別描述項所表示之物件的已篩選屬性描述項集合。</summary>
      <param name="attributes">當做篩選條件之型別的陣列。 這可以是 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含這個型別描述項所描述之物件的屬性描述項。 預設為 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd">要擷取主控物件的屬性描述項。</param>
      <returns>
        <see cref="T:System.Object" />，擁有這個型別描述項所指定的屬性。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>將型別識別為適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件的物件。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>表示類別在設計階段適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 類別的預設值，表示類別在設計階段適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>表示類別在設計階段不適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 類別的新執行個體，並指出物件是否適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。</summary>
      <param name="isDataObject">如果物件適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>判斷這個 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 的執行個體是否符合另一個物件的模式。</summary>
      <param name="obj">與這個 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 執行個體相互比較的物件。</param>
      <returns>如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>取得值，指出物件在設計階段是否應被視為適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件。</summary>
      <returns>如果物件應被視為適合繫結至 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 物件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>為表示資料欄位的屬性，提供中繼資料。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵。</summary>
      <param name="primaryKey">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵，以及欄位是否為資料庫識別欄位。</summary>
      <param name="primaryKey">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
      <param name="isIdentity">
        <see langword="true" /> 表示欄位是可唯一識別資料列的識別 (Identity) 欄位，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵、欄位是否為資料庫識別欄位，以及欄位是否可以為 null。</summary>
      <param name="primaryKey">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
      <param name="isIdentity">
        <see langword="true" /> 表示欄位是可唯一識別資料列的識別 (Identity) 欄位，否則為 <see langword="false" />。</param>
      <param name="isNullable">
        <see langword="true" /> 表示欄位在資料存放區中可以為 null，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 類別的新執行個體，並指出欄位是否為資料列的主索引鍵、它是否為資料庫識別欄位，以及它是否可以為 null 並設定欄位的長度。</summary>
      <param name="primaryKey">
        <see langword="true" /> 表示欄位在資料列的主索引鍵中，否則為 <see langword="false" />。</param>
      <param name="isIdentity">
        <see langword="true" /> 表示欄位是可唯一識別資料列的識別 (Identity) 欄位，否則為 <see langword="false" />。</param>
      <param name="isNullable">
        <see langword="true" /> 表示欄位在資料存放區中可以為 null，否則為 <see langword="false" />。</param>
      <param name="length">欄位的長度，以位元組為單位。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>傳回值，該值表示這個執行個體是否和指定的物件相等。</summary>
      <param name="obj">與這個 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 執行個體相互比較的物件。</param>
      <returns>如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>取得值，指出屬性是否表示基礎資料中的識別欄位。</summary>
      <returns>如果屬性表示基礎資料中的識別欄位，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>取得值，指出屬性是否表示基礎資料存放區中的可為 null 欄位。</summary>
      <returns>如果屬性表示基礎資料存放區中的可為 null 欄位，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>取得屬性的長度，以位元組為單位。</summary>
      <returns>屬性的長度 (以位元組為單位)，如果未設定，則為 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>取得值，指出屬性是否位於基礎資料中的主索引鍵。</summary>
      <returns>如果屬性是位於基礎資料的主索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>識別型別所公開的資料作業方法、方法所執行的作業型別，以及方法是否為預設資料方法。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 類別的新執行個體，並識別方法所執行的資料作業類型。</summary>
      <param name="methodType">其中一個 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，描述方法所執行的資料作業。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 類別的新執行個體、識別方法所執行的資料作業類型，並識別方法是否為資料物件所公開的預設資料方法。</summary>
      <param name="methodType">其中一個 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，描述方法所執行的資料作業。</param>
      <param name="isDefault">
        <see langword="true" /> 表示已套用屬性的方法是資料物件為指定之 <paramref name="methodType" /> 的預設方法，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>傳回值，該值表示這個執行個體是否和指定的物件相等。</summary>
      <param name="obj">與這個 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 執行個體相互比較的物件。</param>
      <returns>如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>取得值，指出這個執行個體是否與指定的屬性共用通用模式。</summary>
      <param name="obj">與這個 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 執行個體相互比較的物件。</param>
      <returns>如果這個執行個體與 <paramref name="obj" /> 參數所指定的執行個體相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>取得值，指出套用 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的方法是否為資料物件針對指定的方法型別所公開的預設資料方法。</summary>
      <returns>如果方法是物件為方法型別所公開的預設方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>取得 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，表示方法所執行的資料作業類型。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，識別已套用 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 的方法所執行的資料作業類型。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>識別方法所執行的資料作業類型，由套用至方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 所指定。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>表示方法用於刪除資料的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>表示方法用於填滿 <see cref="T:System.Data.DataSet" /> 物件的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>表示方法用於插入資料的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>表示方法用於擷取資料的資料作業。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>表示方法用於更新資料的資料作業。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.DateTime" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 <see cref="T:System.DateTime" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定值物件轉換為 <see cref="T:System.DateTime" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用引數，將指定值物件轉換為 <see cref="T:System.DateTime" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.DateTimeOffset" /> 結構與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，這個值表示是否可將指定之來源型別的物件轉換成 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context">日期格式內容。</param>
      <param name="sourceType">要檢查的來源型別。</param>
      <returns>如果指定的型別可轉換為 <see cref="T:System.DateTimeOffset" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，這個值表示是否可將 <see cref="T:System.DateTimeOffset" /> 轉換成指定之型別的物件。</summary>
      <param name="context">日期格式內容。</param>
      <param name="destinationType">要檢查的目的型別。</param>
      <returns>如果 <see cref="T:System.DateTimeOffset" /> 可轉換為指定的型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定物件轉換為 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context">日期格式內容。</param>
      <param name="culture">日期文化特性。</param>
      <param name="value">要被轉換的物件。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.DateTimeOffset" />，表示指定的物件。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將 <see cref="T:System.DateTimeOffset" /> 轉換為指定型別的物件。</summary>
      <param name="context">日期格式內容。</param>
      <param name="culture">日期文化特性。</param>
      <param name="value">要轉換的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType">要轉換的目標類型。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>指定之型別的物件，表示 <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Decimal" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用引數，將指定值物件轉換為 <see cref="T:System.Decimal" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>指定元件的預設繫結屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 類別的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>不使用參數來初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>初始化使用指定的屬性名稱之 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">預設繫結屬性的名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 執行個體是否相等。</summary>
      <param name="obj">要與目前 <see cref="T:System.Object" /> 執行個體比較的 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />。</param>
      <returns>如果物件和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />，表示不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>取得 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所繫結之元件的預設繫結屬性名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 所繫結之元件的預設繫結屬性名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>指定元件的預設事件。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 的預設值，就是 <see langword="null" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 類別的新執行個體。</summary>
      <param name="name">與這個屬性繫結的元件的預設事件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>取得與這個屬性繫結的元件的預設事件名稱。</summary>
      <returns>與這個屬性繫結的元件的預設事件名稱。 預設值是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>指定元件的預設屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 的預設值，就是 <see langword="null" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="name">與這個屬性 (Attribute) 繫結的元件的預設屬性 (Property) 名稱。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>取得與這個屬性 (Attribute) 繫結的元件的預設屬性 (Property) 名稱。</summary>
      <returns>與這個屬性 (Attribute) 繫結的元件的預設屬性 (Property) 名稱。 預設值是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>提供 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 類別的新執行個體。</summary>
      <param name="oldDesigner">正失去啟動過程 (Activation) 的文件。</param>
      <param name="newDesigner">正獲得啟動過程的文件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>取得正獲得啟動過程的文件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />，表示正獲得啟動過程的文件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>取得正失去啟動過程的文件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" />，表示正失去啟動過程的文件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>表示處理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>嘗試簽出已簽入來源程式碼管理程式之檔案的動作遭取消或失敗時所擲回的例外狀況。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體，這個執行個體可指定簽出已取消。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>不使用相關訊息或錯誤碼來初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化資料和內容，初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>使用指定的訊息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的訊息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
      <param name="innerException">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>使用指定訊息和錯誤碼來初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的訊息。</param>
      <param name="errorCode">要傳遞的錯誤碼。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>表示由數值命令 ID 和 GUID 功能表群組識別項所組成的唯一命令識別項 (Command Identifier)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>使用指定的功能表群組 GUID 和命令 ID 數，初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 類別的新執行個體。</summary>
      <param name="menuGroup">這個功能表命令所屬的群組 GUID。</param>
      <param name="commandID">這個功能表命令的數值識別項。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.ComponentModel.Design.CommandID" /> 執行個體是否相等。</summary>
      <param name="obj">要比較的物件。</param>
      <returns>如果指定的物件與這個物件相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>以特定類型的雜湊函式進行服務。</summary>
      <returns>目前 <see cref="T:System.Object" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>傳回表示目前物件的 <see cref="T:System.String" />。</summary>
      <returns>字串，包含命令 ID 資訊、GUID 和整數識別項兩者。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>取得這個 <see cref="T:System.ComponentModel.Design.CommandID" /> 所識別功能表命令所屬之功能表群組的 GUID。</summary>
      <returns>這個命令的命令群組 GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>取得數值命令 ID。</summary>
      <returns>命令 ID 數。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的資料。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="component">已變更的元件。</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示已變更的成員。</param>
      <param name="oldValue">已變更成員的舊值。</param>
      <param name="newValue">已變更成員的新值。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>取得已修改的元件。</summary>
      <returns>
        <see cref="T:System.Object" />，表示已修改的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>取得已變更的成員。</summary>
      <returns>
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示已變更的成員。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>取得已變更成員的新值。</summary>
      <returns>已變更成員的新值。 這個屬性可以是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>取得已變更成員的舊值。</summary>
      <returns>已變更成員的舊值。 這個屬性可以是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>代表將處理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的資料。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 類別的新執行個體。</summary>
      <param name="component">正要變更的元件。</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示正要變更的元件成員。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>取得正要變更的元件或是做為正要變更成員的父容器 (Container) 之元件。</summary>
      <returns>正要使成員變更的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>取得正要變更的成員。</summary>
      <returns>
        <see cref="T:System.ComponentModel.MemberDescriptor" />，表示正要變更的成員 (如果已知)，否則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>代表將處理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 事件，包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 類別的新執行個體。</summary>
      <param name="component">做為事件來源的元件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>取得與事件相關的元件。</summary>
      <returns>與事件相關的元件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>表示處理為元件層次事件所引發的 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 類別的新執行個體。</summary>
      <param name="component">要重新命名的元件。</param>
      <param name="oldName">元件的舊名稱。</param>
      <param name="newName">元件的新名稱。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>取得將重新命名的元件。</summary>
      <returns>將重新命名的元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>取得重新命名事件後的元件名稱。</summary>
      <returns>重新命名事件後的元件名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>取得重新命名事件前的元件名稱。</summary>
      <returns>先前的元件名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>代表將處理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>代表設計工具集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 類別的新執行個體，它包含指定的設計工具集。</summary>
      <param name="designers">清單，包含要加入的設計工具集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 類別的新執行個體，它包含指定的設計工具。</summary>
      <param name="designers">要儲存之 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 物件的陣列。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>取得這個集合的新列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，列舉集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將集合的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>取得這個集合的新列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，列舉集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>取得集合中的設計工具數目。</summary>
      <returns>集合中的設計工具數目。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>取得在指定索引處的設計工具。</summary>
      <param name="index">要傳回之設計工具的索引。</param>
      <returns>在指定索引處的設計工具。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>取得集合所包含的項目數目。</summary>
      <returns>集合中包含的元素數目。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，這個值表示對 <see cref="T:System.Collections.ICollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>如果 <see langword="true" /> 的存取為同步 (安全執行緒)，則為 <see cref="T:System.Collections.ICollection" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 類別的新執行個體。</summary>
      <param name="host">文件的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>取得文件的主應用程式 (Host)。</summary>
      <returns>文件的 <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>表示處理建立或配置文件時所引發的 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>提供基底類別，用於取得和設定設計工具的選項值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>使用指定名稱建立新的 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />，並將其加入指定的父代。</summary>
      <param name="parent">父設計工具選項集合。 除根物件集合之外的所有集合都具有父代。</param>
      <param name="name">這個集合的名稱。</param>
      <param name="value">提供這個集合屬性的物件。 如果集合不應提供任何屬性，則可為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> 或 <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為空字串。</exception>
      <returns>具有給定名稱的新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>填入 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <param name="options">要填入的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>顯示指定物件的選項對話方塊。</summary>
      <param name="options">包含要叫用之物件的選項集合。</param>
      <param name="optionObject">實際選項物件。</param>
      <returns>如果顯示核取方塊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>取得在這個封裝 (Package) 中定義的選項值。</summary>
      <param name="pageName">選項繫結的頁面。</param>
      <param name="valueName">選項值的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 為 <see langword="null" />。</exception>
      <returns>名為 <paramref name="valueName" /> 的選項值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>設定在這個封裝中定義的選項值。</summary>
      <param name="pageName">繫結至選項的頁面。</param>
      <param name="valueName">選項值的名稱。</param>
      <param name="value">選項值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>取得這個服務的選項集合。</summary>
      <returns>用可用的設計工具選項填入 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>包含設計工具選項的集合。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>從目標陣列的指定索引開始，複製整個集合至相容的一維 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合中複製的元素之目的端。 <paramref name="array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" />，可用來逐一查看這個集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用來逐一查看集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>傳回這個集合範圍中第一次出現指定值的索引。</summary>
      <param name="value">要在集合中找出的物件。</param>
      <returns>如果找到的話，則為整個集合中的第一個相符值索引，否則為集合的下限減 1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>顯示對話方塊使用者介面 (UI)，使用者可以使用它來設定這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 中的選項。</summary>
      <returns>如果可以顯示對話方塊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>移除集合的所有項目。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>決定集合中指定項目的索引。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入至索引中的指定索引處。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入至集合的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>從集合中移除第一個出現的特定物件。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引處的集合項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>取得這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所包含之子選項集合的數目。</summary>
      <returns>這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所包含之子選項集合的數目。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>取得指定索引處的子集合。</summary>
      <param name="index">要取得之子集合以零起始的索引。</param>
      <returns>在指定索引處的子集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>取得指定名稱處的子集合。</summary>
      <param name="name">子集合的名稱。</param>
      <returns>具有 <paramref name="name" /> 參數指定之名稱的子集合，如果找不到名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>取得這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名稱。</summary>
      <returns>這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>取得父集合物件。</summary>
      <returns>父集合物件，如果沒有父集合物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>取得這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所提供的屬性集合及其所有子系。</summary>
      <returns>這個 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 所提供的屬性集合及其所有子系。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出存取集合是否同步化, 且因而為執行緒安全。</summary>
      <returns>如果集合存取是同步的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns>如果集合具有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，表示集合是否為唯讀。</summary>
      <returns>如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定的以零為起始元素索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>提供方式，用於群組一系列設計階段動作以改善效能，以及啟用大部分變更類型以復原。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>不使用描述，初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>使用指定的異動描述，初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 類別的新執行個體。</summary>
      <param name="description">這個異動的描述。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>取消異動，並嘗試復原異動事件所做的變更。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>認可這個異動。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>釋出與這個物件相關聯的資源。 如果這個異動還沒有認可，則這個覆寫會認可該異動。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>引發 <see langword="Cancel" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>執行認可異動的實際工作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>釋放 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 所使用的所有資源。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>取得值，表示異動是否已取消。</summary>
      <returns>如果異動取消，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>取得值，表示異動是否已認可。</summary>
      <returns>如果異動認可，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>取得異動的描述。</summary>
      <returns>異動的描述。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>使用會指出設計工具是否在異動上呼叫 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 的指定值，初始化 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 類別的新執行個體。</summary>
      <param name="commit">指示是否認可異動的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 類別的新執行個體。</summary>
      <param name="commit">指示是否認可異動的值。</param>
      <param name="lastTransaction">如果這是要關閉的最後一個異動則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>取得值，指出這是否為要關閉的最後一個異動。</summary>
      <returns>如果這是要關閉的最後一個異動則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>指示設計工具是否在異動上呼叫 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</summary>
      <returns>如果設計工具在異動上呼叫 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>表示處理設計工具的 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>表示可從設計工具叫用 (Invoke) 的動詞命令 (Verb)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 類別的新執行個體。</summary>
      <param name="text">顯示給使用者的功能表命令文字。</param>
      <param name="handler">執行動詞命令動作的事件處理常式。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 類別的新執行個體。</summary>
      <param name="text">顯示給使用者的功能表命令文字。</param>
      <param name="handler">執行動詞命令動作的事件處理常式。</param>
      <param name="startCommandID">這個動詞命令的起始命令 ID。 根據預設值，設計工具架構會將某範圍的命令 ID 保留給動詞命令。 您可以藉由提供自訂命令 ID 的方式覆寫預設值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>覆寫 <see cref="M:System.Object.ToString" />。</summary>
      <returns>動詞命令的文字，如果文字欄位空白，則為空字串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>取得或設定動詞命令的功能表項目描述。</summary>
      <returns>描述功能表項目的字串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>取得功能表上動詞命令的文字描述。</summary>
      <returns>動詞命令的描述。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 物件的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>使用 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 物件指定的陣列，來初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 類別的新執行個體。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 陣列，表示要包含在集合中的動詞命令。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>將指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 加入至集合。</summary>
      <param name="value">要加入至集合的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>動詞命令已在該處加入的集合索引。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>加入指定的設計工具動詞命令集至集合。</summary>
      <param name="value">要加入至集合中之 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 物件的陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>加入指定的設計工具動詞命令集合至集合。</summary>
      <param name="value">要加入至集合的 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>取得值，表示指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 是否存在於集合中。</summary>
      <param name="value">要在集合中搜尋的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>如果指定的物件存在於集合中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>複製集合成員至指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 陣列，起始於指定的目的索引。</summary>
      <param name="array">集合成員所要複製的目的陣列。</param>
      <param name="index">要開始複製到的目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>取得指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的索引。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" />，要在集合中取得其索引。</param>
      <returns>如果在清單中找到，則為指定物件的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>插入指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 於指定的索引處。</summary>
      <param name="index">要將動詞命令插入處的集合索引。</param>
      <param name="value">在集合中要插入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>引發 <see langword="Clear" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>引發 <see langword="Insert" /> 事件。</summary>
      <param name="index">要插入項目處的索引。</param>
      <param name="value">要插入的物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>引發 <see langword="Remove" /> 事件。</summary>
      <param name="index">要移除項目處的索引。</param>
      <param name="value">要移除的物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>引發 <see langword="Set" /> 事件。</summary>
      <param name="index">要設定項目處的索引。</param>
      <param name="oldValue">舊物件。</param>
      <param name="newValue">新物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>引發 <see langword="Validate" /> 事件。</summary>
      <param name="value">要驗證的物件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>從集合移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引處的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index">要取得或設定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 處的索引。</param>
      <returns>集合中每個有效索引處的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>表示可支援設計階段授權提供者 (Provider) 的設計階段授權內容。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>取得儲存的授權識別碼。</summary>
      <param name="type">授權識別碼的型別。</param>
      <param name="resourceAssembly">取得索引鍵的來源組件。</param>
      <returns>儲存的授權識別碼，與指定的型別相符。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>設定儲存的授權識別碼。</summary>
      <param name="type">授權識別碼的型別。</param>
      <param name="key">授權識別碼。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>取得授權使用方法模式。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LicenseUsageMode" />，表示內容的授權模式。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>提供設計階段授權內容序列化 (Serialization) 的支援。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>使用指定的索引鍵和輸出資料流，序列化指定的設計階段授權內容中的授權。</summary>
      <param name="o">要輸出的目的資料流。</param>
      <param name="cryptoKey">用來加密 (Encryption) 的索引鍵。</param>
      <param name="context">
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />，表示授權內容。</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>定義識別項，這個識別項指示說明資訊要求產生的所在內容的相關資訊。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>一般內容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>工具視窗選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>視窗。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>為類別或成員指定內容關鍵字。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的預設值。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 類別的新執行個體。</summary>
      <param name="keyword">Help 關鍵字值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>初始化指定型別之 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 類別的新執行個體。</summary>
      <param name="t">會在其中使用 Help 關鍵字的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 執行個體是否相等。</summary>
      <param name="obj">與目前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 相比較的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 和目前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>判斷 Help 關鍵字是否為 <see langword="null" />。</summary>
      <returns>如果 Help 關鍵字為 <see langword="true" />，則為 <see langword="null" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>取得這個屬性提供的說明關鍵字。</summary>
      <returns>這個屬性提供的說明關鍵字。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>定義表示 Help 關鍵字型別的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>要按下 F1 要求相關說明的關鍵字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>篩選條件關鍵字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>一般關鍵字。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>提供可加入和移除事件處理常式的介面給加入、變更、移除或重新命名元件的事件，並提供可引發 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>發生於元件已加入時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>發生於正在加入元件的過程中。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>發生於元件已變更時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>發生於正在變更元件的過程中。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>發生於元件已移除時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>發生於正在移除元件的過程中。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>發生於元件重新命名時。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>向元件變更服務通知特定元件已變更。</summary>
      <param name="component">已變更的元件。</param>
      <param name="member">已變更的成員。 如果這個變更與任一成員無關，則這會是 <see langword="null" />。</param>
      <param name="oldValue">成員的舊值。 只有在成員不是 <see langword="null" /> 時，這才有效。</param>
      <param name="newValue">成員的新值。 只有在成員不是 <see langword="null" /> 時，這才有效。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>向元件變更服務通知特定元件正在變更。</summary>
      <param name="component">正要變更的元件。</param>
      <param name="member">正在變更的成員。 如果這個變更與任一成員無關，則這會是 <see langword="null" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>在設計階段啟用元件的列舉。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>取得可用元件型別的清單。</summary>
      <param name="designerHost">提供設計階段服務的設計工具主應用程式。 可以是 <see langword="null" />。</param>
      <param name="baseType">指定要擷取之元件的基底型別 (Base Type)。 可以是 <see langword="null" />。</param>
      <returns>可用元件型別的清單。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>在元件建立期間提供一組建議的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>將元件的執行個體還原成其預設狀態。</summary>
      <param name="defaultValues">具有預設屬性值 (名稱/值組) 的字典，使用該字典可以重設元件的狀態。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>使用一組建議值初始化新元件。</summary>
      <param name="defaultValues">具有預設屬性值 (名稱/值組) 的字典，使用該字典可以初始化元件的狀態。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>提供建置 (Build) 自訂設計工具的基本架構。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>執行這個設計工具的預設動作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>使用指定的元件，初始化設計工具。</summary>
      <param name="component">與這個設計工具相關聯的元件。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>取得此設計工具正在設計的基底元件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" />，表示這個設計工具正在設計的基底元件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>取得設計工具所支援的設計階段動詞命令集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />，包含設計工具所支援的動詞命令，如果元件沒有動詞命令則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>在以下情況下提供事件通知：加入和移除主要設計工具時、變更選取的元件時，以及目前的主要計工具變更時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>發生於目前的根設計工具變更時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>發生於根設計工具建立時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>發生於文件的根設計工具被捨棄時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>發生於目前的設計檢視選取變更時。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>取得目前主動式文件的根設計工具。</summary>
      <returns>目前的主動式文件，或 <see langword="null" /> (如果沒有主動式文件)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>取得根設計工具的集合，用來設計目前在開發環境中的主動式文件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerCollection" />，包含已經建立而且還沒捨棄的根設計工具。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>提供可以讓設計工具存取和篩選 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件字典的介面，在該物件中儲存了屬性 (Property)、屬性 (Attribute) 甚至是元件設計工具可公開至設計階段環境的事件描述項。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>在衍生類別中覆寫時，允許設計工具可以變更或移除透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開之屬性集中的項目。</summary>
      <param name="attributes">元件類別的 <see cref="T:System.Attribute" /> 物件。 屬性字典中索引鍵為屬性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>在衍生類別中覆寫時，允許設計工具可以變更或移除透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開之屬性集中的項目。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 物件，表示元件類別的事件。 事件字典中的索引鍵是事件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>在衍生類別中覆寫時，允許設計工具可以變更或移除透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開之屬性集中的項目。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件，表示元件類別的屬性。 屬性字典中的索引鍵是屬性名稱。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>在衍生類別中覆寫時，允許設計工具可以將項目加入到透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公開的屬性集。</summary>
      <param name="attributes">元件類別的 <see cref="T:System.Attribute" /> 物件。 屬性字典中索引鍵為屬性的 <see cref="P:System.Attribute.TypeId" /> 值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>在衍生類別中覆寫時，允許設計工具可以將項目加入到透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公開的事件集。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 物件，表示元件類別的事件。 事件字典中的索引鍵是事件名稱。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>在衍生類別中覆寫時，允許設計工具可以將項目加入到透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公開的屬性集。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件，表示元件類別的屬性。 屬性字典中的索引鍵是屬性名稱。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>提供用來管理設計工具異動和元件的介面。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>發生於這個設計工具啟動時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>發生於這個設計工具停用時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>發生於這個設計工具完成載入其文件時。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件的事件處理常式。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的事件處理常式。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件的事件處理常式。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>加入 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件的事件處理常式。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>啟動這個主應用程式正在裝載的設計工具。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>建立指定型別的元件，並將其加入至設計文件中。</summary>
      <param name="componentClass">要建立的元件類型。</param>
      <returns>新建立的元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>建立指定型別和名稱的元件，並將其加入至設計文件中。</summary>
      <param name="componentClass">要建立的元件類型。</param>
      <param name="name">元件的名稱。</param>
      <returns>新建立的元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>建立 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可以封裝事件序列，以改善效能，並啟用復原和取消復原支援功能。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新執行個體。 完成異動步驟時，您應該呼叫這個物件上的 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>使用指定的異動描述，建立 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />，它可以用來封裝事件序列，以改善效能，並啟用復原和取消復原支援功能。</summary>
      <param name="description">新建立的異動的標題或描述。</param>
      <returns>新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 完成異動步驟時，您應該呼叫這個物件上的 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>終結指定的元件，並將其從設計工具容器移除。</summary>
      <param name="component">要終結的元件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>取得含有指定元件的設計工具執行個體。</summary>
      <param name="component">要為其擷取設計工具的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> 或 <see langword="null" /> (如果指定元件沒有設計工具)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>取得指定的、完整的型別名稱的執行個體。</summary>
      <param name="typeName">要載入的型別名稱。</param>
      <returns>指定型別名稱的型別物件，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>取得這個設計工具主應用程式的容器。</summary>
      <returns>這個主應用程式 (Host) 的 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>取得數值，指示設計工具主應用程式目前是否在異動中。</summary>
      <returns>如果異動正在進行中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>取得數值，指示設計工具主應用程式目前是否正在載入文件。</summary>
      <returns>如果設計工具主應用程式目前正在載入文件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>取得用來做為目前設計根元件之基底類別的執行個體。</summary>
      <returns>根元件類別的執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>取得正在設計的類別的完整名稱。</summary>
      <returns>基底元件類別的完整名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>取得目前異動的描述。</summary>
      <returns>目前異動的描述。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>為設計工具主應用程式指定可報告交易狀態的方法。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>取得值，表示設計工具主應用程式是否正在關閉交易。</summary>
      <returns>如果設計工具正在關閉交易，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>提供對設計工具選項的存取，這些選項位在 Visual Studio 開發環境中 [工具]**** 功能表的 [選項]**** 命令下。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>取得指定之 [Windows Form 設計工具] 選項的值。</summary>
      <param name="pageName">定義選項的頁面名稱。</param>
      <param name="valueName">選項屬性的名稱。</param>
      <returns>指定的選項值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>設定指定之 [Windows Form 設計工具] 選項的值。</summary>
      <param name="pageName">定義選項的頁面名稱。</param>
      <param name="valueName">選項屬性的名稱。</param>
      <param name="value">新值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>提供透過服務的基本、元件站台特定、機碼值組字典，設計工具可使用它來儲存使用者定義的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>取得對應於指定值的索引鍵。</summary>
      <param name="value">要在字典中查詢的值。</param>
      <returns>相關的索引鍵，或 <see langword="null" /> (如果沒有索引鍵)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>取得對應於指定索引鍵的值。</summary>
      <param name="key">要為其查詢值的索引鍵。</param>
      <returns>相關的值，或 <see langword="null" /> (如果沒有值)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>設定指定的機碼值組。</summary>
      <param name="key">做為與值相關的索引鍵的物件。</param>
      <param name="value">要儲存的值。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>提供為元件事件登錄事件處理常式的服務。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>建立指定元件和事件之事件處理常式方法的唯一名稱。</summary>
      <param name="component">事件所連接的元件執行個體。</param>
      <param name="e">要為其建立名稱的事件。</param>
      <returns>這個事件的事件處理常式方法的建議名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>取得具有與指定事件相容之方法簽章的事件處理常式方法的集合。</summary>
      <param name="e">要為其取得相容事件處理常式方法的事件。</param>
      <returns>字串的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>取得指定屬性描述項表示之事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> (如果指定屬性描述項表示事件)。</summary>
      <param name="property">表示事件的屬性。</param>
      <returns>屬性所表示事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或 <see langword="null" /> (如果屬性不表示事件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>將事件描述項集合轉換為屬性描述項集合。</summary>
      <param name="events">要轉換為屬性的事件。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件陣列，描述事件集。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>將單一事件描述項轉換為屬性描述項。</summary>
      <param name="e">要轉換的事件。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，描述事件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>顯示設計工具的使用者程式碼。</summary>
      <returns>如果程式碼已顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>顯示指定事件的使用者程式碼。</summary>
      <param name="component">事件所連接的元件。</param>
      <param name="e">要顯示的事件。</param>
      <returns>如果程式碼已顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>在指定行中顯示設計工具的使用者程式碼。</summary>
      <param name="lineNumber">要放置插入號 (Caret) 的行數。</param>
      <returns>如果程式碼已顯示，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>提供可列出擴充性提供者 (Extender Provider) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>取得元件的擴充性提供者的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IExtenderProvider" /> 型別的陣列，會列示作用中的擴充性提供者。 如果找不到提供者，會傳回空陣列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>提供在設計階段加入及移除擴充性提供者 (Extender Provider) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>加入指定的擴充性提供者。</summary>
      <param name="provider">要加入的擴充性提供者。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>移除指定的擴充性提供者。</summary>
      <param name="provider">要移除的擴充性提供者。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>提供在設計階段顯示說明主題以及加入和移除 Help 關鍵字的方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>加入內容屬性至文件。</summary>
      <param name="name">要加入的屬性名稱。</param>
      <param name="value">屬性的值。</param>
      <param name="keywordType">關鍵字的型別，來自列舉型別 <see cref="T:System.ComponentModel.Design.HelpKeywordType" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>從文件中移除所有現有的內容屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>建立本機的 <see cref="T:System.ComponentModel.Design.IHelpService" /> 以管理子內容。</summary>
      <param name="contextType">要加入的子內容的優先型別。</param>
      <returns>新建立的 <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>移除先前加入的內容屬性。</summary>
      <param name="name">要移除的屬性名稱。</param>
      <param name="value">要移除的屬性值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>移除以 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> 建立的內容。</summary>
      <param name="localContext">要移除的本機內容 <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>顯示對應於指定關鍵字的說明主題。</summary>
      <param name="helpKeyword">要顯示之說明主題的關鍵字。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>顯示對應於指定 URL 的說明主題。</summary>
      <param name="helpUrl">要顯示之說明主題的 URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>提供識別某個元件的元件之方法。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>搜尋指定的元件，以找出實作 <see cref="T:System.ComponentModel.IComponent" /> 介面的欄位，並將每一個欄位加入指定的容器，以儲存每一個欄位的繼承層級 (可利用 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法來擷取繼承層級)。</summary>
      <param name="component">要搜尋的 <see cref="T:System.ComponentModel.IComponent" />。 搜尋作業從這個元件開始。</param>
      <param name="container">要加入元件的 <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>取得指定元件的繼承屬性。</summary>
      <param name="component">擷取繼承屬性的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的執行個體，描述指定元件的繼承層級。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>提供方法，用來管理可於設計模式中使用的全域設計工具動詞命令和功能表命令，以及顯示捷徑功能表的某些型別。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>將指定的標準功能表命令加入至功能表。</summary>
      <param name="command">要加入的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">指定之 <see cref="T:System.ComponentModel.Design.CommandID" /> 的 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 已經出現在功能表上。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>加入指定的設計工具動詞命令至全域設計工具動詞命令集。</summary>
      <param name="verb">要加入的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>搜尋指定的命令 ID，並傳回與它相關聯的功能表命令。</summary>
      <param name="commandID">要搜尋的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>與這個命令 ID 相關連的 <see cref="T:System.ComponentModel.Design.MenuCommand" />，或 <see langword="null" /> (如果找不到命令)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>叫用功能表或與指定之命令 ID 相符的設計工具動詞命令。</summary>
      <param name="commandID">要搜尋和執行之命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>如果找到命令且叫用成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>從功能表移除指定的標準功能表命令。</summary>
      <param name="command">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>從全域設計工具動詞命令的集合移除指定的設計工具動詞命令。</summary>
      <param name="verb">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>在指定位置顯示指定的捷徑功能表。</summary>
      <param name="menuID">捷徑功能表要顯示的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x">X 座標，要在該螢幕座標上顯示捷徑功能表。</param>
      <param name="y">Y 座標，要在該螢幕座標上顯示捷徑功能表。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>取得目前可用的設計工具動詞命令集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />，包含目前可用的設計工具動詞命令。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>提供介面，在專案內依名稱或型別取得物件的參考、取得指定物件的名稱，以及在設計工具專案內找到指定物件的父物件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>取得包含指定元件的元件。</summary>
      <param name="reference">要為其擷取父元件的物件。</param>
      <returns>包含指定物件的基底 <see cref="T:System.ComponentModel.IComponent" />，或是，如果不存在父元件則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>取得指定元件的名稱。</summary>
      <param name="reference">要傳回其名稱的物件。</param>
      <returns>參考的物件名稱，或 <see langword="null" /> (如果物件參考無效)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>取得其名稱符合指定名稱的元件的參考。</summary>
      <param name="name">要參考傳回的目的元件名稱。</param>
      <returns>指定名稱參考的物件，或 <see langword="null" /> (如果沒有找到任何的參考)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>取得專案元件的所有可用參考。</summary>
      <returns>所有物件的陣列，具有可供 <see cref="T:System.ComponentModel.Design.IReferenceService" /> 使用的參考。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>取得指定型別之元件的所有可用參考。</summary>
      <param name="baseType">物件的型別，要傳回其執行個體的參考。</param>
      <returns>指定型別的所有可用物件的陣列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>提供設計工具的介面，存取特定 <see cref="T:System.Globalization.CultureInfo" /> 資源型別的資源讀取器 (Reader) 和寫入器 (Writer)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>找到指定文化特性的資源讀取器 (Reader)，並將其傳回。</summary>
      <param name="info">資源的 <see cref="T:System.Globalization.CultureInfo" />，會為其擷取資源讀取器。</param>
      <returns>
        <see cref="T:System.Resources.IResourceReader" /> 介面，包含文化特性的資源，或 <see langword="null" /> (如果文化特性資源不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>找到指定文化特性 (Culture) 的資源寫入器，並將其傳回。</summary>
      <param name="info">要為其建立資源寫入器的資源的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns>指定文化特性的 <see cref="T:System.Resources.IResourceWriter" /> 介面。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>提供根層次設計工具檢視技術的支援。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>取得指定的檢視技術之檢視物件。</summary>
      <param name="technology">
        <see cref="T:System.ComponentModel.Design.ViewTechnology" />，表示特定的檢視技術。</param>
      <exception cref="T:System.ArgumentException">指定的檢視技術並不受支援或並不存在。</exception>
      <returns>物件，表示這個設計工具的檢視。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>取得技術的集合，這個設計工具可以支援它的顯示。</summary>
      <returns>支援的 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值的陣列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>提供介面供設計工具選取元件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>目前選取範圍變更時發生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>發生於目前的選取將要變更時。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>取得值，表示指定的元件是否為目前所選取的。</summary>
      <param name="component">要測試的元件。</param>
      <returns>如果元件是使用者目前選取的一部分，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>取得目前所選取元件的集合。</summary>
      <returns>集合，表示目前所選取的一組元件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>選取指定的元件集合。</summary>
      <param name="components">選取的元件集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>從符合指定選取類型的指定元件集合中，選取元件。</summary>
      <param name="components">選取的元件集合。</param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 列舉中的值。 預設為 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>取得物件，為目前主要的選取物件。</summary>
      <returns>物件，為目前主要的選取物件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>取得選取物件的計數。</summary>
      <returns>選取物件的數目。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>提供服務的容器 (Container)。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>將指定的服務加入至服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="callback">用來建立服務的回撥物件。 如此可讓服務宣告為可用，但是會延遲物件的建立，直到要求服務為止。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>將指定的服務加入至服務容器，並選擇性地將服務升級至父項服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="callback">用來建立服務的回撥物件。 如此可讓服務宣告為可用，但是會延遲物件的建立，直到要求服務為止。</param>
      <param name="promote">
        <see langword="true" /> 表示將這個要求升級至任何父項服務容器，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>將指定的服務加入至服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="serviceInstance">要加入之服務類型的執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>將指定的服務加入至服務容器，並選擇性地將服務升級至任何父項服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="serviceInstance">要加入之服務類型的執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
      <param name="promote">
        <see langword="true" /> 表示將這個要求升級至任何父項服務容器，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>從服務容器中移除指定的服務類型。</summary>
      <param name="serviceType">要移除之服務的類型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>從服務容器中移除指定的服務類型，並選擇性地將服務升級至父項服務容器。</summary>
      <param name="serviceType">要移除之服務的類型。</param>
      <param name="promote">
        <see langword="true" /> 表示將這個要求升級至任何父項服務容器，否則為 <see langword="false" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>為建置一組相關的自訂設計工具提供支援。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>取得子設計工具的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含目前設計工具之 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子物件的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>取得父設計工具。</summary>
      <returns>代表父設計工具的 <see cref="T:System.ComponentModel.Design.IDesigner" />，如果沒有父代，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>提供介面，在設計模式中修改元件的成員描述項集。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>篩選元件透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開的屬性。</summary>
      <param name="component">要篩選其屬性的元件。</param>
      <param name="attributes">可以修改的屬性字典。</param>
      <returns>如果要對篩選的屬性集進行快取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>篩選元件透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開的事件。</summary>
      <param name="component">要為其篩選事件的元件。</param>
      <param name="events">可以修改的事件字典。</param>
      <returns>如果要對篩選的事件集進行快取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>篩選元件透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 所公開的屬性。</summary>
      <param name="component">要為其篩選屬性的元件。</param>
      <param name="properties">可以修改的屬性字典。</param>
      <returns>如果要對篩選的屬性集進行快取，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>探索設計階段可用的型別。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>擷取可用型別的清單。</summary>
      <param name="baseType">要符合的基底型別。 可以是 <see langword="null" />。</param>
      <param name="excludeGlobalTypes">指出是否應檢查所有參考組件的型別。</param>
      <returns>型別集合，與 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" /> 所指定的準則相符。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>提供以名稱擷取組件 (Assembly) 或型別的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>取得要求的組件。</summary>
      <param name="name">要擷取的組件名稱。</param>
      <returns>要求組件的執行個體，或 <see langword="null" /> (如果找不到組件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>取得要求的組件。</summary>
      <param name="name">要擷取的組件名稱。</param>
      <param name="throwOnError">如果找不到組件時，這個方法應擲回例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。並且如果找不到組件，這個方法會傳回 <see langword="null" />。</param>
      <returns>要求組件的執行個體，或 <see langword="null" /> (如果找不到組件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>取得檔案的路徑，組件就是從這裡被載入。</summary>
      <param name="name">組件的名稱。</param>
      <returns>檔案的路徑，組件就是從這裡被載入。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>載入具有指定名稱的型別。</summary>
      <param name="name">型別的名稱。 如果型別名稱不是指示組件的完整名稱，這個服務會搜尋內部的參考組件集合。</param>
      <returns>
        <see cref="T:System.Type" /> 的執行個體，對應到指定的名稱，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>載入具有指定名稱的型別。</summary>
      <param name="name">型別的名稱。 如果型別名稱不是指示組件的完整名稱，這個服務會搜尋內部的參考組件集合。</param>
      <param name="throwOnError">如果找不到組件時，這個方法應擲回例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。並且如果找不到組件，這個方法會傳回 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.Type" /> 的執行個體，對應到指定的名稱，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>載入具有指定名稱的型別。</summary>
      <param name="name">型別的名稱。 如果型別名稱不是指示組件的完整名稱，這個服務會搜尋內部的參考組件集合。</param>
      <param name="throwOnError">如果找不到組件時，這個方法應擲回例外狀況，則為 <see langword="true" />，否則為 <see langword="false" />。並且如果找不到組件，這個方法會傳回 <see langword="null" />。</param>
      <param name="ignoreCase">若要在搜尋型別時忽略大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Type" /> 的執行個體，對應到指定的名稱，或 <see langword="null" /> (如果找不到型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>加入參考至指定的組件。</summary>
      <param name="name">
        <see cref="T:System.Reflection.AssemblyName" />，表示要參考的組件。</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>表示 Windows 功能表或工具列命令項目。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>發生於功能表命令變更時。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 類別的新執行個體。</summary>
      <param name="handler">當使用者選取功能表項目或工具列按鈕時，所引發的事件。</param>
      <param name="command">唯一命令 ID，連結這個功能表命令到環境的功能表。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>叫用命令。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>叫用具有指定參數的命令。</summary>
      <param name="arg">命令所使用的選擇性引數。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>引發 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。</summary>
      <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>傳回這個功能表命令的字串表示。</summary>
      <returns>包含 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 屬性值的字串，後面附加任何已設定之旗標的名稱，並以 (|) 隔開。 這些旗標屬性包含 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" /> 和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>取得或設定值，表示是否檢查這個功能表項目。</summary>
      <returns>如果項目已經核取，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>取得與這個功能表命令相關的 <see cref="T:System.ComponentModel.Design.CommandID" />。</summary>
      <returns>與功能表命令相關的 <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>取得值，表示是否可以使用這個功能表項目。</summary>
      <returns>如果啟用此項目則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>取得這個功能表項目的 OLE 命令狀態程式碼。</summary>
      <returns>整數，含有反映這個功能表項目狀態之狀態旗標的混合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>取得與 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 關聯的公用屬性。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />，包含 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 的公用屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>取得或設定值，表示是否支援這個功能表項目。</summary>
      <returns>如果支援項目 (預設)，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>取得或設定值，表示功能表項目是否為可見。</summary>
      <returns>如果項目為可見的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>定義指示選取類型的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>表示新增選取範圍，將選取的元件加入目前的選取範圍，並維護目前的那一組所選元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>表示一般選取。 此選取服務會回應 Ctrl 和 Shift 鍵，以支援在選取範圍中加入或移除元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>表示使用者按一下元件時所發生的選取。 如果已經選取新選取的元件，它會升級成為主要的選取元件，而不會被取消選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>表示當滑鼠指標在元件的上方，使用者按下滑鼠按鈕時所發生的選取。 如果已經選取指標下方的元件，它會升級成為主要的選取元件，而不會被取消選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>表示在選取元件之後，使用者立刻放開滑鼠按鈕時所發生的選取。 如果已經選取新選取的元件，它會升級成為主要的選取元件，而不會被取消選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>表示一般選取。 此選取服務會回應 Ctrl 和 Shift 鍵，以支援在選取範圍中加入或移除元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>表示使用者按一下元件時所發生的主要選取。 如果已經選取選擇清單中的元件，則該元件會升級成為主要的選取元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>表示移除選取範圍，從目前的選取範圍中移除選取的元件，並維護目前的那一組所選元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>表示在選取內容被取代時所發生的選取。 選取服務會使用取代，取代目前的選取。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>表示切換選取，在目前的選取範圍以及提供的選取範圍之間進行切換。 如果已經選取某個元件，並將它傳遞到 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> (其選取型別為 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />)，則將會取消選取該元件。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>將有效的選取類型識別為 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" /> 或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>提供基底類別，以序列化元件集合或可序列化物件至序列化存放區。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>建立新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns>新建立的序列化存放區。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>還原序列化指定的存放區，以產生物件集合。</summary>
      <param name="store">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
      <returns>根據儲存狀態建立的物件集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>還原序列化指定的存放區，並使用已還原序列化的 <see cref="T:System.ComponentModel.IContainer" /> 物件填入指定的 <see cref="T:System.ComponentModel.IComponent" />。</summary>
      <param name="store">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">要加入 <see cref="T:System.ComponentModel.IContainer" /> 物件的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
      <returns>根據儲存狀態建立的物件集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>還原序列化指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至指定的容器中。</summary>
      <param name="store">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">要加入 <see cref="T:System.ComponentModel.IComponent" /> 物件的容器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>還原序列化指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至指定的容器，可以選擇性地驗證回收型別。</summary>
      <param name="store">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">要加入 <see cref="T:System.ComponentModel.IComponent" /> 物件的容器。</param>
      <param name="validateRecycledTypes">
        <see langword="true" /> 表示保證還原序列化只會在套用至同一型別的物件時運作。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>還原序列化指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至指定的容器，可以選擇性地套用預設屬性值。</summary>
      <param name="store">要還原序列化的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container">要加入 <see cref="T:System.ComponentModel.IComponent" /> 物件的容器。</param>
      <param name="validateRecycledTypes">
        <see langword="true" /> 表示保證還原序列化只會在套用至同一型別的物件時運作。</param>
      <param name="applyDefaults">
        <see langword="true" /> 表示應當套用預設屬性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以處理之格式的資料。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>從資料流載入 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />，從其中載入存放區。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 不包含先前呼叫 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> 儲存的資料。</exception>
      <returns>新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>序列化指定的物件至指定的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="value" /> 的狀態將寫入其中。</param>
      <param name="value">要序列化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>序列化指定的物件，因而能夠產生預設屬性值。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="value" /> 的狀態將序列化至其中。</param>
      <param name="value">要序列化的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>在指定的物件上將指定的成員序列化。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="member" /> 的狀態將序列化至其中。</param>
      <param name="owningObject">附加 <paramref name="member" /> 的物件。</param>
      <param name="member">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，指定要序列化的成員。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>用預設屬性值序列化指定物件上的指定成員。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />，<paramref name="member" /> 的狀態將序列化至其中。</param>
      <param name="owningObject">附加 <paramref name="member" /> 的物件。</param>
      <param name="member">要序列化的成員。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已關閉，或 <paramref name="store" /> 不是支援的序列化存放區類型。 使用由 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> 傳回的存放區。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>提供堆疊物件，序列化工具可以使用這個堆疊物件，使資訊可以為巢狀序列化工具所用。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>將物件附加至堆疊結尾，而不是將它推至堆疊的頂端。</summary>
      <param name="context">要附加至堆疊的內容物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>將目前物件從堆疊中移除，並傳回物件的值。</summary>
      <returns>已從堆疊中移除的物件；如果堆疊中沒有物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>推入或放置指定物件至堆疊上。</summary>
      <param name="context">要推入至堆疊的內容物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>取得堆疊上的目前物件。</summary>
      <returns>堆疊上的目前物件，或 <see langword="null" /> (如果沒有物件推入)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>取得所指定層次之堆疊上的物件。</summary>
      <param name="level">要在堆疊上擷取的物件層次。 第 0 層是堆疊的最上層，第 1 層則是下一層，依此類推。 這一層必須是 0 或更大的值。 如果層次數字大於堆疊層次的數字，就會傳回 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> 小於 0。</exception>
      <returns>指定層次堆疊上的物件，或 <see langword="null" /> (如果該層次上沒有物件存在)。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>取得在堆疊上繼承自或實作指定型別的第一個物件。</summary>
      <param name="type">要從內容堆疊中擷取的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <returns>在堆疊上繼承自或實作指定型別的第一個物件，或 <see langword="null" /> (如果在堆疊上沒有物件實作該型別)。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>將 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 屬性放置於序列化程式上，表示將類別用做該型別序列化程式的預設提供者。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>使用具名提供者類型，初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="providerTypeName">序列化提供者類型的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>使用指定的提供者類型，初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="providerType">序列化提供者的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>取得序列化提供者的類型名稱。</summary>
      <returns>包含提供者名稱的字串。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>提供基本設計工具載入器介面，可用於實作自訂設計工具載入器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>開始載入設計工具。</summary>
      <param name="host">載入器主應用程式，這個載入器是藉由它載入元件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>釋放 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>將快取變更寫入至載入設計工具的來源位置。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>取得值，表示載入器目前是否正在載入文件。</summary>
      <returns>如果載入器目前正在載入文件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>提供可以擴充設計工具主應用程式 (Designer Host) 的介面，支援從序列化狀態的載入。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>結束設計工具載入作業。</summary>
      <param name="baseClassName">這個設計工具正在設計的文件基底類別的完整名稱。</param>
      <param name="successful">如果設計工具載入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="errorCollection">集合，含有載入期間所遇到的錯誤 (如果有的話)。 如果沒有遇到錯誤，則傳遞空集合或者 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>重新載入設計文件。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>提供擴充 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 的介面，以指定載入設計文件時是否容忍錯誤。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>取得或設定值，指出在發生錯誤時是否能重新載入。</summary>
      <returns>如果在偵測到錯誤時設計工具載入器可以重新載入設計文件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>取得或設定值，指出呼叫 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 時是否應忽略錯誤。</summary>
      <returns>如果在重新載入時設計工具載入器將會忽略錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>提供可以擴充設計工具載入器的介面，支援外部元件的非同步 (Asynchronous) 載入。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>將外部元件登錄成由這個介面所管理之載入處理的一部分。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>表示相依載入已完成。</summary>
      <param name="successful">如果設計工具載入成功，則為 <see langword="true" />；如果錯誤使得載入無法完成，則為 <see langword="false" />。</param>
      <param name="errorCollection">錯誤的集合，在載入期間發生 (如果有的話)。 如果沒有發生錯誤，您可以傳送空集合或 <see langword="null" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>重新載入設計文件。</summary>
      <returns>如果接受重新載入要求，則為 <see langword="true" />；如果載入器不允許重新載入，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>提供可以管理設計階段序列化 (Serialization) 的介面。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>於 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 無法在序列化管理員的名稱表格中找到指定的名稱時發生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>於序列化完成時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>將指定的序列化提供者加入序列化管理員。</summary>
      <param name="provider">要加入的序列化提供者。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>建立指定型別的執行個體，並將它加入具名執行個體的集合。</summary>
      <param name="type">要建立的資料型別。</param>
      <param name="arguments">要傳送給這個型別的建構函式的引數。</param>
      <param name="name">物件的名稱。 之後便可經由 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />，用這個名稱存取物件。 如果傳遞的是 <see langword="null" />，物件還是可以建立，但是無法以名稱存取。</param>
      <param name="addToContainer">如果為 <see langword="true" />，會將這個物件加入設計容器中。 物件必須實作 <see cref="T:System.ComponentModel.IComponent" />，才能發生效用。</param>
      <returns>新建立的物件執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>取得以指定的名稱建立的物件的執行個體，或 <see langword="null" /> (如果物件不存在)。</summary>
      <param name="name">所要擷取的物件名稱。</param>
      <returns>有指定名稱的物件的執行個體，或 <see langword="null" /> (如果找不到有該名稱的物件)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>取得指定物件的名稱，或 <see langword="null" /> (如果物件沒有名稱)。</summary>
      <param name="value">要為其擷取名稱的物件。</param>
      <returns>物件的名稱，或 <see langword="null" /> (如果物件未命名)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>為指定的物件型別取得要求的型別的序列化工具。</summary>
      <param name="objectType">要為其取得序列化工具的物件型別。</param>
      <param name="serializerType">要擷取的序列化工具型別。</param>
      <returns>要求的序列化工具的執行個體，或 <see langword="null" /> (如果找不到適當的序列化工具)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>取得指定名稱的型別。</summary>
      <param name="typeName">要載入型別的完整名稱。</param>
      <returns>型別的執行個體，或 <see langword="null" /> (如果無法載入型別)。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>將自訂的序列化提供者從序列化管理員移除。</summary>
      <param name="provider">要移除的提供者。 這個物件必須已經使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> 加入。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>報告序列化中的錯誤。</summary>
      <param name="errorInformation">要報告的錯誤。 這個資訊物件可以是任何物件型別。 如果是例外狀況，其訊息會被擷取並向使用者報告。 如果是任何其他型別，則會呼叫 <see cref="M:System.Object.ToString" />，以便向使用者顯示資訊。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>設定指定的現有物件的名稱。</summary>
      <param name="instance">要命名的物件執行個體。</param>
      <param name="name">要給執行個體的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>取得以堆疊為基礎、使用者定義的儲存區，這個區域對於序列化程式之間的通訊很有用。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />，儲存資料。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>指示可使用可用的序列化工具序列化的自訂屬性。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，含有要被序列化的屬性。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>提供能夠存取序列化工具的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>使用指定的屬性 (Attribute)，取得序列化工具。</summary>
      <param name="manager">要求序列化工具的序列化管理員。</param>
      <param name="currentSerializer">指定之型別的目前序列化工具執行個體。 如果指定型別的序列化工具不存在，則這可能是 <see langword="null" />。</param>
      <param name="objectType">要序列化的物件資料型別。</param>
      <param name="serializerType">要建立的序列化工具資料型別。</param>
      <returns>要求型別的序列化工具執行個體，或 <see langword="null" /> (如果無法滿足要求)。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>提供可以叫用序列化 (Serialization) 和還原序列化 (Deserialization) 的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>將指定的序列化資料物件還原序列化，並傳回由資料所表示的物件集合。</summary>
      <param name="serializationData">物件，由序列化資料所組成。</param>
      <returns>物件的 <see cref="T:System.Collections.ICollection" />，這些物件重建自指定的序列化資料物件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>將指定的物件集合序列化，並將它們儲存在序列化資料物件中。</summary>
      <param name="objects">要序列化的物件集合。</param>
      <returns>物件，包含指定物件集合的序列化狀態。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>提供可以產生物件唯一名稱的服務。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>建立在指定容器中所有元件的唯一新名稱。</summary>
      <param name="container">加入新物件的所在容器。</param>
      <param name="dataType">接收名稱的物件資料型別。</param>
      <returns>資料型別的唯一名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>取得值，指出指定名稱是否有效。</summary>
      <param name="name">要驗證的名稱。</param>
      <returns>如果名稱有效，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>取得值，指出指定名稱是否有效。</summary>
      <param name="name">要驗證的名稱。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>提供建立物件執行個體 (Instance) 所需的資訊。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>使用指定的成員資訊和引數，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 類別的新執行個體。</summary>
      <param name="member">描述項的成員資訊。 這可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果這是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，它必須表示 <see langword="static" /> 成員。</param>
      <param name="arguments">要傳遞至成員的引數集合。 如果沒有引數，這個參數可以是 <see langword="null" /> 或空集合。 集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他執行個體組成。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，而且它並不代表 <see langword="static" /> 成員。  

-或- 
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.PropertyInfo" />，而且無法讀取。  

-或- 
<paramref name="member" /> 的類型為 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，且 <paramref name="arguments" /> 中的引數數量與 <paramref name="member" /> 的簽章不相符。

-或-

<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.ConstructorInfo" />，而且代表 <see langword="static" /> 成員。  

-或- 
<paramref name="member" /> 的型別為 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的引數數目不為零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>使用指定的成員資訊、引數和指示指定資訊是否完整描述執行個體的值，初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 類別的新執行個體。</summary>
      <param name="member">描述項的成員資訊。 這可以是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />。 如果這是 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，它必須表示 <see langword="static" /> 成員。</param>
      <param name="arguments">要傳遞至成員的引數集合。 如果沒有引數，這個參數可以是 <see langword="null" /> 或空集合。 集合也可以由 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的其他執行個體組成。</param>
      <param name="isComplete">如果指定資訊完整描述執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> 或 <see cref="T:System.Reflection.PropertyInfo" />，而且它不代表 <see langword="static" /> 成員。 
 <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.PropertyInfo" />，而且無法讀取。  
  
 <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />，而且 <paramref name="arguments" /> 中的引數數目不符合 <paramref name="member" /> 的簽章。  
  
 <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.ConstructorInfo" />，而且代表 <see langword="static" /> 成員。 
 <paramref name="member" /> 的型別為 <see cref="T:System.Reflection.FieldInfo" />，而且 <paramref name="arguments" /> 中的引數數目不為零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>叫用 (Invoke) 這個執行個體描述項，並傳回描述項所描述的物件。</summary>
      <returns>這個執行個體描述項所描述的物件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>取得可用來重建這個執行個體描述項所表示之物件執行個體的引數集合。</summary>
      <returns>引數的 <see cref="T:System.Collections.ICollection" />，這些引數可用來建立物件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>取得值，表示這個 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 的內容是否完整識別執行個體。</summary>
      <returns>如果完整描述該執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>取得描述與這個描述項相關之執行個體的成員資訊。</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" />，描述與這個物件相關的執行個體。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>表示物件和成員之間的單一關聯性。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>表示空的成員關聯性。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 類別的新執行個體。</summary>
      <param name="owner">擁有 <paramref name="member" /> 的物件。</param>
      <param name="member">要關聯至 <paramref name="owner" /> 的成員。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 或 <paramref name="member" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 執行個體是否相等。</summary>
      <param name="obj">與目前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 相比較的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 和目前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>測試兩個指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構是否相等。</summary>
      <param name="left">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在等號比較運算子的左方。</param>
      <param name="right">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在等號比較運算子的右方。</param>
      <returns>如果兩個 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構相等，則這個運算子會傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>測試兩個指定的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構是否不同。</summary>
      <param name="left">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在不等比較運算子的左方。</param>
      <param name="right">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，位在不等比較運算子的右方。</param>
      <returns>如果兩個 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構不同，則這個運算子會傳回 <see langword="true" />，否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>取得值，指出這個關聯性是否等於 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 關聯性。</summary>
      <returns>如果這個關聯性等於 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 關聯性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>取得相關成員。</summary>
      <returns>傳遞至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的成員。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>取得主控物件。</summary>
      <returns>傳遞至 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> 的主控物件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>提供將一個成員關聯至其他成員的基底類別。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>取得至指定來源關聯性的關聯性。</summary>
      <param name="source">來源關聯性。</param>
      <returns>至 <paramref name="source" /> 的關聯性，如果不存在關聯性，則為 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>建立來源物件和目標關聯性之間的關聯性。</summary>
      <param name="source">來源關聯性。</param>
      <param name="relationship">要設定至 source 的關聯性。</param>
      <exception cref="T:System.ArgumentException">服務不支援關聯性。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>取得值，指出是否支援指定的關聯性。</summary>
      <param name="source">來源關聯性。</param>
      <param name="relationship">要設定至 source 的關聯性。</param>
      <returns>如果支援這兩個特定物件之間的關聯性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>建立來源和目標物件之間的關聯性。</summary>
      <param name="source">來源關聯性。 這是關聯性指派的左側。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 為空，或服務不支援關聯性。</exception>
      <returns>與 <paramref name="source" /> 相關聯的目前關聯性，如果沒有關聯性，則為 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>建立來源和目標物件之間的關聯性。</summary>
      <param name="sourceOwner">來源關聯性的擁有者。</param>
      <param name="sourceMember">來源關聯性的成員。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 為空，或服務不支援關聯性。</exception>
      <returns>封裝來源和目標物件之間關聯性的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 結構，如果沒有關聯性，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 類別的新執行個體。</summary>
      <param name="name">要解析的名稱。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>取得要解析的物件名稱。</summary>
      <returns>要解析的物件名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>取得或設定符合名稱的物件。</summary>
      <returns>名稱與其相關聯的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>表示處理序列化 (Serialization) 管理員的 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>指示用於根 (Root) 設計工具物件的基底序列化工具。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>使用指定的屬性，初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerTypeName">序列化工具基底型別的名稱。 類別可包含多個序列化工具，因為它們具有不同的基底型別。</param>
      <param name="reloadable">如果序列化工具支援文件的動態重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>使用指定的屬性，初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerTypeName">序列化工具資料型別的完整名稱。</param>
      <param name="baseSerializerType">序列化工具基底型別的名稱。 類別可包含多個序列化工具，因為它們具有不同的基底型別。</param>
      <param name="reloadable">如果序列化工具支援文件的動態重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>使用指定的屬性，初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 類別的新執行個體。</summary>
      <param name="serializerType">序列化工具的資料型別。</param>
      <param name="baseSerializerType">序列化工具的基底型別。 類別可包含多個序列化工具，因為它們具有不同的基底型別。</param>
      <param name="reloadable">如果序列化工具支援文件的動態重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>取得值，表示根序列化工具是否支援設計文件的重新載入，而不需先配置設計工具主應用程式 (Designer Host)。</summary>
      <returns>如果根序列化工具支援重新載入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>取得序列化工具基底型別的完整型別名稱。</summary>
      <returns>序列化工具基底型別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>取得序列化工具的完整型別名稱。</summary>
      <returns>序列化工具型別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>取得此屬性型別的唯一 ID。</summary>
      <returns>物件，包含此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>提供基底類別，以儲存 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 的序列化資料。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>關閉序列化存放區。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>將存放區儲存至指定資料流。</summary>
      <param name="stream">存放區將序列化至的資料流。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>釋放 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 所使用的所有資源。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>取得序列化或還原序列化期間發生的錯誤集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含序列化或還原序列化期間發生的錯誤。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>提供 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 介面的簡單實作。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>使用指定的父服務提供者，初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 類別的新執行個體。</summary>
      <param name="parentProvider">父服務提供者。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>將指定的服務加入至服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="callback">可以建立服務的回呼物件。 這允許將服務宣告為可用的，但是會將物件的建立延遲至要求服務的時候。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>將指定的服務加入至服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="callback">可以建立服務的回呼物件。 這允許將服務宣告為可用的，但是會將物件的建立延遲至要求服務的時候。</param>
      <param name="promote">如果這個服務應該加入至任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>將指定的服務加入至服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="serviceInstance">要加入的服務執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>將指定的服務加入至服務容器。</summary>
      <param name="serviceType">要加入之服務的類型。</param>
      <param name="serviceInstance">要加入之服務類型的執行個體。 這個物件必須實作或繼承自 <paramref name="serviceType" /> 參數所指示的型別。</param>
      <param name="promote">如果這個服務應該加入至任何父服務容器，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">此容器內已含有 <paramref name="serviceType" /> 類型的服務。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>處置這個服務容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>處置這個服務容器。</summary>
      <param name="disposing">如果正在處置 <see cref="T:System.ComponentModel.Design.ServiceContainer" />，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>取得所要求的服務。</summary>
      <param name="serviceType">要擷取的服務類型。</param>
      <returns>如果可找到，則為服務的執行個體，如果無法找到，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>從服務容器中移除指定的服務類型。</summary>
      <param name="serviceType">要移除之服務的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>從服務容器中移除指定的服務類型。</summary>
      <param name="serviceType">要移除之服務的類型。</param>
      <param name="promote">如果這個服務應該從任何父服務容器移除，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>取得 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 直接實作的預設服務。</summary>
      <returns>預設服務。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>提供回呼 (Callback) 機制，這個回呼機制可以視需要建立服務的執行個體。</summary>
      <param name="container">要求服務建立的服務容器 (Container)。</param>
      <param name="serviceType">要建立的服務類型。</param>
      <returns>
        <paramref name="serviceType" /> 所指定的服務，或 <see langword="null" /> (如果無法建立服務)。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>為大部分應用程式可用的標準命令集合定義識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>取得 AlignBottom 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>取得 AlignHorizontalCenters 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>取得 AlignLeft 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>取得 AlignRight 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>取得 AlignToGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>取得 AlignTop 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>取得 AlignVerticalCenters 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>取得 ArrangeBottom 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>取得 ArrangeIcons 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>取得 ArrangeRight 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>取得 BringForward 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>取得 BringToFront 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>取得 CenterHorizontally 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>取得 CenterVertically 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>取得 Copy 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>取得 Cut 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>取得 Delete 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>取得文件大綱命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>取得 F1Help 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>取得 Group 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>取得 HorizSpaceConcatenate 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>取得 HorizSpaceDecrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>取得 HorizSpaceIncrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>取得 HorizSpaceMakeEqual 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>取得 LineupIcons 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>取得 LockControls 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>取得 MultiLevelRedo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>取得 MultiLevelUndo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>取得 Paste 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>取得 Properties 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>取得 PropertiesWindow 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>取得 Redo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>取得 Replace 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>取得 SelectAll 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>取得 SendBackward 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>取得 SendToBack 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>取得 ShowGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>取得 ShowLargeIcons 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>取得 SizeToControl 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>取得 SizeToControlHeight 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>取得 SizeToControlWidth 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>取得 SizeToFit 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>取得 SizeToGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>取得 SnapToGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>取得 TabOrder 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>取得 Undo 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>取得 Ungroup 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>取得第一個動詞命令集合。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>取得最後一個動詞命令集合。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>取得 VertSpaceConcatenate 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>取得 VertSpaceDecrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>取得 VertSpaceIncrease 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>取得 VertSpaceMakeEqual 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>取得 ViewCode 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>取得 ViewGrid 命令的 <see cref="T:System.ComponentModel.Design.CommandID" />。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>定義 GUID 識別項，這個識別項會對應至可以在設計環境中取得的標準工具視窗集合。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>取得物件瀏覽器的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>取得輸出視窗的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>取得方案總管的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>取得屬性視窗的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>取得相關連結框架 (Frame) 的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>取得伺服器總管的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>取得工作清單的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>取得工具箱的 GUID。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>為指定的型別，提供型別描述提供者。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>取得指定之物件的型別描述提供者。</summary>
      <param name="instance">要為其取得型別描述提供者的物件。</param>
      <returns>與 <paramref name="instance" /> 對應的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>取得指定之型別的型別描述提供者。</summary>
      <param name="type">要為其取得型別描述提供者的型別。</param>
      <returns>與 <paramref name="type" /> 對應的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>定義設計工具主應用程式 (Designer Host) 所支援的技術集合的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>指定預設檢視技術的支援。
        
根目錄設計工具可以傳回任何型別的物件，但該物件必須與主機技術的配接器相容。 Visual Studio 這類裝載環境可用來插入新的檢視技術配接器。 Windows Form 設計工具的預設檢視物件是 <see cref="T:System.Windows.Forms.Control" /> 執行個體。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>表示直接將檢視物件傳遞至開發環境的模式。
        
檢視物件必須實作任何開發環境所需的介面。 Visual Studio 開發環境支援的檢視物件可以是 ActiveX 控制項、使用中文件，或是實作透過 Visual Studio VSI (Visual Studio 整合) 程式提供之 IVsWindowPane 介面的物件。 Visual Studio 開發環境提供此檢視技術的支援。 並非所有開發環境都支援此檢視技術。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>表示 Windows Form 控制項物件為主要設計工具提供顯示方式的模式。 設計工具主應用程式使用 Windows Form 控制項來填入開發環境文件視窗。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 標記元件的可視性。 如果有 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" />，視覺化設計工具 (Visual Designer) 可以在設計工具上顯示這個元件。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>預設可視性，即 <see langword="Yes" />。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>將元件標記為在視覺化設計工具中不可見。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>將元件標記為在視覺化設計工具中可見。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>建立新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，預設值為 <see langword="false" />。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>建立新的 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" />，並將其 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 屬性設定為 <paramref name="visible" /> 中的指定值。</summary>
      <param name="visible">設定 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 屬性時要依據的值。</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 進行比較的物件。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>取得值，表示此執行個體是否等於 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值。</summary>
      <returns>如果這個執行個體等於 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>取得或設定元件是否應該在設計階段顯示。</summary>
      <returns>如果元件應該在設計階段顯示，則為 <see langword="true" />；如果不應該，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>提供型別轉換子 (Type Converter) 將雙精度浮點數和浮點數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Enum" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>初始化指定型別之 <see cref="T:System.ComponentModel.EnumConverter" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要與這個列舉型別轉換子產生關聯的列舉型別。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成列舉型別物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的值物件轉換為列舉型別物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是列舉型別的有效值。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>針對這個驗證程式設計目標的資料型別，取得由該資料型別的標準值所組成的集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示從 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果從 <see langword="true" /> 傳回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的獨占清單則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，如果其他的值為可能則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，指出這個物件是否支援可以使用指定內容從清單選取的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>取得值，表示指定物件值對這個型別是否有效。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">要測試的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值對這個物件有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>取得可以用於排序列舉型別之值的 <see cref="T:System.Collections.IComparer" />。</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> 用於排序列舉型別的值。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>指定這個轉換子關聯的列舉值型別。</summary>
      <returns>這個轉換子關聯的列舉值型別。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>取得或設定 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，指定列舉型別的可能值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，指定列舉型別的可能值。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>提供事件的相關資訊。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名稱和屬性，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含事件的名稱和其屬性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 中的名稱，以及 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 陣列中的屬性，初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，具有成員的名稱和屬性。</param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 陣列，具有要加入至這個事件描述的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>使用指定的名稱和屬性陣列，初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 類別的新執行個體。</summary>
      <param name="name">事件的名稱。</param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 型別的陣列，包含事件屬性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>在衍生類別中覆寫時，將事件繫結至元件。</summary>
      <param name="component">元件，將事件提供給委派。</param>
      <param name="value">委派，表示處理事件的方法。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>在衍生類別中覆寫時，將委派與元件解除繫結，以便委派不再接收來自元件的事件。</summary>
      <param name="component">委派所繫結的元件。</param>
      <param name="value">要與元件解除繫結的委派。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>在衍生類別中覆寫時，取得這個事件所繫結的元件型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示事件所繫結的元件型別。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>在衍生類別中覆寫時，取得事件的委派型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示事件的委派型別。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>在衍生類別中覆寫時，取得指示事件委派是否為多點傳送委派的值。</summary>
      <returns>如果事件委派是多點傳送，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>指定要使用的空集合，而非建立沒有項目的新集合。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>使用 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 物件的指定陣列，初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 類別的新執行個體。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 型別的陣列，提供這個集合的事件。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>使用 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 物件的指定陣列，初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 類別的新執行個體。 可選擇將集合設為唯讀。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 型別的陣列，提供這個集合的事件。</param>
      <param name="readOnly">
        <see langword="true" /> 指定這是唯讀集合，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>將 <see cref="T:System.ComponentModel.EventDescriptor" /> 加入至集合結尾。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" />，要加入至集合中。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>從集合中移除所有物件。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>傳回值，表示集合是否含有指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>如果集合含有指定的 <paramref name="value" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>使用集合中之指定名稱取得事件的描述。</summary>
      <param name="name">要從集合中取得的事件名稱。</param>
      <param name="ignoreCase">如果您要忽略事件的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>具有指定名稱的 <see cref="T:System.ComponentModel.EventDescriptor" /> 或 <see langword="null" /> (如果事件不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>取得這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的列舉值。</summary>
      <returns>列舉值，實作 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>傳回指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns>集合中指定 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>將 <see cref="T:System.ComponentModel.EventDescriptor" /> 插入在指定索引處的集合。</summary>
      <param name="index">索引，在要插入 <paramref name="value" /> 參數的集合中。</param>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" />，要插入集合中。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，排序這個 <see cref="T:System.Collections.IComparer" /> 的成員。</summary>
      <param name="sorter">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>排序這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成員。 首先會套用指定的順序，其後是這個集合的預設排序，通常是依字母順序。</summary>
      <param name="names">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序的順序。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>從集合移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>從集合中移除位於指定索引位置的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="index">要移除的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>使用這個集合的預設排序，通常是依字母順序，排序這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成員。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，排序這個 <see cref="T:System.Collections.IComparer" /> 的成員。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，要用於排序這個集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>提供指定的排序順序，排序這個 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 的成員。</summary>
      <param name="names">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序的順序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>提供指定的排序順序和 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，排序這個 <see cref="T:System.Collections.IComparer" /> 的成員。</summary>
      <param name="names">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件排序的順序。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，要用於排序這個集合中的 <see cref="T:System.ComponentModel.EventDescriptor" /> 物件。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將集合的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>將項目新增至集合。</summary>
      <param name="value">要加入至集合的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>從集合中移除所有項目。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>決定集合中指定項目的索引。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>將項目插入集合中指定的索引處。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入至集合的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>從集合中移除第一個出現的特定物件。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定之索引處的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>取得這個集合中事件描述項的數目。</summary>
      <returns>這個集合中事件描述項的數目。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>取得或設定具有指定索引編號的事件。</summary>
      <param name="index">要取得或設定的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的以零起始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 不是 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
      <returns>具有指定索引編號的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>取得或設定具有指定名稱的事件。</summary>
      <param name="name">要取得或設定的 <see cref="T:System.ComponentModel.EventDescriptor" /> 的名稱。</param>
      <returns>具有指定名稱的 <see cref="T:System.ComponentModel.EventDescriptor" /> 或 <see langword="null" /> (如果事件不存在)。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>取得集合所包含的項目數目。</summary>
      <returns>集合中包含的元素數目。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出是否同步存取集合。</summary>
      <returns>如果同步存取集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns>如果集合具有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，表示集合是否為唯讀。</summary>
      <returns>如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>在指定的索引位置上取得或設定項目。</summary>
      <param name="index">要取得或設定的以零為起始元素索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>提供型別轉換子將可擴展的物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>取得由值參數所指定的物件型別的屬性集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，表示要其取得其屬性的物件型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 型別的陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有為這個元件所公開的屬性；如果沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定內容取得值，表示這個物件是否使用支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>
        <see langword="true" />，因為應該呼叫 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 尋找這個物件的屬性。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>指定擴充性提供者提供的屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>提供這個執行個體的值是否為衍生類別預設值的指示。</summary>
      <returns>如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>取得提供的屬性。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，封裝提供的屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>取得提供屬性的擴充性提供者。</summary>
      <returns>提供屬性的 <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>取得可以接收屬性之物件的型別。</summary>
      <returns>
        <see cref="T:System.Type" />，描述可以接收屬性之物件的型別。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Guid" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示此轉換子是否可以使用內容將指定來源型別中的物件轉換成 GUID 物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換為 GUID 物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換為另一個型別。</summary>
      <param name="context">格式子 (Formatter) 內容。</param>
      <param name="culture">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>提供事件處理常式中可以完全處理之事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>使用預設 <see cref="T:System.ComponentModel.HandledEventArgs" /> 屬性值 <see langword="false" />，初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>使用 <see cref="T:System.ComponentModel.HandledEventArgs" /> 屬性的指定預設值，初始化 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 類別的新執行個體。</summary>
      <param name="defaultHandledValue">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 屬性的預設值。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>取得或設定值，指出事件處理常式已經完全處理事件或系統應繼續自己的處理。</summary>
      <returns>如果事件已完全處理，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>表示方法，在事件處理常式傳回後，這個方法可以處理不一定需要進一步處理的事件。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.HandledEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>提供繫結至資料來源時支援複雜和簡單案例所需的功能。</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>發生於清單變更或清單項目變更時。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入用來搜尋的索引中。</summary>
      <param name="property">要加入至用來搜尋之索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>將新的項目加入至清單中。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 為 <see langword="false" />。</exception>
      <returns>加入此清單的項目。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>根據 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" /> 來排序清單。</summary>
      <param name="property">要做為排序依據的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>傳回具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</summary>
      <param name="property">要在其上搜尋的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">要搜尋的 <paramref name="property" /> 參數值。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 為 <see langword="false" />。</exception>
      <returns>具有指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的列索引。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>從用來搜尋的索引中移除 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property">要從用來搜尋的索引中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>移除任何使用 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 的套用排序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>取得值，指出您是否可以更新清單中的項目。</summary>
      <returns>如果您可以更新清單中的項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>取得值，指出您是否可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 將項目加入清單。</summary>
      <returns>如果您可以使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 將項目加入清單，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>取得值，指出您是否可以使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> 從清單移除項目。</summary>
      <returns>如果您可以從清單移除項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>取得值，指出清單中項目是否已排序。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
      <returns>如果已呼叫 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 而尚未呼叫 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>取得排序的方向。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
      <returns>其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>取得已經用來排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 為 <see langword="false" />。</exception>
      <returns>已經用來排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>取得值，指出當清單變更或清單項目變更時是否引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>如果清單變更或項目變更時引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>取得值，指出清單是否支援使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法進行搜尋。</summary>
      <returns>如果清單支援使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法的搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>取得值，指出清單是否支援排序。</summary>
      <returns>如果清單支援搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>提供進階排序和篩選功能，以擴充 <see cref="T:System.ComponentModel.IBindingList" /> 介面。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>根據指定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 來排序資料來源。</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />，包含要套用至資料來源的排序。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>移除目前套用至資料來源的篩選條件。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>取得或設定要用來從資料來源所傳回項目集合中排除項目的篩選條件。</summary>
      <returns>要用來在資料來源傳回之項目集合中篩選掉項目的字串。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>取得目前套用到資料來源中的排序描述集合。</summary>
      <returns>目前套用到資料來源中的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>取得值，指出資料來源是否支援進階排序。</summary>
      <returns>如果資料來源支援進階排序，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>取得值，指出資料來源是否支援篩選。</summary>
      <returns>如果資料來源支援篩選，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>將新項目加入至集合時，加入異動功能。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>從集合中捨棄暫止的新項目。</summary>
      <param name="itemIndex">先前已加入至集合之項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>將暫止的新項目認可到集合中。</summary>
      <param name="itemIndex">先前已加入至集合之項目的索引。</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>在 COM 物件和 <see cref="T:System.ComponentModel.TypeDescriptor" /> 之間提供最上層對應圖層。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>取得指定之元件的屬性。</summary>
      <param name="component">要為其取得屬性的元件。</param>
      <returns>
        <paramref name="component" /> 之屬性的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>取得指定之元件的類別名稱。</summary>
      <param name="component">要為其取得類別名稱的元件。</param>
      <returns>與 <paramref name="component" /> 對應之類別的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>取得指定之元件的型別轉換子。</summary>
      <param name="component">要為其取得 <see cref="T:System.ComponentModel.TypeConverter" /> 的元件。</param>
      <returns>
        <paramref name="component" /> 的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>取得指定之元件的預設事件。</summary>
      <param name="component">要為其取得預設事件的元件。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" />，表示 <paramref name="component" /> 的預設值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>取得指定之元件的預設屬性。</summary>
      <param name="component">要取得預設屬性的元件。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示 <paramref name="component" /> 的預設屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>取得指定之元件的編輯器。</summary>
      <param name="component">要為其取得編輯器的元件。</param>
      <param name="baseEditorType">
        <paramref name="component" /> 之編輯器的基底型別。</param>
      <returns>
        <paramref name="component" /> 的編輯器。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>取得指定之元件的事件。</summary>
      <param name="component">要為其取得事件的元件。</param>
      <returns>
        <paramref name="component" /> 之事件描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>取得指定之元件的事件和指定的屬性。</summary>
      <param name="component">要為其取得事件的元件。</param>
      <param name="attributes">用來篩選事件的屬性。</param>
      <returns>
        <paramref name="component" /> 之事件描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>取得指定元件的名稱。</summary>
      <param name="component">要取得其名稱的元件。</param>
      <returns>
        <paramref name="component" /> 的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>取得指定之元件的屬性 (Property) 和指定的屬性 (Attribute)。</summary>
      <param name="component">要為其取得事件的元件。</param>
      <param name="attributes">用來篩選屬性 (Property) 的屬性 (Attribute)。</param>
      <returns>
        <paramref name="component" /> 之屬性描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>取得含有指定之分派識別項 (Dispatch Identifier) 的屬性值。</summary>
      <param name="component">屬性所屬的物件。</param>
      <param name="dispid">分派識別項。</param>
      <param name="success">
        <see cref="T:System.Boolean" /> (以傳址 (By Reference) 方式傳遞)，表示是否已擷取屬性。</param>
      <returns>含有指定之分派識別項 (Dispatch Identifier) 的屬性值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>取得具有指定名稱之屬性的值。</summary>
      <param name="component">屬性所屬的物件。</param>
      <param name="propertyName">屬性的名稱。</param>
      <param name="success">
        <see cref="T:System.Boolean" /> (以傳址 (By Reference) 方式傳遞)，表示是否已擷取屬性。</param>
      <returns>具有指定名稱之屬性的值。</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>提供介面來提供物件的動態自訂型別資訊。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>傳回元件之這個執行個體的自訂屬性集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />，其包含此物件的屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>傳回這個元件執行個體的類別名稱。</summary>
      <returns>此物件的類別名稱，或如果類別沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>傳回這個元件執行個體的名稱。</summary>
      <returns>物件的名稱；如果物件沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>傳回這個元件執行個體的類型轉換子。</summary>
      <returns>這個物件之轉換子的 <see cref="T:System.ComponentModel.TypeConverter" />；如果這個物件沒有 <see cref="T:System.ComponentModel.TypeConverter" />，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>傳回這個元件執行個體的預設事件。</summary>
      <returns>代表這個物件之預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" /> ；如果這個物件沒有事件，則為 <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>傳回這個元件執行個體的屬性。</summary>
      <returns>代表這個物件之預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果這個物件沒有屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>傳回元件的這個執行個體之指定類型編輯器。</summary>
      <param name="editorBaseType">表示此物件編輯器的 <see cref="T:System.Type" />。</param>
      <returns>為此物件之編輯器的指定類型 <see cref="T:System.Object" />，如果找不到編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>傳回這個元件執行個體的事件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>使用指定屬性陣列做為篩選條件傳回元件之執行個體的事件。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" />，代表此元件執行個體篩選過的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>傳回元件之這個執行個體的屬性。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>使用屬性陣列做為篩選條件，傳回這個元件執行個體的屬性。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，代表這個元件執行個體的篩選後屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回物件，包含指定的屬性描述項所描述的屬性。</summary>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，代表要尋找其擁有者的屬性。</param>
      <returns>
        <see cref="T:System.Object" />，代表指定之屬性的擁有者。</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>提供功能，以供應使用者介面可繫結的自訂錯誤資訊。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>取得錯誤訊息，表示這個物件有什麼錯誤。</summary>
      <returns>錯誤訊息，表示這個物件有什麼錯誤。 預設為空字串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>使用指定的名稱取得屬性的錯誤訊息。</summary>
      <param name="columnName">要取得其錯誤訊息的屬性名稱。</param>
      <returns>屬性的錯誤訊息。 預設為空字串 ("")。</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>將擴充屬性的介面定義至容器 (Container) 中的其他元件。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>指定這個物件是否可以將它的擴充項屬性提供給指定的物件。</summary>
      <param name="extendee">接收擴充項屬性的 <see cref="T:System.Object" />。</param>
      <returns>如果這個物件能夠提供擴充項屬性給指定的物件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>提供加速擷取產生器名稱和顯示產生器的介面。</summary>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>顯示產生器。</summary>
      <param name="language">呼叫產生的語言服務。</param>
      <param name="value">編輯中的運算式。</param>
      <param name="newValue">新值。</param>
      <returns>如果值應該取代成 <paramref name="newValue" />，則為 <see langword="true" />，否則為 <see langword="false" /> (例如，如果使用者取消)。</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>取得當地語系化名稱。</summary>
      <returns>當地語系化名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>提供功能，使物件傳回可繫結至資料來源的清單。</summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>從本身沒有實作 <see cref="T:System.Collections.IList" /> 的物件傳回可以繫結至資料來源的 <see cref="T:System.Collections.IList" />。</summary>
      <returns>
        <see cref="T:System.Collections.IList" />，從物件繫結至資料來源。</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>取得值，指出此集合是否為 <see cref="T:System.Collections.IList" /> 物件的集合。</summary>
      <returns>如果集合為 <see cref="T:System.Collections.IList" /> 物件的集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>提供巢狀容器的功能，巢狀容器邏輯上包含零或多個其他元件，並且由父元件所擁有。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>取得巢狀容器的主控元件。</summary>
      <returns>擁有巢狀容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>提供擷取元件完整巢狀名稱的能力。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>取得這個站台中的元件完整名稱。</summary>
      <returns>這個站台中的元件完整名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>指示與這個屬性相關的元件是否已經繼承自基底類別。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的預設值為 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>指定元件已繼承。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>指定元件已繼承且為唯讀。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>指定元件並未繼承。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>使用指定的繼承層級，初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 類別的新執行個體。</summary>
      <param name="inheritanceLevel">
        <see cref="T:System.ComponentModel.InheritanceLevel" />，表示這個屬性所設定的繼承層級。</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>覆寫以測試是否相等。</summary>
      <param name="value">要測試的物件。</param>
      <returns>如果物件相同則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>傳回這個物件的雜湊程式碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>將這個屬性轉換成字串。</summary>
      <returns>表示這個 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字串。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>取得或設定儲存在這個屬性中的目前繼承層級。</summary>
      <returns>儲存在這個屬性中的 <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>定義繼承層級型別的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>物件已繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>物件已繼承，但只可唯讀存取。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>物件未繼承。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>指定安裝元件的型別之安裝程式。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>使用元件的安裝程式型別名稱，初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">
        <see cref="T:System.Type" /> 的名稱，表示這個屬性所繫結的元件安裝程式。 這個類別必須實作 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>當指定表示元件安裝程式的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 時，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="installerType">
        <see cref="T:System.Type" />，表示這個屬性所繫結的元件安裝程式。 這個類別必須實作 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>傳回這個物件的雜湊程式碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>取得與這個屬性相關的安裝程式型別。</summary>
      <returns>
        <see cref="T:System.Type" />，是表示與這個屬性相關的安裝程式型別，如果安裝程式不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>從 <see cref="T:System.Windows.Forms.PropertyGrid" /> 中的下拉式方塊，建立屬性特定型別的執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>在衍生類別中覆寫時，傳回指定型別的執行個體。</summary>
      <param name="context">內容資訊。</param>
      <param name="instanceType">指定的型別。</param>
      <returns>指定型別的執行個體或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>取得指定的文字。</summary>
      <returns>指定的文字。</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>提供類型轉換器，將 16 位元帶正負號的整數物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>提供類型轉換器，將 32 位元帶正負號的整數物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>提供類型轉換器，將 64 位元帶正負號的整數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>指出類別是否會將屬性變更事件轉換成 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>取得值，指出 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 物件是否會引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 物件會在其中一個屬性值變更時引發 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>允許協調元件及其相依屬性的初始化。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>在完成元件的初始化時發生。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>取得值，指出是否已初始化元件。</summary>
      <returns>
        <see langword="true" /> 表示元件已完成初始化，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>提供元件的內容資訊，例如其容器和屬性描述項。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>引發 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>引發 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
      <returns>如果這個物件可以變更，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>取得表示這個 <see cref="T:System.ComponentModel.TypeDescriptor" /> 要求的容器。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" />，含有這個 <see cref="T:System.ComponentModel.TypeDescriptor" /> 的物件集，如果沒有容器或 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>取得與這個型別描述項要求關聯的物件。</summary>
      <returns>在 <see cref="T:System.ComponentModel.TypeDescriptor" /> 上叫用方法的物件，如果沒有物件負責呼叫，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>取得與指定內容項目關聯的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>描述指定內容項目的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，如果沒有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 負責呼叫時，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>提供發現可繫結清單的結構描述 (Schema) 的功能，其中可用於繫結的屬性與要繫結物件的公用 (Public) 屬性是不同的。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>傳回代表繫結資料所用各項目屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="listAccessors">尋找在集合中顯示為可繫結的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件陣列。 這可以是 <see langword="null" />。</param>
      <returns>代表繫結資料所用各項目屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>傳回清單的名稱。</summary>
      <param name="listAccessors">傳回清單名稱之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列。 這可以是 <see langword="null" />。</param>
      <returns>清單的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>所有授權的 <see langword="abstract" /> 基底類別。 授權是授與給元件的特定執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.License" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>在衍生類別中覆寫時，處置授權所使用的資源。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>在衍生類別中覆寫時，取得授與這個元件的授權識別碼。</summary>
      <returns>授與這個元件的授權識別碼。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>指定您何時可以使用授權的物件，並提供方法來取得在其網域中執行支援授權所需的其他服務。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>在衍生類別中覆寫時，從指定的資源組件 (Assembly) 傳回指定型別的已儲存授權識別碼。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示元件的型別。</param>
      <param name="resourceAssembly">具有授權識別碼的 <see cref="T:System.Reflection.Assembly" />。</param>
      <returns>指定型別的 <see cref="P:System.ComponentModel.License.LicenseKey" />。 除非您加以覆寫，否則這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>如果有可用的服務，則取得所要求的服務。</summary>
      <param name="type">要擷取的服務類型。</param>
      <returns>服務的執行個體，或 <see langword="null" /> (如果找不到服務)。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>在衍生類別中覆寫時，為指定的型別設定授權識別碼。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示與授權識別碼相關的元件。</param>
      <param name="key">為元件的型別所儲存的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>在衍生類別中覆寫時，取得當您可以使用授權時所指定的值。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值，當您可以使用授權時指定的。 預設為 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>表示元件無法取得授權時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.LicenseException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>為無法取得授權元件的型別，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>為無法取得授權元件的型別和執行個體，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
      <param name="instance">未取得授權之元件的執行個體。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>為無法取得授權元件的型別和執行個體，以及要顯示的訊息，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
      <param name="instance">未取得授權之元件的執行個體。</param>
      <param name="message">要顯示的例外狀況訊息。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>為無法取得授權元件的型別和執行個體，以及要顯示的訊息和擲回的原始例外狀況，初始化 <see cref="T:System.ComponentModel.LicenseException" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</param>
      <param name="instance">未取得授權之元件的執行個體。</param>
      <param name="message">要顯示的例外狀況訊息。</param>
      <param name="innerException">
        <see cref="T:System.Exception" />，表示原始例外狀況。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用例外狀況的相關資訊來設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>取得未取得授權元件的型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示未取得授權元件的型別。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>提供屬性和方法以新增授權至元件，以及管理 <see cref="T:System.ComponentModel.LicenseProvider" />。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>建立指定型別的執行個體，需指定可以使用授權執行個體的內容。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要建立的型別。</param>
      <param name="creationContext">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定何時可以使用授權執行個體。</param>
      <returns>指定型別的執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>建立具有指定引數的指定型別執行個體，需指定可以使用授權執行個體的內容。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要建立的型別。</param>
      <param name="creationContext">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定何時可以使用授權執行個體。</param>
      <param name="args">
        <see cref="T:System.Object" /> 型別的陣列，表示型別的引數。</param>
      <returns>具有指定引數陣列的指定型別執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>傳回指定型別是否具有有效授權。</summary>
      <param name="type">要為它搜尋有效授權的 <see cref="T:System.Type" />。</param>
      <returns>如果指定的型別已授權，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>判斷是否授與指定型別的有效授權。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要求 <see cref="T:System.ComponentModel.License" /> 的物件型別。</param>
      <returns>如果授與有效授權，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>判斷是否授與型別之指定執行個體的有效授權。 這個方法會建立有效的 <see cref="T:System.ComponentModel.License" />。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要求授權的物件型別。</param>
      <param name="instance">指定型別的物件或衍生自指定型別的型別。</param>
      <param name="license">
        <see cref="T:System.ComponentModel.License" /> 是有效的授權；如果無法授與有效授權，則為 <see langword="null" />。</param>
      <returns>如果可以授與有效的 <see cref="T:System.ComponentModel.License" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>防止對指定物件的目前 <see cref="T:System.ComponentModel.LicenseContext" /> 做變更。</summary>
      <param name="contextUser">要鎖定它目前內容的物件。</param>
      <exception cref="T:System.InvalidOperationException">已經鎖定內容。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>允許對指定物件的目前 <see cref="T:System.ComponentModel.LicenseContext" /> 做變更。</summary>
      <param name="contextUser">要解除鎖定它目前內容的物件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> 表示不同於之前呼叫 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 所指定的使用者。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>判斷是否授與指定型別的授權。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要求授權的物件型別。</param>
      <exception cref="T:System.ComponentModel.LicenseException">
        <see cref="T:System.ComponentModel.License" /> 無法授與。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>判斷是否授與指定型別執行個體的授權。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要求授權的物件型別。</param>
      <param name="instance">指定型別的 <see cref="T:System.Object" /> 或衍生自指定型別的型別。</param>
      <exception cref="T:System.ComponentModel.LicenseException">型別已授權，但是無法授與 <see cref="T:System.ComponentModel.License" />。</exception>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>取得或設定目前的 <see cref="T:System.ComponentModel.LicenseContext" />，它會指定何時可以使用授權物件。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 屬性目前是鎖定的而且無法變更。</exception>
      <returns>
        <see cref="T:System.ComponentModel.LicenseContext" />，指定何時可以使用授權物件。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>取得 <see cref="T:System.ComponentModel.LicenseUsageMode" />，它會指定何時可以使用 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 的授權物件。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值，如同 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 屬性中所指定。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>提供 <see langword="abstract" /> 基底類別，以便實作授權提供者。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>不論授權的拒絕是否擲回例外狀況，在提供內容時，如果在衍生類別中覆寫，則取得元件的執行個體或型別的授權。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定您可以使用授權物件的位置。</param>
      <param name="type">
        <see cref="T:System.Type" />，表示要求授權的元件。</param>
      <param name="instance">正在要求授權的物件。</param>
      <param name="allowExceptions">如果元件無法取得授權時應該擲回 <see cref="T:System.ComponentModel.LicenseException" />，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>指定要與類別一起使用的 <see cref="T:System.ComponentModel.LicenseProvider" />。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>指定預設值，也就是沒有提供者。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>不使用授權提供者來初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>使用指定的型別來初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="typeName">授權提供者類別的完整名稱。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>使用授權提供者的指定型別來初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示授權提供者類別的型別。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="value">要比較的另一個物件。</param>
      <returns>如果 <paramref name="value" /> 等於這個執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>取得必須與關聯類別一起使用的授權提供者。</summary>
      <returns>
        <see cref="T:System.Type" />，表示授權提供者的型別。 預設值是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>表示此屬性型別的唯一 ID。</summary>
      <returns>此屬性型別的唯一 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>指定何時可以使用 <see cref="T:System.ComponentModel.License" />。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>在設計階段中由視覺化設計工具或編譯器所使用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>在執行階段期間使用。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>提供 <see cref="T:System.ComponentModel.LicenseProvider" /> 的實作。 提供者 (Provider) 運作的方式與 Microsoft .NET Framework 標準授權模型類似。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>傳回指定型別的索引鍵。</summary>
      <param name="type">要傳回索引鍵的物件型別。</param>
      <returns>
        <paramref name="type" /> 參數已授權的確認。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>傳回元件的執行個體 (Instance) 授權 (如果有的話)。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.LicenseContext" />，指定您可以使用授權物件的位置。</param>
      <param name="type">
        <see cref="T:System.Type" />，表示要求 <see cref="T:System.ComponentModel.License" /> 的元件。</param>
      <param name="instance">要求 <see cref="T:System.ComponentModel.License" /> 的物件。</param>
      <param name="allowExceptions">如果元件無法取得授權時應該擲回 <see cref="T:System.ComponentModel.LicenseException" />，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。 如果這個方法無法找到有效的 <see cref="T:System.ComponentModel.License" /> 或有效的 <paramref name="context" /> 參數，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>判斷 <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法所擷取的索引鍵對指定型別是否有效。</summary>
      <param name="key">要進行檢查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type">
        <see cref="T:System.Type" />，表示要求 <see cref="T:System.ComponentModel.License" /> 的元件。</param>
      <returns>如果 <see cref="P:System.ComponentModel.License.LicenseKey" /> 是指定型別的有效索引鍵，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>指定可以用來做為資料來源的清單。 視覺化設計工具 (Visual Designer) 應該使用這個屬性 (Attribute)，判斷是否要在資料繫結選擇器中顯示特定的清單。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的預設值。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>指定清單是不可繫結的。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>指定清單是可繫結的。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>使用指示清單是否為可繫結的值，初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 類別的新執行個體。</summary>
      <param name="listBindable">如果清單為可繫結，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>使用 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 指示清單是否為可繫結，初始化 <see cref="T:System.ComponentModel.BindableSupport" /> 類別的新執行個體。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" />，指出清單是否為可繫結。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>傳回傳遞的物件是否等於這個 <see cref="T:System.ComponentModel.ListBindableAttribute" />。</summary>
      <param name="obj">要測試相等比較的物件。</param>
      <returns>如果傳遞的物件和這個 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>不論 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 是否設定為預設值都傳回值。</summary>
      <returns>如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 設定為預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>取得值，指出清單是否為可繫結。</summary>
      <returns>如果清單為可繫結，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>指定變更類型和受影響的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="listChangedType">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="propDesc">已加入、移除或變更的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>指定變更類型和受影響項目的索引，初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="listChangedType">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="newIndex">已加入、變更或移除項目的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>指定變更類型、受影響項目的索引和描述受影響項目的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />，初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="listChangedType">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="newIndex">已加入或變更項目的索引。</param>
      <param name="propDesc">描述項目的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>指定變更類型和已移動項目的新舊索引，初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="listChangedType">
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</param>
      <param name="newIndex">已移動項目的新索引。</param>
      <param name="oldIndex">已移動項目的舊索引。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>取得變更類型。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListChangedType" /> 值，指出變更的型別。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>取得受變更影響之項目的索引。</summary>
      <returns>受變更影響之項目的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>取得已移動項目的舊索引。</summary>
      <returns>已移動項目的舊索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>取得已加入、變更或刪除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns>受變更所影響的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>代表將處理 <see cref="T:System.ComponentModel.IBindingList" /> 類別的 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件之方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.ListChangedEventArgs" />，其中包含事件資料。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>指定清單變更的方式。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>加入至清單的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含加入項目的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>在清單中變更的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含變更項目的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>從清單中刪除的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含刪除項目的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>在清單中移動的項目。 <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含先前的項目索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含新的項目索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>已加入 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其變更結構描述 (Schema)。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>已變更 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其變更結構描述。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>已刪除 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其變更結構描述。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>大部分的清單已變更。 任何接聽的控制項都應該從清單中重新整理它們的所有資料。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>提供套用至資料來源的排序作業描述。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>使用指定的屬性描述和方向，初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 類別的新執行個體。</summary>
      <param name="property">描述排序資料來源所依據之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction">其中一個 <see cref="T:System.ComponentModel.ListSortDescription" /> 值。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>取得或設定與這個 <see cref="T:System.ComponentModel.ListSortDescription" /> 關聯之類別屬性的抽象描述。</summary>
      <returns>與這個 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 相關聯的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>取得或設定與這個 <see cref="T:System.ComponentModel.ListSortDescription" /> 關聯之排序作業方向。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.ListSortDirection" /> 值。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 物件的集合。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>使用指定的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 物件陣列，初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 類別的新執行個體。</summary>
      <param name="sorts">要包含在集合中的 <see cref="T:System.ComponentModel.ListSortDescription" /> 物件陣列。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>判斷 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 是否含有特定值。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>從指定之目的陣列索引開始，將集合之內容複製到指定的陣列。</summary>
      <param name="array">從集合複製過來的項目之目的陣列。</param>
      <param name="index">目的陣列的索引，複製會從該位置開始。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>傳回集合中指定之項目的索引。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.Object" />。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>取得可以用來逐一查看集合的 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，可用於逐一查看集合。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>將項目新增至集合。</summary>
      <param name="value">要加入至集合中的項目。</param>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>移除集合的所有項目。</summary>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在指定的索引位置，插入項目至集合之中。</summary>
      <param name="index">要在集合中取得或設定的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引</param>
      <param name="value">要插入集合中的項目。</param>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>從集合移除第一個項目。</summary>
      <param name="value">要從集合中移除的項目。</param>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>從指定索引的集合移除項目。</summary>
      <param name="index">要從集合中移除的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引</param>
      <exception cref="T:System.InvalidOperationException">在所有情況下。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>取得集合中的項目數目。</summary>
      <returns>集合中的項目數目</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>取得或設定指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index">要在集合中取得或設定之 <see cref="T:System.ComponentModel.ListSortDescription" /> 的以零起始的索引。</param>
      <exception cref="T:System.InvalidOperationException">在唯讀的 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 中設定項目。</exception>
      <returns>具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，指出對集合的存取是否為安全執行緒。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得可以用來同步處理對集合之存取的目前執行個體。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 的目前執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，表示集合是否為唯讀。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>取得指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index">要在集合中取得的 <see cref="T:System.ComponentModel.ListSortDescription" /> 之以零起始的索引</param>
      <returns>具有指定索引的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>指定排序作業的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>依遞增順序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>依遞減順序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>指定支援查閱架構之繫結的屬性。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>表示 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 類別的預設值。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>不使用參數來初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 類別的新執行個體。</summary>
      <param name="dataSource">做為資料來源的屬性名稱。</param>
      <param name="displayMember">做為顯示名稱的屬性名稱。</param>
      <param name="valueMember">做為值來源的屬性名稱。</param>
      <param name="lookupMember">查閱時使用的屬性名稱。</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>判斷指定的 <see cref="T:System.Object" /> 和目前的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 執行個體是否相等。</summary>
      <param name="obj">要與目前 <see cref="T:System.Object" /> 執行個體比較的 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />。</param>
      <returns>如果物件和目前執行個體相等，則為 <see langword="true" />，否則為 <see langword="false" />，表示不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>取得 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的資料來源屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>取得 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的顯示成員屬性名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的顯示成員屬性名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>取得這個屬性所繫結之元件的查閱成員名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的查閱成員名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>取得 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的值成員屬性名稱。</summary>
      <returns>
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 所繫結之元件的值成員屬性名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>實作 <see cref="T:System.ComponentModel.IComponent" /> 並且提供由數值 (傳遞序列化物件的複本) 所封送處理之可遠端使用元件的基底實作。</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>加入事件處理常式來接聽元件上的 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>釋放 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 所使用的所有資源。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>允許物件在記憶體回收進行回收之前，嘗試釋放資源並執行其他清除作業。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>取得 <see cref="T:System.IServiceProvider" /> 的實作器。</summary>
      <param name="service">
        <see cref="T:System.Type" />，表示您想要服務的型別。</param>
      <returns>
        <see cref="T:System.Object" />，表示 <see cref="T:System.IServiceProvider" /> 的實作器。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>傳回任何包含 <see cref="T:System.ComponentModel.Component" /> 名稱的 <see cref="T:System.String" />。 不應覆寫此方法。</summary>
      <returns>
        <see cref="T:System.String" />，其中可能含有 <see cref="T:System.ComponentModel.Component" /> 的名稱。  
  
 如果 <see cref="T:System.ComponentModel.Component" /> 尚未命名，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>取得元件的容器。</summary>
      <returns>物件，實作表示元件容器的 <see cref="T:System.ComponentModel.IContainer" /> 介面，或者如果元件並沒有站台，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>取得值，表示元件目前是否處於設計模式。</summary>
      <returns>如果元件處於設計模式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>取得附加在這個元件上的事件處理常式清單。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" />，提供這個元件的委派。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>取得或設定元件的網站。</summary>
      <returns>物件，實作表示元件站台的 <see cref="T:System.ComponentModel.ISite" /> 介面。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>表示遮罩剖析服務，任何支援遮罩的控制項數目都可以使用它，例如 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控制項。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>使用指定的遮罩，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>使用指定的遮罩和 ASCII 限制值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="restrictToAscii">
        <see langword="true" /> 表示輸入限於 ASCII 相容字元，而 <see langword="false" /> 則表示允許完整 Unicode 集。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>使用指定的遮罩、密碼字元和提示使用值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="passwordChar">
        <see cref="T:System.Char" />，將針對輸入至密碼字串的字元顯示。</param>
      <param name="allowPromptAsInput">
        <see langword="true" /> 表示允許提示字元當做輸入，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>使用指定的遮罩和文化特性，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>使用指定的遮罩、文化特性和 ASCII 限制值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
      <param name="restrictToAscii">
        <see langword="true" /> 表示輸入限於 ASCII 相容字元，而 <see langword="false" /> 則表示允許完整 Unicode 集。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>使用指定的遮罩、文化特性、提示使用值、提示字元、密碼字元和 ASCII 限制值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
      <param name="allowPromptAsInput">
        <see cref="T:System.Boolean" /> 值，指定是否允許提示字元當做有效輸入字元。</param>
      <param name="promptChar">
        <see cref="T:System.Char" />，將顯示為使用者輸入的替代符號。</param>
      <param name="passwordChar">
        <see cref="T:System.Char" />，將針對輸入至密碼字串的字元顯示。</param>
      <param name="restrictToAscii">
        <see langword="true" /> 表示輸入限於 ASCII 相容字元，而 <see langword="false" /> 則表示允許完整 Unicode 集。</param>
      <exception cref="T:System.ArgumentException">遮罩參數是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。  
  
-或- 
遮罩包含一或多個無法列印的字元。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>使用指定的遮罩、文化特性、密碼字元和提示使用值，初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 類別的新執行個體。</summary>
      <param name="mask">
        <see cref="T:System.String" />，表示輸入遮罩。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，用來設定可區分區域的分隔符號。</param>
      <param name="passwordChar">
        <see cref="T:System.Char" />，將針對輸入至密碼字串的字元顯示。</param>
      <param name="allowPromptAsInput">
        <see langword="true" /> 表示允許提示字元當做輸入，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>將指定的輸入字元加入至格式化字串的結尾。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 值，要附加至格式化字串。</param>
      <returns>如果輸入字元已成功加入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>將指定的輸入字元加入至格式化字串的結尾，然後輸出位置和描述性資訊。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 值，要附加至格式化字串。</param>
      <param name="testPosition">格式化字串中以零起始的位置，在這個位置上嘗試加入字元。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns>如果輸入字元已成功加入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>將指定輸入字串的字元加入至格式化字串的結尾。</summary>
      <param name="input">
        <see cref="T:System.String" />，包含要附加至格式化字串的字元值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
      <returns>
        <see langword="true" /> 表示輸入字串的所有字元已成功加入，而 <see langword="false" /> 則表示未加入任何字元。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>將指定輸入字串的字元加入至格式化字串的結尾，然後輸出位置和描述性資訊。</summary>
      <param name="input">
        <see cref="T:System.String" />，包含要附加至格式化字串的字元值。</param>
      <param name="testPosition">格式化字串中以零起始的位置，在這個位置上嘗試加入字元。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns>
        <see langword="true" /> 表示輸入字串的所有字元已成功加入，而 <see langword="false" /> 則表示未加入任何字元。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>從格式化字串清除所有可編輯的輸入字元，並取代成提示字元。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>從格式化字串清除所有可編輯的輸入字元，並取代成提示字元，然後輸出描述性資訊。</summary>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>建立目前的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 複本。</summary>
      <returns>這個方法所建立的 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 物件，其轉型為物件。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之後的第一個指定可編輯位置。</summary>
      <param name="position">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個指定可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之間的第一個指定可編輯位置。</summary>
      <param name="startPosition">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個指定可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之後的第一個可編輯位置。</summary>
      <param name="position">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之間的第一個可編輯位置。</summary>
      <param name="startPosition">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之後的第一個非可編輯位置。</summary>
      <param name="position">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個常值位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之間的第一個非可編輯位置。</summary>
      <param name="startPosition">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個常值位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之後第一個未指定的可編輯位置。</summary>
      <param name="position">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個未指定的可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>使用指定搜尋方向，傳回指定位置之間第一個未指定的可編輯位置。</summary>
      <param name="startPosition">格式化字串中要開始搜尋的以零起始的位置。</param>
      <param name="endPosition">格式化字串中要結束搜尋的以零起始的位置。</param>
      <param name="direction">表示搜尋方向的 <see cref="T:System.Boolean" />；<see langword="true" /> 表示向前搜尋，<see langword="false" /> 則為向後搜尋。</param>
      <returns>如果成功，則為 <see cref="T:System.Int32" />，表示找到第一個未指定的可編輯位置之以零起始的位置，否則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>判斷指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 代表成功或失敗。</summary>
      <param name="hint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值，通常以先前作業的輸出參數方式取得。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功，則為 <see langword="true" />，如果表示失敗，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>在格式化字串中的指定位置插入指定字元。</summary>
      <param name="input">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position">格式化字串中要插入字元之以零起始的位置。</param>
      <returns>如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在格式化字串中的指定位置插入指定字元，並傳回上一個插入位置和作業狀態。</summary>
      <param name="input">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position">格式化字串中要插入字元之以零起始的位置。</param>
      <param name="testPosition">如果方法成功，則為最後一個插入字元位置，否則為插入失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述插入作業的結果。 輸出參數。</param>
      <returns>如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>在格式化字串中的指定位置插入指定字串。</summary>
      <param name="input">要插入的 <see cref="T:System.String" />。</param>
      <param name="position">格式化字串中要插入輸入字串之以零起始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
      <returns>如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在格式化字串中的指定位置插入指定字串，並傳回上一個插入位置和作業狀態。</summary>
      <param name="input">要插入的 <see cref="T:System.String" />。</param>
      <param name="position">格式化字串中要插入輸入字串之以零起始的位置。</param>
      <param name="testPosition">如果方法成功，則為最後一個插入字元位置，否則為插入失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述插入作業的結果。 輸出參數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
      <returns>如果插入成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>判斷指定的位置是否可用於指派。</summary>
      <param name="position">遮罩中要測試之以零起始的位置。</param>
      <returns>如果格式化字串中的指定位置為可編輯並且尚未指定，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>判斷指定的位置是否可編輯。</summary>
      <param name="position">遮罩中要測試之以零起始的位置。</param>
      <returns>如果格式化字串中的指定位置是可編輯，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>判斷指定的字元是否為有效的輸入字元。</summary>
      <param name="c">要測試的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果指定字元包含有效的輸入值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>判斷指定的字元是否為有效的遮罩字元。</summary>
      <param name="c">要測試的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果指定字元包含有效的遮罩值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>判斷指定的字元是否為有效的密碼字元。</summary>
      <param name="c">要測試的 <see cref="T:System.Char" /> 值。</param>
      <returns>如果指定字元包含有效的密碼值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>從格式化字串移除上一個指定的字元。</summary>
      <returns>如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>從格式化字串移除上一個指定的字元，然後輸出移除位置和描述性資訊。</summary>
      <param name="testPosition">格式化字串中實際移除字元之以零起始的位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns>如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>移除格式化字串中指定位置上的指定字元。</summary>
      <param name="position">要移除指定字元之以零起始的位置。</param>
      <returns>如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>移除格式化字串中指定位置之間的指定字元。</summary>
      <param name="startPosition">要移除第一個指定字元之以零起始的索引。</param>
      <param name="endPosition">要移除最後一個指定字元之以零起始的索引。</param>
      <returns>如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>移除格式化字串中指定位置之間的指定字元，然後輸出移除位置和描述性資訊。</summary>
      <param name="startPosition">要移除第一個指定字元之以零起始的索引。</param>
      <param name="endPosition">要移除最後一個指定字元之以零起始的索引。</param>
      <param name="testPosition">如果成功，則會是格式化字串中實際移除字元之以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns>如果成功移除字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>將指定位置或之外的單一字元取代成指定字元值。</summary>
      <param name="input">取代現有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <returns>如果成功取代字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>將指定起始位置和結束位置之間的單一字元取代成指定字元值，然後輸出移除位置和描述性資訊。</summary>
      <param name="input">取代現有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="startPosition">格式化字串中要開始取代之以零起始的位置。</param>
      <param name="endPosition">格式化字串中要結束取代之以零起始的位置。</param>
      <param name="testPosition">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns>如果成功取代字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>將指定位置或之外的單一字元取代成指定字元值，然後輸出移除位置和描述性資訊。</summary>
      <param name="input">取代現有值的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <param name="testPosition">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns>如果成功取代字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>從指定的位置開始，將可編輯的字元範圍取代成指定字串。</summary>
      <param name="input">用來取代現有可編輯字元的 <see cref="T:System.String" /> 值。</param>
      <param name="position">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
      <returns>如果成功取代所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>將指定起始位置和結束位置之間的可編輯字元範圍取代成指定字串，然後輸出移除位置和描述性資訊。</summary>
      <param name="input">用來取代現有可編輯字元的 <see cref="T:System.String" /> 值。</param>
      <param name="startPosition">格式化字串中要開始取代之以零起始的位置。</param>
      <param name="endPosition">格式化字串中要結束取代之以零起始的位置。</param>
      <param name="testPosition">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns>如果成功取代所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>從指定的位置開始，將可編輯的字元範圍取代成指定字串，然後輸出移除位置和描述性資訊。</summary>
      <param name="input">用來取代現有可編輯字元的 <see cref="T:System.String" /> 值。</param>
      <param name="position">搜尋第一個可編輯的字元並加以取代的以零起始的位置。</param>
      <param name="testPosition">如果成功，則會是格式化字串中實際取代最後一個字元的以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述取代作業的結果。 輸出參數。</param>
      <returns>如果成功取代所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>將格式化字串設為指定的輸入字串。</summary>
      <param name="input">用來設定格式化字串的 <see cref="T:System.String" /> 值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
      <returns>如果成功設定所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>將格式化字串設為指定的輸入字串，然後輸出移除位置和描述性資訊。</summary>
      <param name="input">用來設定格式化字串的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition">如果成功，則會是格式化字串中實際設定最後一個字元之以零起始的位置，否則，會是作業失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述設定作業的結果。 輸出參數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 參數為 <see langword="null" />。</exception>
      <returns>如果成功設定所有字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>用可顯示格式傳回格式化字串。</summary>
      <returns>格式化 <see cref="T:System.String" />，包含提示和遮罩常值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>傳回格式化字串，包含所有指定的字元值。</summary>
      <returns>格式化 <see cref="T:System.String" />，包含所有指定的字元值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>傳回格式化字串，選擇性包含密碼字元。</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> 表示傳回實際的可編輯字元，而 <see langword="false" /> 則表示接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 屬性。</param>
      <returns>格式化 <see cref="T:System.String" />，包含常值、提示和選擇性的密碼字元。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>傳回格式化字串，選擇性包含提示和常值字元。</summary>
      <param name="includePrompt">若要在傳回字串中包含提示字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="includeLiterals">若要在傳回字串中包含常值字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>格式化 <see cref="T:System.String" />，包含所有指定的字元值，而選擇性包含常值和提示。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>傳回格式化字串的子字串，選擇性包含提示、常值和密碼字元。</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> 表示傳回實際的可編輯字元，而 <see langword="false" /> 則表示接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 屬性。</param>
      <param name="includePrompt">若要在傳回字串中包含提示字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="includeLiterals">若要在傳回字串中傳回常值字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="startPosition">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length">要傳回的字元數。</param>
      <returns>如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含所有指定的字元值，而選擇性包含常值、提示和密碼字元，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>傳回格式化字串的子字串，選擇性包含提示和常值字元。</summary>
      <param name="includePrompt">若要在傳回字串中包含提示字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="includeLiterals">若要在傳回字串中包含常值字元，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="startPosition">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length">要傳回的字元數。</param>
      <returns>如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含所有指定的字元值，而選擇性包含常值和提示，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>傳回格式化字串的子字串，選擇性包含密碼字元。</summary>
      <param name="ignorePasswordChar">
        <see langword="true" /> 表示傳回實際的可編輯字元，而 <see langword="false" /> 則表示接受 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 屬性。</param>
      <param name="startPosition">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length">要傳回的字元數。</param>
      <returns>如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含常值、提示和選擇性的密碼字元，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>傳回格式化字串的子字串。</summary>
      <param name="startPosition">格式化字串中要開始輸出的以零起始的位置。</param>
      <param name="length">要傳回的字元數。</param>
      <returns>如果成功，則為格式化 <see cref="T:System.String" /> 的子字串，包含所有指定的字元值，否則為 <see cref="F:System.String.Empty" /> 字串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>測試在指定位置上是否可以成功設定指定的字元。</summary>
      <param name="input">要測試的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">遮罩中要測試輸入字元的位置。</param>
      <param name="hint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述運算的結果。 輸出參數。</param>
      <returns>如果指定字元對指定位置有效，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>測試在指定位置上是否可以逸出指定的字元。</summary>
      <param name="input">要測試的 <see cref="T:System.Char" /> 值。</param>
      <param name="position">遮罩中要測試輸入字元的位置。</param>
      <returns>如果在指定位置可以逸出指定字元，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>測試是否可以成功設定指定的字串。</summary>
      <param name="input">要測試的 <see cref="T:System.String" /> 值。</param>
      <returns>如果指定字串表示有效輸入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>測試是否可以成功設定指定的字串，然後輸出位置和描述性資訊。</summary>
      <param name="input">要測試的 <see cref="T:System.String" /> 值。</param>
      <param name="testPosition">如果成功，則為最後一個實際測試字元之以零起始的位置，否則為測試失敗的第一個位置。 輸出參數。</param>
      <param name="resultHint">
        <see cref="T:System.ComponentModel.MaskedTextResultHint" />，簡潔描述測試作業的結果。 輸出參數。</param>
      <returns>如果指定字串表示有效輸入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>取得值，指出提示字元是否應視為有效輸入字元。</summary>
      <returns>如果使用者可以輸入 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 至控制項，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>取得值，指出遮罩是否接受 ASCII 字元集之外的字元。</summary>
      <returns>如果只接受 ASCII，則為 <see langword="true" />，但如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可以接受任意 Unicode 字元，則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>取得已成功指派輸入值之可編輯的字元位置數目。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含輸入遮罩中可編輯的字元位置數目，在格式化字串中已指派字元值給這些位置。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>取得輸入遮罩中尚未指派輸入值的可編輯字元位置數目。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含尚未指派字元值的可編輯字元位置數目。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>取得文化特性，以便判斷輸入遮罩中可當地語系化分隔符號和替代符號的值。</summary>
      <returns>
        <see cref="T:System.Globalization.CultureInfo" />，包含與輸入遮罩相關聯的文化特性資訊。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>取得用來遮蔽使用者輸入的預設密碼字元。</summary>
      <returns>表示預設密碼字元的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>取得格式化字串中可編輯的位置數目。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含格式化字串中可編輯的位置數目。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>取得格式化字串中可編輯位置的新建立列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />，支援列舉格式化字串中的可編輯位置。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>取得或設定值，指出輸入遮罩中的常值字元是否應該包含在格式化字串中。</summary>
      <returns>如果包含常值，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>取得或設定值，指出 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 是否用來表示，在顯示格式化字串時使用者輸入項目不存在。</summary>
      <returns>如果提示字元用來表示未提供使用者輸入的位置，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>取得無效索引範圍的上限。</summary>
      <returns>值，表示最大的無效索引，由提供者實作決定。 例如，如果最小的有效索引是 0，則這個屬性會傳回 -1。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>取得或設定值，判斷密碼保護是否應套用至格式化字串。</summary>
      <returns>如果輸入字串視為密碼字串，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>取得格式化字串中位於指定位置的項目。</summary>
      <param name="index">要擷取的項目之以零起始索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於零，或大於或等於遮罩的 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" />。</exception>
      <returns>格式化字串中位於指定位置的 <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>取得遮罩中最右側指定輸入字元的索引。</summary>
      <returns>如果至少有一個輸入字元指派給遮罩，則為 <see cref="T:System.Int32" />，包含最右側的指定位置索引，但如果沒有指派位置，則為 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>取得遮罩長度，不計任何遮罩修飾詞字元。</summary>
      <returns>
        <see cref="T:System.Int32" />，包含遮罩的位置數目，不含修改遮罩輸入的字元。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>取得輸入遮罩。</summary>
      <returns>含有完全遮罩的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>取得值，指出所有必要的輸入項目是否已輸入格式化字串。</summary>
      <returns>如果所有必要輸入項目已輸入遮罩中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>取得值，指出所有必要和選擇性的輸入項目是否已輸入格式化字串。</summary>
      <returns>如果已經輸入所有必要和選擇性的輸入，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>取得或設定字元，取代實際輸入字元。</summary>
      <exception cref="T:System.InvalidOperationException">設定這個屬性時，指定的密碼字元和目前提示字元 (<see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />) 相同。 這兩個項目不能相同。</exception>
      <exception cref="T:System.ArgumentException">設定這個屬性時，指定的字元不是有效的密碼字元 (由 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判斷)。</exception>
      <returns>當做密碼字元使用的 <see cref="T:System.Char" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>取得或設定字元，用來表示所有可用編輯位置的使用者輸入項目不存在。</summary>
      <exception cref="T:System.InvalidOperationException">設定這個屬性時，指定的提示字元和目前密碼字元 (<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />) 相同。 這兩個項目不能相同。</exception>
      <exception cref="T:System.ArgumentException">設定這個屬性時，指定的字元不是有效的密碼字元 (由 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法判斷)。</exception>
      <returns>用來提示使用者輸入資料的字元。 預設為底線 (_)。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>取得或設定值，判斷應如何處理符合提示字元的輸入字元。</summary>
      <returns>
        <see langword="true" /> 表示輸入的提示字元會造成遮罩中目前的可編輯位置重設，而 <see langword="false" /> 則表示提示字元會當做一般輸入字元處理。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>取得或設定值，判斷應如何處理空格輸入字元。</summary>
      <returns>
        <see langword="true" /> 表示空格輸入字元會造成遮罩中目前的可編輯位置重設，而 <see langword="false" /> 則表示當做一般輸入字元處理。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>取得或設定值，指出遮罩中的常值字元位置是否可以用其相同值覆寫。</summary>
      <returns>
        <see langword="true" /> 表示允許常值加回，而 <see langword="false" /> 則表示不允許使用者覆寫常值字元。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>指定值，簡潔描述遮罩文字剖析作業的結果。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>作業失敗。發現非英數字元的輸入字元。 執行個體時提供 SQL Server 登入。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>作業失敗。發現非 ASCII 字元集成員的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>成功。 作業成功，因為常值、提示或空格字元是逸出字元。 如需逸出字元的詳細資訊，請參閱 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>作業失敗。 發現非數字的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>作業失敗。 程式發現無效輸入字元。 如需無效字元的詳細資訊，請參閱 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>作業失敗。 發現非字母的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>成功。 主要作業未執行，因為不需要，因此未產生副作用。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>作業失敗。 格式化字串中的目前位置是常值字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>作業失敗。 指定位置不在目標字串的範圍內，通常是小於零或大於目標字串的長度。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>作業失敗。 輸入的提示字元無效，可能因為 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 屬性設為 <see langword="false" />。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>成功。 主要作業未執行，因為不需要，但方法產生副作用。 例如，<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可以刪除未指定的編輯位置，造成格式化字串中的後續字元向左移位。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>作業失敗。 發現不是帶正負號數字的輸入字元。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>成功。 主要作業成功。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>作業失敗。 編輯位置不足，無法滿足需求。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>未知。 作業結果未定。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>表示類別成員，例如屬性或事件。 這是個抽象基底類別。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成員的名稱和其屬性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中的名稱，以及舊的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 陣列的屬性，初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
      <param name="oldMemberDescriptor">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，具有成員的名稱和屬性。</param>
      <param name="newAttributes">
        <see cref="T:System.Attribute" /> 物件的陣列，具有要加入至成員的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>使用指定的成員名稱，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="name">成員的名稱。</param>
      <exception cref="T:System.ArgumentException">名稱為空字串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>使用成員的指定名稱和屬性的陣列，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="name">成員的名稱。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 型別的陣列，包含成員屬性。</param>
      <exception cref="T:System.ArgumentException">名稱為空字串 ("") 或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>使用傳遞給建構函式的屬性陣列，建立屬性的集合。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.AttributeCollection" />，包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>比較這個執行個體和指定的物件，以檢視它們是否相等。</summary>
      <param name="obj">要與目前執行個體相比較的物件。</param>
      <returns>如果相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>當在衍生類別中覆寫時，將繼承類別的屬性加入父類別中屬性的指定清單。</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" />，列出父類別中的屬性。 這個一開始是空的。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>透過反映搜尋指定的方法，只搜尋公用 (Public) 方法。</summary>
      <param name="componentClass">包含方法的元件。</param>
      <param name="name">要搜尋的方法名稱。</param>
      <param name="args">方法的參數陣列，用來在多載的方法之間選擇。</param>
      <param name="returnType">要傳回的方法型別。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示方法；如果找不到方法，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>使用只搜尋公用方法的選項，透過反映搜尋指定的方法。</summary>
      <param name="componentClass">包含方法的元件。</param>
      <param name="name">要搜尋的方法名稱。</param>
      <param name="args">方法的參數陣列，用來在多載的方法之間選擇。</param>
      <param name="returnType">要傳回的方法型別。</param>
      <param name="publicOnly">是否將搜尋限制在公用方法。</param>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" />，表示方法；如果找不到方法，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>擷取應該在成員的引動過程使用的物件。</summary>
      <param name="type">引動目標的 <see cref="T:System.Type" />。</param>
      <param name="instance">可能的引動目標。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <returns>要在引動成員過程使用的物件。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>取得要在其上叫用 (Invoke) 方法的元件。</summary>
      <param name="componentClass">
        <see cref="T:System.Type" />，表示這個 <see cref="T:System.ComponentModel.MemberDescriptor" /> 所繫結的元件型別。 例如，如果這個 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述屬性，則這個參數應為宣告屬性的類別。</param>
      <param name="component">要呼叫的物件執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 為 <see langword="null" />。</exception>
      <returns>要叫用的元件執行個體。 當屬性附加至視覺化設計工具時，這個方法會傳回視覺化設計工具。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>取得指定元件的元件站台 (Component Site)。</summary>
      <param name="component">要為其搜尋站台的元件。</param>
      <returns>元件的站台，如果站台不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>取得或設定屬性的陣列。</summary>
      <returns>型別 <see cref="T:System.Attribute" /> 的陣列，包含這個成員的屬性。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>取得這個成員的屬性集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />，提供這個成員的屬性；如果在 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 中沒有屬性則為空集合。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>取得成員所屬的分類名稱，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns>成員所屬的分類名稱。 如果沒有 <see cref="T:System.ComponentModel.CategoryAttribute" />，則分類名稱會設定為預設分類 <see langword="Misc" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>取得成員的描述，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns>成員的描述。 如果沒有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，則屬性值會設為預設，即空字串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>取得值，表示這個成員是否只在設計階段設定，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns>如果這個成員只應該在設計階段設定，則為 <see langword="true" />；如果成員可在 Run Time 期間設定，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>取得可在視窗 (例如 [屬性] 視窗) 中顯示的名稱。</summary>
      <returns>要顯示的成員名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>取得值，表示成員是否可瀏覽，如 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 中指定的。</summary>
      <returns>如果成員是可瀏覽的則為 <see langword="true" />，否則為 <see langword="false" />。 如果沒有 <see cref="T:System.ComponentModel.BrowsableAttribute" />，則屬性值會設為預設，即 <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>取得成員的名稱。</summary>
      <returns>成員的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>取得成員名稱的雜湊程式碼，如 <see cref="M:System.String.GetHashCode" /> 中所指定的。</summary>
      <returns>成員名稱的雜湊程式碼。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>提供類型轉換器，將多行字串轉換成簡單字串。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和文化特性資訊，將給定的值物件轉換為指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的內容和屬性 (Attribute)，傳回由 <paramref name="value" /> 數所指定之陣列型別的屬性 (Property) 集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>具有為這個資料類型所公開之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果沒有屬性則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，傳回這個物件是否支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找這個物件的屬性則為 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>提供 <see cref="T:System.ComponentModel.INestedContainer" /> 介面的簡單實作，讓容器有主控元件。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 類別的新執行個體。</summary>
      <param name="owner">擁有這個巢狀容器的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>為容器內的元件建立站台。</summary>
      <param name="component">要為其建立站台的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要指派給 <paramref name="component" /> 的名稱，或 <see langword="null" />，表示略過名稱的指派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <returns>新建立的 <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>釋放巢狀容器所使用的資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>取得指定型別的服務物件 (如果有的話)。</summary>
      <param name="service">要擷取之服務的 <see cref="T:System.Type" />。</param>
      <returns>實作所要求之服務的 <see cref="T:System.Object" />，或 <see langword="null" /> (如果無法解析服務)。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>取得這個巢狀容器的主控元件。</summary>
      <returns>擁有這個巢狀容器的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>取得主控元件的名稱。</summary>
      <returns>主控元件的名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>提供可為 Null 的類型及其基礎基本類型之間的自動轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 類別的新執行個體。</summary>
      <param name="type">指定的可為 null 型別。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是可為 null 的型別。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換子是否可以使用指定的內容，將指定類型的物件轉換成這個轉換子的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換器是否可以使用指定的內容，將物件轉換成指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容和文化特性資訊，將給定的物件轉換為這個轉換器的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要當做目前文化特性使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和文化特性資訊，將給定的值物件轉換為指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要當做目前文化特性使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>使用指定的內容，建立與這個 <see cref="T:System.ComponentModel.TypeConverter" /> 相關聯之類型的執行個體，並為物件提供一組屬性值。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新屬性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>代表指定 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" />；如果無法建立物件，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>傳回在這個物件上變更值是否需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新的值，並使用指定的內容。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果在這個物件上變更屬性需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新的值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的內容和屬性 (attribute)，傳回由該值參數所指定之陣列類型的屬性 (property) 集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>具有為這個資料類型所公開之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果沒有屬性則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，傳回這個物件是否支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找這個物件的屬性則為 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>提供格式內容時，傳回此類型轉換子所針對資料類型的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來擷取環境的其他資訊，而這個轉換子就是從此環境叫用。 這個參數或這個參數的屬性可為 <see langword="null" />。</param>
      <returns>保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，傳回從 <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值集合是否為可能值的獨占清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果從 <see langword="true" /> 傳回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的獨占清單則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，如果其他的值為可能則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>會使用指定的內容傳回，這個物件是否支援可從清單中挑選的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找物件支援的通用值集合則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>傳回指定值物件對這個類型和指定的內容是否有效。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">測試有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值對這個物件有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>取得可為 null 的型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示可為 null 的型別。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>取得基礎型別。</summary>
      <returns>表示基礎型別的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>取得基礎型別轉換子。</summary>
      <returns>表示基礎型別轉換子的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>指出以星號之類的字元來遮蔽物件的文字表示。 此類別無法獲得繼承。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的預設值。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>指定文字屬性不做為密碼。 這個 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>指定文字屬性做為密碼。 這個 <see langword="static" /> (在 Visual Basic 中為 <see langword="Shared" />) 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 類別的新執行個體，選擇性顯示密碼文字。</summary>
      <param name="password">
        <see langword="true" /> 表示屬性應該顯示為密碼文字，否則為 <see langword="false" />。 預設為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>判斷兩個 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 執行個體是否相等。</summary>
      <param name="o">與目前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 相比較的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 和目前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>傳回此執行個體的值是否為預設值之指示。</summary>
      <returns>如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>取得值，指出已定義 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的屬性是否應顯示為密碼文字。</summary>
      <returns>如果屬性應該顯示為密碼文字，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>提供類別上屬性的抽象。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名稱和屬性，初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 類別的新執行個體。</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含屬性的名稱和其屬性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>使用指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 中的名稱，以及 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.ComponentModel.MemberDescriptor" /> 陣列中的屬性，初始化 <see cref="T:System.Attribute" /> 類別的新執行個體。</summary>
      <param name="descr">
        <see cref="T:System.ComponentModel.MemberDescriptor" />，包含成員名稱和其屬性。</param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 陣列，含有要與屬性 (Property) 關聯的屬性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>使用指定的名稱和屬性，初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="name">屬性的名稱。</param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 型別的陣列，包含 Property 屬性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>使其他物件能在這個屬性變更時受到告知。</summary>
      <param name="component">要為其加入處理常式的元件。</param>
      <param name="handler">要加入以做為接聽程式 (Listener) 的委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>在衍生類別中覆寫時，傳回重設物件是否變更其值。</summary>
      <param name="component">要測試重設能力的元件。</param>
      <returns>如果重設元件會變更其值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>建立指定類型的執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要建立的型別。</param>
      <returns>型別的新執行個體。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>比較這個與另一個物件，以檢視它們是否相等。</summary>
      <param name="obj">與這個 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 相比較的物件。</param>
      <returns>如果值相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的屬性加入至父類別中的指定屬性清單。</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" />，列出父類別中的屬性。 這個一開始是空的。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>傳回預設的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>屬性描述元的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>使用指定的屬性陣列做為篩選條件，傳回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="filter">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有與指定屬性 (Attribute) 相符的屬性 (Property)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>傳回指定物件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance">要為其取得屬性的元件。</param>
      <returns>具有指定元件之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>使用指定的屬性陣列做為篩選條件，傳回指定物件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance">要為其取得屬性的元件。</param>
      <param name="filter">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其屬性 (Property) 符合指定元件的指定屬性 (Attribute)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>取得指定型別的編輯器。</summary>
      <param name="editorBaseType">編輯器的基底型別 (Base Type)，用來區分屬性支援的多個編輯器。</param>
      <returns>要求的編輯器型別的執行個體，或者如果找不到，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>傳回此物件的雜湊碼。</summary>
      <returns>這個物件的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>這個方法會傳回應該在成員的引動過程使用的物件。</summary>
      <param name="type">引動目標的 <see cref="T:System.Type" />。</param>
      <param name="instance">可能的引動目標。</param>
      <returns>
        <see cref="T:System.Object" />，應該在成員的引動過程使用。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>使用其名稱以傳回型別。</summary>
      <param name="typeName">要擷取型別的組件限定名稱。</param>
      <returns>符合指定型別名稱的 <see cref="T:System.Type" />，或者如果找不到符合的指定型別名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>在衍生類別中覆寫時，取得元件上屬性的目前值。</summary>
      <param name="component">具有要為其擷取值之屬性的元件。</param>
      <returns>指定元件的屬性值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>抓取特定元件的目前 <c>ValueChanged</c> 事件處理常式集合。</summary>
      <param name="component">為其擷取事件處理常式的元件。</param>
      <returns>組合的多點傳送事件處理常式；如果目前沒有指定給 <paramref name="component" /> 的事件處理常式，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>引發您之前實作的 <c>ValueChanged</c> 事件。</summary>
      <param name="component">引發事件的物件。</param>
      <param name="e">包含事件資料的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>使其他物件能在這個屬性變更時受到告知。</summary>
      <param name="component">要為其移除處理常式的元件。</param>
      <param name="handler">要移除以做為接聽程式的委派。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>在衍生類別中覆寫時，將元件的這個屬性值重設為預設值。</summary>
      <param name="component">屬性值要重設為預設值的元件。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>在衍生類別中覆寫時，將元件的值設定為不同的值。</summary>
      <param name="component">屬性值將要設定的元件。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>在衍生類別中覆寫時，判斷指示這個屬性的值是否需要保存的值。</summary>
      <param name="component">元件，具有要檢查保存性 (Persistence) 的屬性。</param>
      <returns>如果屬性應該要保存，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>在衍生類別中覆寫時，取得這個屬性所繫結的元件型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示這個屬性所繫結的元件型別。 當叫用 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法時，指定的物件可能是這個型別的執行個體。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>取得這個屬性的型別轉換子。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" />，用來轉換這個屬性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>取得值，表示這個屬性是否應該當地語系化，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中指定的。</summary>
      <returns>如果成員是以設為 <see langword="true" /> 的 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 標記則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>在衍生類別中覆寫時，取得數值以指示這個屬性是否為唯讀。</summary>
      <returns>如果屬性為唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>在衍生類別中覆寫時，取得屬性的型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示屬性的型別。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>取得值，表示這個屬性是否應該序列化，如 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 中指定的。</summary>
      <returns>其中一個 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列舉值，指定這個屬性是否應該序列化。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>取得值，表示這個屬性的數值變更告知是否可能來自屬性描述項之外。</summary>
      <returns>如果數值變更告知可能來自屬性描述項之外則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的集合。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>指定您可以使用的空集合，而不必建立沒有項目的新集合。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 類別的新執行個體。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型別的陣列，提供這個集合的屬性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 類別的新執行個體，可以選擇這個類別是否為唯讀。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型別的陣列，提供這個集合的屬性。</param>
      <param name="readOnly">如果是 <see langword="true" />，表示無法修改集合。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>將指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入至集合。</summary>
      <param name="value">要加入至集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>已加入至集合之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>從集合中移除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回值，表示集合是否含有指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要在集合中尋找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>如果集合含有指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>將整個集合複製至陣列，開始於指定的索引編號。</summary>
      <param name="array">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件的陣列，用於複製集合的元素。</param>
      <param name="index">
        <paramref name="array" /> 參數的索引，位於複製開始的位置。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>使用布林值 (Boolean) 指示是否忽略大小寫，並以指定的名稱傳回 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="name">要從集合中傳回的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 名稱。</param>
      <param name="ignoreCase">如果您要忽略屬性名稱的大小寫，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns>具有指定名稱的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 或 <see langword="null" /> (如果屬性不存在)。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>傳回這個類別的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>傳回指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</summary>
      <param name="value">要傳回索引的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>指定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>在指定的索引編號將 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 加入集合。</summary>
      <param name="index">要將 <paramref name="value" /> 參數加入集合的索引處。</param>
      <param name="value">要加入至集合的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，排序這個集合的成員。</summary>
      <param name="sorter">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>排序這個集合的成員。 首先會套用指定的順序，其後是這個集合的預設排序，通常是依字母順序。</summary>
      <param name="names">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序的順序。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>從集合移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要從集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>從集合中移除位於指定索引位置的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index">要從集合中移除之 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>使用這個集合的預設排序，通常是依字母順序，排序這個集合的成員。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>使用指定的 <see cref="T:System.Collections.IComparer" />，排序這個集合的成員。</summary>
      <param name="comparer">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>排序這個集合的成員。 首先會套用指定的順序，其後是這個集合的預設排序，通常是依字母順序。</summary>
      <param name="names">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序的順序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>排序這個集合的成員。 首先會套用指定的順序，其後是使用指定 <see cref="T:System.Collections.IComparer" /> 的排序。</summary>
      <param name="names">字串的陣列，描述要將這個集合中 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序的順序。</param>
      <param name="comparer">比較子，用於將這個集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件排序。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 物件。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>將隨附有索引鍵和值的項目加入至 <see cref="T:System.Collections.IDictionary" />。</summary>
      <param name="key">
        <see cref="T:System.Object" />，用做要加入之項目的索引鍵。</param>
      <param name="value">
        <see cref="T:System.Object" />，用做要加入之項目的值。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>移除 <see cref="T:System.Collections.IDictionary" /> 中的所有項目。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>判斷 <see cref="T:System.Collections.IDictionary" /> 是否包含具有指定之索引鍵的項目。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中尋找的索引鍵。</param>
      <returns>如果 <see langword="true" /> 包含具有該索引鍵的項目，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>傳回這個類別的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>將有指定索引鍵的項目從 <see cref="T:System.Collections.IDictionary" /> 移除。</summary>
      <param name="key">要移除的項目索引鍵。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>傳回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>將項目加入至 <see cref="T:System.Collections.IList" />。</summary>
      <param name="value">要加入至集合中的項目。</param>
      <returns>插入新項目的位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>移除集合的所有項目。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="value">要在集合中尋找的項目。</param>
      <returns>如果在集合中找到該項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷集合中指定項目的索引。</summary>
      <param name="value">要在集合中尋找的項目。</param>
      <returns>如果在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>在指定的索引位置，插入項目至集合之中。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入集合中的項目。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>從集合中移除指定值的第一個符合項目。</summary>
      <param name="value">要從集合中移除的項目。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定之索引處的項目。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>取得這個集合中屬性描述項的數目。</summary>
      <returns>這個集合中屬性描述項的數目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>取得或設定在指定索引編號的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="index">要取得或設定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的以零起始的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 參數不是 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> 的有效索引。</exception>
      <returns>具有指定索引編號的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>取得或設定具有指定之名稱的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="name">要從集合中取得的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 名稱。</param>
      <returns>具有指定名稱的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 或 <see langword="null" /> (如果屬性不存在)。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>取得集合所包含的項目數目。</summary>
      <returns>集合中包含的元素數目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>取得值，表示是否同步化存取集合 (執行緒安全)。</summary>
      <returns>如果同步處理對集合的存取 (具備執行緒安全)，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 是否有固定的大小。</summary>
      <returns>如果 <see langword="true" /> 有固定的大小，即為 <see cref="T:System.Collections.IDictionary" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>取得值，指出 <see cref="T:System.Collections.IDictionary" /> 是否唯讀。</summary>
      <returns>如果 <see langword="true" /> 是唯讀，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>取得或設定具有指定索引鍵的項目。</summary>
      <param name="key">要取得或設定之項目的索引鍵。</param>
      <returns>具有指定索引鍵的項目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的索引鍵。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>取得 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns>如果集合具有固定大小，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>取得值，表示集合是否為唯讀。</summary>
      <returns>如果集合是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>從集合中取得或設定在指定索引的項目。</summary>
      <param name="index">要取得或設定的項目之以零起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小於 0。  
  
-或- 
 <paramref name="index" /> 等於或大於 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>識別屬性索引標籤，以顯示給指定的類別 (Class)。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>使用指定的索引標籤類別名稱，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClassName">要建立之索引標籤型別的組件限定名稱。 如需這個格式慣例的範例，請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>使用指定的索引標籤類別名稱和索引標籤範圍 (Scope)，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClassName">要建立之索引標籤型別的組件限定名稱。 如需這個格式慣例的範例，請參閱 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" />，指出此索引標籤的範圍。如果範圍是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，則只會顯示具有對應的元件 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>使用指定的索引標籤型別，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClass">要建立的索引標籤類型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>使用指定的索引標籤型別和索引標籤範圍，初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 類別的新執行個體。</summary>
      <param name="tabClass">要建立的索引標籤類型。</param>
      <param name="tabScope">
        <see cref="T:System.ComponentModel.PropertyTabScope" />，指出此索引標籤的範圍。如果範圍是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，則只會顯示具有對應的元件 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>傳回值，表示這個執行個體是否等於指定的屬性。</summary>
      <param name="other">要與這個執行個體進行比較的 <see cref="T:System.ComponentModel.PropertyTabAttribute" />，或 <see langword="null" />。</param>
      <exception cref="T:System.TypeLoadException">找不到 <paramref name="other" /> 參數之 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 屬性所指定的型別。</exception>
      <returns>如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 執行個體相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>傳回值，該值表示這個執行個體是否和指定的物件相等。</summary>
      <param name="other">要與這個執行個體相比較的物件，或為 <see langword="null" />。</param>
      <exception cref="T:System.TypeLoadException">找不到 <paramref name="other" /> 參數的 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 屬性所指定的類型。</exception>
      <returns>如果 <paramref name="other" /> 參考相同的 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 執行個體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>取得這個物件的雜湊程式碼。</summary>
      <returns>屬性所屬物件的雜湊程式碼。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>使用指定索引標籤類別的名稱和索引標籤範圍的陣列，初始化屬性。</summary>
      <param name="tabClassNames">型別之完整型別名稱的陣列，用於在 [屬性] 視窗建立索引標籤。</param>
      <param name="tabScopes">每個索引標籤的範圍。如果範圍是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，則只會顯示具有對應的元件 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 中的一或多個值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。  
  
-或- 
<paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 陣列的長度不相符。  
  
-或- 
 <paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>使用指定索引標籤類別的名稱和索引標籤範圍的陣列，初始化屬性。</summary>
      <param name="tabClasses">要建立的索引標籤型別。</param>
      <param name="tabScopes">每個索引標籤的範圍。如果範圍是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> ，則只會顯示具有對應的元件 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 。 如果是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />，則會顯示文件上所有元件的範圍。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScopes" /> 中的一或多個值不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。  
  
-或- 
<paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 陣列的長度不相符。  
  
-或- 
 <paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>取得這個屬性使用的索引標籤型別。</summary>
      <exception cref="T:System.TypeLoadException">找不到 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 屬性所指定的型別。</exception>
      <returns>型別的陣列，表示這個屬性使用的索引標籤型別。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>取得這個屬性使用之索引標籤類別的名稱。</summary>
      <returns>這個屬性使用之索引標籤類別的名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>取得陣列，該陣列為這個 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 之每個索引標籤的索引標籤範圍。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyTabScope" /> 物件的陣列，表示索引標籤的範圍。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>定義識別項，表示 [屬性] 視窗中索引標籤的保存性 (Persistence) 範圍。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>這個索引標籤是針對目前的元件。 這個索引標籤只會加入至目前元件的 [屬性] 視窗，並且當元件不再被選取時移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>這個索引標籤是針對目前的文件。 這個索引標籤只會加入至 [屬性] 視窗，並且當目前選取的文件變更時移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>這個索引標籤會加入至 [屬性] 視窗，並且只有父代 (Parent) 元件才能明確將它移除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>這個索引標籤會加入至 [屬性] 視窗，並且無法將它移除。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>指定 <see cref="T:System.ComponentModel.IExtenderProvider" /> 的實作器提供給其他元件的屬性名稱。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>使用屬性名稱和其接收者的型別來初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 類別的新執行個體。</summary>
      <param name="propertyName">擴充至指定型別的物件的屬性名稱。</param>
      <param name="receiverTypeName">這個屬性可擴充的資料型別名稱。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>使用屬性和其 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的名稱，初始化 <see cref="T:System.Type" /> 類別的新執行個體。</summary>
      <param name="propertyName">擴充至指定型別的物件的屬性名稱。</param>
      <param name="receiverType">物件資料型別的 <see cref="T:System.Type" />，此物件可以接受該屬性。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>傳回值，表示指定的物件值是否等於目前的 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。</summary>
      <param name="obj">測試其數值相等的物件。</param>
      <returns>如果指定的物件值等於目前的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>取得這個類別提供的屬性名稱。</summary>
      <returns>這個類別提供的屬性名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>取得這個屬性可擴充的資料型別名稱。</summary>
      <returns>這個屬性可擴充的資料型別名稱。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>取得這個屬性的唯一識別項。</summary>
      <returns>
        <see cref="T:System.Object" />，屬性的唯一識別項。</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>指定可用來做為應用程式設定的屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>指定 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的預設值，就是 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>指定無法用來做為應用程式設定的屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>指定可用來做為應用程式設定的屬性。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 類別的新執行個體。</summary>
      <param name="recommendedAsConfigurable">如果這個屬性 (Attribute) 繫結的屬性 (Property) 可以當做應用程式設定來使用則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>指示這個執行個體和指定的物件是否相等。</summary>
      <param name="obj">要比較的另一個物件。</param>
      <returns>如果 <paramref name="obj" /> 等於這個執行個體則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>表示此執行個體的值是否為此類別的預設值。</summary>
      <returns>如果這個執行個體為預設屬性的類別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>取得值，表示這個屬性 (Attribute) 繫結的屬性 (Property) 是否可用來做為應用程式設定。</summary>
      <returns>如果這個屬性 (Attribute) 繫結的屬性 (Property) 可以當做應用程式設定來使用則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>提供型別轉換子 (Type Converter) 將物件參考與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 類別的新執行個體。</summary>
      <param name="type">
        <see cref="T:System.Type" />，表示要與這個參考轉換子產生關聯的型別。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出此轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成參考物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換為參考型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示字型的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和引數將指定值物件轉換成參考型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示字型的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得參考資料型別的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示從 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的詳盡清單，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示這個物件是否支援可以從清單選取的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為可以呼叫 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>傳回值，指出特定值是否可以加入至標準值集合。</summary>
      <param name="context">提供其他內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">要檢查的值。</param>
      <returns>如果值是允許且可以加入至標準值集合，則為 <see langword="true" />；如果值不可加入至標準值集合，則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>提供 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件的資料。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>使用已經變更的元件來初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 類別的新執行個體。</summary>
      <param name="componentChanged">已變更的元件。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>使用已變更元件的類型來初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 類別的新執行個體。</summary>
      <param name="typeChanged">已變更的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>取得已變更其屬性、事件或擴充項 (Extender) 的元件。</summary>
      <returns>已變更其屬性、事件或擴充項 (Extender) 的元件；如果相同類型的所有元件已經變更，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>取得已變更其屬性或事件的 <see cref="T:System.Type" />。</summary>
      <returns>已變更其屬性或事件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>表示當 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 或元件在設計階段期間變更時，會處理所引發 <see cref="T:System.Type" /> 事件的方法。</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.RefreshEventArgs" />，含有已變更的元件或 <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>指定在安裝組件時是否應該叫用 Visual Studio Custom Action Installer 或 Installutil.exe (安裝程式工具)。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>設定預設可見度，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>指定在安裝組件時不要叫用 Visual Studio Custom Action Installer 或 Installutil.exe (安裝程式工具)。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>指定在安裝組件時應該要叫用 Visual Studio Custom Action Installer 或 Installutil.exe (安裝程式工具)。 這個 <see langword="static" /> 欄位是唯讀的。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 類別的新執行個體。</summary>
      <param name="runInstaller">如果安裝組件時應該叫用安裝程式則為 <see langword="true" />，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>判斷指定之 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的值是否與目前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 相等。</summary>
      <param name="obj">要比較的物件。</param>
      <returns>如果指定的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 和目前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>產生目前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的雜湊程式碼。</summary>
      <returns>目前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>判斷這個屬性是否為預設值。</summary>
      <returns>如果屬性是這個屬性類別的預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>取得值，指出在安裝組件時是否要叫用安裝程式。</summary>
      <returns>如果安裝組件時應該叫用安裝程式則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>提供類型轉換器，將 8 位元不帶正負號的整數物件與字串相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>指定元件屬性可以繫結至應用程式設定的時間。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>指定屬性不適合繫結設定。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>指定屬性適合繫結設定。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 類別的新執行個體。</summary>
      <param name="bindable">
        <see langword="true" /> 指定屬性適合繫結設定，否則為 <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>取得值，指出屬性是否適合繫結設定。</summary>
      <returns>如果屬性適合繫結設定，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>提供型別轉換子 (Type Converter) 將單精確度浮點數、浮點數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>提供類型轉換器，將字串物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.StringConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示此轉換器是否可以用指定的內容將指定來源型別的物件轉換成字串。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定值物件轉換為 <see cref="T:System.String" /> 物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>提供方法來驗證機器名稱以及遵循特定語法的路徑。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>檢查機器名稱的語法，確認它並未包含 "\"。</summary>
      <param name="value">字串，包含要檢查的機器名稱。</param>
      <returns>如果 <paramref name="value" /> 符合適當的機器名稱格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>檢查路徑的語法，查看它的開頭是否為 "\\"。</summary>
      <param name="value">字串，包含要檢查的路徑。</param>
      <returns>如果 <paramref name="value" /> 符合適當的路徑格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>檢查路徑的語法，查看它是否以 "\" 或磁碟機代號 "C:" 開頭。</summary>
      <param name="value">字串，包含要檢查的路徑。</param>
      <returns>如果 <paramref name="value" /> 符合適當的路徑格式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.TimeSpan" /> 物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用指定的內容，將指定來源型別中的物件轉換成 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定物件轉換為 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 對於目標型別並不是有效的值。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換為另一個型別。</summary>
      <param name="context">格式子 (Formatter) 內容。</param>
      <param name="culture">
        <paramref name="value" /> 所要轉換成的文化特性 (Culture)。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <returns>轉換的物件。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>代表工具箱項目的屬性。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體，並設定型別為預設值 <see cref="T:System.Drawing.Design.ToolboxItem" />。 此欄位為唯讀。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體，並將型別設定為 <see langword="null" />。 此欄位為唯讀。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體，並且指定是否使用預設的初始設定值。</summary>
      <param name="defaultType">
        <see langword="true" />，為預設型別建立工具箱項目屬性；<see langword="false" />，則為這個屬性沒有關聯的預設工具箱項目支援。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>使用指定的型別名稱，初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體。</summary>
      <param name="toolboxItemTypeName">工具箱項目型別的名稱，以及包含型別的組件。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>使用指定的工具箱項目型別，初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 類別的新執行個體。</summary>
      <param name="toolboxItemType">工具箱項目的型別。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>取得值，指出目前屬性值是否為屬性的預設值。</summary>
      <returns>如果屬性目前的值是預設值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>取得或設定工具箱項目的型別。</summary>
      <exception cref="T:System.ArgumentException">找不到型別。</exception>
      <returns>工具箱項目的型別。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>取得或設定目前 <see cref="T:System.Drawing.Design.ToolboxItem" /> 型別的名稱。</summary>
      <returns>目前工具箱項目的完整型別名稱。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>指定要用於工具箱項目的篩選條件字串和篩選條件型別。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>使用指定的篩選條件字串來初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 類別的新執行個體。</summary>
      <param name="filterString">工具箱項目的篩選條件字串。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>使用指定的篩選條件字串和型別來初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 類別的新執行個體。</summary>
      <param name="filterString">工具箱項目的篩選條件字串。</param>
      <param name="filterType">指示篩選條件型別的 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與這個執行個體進行比較的 <see cref="T:System.Object" />，或 Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</param>
      <returns>如果 <see langword="true" /> 和這個執行個體具有相同的類型和值，則為 <paramref name="obj" />否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>傳回這個執行個體的雜湊碼。</summary>
      <returns>32 位元帶正負號的整數雜湊碼。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>指示指定物件是否具有相符的篩選條件字串。</summary>
      <param name="obj">要為相符的篩選條件字串測試的物件。</param>
      <returns>如果指定的物件具有相符的篩選條件字串，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>傳回代表目前物件的字串。</summary>
      <returns>表示目前物件的字串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>取得工具箱項目的篩選條件字串。</summary>
      <returns>工具箱項目的篩選條件字串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>取得篩選條件的型別。</summary>
      <returns>指示篩選條件型別的 <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>取得屬性的型別 ID。</summary>
      <returns>這個屬性的型別 ID。 所有具有相同篩選條件字串的 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 物件會傳回相同的型別 ID。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>定義用來指示 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 所使用篩選條件型別的識別項。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>指示允許工具箱項目篩選條件字串，但並非必要。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>指示需要自訂處理來判斷是否要使用工具箱項目篩選條件字串。 通常會在根設計工具類別上設定，指出設計工具想要透過程式碼接受或拒絕工具箱項目。 設計工具必須實作 <see cref="T:System.Drawing.Design.IToolboxUser" /> 介面的 <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>指示不允許工具箱項目篩選條件字串。 如果設計工具和元件類別都具有篩選字串，且其中一個值是 <c>ToolboxItemFilterType.Prevent</c>，則工具箱項目將無法使用。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>指示工具箱項目篩選條件必須為要啟用的工具箱項目存在。  若要啟用篩選型別為 <c>Require</c> 的工具箱項目，設計工具和元件類別必須具有相符的篩選字串。 此外，設計工具或元件類別針對要啟用的工具箱項目不能是 <c>Prevent</c> 篩選型別。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>會提供轉換實值型別為其他型別，以及存取標準值和子屬性的統一方式。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換子是否可以使用指定的內容，將指定類型的物件轉換成這個轉換子的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>傳回值，指出這個轉換子是否可將指定之型別的物件轉換為這個轉換子的型別。</summary>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換器是否可以使用指定的內容，將物件轉換成指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>傳回值，指出這個轉換子是否可以將物件轉換成指定的型別。</summary>
      <param name="destinationType">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容和文化特性資訊，將給定的物件轉換為這個轉換器的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要當做目前文化特性使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>會將指定值轉換為這個轉換子的型別。</summary>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>會使用不區分的文化特性和指定的內容，將指定的字串轉換為這個轉換子的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text">要進行轉換的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>表示轉換文字的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>會使用不因文化特性而異，將指定字串轉換為這個轉換子的型別。</summary>
      <param name="text">要進行轉換的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>表示轉換文字的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>會使用指定內容和文化特性資訊，將指定文字轉換為物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="text">要進行轉換的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>表示轉換文字的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>會使用指定的內容，將指定文字轉換為物件。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text">要進行轉換的 <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>表示轉換文字的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>會將指定的文字轉換成物件。</summary>
      <param name="text">要轉換物件的文字表示。</param>
      <exception cref="T:System.NotSupportedException">字串無法轉換為適當的物件。</exception>
      <returns>表示轉換文字的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和文化特性資訊，將給定的值物件轉換為指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要將 <paramref name="value" /> 參數轉換成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>會使用引數，將指定值物件轉換成指定型別。</summary>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要將 <paramref name="value" /> 參數轉換成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>會使用指定的內容，將指定值轉換成不因文化特性而異的字串表示。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.String" />，表示轉換的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>會將指定值轉換成不因文化特性而異的字串表示。</summary>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.String" />，表示轉換的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>會使用指定的內容和文化特性資訊，將指定值轉換為字串表示。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>會使用指定的內容，將指定值轉換為字串表示。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>會將指定值轉換成字串表示。</summary>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>重新建立 <see cref="T:System.Object" />，需為物件提供一組屬性值。</summary>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" />，表示新屬性值的字典。</param>
      <returns>代表指定 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" />；如果無法建立物件，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>使用指定的內容，建立與這個 <see cref="T:System.ComponentModel.TypeConverter" /> 相關聯之類型的執行個體，並為物件提供一組屬性值。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues">新屬性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>代表指定 <see cref="T:System.Collections.IDictionary" /> 的 <see cref="T:System.Object" />；如果無法建立物件，則為 <see langword="null" />。 這個方法一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>傳回要在無法執行轉換時擲回的例外狀況。</summary>
      <param name="value">要轉換的 <see cref="T:System.Object" />，如果無法取得物件，則為 <see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException">由這個方法自動擲回。</exception>
      <returns>
        <see cref="T:System.Exception" />，表示無法執行轉換時將擲回的例外狀況。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>傳回要在無法執行轉換時擲回的例外狀況。</summary>
      <param name="value">要轉換的 <see cref="T:System.Object" />，如果無法取得物件，則為 <see langword="null" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示轉換嘗試轉換的型別。</param>
      <exception cref="T:System.NotSupportedException">由這個方法自動擲回。</exception>
      <returns>
        <see cref="T:System.Exception" />，表示無法執行轉換時將擲回的例外狀況。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>傳回值，指出在這個物件上變更值時是否需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法來建立新值。</summary>
      <returns>如果在這個物件上變更屬性需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新的值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>傳回在這個物件上變更值是否需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新的值，並使用指定的內容。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果在這個物件上變更屬性需要呼叫 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 來建立新的值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>會使用指定的內容，傳回由值參數所指定之陣列型別的屬性集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <returns>具有為這個資料類型所公開之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果沒有屬性則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的內容和屬性 (attribute)，傳回由該值參數所指定之陣列類型的屬性 (property) 集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可當做篩選條件使用。</param>
      <returns>具有為這個資料類型所公開之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果沒有屬性則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>傳回由值參數所指定的陣列型別的屬性集合。</summary>
      <param name="value">
        <see cref="T:System.Object" />，指定要取得屬性之陣列的型別。</param>
      <returns>具有為這個資料類型所公開之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果沒有屬性則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>傳回值，指出這個物件是否支援屬性。</summary>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找這個物件的屬性則為 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，傳回這個物件是否支援屬性。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找這個物件的屬性則為 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>從為這個型別轉換子所設計的資料型別預設內容中，會傳回標準值的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 含有標準有效值的集合，如果資料型別不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>提供格式內容時，傳回此類型轉換子所針對資料類型的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來擷取環境的其他資訊，而這個轉換子就是從此環境叫用。 這個參數或這個參數的屬性可為 <see langword="null" />。</param>
      <returns>保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>傳回值，指出從 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值集合是否為獨佔清單。</summary>
      <returns>如果從 <see langword="true" /> 傳回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的獨占清單則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，如果其他的值為可能則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的內容，傳回從 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 所傳回的標準值集合是否為可能值的獨占清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果從 <see langword="true" /> 傳回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的獨占清單則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，如果其他的值為可能則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>傳回這個物件是否支援可以從清單中選取的標準值集合。</summary>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找物件支援的通用值集合則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>會使用指定的內容傳回，這個物件是否支援可從清單中挑選的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找物件支援的通用值集合則為 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>傳回指定值物件對這個類型和指定的內容是否有效。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">測試有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值對這個物件有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>會傳回指定值物件是否對這個型別有效。</summary>
      <param name="value">要測試有效性的物件。</param>
      <returns>如果指定的值對這個物件有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>排序屬性的集合。</summary>
      <param name="props">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，具有要排序的屬性。</param>
      <param name="names">依據您要屬性在集合中出現之順序的名稱陣列。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，包含已排序的屬性。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>表示 <see langword="abstract" /> 類別，此類別會針對沒有屬性的物件提供屬性。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="componentType">
        <see cref="T:System.Type" />，表示這個屬性描述項繫結的元件型別。</param>
      <param name="name">屬性的名稱。</param>
      <param name="propertyType">
        <see cref="T:System.Type" />，表示這個屬性的資料型別。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 類別的新執行個體。</summary>
      <param name="componentType">
        <see cref="T:System.Type" />，表示這個屬性描述項繫結的元件型別。</param>
      <param name="name">屬性的名稱。</param>
      <param name="propertyType">
        <see cref="T:System.Type" />，表示這個屬性的資料型別。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 陣列，具有與屬性 (Property) 相關的屬性 (Attribute)。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>傳回數值，表示重設元件是否變更元件的值。</summary>
      <param name="component">要測試重設能力的元件。</param>
      <returns>如果重設元件會變更元件的值，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>重設元件的這個屬性值。</summary>
      <param name="component">具有要重設之屬性值的元件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>傳回數值，表示這個屬性的值是否能保存。</summary>
      <param name="component">具有要檢查保存性 (Persistence) 之屬性的元件。</param>
      <returns>如果屬性的值可以保存，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>取得這個屬性描述繫結的元件型別。</summary>
      <returns>
        <see cref="T:System.Type" />，表示這個屬性繫結的元件型別。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>取得值，表示這個屬性是否為唯讀。</summary>
      <returns>如果屬性是唯讀，則為 <see langword="true" />；如果屬性是讀取/寫入，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>取得屬性的類型。</summary>
      <returns>
        <see cref="T:System.Type" />，表示屬性的型別。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>代表值集合。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 類別的新執行個體。</summary>
      <param name="values">
        <see cref="T:System.Collections.ICollection" />，表示要放到集合的物件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>將這個集合的內容複製到陣列。</summary>
      <param name="array">
        <see cref="T:System.Array" />，表示要複製的目的陣列。</param>
      <param name="index">做為開頭的索引。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>傳回這個集合的列舉值。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 型別的列舉程式。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>取得集合中的物件數目。</summary>
      <returns>集合中 物件的數目。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>取得在指定索引編號的物件。</summary>
      <param name="index">要從集合取得的 <see cref="T:System.Object" /> 之以零起始的索引。</param>
      <returns>具有指定索引的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>如需這個成員的說明，請參閱 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>所有情況下都是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>提供補充性中繼資料給 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>使用父型別描述提供者，初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 類別的新執行個體。</summary>
      <param name="parent">父型別描述提供者。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>建立可以代替另一種資料類型的物件。</summary>
      <param name="provider">選擇性的服務提供者。</param>
      <param name="objectType">要建立之物件的類型。 這個參數絕對不是 <see langword="null" />。</param>
      <param name="argTypes">選擇性的型別陣列，表示要傳遞至物件建構函式的參數型別。 這個陣列可以是 <see langword="null" /> 或長度為零。</param>
      <param name="args">要傳遞給物件建構函式的選擇性參數值陣列。</param>
      <returns>替代的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>取得個別物件的快取，以索引鍵/值組的 <see cref="T:System.Collections.IDictionary" /> 方式存取。</summary>
      <param name="instance">要為其取得快取的物件。</param>
      <returns>如果提供的物件支援快取，則為 <see cref="T:System.Collections.IDictionary" />，否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>取得特定物件的擴充自訂型別描述項。</summary>
      <param name="instance">要為其取得擴充型別描述項的物件。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供物件的擴充中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>取得指定之物件的擴充項提供者。</summary>
      <param name="instance">要為其取得擴充項提供者的物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <returns>
        <paramref name="instance" /> 之擴充項提供者的陣列。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>取得指定之元件的名稱，或 <see langword="null" /> (如果元件沒有名稱)。</summary>
      <param name="component">指定的元件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <returns>指定之元件的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>對指定的物件執行一般反映。</summary>
      <param name="instance">型別的執行個體 (不可以是 <see langword="null" />)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <returns>這個 <paramref name="instance" /> 的反映類型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>對型別執行一般反映。</summary>
      <param name="objectType">要為其擷取 <see cref="T:System.Reflection.IReflect" /> 之物件的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 為 <see langword="null" />。</exception>
      <returns>這個 <paramref name="objectType" /> 的反映類型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>對具有特定型別的特定物件執行一般反映。</summary>
      <param name="objectType">要為其擷取 <see cref="T:System.Reflection.IReflect" /> 之物件的型別。</param>
      <param name="instance">型別的執行個體。 可以是 <see langword="null" />。</param>
      <returns>這個 <paramref name="objectType" /> 的反映類型。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>將反映型別轉換成執行階段型別。</summary>
      <param name="reflectionType">要轉換成其執行階段對等項目的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> 為 <see langword="null" />。</exception>
      <returns>
        <see cref="T:System.Type" />，表示 <paramref name="reflectionType" /> 的執行階段對等項目。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>取得特定物件的自訂型別描述項。</summary>
      <param name="instance">型別的執行個體。 如果未傳遞執行個體至 <see cref="T:System.ComponentModel.TypeDescriptor" />，可以為 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供型別的中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>取得特定型別的自訂型別描述項。</summary>
      <param name="objectType">要為其擷取型別描述項之物件的型別。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供型別的中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>取得特定型別和物件的自訂型別描述項。</summary>
      <param name="objectType">要為其擷取型別描述項之物件的型別。</param>
      <param name="instance">型別的執行個體。 如果未傳遞執行個體至 <see cref="T:System.ComponentModel.TypeDescriptor" />，可以為 <see langword="null" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，可以提供型別的中繼資料。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>取得值，這個值指出指定的型別是否與型別描述及其型別描述提供者的鏈結相容。</summary>
      <param name="type">要測試其相容性的型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <returns>如果 <paramref name="type" /> 與型別描述及其型別描述提供者的鏈結相容則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>提供元件特性的相關資訊，例如其屬性 (attribute)、屬性 (property) 與事件。 此類別無法獲得繼承。</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>清除元件快取時發生。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>將類別層級屬性加入目標元件執行個體。</summary>
      <param name="instance">目標元件的執行個體。</param>
      <param name="attributes">要加入元件類別的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">其中一個參數或兩者皆為 <see langword="null" />。</exception>
      <returns>之前用以加入指定屬性之新建立的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>將類別層級屬性加入目標元件類型。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">要加入元件類別的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <exception cref="T:System.ArgumentNullException">其中一個參數或兩者皆為 <see langword="null" />。</exception>
      <returns>之前用以加入指定屬性之新建立的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>為指定的編輯器基底類型加入編輯器資料表。</summary>
      <param name="editorBaseType">要加入編輯器資料表的編輯器基底類型。 如果此類型已經有資料表，這個方法將不會採取任何動作。</param>
      <param name="table">要加入的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>加入元件之單一執行個體的類型描述提供者。</summary>
      <param name="provider">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>加入元件類別的類型描述提供者。</summary>
      <param name="provider">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>加入元件之單一執行個體的類型描述提供者。</summary>
      <param name="provider">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>加入元件類別的類型描述提供者。</summary>
      <param name="provider">要加入的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>建立兩個物件之間的主要-次要關聯。</summary>
      <param name="primary">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary">次要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> 等於 <paramref name="secondary" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>建立與指定元件關聯並屬於指定設計工具類型的設計工具執行個體。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" />，指定要與設計工具關聯的元件。</param>
      <param name="designerBaseType">
        <see cref="T:System.Type" />，代表要建立的設計工具類型。</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />，亦即元件的設計工具執行個體；如果找不到設計工具，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>當傳遞到現有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 時，建立與現有事件描述元相同的新事件描述元。</summary>
      <param name="componentType">要建立新事件的元件類型。</param>
      <param name="oldEventDescriptor">現有的事件資訊。</param>
      <param name="attributes">新屬性</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptor" />，其合併了指定的中繼資料屬性與現有的中繼資料屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>從類型上指定事件動態產生描述項資訊，藉此建立與現有事件描述項相同的新的事件描述項。</summary>
      <param name="componentType">此事件所在的元件類型。</param>
      <param name="name">事件的名稱。</param>
      <param name="type">處理此事件的委派類型。</param>
      <param name="attributes">這個事件的屬性。</param>
      <returns>繫結至類型的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>建立可以代替另一種資料類型的物件。</summary>
      <param name="provider">提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服務的服務提供者。 這個參數可以是 <see langword="null" />。</param>
      <param name="objectType">要建立的物件 <see cref="T:System.Type" />。</param>
      <param name="argTypes">要傳遞給物件建構函式的選擇性參數類型陣列。 這個參數可以是 <see langword="null" /> 或長度為零的陣列。</param>
      <param name="args">要傳遞給物件建構函式的選擇性參數值陣列。 如果不是 <see langword="null" />，項目數就必須和 <paramref name="argTypes" /> 相同。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 是 <see langword="null" /> 或 <paramref name="args" /> 是 <see langword="null" />，當 <paramref name="argTypes" /> 不是 <see langword="null" /> 時。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 的項目數不同。</exception>
      <returns>如果找到相關聯的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，則為替代資料類型的執行個體；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>使用指定的現有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和屬性 (Attribute) 陣列，從現有的屬性 (Property) 描述項建立新的屬性 (Property) 描述項。</summary>
      <param name="componentType">屬性所屬之元件的 <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor">現有的屬性描述項。</param>
      <param name="attributes">這個屬性 (Property) 的新屬性 (Attribute)。</param>
      <returns>新的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，其中的指定中繼資料屬性已與現有的中繼資料屬性合併。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>使用指定的屬性名稱、類型和屬性陣列，建立並以動態方式將屬性描述項繫結至類型。</summary>
      <param name="componentType">屬性所屬之元件的 <see cref="T:System.Type" />。</param>
      <param name="name">屬性的名稱。</param>
      <param name="type">屬性的 <see cref="T:System.Type" />。</param>
      <param name="attributes">這個屬性 (Property) 的新屬性 (Attribute)。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" />，繫結至指定的類型，且具有與現有的中繼資料屬性合併的指定的中繼資料屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>傳回與指定主要物件相關聯類型的執行個體。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="primary">關聯的主要物件。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
      <returns>如有關聯存在，為已與主要物件產生關聯的次要類型執行個體；如果沒有指定關聯存在，則為 <paramref name="primary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>傳回指定元件的屬性集合。</summary>
      <param name="component">您要取得屬性的元件。</param>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" />，其包含元件的屬性。 如果 <paramref name="component" /> 為 <see langword="null" />，這個方法會傳回空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>傳回指定元件的屬性集合，以及表示是否已建立自訂類型描述元的布林值。</summary>
      <param name="component">您要取得屬性的元件。</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> 表示當 <paramref name="component" /> 屬於 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 類型時，使用自訂類型描述元中的一組基準屬性，否則為 <see langword="false" />。</param>
      <returns>內含這個元件之屬性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果元件為 <see langword="null" />，這個方法會傳回空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>傳回指定元件類型的屬性集合。</summary>
      <param name="componentType">目標元件的 <see cref="T:System.Type" />。</param>
      <returns>內含這個元件類型之屬性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果元件為 <see langword="null" />，這個方法會傳回空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>傳回使用預設類型描述元之指定元件的類別名稱。</summary>
      <param name="component">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <returns>
        <see cref="T:System.String" />，包含指定元件的類別名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>傳回使用自訂類型描述元之指定元件的類別名稱。</summary>
      <param name="component">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>
        <see cref="T:System.String" />，包含指定元件的類別名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>傳回指定類型之類別的名稱。</summary>
      <param name="componentType">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 為 <see langword="null" />。</exception>
      <returns>
        <see cref="T:System.String" />，包含指定元件類型之類別的名稱。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>使用預設類型描述元傳回指定元件的名稱。</summary>
      <param name="component">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>包含指定元件名稱的 <see cref="T:System.String" />，或如果沒有元件名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>使用自訂類型描述元傳回指定元件的名稱。</summary>
      <param name="component">需要類別名稱的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>指定元件類別的名稱，或如果沒有元件名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>傳回指定元件類型的類型轉換子。</summary>
      <param name="component">要為其取得轉換子的元件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>指定元件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>傳回指定元件類型的類型轉換子，並提供自訂類型描述元。</summary>
      <param name="component">要為其取得轉換子的元件。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>指定元件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>傳回指定類型的類型轉換子。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <returns>指定類型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>傳回指定元件的預設事件。</summary>
      <param name="component">要取得事件的元件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果沒有任何事件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>傳回具有自訂類型描述元之元件的預設事件。</summary>
      <param name="component">要取得事件的元件。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果沒有任何事件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>傳回指定元件類型的預設事件。</summary>
      <param name="componentType">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 為 <see langword="null" />。</exception>
      <returns>具有預設事件的 <see cref="T:System.ComponentModel.EventDescriptor" />，或者如果沒有任何事件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>傳回指定元件的預設屬性。</summary>
      <param name="component">要取得預設屬性的元件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或如果沒有任何屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>傳回具有自訂類型描述元之指定元件的預設屬性。</summary>
      <param name="component">要取得預設屬性的元件。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或如果沒有任何屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>傳回指定元件類型的預設屬性。</summary>
      <param name="componentType">
        <see cref="T:System.Type" />，代表要取得其屬性的類別。</param>
      <returns>具有預設屬性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />，或如果沒有任何屬性，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>取得具有指定元件之指定基底類型的編輯器。</summary>
      <param name="component">要為其取得編輯器的元件。</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" />，代表您想要尋找之編輯器的基底類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>編輯器的執行個體，可以轉型為指定的編輯器類型；如果找不到要求類型的編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>傳回具有指定基底類型與指定元件之自訂類型描述元的編輯器。</summary>
      <param name="component">要為其取得編輯器的元件。</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" />，代表您想要尋找之編輯器的基底類型。</param>
      <param name="noCustomTypeDesc">表示是否應該考慮自訂類型描述資訊的旗標。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>編輯器的執行個體，可以轉型為指定的編輯器類型；如果找不到要求類型的編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>傳回具有指定類型之指定基底類型的編輯器。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="editorBaseType">
        <see cref="T:System.Type" /> 代表您想要尋找之編輯器的基底類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 為 <see langword="null" />。</exception>
      <returns>編輯器的執行個體，可以轉型為指定的基底類型；如果找不到要求類型的編輯器，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>傳回指定元件的事件集合。</summary>
      <param name="component">要取得</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>內含這個元件之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>使用指定的屬性陣列做為篩選條件，傳回指定元件的事件集合。</summary>
      <param name="component">要取得</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可供您做為篩選條件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有符合此元件指定屬性之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>使用指定的屬性陣列做為篩選條件並使用自訂類型描述元，傳回指定元件的事件集合。</summary>
      <param name="component">要取得</param>
      <param name="attributes">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有符合此元件指定屬性之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>傳回具有自訂類型描述元之指定元件的事件集合。</summary>
      <param name="component">要取得</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>內含這個元件之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>傳回指定元件類型的事件集合。</summary>
      <param name="componentType">目標元件的 <see cref="T:System.Type" />。</param>
      <returns>內含這個元件之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>使用指定的屬性陣列做為篩選條件，傳回指定元件類型的事件集合。</summary>
      <param name="componentType">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 類型陣列，可供您做為篩選條件。</param>
      <returns>具有符合此元件指定屬性之事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>傳回元件的完整名稱。</summary>
      <param name="component">要尋找其名稱的 <see cref="T:System.ComponentModel.Component" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 為 <see langword="null" />。</exception>
      <returns>指定元件的完整名稱；如果元件有沒有名稱，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>傳回指定元件的屬性集合。</summary>
      <param name="component">要為其取得屬性的元件。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有指定元件之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>使用指定的屬性陣列做為篩選條件，傳回指定元件的屬性集合。</summary>
      <param name="component">要為其取得屬性的元件。</param>
      <param name="attributes">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其屬性 (Property) 符合指定元件的指定屬性 (Attribute)。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>使用指定的屬性陣列做為篩選條件並使用自訂類型描述元，傳回指定元件的屬性集合。</summary>
      <param name="component">要為其取得屬性的元件。</param>
      <param name="attributes">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <param name="noCustomTypeDesc">若要考慮自訂類型描述資訊，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其事件符合指定元件的指定屬性。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>傳回使用預設類型描述元之指定元件的屬性集合。</summary>
      <param name="component">要為其取得屬性的元件。</param>
      <param name="noCustomTypeDesc">
        <see langword="true" /> 表示不考慮自訂類型描述資訊，否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是跨處理序的遠端物件。</exception>
      <returns>具有指定元件之屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>傳回元件指定類型的屬性集合。</summary>
      <param name="componentType">表示要取得屬性之元件的 <see cref="T:System.Type" />。</param>
      <returns>有指定元件類型屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>使用指定的屬性陣列做為篩選條件，傳回元件指定類型的屬性集合。</summary>
      <param name="componentType">目標元件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">做為篩選條件使用的 <see cref="T:System.Attribute" /> 類型陣列。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，其屬性 (Property) 符合此類型元件的指定屬性 (Attribute)。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>傳回指定元件的類型描述提供者。</summary>
      <param name="instance">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <returns>與指定元件關聯的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>傳回指定類型的類型描述提供者。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <returns>與指定類型關聯的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>傳回指定物件時可用來執行反映的 <see cref="T:System.Type" />。</summary>
      <param name="instance">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 為 <see langword="null" />。</exception>
      <returns>指定物件的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>傳回指定類別類型時可用來執行反映的 <see cref="T:System.Type" />。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 為 <see langword="null" />。</exception>
      <returns>指定類別的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>從快取清除指定元件的屬性和事件。</summary>
      <param name="component">其屬性或事件已變更的元件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>從快取清除指定組件的屬性和事件。</summary>
      <param name="assembly">表示要重新整理之組件的 <see cref="T:System.Reflection.Assembly" />。 這個組件中的每個 <see cref="T:System.Type" /> 都會重新整理。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>從快取清除指定模組的屬性和事件。</summary>
      <param name="module">表示要重新整理之模組的 <see cref="T:System.Reflection.Module" />。 模組中的每個 <see cref="T:System.Type" /> 都會重新整理。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>從快取清除指定元件類型的屬性和事件。</summary>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>移除兩個物件之間的關聯。</summary>
      <param name="primary">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary">次要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>移除所有主要物件的關聯。</summary>
      <param name="primary">在關聯中主要的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除先前所加入之與指定物件相關聯的類型描述提供者。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>移除先前所加入與指定類型相關聯的類型描述提供者。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除先前所加入之與指定物件相關聯的類型描述提供者。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目標元件的執行個體。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>移除先前所加入與指定類型相關聯的類型描述提供者。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目標元件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">其中一或二個參數都為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>使用描述項名稱的排序描述元。</summary>
      <param name="infos">
        <see cref="T:System.Collections.IList" /> 包含排序描述元以排序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>取得或設定目標元件之元件物件模型 (COM) 類型資訊的提供者。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 執行個體，代表 COM 類型資訊提供者。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>取得以目標元件表示之元件物件模型 (COM) 物件的類型。</summary>
      <returns>以這個元件表示之 COM 物件的 <see cref="T:System.Type" />；如果不是 COM 物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>取得代表所有介面類型的類型描述提供者的類型。</summary>
      <returns>
        <see cref="T:System.Type" />，代表所有介面類型的自訂類型描述提供者。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>提供類型轉換器，可以用來將可用的類型填入清單方塊。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>使用型別陣列做為可用的型別，初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 類別的新執行個體。</summary>
      <param name="types">當做可用型別使用的 <see cref="T:System.Type" /> 型別陣列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出此轉換子是否可以使用指定的內容轉換來源物件的指定 <see cref="T:System.Type" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">來源物件的 <see cref="T:System.Type" />。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換為何種目標型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用於表示字型的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的數值物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">選擇性 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供，則會假設使用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值將會轉換成這個 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>針對這個驗證程式設計目標的資料型別，取得由該資料型別的標準值所組成的集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>保留標準有效值集合的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />，或者如果資料類型不支援標準值集合，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，表示從 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法所傳回的標準值清單是否為獨佔清單。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為從 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 傳回的 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的詳盡清單，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>取得值，指出這個物件是否支援可以使用指定內容從清單選取的標準值集合。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>因為應該呼叫 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 來尋找物件支援的通用值集合，所以會是 <see langword="true" />。 這個方法永遠不會傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>提供類型轉換器，將 16 位元不帶正負號的整數物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>提供類型轉換器，將 32 位元不帶正負號的整數物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>提供類型轉換器，將 64 位元不帶正負號的整數物件與其他表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary>提供型別轉換子 (Type Converter) 將 <see cref="T:System.Version" /> 物件與其他各種表示相互轉換。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.VersionConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出這個轉換器是否可以將指定來源型別的物件轉換成 <see cref="T:System.Version" />。</summary>
      <param name="context">提供內容資訊的物件。</param>
      <param name="sourceType">要轉換之物件的型別。</param>
      <returns>若這個轉換器可以將 sourceType 轉換成 <see cref="T:System.Version" />，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供內容資訊的物件。</param>
      <param name="destinationType">轉換的目標型別。</param>
      <returns>若轉換器可以將物件轉換成指定的目的地型別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定物件轉換為 <see cref="T:System.Version" />。</summary>
      <param name="context">提供內容資訊的物件。</param>
      <param name="culture">要用於轉換的文化特性。</param>
      <param name="value">要轉換為 <see cref="T:System.Version" /> 的值。</param>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的 <see cref="T:System.Version" /> 字串。</exception>
      <returns>轉換成 <see cref="T:System.Version" /> 值的 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和引數，將指定值轉換成指定的目的地型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">提供轉換格式化資訊的文化特性 (Culture)。</param>
      <param name="value">要轉換的值。</param>
      <param name="destinationType">value 參數所要轉換成的類型。</param>
      <returns>物件，表示轉換的值。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>傳回值，指出指定的值物件是否對這個類型和指定內容有效。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">要測試有效性的物件。</param>
      <returns>如果指定的值對這個物件有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>指定被當做警告而非錯誤處理的例外狀況。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化資料和內容，初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="info">要用於還原序列化 (Deserialization) 的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">要用於還原序列化的目的端。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>使用指定的訊息和無說明檔來初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message">對使用者顯示的訊息。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>使用指定的詳細描述和指定的例外狀況，初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message">錯誤的詳細描述。</param>
      <param name="innerException">造成這個例外狀況之內部例外狀況的參考。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>使用指定的訊息和存取指定的說明檔來初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message">對使用者顯示的訊息。</param>
      <param name="helpUrl">使用者要求說明時將會顯示的說明檔。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>使用指定的訊息和存取指定的說明檔和主題來初始化 <see cref="T:System.ComponentModel.WarningException" /> 類別的新執行個體。</summary>
      <param name="message">對使用者顯示的訊息。</param>
      <param name="helpUrl">使用者要求說明時將會顯示的說明檔。</param>
      <param name="helpTopic">使用者要求說明時將會顯示的說明主題。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>以參數名稱和其他例外狀況資訊設定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">儲存曾經用於序列化或還原序列化物件的資料，此物件正由 <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 序列化或還原序列化。</param>
      <param name="context">描述已產生例外狀況 (Exception) 之資料流的來源和目的端，和讓序列化保留該內容和額外的呼叫端定義內容的方式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>取得與警告相關的說明主題。</summary>
      <returns>與警告相關的說明主題。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>取得與警告相關的說明檔。</summary>
      <returns>與警告相關的說明檔。</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary>將色彩從某資料型別轉換為其他資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 來存取。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.ColorConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 您可以使用這個物件來取得正在叫用這個轉換子之來源環境的相關額外資訊。</param>
      <param name="sourceType">您要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，指出這個轉換子是否可以使用內容來將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換之目的型別。</param>
      <returns>如果這個轉換子可以執行作業，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，提供格式內容。 您可以使用這個物件來取得正在叫用這個轉換子之來源環境的相關額外資訊。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用來表示色彩的文化特性。</param>
      <param name="value">要轉換的物件。</param>
      <exception cref="T:System.ArgumentException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，表示轉換的值。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換為另一個型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 使用這個物件來擷取正在叫用這個轉換子之來源環境的相關額外資訊。 永遠檢查這個值是否為 <see langword="null" />。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，指定用來表示色彩的文化特性。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationtype" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，表示轉換的值。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>擷取集合，含有設計這個驗證程式之資料型別的標準值集。 如果資料型別不支援標準值集，就會傳回 <see langword="null" />。</summary>
      <param name="context">格式子 (Formatter) 內容。 使用這個物件來擷取正在叫用這個轉換子之來源環境的相關額外資訊。 永遠檢查這個值是否為 <see langword="null" />。 此外，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <returns>包含 <see langword="null" /> 的集合，或有效值的標準集。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷這個物件是否支援可以從清單選取的值標準集。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns>如果必須呼叫 <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> 以尋找物件支援的通用值集，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary>將 <see cref="T:System.Drawing.Point" /> 物件從某一個資料型別轉換為另一個資料型別。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.PointConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType">要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 物件。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換為 <see cref="T:System.Drawing.Point" /> 物件。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">包含特定文化特性資訊 (例如與特定文化特性相關的語言、日曆和文化慣例) 的物件。 以 RFC 1766 標準為基礎。</param>
      <param name="value">要轉換的物件。</param>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換成指定的類型。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">包含特定文化特性資訊 (例如與特定文化特性相關的語言、日曆和文化慣例) 的物件。 以 RFC 1766 標準為基礎。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>建立為物件提供一組屬性值的這個物件的執行個體。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <param name="propertyValues">新屬性值的字典。 字典包含了一系列的名稱/值組，每一個都會從 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 傳回一個屬性。</param>
      <returns>新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷在這個物件上變更值是否需要呼叫 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 來建立新的值。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns>如果在對此物件的一或多個屬性進行變更時，應該呼叫 <see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <param name="value">要為其取得屬性的物件的值。</param>
      <param name="attributes">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns>公開給這個資料型別的屬性集。 如果沒有屬性集公開，則這個方法可能傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns>如果應該呼叫 <see langword="true" /> 以尋找這個物件的屬性則為 <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary>將矩形從某一資料型別轉換為另一資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 來存取。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.RectangleConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別中的物件轉換成轉換子的原生型別。</summary>
      <param name="context">格式子 (Formatter) 內容。 這個物件可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType">要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 物件。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 物件，表示要轉換成的型別。</param>
      <returns>如果這個轉換子可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換為 <see cref="T:System.Drawing.Rectangle" /> 物件。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value">要轉換的物件。</param>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換成指定的類型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>建立為物件提供一組屬性值的這個物件的執行個體。 對於不變但是仍然要提供可變屬性的物件來說，這很有用。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可透過它來提供其他內容。</param>
      <param name="propertyValues">新屬性值的字典。 字典包含一系列的名稱值配對，從 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 屬性的呼叫傳回的每個屬性都會有一個配對。</param>
      <returns>新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷在這個物件上變更值是否需要呼叫 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 來建立新的值。</summary>
      <param name="context">可用來提供其他內容的型別描述項。</param>
      <returns>如果在對這個物件的一或多個屬性進行變更時應該呼叫 <see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" />，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可透過它來提供其他內容。</param>
      <param name="value">要為其取得屬性的物件的值。</param>
      <param name="attributes">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns>應該公開給這個資料型別的屬性集。 如果沒有屬性應該公開，則會傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可透過它來提供其他內容。</param>
      <returns>如果應該呼叫 <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 來尋找這個物件的屬性，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary>
        <see cref="T:System.Drawing.SizeConverter" /> 類別是用來將某一種資料型別轉換成另一種資料型別。 這個類別可透過 <see cref="T:System.ComponentModel.TypeDescriptor" /> 物件來存取。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary>初始化新的 <see cref="T:System.Drawing.SizeConverter" /> 物件。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>判斷這個轉換子是否可以將指定來源型別的物件轉換成轉換子的原生 (Native) 型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="sourceType">要轉換的來源型別。</param>
      <returns>如果這個物件可以執行轉換，則這個方法會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>取得值，表示這個轉換子是否可以使用內容將物件轉換成指定的目的型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以一定要檢查。 甚至，內容物件上的屬性可能會傳回 <see langword="null" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns>如果這個轉換子可以執行轉換，則這個方法會傳回 <see langword="true" />；否則傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>將指定的物件轉換成轉換子的原生型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value">要轉換的物件。</param>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將指定的物件轉換成指定的類型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 可用來取得環境的其他資訊，而這個轉換子就是從這個環境呼叫的。 這可能是 <see langword="null" />，所以您要隨時檢查。 此外，內容物件上的屬性也可能會傳回 <see langword="null" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件，包含文化特有的資訊，例如與特定文化相關的語言、日曆和文化習俗。 以 RFC 1766 標準為基礎。</param>
      <param name="value">要轉換的物件。</param>
      <param name="destinationType">要將物件轉換成的類型。</param>
      <exception cref="T:System.NotSupportedException">無法完成轉換作業。</exception>
      <returns>轉換的物件。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>藉由使用指定的物件屬性值組，來建立這個型別的物件。 這對於建立擁有可變更屬性的不可變更物件非常有用。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <param name="propertyValues">新屬性值的字典。 字典包含了一系列的名稱/值組，每一個都會從 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法傳回一個屬性。</param>
      <returns>新建立的物件，或 <see langword="null" /> (如果無法建立物件)。 預設實作會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷在這個物件上變更值是否需要呼叫 <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 方法來建立新的值。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns>如果在對  <see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> 物件的一或多個屬性進行變更時，應該呼叫此物件，則為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>擷取這個型別的屬性集。 根據預設值，型別不傳回任何屬性。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <param name="value">要為其取得屬性的物件的值。</param>
      <param name="attributes">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns>應該公開給這個資料型別的屬性集。 如果沒有屬性應該公開，則會傳回 <see langword="null" />。 預設的實作 (Implementation) 一定會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>判斷這個物件是否支援屬性。 根據預設，這是 <see langword="false" />。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.TypeDescriptor" />，可透過它來提供其他內容。</param>
      <returns>如果應該呼叫 <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 方法來尋找這個物件的屬性，則為  <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary>將 <see cref="T:System.Drawing.SizeF" /> 物件從一個型別轉換為另一個型別。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary>初始化 <see cref="T:System.Drawing.SizeFConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，指示轉換子是否可以透過使用指定的内容，從指定的型別轉換為 <see cref="T:System.Drawing.SizeF" /> 型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <returns>
        <see langword="true" /> 表示可以執行轉換，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，指示 <see cref="T:System.Drawing.SizeFConverter" /> 是否可將 <see cref="T:System.Drawing.SizeF" /> 轉換為指定的型別。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示您要轉換的來源類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容和文化特性資訊，將給定的物件轉換為這個轉換器的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要當做目前文化特性使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的內容和文化特性資訊，將給定的值物件轉換為指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 null，則會採用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>透過使用指定的内容，建立具有指定的屬性值之 <see cref="T:System.Drawing.SizeF" /> 的執行個體。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="propertyValues">包含屬性名稱和值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>
        <see cref="T:System.Object" />，表示新的 <see cref="T:System.Drawing.SizeF" />，如果無法建立物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>傳回值，指示在這個物件上變更值是否需要呼叫 <see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> 方法來建立新的值。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 這可能是 <see langword="null" />。</param>
      <returns>一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>透過使用指定的內容和屬性 (Attribute)，擷取 <see cref="T:System.Drawing.SizeF" /> 的屬性 (Property) 集。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <param name="value">要傳回其屬性的 <see cref="T:System.Object" />。</param>
      <param name="attributes">描述屬性的 <see cref="T:System.Attribute" /> 物件陣列。</param>
      <returns>包含屬性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>傳回值，指示 <see cref="T:System.Drawing.SizeF" /> 型別是否支援屬性。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用來提供其他內容。</param>
      <returns>一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 類別，代表伺服器用來驗證連入用戶端連線的延伸保護原則型別轉換子。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，指出這個轉換子是否可以將物件轉換成指定的型別。</summary>
      <param name="context">要轉換的物件。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，代表您想要轉換成的類型。</param>
      <returns>如果這個轉換子可以執行轉換，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>將物件轉換成指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 物件。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。 應該是 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 物件。</param>
      <param name="destinationType">要轉換值參數的目標 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換。</exception>
      <returns>
        <see cref="T:System.Object" /> 參數，代表轉換的 <paramref name="value" />。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>提供 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的資料。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>取得引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的日期/時間。</summary>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件所引發的時間。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>代表將處理 <see cref="E:System.Timers.Timer.Elapsed" /> 之 <see cref="T:System.Timers.Timer" /> 事件的方法。</summary>
      <param name="sender">事件的來源。</param>
      <param name="e">包含事件資料的 <see cref="T:System.Timers.ElapsedEventArgs" /> 物件。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>使用產生週期性事件的選項，在設定的間隔後產生事件。</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>發生於間隔耗盡時。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體，並將所有屬性設為其初始值。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>初始化 <see cref="T:System.Timers.Timer" /> 類別的新執行個體，並將 <see cref="P:System.Timers.Timer.Interval" /> 屬性設定為指定的毫秒數。</summary>
      <param name="interval">事件與事件之間的時間間隔 (單位為毫秒)。 這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="interval" /> 參數值會小於或等於零，或者大於 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>開始用於表單或為另一個元件所使用之 <see cref="T:System.Timers.Timer" /> 的執行階段初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>釋放 <see cref="T:System.Timers.Timer" /> 使用的資源。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>釋放目前 <see cref="T:System.Timers.Timer" /> 所使用的所有資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>結束用於表單或為另一個元件所使用之 <see cref="T:System.Timers.Timer" /> 的執行階段初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>將 <see cref="P:System.Timers.Timer.Enabled" /> 設定為 <see langword="true" />，開始引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Timers.Timer" /> 是使用等於或大於 <see cref="F:System.Int32.MaxValue" /> + 1 的間隔所建立，或設為小於零的間隔。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>將 <see cref="P:System.Timers.Timer.Enabled" /> 設定為 <see langword="false" />，停止引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>取得或設定布林值，表示 <see cref="T:System.Timers.Timer" /> 是否應該只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次 (<see langword="false" />) 或重複 (<see langword="true" />)。</summary>
      <returns>如果 <see cref="T:System.Timers.Timer" /> 應於每次間隔耗盡時引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />；如果應該在第一次間隔耗盡後只引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件一次，則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>取得或設定值，表示 <see cref="T:System.Timers.Timer" /> 是否應引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ObjectDisposedException">無法設定這個屬性，因為計時器已處置。</exception>
      <exception cref="T:System.ArgumentException">啟用計時器之前，<see cref="P:System.Timers.Timer.Interval" /> 屬性已設定為大於 <see cref="F:System.Int32.MaxValue" /> 的值。</exception>
      <returns>如果 <see cref="T:System.Timers.Timer" /> 應該引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>取得或設定引發 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的間隔 (以毫秒為單位)。</summary>
      <exception cref="T:System.ArgumentException">間隔是小於或等於零。  
  
-或- 
間隔大於 <see cref="F:System.Int32.MaxValue" />，且計時器目前已啟用。 (如果目前沒有啟用計數器，則在計數器變成啟用狀態之前，不會擲回例外狀況)。</exception>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件之間的時間間隔 (以毫秒為單位)。 這個值必須大於零，並且小於或等於 <see cref="F:System.Int32.MaxValue" />。 預設為 100 毫秒。</returns>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>取得或設定在設計模式中繫結 <see cref="T:System.Timers.Timer" /> 到其容器的站台。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 介面，代表繫結 <see cref="T:System.Timers.Timer" /> 物件到其容器的站台。</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>取得或設定物件，用來封送處理事件處理常式的呼叫 (當間隔已經耗盡時所發出)。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示用來封送處理事件處理常式呼叫 (當間隔已經耗盡時所發出) 的物件。 預設為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>設定視覺化設計工具 (Visual Designer) 在參考事件、擴充項 (Extender) 或屬性時，可以顯示的描述。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 類別的新執行個體。</summary>
      <param name="description">要使用的描述。</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>取得視覺化設計工具在參考事件、擴充項或屬性時，可以顯示的描述。</summary>
      <returns>事件、擴充項或屬性的描述。</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>將 <see cref="T:System.String" /> 型別轉換成 <see cref="T:System.Uri" /> 型別，反之亦然。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.UriTypeConverter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回值，指出這個轉換子是否可將指定之型別的物件轉換為這個轉換子的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType">
        <see cref="T:System.Type" />，表示要轉換的來源型別。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 參數為 <see langword="null" />。</exception>
      <returns>如果 <paramref name="sourceType" /> 為 <see cref="T:System.String" /> 型別或是可以從 <paramref name="sourceType" /> 指派 <see cref="T:System.Uri" /> 型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>傳回這個轉換器是否可以使用指定的內容，將物件轉換成指定的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" />，表示要轉換成的型別。</param>
      <returns>如果 <paramref name="destinationType" /> 屬於型別 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />、<see cref="T:System.String" /> 或 <see cref="T:System.Uri" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的內容和文化特性資訊，將給定的物件轉換為這個轉換器的類型。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">要當做目前文化特性使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>會使用指定的內容和文化特性資訊，將指定值物件轉換成指定的型別。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果傳遞 <see langword="null" />，則會採用目前的文化特性。</param>
      <param name="value">要進行轉換的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">要將 <paramref name="value" /> 參數轉換成的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">無法執行轉換作業。</exception>
      <returns>
        <see cref="T:System.Object" />，代表轉換過的值。</returns>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>傳回值，指出指定之值物件是否為 <see cref="T:System.Uri" /> 或是可以從它建立 <see cref="T:System.Uri" />。</summary>
      <param name="context">提供格式內容的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value">測試有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果 <paramref name="value" /> 為 <see cref="T:System.Uri" /> 或是可以從中建立 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
  </members>
</doc>
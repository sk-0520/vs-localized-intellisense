<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>代表單一子運算式成功擷取的結果。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>擷取已透過呼叫 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 屬性從輸入字串擷取的子字串。</summary>
      <returns>比對所擷取的子字串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>在原始字串中找到擷取的子字串的第一個字元之位置。</summary>
      <returns>在原始字串中找到擷取的子字串之以零起始的開始位置。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>取得所擷取子字串的長度。</summary>
      <returns>擷取的子字串的長度。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>從輸入字串取得擷取的子字串。</summary>
      <returns>比對所擷取的子字串。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>代表單一擷取群組完成的擷取集合。 集合是不可變的 (唯讀)，且沒有公用的建構函式。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合的所有項目至指定索引處開始的指定陣列。</summary>
      <param name="array">複製集合的目標陣列。</param>
      <param name="arrayIndex">在目的陣列中要開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 不在 <paramref name="array" /> 範圍內。  
  
-或- 
 <paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> 落在 <paramref name="array" /> 範圍以外。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將集合的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合中複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於 0。</exception>
      <exception cref="T:System.ArgumentException">來源集合中的項目數目大於從 <paramref name="arrayIndex" /> 到目的端 <paramref name="array" /> 結尾的可用空間。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>提供逐一查看集合的列舉值。</summary>
      <returns>物件，包含 <see cref="T:System.Text.RegularExpressions.Capture" /> 內的所有 <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要新增至集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="item">要在集合中找出的物件。</param>
      <returns>若 <paramref name="item" /> 存在於此集合則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要從集合中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <summary>決定集合中指定項目的索引。</summary>
      <param name="item">要在集合中找出的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要新增至集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="value">要在集合中找出的物件。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>決定集合中指定項目的索引。</summary>
      <param name="value">要在集合中找出的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從集合中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>取得群組所擷取的子字串數目。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中的項目數。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>取得值，這個值會指出集合是否唯讀。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>取得值，指示對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>取得集合的個別成員。</summary>
      <param name="i">擷取集合內的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小於 0 或大於 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。</exception>
      <returns>在集合中位置 <paramref name="i" /> 上的擷取的子字串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns>
        <see langword="true" />，因為集合具有固定的大小。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>代表單一擷取群組的結果。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>傳回 <see langword="Group" /> 物件，相等於可安全地在多個執行緒之間共用而提供的物件。</summary>
      <param name="inner">輸入 <see cref="T:System.Text.RegularExpressions.Group" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 為 <see langword="null" />。</exception>
      <returns>規則運算式 <see langword="Group" /> 物件。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>依照最內層最左邊為優先的順序，取得符合擷取群組的所有擷取的集合 (如果規則運算式使用 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 選項修改，則依照最內層最右邊為優先的順序)， 集合可能有零個或更多項目。</summary>
      <returns>符合群組的子字串集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>傳回目前執行個體所代表的擷取群組名稱。</summary>
      <returns>目前執行個體所代表的擷取群組名稱。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>取得值，指出比對是否成功。</summary>
      <returns>如果比對成功，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>在單一比對中傳回擷取之群組的集合。 集合是不可變的 (唯讀)，且沒有公用的建構函式。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)">
      <summary>判斷群組集合是否包含由指定名稱識別的擷取群組。</summary>
      <param name="key">具有所要尋找擷取群組名稱的字串。</param>
      <returns>若群組集合包含由 <paramref name="key" /> 識別的擷取群組，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合的所有項目至指定索引處開始的指定陣列。</summary>
      <param name="array">複製集合的目標陣列。</param>
      <param name="arrayIndex">在目的陣列中要開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 不在 <paramref name="array" /> 範圍內。

-或-

<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 落在 <paramref name="array" /> 範圍以外。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <summary>從特定的陣列索引開始，將群組集合的元素複製到 <see cref="T:System.Text.RegularExpressions.Group" /> 陣列。</summary>
      <param name="array">從群組集合複製元素的目的地一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 為 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小於零。

-或-

<paramref name="arrayIndex" /> 大於 <paramref name="array" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> - <paramref name="arrayIndex" /> 的長度小於群組集合計數。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>提供逐一查看集合的列舉值。</summary>
      <returns>列舉程式，包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要新增至集合的群組。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <summary>判斷群組集合是否包含特定群組項目。</summary>
      <param name="item">要在群組集合中尋找的群組。</param>
      <returns>若在群組集合中找到群組項目，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要移除的群組。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
      <returns>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Text#RegularExpressions#Group}}#GetEnumerator">
      <summary>提供逐一查看群組集合的列舉值。</summary>
      <returns>包含 <see cref="T:System.Text.RegularExpressions.Group" /> 集合中所有名稱和物件的列舉值。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <summary>提供逐一查看群組集合的列舉值。</summary>
      <returns>包含群組集合中所有 <see cref="T:System.Text.RegularExpressions.Group" /> 物件的列舉值。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <summary>判斷群組集合中特定群組的索引。</summary>
      <param name="item">要在群組集合中尋找的群組。</param>
      <returns>如果找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要插入群組的位置。</param>
      <param name="item">要插入的群組。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除群組的以零起始索引。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要新增至群組集合的物件。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
      <returns>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷群組集合是否包含特定群組項目。</summary>
      <param name="value">要在群組集合中尋找的群組。</param>
      <returns>若在群組集合中找到群組項目，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>判斷群組集合中特定群組的索引。</summary>
      <param name="value">要在群組集合中尋找的群組。</param>
      <returns>如果找到，則為 <paramref name="item" /> 的索引；否則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要插入群組的位置。</param>
      <param name="value">要插入的群組。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要移除的群組。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除群組的以零起始索引。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法。 此為唯讀集合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)">
      <summary>嘗試擷取由所提供名稱索引鍵識別的群組 (如果存在於群組集合中)。</summary>
      <param name="key">具有所要尋找群組名稱索引鍵的字串。</param>
      <param name="value">當方法傳回時，如果找到，則為其名稱為 <paramref name="key" /> 的群組；如果找不到，則為 <see langword="null" />。</param>
      <returns>若存在由所提供名稱索引鍵識別的群組，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>傳回集合中的群組數。</summary>
      <returns>集合中的群組數。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>取得值，這個值表示集合是否為唯讀。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>取得值，指出 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的存取是否同步 (安全執行緒)。</summary>
      <returns>所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>以整數索引啟用對集合成員的存取。</summary>
      <param name="groupnum">要擷取之集合成員的以零起始的索引。</param>
      <returns>
        <paramref name="groupnum" /> 指定的集合成員。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>以字串索引啟用對集合成員的存取。</summary>
      <param name="groupname">擷取群組的名稱。</param>
      <returns>
        <paramref name="groupname" /> 指定的集合成員。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Keys">
      <summary>取得字串列舉，其中包含群組集合的名稱索引鍵。</summary>
      <returns>群組集合的名稱索引鍵。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>取得可用以同步存取 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的物件。</summary>
      <returns>要同步化的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件複本。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <summary>取得集合中指定位置的群組。</summary>
      <param name="index">群組集合中群組的以零起始索引。</param>
      <exception cref="T:System.NotSupportedException">無法設定項目。 此為唯讀集合。</exception>
      <returns>在所需位置的群組。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，指出群組集合是否有固定的大小。</summary>
      <returns>一律為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>取得所需位置中的群組。</summary>
      <param name="index">群組集合中群組的以零起始索引位置。</param>
      <exception cref="T:System.NotSupportedException">無法設定項目。 此為唯讀集合。</exception>
      <returns>在所需位置的群組。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Values">
      <summary>取得包含群組集合中所有群組的群組列舉。</summary>
      <returns>群組列舉。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>表示單一規則運算式 (Regular Expression) 比對的結果。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>自最後一個比對結束的位置 (在最後符合字元之後的字元) 開始，傳回具有下一個比對結果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 物件。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
      <returns>下一個規則運算式相符項目。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>傳回所指定取代模式的展開 (Expansion)。</summary>
      <param name="replacement">要使用的取代模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException">這種模式不允許展開。</exception>
      <returns>
        <paramref name="replacement" /> 參數的展開版本。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>傳回 <see cref="T:System.Text.RegularExpressions.Match" /> 執行個體，相當於可在多個執行緒之間提供一個可共用的執行個體。</summary>
      <param name="inner">相當於所需項目的規則運算式相符項目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 為 <see langword="null" />。</exception>
      <returns>適合在多個執行緒之間共用的規則運算式相符項目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>取得空白群組。 所有失敗的比對會傳回這個空白比對。</summary>
      <returns>空的符合項目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>取得符合規則運算式的群組集合。</summary>
      <returns>符合模式的字元群組。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>表示藉由重複套用規則運算式 (Regular Expression) 模式至輸入字串，所找到的成功比對的集合。  集合是不可變的 (唯讀)，且沒有公用的建構函式。 <see cref="T:System.Text.RegularExpressions.Regex.Matches(System.String)" /> 方法會傳回 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 物件。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>複製集合的所有元素到指定索引處開始的指定陣列。</summary>
      <param name="array">複製集合的目標陣列。</param>
      <param name="arrayIndex">在陣列中要開始複製的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多維陣列。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 不在 <paramref name="array" /> 範圍內。  
  
-或- 
 <paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 落在 <paramref name="array" /> 範圍以外。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <summary>從特定的 <see cref="T:System.Array" /> 索引開始，將集合的項目複製至 <see cref="T:System.Array" />。</summary>
      <param name="array">一維 <see cref="T:System.Array" />，是從集合中複製的元素之目的端。 <see cref="T:System.Array" /> 必須有以零為起始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中以零起始的索引，即開始複製的位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>提供逐一查看集合的列舉值。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
      <returns>物件，包含 <see cref="T:System.Text.RegularExpressions.Match" /> 內的所有 <see cref="T:System.Text.RegularExpressions.MatchCollection" /> 物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要新增至集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="item">要在集合中找出的物件。</param>
      <returns>若 <paramref name="item" /> 存在於此集合則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要從集合中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>如果已順利從集合中移除 <paramref name="item" /> 則為 <see langword="true" />，否則為 <see langword="false" />。 如果在原始集合中找不到 <paramref name="item" />，則這個方法也會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator">
      <summary>傳回逐一查看集合的列舉值。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>可用來逐一查看集合的列舉值。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <summary>決定集合中指定項目的索引。</summary>
      <param name="item">要在集合中找出的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="item" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應在 <paramref name="item" /> 插入以零為起始的索引。</param>
      <param name="item">要插入集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要新增至集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
      <returns>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear">
      <summary>移除集合的所有項目。</summary>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <summary>判斷此集合是否包含特定的值。</summary>
      <param name="value">要在集合中找出的物件。</param>
      <returns>如果在集合中找到 <see cref="T:System.Object" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>決定集合中指定項目的索引。</summary>
      <param name="value">要在集合中找出的物件。</param>
      <returns>如果可在清單中找到則為 <paramref name="value" /> 的索引，否則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">應在 <paramref name="value" /> 插入以零為起始的索引。</param>
      <param name="value">要插入集合的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">要從集合中移除的物件。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>呼叫這個方法一律會擲回 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="index">要移除之項目的以零為起始的索引。</param>
      <exception cref="T:System.NotSupportedException">集合是唯讀的。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>取得符合項的數目。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
      <returns>符合項的數目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>取得值，這個值會指出集合是否唯讀。</summary>
      <returns>所有情況下都是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>取得值，指出對集合的存取是否為同步的 (安全執行緒)。</summary>
      <returns>所有情況下都是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>取得集合的個別成員。</summary>
      <param name="i">
        <see cref="T:System.Text.RegularExpressions.Match" /> 集合內的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小於 0，或大於等於 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
      <returns>在集合中位置 <paramref name="i" /> 上的擷取的子字串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>取得物件，這個物件可以用來對集合進行同步存取。</summary>
      <returns>可用來同步存取集合的物件。 這個屬性永遠傳回物件本身。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize">
      <summary>取得值，這個值表示集合的大小是否是固定的。</summary>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <summary>取得位在指定索引處的元素。</summary>
      <param name="index">要取得之項目的以零為起始的索引。</param>
      <returns>在指定索引上的項目。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>表示每次在 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法作業期間找到規則運算式 (Regular Expression) 相符項目時都會呼叫的方法。</summary>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 物件，表示 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法作業期間的單一規則運算式相符項目。</param>
      <returns>字串，由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派 (Delegate) 所表示的方法傳回。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>表示不變的規則運算式 (Regular Expression)。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>指定模式比對作業不應逾時。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>在作業逾時之前可在模式比對作業中流逝的最長時間。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化的資料，初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="info">包含序列化模式和 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 資訊的物件。</param>
      <param name="context">這個序列化的目的端。 (不使用這個參數；請指定 <see langword="null" />)。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 包含的模式為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> 包含無效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 旗標。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>為指定的規則運算式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用會修改模式的選項，為指定的規則運算式初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，這些值會修改規則運算式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含無效的旗標。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>針對指定的規則運算式，使用修改模式的選項，以及指定在逾時前模式比對方法應該嘗試比對的時間長度的值，初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 類別的新執行個體。</summary>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，這些值會修改規則運算式。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>將一個或多個指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件編譯為具名組件。</summary>
      <param name="regexinfos">陣列，描述要編譯的規則運算式。</param>
      <param name="assemblyname">組件的檔案名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 參數的 <see cref="P:System.Reflection.AssemblyName.Name" /> 屬性值為空字串或 null 字串。  
  
-或- 
<paramref name="regexinfos" /> 中一個或多個物件的規則運算式模式包含無效的語法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援為編譯的規則運算式建立其組件。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>將一個或多個指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件編譯為具有指定之屬性的具名組件。</summary>
      <param name="regexinfos">陣列，描述要編譯的規則運算式。</param>
      <param name="assemblyname">組件的檔案名稱。</param>
      <param name="attributes">陣列，定義要套用至組件的屬性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 參數的 <see cref="P:System.Reflection.AssemblyName.Name" /> 屬性值為空字串或 null 字串。  
  
-或- 
<paramref name="regexinfos" /> 中一個或多個物件的規則運算式模式包含無效的語法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援為編譯的規則運算式建立其組件。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>將一個或多個指定的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件和指定的資源檔編譯為具有指定之屬性的具名組件。</summary>
      <param name="regexinfos">陣列，描述要編譯的規則運算式。</param>
      <param name="assemblyname">組件的檔案名稱。</param>
      <param name="attributes">陣列，定義要套用至組件的屬性。</param>
      <param name="resourceFile">要包括在組件中的 Win32 資源檔的名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> 參數的 <see cref="P:System.Reflection.AssemblyName.Name" /> 屬性值為空字串或 null 字串。  
  
-或- 
<paramref name="regexinfos" /> 中一個或多個物件的規則運算式模式包含無效的語法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="resourceFile" /> 參數指定不正確的 Win32 資源檔。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <paramref name="resourceFile" /> 參數所指定的檔案。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援為編譯的規則運算式建立其組件。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>以逸出程式碼取代字元 (\、*、+、?、|、{、[、(、)、^、$、.、# 和空白字元) 的最小集合，以便逸出這些字元。 這樣會指示規則運算式引擎將這些字元解譯為常值，而非解譯為中繼字元。</summary>
      <param name="str">輸入字串，包含要轉換的文字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
      <returns>字元字串，其中中繼字元已轉換為逸出格式。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>傳回規則運算式的擷取群組名稱的陣列。</summary>
      <returns>群組名稱的字串陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>傳回對應陣列中群組名稱的擷取群組編號的陣列。</summary>
      <returns>群組編號的整數陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>取得對應指定群組編號的群組名稱。</summary>
      <param name="i">群組編號，要轉換至對應群組名稱的。</param>
      <returns>字串，含有與指定群組編號相關聯的群組名稱。 如果沒有對應 <paramref name="i" /> 的群組名稱，方法會傳回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>傳回對應指定群組名稱的群組編號。</summary>
      <param name="name">群組名稱，要轉換至對應群組編號的。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns>對應指定群組名稱的群組編號；如果 <paramref name="name" /> 不是有效的群組名稱，則為 -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <exception cref="T:System.NotSupportedException">參考已初始化。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>表示 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定的規則運算式是否要在指定的輸入字串中尋找相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>如果規則運算式尋找到符合項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>表示 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中所指定的規則運算式，是否要從字串中指定的起始位置開始，在指定的輸入字串中尋找相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="startat">要開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>如果規則運算式尋找到符合項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>表示指定的規則運算式是否在指定的輸入字串中尋找相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>如果規則運算式尋找到符合項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>表示指定的規則運算式是否使用指定的比對選項，在指定的輸入字串中尋找相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>如果規則運算式尋找到符合項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指出指定的規則運算式是否使用指定的比對選項和逾時間隔，在指定的輸入字串中尋找相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。</exception>
      <returns>如果規則運算式尋找到符合項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>在指定的輸入字串中，搜尋符合 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中所指定規則運算式的第一個項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>物件，包含符合之項目的相關資訊。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>從字串中指定的開始位置開始，在輸入字串中搜尋規則運算式的第一個相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="startat">要開始搜尋之以零起始的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>物件，包含符合之項目的相關資訊。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>從指定的開始位置開始並且僅搜尋指定數目的字元，在輸入字串中搜尋規則運算式的第一個相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="beginning">定義要搜尋的最左邊位置的輸入字串中以零為起始的字元位置。</param>
      <param name="length">子字串中要包含在搜尋中的字元數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 小於零或大於 <paramref name="input" /> 的長度。  
  
-或- 
 <paramref name="length" /> 小於零或大於 <paramref name="input" /> 的長度。  
  
-或- 
 <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> 識別 <paramref name="input" /> 範圍之外的位置。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>物件，包含符合之項目的相關資訊。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>在指定的輸入字串中搜尋所指定規則運算式的第一個相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>物件，包含符合之項目的相關資訊。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的比對選項，在輸入字串中搜尋所指定規則運算式的第一個相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>物件，包含符合之項目的相關資訊。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的比對選項和逾時間隔，在輸入字串中搜尋所指定規則運算式的第一個相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>物件，包含符合之項目的相關資訊。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>在指定的輸入字串搜尋規則運算式的所有項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <returns>搜尋之後找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。 如果找不到相符的項目，此方法會傳回空集合物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>自字串中指定的開始位置開始，在指定的輸入字串搜尋規則運算式的所有項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="startat">在輸入字串中開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
      <returns>搜尋之後找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。 如果找不到相符的項目，此方法會傳回空集合物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>在指定的輸入字串搜尋所指定規則運算式的所有相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <returns>搜尋之後找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。 如果找不到相符的項目，此方法會傳回空集合物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的比對選項在指定的輸入字串中，搜尋所指定規則運算式的所有相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，這些值會指定用於比對的選項。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <returns>搜尋之後找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。 如果找不到相符的項目，此方法會傳回空集合物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的比對選項和逾時間隔，在指定的輸入字串中搜尋所指定規則運算式的所有相符項目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，這些值會指定用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
      <returns>搜尋之後找到的 <see cref="T:System.Text.RegularExpressions.Match" /> 物件集合。 如果找不到相符的項目，此方法會傳回空集合物件。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>在指定的輸入字串中，使用指定的取代字串來取代符合規則運算式模式的所有字串。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="replacement">取代字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果規則運算式模式在目前執行個體中沒有符合項目，方法會傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>在指定的輸入字串中，使用指定的取代字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="replacement">取代字串。</param>
      <param name="count">取代作業可以發生的最大次數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果規則運算式模式在目前執行個體中沒有符合項目，方法會傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>在指定的輸入子字串中，使用指定的取代字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="replacement">取代字串。</param>
      <param name="count">取代可以發生的最多次數。</param>
      <param name="startat">在輸入字串中開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果規則運算式模式在目前執行個體中沒有符合項目，方法會傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>在指定的輸入字串中，使用指定的取代字串來取代符合指定之規則運算式的所有字串。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="replacement">取代字串。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果在目前的執行個體中沒有符合 <paramref name="pattern" /> 的項目，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的輸入字串中，使用指定的取代字串來取代符合指定之規則運算式的所有字串。 指定的選項會修改符合的作業。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="replacement">取代字串。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果在目前的執行個體中沒有符合 <paramref name="pattern" /> 的項目，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的輸入字串中，使用指定的取代字串來取代符合指定之規則運算式的所有字串。 如果沒有找到相符項目，其他參數會指定修改比對作業的選項和逾時間隔。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="replacement">取代字串。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果在目前的執行個體中沒有符合 <paramref name="pattern" /> 的項目，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的輸入字串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串，取代所有與指定之規則運算式相符的字串。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="evaluator">檢查每個符合項目並傳回原始符合字串或取代字串的自訂方法。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果在目前的執行個體中沒有符合 <paramref name="pattern" /> 的項目，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的輸入字串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串，取代所有與指定之規則運算式相符的字串。 指定的選項會修改符合的作業。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="evaluator">檢查每個符合項目並傳回原始符合字串或取代字串的自訂方法。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果在目前的執行個體中沒有符合 <paramref name="pattern" /> 的項目，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的輸入字串中，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串，取代所有與指定之規則運算式相符的子字串。 如果沒有找到相符項目，其他參數會指定修改比對作業的選項和逾時間隔。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="evaluator">檢查每個符合項目並傳回原始符合字串或取代字串的自訂方法。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果在目前的執行個體中沒有符合 <paramref name="pattern" /> 的項目，則方法傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的輸入字串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串，取代所有與指定之規則運算式相符的字串。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="evaluator">檢查每個符合項目並傳回原始符合字串或取代字串的自訂方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果規則運算式模式在目前執行個體中沒有符合項目，方法會傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>在指定的輸入字串中，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="evaluator">檢查每個符合項目並傳回原始符合字串或取代字串的自訂方法。</param>
      <param name="count">取代將發生的最多次數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果規則運算式模式在目前執行個體中沒有符合項目，方法會傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>在指定的輸入子字串中，使用 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委派所傳回的字串來取代符合規則運算式模式的指定最大字串數目。</summary>
      <param name="input">用來搜尋比對的字串。</param>
      <param name="evaluator">檢查每個符合項目並傳回原始符合字串或取代字串的自訂方法。</param>
      <param name="count">取代將發生的最多次數。</param>
      <param name="startat">在輸入字串中開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>與輸入字串相同的新字串 (不同之處是取代字串會取代每一個相符的字串)。 如果規則運算式模式在目前執行個體中沒有符合項目，方法會傳回未變更的目前執行個體。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>在 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定之規則運算式模式所定義的位置，將輸入字串分隔成子字串的陣列。</summary>
      <param name="input">要分割的字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>字串的陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>在 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定的規則運算式所定義的位置，以指定的最大次數來將輸入字串分隔成子字串的陣列。</summary>
      <param name="input">要分隔的字串。</param>
      <param name="count">分隔作業可以發生的最多次數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>字串的陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>在 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式中指定的規則運算式所定義的位置，以指定的最大次數來將輸入字串分隔成子字串的陣列。 規則運算式模式從輸入字串中指定的字元位置開始搜尋。</summary>
      <param name="input">要分隔的字串。</param>
      <param name="count">分隔作業可以發生的最多次數。</param>
      <param name="startat">在輸入字串中要開始搜尋的字元位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小於零或大於 <paramref name="input" /> 的長度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>字串的陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>在規則運算式模式所定義的位置，將輸入字串分割成子字串陣列。</summary>
      <param name="input">要分割的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>字串的陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的規則運算式模式所定義的位置，將輸入字串分割成子字串陣列。 指定的選項會修改符合的作業。</summary>
      <param name="input">要分割的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>字串的陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的規則運算式模式所定義的位置，將輸入字串分割成子字串陣列。 如果沒有找到相符項目，其他參數會指定修改比對作業的選項和逾時間隔。</summary>
      <param name="input">要分割的字串。</param>
      <param name="pattern">要比對的規則運算式模式。</param>
      <param name="options">列舉值的位元組合，提供用於比對的選項。</param>
      <param name="matchTimeout">逾時間隔，若要表示此方法不應逾時則為 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">發生規則運算式剖析錯誤。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效位元組合。  
  
-或- 
 <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">發生逾時。 如需逾時的詳細資訊，請參閱＜備註＞一節。</exception>
      <returns>字串陣列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將還原序列化目前 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所需的資料填入 (Populate) <see cref="T:System.Text.RegularExpressions.Regex" /> 物件。</summary>
      <param name="si">要使用序列化資訊來填入的物件。</param>
      <param name="context">要儲存並擷取序列化資料的位置。 這個參數保留給未來使用。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>傳回傳遞至 <see langword="Regex" /> 建構函式中的規則運算式模式。</summary>
      <returns>
        <paramref name="pattern" /> 參數，傳遞至 <see langword="Regex" /> 建構函式。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>轉換輸入字串中任何逸出的字元。</summary>
      <param name="str">輸入字串，包含要轉換的文字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 包含無法辨認的逸出序列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 為 <see langword="null" />。</exception>
      <returns>字元字串，其中任何逸出字元轉換成其未逸出格式。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <returns>如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 屬性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 選項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <returns>如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 屬性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 選項，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>檢查逾時間隔是否在可接受的範圍內。</summary>
      <param name="matchTimeout">要檢查的逾時間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的逾時不在有效範圍內。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>取得或設定在已編譯規則運算式目前靜態快取中項目的最大數目。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">設定作業中的值小於零。</exception>
      <returns>靜態快取中項目的最大數目。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>取得或設定字典，對應具名擷取群組及其索引值。</summary>
      <exception cref="T:System.ArgumentNullException">在設定作業中指派給 <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> 的屬性值是 <see langword="null" />。</exception>
      <returns>對應具名擷取群組及其索引值的字典。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>取得或設定字典，對應編號的擷取群組及其索引值。</summary>
      <exception cref="T:System.ArgumentNullException">在設定作業中指派給 <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> 的屬性值是 <see langword="null" />。</exception>
      <returns>對應編號的擷取群組及其索引值的字典。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>取得目前執行個體的逾時間隔。</summary>
      <returns>在<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />擲回之前，可在模式比對作業中流逝的最大時間間隔，或者為<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />（如果停用逾時）。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>取得傳入 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式的選項。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 列舉的一個或多個成員，代表傳遞至 <see cref="T:System.Text.RegularExpressions.Regex" /> 建構函式的選項</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>取得值，指出規則運算式是否由右至左搜尋。</summary>
      <returns>如果規則運算式由右至左搜尋，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>提供有關規則運算式的資訊，用於將規則運算式編譯成獨立組件。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 類別的新執行個體，其中包含有關要包含在組件中的規則運算式的資訊。</summary>
      <param name="pattern">要編譯的規則運算式。</param>
      <param name="options">要在編譯規則運算式時使用的規則運算式選項。</param>
      <param name="name">代表已編譯之規則運算式的型別名稱。</param>
      <param name="fullnamespace">新型別所屬的命名空間。</param>
      <param name="ispublic">如果要使編譯過的規則運算式公開可見，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="fullnamespace" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 類別的新執行個體，這個執行個體包含要在組件中加入指定逾時值之規則運算式的相關資訊。</summary>
      <param name="pattern">要編譯的規則運算式。</param>
      <param name="options">要在編譯規則運算式時使用的規則運算式選項。</param>
      <param name="name">代表已編譯之規則運算式的型別名稱。</param>
      <param name="fullnamespace">新型別所屬的命名空間。</param>
      <param name="ispublic">如果要使編譯過的規則運算式公開可見，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <param name="matchTimeout">規則運算式的預設逾時間隔。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 為 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="name" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="fullnamespace" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" /> 為負數、零或約大於 24 天。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>取得或設定值，指出已編譯的規則運算式是否具有公用可視性。</summary>
      <returns>如果規則運算式具有公用可視性，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>取得或設定規則運算式的預設逾時間隔。</summary>
      <returns>在<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />擲回之前，可在模式比對作業中流逝的預設最大時間間隔，或者為<see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />（如果停用逾時）。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>取得或設定代表已編譯之規則運算式的型別名稱。</summary>
      <exception cref="T:System.ArgumentNullException">這個屬性的值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">這個屬性的值是空字串。</exception>
      <returns>新型別的名稱。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>取得或設定新型別所屬的命名空間。</summary>
      <exception cref="T:System.ArgumentNullException">這個屬性的值為 <see langword="null" />。</exception>
      <returns>新型別的命名空間。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>取得或設定要在編譯規則運算式時使用的選項。</summary>
      <returns>列舉值的位元組合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>取得或設定要編譯的規則運算式。</summary>
      <exception cref="T:System.ArgumentNullException">這個屬性的值為 <see langword="null" />。</exception>
      <returns>要編譯的規則運算式。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>當規則運算式模式比對方法的執行時間超過其逾時間隔時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>使用系統提供的錯誤，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化資料，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="info">包含已序列化資料的物件。</param>
      <param name="context">包含已序列化資料的資料流。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>使用指定的訊息字串，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的錯誤訊息以及造成此例外狀況的內部例外狀況的參考，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="message">描述例外狀況的字串。</param>
      <param name="inner">做為目前例外狀況發生原因的例外狀況。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>使用規則運算式模式、輸入文字，以及逾時間隔的相關資訊，初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 類別的新執行個體。</summary>
      <param name="regexInput">當發生逾時，由規則運算式引擎所處理的輸入文字。</param>
      <param name="regexPattern">當發生逾時，由規則運算式引擎所使用的模式。</param>
      <param name="matchTimeout">逾時間隔。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>將序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物所需的資料填入 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 物件。</summary>
      <param name="info">要填入資料的序列化資訊物件。</param>
      <param name="context">這個序列化的目的端。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>取得當發生逾時，規則運算式引擎所處理的輸入文字。</summary>
      <returns>規則運算式輸入文字。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>取得規則運算式比對的逾時間隔。</summary>
      <returns>逾時間隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>取得當發生逾時，比對作業中所使用的規則運算式模式。</summary>
      <returns>規則運算式模式。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>提供用來設定規則運算式 (Regular Expression) 選項的列舉值。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>指定將規則運算式編譯為組件。 這將產生較快速的執行，但會增加啟動時間。 在呼叫 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 方法時，不應將這個值指派至 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 屬性。 如需詳細資訊，請參閱 正則運算式選項 文章中的「編譯的正則運算式」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>指定忽略語言中的文化差異。 如需詳細資訊，請參閱 正則運算式選項 文章中的「使用非變異文化特性比較」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>啟用運算式的 ECMAScript 相容行為。 這個值只能結合 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />、<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" /> 和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 值使用， 將這個值與任何其他值一起使用都將導致例外狀況。  
  
如需選項的詳細資訊 <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" /> ，請參閱 正則運算式選項 文章中的「ECMAScript 相符行為」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>指定唯一有效的捕獲是 ( 格式的明確命名或編號群組？ &lt;名稱 &gt; ... ) 。這可讓未命名的括弧做為不含運算式 (？： ... ) 語法不便的非群組。如需詳細資訊，請參閱 正則運算式選項 文章中的「僅明確捕捉」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>指定區分大小寫的比對。 如需詳細資訊，請參閱 正則運算式選項 文章中的「不區分大小寫比對」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>從模式排除未逸出的空白字元 (White Space)，並啟用以 # 標記的註解。 不過，這個值不會影響或排除字元類別中的空白字元、數值數量詞，或是標示個別規則運算式語言項目開始的權杖。 如需詳細資訊，請參閱規則運算式選項一文中的＜忽略空白字元＞一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>多行模式。 變更 ^ 和 $ 的意義以致它們分別在任何一行的開頭和結尾做比對，而不只是整個字串的開頭和結尾。 如需詳細資訊，請參閱 正則運算式選項 文章中的「多行模式」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>指定無選項設定。 如需有關正則運算式引擎預設行為的詳細資訊，請參閱 正則運算式選項 文章中的「預設選項」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>指定搜尋將由右至左，而非由左至右。 如需詳細資訊，請參閱 正則運算式選項 文章中的「由右至左模式」一節。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>指定單行模式。 變更點 (.) 的意義，使它符合一切字元 (而不是 \n 之外的一切字元)。 如需詳細資訊，請參閱 正則運算式選項 文章中的「單行模式」一節。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexParseError">
      <summary>指定當規則運算式包含剖析錯誤時，會擲回 <see cref="T:System.Text.RegularExpressions.RegexParseException" /> 的詳細根本原因。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasComment">
      <summary>規則運算式中的替代建構包含註解。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasMalformedCondition">
      <summary>規則運算式中的替代項條件格式不正確。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasMalformedReference">
      <summary>規則運算式中的替代建構參考格式不正確。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasNamedCapture">
      <summary>規則運算式中的替代建構使用具名擷取。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasTooManyConditions">
      <summary>規則運算式中的替代項條件太多。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasUndefinedReference">
      <summary>規則運算式中的替代建構包含禾經定義參考。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.CaptureGroupNameInvalid">
      <summary>規則運算式中已擷取群組的群組名稱無效。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.CaptureGroupOfZero">
      <summary>規則運算式定義名稱為零的編號子運算式。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ExclusionGroupNotLast">
      <summary>在含有排除群組的規則運算式中，某個字元類別不是該字元類別的最後一部分。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientClosingParentheses">
      <summary>規則運算式具有非逸出的左括弧，或缺少右括弧。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientOpeningParentheses">
      <summary>規則運算式具有非逸出的右括弧，或缺少左括弧。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientOrInvalidHexDigits">
      <summary>規則運算式中的十六進位逸出序列位數不足，或位數不正確。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InvalidGroupingConstruct">
      <summary>規則運算式中的分組建構無效，或格式不正確。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InvalidUnicodePropertyEscape">
      <summary>規則運算式中的 Unicode 屬性逸出無效或未知。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MalformedNamedReference">
      <summary>規則運算式中的命名參考格式不正確。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MalformedUnicodePropertyEscape">
      <summary>Unicode 屬性逸出格式不正確。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MissingControlCharacter">
      <summary>規則運算式中的控制字元遺漏。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.NestedQuantifiersNotParenthesized">
      <summary>規則運算式內其他數量詞的重複數量詞未以括弧分組。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.QuantifierAfterNothing">
      <summary>規則運算式中的數量詞所在位置無法量化任何項目，例如其位於規則運算式開頭或群組中。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.QuantifierOrCaptureGroupOutOfRange">
      <summary>規則運算式中的已擷取群組或數量詞不在範圍內，也就是大於 <see cref="F:System.Int32.MaxValue" />。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ReversedCharacterRange">
      <summary>規則運算式中的字元類別包含反向字元範圍，例如 z-a 而非 a-z。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ReversedQuantifierRange">
      <summary>規則運算式中的數量詞範圍為反向，例如： <code>{10,1}</code> 而非： <code>(1,10}</code>執行個體時提供 SQL Server 登入。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ShorthandClassInCharacterRange">
      <summary>規則運算式中的字元類別包含不允許出現在字元類別內簡寫式類別。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UndefinedNamedReference">
      <summary>未定義規則運算式中使用的命名參考。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UndefinedNumberedReference">
      <summary>未定義規則運算式中使用的編號參考。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnescapedEndingBackslash">
      <summary>規則運算式結尾是非逸出的反斜線。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.Unknown">
      <summary>未知的規則運算式剖析錯誤。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedControlCharacter">
      <summary>無法辨識規則運算式中的控制字元。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedEscape">
      <summary>規則運算式中的逸出字元或序列無效。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedUnicodeProperty">
      <summary>無法辨識規則運算式中的 Unicode 屬性逸出或無效。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnterminatedBracket">
      <summary>規則運算式具有非逸出的左方括弧，或缺少右方括弧。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnterminatedComment">
      <summary>規則運算式中的註解未終止。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexParseException">
      <summary>規則運算式中因剖析錯誤而產生的例外狀況，包含 <see cref="P:System.Text.RegularExpressions.RegexParseException.Error" /> 和 <see cref="P:System.Text.RegularExpressions.RegexParseException.Offset" /> 屬性中的詳細資訊。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>設定具有參數名稱和額外例外狀況資訊的 <paramref name="info" /> 物件。</summary>
      <param name="info">存放序列物件資料的物件。</param>
      <param name="context">關於來源或目的端的內容資訊。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexParseException.Error">
      <summary>取得剖析期間發生的錯誤。</summary>
      <returns>剖析期間所發生的錯誤。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexParseException.Offset">
      <summary>取得發生剖析錯誤的規則運算式模式中，以零為起始的字元位移。</summary>
      <returns>發生剖析錯誤的位移。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 類別是編譯的規則運算式 (Regular Expression) 之基底類別。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="capnum">擷取數字。</param>
      <param name="start">擷取的開始位置。</param>
      <param name="end">擷取的結束位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。 判斷字元是否在字元類別中。</summary>
      <param name="ch">要測試的字元。</param>
      <param name="charClass">字元類別的內部名稱。</param>
      <returns>如果 <paramref name="ch" /> 參數在 <paramref name="charClass" /> 參數指定的字元類別中，則為 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="ch">字元。</param>
      <param name="set">字元集。</param>
      <param name="category">字元分類。</param>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="i">要儲存的數字。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="index">可能的界限位置。</param>
      <param name="startpos">開始位置。</param>
      <param name="endpos">結束位置。</param>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="index">可能的 ECMA 界限位置。</param>
      <param name="startpos">開始位置。</param>
      <param name="endpos">結束位置。</param>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="cap">擷取數字。</param>
      <returns>傳回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="cap">擷取數字。</param>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="cap">擷取數字。</param>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <returns>傳回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="regex">規則運算式引擎的執行個體。</param>
      <param name="text">進行模式比對所掃描的文字。</param>
      <param name="textbeg">規則運算式引擎掃描是否有相符項目的 <paramref name="text" /> 中以零為起始的起始位置。</param>
      <param name="textend">規則運算式引擎掃描是否有相符項目的 <paramref name="text" />中以零為起始的結束位置。</param>
      <param name="textstart">用於掃描是否有此相符項目之以零為起始的起始位置。</param>
      <param name="prevlen">先前比對中的字元數。</param>
      <param name="quick">
        <see langword="true" /> 可在快速模式搜尋相符項目；否則為 <see langword="false" />。</param>
      <returns>相符項目。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="regex">規則運算式引擎的執行個體。</param>
      <param name="text">進行模式比對所掃描的文字。</param>
      <param name="textbeg">規則運算式引擎掃描是否有相符項目的 <paramref name="text" /> 中以零為起始的起始位置。</param>
      <param name="textend">規則運算式引擎掃描是否有相符項目的 <paramref name="text" />中以零為起始的結束位置。</param>
      <param name="textstart">用於掃描是否有此相符項目之以零為起始的起始位置。</param>
      <param name="prevlen">先前比對中的字元數。</param>
      <param name="quick">
        <see langword="true" /> 可在快速模式搜尋相符項目；否則為 <see langword="false" />。</param>
      <param name="timeout">逾時間隔。</param>
      <returns>相符項目。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
      <param name="capnum">擷取數字。</param>
      <param name="uncapnum">已儲存的擷取數字。</param>
      <param name="start">開始位置。</param>
      <param name="end">結束位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>由 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法所產生的 <see cref="T:System.Text.RegularExpressions.Regex" /> 物件使用。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>建立已編譯之規則運算式 (Regular Expression) 的 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 類別。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>在衍生類別中覆寫時，會建立特定之已編譯規則運算式的 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 物件。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 物件是為執行特定的已編譯規則運算式而設計。</returns>
    </member>
  </members>
</doc>
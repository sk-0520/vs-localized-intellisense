<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
      <summary>Représente la classe de base abstraite dont toutes les implémentations des algorithmes asymétriques doivent hériter.</summary>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue">
      <summary>Représente la taille, en bits, du modulo de la clé utilisé par l'algorithme asymétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue">
      <summary>Spécifie les tailles de clé prises en charge par l'algorithme asymétrique.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">L’implémentation de la classe dérivée n’est pas valide.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Clear">
      <summary>Libère toutes les ressources utilisées par la classe <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create">
      <summary>Crée un objet de chiffrement par défaut utilisé pour exécuter l'algorithme asymétrique.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" />, à moins que les paramètres par défaut aient été modifiés avec l’élément &lt;cryptoClass&gt;.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)">
      <summary>Crée une instance de l'implémentation spécifiée d'un algorithme asymétrique.</summary>
      <param name="algName">Implémentation de l'algorithme asymétrique à utiliser. Le tableau suivant indique les valeurs valides du paramètre <paramref name="algName" /> et les algorithmes auxquels elles sont mappées.  
  
 <list type="table"><listheader><term> Valeur de paramètre</term><description> Implémentations</description></listheader><item><term> System.Security.Cryptography.AsymmetricAlgorithm</term><description><see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /></description></item><item><term> RSA</term><description><see cref="T:System.Security.Cryptography.RSA" /></description></item><item><term> System.Security.Cryptography.RSA</term><description><see cref="T:System.Security.Cryptography.RSA" /></description></item><item><term> DSA</term><description><see cref="T:System.Security.Cryptography.DSA" /></description></item><item><term> System.Security.Cryptography.DSA</term><description><see cref="T:System.Security.Cryptography.DSA" /></description></item><item><term> ECDsa</term><description><see cref="T:System.Security.Cryptography.ECDsa" /></description></item><item><term> ECDsaCng</term><description><see cref="T:System.Security.Cryptography.ECDsaCng" /></description></item><item><term> System.Security.Cryptography.ECDsaCng</term><description><see cref="T:System.Security.Cryptography.ECDsaCng" /></description></item><item><term> ECDH</term><description><see cref="T:System.Security.Cryptography.ECDiffieHellman" /></description></item><item><term> ECDiffieHellman</term><description><see cref="T:System.Security.Cryptography.ECDiffieHellman" /></description></item><item><term> ECDiffieHellmanCng</term><description><see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /></description></item><item><term> System.Security.Cryptography.ECDiffieHellmanCng</term><description><see cref="T:System.Security.Cryptography.ECDiffieHellmanCng" /></description></item></list></param>
      <returns>Nouvelle instance de l'implémentation de l'algorithme asymétrique spécifiée.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters)">
      <summary>Exporte la clé actuelle au format PKCS#8 EncryptedPrivateKeyInfo avec un mot de passe basé sur l’octet.</summary>
      <param name="passwordBytes">Octets à utiliser comme mot de passe lors du chiffrement du matériel de clé.</param>
      <param name="pbeParameters">Paramètres de chiffrement par mot de passe à utiliser lors du chiffrement du matériel de clé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.

- ou -

<paramref name="pbeParameters" /> indique que <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> doit être utilisé, ce qui nécessite des mots de passe basés sur <see cref="T:System.Char" />.</exception>
      <returns>Tableau d’octets contenant la représentation PKCS#8 EncryptedPrivateKeyInfo de cette clé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters)">
      <summary>Exporte la clé actuelle au format PKCS#8 EncryptedPrivateKeyInfo avec un mot de passe basé sur char.</summary>
      <param name="password">Mot de passe à utiliser lors du chiffrement du matériel de clé.</param>
      <param name="pbeParameters">Paramètres de chiffrement par mot de passe à utiliser lors du chiffrement du matériel de clé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.</exception>
      <returns>Tableau d’octets contenant la représentation PKCS#8 EncryptedPrivateKeyInfo de cette clé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportPkcs8PrivateKey">
      <summary>Exporte la clé actuelle au format PKCS#8 PrivateKeyInfo.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.</exception>
      <returns>Tableau d’octets contenant la représentation PKCS#8 PrivateKeyInfo de cette clé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ExportSubjectPublicKeyInfo">
      <summary>Exporte la partie clé publique de la clé actuelle au format X.509 SubjectPublicKeyInfo.</summary>
      <returns>Tableau d’octets contenant la représentation X.509 SubjectPublicKeyInfo de la partie clé publique de cette clé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)">
      <summary>En cas de substitution dans une classe dérivée, reconstruit un objet <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> à partir d'une chaîne XML. Sinon, lève un <see cref="T:System.NotImplementedException" />.</summary>
      <param name="xmlString">Chaîne XML à utiliser pour reconstruire l'objet <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, importe la paire de clés publique/privée à partir d’une structure PKCS#8 EncryptedPrivateKeyInfo après le déchiffrement avec un mot de passe basé sur l’octet, en remplaçant les clés de cet objet.</summary>
      <param name="passwordBytes">Octets à utiliser comme mot de passe lors du déchiffrement du matériel de clé.</param>
      <param name="source">Octets d’une structure PKCS#8 EncryptedPrivateKeyInfo dans l’encodage ASN.1-BER.</param>
      <param name="bytesRead">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets lus à partir de <paramref name="source" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Le mot de passe est incorrect.

- ou -

Le contenu de <paramref name="source" /> indique que la fonction de dérivation de clés (KDF) à appliquer est la fonction KDF PKCS#12 existante, qui nécessite des mots de passe basés sur <see cref="T:System.Char" />.

- ou -

Le contenu de <paramref name="source" /> ne représente pas une structure PKCS#8 EncryptedPrivateKeyInfo encodée en ASN.1-BER.

- ou -

Le contenu de <paramref name="source" /> indique que la clé est destinée à un algorithme autre que l’algorithme représenté par cette instance.

- ou -

Le contenu de <paramref name="source" /> représente la clé dans un format qui n’est pas pris en charge.

- ou -

L’importation de clé propre à l’algorithme a échoué.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, importe la paire de clés publique/privée à partir d’une structure PKCS#8 EncryptedPrivateKeyInfo après le déchiffrement avec un mot de passe basé sur char, en remplaçant les clés de cet objet.</summary>
      <param name="password">Mot de passe à utiliser pour déchiffrer le matériel de clé.</param>
      <param name="source">Octets d’une structure PKCS#8 EncryptedPrivateKeyInfo dans l’encodage ASN.1-BER.</param>
      <param name="bytesRead">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets lus à partir de <paramref name="source" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Le mot de passe est incorrect.

- ou -

Le contenu de <paramref name="source" /> ne représente pas une structure PKCS#8 EncryptedPrivateKeyInfo encodée en ASN.1-BER.

- ou -

Le contenu de <paramref name="source" /> indique que la clé est destinée à un algorithme autre que l’algorithme représenté par cette instance.

- ou -

Le contenu de <paramref name="source" /> représente la clé dans un format qui n’est pas pris en charge.

- ou -

L’importation de clé propre à l’algorithme a échoué.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>En cas de substitution dans une classe dérivée, importe une clé encodée au format PEM RFC 7468 chiffrée, en remplaçant les clés de cet objet.</summary>
      <param name="input">Texte PEM de la clé chiffrée à importer.</param>
      <param name="passwordBytes">Octets à utiliser comme mot de passe lors du déchiffrement du matériel de clé.</param>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas substitué ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>En cas de substitution dans une classe dérivée, importe une clé encodée au format PEM RFC 7468 chiffrée, en remplaçant les clés de cet objet.</summary>
      <param name="input">Texte PEM de la clé chiffrée à importer.</param>
      <param name="password">Mot de passe à utiliser pour déchiffrer le matériel de clé.</param>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas substitué ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>En cas de substitution dans une classe dérivée, importe une clé encodée au format texte RFC 7468, en remplaçant les clés de cet objet.</summary>
      <param name="input">Texte de la clé PEM à importer.</param>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas substitué ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, importe la paire de clés publique/privée à partir d’une structure PKCS#8 PrivateKeyInfo après le déchiffrement, en remplaçant les clés de cet objet.</summary>
      <param name="source">Octets d’une structure PKCS#8 PrivateKeyInfo dans l’encodage ASN.1-BER.</param>
      <param name="bytesRead">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets lus à partir de <paramref name="source" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Le contenu de <paramref name="source" /> ne représente pas une structure PKCS#8 PrivateKeyInfo encodée en ASN.1-BER.

- ou -

Le contenu de <paramref name="source" /> indique que la clé est destinée à un algorithme autre que l’algorithme représenté par cette instance.

- ou -

Le contenu de <paramref name="source" /> représente la clé dans un format qui n’est pas pris en charge.

- ou -

L’importation de clé propre à l’algorithme a échoué.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, importe la clé publique à partir d’une structure X.509 SubjectPublicKeyInfo après le déchiffrement, en remplaçant les clés de cet objet.</summary>
      <param name="source">Octets d’une structure X.509 SubjectPublicKeyInfo dans l’encodage ASN.1-DER.</param>
      <param name="bytesRead">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets lus à partir de <paramref name="source" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Le contenu de <paramref name="source" /> ne représente pas une structure X.509 SubjectPublicKeyInfo encodée en ASN.1-DER.

- ou -

Le contenu de <paramref name="source" /> indique que la clé est destinée à un algorithme autre que l’algorithme représenté par cette instance.

- ou -

Le contenu de <paramref name="source" /> représente la clé dans un format qui n’est pas pris en charge.

- ou -

L’importation de clé propre à l’algorithme a échoué.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)">
      <summary>En cas de substitution dans une classe dérivée, crée et retourne une représentation sous forme de chaîne XML de l'objet <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> actuel. Sinon, lève un <see cref="T:System.NotImplementedException" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> pour inclure les paramètres privés ; sinon <see langword="false" />.</param>
      <returns>Encodage de la chaîne XML de l'objet <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> actuel.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, tente d’exporter la clé actuelle au format PKCS#8 EncryptedPrivateKeyInfo dans une mémoire tampon fournie, à l’aide d’un mot de passe basé sur l’octet.</summary>
      <param name="passwordBytes">Octets à utiliser comme mot de passe lors du chiffrement du matériel de clé.</param>
      <param name="pbeParameters">Paramètres de chiffrement par mot de passe à utiliser lors du chiffrement du matériel de clé.</param>
      <param name="destination">Intervalle d’octets pour recevoir les données PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.

- ou -

<paramref name="pbeParameters" /> indique que <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" /> doit être utilisé, ce qui nécessite des mots de passe basés sur <see cref="T:System.Char" />.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> est suffisamment grand pour recevoir la sortie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, tente d’exporter la clé actuelle au format PKCS#8 EncryptedPrivateKeyInfo dans une mémoire tampon fournie, à l’aide d’un mot de passe basé sur char.</summary>
      <param name="password">Mot de passe à utiliser lors du chiffrement du matériel de clé.</param>
      <param name="pbeParameters">Paramètres de chiffrement par mot de passe à utiliser lors du chiffrement du matériel de clé.</param>
      <param name="destination">Intervalle d’octets pour recevoir les données PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> est suffisamment grand pour recevoir la sortie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, tente d’exporter la clé actuelle au format PKCS#8 EncryptedPrivateKeyInfo dans une mémoire tampon fournie.</summary>
      <param name="destination">Intervalle d’octets pour recevoir les données PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> est suffisamment grand pour recevoir la sortie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Quand il est remplacé dans une classe dérivée, tente d’exporter la clé actuelle au format X.509 SubjectPublicKeyInfo dans une mémoire tampon fournie.</summary>
      <param name="destination">Intervalle d’octets pour recevoir les données X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, contient une valeur qui indique le nombre d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé n’a pas pu être exportée.</exception>
      <exception cref="T:System.NotImplementedException">Un type dérivé n’a pas remplacé ce membre.</exception>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> est suffisamment grand pour recevoir la sortie ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm">
      <summary>En cas de substitution dans une classe dérivée, obtient le nom de l'algorithme d'échange de clés. Sinon, lève un <see cref="T:System.NotImplementedException" />.</summary>
      <returns>Nom de l'algorithme d'échange de clés.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
      <summary>Obtient ou définit la taille, en bits, du modulo de clé utilisé par l'algorithme asymétrique.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La taille du modulo de la clé n’est pas valide.</exception>
      <returns>Taille, en bits, du modulo de clé utilisé par l'algorithme asymétrique.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
      <summary>Obtient les tailles de clé prises en charge par l'algorithme asymétrique.</summary>
      <returns>Tableau qui contient les tailles de clé prises en charge par l'algorithme asymétrique.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm">
      <summary>En cas d'implémentation dans une classe dérivée, obtient le nom de l'algorithme de signature. Sinon, lève toujours un <see cref="T:System.NotImplementedException" />.</summary>
      <returns>Nom de l'algorithme de signature.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CipherMode">
      <summary>Spécifie le mode de chiffrement par bloc à utiliser pour le chiffrement.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CBC">
      <summary>Le mode <see langword="CBC" /> (Cipher Block Chaining) introduit des commentaires. Avant que chaque bloc de texte brut ne soit chiffré, il est combiné au texte de chiffrement du bloc précédent à l'aide d'une opération de bits XOR. Cela permet de garantir que même si le texte brut contient de nombreux blocs identiques, chacun d'eux sera chiffré à l'aide d'un bloc de texte de chiffrement différent. Le vecteur d'initialisation est combiné au premier bloc de texte brut à l'aide d'une opération de bits XOR, avant que le bloc ne soit chiffré. Si un seul bit du bloc de texte de chiffrement est tronqué, le bloc de texte brut correspondant est également tronqué. En outre, un bit du bloc suivant, situé au même emplacement que le bit tronqué d'origine, est lui aussi tronqué.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CFB">
      <summary>Le mode <see langword="CFB" /> (Cipher Feedback) convertit de petits incréments de texte brut en texte de chiffrement, au lieu de convertir tout un bloc. Ce mode utilise un registre à décalage d'un bloc de longueur, qui se décompose en sections. Par exemple, si la taille du bloc est de 8 octets, et qu'un seul octet est converti à la fois, le registre à décalage se décompose en huit sections. Si un bit du texte de chiffrement est tronqué, un bit du texte brut est également tronqué ; en outre, le registre à décalage est endommagé. Par conséquent, les incréments de texte brut suivants sont tronqués jusqu'à ce que le bit incorrect soit exclu du registre à décalage. La taille des commentaires par défaut peut varier en fonction de l'algorithme, mais est généralement de 8 bits ou du nombre de bits de la taille du bloc. Vous pouvez modifier le nombre de bits des commentaires à l'aide de la propriété <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize" />. Les algorithmes qui prennent en charge le mode CFB (Cipher Feedback) utilisent cette propriété pour définir les commentaires.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.CTS">
      <summary>Le mode <see langword="CTS" /> (Cipher Text Stealing) gère toutes les longueurs de texte brut et produit un texte de chiffrement dont la longueur correspond à celle du texte brut. Ce mode a un comportement similaire au mode <see langword="CBC" />, sauf en ce qui concerne les deux derniers blocs de texte brut.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.ECB">
      <summary>Le mode <see langword="ECB" /> (Electronic Codebook) chiffre chaque bloc individuellement. Tous les blocs de texte brut identiques qui se trouvent dans le même message, ou qui se trouvent dans un message différent chiffré à l'aide de la même clé, sont transformés en blocs de texte de chiffrement identiques. Important : Ce mode n’est pas recommandé, car il rend possible plusieurs exploitations de la sécurité. Si le texte brut à chiffrer contient de nombreuses répétitions, le texte de chiffrement peut être déchiffré bloc par bloc. Il est également possible d'utiliser l'analyse des blocs pour déterminer la clé de chiffrement. En outre, un adversaire suffisamment tenace peut substituer et d'échanger des blocs individuels sans être détecté, ce qui permet l'enregistrement et l'insertion de blocs dans le flux à des points différents sans risque de détection.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CipherMode.OFB">
      <summary>Le mode <see langword="OFB" /> (Output Feedback) convertit de petits incréments de texte brut en texte de chiffrement, au lieu de convertir tout un bloc. Ce mode est similaire au mode <see langword="CFB" /> ; la seule différence entre ces deux modes réside dans la méthode de remplissage du registre à décalage. Si un bit du texte de chiffrement est tronqué, le bit de texte brut correspondant est également tronqué. Cependant, si des bits manquent dans le texte de chiffrement, ou si ce dernier contient des bits supplémentaires, le texte brut est tronqué à partir de cet emplacement.</summary>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicOperations">
      <summary>Fournit des méthodes à utiliser dans l’utilisation du chiffrement pour réduire le risque de fuite d’informations du canal secondaire.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicOperations.FixedTimeEquals(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Détermine l’égalité de deux séquences d’octets dans un laps de temps qui dépend de la longueur des séquences, mais pas de leurs valeurs.</summary>
      <param name="left">Première mémoire tampon à comparer.</param>
      <param name="right">Deuxième mémoire tampon à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ont les mêmes valeurs pour <see cref="P:System.ReadOnlySpan`1.Length" /> et le même contenu ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicOperations.ZeroMemory(System.Span{System.Byte})">
      <summary>Remplit la mémoire tampon fournie avec des zéros.</summary>
      <param name="buffer">Mémoire tampon à remplir avec des zéros.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
      <summary>Exception levée lorsqu'une opération inattendue se produit pendant une opération de chiffrement.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> avec des données sérialisées.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptographicUnexpectedOperationException.#ctor(System.String,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException" /> avec un message d'erreur spécifié au format indiqué.</summary>
      <param name="format">Format utilisé pour exporter le message d'erreur.</param>
      <param name="insert">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStream">
      <summary>Définit un flux qui lie les flux de données aux transformations par chiffrement.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptoStream" /> avec un flux de données cible, la transformation à utiliser et le mode du flux.</summary>
      <param name="stream">Flux sur lequel la transformation par chiffrement doit être effectuée.</param>
      <param name="transform">Transformation par chiffrement qui doit être effectuée sur le flux.</param>
      <param name="mode">Une des valeurs de l'objet <see cref="T:System.Security.Cryptography.CryptoStreamMode" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="stream" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode,System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.CryptoStream" />.</summary>
      <param name="stream">Flux sur lequel la transformation par chiffrement doit être effectuée.</param>
      <param name="transform">Transformation par chiffrement qui doit être effectuée sur le flux.</param>
      <param name="mode">Mode du flux.</param>
      <param name="leaveOpen">
        <see langword="true" /> pour ne pas fermer le flux sous-jacent quand l’objet <see cref="T:System.Security.Cryptography.CryptoStream" /> est supprimé ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Débute une opération de lecture asynchrone. (Utilisez <see cref="Overload:System.Security.Cryptography.CryptoStream.ReadAsync" /> à la place.)</summary>
      <param name="buffer">Mémoire tampon dans laquelle lire les données.buffer</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel commencer l'écriture des données lues dans le flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="callback">Rappel asynchrone facultatif, à appeler quand la lecture est terminée.</param>
      <param name="state">Objet fourni par l'utilisateur qui distingue cette requête de lecture asynchrone des autres requêtes.</param>
      <exception cref="T:System.IO.IOException">Tentative de lecture asynchrone au-delà de la fin du flux, ou une erreur disque s’est produite.</exception>
      <exception cref="T:System.ArgumentException">Un ou plusieurs arguments ne sont pas valides.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
      <exception cref="T:System.NotSupportedException">L’implémentation du <see langword="Stream" /> en cours ne prend pas en charge l’opération de lecture.</exception>
      <returns>Élément <see cref="T:System.IAsyncResult" /> représentant la lecture asynchrone, qui peut être encore en attente.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Débute une opération d'écriture asynchrone. (Utilisez <see cref="Overload:System.Security.Cryptography.CryptoStream.WriteAsync" /> à la place.)</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet à partir duquel l'écriture doit commencer.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="callback">Rappel asynchrone facultatif, à appeler quand l'écriture est terminée.</param>
      <param name="state">Objet fourni par l'utilisateur qui distingue cette requête d'écriture asynchrone des autres requêtes.</param>
      <exception cref="T:System.IO.IOException">Tentative d’écriture asynchrone au-delà de la fin du flux, ou une erreur disque s’est produite.</exception>
      <exception cref="T:System.ArgumentException">Un ou plusieurs arguments ne sont pas valides.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
      <exception cref="T:System.NotSupportedException">L’implémentation du <see langword="Stream" /> en cours ne prend pas en charge l’opération d’écriture.</exception>
      <returns>Élément <see langword="IAsyncResult" /> représentant l'écriture asynchrone, qui peut être encore en attente.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Clear">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.Security.Cryptography.CryptoStream" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.CryptoStream" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.DisposeAsync">
      <summary>Libère de façon asynchrone les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.CryptoStream" />.</summary>
      <returns>Tâche qui représente l’opération de suppression asynchrone.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.EndRead(System.IAsyncResult)">
      <summary>Attend que la requête asynchrone en attente se termine. (Utilisez <see cref="Overload:System.Security.Cryptography.CryptoStream.ReadAsync" /> à la place.)</summary>
      <param name="asyncResult">Référence à la requête asynchrone en attente à terminer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Handle vers l’opération de lecture en attente non disponible.  
  
 - ou -  
  
 L’opération en attente ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> ne provenait pas d’une méthode <see cref="M:System.Security.Cryptography.CryptoStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> sur le flux en cours.</exception>
      <exception cref="T:System.IO.IOException">Le flux est fermé ou une erreur interne s’est produite.</exception>
      <returns>Nombre d'octets lus dans le flux, entre zéro (0) et le nombre demandé. Les flux retournent uniquement zéro (0) à la fin du flux ; sinon, ils devraient se bloquer jusqu'à ce qu'au moins un octet soit disponible.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.EndWrite(System.IAsyncResult)">
      <summary>Termine une opération d'écriture asynchrone. (Utilisez <see cref="Overload:System.Security.Cryptography.CryptoStream.WriteAsync" /> à la place.)</summary>
      <param name="asyncResult">Référence à la requête d'E/S asynchrone en attente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un handle vers l’opération d’écriture en attente n’est pas disponible.  
  
 - ou -  
  
 L’opération en attente ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="asyncResult" /> ne provenait pas d’une méthode <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> sur le flux en cours.</exception>
      <exception cref="T:System.IO.IOException">Le flux est fermé ou une erreur interne s’est produite.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Flush">
      <summary>Efface toutes les mémoires tampons pour le flux actuel et provoque l'écriture des données mises en mémoire tampon dans le périphérique sous-jacent.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>Efface toutes les mémoires tampons pour le flux actuel de manière asynchrone, provoque l'écriture des données mises en mémoire tampon dans le périphérique sous-jacent et surveille les demandes d'annulation.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlock">
      <summary>Met à jour la source de données sous-jacente ou le référentiel avec l'état actuel de la mémoire tampon, puis efface cette dernière.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La clé est endommagée, ce qui peut provoquer un remplissage non valide du flux.</exception>
      <exception cref="T:System.NotSupportedException">Le flux actuel n'est pas accessible en écriture.  
  
 - ou -  
  
 Le bloc final a déjà été transformé.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.FlushFinalBlockAsync(System.Threading.CancellationToken)">
      <summary>Met à jour de façon asynchrone la source de données sous-jacente ou le référentiel avec l'état actuel de la mémoire tampon, puis efface cette dernière.</summary>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>Tâche qui représente l’opération de vidage asynchrone.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Lit une séquence d'octets dans le flux actuel et avance la position dans le flux du nombre d'octets lus.</summary>
      <param name="buffer">Tableau d'octets. Un maximum de <paramref name="count" /> octets est lu à partir du flux actuel et stocké dans le paramètre <paramref name="buffer" />.</param>
      <param name="offset">Dans le <paramref name="buffer" />, l'offset d'octet à partir duquel commencer l'enregistrement des données lues à partir du flux actuel.</param>
      <param name="count">Nombre maximal d'octets à lire dans le flux actuel.</param>
      <exception cref="T:System.NotSupportedException">Le mode <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> associé à l'objet <see cref="T:System.Security.Cryptography.CryptoStream" /> actuel ne correspond pas au flux sous-jacent.  Par exemple, cette exception est levée lorsque vous utilisez <see cref="F:System.Security.Cryptography.CryptoStreamMode.Read" /> avec un flux sous-jacent en écriture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à zéro.  
  
- ou - 
Le paramètre <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la somme des paramètres <paramref name="count" /> et <paramref name="offset" /> est supérieure à celle de la mémoire tampon.</exception>
      <returns>Nombre total d'octets lus dans la mémoire tampon. Ceci peut être inférieur au nombre d'octets demandé si ce nombre n'est pas actuellement disponible ou égal à zéro si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Lit une séquence d'octets à partir du flux actuel de manière asynchrone, avance la position dans le flux du nombre d'octets lus, et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon où écrire les données.</param>
      <param name="offset">Dans <paramref name="buffer" />, décalage d'octet auquel commencer l'écriture des données à partir du flux.</param>
      <param name="count">Nombre maximal d'octets à lire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="offset" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le flux est actuellement utilisé par une opération de lecture antérieure.</exception>
      <returns>Tâche qui représente l'opération de lecture asynchrone. La valeur du paramètre <paramref name="TResult" /> de l'objet de tâche contient le nombre total d'octets lus dans la mémoire tampon. Le résultat peut être inférieur au nombre d'octets demandé si le nombre d'octets actuellement disponibles est inférieur au nombre demandé, ou il peut avoir la valeur 0 (zéro) si la fin du flux de données a été atteinte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.ReadByte">
      <summary>Lit un octet du flux et avance d'un octet la position au sein du flux, ou retourne -1 si la fin du flux a été atteinte.</summary>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
      <returns>Conversion de type (transtypage) de l'octet non signé en <see cref="T:System.Int32" />, ou -1 si la fin du flux a été atteinte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Définit la position dans le flux actuel.</summary>
      <param name="offset">Offset d'octet par rapport au paramètre <paramref name="origin" />.</param>
      <param name="origin">Objet <see cref="T:System.IO.SeekOrigin" /> indiquant le point de référence utilisé pour obtenir la nouvelle position.</param>
      <exception cref="T:System.NotSupportedException">Cette méthode n'est pas prise en charge.</exception>
      <returns>Cette méthode n'est pas prise en charge.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)">
      <summary>Définit la longueur du flux actuel.</summary>
      <param name="value">Longueur souhaitée du flux actuel en octets.</param>
      <exception cref="T:System.NotSupportedException">Cette propriété n'existe que pour prendre en charge l'héritage de <see cref="T:System.IO.Stream" /> et ne peut pas être utilisée.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Écrit une suite d'octets dans le <see cref="T:System.Security.Cryptography.CryptoStream" /> actuel et avance la position actuelle dans ce flux du nombre d'octets écrits.</summary>
      <param name="buffer">Tableau d'octets. Cette méthode copie <paramref name="count" /> octets à partir de <paramref name="buffer" /> dans le flux actuel.</param>
      <param name="offset">Dans le <paramref name="buffer" />, l'offset d'octet à partir duquel commencer la copie des octets dans le flux actuel.</param>
      <param name="count">Nombre d'octets à écrire dans le flux actuel.</param>
      <exception cref="T:System.NotSupportedException">Le mode <see cref="T:System.Security.Cryptography.CryptoStreamMode" /> associé à l'objet <see cref="T:System.Security.Cryptography.CryptoStream" /> actuel ne correspond pas au flux sous-jacent.  Par exemple, cette exception est levée lorsque vous utilisez <see cref="F:System.Security.Cryptography.CryptoStreamMode.Write" /> avec un flux sous-jacent en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="offset" /> est inférieur à zéro.  
  
- ou - 
Le paramètre <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentException">La longueur de la somme des paramètres <paramref name="count" /> et <paramref name="offset" /> est supérieure à celle de la mémoire tampon.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
      <summary>Écrit une séquence d'octets à partir du flux actuel de façon asynchrone, avance la position actuelle dans le flux du nombre d'octets écrits et surveille les demandes d'annulation.</summary>
      <param name="buffer">Mémoire tampon dont sont issues les données à écrire.</param>
      <param name="offset">Offset d'octet de base zéro dans <paramref name="buffer" /> à partir duquel commencer l'écriture des octets dans le flux.</param>
      <param name="count">Nombre maximal d'octets à écrire.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation. La valeur par défaut est <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="count" /> est un nombre négatif.</exception>
      <exception cref="T:System.ArgumentException">La somme de <paramref name="offset" /> et <paramref name="count" /> est supérieure à la longueur de la mémoire tampon.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l'écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">Le flux a été supprimé.</exception>
      <exception cref="T:System.InvalidOperationException">Le flux est actuellement utilisé par une opération d’écriture précédente.</exception>
      <returns>Tâche qui représente l’opération d’écriture asynchrone.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoStream.WriteByte(System.Byte)">
      <summary>Écrit un octet à la position actuelle dans le flux et avance d'un octet la position dans le flux.</summary>
      <param name="value">Octet à écrire dans le flux.</param>
      <exception cref="T:System.IO.IOException">Une erreur d’E/S se produit.</exception>
      <exception cref="T:System.NotSupportedException">Le flux ne prend pas en charge l’écriture ou bien il est déjà fermé.</exception>
      <exception cref="T:System.ObjectDisposedException">Des méthodes ont été appelées après la fermeture du flux.</exception>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanRead">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Security.Cryptography.CryptoStream" /> actuel est lisible.</summary>
      <returns>
        <see langword="true" /> si le flux actuel est lisible ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanSeek">
      <summary>Obtient une valeur indiquant si vous pouvez effectuer une recherche dans le <see cref="T:System.Security.Cryptography.CryptoStream" /> en cours.</summary>
      <returns>Toujours <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.CanWrite">
      <summary>Obtient une valeur indiquant si le <see cref="T:System.Security.Cryptography.CryptoStream" /> en cours est accessible en écriture.</summary>
      <returns>
        <see langword="true" /> si le flux actuel est accessible en écriture ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock">
      <summary>Obtient une valeur indiquant si le dernier bloc de mémoire tampon a été écrit dans le flux sous-jacent.</summary>
      <returns>
        <see langword="true" /> si le dernier bloc a été vidé ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Length">
      <summary>Obtient la longueur du flux en octets.</summary>
      <exception cref="T:System.NotSupportedException">Cette propriété n'est pas prise en charge.</exception>
      <returns>Cette propriété n'est pas prise en charge.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoStream.Position">
      <summary>Obtient ou définit la position dans le flux actuel.</summary>
      <exception cref="T:System.NotSupportedException">Cette propriété n'est pas prise en charge.</exception>
      <returns>Cette propriété n'est pas prise en charge.</returns>
    </member>
    <member name="T:System.Security.Cryptography.CryptoStreamMode">
      <summary>Spécifie le mode d’un flux de chiffrement.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Read">
      <summary>Accès en lecture à un flux de chiffrement.</summary>
    </member>
    <member name="F:System.Security.Cryptography.CryptoStreamMode.Write">
      <summary>Accès en écriture à un flux de chiffrement.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithm">
      <summary>Représente la classe de base dont toutes les implémentations des algorithmes de hachage de chiffrement doivent dériver.</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
      <summary>Représente la taille, en bits, du code de hachage calculé.</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
      <summary>Représente la valeur du code de hachage calculé.</summary>
    </member>
    <member name="F:System.Security.Cryptography.HashAlgorithm.State">
      <summary>Représente l'état du calcul du hachage.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
      <summary>Libère toutes les ressources utilisées par la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
      <summary>Calcule la valeur de hachage pour le tableau d'octets spécifié.</summary>
      <param name="buffer">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'objet a déjà été supprimé.</exception>
      <returns>Code de hachage calculé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
      <summary>Calcule la valeur de hachage pour la région spécifiée du tableau d'octets spécifié.</summary>
      <param name="buffer">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <param name="offset">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</param>
      <param name="count">Nombre d'octets dans le tableau à utiliser comme données.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> n’est pas une valeur valide.  
  
- ou - 
 <paramref name="buffer" /> a une longueur non valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> est hors limites. Ce paramètre requiert un nombre non négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">L'objet a déjà été supprimé.</exception>
      <returns>Code de hachage calculé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)">
      <summary>Calcule la valeur de hachage pour l'objet <see cref="T:System.IO.Stream" /> spécifié.</summary>
      <param name="inputStream">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <exception cref="T:System.ObjectDisposedException">L'objet a déjà été supprimé.</exception>
      <returns>Code de hachage calculé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHashAsync(System.IO.Stream,System.Threading.CancellationToken)">
      <summary>Calcule de manière asynchrone la valeur de hachage pour l'objet <see cref="T:System.IO.Stream" /> spécifié.</summary>
      <param name="inputStream">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <param name="cancellationToken">Jeton pour surveiller les requêtes d'annulation.</param>
      <returns>Tâche qui représente l’opération de hachage de calcul asynchrone et inclut dans un wrapper le code de hachage calculé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create">
      <summary>Crée une instance de l'implémentation par défaut d'un algorithme de hachage.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />, à moins que les paramètres par défaut n’aient été modifiés à l’aide de l’élément .</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Create(System.String)">
      <summary>Crée une instance de l'implémentation spécifiée d'un algorithme de hachage.</summary>
      <param name="hashName">Implémentation de l'algorithme de hachage à utiliser. Le tableau suivant indique les valeurs valides du paramètre <paramref name="hashName" /> et les algorithmes auxquels elles sont mappées.  
  
 <list type="table"><listheader><term> Valeur de paramètre</term><description> Implémentations</description></listheader><item><term> SHA</term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> SHA1</term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> System.Security.Cryptography.SHA1</term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> System.Security.Cryptography.HashAlgorithm</term><description><see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /></description></item><item><term> MD5</term><description><see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /></description></item><item><term> System.Security.Cryptography.MD5</term><description><see cref="T:System.Security.Cryptography.MD5CryptoServiceProvider" /></description></item><item><term> SHA256</term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> SHA-256</term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> System.Security.Cryptography.SHA256</term><description><see cref="T:System.Security.Cryptography.SHA256Managed" /></description></item><item><term> SHA384</term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> SHA-384</term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> System.Security.Cryptography.SHA384</term><description><see cref="T:System.Security.Cryptography.SHA384Managed" /></description></item><item><term> SHA512</term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item><item><term> SHA-512</term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item><item><term> System.Security.Cryptography.SHA512</term><description><see cref="T:System.Security.Cryptography.SHA512Managed" /></description></item></list></param>
      <returns>Nouvelle instance de l'algorithme de hachage spécifié ou <see langword="null" /> si <paramref name="hashName" /> n'est pas un algorithme de hachage valide.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.HashAlgorithm" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>En cas de substitution dans une classe dérivée, achemine les données écrites dans l'objet vers l'algorithme de hachage pour calculer le hachage.</summary>
      <param name="array">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <param name="ibStart">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</param>
      <param name="cbSize">Nombre d'octets dans le tableau d'octets à utiliser comme données.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Route les données écrites dans l’objet vers l’algorithme de hachage pour le calcul du hachage.</summary>
      <param name="source">Entrée pour laquelle le code de hachage doit être calculé.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
      <summary>En cas de remplacement dans une classe dérivée, finalise le calcul du hachage une fois les dernières données traitées par l’algorithme de hachage du chiffrement.</summary>
      <returns>Code de hachage calculé.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
      <summary>Rétablit l’état initial de l’algorithme de hachage.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Calcule la valeur de hachage pour la région spécifiée du tableau d'octets d'entrée et copie la région spécifiée du tableau d'octets d'entrée dans la région spécifiée du tableau d'octets de sortie.</summary>
      <param name="inputBuffer">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <param name="inputOffset">Offset dans le tableau d'octets d'entrée à partir duquel l'utilisation des données commence.</param>
      <param name="inputCount">Nombre d'octets dans le tableau d'octets d'entrée à utiliser comme données.</param>
      <param name="outputBuffer">Copie de la partie du tableau d'entrée utilisée pour calculer le code de hachage.</param>
      <param name="outputOffset">Offset dans le tableau d'octets de sortie à partir duquel l'écriture des données commence.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> utilise une valeur non valide.  
  
- ou - 
 <paramref name="inputBuffer" /> a une longueur non valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> est hors limites. Ce paramètre requiert un nombre non négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">L'objet a déjà été supprimé.</exception>
      <returns>Nombre d'octets écrits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>Calcule la valeur de hachage pour la région spécifiée du tableau d'octets spécifié.</summary>
      <param name="inputBuffer">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <param name="inputOffset">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</param>
      <param name="inputCount">Nombre d'octets dans le tableau d'octets à utiliser comme données.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputCount" /> utilise une valeur non valide.  
  
- ou - 
 <paramref name="inputBuffer" /> a une longueur d'offset non valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputBuffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inputOffset" /> est hors limites. Ce paramètre requiert un nombre non négatif.</exception>
      <exception cref="T:System.ObjectDisposedException">L'objet a déjà été supprimé.</exception>
      <returns>Tableau qui est une copie de la partie de l'entrée qui est hachée.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TryComputeHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tente de calculer la valeur de hachage pour le tableau d’octets spécifié.</summary>
      <param name="source">Entrée pour laquelle le code de hachage doit être calculé.</param>
      <param name="destination">Mémoire tampon utilisée pour recevoir la valeur de hachage.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, nombre total d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> n’est pas assez long pour recevoir la valeur de hachage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithm.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tente de finaliser le calcul du hachage après que les dernières données ont été traitées par l’algorithme de hachage.</summary>
      <param name="destination">Mémoire tampon utilisée pour recevoir la valeur de hachage.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, nombre total d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> n’est pas assez long pour recevoir la valeur de hachage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform">
      <summary>Obtient une valeur indiquant si la transformation actuelle peut être réutilisée.</summary>
      <returns>Toujours <see langword="true" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
      <summary>En cas de substitution dans une classe dérivée, obtient une valeur indiquant si plusieurs blocs peuvent être transformés.</summary>
      <returns>
        <see langword="true" /> si plusieurs blocs peuvent être transformés ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
      <summary>Obtient la valeur du code de hachage calculé.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <see cref="F:System.Security.Cryptography.HashAlgorithm.HashValue" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'objet a déjà été supprimé.</exception>
      <returns>Valeur actuelle du code de hachage calculé.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
      <summary>Obtient la taille, en bits, du code de hachage calculé.</summary>
      <returns>Taille, en bits, du code de hachage calculé.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
      <summary>En cas de substitution dans une classe dérivée, obtient la taille du bloc d'entrée.</summary>
      <returns>Taille du bloc d'entrée.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
      <summary>En cas de substitution dans une classe dérivée, obtient la taille du bloc de sortie.</summary>
      <returns>Taille du bloc de sortie.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HashAlgorithmName">
      <summary>Spécifie le nom d'un algorithme de hachage de chiffrement.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> avec un nom personnalisé.</summary>
      <param name="name">Nom personnalisé de l'algorithme de hachage.</param>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)">
      <summary>Retourne une valeur qui indique si l'instance actuelle et un objet spécifié sont égaux.</summary>
      <param name="obj">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> est un objet <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> et si sa propriété <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> est égale à celle de l'instance actuelle. La comparaison est ordinale et respecte la casse.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Retourne une valeur qui indique si deux instances de <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> sont égales.</summary>
      <param name="other">Objet à comparer à l’instance actuelle.</param>
      <returns>
        <see langword="true" /> si la propriété <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> de <paramref name="other" /> est égale à celle de l'instance actuelle. La comparaison est ordinale et respecte la casse.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.FromOid(System.String)">
      <summary>Convertit l’OID spécifié en un nom d’algorithme de hachage.</summary>
      <param name="oidValue">OID de l’algorithme de hachage.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> est <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="oidValue" /> ne représente pas un algorithme de hachage connu.</exception>
      <returns>Nom de l’algorithme de hachage identifié par l’OID.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.GetHashCode">
      <summary>Retourne le code de hachage pour l'instance actuelle.</summary>
      <returns>Code de hachage de l'instance actuelle, ou 0 si aucune valeur <paramref name="name" /> n'a été fournie au constructeur <see cref="T:System.Security.Cryptography.HashAlgorithmName" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Détermine si deux objets <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> spécifiés sont identiques.</summary>
      <param name="left">Premier objet à comparer.</param>
      <param name="right">Deuxième objet à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> ont la même valeur <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Détermine si deux objets <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> spécifiés ne sont pas identiques.</summary>
      <param name="left">Premier objet à comparer.</param>
      <param name="right">Deuxième objet à comparer.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> et <paramref name="right" /> n'ont pas la même valeur <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.ToString">
      <summary>Retourne la représentation sous forme de chaîne de l'instance <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> actuelle.</summary>
      <returns>Représentation sous forme de chaîne de l'instance <see cref="T:System.Security.Cryptography.HashAlgorithmName" /> actuelle.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HashAlgorithmName.TryFromOid(System.String,System.Security.Cryptography.HashAlgorithmName@)">
      <summary>Tente de convertir l’OID spécifié en un nom d’algorithme de hachage.</summary>
      <param name="oidValue">OID de l’algorithme de hachage.</param>
      <param name="value">Lorsque cette méthode retourne <see langword="true" />, l’algorithme de hachage. Lorsque cette méthode retourne <see langword="false" />, contient <c>par défaut</c>.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> est <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si l’OID a été correctement mappé à un algorithme de hachage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.MD5">
      <summary>Obtient un nom d'algorithme de hachage qui représente « MD5 ».</summary>
      <returns>Nom d'algorithme de hachage qui représente « MD5 ».</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.Name">
      <summary>Obtient la représentation de chaîne sous-jacente du nom de l'algorithme.</summary>
      <returns>Représentation sous forme de chaîne du nom de l’algorithme, ou <see langword="default" /> si aucun algorithme de hachage n’est disponible.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA1">
      <summary>Obtient un nom d'algorithme de hachage qui représente « SHA1 ».</summary>
      <returns>Nom d'algorithme de hachage qui représente « SHA1 ».</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA256">
      <summary>Obtient un nom d'algorithme de hachage qui représente « SHA256 ».</summary>
      <returns>Nom d'algorithme de hachage qui représente « SHA256 ».</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA384">
      <summary>Obtient un nom d'algorithme de hachage qui représente « SHA384 ».</summary>
      <returns>Nom d'algorithme de hachage qui représente « SHA384 ».</returns>
    </member>
    <member name="P:System.Security.Cryptography.HashAlgorithmName.SHA512">
      <summary>Obtient un nom d'algorithme de hachage qui représente « SHA512 ».</summary>
      <returns>Nom d'algorithme de hachage qui représente « SHA512 ».</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMAC">
      <summary>Représente la classe abstraite dont toutes les implémentations du code HMAC (Hash-based Message Authentication Code) doivent dériver.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.HMAC" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Create">
      <summary>Crée une instance de l'implémentation par défaut d'un code HMAC (Hash-based Message Authentication Code).</summary>
      <returns>Nouvelle instance SHA-1, à moins que les paramètres par défaut aient été modifiés en utilisant l’élément &lt;cryptoClass&gt;.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Create(System.String)">
      <summary>Crée une instance de l'implémentation spécifiée d'un code HMAC (Hash-based Message Authentication Code).</summary>
      <param name="algorithmName">Implémentation du code HMAC à utiliser. Le tableau suivant indique les valeurs valides du paramètre <paramref name="algorithmName" /> et les algorithmes auxquels elles sont mappées.  
  
 <list type="table"><listheader><term> Valeur de paramètre</term><description> Implémentations</description></listheader><item><term> System.Security.Cryptography.HMAC</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> System.Security.Cryptography.KeyedHashAlgorithm</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> HMACMD5</term><description><see cref="T:System.Security.Cryptography.HMACMD5" /></description></item><item><term> System.Security.Cryptography.HMACMD5</term><description><see cref="T:System.Security.Cryptography.HMACMD5" /></description></item><item><term> HMACRIPEMD160</term><description><see cref="T:System.Security.Cryptography.HMACRIPEMD160" /></description></item><item><term> System.Security.Cryptography.HMACRIPEMD160</term><description><see cref="T:System.Security.Cryptography.HMACRIPEMD160" /></description></item><item><term> HMACSHA1</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> System.Security.Cryptography.HMACSHA1</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> HMACSHA256</term><description><see cref="T:System.Security.Cryptography.HMACSHA256" /></description></item><item><term> System.Security.Cryptography.HMACSHA256</term><description><see cref="T:System.Security.Cryptography.HMACSHA256" /></description></item><item><term> HMACSHA384</term><description><see cref="T:System.Security.Cryptography.HMACSHA384" /></description></item><item><term> System.Security.Cryptography.HMACSHA384</term><description><see cref="T:System.Security.Cryptography.HMACSHA384" /></description></item><item><term> HMACSHA512</term><description><see cref="T:System.Security.Cryptography.HMACSHA512" /></description></item><item><term> System.Security.Cryptography.HMACSHA512</term><description><see cref="T:System.Security.Cryptography.HMACSHA512" /></description></item><item><term> MACTripleDES</term><description><see cref="T:System.Security.Cryptography.MACTripleDES" /></description></item><item><term> System.Security.Cryptography.MACTripleDES</term><description><see cref="T:System.Security.Cryptography.MACTripleDES" /></description></item></list></param>
      <returns>Nouvelle instance de l'implémentation HMAC spécifiée.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par la classe <see cref="T:System.Security.Cryptography.HMAC" /> quand un changement de clé est légitime et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>En cas de remplacement dans une classe dérivée, route les données écrites dans l’objet vers l’algorithme HMAC pour calculer la valeur HMAC.</summary>
      <param name="rgb">Données d'entrée.</param>
      <param name="ib">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</param>
      <param name="cb">Nombre d'octets dans le tableau à utiliser comme données.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Route les données écrites dans l’objet vers l’algorithme HMAC pour le calcul de HMAC.</summary>
      <param name="source">Entrée pour laquelle le code HMAC doit être calculé.</param>
      <exception cref="T:System.PlatformNotSupportedException">Dans tous les cas.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.HashFinal">
      <summary>En cas de remplacement dans une classe dérivée, finalise le calcul de HMAC une fois les dernières données traitées par l’algorithme.</summary>
      <returns>Valeur de HMAC calculée dans un tableau d’octets.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.Initialize">
      <summary>Initialise une instance de l'implémentation par défaut de <see cref="T:System.Security.Cryptography.HMAC" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMAC.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tente de finaliser le calcul de HMAC après que les dernières données ont été traitées par l’algorithme HMAC.</summary>
      <param name="destination">Mémoire tampon utilisée pour recevoir la valeur de HMAC.</param>
      <param name="bytesWritten">Quand cette méthode est retournée, nombre total d’octets écrits dans <paramref name="destination" />. Ce paramètre est traité comme étant non initialisé.</param>
      <exception cref="T:System.PlatformNotSupportedException">La méthode n’est pas remplacée dans le type dérivé.</exception>
      <returns>
        <see langword="true" /> si <paramref name="destination" /> est suffisamment long pour recevoir la valeur de HMAC ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.BlockSizeValue">
      <summary>Obtient ou définit la taille de bloc à utiliser dans la valeur de hachage.</summary>
      <returns>Taille de bloc à utiliser dans la valeur de hachage.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.HashName">
      <summary>Obtient ou définit le nom de l'algorithme de hachage à utiliser pour le hachage.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">L'algorithme de hachage actuel ne peut pas être modifié.</exception>
      <returns>Nom de l'algorithme de hachage.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMAC.Key">
      <summary>Obtient ou définit la clé à utiliser dans le calcul de HMAC.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une tentative est faite de modifier la propriété <see cref="P:System.Security.Cryptography.HMAC.Key" /> après que le hachage a commencé.</exception>
      <returns>Clé à utiliser dans le calcul HMAC.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ICryptoTransform">
      <summary>Définit les opérations de base des transformations de chiffrement.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
      <summary>Transforme la région spécifiée du tableau d'octets d'entrée et copie la transformation qui en résulte dans la région spécifiée du tableau d'octets de sortie.</summary>
      <param name="inputBuffer">Entrée pour laquelle la transformation doit être calculée.</param>
      <param name="inputOffset">Offset dans le tableau d'octets d'entrée à partir duquel l'utilisation des données commence.</param>
      <param name="inputCount">Nombre d'octets dans le tableau d'octets d'entrée à utiliser comme données.</param>
      <param name="outputBuffer">Sortie dans laquelle la transformation doit être écrite.</param>
      <param name="outputOffset">Offset dans le tableau d'octets de sortie à partir duquel l'écriture des données commence.</param>
      <returns>Nombre d'octets écrits.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
      <summary>Transforme la région spécifiée du tableau d'octets spécifié.</summary>
      <param name="inputBuffer">Entrée pour laquelle la transformation doit être calculée.</param>
      <param name="inputOffset">Offset dans le tableau d'octets à partir duquel l'utilisation de données commence.</param>
      <param name="inputCount">Nombre d'octets dans le tableau d'octets à utiliser comme données.</param>
      <returns>Transformation calculée.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanReuseTransform">
      <summary>Obtient une valeur indiquant si la transformation actuelle peut être réutilisée.</summary>
      <returns>
        <see langword="true" /> si la transformation en cours peut être réutilisée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
      <summary>Obtient une valeur indiquant si plusieurs blocs peuvent être transformés.</summary>
      <returns>
        <see langword="true" /> si plusieurs blocs peuvent être transformés ; sinon <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
      <summary>Obtient la taille du bloc d'entrée.</summary>
      <returns>Taille des blocs de données d'entrée en octets.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
      <summary>Obtient la taille du bloc de sortie.</summary>
      <returns>Taille des blocs de données de sortie en octets.</returns>
    </member>
    <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
      <summary>Représente la classe abstraite dont toutes les implémentations des algorithmes de hachage à clé doivent dériver.</summary>
    </member>
    <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
      <summary>Clé à utiliser dans l'algorithme de hachage.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create">
      <summary>Crée une instance de l'implémentation par défaut d'un algorithme de hachage à clé.</summary>
      <returns>Nouvelle instance de <see cref="T:System.Security.Cryptography.HMACSHA1" />, à moins que les paramètres par défaut aient été modifiés.</returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create(System.String)">
      <summary>Crée une instance de l'implémentation spécifiée d'un algorithme de hachage à clé.</summary>
      <param name="algName">Implémentation de l'algorithme de hachage à clé à utiliser. Le tableau suivant indique les valeurs valides du paramètre <paramref name="algName" /> et les algorithmes auxquels elles sont mappées.  
  
 <list type="table"><listheader><term> Valeur de paramètre</term><description> Implémentations</description></listheader><item><term> System.Security.Cryptography.HMAC</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> System.Security.Cryptography.KeyedHashAlgorithm</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> HMACMD5</term><description><see cref="T:System.Security.Cryptography.HMACMD5" /></description></item><item><term> System.Security.Cryptography.HMACMD5</term><description><see cref="T:System.Security.Cryptography.HMACMD5" /></description></item><item><term> HMACRIPEMD160</term><description><see cref="T:System.Security.Cryptography.HMACRIPEMD160" /></description></item><item><term> System.Security.Cryptography.HMACRIPEMD160</term><description><see cref="T:System.Security.Cryptography.HMACRIPEMD160" /></description></item><item><term> HMACSHA1</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> System.Security.Cryptography.HMACSHA1</term><description><see cref="T:System.Security.Cryptography.HMACSHA1" /></description></item><item><term> HMACSHA256</term><description><see cref="T:System.Security.Cryptography.HMACSHA256" /></description></item><item><term> System.Security.Cryptography.HMACSHA256</term><description><see cref="T:System.Security.Cryptography.HMACSHA256" /></description></item><item><term> HMACSHA384</term><description><see cref="T:System.Security.Cryptography.HMACSHA384" /></description></item><item><term> System.Security.Cryptography.HMACSHA384</term><description><see cref="T:System.Security.Cryptography.HMACSHA384" /></description></item><item><term> HMACSHA512</term><description><see cref="T:System.Security.Cryptography.HMACSHA512" /></description></item><item><term> System.Security.Cryptography.HMACSHA512</term><description><see cref="T:System.Security.Cryptography.HMACSHA512" /></description></item><item><term> MACTripleDES</term><description><see cref="T:System.Security.Cryptography.MACTripleDES" /></description></item><item><term> System.Security.Cryptography.MACTripleDES</term><description><see cref="T:System.Security.Cryptography.MACTripleDES" /></description></item></list></param>
      <returns>Nouvelle instance de l'algorithme de hachage à clé spécifié.</returns>
    </member>
    <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
      <summary>Obtient ou définit la clé à utiliser dans l'algorithme de hachage.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une tentative a été faite de modifier la propriété <see cref="P:System.Security.Cryptography.KeyedHashAlgorithm.Key" /> après que le hachage a commencé.</exception>
      <returns>Clé à utiliser dans l'algorithme de hachage.</returns>
    </member>
    <member name="T:System.Security.Cryptography.KeySizes">
      <summary>Détermine le jeu des tailles de clé valides pour les algorithmes de chiffrement symétriques.</summary>
    </member>
    <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.KeySizes" /> avec les valeurs de clé spécifiées.</summary>
      <param name="minSize">La taille de clé valide minimale.</param>
      <param name="maxSize">La taille de clé valide maximale.</param>
      <param name="skipSize">L’intervalle entre les tailles de clé valides.</param>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
      <summary>Spécifie la taille de clé maximale.</summary>
      <returns>Taille de clé maximale.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.MinSize">
      <summary>Spécifie la taille de clé minimale.</summary>
      <returns>Taille de clé minimale.</returns>
    </member>
    <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
      <summary>Spécifie l'intervalle entre les tailles de clé valides.</summary>
      <returns>L’intervalle entre les tailles de clé valides.</returns>
    </member>
    <member name="T:System.Security.Cryptography.PaddingMode">
      <summary>Spécifie le type de remplissage à appliquer quand le bloc de données du message est plus petit que le nombre total d’octets nécessaires à une opération de chiffrement.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.ANSIX923">
      <summary>La chaîne de remplissage ANSIX923 se compose d'une séquence d'octets remplie de zéros avant la longueur.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.ISO10126">
      <summary>La chaîne de remplissage ISO10126 se compose de données aléatoires avant la longueur.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.None">
      <summary>Aucun remplissage n'est effectué.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.PKCS7">
      <summary>La chaîne de remplissage PKCS #7 se compose d'une séquence d'octets ; chacun d'eux est égal au nombre total d'octets de remplissage ajoutés.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PaddingMode.Zeros">
      <summary>La chaîne de remplissage se compose d'octets auxquels la valeur zéro a été affectée.</summary>
    </member>
    <member name="T:System.Security.Cryptography.PbeEncryptionAlgorithm">
      <summary>Spécifie les algorithmes de chiffrement à utiliser avec le chiffrement par mot de passe.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Aes128Cbc">
      <summary>Indique que le chiffrement doit être effectué avec l’algorithme AES-128 en mode CBC avec remplissage PKCS#7.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Aes192Cbc">
      <summary>Indique que le chiffrement doit être effectué avec l’algorithme AES-192 en mode CBC avec remplissage PKCS#7.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Aes256Cbc">
      <summary>Indique que le chiffrement doit être effectué avec l’algorithme AES-256 en mode CBC avec remplissage PKCS#7.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12">
      <summary>Indique que le chiffrement doit être effectué avec l’algorithme TripleDES en mode CBC avec une clé 192 bits dérivée à l’aide de la fonction de dérivation de clés (KDF) de PKCS#12.</summary>
    </member>
    <member name="F:System.Security.Cryptography.PbeEncryptionAlgorithm.Unknown">
      <summary>Indique qu’aucun algorithme de chiffrement n’a été sélectionné.</summary>
    </member>
    <member name="T:System.Security.Cryptography.PbeParameters">
      <summary>Représente les paramètres à utiliser pour le chiffrement par mot de passe.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PbeParameters.#ctor(System.Security.Cryptography.PbeEncryptionAlgorithm,System.Security.Cryptography.HashAlgorithmName,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.PbeParameters" />.</summary>
      <param name="encryptionAlgorithm">Algorithme à utiliser lors du chiffrement des données.</param>
      <param name="hashAlgorithm">Nom d’un algorithme de hachage à utiliser avec la fonction de dérivation de clés (KDF) pour convertir un mot de passe en clé de chiffrement.</param>
      <param name="iterationCount">Nombre d’itérations à fournir à la fonction de dérivation de clés (KDF) pour convertir un mot de passe en clé de chiffrement.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterationCount" /> est inférieur à 1.</exception>
    </member>
    <member name="P:System.Security.Cryptography.PbeParameters.EncryptionAlgorithm">
      <summary>Obtient l’algorithme à utiliser lors du chiffrement des données.</summary>
      <returns>Algorithme à utiliser lors du chiffrement des données.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PbeParameters.HashAlgorithm">
      <summary>Obtient le nom de l’algorithme de hachage à utiliser avec la fonction de dérivation de clés (KDF) pour convertir un mot de passe en clé de chiffrement.</summary>
      <returns>Nom de l’algorithme de hachage à utiliser avec la fonction de dérivation de clé (KDF) pour transformer un mot de passe en clé de chiffrement.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PbeParameters.IterationCount">
      <summary>Obtient le nombre d’itérations à fournir à la fonction de dérivation de clés (KDF) pour convertir un mot de passe en clé de chiffrement.</summary>
      <returns>Nombre d’itérations à fournir à la fonction de dérivation de clés (KDF) pour convertir un mot de passe en clé de chiffrement.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
      <summary>Représente la classe de base abstraite dont toutes les implémentations des algorithmes symétriques doivent hériter.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue">
      <summary>Représente la taille de bloc, en bits, de l'opération de chiffrement.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue">
      <summary>Représente la taille des commentaires, en bits, de l'opération de chiffrement.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.IVValue">
      <summary>Représente le vecteur d'initialisation (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) pour l'algorithme symétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue">
      <summary>Représente la taille, en bits, de la clé secrète utilisée par l'algorithme symétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue">
      <summary>Représente la clé secrète pour l'algorithme symétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue">
      <summary>Spécifie les tailles de bloc, en octets, prises en charge par l'algorithme symétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue">
      <summary>Spécifie les tailles de clé, en octets, prises en charge par l'algorithme symétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue">
      <summary>Représente le mode de chiffrement utilisé dans l'algorithme symétrique.</summary>
    </member>
    <member name="F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue">
      <summary>Représente le mode de remplissage utilisé dans l'algorithme symétrique.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">L'implémentation de la classe dérivée de l'algorithme symétrique n'est pas valide.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Clear">
      <summary>Libère toutes les ressources utilisées par la classe <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create">
      <summary>Crée un objet de chiffrement par défaut utilisé pour exécuter l'algorithme symétrique.</summary>
      <returns>Objet de chiffrement par défaut utilisé pour exécuter l'algorithme symétrique.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)">
      <summary>Crée l'objet de chiffrement spécifié utilisé pour exécuter l'algorithme symétrique.</summary>
      <param name="algName">Nom de l'implémentation spécifique de la classe <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> à utiliser.</param>
      <returns>Objet de chiffrement utilisé pour exécuter l'algorithme symétrique.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
      <summary>Crée un objet déchiffreur symétrique avec la propriété <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> et le vecteur d'initialisation (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) actuels.</summary>
      <returns>Objet déchiffreur symétrique.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>En cas de substitution dans une classe dérivée, crée un objet déchiffreur symétrique avec la propriété <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> et le vecteur d'initialisation (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) spécifiés.</summary>
      <param name="rgbKey">Clé secrète à utiliser pour l'algorithme symétrique.</param>
      <param name="rgbIV">Vecteur d'initialisation à utiliser pour l'algorithme symétrique.</param>
      <returns>Objet déchiffreur symétrique.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
      <summary>Crée un objet chiffreur symétrique avec la propriété <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> et le vecteur d'initialisation (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) actuels.</summary>
      <returns>Objet chiffreur symétrique.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>En cas de substitution dans une classe dérivée, crée un objet chiffreur symétrique avec la propriété <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> et le vecteur d'initialisation (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) spécifiés.</summary>
      <param name="rgbKey">Clé secrète à utiliser pour l'algorithme symétrique.</param>
      <param name="rgbIV">Vecteur d'initialisation à utiliser pour l'algorithme symétrique.</param>
      <returns>Objet chiffreur symétrique.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose">
      <summary>Libère toutes les ressources utilisées par l'instance actuelle de la classe <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
      <summary>En cas de substitution dans une classe dérivée, génère un vecteur d'initialisation aléatoire (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) à utiliser pour l'algorithme.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
      <summary>En cas de substitution dans une classe dérivée, génère une clé aléatoire (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) à utiliser pour l'algorithme.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)">
      <summary>Détermine si la taille de clé spécifiée est valide pour l'algorithme actuel.</summary>
      <param name="bitLength">Longueur, en bits, à vérifier pour une taille de clé valide.</param>
      <returns>
        <see langword="true" /> si la taille de clé spécifiée est valide pour l'algorithme en cours ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
      <summary>Obtient ou définit la taille de bloc, en bits, de l'opération de chiffrement.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La taille du bloc n'est pas valide.</exception>
      <returns>Taille de bloc en bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize">
      <summary>Obtient ou définit la taille des commentaires, en bits, de l’opération de chiffrement pour les modes de chiffrement CFB (Cipher Feedback) et OFB (Output Feedback).</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La taille des commentaires est supérieure à la taille du bloc.</exception>
      <returns>Taille des commentaires en bits.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
      <summary>Obtient ou définit le vecteur d'initialisation (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) pour l'algorithme symétrique.</summary>
      <exception cref="T:System.ArgumentNullException">Une tentative d'affecter la valeur <see langword="null" /> au vecteur d'initialisation a été effectuée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une tentative d'affecter une taille non valide au vecteur d'initialisation a été effectuée.</exception>
      <returns>Vecteur d'initialisation.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
      <summary>Obtient ou définit la clé secrète pour l'algorithme symétrique.</summary>
      <exception cref="T:System.ArgumentNullException">Une tentative d’affectation de la valeur <see langword="null" /> à la clé a été effectuée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La taille de la clé n'est pas valide.</exception>
      <returns>Clé secrète à utiliser pour l'algorithme symétrique.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
      <summary>Obtient ou définit la taille, en bits, de la clé secrète utilisée par l'algorithme symétrique.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La taille de la clé n'est pas valide.</exception>
      <returns>Taille, en bits, de la clé secrète utilisée par l'algorithme symétrique.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes">
      <summary>Obtient les tailles de bloc, en octets, prises en charge par l'algorithme symétrique.</summary>
      <returns>Tableau qui contient les tailles de bloc prises en charge par l'algorithme.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
      <summary>Obtient les tailles de clé, en octets, prises en charge par l'algorithme symétrique.</summary>
      <returns>Tableau qui contient les tailles de clé prises en charge par l'algorithme.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Mode">
      <summary>Obtient ou définit le mode de fonctionnement pour l'algorithme symétrique.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Le mode de chiffrement ne fait pas partie des valeurs <see cref="T:System.Security.Cryptography.CipherMode" />.</exception>
      <returns>Mode de fonctionnement de l'algorithme symétrique. La valeur par défaut est <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Padding">
      <summary>Obtient ou définit le mode de remplissage utilisé dans l'algorithme symétrique.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Le mode de remplissage ne fait pas partie des valeurs <see cref="T:System.Security.Cryptography.PaddingMode" />.</exception>
      <returns>Mode de remplissage utilisé dans l'algorithme symétrique. La valeur par défaut est <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
  </members>
</doc>
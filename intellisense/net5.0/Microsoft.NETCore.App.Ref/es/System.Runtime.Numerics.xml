<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Numerics</name>
  </assembly>
  <members>
    <member name="T:System.Numerics.BigInteger">
      <summary>Representa un entero con signo arbitrariamente grande.</summary>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Byte[])">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando los valores de una matriz de bytes.</summary>
      <param name="value">Matriz de valores de byte en orden little-endian.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Decimal)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor <see cref="T:System.Decimal" />.</summary>
      <param name="value">Número decimal.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Double)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor de punto flotante de precisión doble.</summary>
      <param name="value">Valor de punto flotante de precisión doble.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.NegativeInfinity" /> o <see cref="F:System.Double.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> usando un valor entero de 32 bits con signo.</summary>
      <param name="value">Entero de 32 bits con signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Int64)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> usando un valor entero de 64 bits con signo.</summary>
      <param name="value">Entero de 64 bits con signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Boolean)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> mediante los valores de un intervalo de solo lectura de bytes y, de forma opcional, indica la codificación de firma y el orden de bytes endianness.</summary>
      <param name="value">Intervalo de solo lectura de bytes que representa el entero grande.</param>
      <param name="isUnsigned">
        <see langword="true" /> para indicar que <paramref name="value" /> usa codificación sin signo; de lo contrario, <see langword="false" /> (el valor predeterminado).</param>
      <param name="isBigEndian">
        <see langword="true" /> para indicar que <paramref name="value" /> está en orden de bytes big endian; de lo contrario, <see langword="false" /> (el valor predeterminado).</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.Single)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor de punto flotante de precisión sencilla.</summary>
      <param name="value">Valor de punto flotante de precisión sencilla.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.NegativeInfinity" /> o <see cref="F:System.Single.PositiveInfinity" />.</exception>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> utilizando un valor entero de 32 bits sin signo.</summary>
      <param name="value">Valor entero de 32 bits sin signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.#ctor(System.UInt64)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.BigInteger" /> con un valor entero de 64 bits sin signo.</summary>
      <param name="value">Entero de 64 bits sin signo.</param>
    </member>
    <member name="M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)">
      <summary>Obtiene el valor absoluto de un objeto <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Un número.</param>
      <returns>Valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Suma dos valores <see cref="T:System.Numerics.BigInteger" /> y devuelve el resultado.</summary>
      <param name="left">Primer valor que se va a sumar.</param>
      <param name="right">Segundo valor que se va a sumar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Compara dos valores <see cref="T:System.Numerics.BigInteger" /> y devuelve un entero que indica si el primer valor es menor, igual o mayor que el segundo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Entero con signo que indica los valores relativos de <paramref name="left" /> y <paramref name="right" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor</term><description> Condición</description></listheader><item><term> Menor que cero</term><description><paramref name="left" /> es menor que <paramref name="right" />.</description></item><item><term> Cero</term><description><paramref name="left" /> es igual que <paramref name="right" />.</description></item><item><term> Mayor que cero</term><description><paramref name="left" /> es mayor que <paramref name="right" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Int64)">
      <summary>Compara esta instancia con un entero de 64 bits con signo y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del entero de 64 bits con signo.</summary>
      <param name="other">Entero de 64 bits con signo que se va a comparar.</param>
      <returns>Valor entero con signo que indica la relación de esta instancia con <paramref name="other" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor devuelto</term><description> Descripción</description></listheader><item><term> Menor que cero</term><description> La instancia actual es menor que <paramref name="other" />.</description></item><item><term> Cero</term><description> La instancia actual es igual que <paramref name="other" />.</description></item><item><term> Mayor que cero</term><description> La instancia actual es mayor que <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)">
      <summary>Compara esta instancia con un segundo <see cref="T:System.Numerics.BigInteger" /> y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del objeto especificado.</summary>
      <param name="other">Objeto que se va a comparar.</param>
      <returns>Valor entero con signo que indica la relación de esta instancia con <paramref name="other" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor devuelto</term><description> Descripción</description></listheader><item><term> Menor que cero</term><description> La instancia actual es menor que <paramref name="other" />.</description></item><item><term> Cero</term><description> La instancia actual es igual que <paramref name="other" />.</description></item><item><term> Mayor que cero</term><description> La instancia actual es mayor que <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.Object)">
      <summary>Compara esta instancia con un objeto especificado y devuelve un entero que indica si el valor de esta instancia es mayor, igual o menor que el valor del objeto especificado.</summary>
      <param name="obj">Objeto que se va a comparar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> no es un <see cref="T:System.Numerics.BigInteger" />.</exception>
      <returns>Entero con signo que indica la relación de la instancia actual con el parámetro <paramref name="obj" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Valor devuelto</term><description> Descripción</description></listheader><item><term> Menor que cero</term><description> La instancia actual es menor que <paramref name="obj" />.</description></item><item><term> Cero</term><description> La instancia actual es igual que <paramref name="obj" />.</description></item><item><term> Mayor que cero</term><description> La instancia actual es mayor que <paramref name="obj" /> o el parámetro <paramref name="obj" /> es <see langword="null" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.CompareTo(System.UInt64)">
      <summary>Compara esta instancia con un entero de 64 bits sin signo y devuelve un entero que indica si el valor de esta instancia es menor, igual o mayor que el valor del entero de 64 bits sin signo.</summary>
      <param name="other">Entero de 64 bits sin signo que se va a comparar.</param>
      <returns>Entero con signo que indica el valor relativo de esta instancia y <paramref name="other" />, como se muestra en la tabla siguiente.
          <list type="table"><listheader><term>Valor devuelto</term><description>Descripción</description></listheader><item><term>Menor que cero</term><description>La instancia actual es menor que <paramref name="other" />.</description></item><item><term>Cero</term><description>La instancia actual es igual que <paramref name="other" />.</description></item><item><term>Mayor que cero</term><description>La instancia actual es mayor que <paramref name="other" />.</description></item></list></returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divide un valor <see cref="T:System.Numerics.BigInteger" /> por otro y devuelve el resultado.</summary>
      <param name="dividend">Valor que se va a dividir.</param>
      <param name="divisor">Valor por el que se va a dividir.</param>
      <exception cref="T:System.DivideByZeroException">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
      <returns>Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)">
      <summary>Divide un valor <see cref="T:System.Numerics.BigInteger" /> por otro, devuelve el resultado y devuelve el resto en un parámetro de salida.</summary>
      <param name="dividend">Valor que se va a dividir.</param>
      <param name="divisor">Valor por el que se va a dividir.</param>
      <param name="remainder">Cuando este método devuelve un valor, contiene <see cref="T:System.Numerics.BigInteger" />, que representa el resto de la división. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.DivideByZeroException">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
      <returns>Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Int64)">
      <summary>Devuelve un valor que indica si la instancia actual y un entero de 64 bits con signo tienen el mismo valor.</summary>
      <param name="other">Valor entero de 64 bits con signo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si el entero de 64 bits con signo y la instancia actual tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si la instancia actual y un objeto <see cref="T:System.Numerics.BigInteger" /> especificado tienen el mismo valor.</summary>
      <param name="other">Objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si este objeto <see cref="T:System.Numerics.BigInteger" /> y <paramref name="other" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la instancia actual y un objeto especificado tienen el mismo valor.</summary>
      <param name="obj">Objeto que se va a comparar.</param>
      <returns>
        <see langword="true" /> si el argumento <paramref name="obj" /> es un objeto <see cref="T:System.Numerics.BigInteger" /> y su valor es igual al valor de la instancia <see cref="T:System.Numerics.BigInteger" /> actual; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Equals(System.UInt64)">
      <summary>Devuelve un valor que indica si la instancia actual y un entero de 64 bits sin signo tienen el mismo valor.</summary>
      <param name="other">Entero de 64 bits sin signo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si la instancia actual y el entero de 64 bits sin signo tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetBitLength">
      <summary>Obtiene el número de bits necesarios para la representación de complemento más corta de dos de la instancia actual sin el bit de signo.</summary>
      <returns>Número no negativo mínimo de bits en la notación de complemento de dos sin el bit de signo.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetByteCount(System.Boolean)">
      <summary>Obtiene el número de bytes que <see cref="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)" /> y <see cref="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)" /> van a generar.</summary>
      <param name="isUnsigned">
        <see langword="true" /> para usar la codificación sin signo; de lo contrario, <see langword="false" />.</param>
      <returns>Número de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Numerics.BigInteger" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Busca el máximo común divisor de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor.</param>
      <param name="right">Segundo valor.</param>
      <returns>Máximo común divisor de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)">
      <summary>Devuelve el logaritmo natural (en base <see langword="e" />) de un número especificado.</summary>
      <param name="value">Número cuyo logaritmo se va a calcular.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El logaritmo natural de <paramref name="value" /> está fuera del intervalo del tipo de datos <see cref="T:System.Double" />.</exception>
      <returns>Logaritmo natural (base <see langword="e" />) de <paramref name="value" />, como se muestra en la tabla de la sección Comentarios.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)">
      <summary>Devuelve el logaritmo de un número especificado en una base determinada.</summary>
      <param name="value">Número cuyo logaritmo hay que calcular.</param>
      <param name="baseValue">Base del logaritmo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El logaritmo de <paramref name="value" /> está fuera del intervalo del tipo de datos <see cref="T:System.Double" />.</exception>
      <returns>Logaritmo en base <paramref name="baseValue" /> de <paramref name="value" />, como se muestra en la tabla de la sección Comentarios.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)">
      <summary>Devuelve el logaritmo en base 10 de un número especificado.</summary>
      <param name="value">Número cuyo logaritmo hay que calcular.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El logaritmo en base 10 de <paramref name="value" /> está fuera del intervalo del tipo de datos <see cref="T:System.Double" />.</exception>
      <returns>Logaritmo en base 10 de <paramref name="value" />, como se muestra en la tabla de la sección Comentarios.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve el mayor de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Parámetro <paramref name="left" /> o <paramref name="right" />, el que sea mayor.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve el menor de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Parámetro <paramref name="left" /> o <paramref name="right" />, el que sea menor.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Realiza una división de módulo en un número elevado a la potencia de otro número.</summary>
      <param name="value">Número que se va a elevar a la potencia especificada por <paramref name="exponent" />.</param>
      <param name="exponent">Exponente al que se va a elevar <paramref name="value" />.</param>
      <param name="modulus">Especifica el número por el que dividir <paramref name="value" /> elevado a la potencia <paramref name="exponent" />.</param>
      <exception cref="T:System.DivideByZeroException">
        <paramref name="modulus" /> es cero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> es negativo.</exception>
      <returns>Resto después de dividir <paramref name="value" />exponent por <paramref name="modulus" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve el producto de dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">El primer número que se va a multiplicar.</param>
      <param name="right">El segundo número que se va a multiplicar.</param>
      <returns>Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)">
      <summary>Crea el negativo de un valor <see cref="T:System.Numerics.BigInteger" /> especificado.</summary>
      <param name="value">Valor que se va a negar.</param>
      <returns>Resultado del parámetro <paramref name="value" /> multiplicado por menos uno (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Suma los valores de dos objetos <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left">Primer valor que se va a sumar.</param>
      <param name="right">Segundo valor que se va a sumar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Realiza una operación <see langword="And" /> bit a bit en dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor.</param>
      <param name="right">Segundo valor.</param>
      <returns>Resultado de la operación <see langword="And" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Realiza una operación <see langword="Or" /> bit a bit en dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor.</param>
      <param name="right">Segundo valor.</param>
      <returns>Resultado de la operación <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)">
      <summary>Disminuye un valor <see cref="T:System.Numerics.BigInteger" /> en 1.</summary>
      <param name="value">Valor que se va a disminuir.</param>
      <returns>Valor del parámetro <paramref name="value" /> disminuido en 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Divide un valor <see cref="T:System.Numerics.BigInteger" /> especificado por otro valor <see cref="T:System.Numerics.BigInteger" /> indicado utilizando división de enteros.</summary>
      <param name="dividend">Valor que se va a dividir.</param>
      <param name="divisor">Valor por el que se va a dividir.</param>
      <exception cref="T:System.DivideByZeroException">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
      <returns>Resultado entero de la división.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor entero long con signo y un valor <see cref="T:System.Numerics.BigInteger" /> son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor entero long con signo son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si los valores de dos objetos <see cref="T:System.Numerics.BigInteger" /> son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor entero long sin signo son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor entero long sin signo y un valor <see cref="T:System.Numerics.BigInteger" /> son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Realiza una operación exclusiva <see langword="Or" /> (<see langword="XOr" />) bit a bit en dos valores <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor.</param>
      <param name="right">Segundo valor.</param>
      <returns>Resultado de la operación <see langword="Or" /> bit a bit.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Decimal" /> en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger">
      <summary>Define una conversión explícita de un valor <see cref="T:System.Double" /> en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es <see cref="F:System.Double.NaN" />, <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor de byte sin signo.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Byte" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Byte.MinValue" /> o mayor que <see cref="F:System.Byte.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor <see cref="T:System.Decimal" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es menor que <see cref="F:System.Decimal.MinValue" /> o mayor que <see cref="F:System.Decimal.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor <see cref="T:System.Double" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Double" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 16 bits con signo.</summary>
      <param name="value">Valor que se va a convertir en un entero de 16 bits con signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int16.MinValue" /> o menor que <see cref="F:System.Int16.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 32 bits con signo.</summary>
      <param name="value">Valor que se va a convertir en un entero de 32 bits con signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int32.MinValue" /> o menor que <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 64 bits con signo.</summary>
      <param name="value">Valor que se va a convertir en un entero de 64 bits con signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.Int64.MinValue" /> o menor que <see cref="F:System.Int64.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor de 8 bits con signo.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Int16" />.</summary>
      <param name="value">Valor que se va a convertir en un valor de 8 bits con signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.SByte.MinValue" /> o menor que <see cref="F:System.SByte.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor de punto flotante de precisión sencilla.</summary>
      <param name="value">Valor que se va a convertir en un valor de punto flotante de precisión sencilla.</param>
      <returns>Objeto que contiene la representación más cercana del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 16 bits sin signo.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Int32" />.</summary>
      <param name="value">Valor que se va a convertir en un entero de 16 bits sin signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt16.MinValue" /> o menor que <see cref="F:System.UInt16.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 32 bits sin signo.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Int64" />.</summary>
      <param name="value">Valor que se va a convertir en un entero de 32 bits sin signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt32.MinValue" /> o menor que <see cref="F:System.UInt32.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64">
      <summary>Define una conversión explícita de un objeto <see cref="T:System.Numerics.BigInteger" /> en un valor entero de 64 bits sin signo.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Double" />.</summary>
      <param name="value">Valor que se va a convertir en un entero de 64 bits sin signo.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es mayor que <see cref="F:System.UInt64.MinValue" /> o menor que <see cref="F:System.UInt64.MaxValue" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger">
      <summary>Define una conversión explícita de un valor <see cref="T:System.Single" /> en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="value" /> es <see cref="F:System.Single.NaN" />, <see cref="F:System.Single.PositiveInfinity" /> o <see cref="F:System.Single.NegativeInfinity" />.</exception>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits con signo es mayor que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que un valor entero de 64 bits con signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que un entero de 64 bits sin signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor que un entero de 64 bits sin signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits con signo es mayor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor o igual que un valor entero de 64 bits con signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor o igual que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es mayor o igual que un valor entero de 64 bits sin signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits sin signo es mayor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es mayor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un byte sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 16 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 32 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 64 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 8 bits con signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="M:System.Numerics.BigInteger.#ctor(System.Int32)" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 16 bits sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 32 bits sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger">
      <summary>Define una conversión implícita de un entero de 64 bits sin signo en un valor <see cref="T:System.Numerics.BigInteger" />.  
  
Esta API no es conforme a CLS. La alternativa conforme es <see cref="T:System.Double" />.</summary>
      <param name="value">Valor que se va a convertir en un tipo <see cref="T:System.Numerics.BigInteger" />.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)">
      <summary>Aumenta un valor <see cref="T:System.Numerics.BigInteger" /> en 1.</summary>
      <param name="value">Valor que se va a aumentar.</param>
      <returns>Valor del parámetro <paramref name="value" /> aumentado en 1.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits con signo y un valor <see cref="T:System.Numerics.BigInteger" /> no son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor de 64 bits con signo no son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.Numerics.BigInteger" /> tienen valores diferentes.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> y un valor de 64 bits sin signo no son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits sin signo y un valor <see cref="T:System.Numerics.BigInteger" /> no son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Desplaza un valor <see cref="T:System.Numerics.BigInteger" /> un número especificado de bits a la izquierda.</summary>
      <param name="value">Valor cuyos bits se van a desplazar.</param>
      <param name="shift">Número de bits que se va a desplazar <paramref name="value" /> a la izquierda.</param>
      <returns>Valor que se ha desplazado a la izquierda el número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits con signo es menor que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor que un entero de 64 bits con signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor que un entero de 64 bits sin signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits sin signo es menor que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits con signo es menor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor o igual que un entero de 64 bits con signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor o igual que otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)">
      <summary>Devuelve un valor que indica si un valor <see cref="T:System.Numerics.BigInteger" /> es menor o igual que un entero de 64 bits sin signo.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)">
      <summary>Devuelve un valor que indica si un entero de 64 bits sin signo es menor o igual que un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>Es <see langword="true" /> si <paramref name="left" /> es menor o igual que <paramref name="right" />; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Devuelve el resto que se obtiene al dividir dos valores <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="dividend">Valor que se va a dividir.</param>
      <param name="divisor">Valor por el que se va a dividir.</param>
      <exception cref="T:System.DivideByZeroException">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
      <returns>Resto que es el resultado de la división.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Multiplica dos valores <see cref="T:System.Numerics.BigInteger" /> especificados.</summary>
      <param name="left">Primer valor que se va a multiplicar.</param>
      <param name="right">Segundo valor que se va a multiplicar.</param>
      <returns>Producto de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)">
      <summary>Devuelve el complemento de uno bit a bit de un valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Valor de entero.</param>
      <returns>Complemento de uno bit a bit de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)">
      <summary>Desplaza un valor <see cref="T:System.Numerics.BigInteger" /> un número especificado de bits a la derecha.</summary>
      <param name="value">Valor cuyos bits se van a desplazar.</param>
      <param name="shift">Número de bits que se va a desplazar <paramref name="value" /> a la derecha.</param>
      <returns>Valor que se ha desplazado a la derecha el número especificado de bits.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Resta un valor <see cref="T:System.Numerics.BigInteger" /> de otro valor <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="left">Valor del que se va a restar (minuendo).</param>
      <param name="right">Valor que se va a restar (sustraendo).</param>
      <returns>Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)">
      <summary>Crea el negativo de un valor BigInteger especificado.</summary>
      <param name="value">Valor que se va a negar.</param>
      <returns>Resultado del parámetro <paramref name="value" /> multiplicado por menos uno (-1).</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)">
      <summary>Devuelve el valor del operando <see cref="T:System.Numerics.BigInteger" />. (El signo del operando no cambia).</summary>
      <param name="value">Valor de entero.</param>
      <returns>Valor del operando <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación de un número, incluida en el intervalo de solo lectura especificado de caracteres, en un estilo especificado en su equivalente <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Intervalo de solo lectura de caracteres que contiene el número que se va a convertir.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="value" />.</param>
      <param name="provider">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
  
o bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no cumple el modelo de entrada especificado por <paramref name="style" />.</exception>
      <returns>Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String)">
      <summary>Convierte la representación en forma de cadena de un número en su <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Cadena que contiene el número que se va a convertir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene el formato correcto.</exception>
      <returns>Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)">
      <summary>Convierte la representación de cadena de un número con un estilo especificado en su <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Cadena que contiene un número que se va a convertir.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
  
o bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no cumple el modelo de entrada especificado por <see cref="T:System.Globalization.NumberStyles" />.</exception>
      <returns>Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
      <summary>Convierte la representación de cadena de un número con el estilo y el formato específico de la referencia cultural que se hayan especificado en su equivalente de <see cref="T:System.Numerics.BigInteger" />.</summary>
      <param name="value">Cadena que contiene un número que se va a convertir.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que especifican el formato permitido de <paramref name="value" />.</param>
      <param name="provider">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
  
o bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no cumple el modelo de entrada especificado por <paramref name="style" />.</exception>
      <returns>Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)">
      <summary>Convierte la representación en forma de cadena de un número con el formato específico de la referencia cultural indicada en su <see cref="T:System.Numerics.BigInteger" /> equivalente.</summary>
      <param name="value">Cadena que contiene un número que se va a convertir.</param>
      <param name="provider">Un objeto que proporciona información de formato específica de la referencia cultural sobre <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> no tiene el formato correcto.</exception>
      <returns>Valor equivalente al número especificado en el parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)">
      <summary>Eleva un valor <see cref="T:System.Numerics.BigInteger" /> a la potencia del valor especificado.</summary>
      <param name="value">Número que se va a elevar a la potencia especificada por <paramref name="exponent" />.</param>
      <param name="exponent">Exponente al que se va a elevar <paramref name="value" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exponent" /> es negativo.</exception>
      <returns>Resultado de elevar <paramref name="value" /> a la potencia <paramref name="exponent" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Realiza la división entera en dos valores <see cref="T:System.Numerics.BigInteger" /> y devuelve el resto.</summary>
      <param name="dividend">Valor que se va a dividir.</param>
      <param name="divisor">Valor por el que se va a dividir.</param>
      <exception cref="T:System.DivideByZeroException">El valor de <paramref name="divisor" /> es 0 (cero).</exception>
      <returns>Resto después de dividir <paramref name="dividend" /> por <paramref name="divisor" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)">
      <summary>Resta un valor <see cref="T:System.Numerics.BigInteger" /> de otro y devuelve el resultado.</summary>
      <param name="left">Valor del que se va a restar (minuendo).</param>
      <param name="right">Valor que se va a restar (sustraendo).</param>
      <returns>Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray">
      <summary>Convierte un valor <see cref="T:System.Numerics.BigInteger" /> en una matriz de bytes.</summary>
      <returns>Valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual convertido en una matriz de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToByteArray(System.Boolean,System.Boolean)">
      <summary>Devuelve el valor de este objeto <see cref="T:System.Numerics.BigInteger" /> como una matriz de bytes usando el menor número de bytes posible. Si el valor es cero, devuelve una matriz de un byte cuyo elemento es 0x00.</summary>
      <param name="isUnsigned">
        <see langword="true" /> para usar la codificación sin signo; de lo contrario, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> para escribir los bytes en un orden de bytes big endian; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.OverflowException">Si <paramref name="isUnsigned" /> es <see langword="true" /> y <see cref="P:System.Numerics.BigInteger.Sign" /> es negativo.</exception>
      <returns>Valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual convertido en una matriz de bytes.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente.</summary>
      <returns>Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.IFormatProvider)">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente usando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual en el formato especificado por el parámetro <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String)">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente con el formato especificado.</summary>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
      <returns>Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual en el formato especificado por el parámetro <paramref name="format" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor numérico del objeto <see cref="T:System.Numerics.BigInteger" /> actual en su representación de cadena equivalente usando el formato especificado y la información de formato específica de la referencia cultural.</summary>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
      <returns>Representación de cadena del valor <see cref="T:System.Numerics.BigInteger" /> actual, tal como la especifican los parámetros <paramref name="format" /> y <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryFormat(System.Span{System.Char},System.Int32@,System.ReadOnlySpan{System.Char},System.IFormatProvider)">
      <summary>Aplica formato de intervalo de caracteres a esta instancia de entero grande.</summary>
      <param name="destination">Intervalo de caracteres en el que se va a escribir esta instancia.</param>
      <param name="charsWritten">Cuando el método termina de ejecutarse, contiene la longitud del intervalo en número de caracteres.</param>
      <param name="format">Intervalo de solo lectura de caracteres que especifica el formato de la operación de formato.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> si la operación de formato se realiza correctamente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Intenta convertir la representación en forma de cadena de un número en su equivalente <see cref="T:System.Numerics.BigInteger" /> y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <param name="value">Representación de un número como un intervalo de solo lectura de caracteres.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="value" />. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="value" />.</param>
      <param name="result">Cuando este método vuelve, contiene el equivalente <see cref="T:System.Numerics.BigInteger" /> al número contenido en <paramref name="value" />, o <see cref="P:System.Numerics.BigInteger.Zero" /> si se produjo un error en la conversión. Se produce un error de conversión si el parámetro <paramref name="value" /> es un intervalo de caracteres vacío o no tiene un formato conforme con <paramref name="style" />. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
  
o bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <returns>
        <see langword="true" /> si <paramref name="value" /> se convirtió correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.ReadOnlySpan{System.Char},System.Numerics.BigInteger@)">
      <summary>Intenta convertir la representación de un número incluido en el intervalo de caracteres de solo lectura especificado en su equivalente <see cref="T:System.Numerics.BigInteger" /> y devuelve un valor que indica si la conversión se ha realizado correctamente.</summary>
      <param name="value">Representación de un número como un intervalo de solo lectura de caracteres.</param>
      <param name="result">Cuando este método vuelve, contiene el equivalente <see cref="T:System.Numerics.BigInteger" /> al número contenido en <paramref name="value" />, o cero (0) si se produce un error en la conversión. Se produce un error de conversión si el parámetro <paramref name="value" /> es un intervalo de caracteres vacío o no tiene el formato correcto. Este parámetro se pasa sin inicializar.</param>
      <returns>
        <see langword="true" /> si <paramref name="value" /> se convirtió correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)">
      <summary>Intenta convertir la representación de cadena de un número con un estilo específico y un formato específico de la referencia cultural en su equivalente de <see cref="T:System.Numerics.BigInteger" /> y devuelve un valor que indica si la conversión fue correcta.</summary>
      <param name="value">Representación de cadena de un número. La cadena se interpreta usando el estilo especificado por <paramref name="style" />.</param>
      <param name="style">Combinación bit a bit de los valores de enumeración que indica los elementos de estilo que pueden estar presentes en <paramref name="value" />. Un valor que se especifica de forma habitual es <see cref="F:System.Globalization.NumberStyles.Integer" />.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural acerca de <paramref name="value" />.</param>
      <param name="result">Cuando este método vuelve, contiene el equivalente <see cref="T:System.Numerics.BigInteger" /> al número contenido en <paramref name="value" />, o <see cref="P:System.Numerics.BigInteger.Zero" /> si se produjo un error en la conversión. Se produce un error en la conversión si el parámetro <paramref name="value" /> es <see langword="null" /> o no tiene un formato conforme a <paramref name="style" />. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="style" /> no es un valor <see cref="T:System.Globalization.NumberStyles" />.  
  
o bien 
 <paramref name="style" /> incluye la marca <see cref="F:System.Globalization.NumberStyles.AllowHexSpecifier" /> o <see cref="F:System.Globalization.NumberStyles.HexNumber" /> junto con otro valor.</exception>
      <returns>
        <see langword="true" /> si el parámetro <paramref name="value" /> se convierte correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)">
      <summary>Intenta convertir la representación en forma de cadena de un número en su equivalente <see cref="T:System.Numerics.BigInteger" /> y devuelve un valor que indica si la conversión tuvo éxito.</summary>
      <param name="value">Representación de cadena de un número.</param>
      <param name="result">Cuando este método vuelve, contiene el equivalente <see cref="T:System.Numerics.BigInteger" /> al número contenido en <paramref name="value" />, o cero (0) si se produce un error en la conversión. Se produce un error en la conversión si el parámetro <paramref name="value" /> es <see langword="null" /> o no tiene el formato correcto. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> es <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si <paramref name="value" /> se convirtió correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.BigInteger.TryWriteBytes(System.Span{System.Byte},System.Int32@,System.Boolean,System.Boolean)">
      <summary>Copia el valor de este objeto <see cref="T:System.Numerics.BigInteger" /> como bytes de complemento a dos little endian usando el menor número de bytes posible. Si el valor es cero, se genera un byte cuyo elemento es 0x00.</summary>
      <param name="destination">Intervalo de destino en el que se deben escribir los bytes resultantes.</param>
      <param name="bytesWritten">Número de bytes escritos en <paramref name="destination" />.</param>
      <param name="isUnsigned">
        <see langword="true" /> para usar la codificación sin signo; de lo contrario, <see langword="false" />.</param>
      <param name="isBigEndian">
        <see langword="true" /> para escribir los bytes en un orden de bytes big endian; de lo contrario, <see langword="false" />.</param>
      <exception cref="T:System.OverflowException">
        <paramref name="isUnsigned" /> es <see langword="true" /> y <see cref="P:System.Numerics.BigInteger.Sign" /> es negativo.</exception>
      <returns>
        <see langword="true" /> si los bytes caben en <paramref name="destination" />; <see langword="false" /> si no se pueden escribir todos los bytes debido a la falta de espacio.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsEven">
      <summary>Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es un número par.</summary>
      <returns>Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es un número par; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsOne">
      <summary>Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es <see cref="P:System.Numerics.BigInteger.One" />.</summary>
      <returns>Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es <see cref="P:System.Numerics.BigInteger.One" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsPowerOfTwo">
      <summary>Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es una potencia de dos.</summary>
      <returns>Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es una potencia de dos; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.IsZero">
      <summary>Indica si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> actual es <see cref="P:System.Numerics.BigInteger.Zero" />.</summary>
      <returns>Es <see langword="true" /> si el valor del objeto <see cref="T:System.Numerics.BigInteger" /> es <see cref="P:System.Numerics.BigInteger.Zero" />; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.MinusOne">
      <summary>Obtiene un valor que representa menos uno (-1).</summary>
      <returns>Entero cuyo valor es menos uno (-1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.One">
      <summary>Obtiene un valor que representa el número uno (1).</summary>
      <returns>Objeto cuyo valor es uno (1).</returns>
    </member>
    <member name="P:System.Numerics.BigInteger.Sign">
      <summary>Obtiene un número que indica el signo (negativo, positivo o cero) del objeto <see cref="T:System.Numerics.BigInteger" /> actual.</summary>
      <returns>Número que indica el signo del objeto <see cref="T:System.Numerics.BigInteger" />, como se muestra en la tabla siguiente.  
  
 <list type="table"><listheader><term> Number</term><description> Descripción</description></listheader><item><term> -1</term><description> El valor de este objeto es negativo.</description></item><item><term> 0</term><description> El valor de este objeto es 0 (cero).</description></item><item><term> 1</term><description> El valor de este objeto es positivo.</description></item></list></returns>
    </member>
    <member name="P:System.Numerics.BigInteger.Zero">
      <summary>Obtiene un valor que representa el número 0 (cero).</summary>
      <returns>Entero cuyo valor es 0 (cero).</returns>
    </member>
    <member name="T:System.Numerics.Complex">
      <summary>Representa un número complejo.</summary>
    </member>
    <member name="F:System.Numerics.Complex.ImaginaryOne">
      <summary>Devuelve una nueva instancia de <see cref="T:System.Numerics.Complex" /> con un número real igual a cero y un número imaginario igual a uno.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Infinity">
      <summary>Representa un valor infinito como un número complejo.</summary>
    </member>
    <member name="F:System.Numerics.Complex.NaN">
      <summary>Representa una instancia compleja que no es un número (NaN).</summary>
    </member>
    <member name="F:System.Numerics.Complex.One">
      <summary>Devuelve una nueva instancia de <see cref="T:System.Numerics.Complex" /> con un número real igual a uno y un número imaginario igual a cero.</summary>
    </member>
    <member name="F:System.Numerics.Complex.Zero">
      <summary>Devuelve una nueva instancia de <see cref="T:System.Numerics.Complex" /> con un número real igual a cero y un número imaginario igual a cero.</summary>
    </member>
    <member name="M:System.Numerics.Complex.#ctor(System.Double,System.Double)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Numerics.Complex" /> utilizando el valor real y el valor imaginario especificados.</summary>
      <param name="real">Parte real del número complejo.</param>
      <param name="imaginary">Parte imaginaria del número complejo.</param>
    </member>
    <member name="M:System.Numerics.Complex.Abs(System.Numerics.Complex)">
      <summary>Obtiene el valor absoluto (o magnitud) de un número complejo.</summary>
      <param name="value">Número complejo.</param>
      <returns>Valor absoluto de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Acos(System.Numerics.Complex)">
      <summary>Devuelve el ángulo que es el arco coseno del número complejo especificado.</summary>
      <param name="value">Número complejo que representa un coseno.</param>
      <returns>Ángulo, medido en radianes, que es el arco coseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Double,System.Numerics.Complex)">
      <summary>Agrega un número real de doble precisión a un número complejo y devuelve el resultado.</summary>
      <param name="left">El valor real de doble precisión que se va a agregar.</param>
      <param name="right">El valor complejo que se va a agregar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Double)">
      <summary>Agrega un número complejo a un número real de doble precisión y devuelve el resultado.</summary>
      <param name="left">El valor complejo que se va a agregar.</param>
      <param name="right">El valor real de doble precisión que se va a agregar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Suma dos valores complejos y devuelve el resultado.</summary>
      <param name="left">Primer número complejo que se va a sumar.</param>
      <param name="right">Segundo número complejo que se va a sumar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Asin(System.Numerics.Complex)">
      <summary>Devuelve el ángulo que es el arco seno del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Ángulo que es el arco seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Atan(System.Numerics.Complex)">
      <summary>Devuelve el ángulo que es el arco tangente del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Ángulo que es el arco tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)">
      <summary>Calcula el conjugado de un número complejo y devuelve el resultado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Conjugado de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cos(System.Numerics.Complex)">
      <summary>Devuelve el coseno del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Coseno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Cosh(System.Numerics.Complex)">
      <summary>Devuelve el coseno hiperbólico del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Coseno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Double,System.Numerics.Complex)">
      <summary>Divide un número real de doble precisión por un número complejo y devuelve el resultado.</summary>
      <param name="dividend">El número real de doble precisión que se va a dividir.</param>
      <param name="divisor">Número complejo por el cual se va a dividir.</param>
      <returns>Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Double)">
      <summary>Divide un número complejo por un número real de doble precisión y devuelve el resultado.</summary>
      <param name="dividend">Número complejo que se va a dividir.</param>
      <param name="divisor">El número real de doble precisión por el que se va a dividir.</param>
      <returns>Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divide un número complejo por otro y devuelve el resultado.</summary>
      <param name="dividend">Número complejo que se va a dividir.</param>
      <param name="divisor">Número complejo por el cual se va a dividir.</param>
      <returns>Cociente de la división.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Numerics.Complex)">
      <summary>Devuelve un valor que indica si la instancia actual y el número complejo especificado tienen el mismo valor.</summary>
      <param name="value">Número complejo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si este número complejo y <paramref name="value" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Equals(System.Object)">
      <summary>Devuelve un valor que indica si la instancia actual y un objeto especificado tienen el mismo valor.</summary>
      <param name="obj">Objeto que se va a comparar.</param>
      <returns>Es <see langword="true" /> si el parámetro <paramref name="obj" /> es un objeto <see cref="T:System.Numerics.Complex" /> o un tipo capaz de realizar una conversión implícita a un objeto <see cref="T:System.Numerics.Complex" />, y su valor es igual al valor del objeto <see cref="T:System.Numerics.Complex" /> actual; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Exp(System.Numerics.Complex)">
      <summary>Devuelve un <see langword="e" /> elevado a la potencia especificada por un número complejo.</summary>
      <param name="value">Número complejo que especifica una potencia.</param>
      <returns>Número <see langword="e" /> elevado a la potencia <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)">
      <summary>Crea un número complejo a partir de las coordenadas polares de un punto.</summary>
      <param name="magnitude">Magnitud, que es la distancia del origen (la intersección de los ejes X e Y) al número.</param>
      <param name="phase">Fase, que es el ángulo desde la línea al eje horizontal, medido en radianes.</param>
      <returns>Número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.GetHashCode">
      <summary>Devuelve el código hash del objeto <see cref="T:System.Numerics.Complex" /> actual.</summary>
      <returns>Código hash de un entero de 32 bits con signo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsFinite(System.Numerics.Complex)">
      <summary>Determina si el número complejo especificado es limitado.</summary>
      <param name="value">Número complejo.</param>
      <returns>
        <see langword="true" /> si la parte real y la imaginaria son limitadas (cero, no normal o normal); de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsInfinity(System.Numerics.Complex)">
      <summary>Devuelve un valor que indica si el número complejo especificado se evalúa como infinito.</summary>
      <param name="value">Número complejo.</param>
      <returns>
        <see langword="true" /> si la parte real o la imaginaria son <see cref="F:System.Double.PositiveInfinity" /> o <see cref="F:System.Double.NegativeInfinity" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.IsNaN(System.Numerics.Complex)">
      <summary>Devuelve un valor que indica si la instancia compleja especificada no es un número (NaN).</summary>
      <param name="value">Número complejo.</param>
      <returns>
        <see langword="true" /> si el valor especificado no es limitado ni infinito; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex)">
      <summary>Devuelve el logaritmo natural (en la base <see langword="e" />) del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Logaritmo natural (en la base <see langword="e" />) de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)">
      <summary>Devuelve el logaritmo del número complejo especificado en la base especificada.</summary>
      <param name="value">Número complejo.</param>
      <param name="baseValue">Base del logaritmo.</param>
      <returns>Logaritmo de <paramref name="value" /> en la base <paramref name="baseValue" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Log10(System.Numerics.Complex)">
      <summary>Devuelve el logaritmo en la base 10 del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Logaritmo en base 10 de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Double,System.Numerics.Complex)">
      <summary>Devuelve el producto de un número real de doble precisión y un número complejo.</summary>
      <param name="left">El número real de doble precisión que se va a multiplicar.</param>
      <param name="right">El número complejo que se va a multiplicar.</param>
      <returns>Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Double)">
      <summary>Devuelve el producto de un número complejo y un número real de doble precisión.</summary>
      <param name="left">El número complejo que se va a multiplicar.</param>
      <param name="right">El número real de doble precisión que se va a multiplicar.</param>
      <returns>Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Devuelve el producto de dos números complejos.</summary>
      <param name="left">Primer número complejo que se va a multiplicar.</param>
      <param name="right">Segundo número complejo que se va a multiplicar.</param>
      <returns>Producto de los parámetros <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Negate(System.Numerics.Complex)">
      <summary>Devuelve el inverso aditivo de un número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Resultado de multiplicar por -1 los componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Double,System.Numerics.Complex)">
      <summary>Agrega un número real de doble precisión a un número complejo.</summary>
      <param name="left">El valor real de doble precisión que se va a agregar.</param>
      <param name="right">El valor complejo que se va a agregar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" /> como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Double)">
      <summary>Agrega un número complejo a un número real de doble precisión.</summary>
      <param name="left">El valor complejo que se va a agregar.</param>
      <param name="right">El valor real de doble precisión que se va a agregar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" /> como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Suma dos números complejos.</summary>
      <param name="left">El primer valor complejo que se va a agregar.</param>
      <param name="right">El segundo valor complejo que se va a agregar.</param>
      <returns>La suma de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Double,System.Numerics.Complex)">
      <summary>Divide un número real de doble precisión especificado por un número complejo especificado.</summary>
      <param name="left">El valor real de doble precisión que se va a dividir.</param>
      <param name="right">El valor complejo por el que se va a dividir.</param>
      <returns>El resultado de dividir <paramref name="left" /> por <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Double)">
      <summary>Divide un número complejo especificado por un número real de doble precisión especificado.</summary>
      <param name="left">El valor complejo que se va a dividir.</param>
      <param name="right">El valor real de doble precisión por el que se va a dividir.</param>
      <returns>El resultado de dividir <paramref name="left" /> por <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Divide el número complejo especificado por otro.</summary>
      <param name="left">El valor complejo que se va a dividir.</param>
      <param name="right">El valor complejo por el que se va a dividir.</param>
      <returns>Resultado de dividir <paramref name="left" /> entre <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Devuelve un valor que indica si dos números complejos son iguales.</summary>
      <param name="left">Primer número complejo que se va a comparar.</param>
      <param name="right">Segundo número complejo que se va a comparar.</param>
      <returns>Es <see langword="true" /> si los parámetros <paramref name="left" /> y <paramref name="right" /> tienen el mismo valor; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex">
      <summary>Define una conversión explícita de un valor <see cref="T:System.Decimal" /> a un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Número complejo con un componente real igual a <paramref name="value" /> y un componente imaginario igual a cero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex">
      <summary>Define una conversión explícita de un valor <see cref="T:System.Numerics.BigInteger" /> a un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Número complejo con un componente real igual a <paramref name="value" /> y un componente imaginario igual a cero.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un byte sin signo en un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un número de punto flotante de precisión doble en un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un entero de 16 bits con signo en un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un entero de 32 bits con signo en un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un entero de 64 bits con signo en un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un byte con signo en un número complejo.   
           
Esta API no es conforme a CLS.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un número de punto flotante de precisión sencilla en un número complejo.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un entero de 16 bits sin signo en un número complejo.   
           
Esta API no es conforme a CLS.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un entero de 32 bits sin signo en un número complejo.   
           
Esta API no es conforme a CLS.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex">
      <summary>Define una conversión implícita de un entero de 64 bits sin signo en un número complejo.   
           
Esta API no es conforme a CLS.</summary>
      <param name="value">Valor que se va a convertir en un número complejo.</param>
      <returns>Objeto que contiene el valor del parámetro <paramref name="value" /> como número real y cero como número imaginario.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Devuelve un valor que indica si dos números complejos no son iguales.</summary>
      <param name="left">Primer valor que se va a comparar.</param>
      <param name="right">Segundo valor que se va a comparar.</param>
      <returns>
        <see langword="true" /> si <paramref name="left" /> y <paramref name="right" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Double,System.Numerics.Complex)">
      <summary>Multiplica un número real de doble precisión especificado por un número complejo especificado.</summary>
      <param name="left">El valor real de doble precisión que se va a multiplicar.</param>
      <param name="right">El valor complejo que se va a multiplicar.</param>
      <returns>El producto de <paramref name="left" /> y <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Double)">
      <summary>Multiplica el número complejo especificado por un número real de doble precisión especificado.</summary>
      <param name="left">El valor complejo que se va a multiplicar.</param>
      <param name="right">El valor real de doble precisión que se va a multiplicar.</param>
      <returns>El producto de <paramref name="left" /> y <paramref name="right" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Multiplica los dos números complejos especificados.</summary>
      <param name="left">El primer valor complejo que se va a multiplicar.</param>
      <param name="right">El segundo valor complejo que se va a multiplicar.</param>
      <returns>Producto de <paramref name="left" /> y <paramref name="right" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Double,System.Numerics.Complex)">
      <summary>Resta un número complejo a un número real de doble precisión.</summary>
      <param name="left">El valor real de doble precisión al que se va a restar (minuendo).</param>
      <param name="right">El valor complejo que se va a restar (sustraendo).</param>
      <returns>El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Double)">
      <summary>Resta un número real de doble precisión a un número complejo.</summary>
      <param name="left">El valor complejo del que se va a restar (minuendo).</param>
      <param name="right">El valor real de doble precisión que se va a restar (sustraendo).</param>
      <returns>El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Resta un número complejo de otro número complejo.</summary>
      <param name="left">Valor del que se va a restar (minuendo).</param>
      <param name="right">Valor que se va a restar (sustraendo).</param>
      <returns>Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)">
      <summary>Devuelve el inverso aditivo de un número complejo especificado.</summary>
      <param name="value">Valor que se va a negar.</param>
      <returns>Resultado de multiplicar por -1 los componentes <see cref="P:System.Numerics.Complex.Real" /> e <see cref="P:System.Numerics.Complex.Imaginary" /> del parámetro <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)">
      <summary>Devuelve un número complejo especificado elevado a la potencia indicada por un número de punto flotante de precisión doble.</summary>
      <param name="value">Número complejo que se va a elevar a una potencia.</param>
      <param name="power">Número de punto flotante de precisión doble que especifica una potencia.</param>
      <returns>Número complejo <paramref name="value" /> elevado a la potencia indicada por <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Devuelve el número complejo especificado elevado a la potencia indicada por un número complejo.</summary>
      <param name="value">Número complejo que se va a elevar a una potencia.</param>
      <param name="power">Número complejo que especifica una potencia.</param>
      <returns>Número complejo <paramref name="value" /> elevado a la potencia indicada por <paramref name="power" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)">
      <summary>Devuelve el inverso multiplicativo de un número complejo.</summary>
      <param name="value">Número complejo.</param>
      <returns>Recíproco de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sin(System.Numerics.Complex)">
      <summary>Devuelve el seno del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Seno de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sinh(System.Numerics.Complex)">
      <summary>Devuelve el seno hiperbólico del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Seno hiperbólico de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)">
      <summary>Devuelve la raíz cuadrada del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Raíz cuadrada de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Double,System.Numerics.Complex)">
      <summary>Resta un número complejo a un número real de doble precisión y devuelve el resultado.</summary>
      <param name="left">El valor real de doble precisión al que se va a restar (minuendo).</param>
      <param name="right">El valor complejo que se va a restar (sustraendo).</param>
      <returns>El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Double)">
      <summary>Resta un número real de doble precisión a un número complejo y devuelve el resultado.</summary>
      <param name="left">El valor complejo del que se va a restar (minuendo).</param>
      <param name="right">El valor real de doble precisión que se va a restar (sustraendo).</param>
      <returns>El resultado de restar <paramref name="right" /> a <paramref name="left" />, como un número complejo.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)">
      <summary>Resta un número complejo de otro y devuelve el resultado.</summary>
      <param name="left">Valor del que se va a restar (minuendo).</param>
      <param name="right">Valor que se va a restar (sustraendo).</param>
      <returns>Resultado de restar <paramref name="right" /> de <paramref name="left" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tan(System.Numerics.Complex)">
      <summary>Devuelve la tangente del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Tangente de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.Tanh(System.Numerics.Complex)">
      <summary>Devuelve la tangente hiperbólica del número complejo especificado.</summary>
      <param name="value">Número complejo.</param>
      <returns>Tangente hiperbólica de <paramref name="value" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString">
      <summary>Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano.</summary>
      <returns>Representación de cadena de la instancia actual en formato cartesiano.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.IFormatProvider)">
      <summary>Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano utilizando la información de formato específica de la referencia cultural indicada.</summary>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <returns>Representación de cadena de la instancia actual en formato cartesiano, tal como especifica <paramref name="provider" />.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String)">
      <summary>Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano utilizando el formato especificado para la parte real y la parte imaginaria.</summary>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
      <returns>Representación de cadena de la instancia actual en formato cartesiano.</returns>
    </member>
    <member name="M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)">
      <summary>Convierte el valor del actual número complejo a su representación de cadena equivalente en formato cartesiano utilizando el formato especificado y la información de formato específica de la referencia cultural indicada para la parte real y la parte imaginaria.</summary>
      <param name="format">Cadena de formato numérico estándar o personalizada.</param>
      <param name="provider">Objeto que proporciona información de formato específica de la referencia cultural.</param>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> no es una cadena de formato válido.</exception>
      <returns>Representación de cadena de la instancia actual en formato cartesiano, tal como especifican <paramref name="format" /> y <paramref name="provider" />.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Imaginary">
      <summary>Obtiene el componente imaginario del objeto <see cref="T:System.Numerics.Complex" /> actual.</summary>
      <returns>Componente imaginario de un número complejo.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Magnitude">
      <summary>Obtiene la magnitud (o valor absoluto) de un número complejo.</summary>
      <returns>Magnitud de la instancia actual.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Phase">
      <summary>Obtiene la fase de un número complejo.</summary>
      <returns>Fase de un número complejo, en radianes.</returns>
    </member>
    <member name="P:System.Numerics.Complex.Real">
      <summary>Obtiene el componente real del objeto <see cref="T:System.Numerics.Complex" /> actual.</summary>
      <returns>Componente real de un número complejo.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>메모리 슬롯을 캡슐화하여 로컬 데이터를 저장합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>가비지 컬렉션기에서 <see cref="T:System.LocalDataStoreSlot" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>
        <see cref="T:System.Threading.Thread" />의 아파트 상태를 지정합니다.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <see cref="T:System.Threading.Thread" />는 다중 스레드 아파트를 만들고 해당 아파트에 들어갑니다.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <see cref="T:System.Threading.Thread" />는 단일 스레드 아파트를 만들고 해당 아파트에 들어갑니다.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>
        <see cref="P:System.Threading.Thread.ApartmentState" /> 속성이 설정되어 있지 않은 경우</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>현재 스레드에서 압축된 스택을 설정 및 캡처하기 위한 메서드를 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>현재 스레드에서 압축된 스택을 캡처합니다.</summary>
      <returns>
        <see cref="T:System.Threading.CompressedStack" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>현재 압축 스택의 복사본을 만듭니다.</summary>
      <returns>현재 압축 스택을 나타내는 <see cref="T:System.Threading.CompressedStack" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>현재 스레드의 압축된 스택을 가져옵니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출 체인에 있는 호출자에게 비관리 코드에 액세스할 수 있는 권한이 없는 경우  
  
또는 
<see cref="T:System.Security.Permissions.StrongNameIdentityPermission" />에 대한 요청이 실패한 경우</exception>
      <returns>현재 스레드의 <see cref="T:System.Threading.CompressedStack" />입니다.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>이 실행 컨텍스트의 인스턴스를 다시 만드는 데 필요한 논리 컨텍스트 정보를 사용하여 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 설정합니다.</summary>
      <param name="info">serialization 정보로 채울 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">serialization의 대상 컨텍스트를 나타내는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>현재 스레드의 지정된 압축 스택에서 메서드를 실행합니다.</summary>
      <param name="compressedStack">설정할 <see cref="T:System.Threading.CompressedStack" />입니다.</param>
      <param name="callback">지정한 보안 컨텍스트에서 실행할 메서드를 나타내는 <see cref="T:System.Threading.ContextCallback" />입니다.</param>
      <param name="state">콜백 메서드로 전달할 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>
        <see cref="T:System.Threading.Thread" />에서 실행되는 메서드를 나타냅니다.</summary>
      <param name="obj">스레드 프로시저의 데이터가 들어 있는 개체입니다.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>스레드를 만들고 제어하며, 해당 속성을 설정하고, 상태를 가져옵니다.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>스레드가 시작될 때 개체가 스레드로 전달될 수 있도록 하는 대리자를 지정하여 <see cref="T:System.Threading.Thread" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="start">이 스레드의 실행이 시작될 때 호출될 메서드를 나타내는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" />이(가) <see langword="null" />인 경우.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>스레드가 시작될 때 스레드로 개체가 전달될 수 있도록 하는 대리자를 지정하고 스레드의 최대 스택 크기를 지정하여 <see cref="T:System.Threading.Thread" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="start">이 스레드의 실행이 시작될 때 호출될 메서드를 나타내는 <see cref="T:System.Threading.ParameterizedThreadStart" /> 대리자입니다.</param>
      <param name="maxStackSize">스레드에서 사용할 최대 스택 크기(바이트)입니다. 실행 파일의 헤더에 지정된 기본 최대 스택 크기를 사용하려면 0을 지정합니다.  
  
중요: 부분적으로 신뢰할 수 있는 코드의 경우 <paramref name="maxStackSize" />가 기본 스택 크기보다 크면 무시됩니다. 예외가 throw되지 않습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>
        <see cref="T:System.Threading.Thread" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="start">이 스레드의 실행이 시작될 때 호출될 메서드를 나타내는 <see cref="T:System.Threading.ThreadStart" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>스레드의 최대 스택 크기를 지정하여 <see cref="T:System.Threading.Thread" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="start">이 스레드의 실행이 시작될 때 호출될 메서드를 나타내는 <see cref="T:System.Threading.ThreadStart" /> 대리자입니다.</param>
      <param name="maxStackSize">스레드에서 사용할 최대 스택 크기(바이트)입니다. 실행 파일의 헤더에 지정된 기본 최대 스택 크기를 사용하려면 0을 지정합니다.  
  
중요: 부분적으로 신뢰할 수 있는 코드의 경우 <paramref name="maxStackSize" />가 기본 스택 크기보다 크면 무시됩니다. 예외가 throw되지 않습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>이 메서드가 호출되는 스레드에서 <see cref="T:System.Threading.ThreadAbortException" />을 발생시켜 스레드 종료 프로세스를 시작합니다. 이 메서드를 호출하면 대개 스레드가 종료됩니다.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.Threading.ThreadStateException">중단 중인 스레드가 현재 일시 중단됩니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>이 메서드가 호출되는 스레드에서 <see cref="T:System.Threading.ThreadAbortException" />을 발생시켜 스레드 종료 프로세스를 시작하고, 스레드 종료에 대한 예외 정보를 제공합니다. 이 메서드를 호출하면 대개 스레드가 종료됩니다.</summary>
      <param name="stateInfo">상태와 같이 중단 중인 스레드에서 사용할 수 있는 애플리케이션 관련 정보를 포함하는 개체입니다.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.Threading.ThreadStateException">중단 중인 스레드가 현재 일시 중단됩니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>모든 스레드에 명명되지 않은 데이터 슬롯을 할당합니다. 성능을 향상시키려면 <see cref="T:System.ThreadStaticAttribute" /> 특성으로 표시된 필드를 대신 사용합니다.</summary>
      <returns>모든 스레드에 할당된 명명된 데이터 슬롯입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>모든 스레드에 명명된 데이터 슬롯을 할당합니다. 성능을 향상시키려면 <see cref="T:System.ThreadStaticAttribute" /> 특성으로 표시된 필드를 대신 사용합니다.</summary>
      <param name="name">할당할 데이터 슬롯의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정한 이름의 명명된 데이터 슬롯이 이미 있습니다.</exception>
      <returns>모든 스레드에 할당된 명명된 데이터 슬롯입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>스레드 중단 또는 처리되지 않은 예외로 인해 애플리케이션 도메인의 다른 작업이 손상될 수 있는 코드 영역이 실행될 수 있다는 사실을 호스트에 알립니다.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>관리되는 코드가 현재 실제 운영 체제 스레드의 ID에 종속되는 명령을 실행하려고 한다는 사실을 호스트에 알립니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>현재 스레드에 대해 RCW(런타임 호출 가능 래퍼)의 자동 정리를 해제합니다.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>스레드 중단 또는 처리되지 않은 예외가 현재 작업에만 영향을 주는 코드 영역이 실행될 것임을 호스트에 알립니다.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>관리되는 코드가 현재 실제 운영 체제 스레드의 ID에 종속되는 명령의 실행을 완료했음을 호스트에 알립니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>가비지 컬렉션기에서 <see cref="T:System.Threading.Thread" /> 개체를 회수할 때 리소스가 해제되고 다른 정리 작업이 수행되도록 합니다.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>프로세스의 모든 스레드에 대해 이름과 슬롯 간의 연관을 없앱니다. 성능을 향상시키려면 <see cref="T:System.ThreadStaticAttribute" /> 특성으로 표시된 필드를 대신 사용합니다.</summary>
      <param name="name">해제할 데이터 슬롯의 이름입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>아파트 상태를 나타내는 <see cref="T:System.Threading.ApartmentState" /> 값을 반환합니다.</summary>
      <returns>관리되는 스레드의 아파트 상태를 나타내는 <see cref="T:System.Threading.ApartmentState" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Threading.ApartmentState.Unknown" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>현재 스레드 스택을 캡처하는 데 사용할 수 있는 <see cref="T:System.Threading.CompressedStack" /> 개체를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
      <returns>없음</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId">
      <summary>현재 스레드가 실행 중인 프로세서를 나타내는 데 사용되는 ID를 가져옵니다.</summary>
      <returns>캐시된 프로세서 ID를 나타내는 정수입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>현재 스레드의 도메인 내에서 현재 스레드의 지정된 슬롯에서 값을 검색합니다. 성능을 향상시키려면 <see cref="T:System.ThreadStaticAttribute" /> 특성으로 표시된 필드를 대신 사용합니다.</summary>
      <param name="slot">값을 검색할 원본 <see cref="T:System.LocalDataStoreSlot" />입니다.</param>
      <returns>검색된 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>현재 스레드가 실행 중인 현재 도메인을 반환합니다.</summary>
      <returns>실행 중인 스레드의 현재 애플리케이션 도메인을 나타내는 <see cref="T:System.AppDomain" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>고유한 애플리케이션 도메인 식별자를 반환합니다.</summary>
      <returns>애플리케이션 도메인을 고유하게 식별하는 부호 있는 32비트 정수입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>현재 스레드의 해시 코드를 반환합니다.</summary>
      <returns>정수 해시 코드 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>명명된 데이터 슬롯을 찾습니다. 성능을 향상시키려면 <see cref="T:System.ThreadStaticAttribute" /> 특성으로 표시된 필드를 대신 사용합니다.</summary>
      <param name="name">로컬 데이터 슬롯의 이름입니다.</param>
      <returns>이 스레드에 대해 할당된 <see cref="T:System.LocalDataStoreSlot" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>
        <see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> 스레드 상태에 있는 스레드를 중단합니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출자에게 해당 <see cref="T:System.Security.Permissions.SecurityPermission" />이 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>표준 COM 및 <see langword="SendMessage" /> 펌프를 계속 수행하면서 이 인스턴스가 나타내는 스레드가 종료될 때까지 호출 스레드를 차단합니다.</summary>
      <exception cref="T:System.Threading.ThreadStateException">호출자가 <see cref="F:System.Threading.ThreadState.Unstarted" /> 상태의 스레드에 연결하려고 했습니다.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">스레드가 대기하는 동안 중단되었습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>표준 COM 및 SendMessage 펌프를 계속 수행하면서 이 인스턴스가 나타내는 스레드가 종료되거나 지정된 시간이 경과할 때까지 호출 스레드를 차단합니다.</summary>
      <param name="millisecondsTimeout">스레드가 종료되기를 기다릴 밀리초 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 값이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(밀리초)와 같지 않습니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 시작되지 않았습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" />이 -1보다 작습니다(Timeout.Infinite).</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">스레드가 대기하는 동안 중단되었습니다.</exception>
      <returns>스레드가 종료되면 <see langword="true" />이고, <see langword="false" /> 매개 변수에서 지정한 기간이 경과된 후에도 스레드가 종료되지 않으면 <paramref name="millisecondsTimeout" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>표준 COM 및 SendMessage 펌프를 계속 수행하면서 이 인스턴스가 나타내는 스레드가 종료되거나 지정된 시간이 경과할 때까지 호출 스레드를 차단합니다.</summary>
      <param name="timeout">스레드가 종료되기를 기다리는 시간으로 설정된 <see cref="T:System.TimeSpan" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 값이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />(밀리초)보다 큽니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">호출자가 <see cref="F:System.Threading.ThreadState.Unstarted" /> 상태의 스레드에 연결하려고 했습니다.</exception>
      <returns>스레드가 종료되면 <see langword="true" />이고, <see langword="false" /> 매개 변수에서 지정한 기간이 경과된 후에도 스레드가 종료되지 않으면 <paramref name="timeout" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>다음과 같이 메모리 액세스를 동기화합니다. 현재 스레드를 실행 중인 프로세서는 <see cref="M:System.Threading.Thread.MemoryBarrier" />에 대한 호출 이전의 메모리 액세스가 <see cref="M:System.Threading.Thread.MemoryBarrier" />에 대한 호출 이후의 메모리 액세스 뒤에 실행되는 방식으로 명령을 다시 정렬할 수 없습니다.</summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>현재 스레드에 대해 요청된 <see cref="M:System.Threading.Thread.Abort(System.Object)" />를 취소합니다.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" />가 현재 스레드에서 호출되지 않았습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 현재 스레드에 대한 필수 보안 권한이 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>일시 중단된 스레드를 다시 시작합니다.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 시작되지 않았거나, 중지되었거나, 일시 중단된 상태가 아닙니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 해당 <see cref="T:System.Security.Permissions.SecurityPermission" />이 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>스레드를 시작하기 전에 스레드의 아파트 상태를 설정합니다.</summary>
      <param name="state">새 아파트 상태입니다.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: macOS 및 Linux의 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" />가 잘못된 아파트 상태가 아닙니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 이미 시작되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">아파트 상태가 이미 초기화되었습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>캡처한 <see cref="T:System.Threading.CompressedStack" />을 현재 스레드에 적용합니다.</summary>
      <param name="stack">현재 스레드에 적용할 <see cref="T:System.Threading.CompressedStack" /> 개체입니다.</param>
      <exception cref="T:System.InvalidOperationException">모든 경우</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>해당 스레드의 현재 도메인에 대해 현재 실행 중인 스레드의 지정된 슬롯에서 데이터를 설정합니다. 성능을 향상시키려면 <see cref="T:System.ThreadStaticAttribute" /> 특성으로 표시된 필드를 대신 사용합니다.</summary>
      <param name="slot">값을 설정할 <see cref="T:System.LocalDataStoreSlot" />입니다.</param>
      <param name="data">설정하려는 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>지정된 시간(밀리초) 동안 현재 스레드를 일시 중단합니다.</summary>
      <param name="millisecondsTimeout">스레드가 일시 중단되는 밀리초 수입니다. <paramref name="millisecondsTimeout" /> 인수의 값이 0이면 스레드는 실행할 준비가 된 우선 순위가 같은 스레드에 나머지 시간 간격을 내어 줍니다. 실행할 준비가 된 우선 순위가 같은 스레드가 없으면 현재 스레드의 실행이 일시 중단되지 않습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">시간 제한 값이 음수이며 <see cref="F:System.Threading.Timeout.Infinite" />와 같지 않습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>지정된 시간 동안 현재 스레드를 일시 중단합니다.</summary>
      <param name="timeout">스레드가 일시 중단되는 시간입니다. <paramref name="timeout" /> 인수의 값이 <see cref="F:System.TimeSpan.Zero" />이면 스레드는 실행할 준비가 된 우선 순위가 같은 스레드에 나머지 시간 간격을 내어 줍니다. 실행할 준비가 된 우선 순위가 같은 스레드가 없으면 현재 스레드의 실행이 일시 중단되지 않습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 값이 음수이고 <see cref="F:System.Threading.Timeout.Infinite" />(밀리초)와 같지 않거나 <see cref="F:System.Int32.MaxValue" />(밀리초)보다 큽니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>스레드가 <paramref name="iterations" /> 매개 변수에서 정의하는 시간 동안 대기하도록 합니다.</summary>
      <param name="iterations">스레드 대기 시간을 정의하는 부호 있는 32비트 정수입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>운영 체제에서 현재 인스턴스의 상태를 <see cref="F:System.Threading.ThreadState.Running" />으로 변경하도록 합니다.</summary>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 이미 시작되었습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">이 스레드를 시작하기 위한 메모리가 부족합니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>운영 체제에서 현재 인스턴스의 상태를 <see cref="F:System.Threading.ThreadState.Running" />으로 변경하도록 하며 경우에 따라 스레드가 실행하는 메서드에 사용될 데이터가 포함된 개체를 제공합니다.</summary>
      <param name="parameter">스레드가 실행하는 메서드에 사용될 데이터가 포함된 개체입니다.</param>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 이미 시작되었습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">이 스레드를 시작하기 위한 메모리가 부족합니다.</exception>
      <exception cref="T:System.InvalidOperationException">이 스레드는 <see cref="T:System.Threading.ParameterizedThreadStart" /> 대리자 대신 <see cref="T:System.Threading.ThreadStart" /> 대리자를 사용하여 만들었습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>스레드를 일시 중단하며 스레드가 이미 일시 중단된 경우에는 아무런 효과도 나타나지 않습니다.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 시작 또는 중단되지 않았습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 해당 <see cref="T:System.Security.Permissions.SecurityPermission" />이 없습니다.</exception>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>스레드를 시작하기 전에 스레드의 아파트 상태를 설정합니다.</summary>
      <param name="state">새 아파트 상태입니다.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 이상 및 .NET Core: macOS 및 Linux의 모든 경우에 해당합니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" />가 잘못된 아파트 상태가 아닙니다.</exception>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 시작되어 종료되었거나 스레드가 실행 중인 동안 스레드의 컨덱스트에서 호출이 수행되지 않습니다.</exception>
      <returns>아파트 상태가 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>필드의 값을 읽습니다. 이 값은 프로세서 수나 프로세서 캐시의 상태와 관계없이 컴퓨터의 특정 프로세서에서 마지막으로 쓴 값입니다.</summary>
      <param name="address">읽을 필드입니다.</param>
      <returns>프로세서에서 해당 필드에 쓴 마지막 값입니다.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>이 컴퓨터의 모든 프로세서에서 값을 볼 수 있도록 값을 필드에 즉시 씁니다.</summary>
      <param name="address">값이 쓰여질 필드입니다.</param>
      <param name="value">쓸 값입니다.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>호출 스레드가 현재 프로세서에서 실행할 준비가 되어 있는 다른 스레드에 실행 명령을 내리도록 합니다. 운영 체제에서 실행 명령을 내릴 스레드를 선택합니다.</summary>
      <returns>응용 프로그램에서 다른 스레드로 실행을 전환하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>이 스레드의 아파트 상태를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">이 속성을 올바르지 않은 아파트 상태[단일 스레드 아파트(<see langword="STA" />) 또는 다중 스레드 아파트(<see langword="MTA" />) 이외의 상태]로 설정하려고 했습니다.</exception>
      <returns>
        <see cref="T:System.Threading.ApartmentState" /> 값 중 하나입니다. 초기 값은 <see langword="Unknown" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>현재 스레드에 대한 문화권을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">속성이 <see langword="null" />로 설정됩니다.</exception>
      <exception cref="T:System.InvalidOperationException">.NET Core만 해당: 다른 스레드의 스레드 문화권을 읽거나 쓰는 기능은 지원되지 않습니다.</exception>
      <returns>현재 스레드에 대한 문화권을 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>스레드의 현재 보안 주체(역할 기반 보안용)를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.Security.SecurityException">호출자에게 보안 주체를 설정하는 데 필요한 사용 권한이 없습니다.</exception>
      <returns>보안 컨텍스트를 나타내는 <see cref="T:System.Security.Principal.IPrincipal" /> 값입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>현재 실행 중인 스레드를 가져옵니다.</summary>
      <returns>현재 실행 중인 스레드를 나타내는 <see cref="T:System.Threading.Thread" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>리소스 관리자가 런타임에 문화권 관련 리소스를 찾기 위해 사용하는 현재 문화권을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">속성이 <see langword="null" />로 설정됩니다.</exception>
      <exception cref="T:System.ArgumentException">속성이 리소스 파일을 찾는 데 사용할 수 없는 문화권 이름으로 설정되어 있습니다. 리소스 파일 이름에는 문자, 숫자, 하이픈 또는 밑줄만 포함해야 합니다.</exception>
      <exception cref="T:System.InvalidOperationException">.NET Core만 해당: 다른 스레드의 스레드 문화권을 읽거나 쓰는 기능은 지원되지 않습니다.</exception>
      <returns>현재 문화를 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>현재 스레드의 다양한 컨텍스트 정보를 포함하는 <see cref="T:System.Threading.ExecutionContext" /> 개체를 가져옵니다.</summary>
      <returns>현재 스레드의 컨텍스트 정보를 통합하는 <see cref="T:System.Threading.ExecutionContext" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>현재 스레드의 실행 상태를 나타내는 값을 가져옵니다.</summary>
      <returns>이 스레드가 시작되었으며 정상적으로 종료 또는 중단되지 않았으면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>스레드가 배경 스레드인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 중지되었습니다.</exception>
      <returns>이 스레드가 백그라운드 스레드이거나 백그라운드 스레드가 될 예정이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>스레드가 관리되는 스레드 풀에 속하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이 스레드가 관리되는 스레드 풀에 속하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>현재 관리되는 스레드의 고유 식별자를 가져옵니다.</summary>
      <returns>이 관리되는 스레드의 고유 식별자를 나타내는 정수입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>스레드의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">집합 작업이 요청되었으나 <see langword="Name" /> 속성이 이미 설정되어 있습니다.</exception>
      <returns>스레드의 이름을 포함하는 문자열이며 설정된 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>스레드의 예약 우선 순위를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.Threading.ThreadStateException">스레드가 <see cref="F:System.Threading.ThreadState.Aborted" /> 같은 최종 상태에 도달했습니다.</exception>
      <exception cref="T:System.ArgumentException">Set 작업에 대해 지정된 값이 올바른 <see cref="T:System.Threading.ThreadPriority" /> 값이 아닙니다.</exception>
      <returns>
        <see cref="T:System.Threading.ThreadPriority" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Threading.ThreadPriority.Normal" />입니다.</returns>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>현재 스레드의 상태를 포함하는 값을 가져옵니다.</summary>
      <returns>현재 스레드의 상태를 나타내는 <see cref="T:System.Threading.ThreadState" /> 값 중 하나입니다. 초기 값은 <see cref="F:System.Threading.ThreadState.Unstarted" />입니다.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>
        <see cref="M:System.Threading.Thread.Abort(System.Object)" /> 메서드를 호출할 때 throw되는 예외입니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>스레드 중단에 관련된 애플리케이션 관련 정보가 포함된 개체를 가져옵니다.</summary>
      <returns>애플리케이션 관련 정보가 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>
        <see cref="E:System.Windows.Forms.Application.ThreadException" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>
        <see cref="T:System.Threading.ThreadExceptionEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="t">발생한 <see cref="T:System.Exception" />입니다.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>발생한 <see cref="T:System.Exception" />을 가져옵니다.</summary>
      <returns>발생한 <see cref="T:System.Exception" />입니다.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>
        <see cref="T:System.Windows.Forms.Application" />의 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Threading.ThreadExceptionEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>
        <see cref="T:System.Threading.Thread" />가 대기 상태에서 중단되었을 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>기본 속성을 사용하여 <see cref="T:System.Threading.ThreadInterruptedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Threading.ThreadInterruptedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Threading.ThreadInterruptedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Threading.ThreadInterruptedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>
        <see cref="T:System.Threading.Thread" />의 예약 우선 순위를 지정합니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <see cref="T:System.Threading.Thread" />는 우선 순위가 <see langword="Highest" />인 스레드 뒤와 우선 순위가 <see langword="Normal" />인 스레드 앞에 예약할 수 있습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <see cref="T:System.Threading.Thread" />는 우선 순위가 <see langword="Normal" />인 스레드 뒤와 우선 순위가 <see langword="Lowest" />인 스레드 앞에 예약할 수 있습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <see cref="T:System.Threading.Thread" />는 다른 우선 순위가 할당된 스레드 앞에 예약할 수 있습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <see cref="T:System.Threading.Thread" />는 다른 우선 순위가 할당된 스레드 뒤에 예약할 수 있습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <see cref="T:System.Threading.Thread" />는 우선 순위가 <see langword="AboveNormal" />인 스레드 뒤와 우선 순위가 <see langword="BelowNormal" />인 스레드 앞에 예약할 수 있습니다. 스레드에는 기본적으로 <see langword="Normal" /> 우선 순위가 할당됩니다.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>
        <see cref="T:System.Threading.Thread" />에서 실행되는 메서드를 나타냅니다.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>내부 운영 체제 스레드가 사용자 코드를 실행할 수 없는 상태로 시작된 후 관리되는 스레드에서 실패가 발생한 경우에 throw되는 예외입니다.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>
        <see cref="T:System.Threading.Thread" />의 실행 상태를 지정합니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>스레드 상태에 <see cref="F:System.Threading.ThreadState.AbortRequested" />가 포함되어 있고 스레드가 작동하지 않지만 상태가 아직 <see cref="F:System.Threading.ThreadState.Stopped" />로 변경되지 않았습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>스레드에 <see cref="M:System.Threading.Thread.Abort(System.Object)" /> 메서드가 호출되었지만 해당 스레드는 자신을 종결시키려는 보류된 <see cref="T:System.Threading.ThreadAbortException" />을 받지 못했습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>해당 스레드는 전경 스레드와 반대인 배경 스레드로 실행됩니다. 이 상태는 <see cref="P:System.Threading.Thread.IsBackground" /> 속성을 설정하여 제어합니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>스레드가 시작되었고 아직 중지되지 않았습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>스레드가 중지되었습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>스레드를 중지하도록 요청했습니다. 이는 내부 전용입니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>스레드가 일시 중단되었습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>스레드를 일시 중단하도록 요청하고 있습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>스레드에 <see cref="M:System.Threading.Thread.Start" /> 메서드가 호출되지 않았습니다.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>스레드가 차단되었습니다. <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> 또는 <see cref="M:System.Threading.Thread.Join" />를 호출하거나, <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> 또는 <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />를 호출하여 잠금을 허용하거나, <see cref="T:System.Threading.ManualResetEvent" />와 같은 스레드 동기화 개체에서 대기하는 결과가 발생할 수 있습니다.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>
        <see cref="T:System.Threading.Thread" />가 메서드 호출에 대한 잘못된 <see cref="P:System.Threading.Thread.ThreadState" />인 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>기본 속성을 사용하여 <see cref="T:System.Threading.ThreadStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Threading.ThreadStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Threading.ThreadStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Threading.ThreadStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외의 원인인 예외입니다. <paramref name="innerException" /> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
  </members>
</doc>
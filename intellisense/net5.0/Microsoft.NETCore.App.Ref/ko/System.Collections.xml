<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary>부울로 나타나는 간단한 비트 값 배열을 관리합니다. 여기에서 <see langword="true" />는 비트가 설정(1)되었음을 나타내고 <see langword="false" />는 비트가 해제(0)되었음을 나타냅니다.</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary>지정한 부울 배열에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values">복사할 부울 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" />이(가) <see langword="null" />인 경우.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary>지정한 바이트 배열에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bytes">복사할 값을 포함하는 바이트 배열로, 각 바이트는 8개의 연속 비트를 나타냅니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bytes" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="bytes" />의 길이가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary>지정한 <see cref="T:System.Collections.BitArray" />에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bits">복사할 <see cref="T:System.Collections.BitArray" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bits" />이(가) <see langword="null" />인 경우.</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary>지정한 비트 값을 보유할 수 있는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다. 이러한 값은 초기에 <see langword="false" />로 설정됩니다.</summary>
      <param name="length">새 <see cref="T:System.Collections.BitArray" />에 있는 비트 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary>지정한 비트 값을 보유할 수 있는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다. 이러한 값은 초기에 지정된 값으로 설정됩니다.</summary>
      <param name="length">새 <see cref="T:System.Collections.BitArray" />에 있는 비트 값입니다.</param>
      <param name="defaultValue">각 비트에 할당될 부울 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary>지정한 32비트 정수 배열에서 복사된 비트 값을 포함하는 <see cref="T:System.Collections.BitArray" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values">복사할 값을 포함하는 정수 배열로, 각 정수는 32개의 연속 비트를 나타냅니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="values" />의 길이가 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary>현재 <see cref="T:System.Collections.BitArray" /> 개체의 요소와 지정한 배열의 해당 요소에 대해 비트 AND 연산을 수행합니다. 현재 <see cref="T:System.Collections.BitArray" /> 개체는 비트 AND 연산 결과 저장하도록 수정됩니다.</summary>
      <param name="value">비트 AND 연산이 수행될 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />와 현재 <see cref="T:System.Collections.BitArray" />의 요소 수가 서로 다른 경우</exception>
      <returns>비트 AND 작업의 결과 포함하는 배열로, 현재 <see cref="T:System.Collections.BitArray" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary>
        <see cref="T:System.Collections.BitArray" />의 부분 복사본을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" />의 부분 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.BitArray" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.BitArray" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
-또는- 
소스 <see cref="T:System.Collections.BitArray" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
      <exception cref="T:System.InvalidCastException">소스 <see cref="T:System.Collections.BitArray" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary>
        <see cref="T:System.Collections.BitArray" />의 특정 위치에서 비트 값을 가져옵니다.</summary>
      <param name="index">가져올 값의 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
  
-또는- 
 <paramref name="index" />가 <see cref="T:System.Collections.BitArray" />의 요소 수보다 크거나 같은 경우</exception>
      <returns>
        <paramref name="index" /> 위치의 비트 값입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.BitArray" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>전체 <see cref="T:System.Collections.BitArray" />의 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <summary>현재 <see cref="T:System.Collections.BitArray" />의 모든 비트 값을 <paramref name="count" /> 비트만큼 왼쪽으로 이동합니다.</summary>
      <param name="count">각 비트에 대해 이동할 횟수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />가 0보다 작은 경우</exception>
      <returns>현재 <see cref="T:System.Collections.BitArray" />입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary>
        <see langword="true" />로 설정된 요소는 <see langword="false" />로 변경되고 <see langword="false" />로 설정된 요소는 <see langword="true" />로 변경되도록 현재 <see cref="T:System.Collections.BitArray" />에 있는 모든 비트 값을 반전합니다.</summary>
      <returns>반전된 비트 값을 가지는 현재 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary>현재 <see cref="T:System.Collections.BitArray" /> 개체의 요소와 지정한 배열의 해당 요소에 대해 비트 OR 연산을 수행합니다. 현재 <see cref="T:System.Collections.BitArray" /> 개체는 비트 OR 연산 결과를 저장하도록 수정됩니다.</summary>
      <param name="value">비트 OR 연산이 수행될 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />와 현재 <see cref="T:System.Collections.BitArray" />의 요소 수가 서로 다른 경우</exception>
      <returns>비트 OR 작업의 결과 포함하는 배열로, 현재 <see cref="T:System.Collections.BitArray" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <summary>현재 <see cref="T:System.Collections.BitArray" />의 모든 비트 값을 <paramref name="count" /> 비트만큼 오른쪽으로 이동합니다.</summary>
      <param name="count">각 비트에 대해 이동할 횟수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" />가 0보다 작은 경우</exception>
      <returns>현재 <see cref="T:System.Collections.BitArray" />입니다.</returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Collections.BitArray" />의 특정 위치에 있는 비트를 지정한 값으로 설정합니다.</summary>
      <param name="index">설정할 비트의 0부터 시작하는 인덱스입니다.</param>
      <param name="value">비트에 할당될 부울 값입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
  
-또는- 
 <paramref name="index" />가 <see cref="T:System.Collections.BitArray" />의 요소 수보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary>
        <see cref="T:System.Collections.BitArray" />의 모든 비트를 지정한 값으로 설정합니다.</summary>
      <param name="value">모든 비트에 할당할 부울 값입니다.</param>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary>현재 <see cref="T:System.Collections.BitArray" /> 개체의 요소와 지정한 배열의 해당 요소에 대해 배타적 비트 OR 연산을 수행합니다. 현재 <see cref="T:System.Collections.BitArray" /> 개체는 배타적 비트 OR 연산 결과를 저장하도록 수정됩니다.</summary>
      <param name="value">배타적 비트 OR 연산이 수행될 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />와 현재 <see cref="T:System.Collections.BitArray" />의 요소 수가 서로 다른 경우</exception>
      <returns>배타적 비트 OR 작업의 결과 포함하는 배열로, 현재 <see cref="T:System.Collections.BitArray" /> 개체에 대한 참조입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary>
        <see cref="T:System.Collections.BitArray" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary>
        <see cref="T:System.Collections.BitArray" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성은 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary>
        <see cref="T:System.Collections.BitArray" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성은 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary>
        <see cref="T:System.Collections.BitArray" />의 특정 위치에서 비트 값을 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 값의 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
  
-또는- 
 <paramref name="index" />가 <see cref="P:System.Collections.BitArray.Count" />보다 크거나 같은 경우</exception>
      <returns>
        <paramref name="index" /> 위치의 비트 값입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary>
        <see cref="T:System.Collections.BitArray" />의 요소 수를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">속성이 0보다 작은 값으로 설정된 경우</exception>
      <returns>
        <see cref="T:System.Collections.BitArray" />의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary>
        <see cref="T:System.Collections.BitArray" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.BitArray" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
      <summary>제네릭 컬렉션에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <summary>
        <paramref name="dictionary" />에서 지정된 <paramref name="key" />과(와) 연결된 값을 가져오려고 시도합니다.</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 형식의 키와 <typeparamref name="TValue" /> 형식의 값을 사용하는 사전입니다.</param>
      <param name="key">가져올 값의 키입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <typeparamref name="TValue" /> 인스턴스입니다. 메서드가 성공적으로 실행되면 반환되는 개체는 지정된 <paramref name="key" />과(와) 연결된 값입니다. 메서드가 실패하면 <typeparamref name="TValue" />에 대한 <see langword="default" /> 값을 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <summary>지정된 키에 연결된 값을 <paramref name="dictionary" />에서 가져오려고 시도합니다.</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 형식의 키와 <typeparamref name="TValue" /> 형식의 값을 사용하는 사전입니다.</param>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="defaultValue">
        <paramref name="dictionary" />에서 지정된 <paramref name="key" />과(와) 연결된 값을 찾을 수 없는 경우 반환할 기본값입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <typeparamref name="TValue" /> 인스턴스입니다. 메서드가 성공적으로 실행되면 반환되는 개체는 지정된 <paramref name="key" />과(와) 연결된 값입니다. 메서드가 실패하면 <paramref name="defaultValue" />을(를) 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <summary>
        <paramref name="dictionary" />에서 지정된 <paramref name="key" />을(를) 사용하여 값 제거하려고 시도합니다.</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 형식의 키와 <typeparamref name="TValue" /> 형식의 값을 사용하는 사전입니다.</param>
      <param name="key">제거할 값의 키입니다.</param>
      <param name="value">이 메서드가 <see langword="true" />을(를) 반환하면 제거되는 값이지만, 이 메서드가 <see langword="false" />을(를) 반환하면 <typeparamref name="TValue" />의 <see langword="default" /> 값입니다.</param>
      <typeparam name="TKey">
        <paramref name="dictionary" />에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">
        <paramref name="dictionary" />의 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <returns>값을 지정된 <paramref name="key" />이(가) 있는 <paramref name="dictionary" />에서 찾은 경우 <see langword="true" />이고, <paramref name="dictionary" />에서 지정된 <paramref name="key" />과(와) 연결된 값을 찾을 수 없는 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>지정된 <paramref name="key" /> 및 <paramref name="value" />을(를) <paramref name="dictionary" />에 추가하려고 시도합니다.</summary>
      <param name="dictionary">
        <typeparamref name="TKey" /> 형식의 키와 <typeparamref name="TValue" /> 형식의 값을 사용하는 사전입니다.</param>
      <param name="key">추가할 값의 키입니다.</param>
      <param name="value">추가할 값입니다.</param>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="key" /> 및 <paramref name="value" />을(를) <paramref name="dictionary" />에 추가한 경우 <see langword="true" />이고, <paramref name="dictionary" />에 지정된 <paramref name="key" />이(가) 이미 포함된 경우 <see langword="false" />이며 이 경우 아무것도 추가되지 않습니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary>
        <see cref="T:System.Collections.Generic.IComparer`1" /> 제네릭 인터페이스의 구현에 대한 기본 클래스를 제공합니다.</summary>
      <typeparam name="T">비교할 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.Comparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary>파생된 클래스에서 재정의된 경우 같은 형식의 두 개체를 비교한 다음 한 개체가 다른 개체보다 작은지, 큰지 또는 두 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="x">비교할 첫 번째 개체입니다.</param>
      <param name="y">비교할 두 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="T" /> 형식이 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스나 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</exception>
      <returns>다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값</term><description> 의미</description></listheader><item><term> 0보다 작음</term><description><paramref name="x" />가 <paramref name="y" />보다 작은 경우</description></item><item><term> 0</term><description><paramref name="x" />가 <paramref name="y" />와 같습니다.</description></item><item><term> 0보다 큼</term><description><paramref name="x" />가 <paramref name="y" />보다 큰 경우</description></item></list></returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary>지정된 비교를 사용하여 비교자를 만듭니다.</summary>
      <param name="comparison">사용할 비교입니다.</param>
      <returns>새 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>두 개체를 비교하여 한 개체가 다른 개체보다 작거나, 같거나 또는 크다는 것을 나타내는 값을 반환합니다.</summary>
      <param name="x">비교할 첫 번째 개체입니다.</param>
      <param name="y">비교할 두 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 또는 <paramref name="y" />가 <paramref name="T" /> 형식으로 캐스팅할 수 없는 형식인 경우  
  
또는 
 <paramref name="x" />와 <paramref name="y" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스나 <see cref="T:System.IComparable" /> 인터페이스를 구현하지 않는 경우</exception>
      <returns>다음 표와 같이 <paramref name="x" /> 및 <paramref name="y" />의 상대 값을 나타내는 부호 있는 정수입니다.  
  
 <list type="table"><listheader><term> 값</term><description> 의미</description></listheader><item><term> 0보다 작음</term><description><paramref name="x" />가 <paramref name="y" />보다 작은 경우</description></item><item><term> 0</term><description><paramref name="x" />가 <paramref name="y" />와 같습니다.</description></item><item><term> 0보다 큼</term><description><paramref name="x" />가 <paramref name="y" />보다 큰 경우</description></item></list></returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary>제네릭 인수에서 지정한 형식의 기본 정렬 순서 비교자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Comparer`1" />을 상속하고 <paramref name="T" /> 형식에 대한 정렬 순서 비교자의 역할을 하는 개체입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary>키와 값의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary>기본 초기 용량을 갖고 있고 키 형식에 대한 기본 같음 비교자를 사용하는 비어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.Dictionary`2" />에서 복사된 요소를 포함하고 키 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.IDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정한 <see cref="T:System.Collections.Generic.Dictionary`2" />에서 복사된 요소를 포함하고 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" />을 사용하는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>지정된 <see cref="T:System.Collections.Generic.IEnumerable`1" />에서 복사한 요소가 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">요소가 새 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 복사되는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정한 <see cref="T:System.Collections.Generic.Dictionary`2" />에서 복사된 요소를 포함하고 지정한 <see cref="T:System.Collections.Generic.IEnumerable`1" />을 사용하는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">요소가 새 <see cref="T:System.Collections.Generic.IEnumerable`1" />에 복사되는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</param>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>기본 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.Dictionary`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary>지정한 초기 용량을 갖고 있고 키 형식에 대한 기본 같음 비교자를 사용하는 비어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.Dictionary`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary>지정한 키와 값을 사전에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.Dictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 모든 키와 값을 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 지정한 키가 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.Dictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />에 지정한 값이 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.Dictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary>사전에서 해당 백업 스토리지를 더 이상 확장하지 않고 지정된 수의 항목까지 보유할 수 있는지 확인합니다.</summary>
      <param name="capacity">항목 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우.</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 현재 용량입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Dictionary`2" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.Dictionary`2" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 연결되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.Dictionary`2" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 지정한 키가 있는 값을 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <returns>요소를 성공적으로 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 <see cref="T:System.Collections.Generic.Dictionary`2" />에 없는 경우 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 지정된 키를 갖는 값을 제거하고, <paramref name="value" /> 매개 변수에 요소를 복사합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <param name="value">제거된 요소입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <returns>요소를 성공적으로 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>지정한 키가 있는 <see cref="T:System.Collections.Generic.ICollection`1" />에 지정한 값을 추가합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 추가할 키와 값을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" />의 키는 <see langword="null" />입니다.</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.Dictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 키와 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 찾을 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="keyValuePair" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를  <see cref="T:System.Collections.Generic.KeyValuePair`2" />형식의 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 요소의 대상인 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>사전에서 키와 값을 제거합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 제거할 키와 값을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체입니다.</param>
      <returns>
        <paramref name="keyValuePair" />로 표시된 키와 값을 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="keyValuePair" />가 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우 <see langword="false" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
-또는- 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
-또는- 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
-또는- 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>지정한 키와 값을 사전에 추가합니다.</summary>
      <param name="key">키로 사용할 개체입니다.</param>
      <param name="value">값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
  
-또는- 
 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 값 형식인 <paramref name="TValue" />에 할당할 수 없는 경우  
  
-또는- 
같은 키가 있는 값이 이미 <see cref="T:System.Collections.Generic.Dictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 에 대한 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary>이 사전의 용량을 원래 모든 항목과 함께 초기화되었을 경우의 용량으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary>해당 백업 스토리지를 더 이상 확장하지 않고 지정된 수의 항목을 보유할 수 있도록 이 사전의 용량을 설정합니다.</summary>
      <param name="capacity">새 용량입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 <see cref="T:System.Collections.Generic.Dictionary`2" />보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary>지정된 키와 값을 사전에 추가하려고 시도합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다. <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <returns>사전에 키/값 쌍이 성공적으로 추가되었다면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.Dictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary>사전에 대한 키의 일치 여부를 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Collections.Generic.Dictionary`2" />에 대한 키의 일치 여부를 확인하고 키에 대한 해시 값을 제공하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스 구현입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary>지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 값의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없는 경우</exception>
      <returns>지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 throw하고 set 작업에서 지정한 키가 있는 새 요소를 만듭니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 키를 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>사전이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <paramref name="TKey" /> 형식의 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값을 포함하는 <paramref name="TValue" /> 형식의 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 키가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" />의 값을 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />의 크기가 고정되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키가 있는 값을 가져오거나 설정합니다.</summary>
      <param name="key">가져올 값의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentException">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
  
-또는- 
값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없는 경우</exception>
      <returns>지정한 키와 연결된 값입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.Dictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 값을 포함하는 <see cref="T:System.Collections.Generic.Dictionary`2" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Dictionary`2" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>사전에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Collections.DictionaryEntry" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>열거자의 현재 위치에 있는 요소의 키를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>사전에서 열거자의 현재 위치에 있는 요소의 키입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>열거자의 현재 위치에 있는 요소의 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>사전에서 열거자의 현재 위치에 있는 요소의 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 키 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 키를 반영하는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">해당 키가 새 <see cref="T:System.Collections.Generic.Dictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
      <returns>
        <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 원래 <see cref="T:System.Collections.Generic.ICollection`1" />에 항목이 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />에 포함된 요소의 수입니다.  
  
이 속성 값을 검색하는 것은 O(1) 연산입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2" />의 값 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 값을 반영하는 <see cref="T:System.Collections.Generic.Dictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">해당 값이 새 <see cref="T:System.Collections.Generic.Dictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 throw됩니다.</exception>
      <returns>
        <see langword="true" />이 <paramref name="item" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="item" />가 원래 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary>
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 제네릭 인터페이스의 구현에 대한 기본 클래스를 제공합니다.</summary>
      <typeparam name="T">비교할 개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary>파생 클래스에서 재정의된 경우 <typeparamref name="T" /> 형식의 두 개체가 같은지 여부를 확인합니다.</summary>
      <param name="x">비교할 첫 번째 개체입니다.</param>
      <param name="y">비교할 두 번째 개체입니다.</param>
      <returns>지정한 개체가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary>파생 클래스에서 재정의된 경우 해시 테이블 같은 해시 알고리즘과 데이터 구조의 지정한 개체에 대한 해시 함수의 역할을 합니다.</summary>
      <param name="obj">해시 코드를 가져오는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 형식이 참조 형식이고 <paramref name="obj" />가 <see langword="null" />인 경우</exception>
      <returns>지정한 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>지정한 개체가 같은지 여부를 확인합니다.</summary>
      <param name="x">비교할 첫 번째 개체입니다.</param>
      <param name="y">비교할 두 번째 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="x" /> 또는 <paramref name="y" />가 <typeparamref name="T" /> 형식으로 캐스팅할 수 없는 형식인 경우</exception>
      <returns>지정한 개체가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>지정한 개체의 해시 코드를 반환합니다.</summary>
      <param name="obj">해시 코드가 반환될 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> 형식이 참조 형식이고 <paramref name="obj" />가 <see langword="null" />인 경우  
  
또는 
 <paramref name="obj" />가 <typeparamref name="T" /> 형식으로 캐스팅될 수 없는 형식인 경우</exception>
      <returns>지정한 개체의 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary>제네릭 인수에서 지정한 형식의 기본 같음 비교자를 반환합니다.</summary>
      <returns>
        <typeparamref name="T" /> 형식에 대한 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 클래스의 기본 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>값 집합을 나타냅니다.</summary>
      <typeparam name="T">해시 집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>비어 있으며 집합 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>집합 형식에 대한 기본 같음 비교자를 사용하고 지정된 컬렉션에서 복사한 요소가 들어 있으며 복사된 요소 수를 수용하기에 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">해당 요소가 새 집합에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>집합 형식에 대한 지정된 같음 비교자를 사용하고 지정된 컬렉션에서 복사한 요소가 들어 있으며 복사된 요소 수를 수용하기에 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">해당 요소가 새 집합에 복사되는 컬렉션입니다.</param>
      <param name="comparer">집합의 값을 비교하려면 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하고, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 구현을 사용하려면 <see langword="null" />을(를) 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>비어 있으며 집합 형식에 대한 지정된 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">집합의 값을 비교하려면 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하고, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.EqualityComparer`1" /> 구현을 사용하려면 <see langword="null" />을(를) 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary>비어 있지만 <paramref name="capacity" /> 항목에 대한 공간이 예약되어 있고 집합 형식에 대한 기본 같음 비교자를 사용하는 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.HashSet`1" />의 초기 크기입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>집합 형식에 대해 지정된 같음 비교자를 사용하고 <paramref name="capacity" /> 요소를 수용할 수 있을 만큼 용량이 충분한 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.HashSet`1" />의 초기 크기입니다.</param>
      <param name="comparer">집합의 값을 비교하려면 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하고, 집합 형식에 대한 기본 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 구현을 사용하려면 null(Visual Basic의 경우 Nothing)을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 연결되어 있는 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>지정된 요소를 집합에 추가합니다.</summary>
      <param name="item">집합에 추가할 요소입니다.</param>
      <returns>요소가 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 추가되었으면 <see langword="true" />이고, 요소가 이미 있으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 지정된 요소가 포함되어 있는지 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 찾을 요소입니다.</param>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 지정된 요소가 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" />가 대상 <paramref name="array" />의 길이보다 큰 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 수의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">
        <paramref name="array" />에 복사할 요소 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" />가 대상 <paramref name="array" />의 길이보다 큰 경우  
  
또는 
 <paramref name="count" />가 <paramref name="index" />에서 대상 <paramref name="array" /> 끝까지 사용 가능한 공간보다 큰 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 대한 같음 테스트에 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 대한 전체 같음 테스트에 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary>이 해시 집합이 확장되지 않고도 지정된 수의 요소를 보유할 수 있도록 합니다.</summary>
      <param name="capacity">확보할 최소 용량입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
      <returns>이 인스턴스의 새 용량입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 컬렉션의 모든 요소를 제거합니다.</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 제거할 항목 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 반복되는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 개체에 대한 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 연결되어 있는 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션에 동시에 있는 요소만 포함합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 진 부분 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 진 부분 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 진 상위 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 하위 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 부분 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 지정된 컬렉션의 상위 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />의 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체와 관련된 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 지정된 컬렉션이 공통 요소를 공유하는지 여부를 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 <paramref name="other" />가 최소한 하나의 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에서 지정된 요소를 제거합니다.</summary>
      <param name="item">제거할 요소입니다.</param>
      <returns>요소를 성공적으로 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.HashSet`1" /> 개체에 <paramref name="item" />이 없으면 이 메서드는 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 제거된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 지정된 컬렉션에 같은 요소가 들어 있는지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체가 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션 중 하나에만 있는 요소만 포함합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 용량을 실제로 포함된 요소 수로 설정하고 구현별로 다른 근방 값으로 올림합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary>집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 T의 기본값입니다.</param>
      <returns>검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체를 수정하여 해당 개체와 지정된 컬렉션에 있는 모든 요소를 포함시킵니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.HashSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>집합의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체를 가져옵니다.</summary>
      <returns>집합의 값이 같은지 확인하는 데 사용되는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>집합에 포함된 요소 수를 가져옵니다.</summary>
      <returns>집합에 포함된 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 개체의 요소를 열거합니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> 개체에 사용되는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.HashSet`1" /> 컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소인 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>이중 연결 목록을 나타냅니다.</summary>
      <typeparam name="T">링크된 목록의 요소 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>비어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정한 <see cref="T:System.Collections.Generic.LinkedList`1" />에서 복사된 요소가 포함되어 있고 복사된 요소의 수를 수용하는 충분한 용량을 가지는 <see cref="T:System.Collections.IEnumerable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">요소가 새 <see cref="T:System.Collections.IEnumerable" />에 복사되는 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정한 <see cref="T:System.Collections.Generic.LinkedList`1" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 serialize할 수 있는 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 serialize하는 데 필요한 정보가 포함된 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />와 관련하여 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Collections.Generic.LinkedList`1" />개체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 다음에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="node">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 삽입할 위치 앞에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우</exception>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 다음에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <paramref name="newNode" />를 삽입할 위치 앞에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="newNode" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우  
  
또는 
 <paramref name="newNode" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 앞에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="node">
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 삽입할 위치 뒤에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 추가할 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우</exception>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 지정한 기존 노드 앞에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <paramref name="newNode" />를 삽입할 위치 뒤에 있는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</param>
      <param name="newNode">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="newNode" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우  
  
또는 
 <paramref name="newNode" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 추가할 값입니다.</param>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 시작 위치에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 지정한 값이 포함된 새 노드를 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 추가할 값입니다.</param>
      <returns>
        <paramref name="value" />가 포함된 새 <see cref="T:System.Collections.Generic.LinkedListNode`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에 지정한 새 노드를 추가합니다.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 끝에 추가할 새 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 다른 <see cref="T:System.Collections.Generic.LinkedList`1" />에 속하는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 노드를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>값이 <see cref="T:System.Collections.Generic.LinkedList`1" />에 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="value" />에 있으면 <see cref="T:System.Collections.Generic.LinkedList`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.LinkedList`1" />을 호환되는 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.LinkedList`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>지정한 값이 포함된 첫 번째 노드를 찾습니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 값입니다.</param>
      <returns>지정한 값이 있으면 해당 값이 포함된 첫 번째 <see cref="T:System.Collections.Generic.LinkedListNode`1" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>지정한 값이 포함된 마지막 노드를 찾습니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 찾을 값입니다.</param>
      <returns>지정한 값이 있으면 해당 값이 포함된 마지막 <see cref="T:System.Collections.Generic.LinkedListNode`1" />이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.LinkedList`1" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 관련되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 맨 처음 발견되는 지정된 값을 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 제거할 값입니다.</param>
      <returns>
        <paramref name="value" />가 포함된 요소가 성공적으로 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="value" />가 원래 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 지정된 노드를 제거합니다.</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에서 제거할 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" />가 <see cref="T:System.Collections.Generic.LinkedList`1" />에 없는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 시작 위치에서 노드를 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 끝에서 노드를 제거합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" />가 비어 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 끝에 항목을 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.ICollection`1" />의 끝에 추가할 값입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>링크된 목록을 컬렉션으로 반복하는 열거자를 반환합니다.</summary>
      <returns>링크된 목록을 컬렉션으로 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 실제로 포함된 노드의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에 실제로 포함된 노드의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 첫 번째 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 첫 번째 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 마지막 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />의 마지막 <see cref="T:System.Collections.Generic.LinkedList`1" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.LinkedList`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.LinkedList`1" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 관련되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.LinkedList`1" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 노드를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="T">링크된 목록의 요소 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>지정한 값을 포함하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 포함할 값입니다.</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />이 속하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />이 속하는 <see cref="T:System.Collections.Generic.LinkedListNode`1" />에 대한 참조이거나, <see cref="T:System.Collections.Generic.LinkedListNode`1" />이 링크되어 있지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 다음 노드에 대한 참조이거나, 현재 노드가 <see cref="P:System.Collections.Generic.LinkedList`1.Last" />의 마지막 요소(<see cref="T:System.Collections.Generic.LinkedList`1" />)이면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 이전 노드를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" />의 이전 노드에 대한 참조이거나, 현재 노드가 <see cref="P:System.Collections.Generic.LinkedList`1.First" />의 첫 번째 요소(<see cref="T:System.Collections.Generic.LinkedList`1" />)이면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>노드에 포함된 값을 가져옵니다.</summary>
      <returns>노드에 포함된 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.ValueRef">
      <summary>노드에서 보유한 값에 대한 참조를 가져옵니다.</summary>
      <returns>노드가 보유 한 값에 대 한 참조입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary>인덱스로 액세스할 수 있는 강력한 형식의 개체 목록을 나타냅니다. 목록의 검색, 정렬 및 조작에 사용할 수 있는 메서드를 제공합니다.</summary>
      <typeparam name="T">목록에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">요소가 새 목록에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary>비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.List`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">새 목록에 처음부터 저장할 수 있는 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 가 0보다 작습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary>개체를 <see cref="T:System.Collections.Generic.List`1" />의 끝 부분에 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션의 요소를 <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가합니다.</summary>
      <param name="collection">요소가 <see cref="T:System.Collections.Generic.List`1" />의 끝에 추가되어야 하는 컬렉션입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <paramref name="T" />형식이 참조 형식인 경우 <see langword="null" />인 요소를 포함할 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary>현재 컬렉션에 대한 읽기 전용 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 래퍼를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.Collections.Generic.List`1" />에 대한 읽기 전용 래퍼 역할을 하는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary>기본 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.InvalidOperationException">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
      <returns>
        <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 정렬된 전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
  
또는 
 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
      <returns>
        <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 정렬된 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 요소를 검색하고 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="index">검색할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 범위의 길이입니다.</param>
      <param name="item">찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 나타내지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
      <returns>
        <paramref name="item" />이 있으면 정렬된 <see cref="T:System.Collections.Generic.List`1" />에 있는 <paramref name="item" />의 인덱스(0부터 시작)이고, 그렇지 않으면 <paramref name="item" />보다 큰 다음 요소의 인덱스에 대한 비트 보수인 음수이거나 더 큰 요소가 없는 경우 <see cref="P:System.Collections.Generic.List`1.Count" />의 비트 보수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.List`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary>현재 <see cref="T:System.Collections.Generic.List`1" />의 요소를 다른 형식으로 변환하고 변환된 요소를 포함하는 목록을 반환합니다.</summary>
      <param name="converter">각 요소를 한 형식에서 다른 형식으로 변환하는 <see cref="T:System.Converter`2" /> 대리자입니다.</param>
      <typeparam name="TOutput">대상 배열 요소의 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="converter" />이(가) <see langword="null" />인 경우</exception>
      <returns>현재 <see cref="T:System.Collections.Generic.List`1" />에서 변환된 요소를 포함하는 대상 유형의 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary>대상 배열의 처음부터 시작하여 전체 <see cref="T:System.Collections.Generic.List`1" />을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.List`1" /> 요소 수가 대상 <paramref name="array" />를 포함할 수 있는 요소 수보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.List`1" />을 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.List`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>대상 배열의 지정된 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="index">소스 <see cref="T:System.Collections.Generic.List`1" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.List`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">복사할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="arrayIndex" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" />가 소스 <see cref="T:System.Collections.Generic.List`1" />의 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같습니다.  
  
또는 
소스 <see cref="T:System.Collections.Generic.List`1" />의 <paramref name="index" />부터 끝까지에 포함된 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지의 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소가 <see cref="T:System.Collections.Generic.List`1" />에 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 하나 이상 <see cref="T:System.Collections.Generic.List`1" />에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 처음으로 검색한 요소를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary>지정한 조건자에 정의된 조건과 일치하는 모든 요소를 검색합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 해당 요소를 모두 포함하는 <see cref="T:System.Collections.Generic.List`1" />이고, 그렇지 않으면 빈 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 지정된 인덱스부터 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 인덱스에서 마지막 요소로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex">검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Collections.Generic.List`1" />에서 일치하는 요소 중 첫 번째 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 첫 번째로 나타나는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하고 전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색한 요소를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 조건자에 정의된 조건과 일치하는 요소가 있으면 일치하는 요소 중 마지막 요소이고, 그렇지 않으면 <paramref name="T" /> 형식의 기본값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 지정된 수의 요소가 들어 있고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Generic.List`1" /> 의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="startIndex" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 첫 번째 요소에서 지정된 인덱스로 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="startIndex">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 검색하여 전체 <see cref="T:System.Collections.Generic.List`1" />에서 일치하는 요소 중 마지막 요소의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="match">검색할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <paramref name="match" />에 정의된 조건과 일치하는 요소가 있으면 그 중 마지막 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 각 요소에 대해 지정된 작업을 수행합니다.</summary>
      <param name="action">
        <see cref="T:System.Action`1" />의 각 요소에 대해 수행할 <see cref="T:System.Collections.Generic.List`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">컬렉션의 요소가 수정된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.List`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary>소스 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소에 대한 단순 복사본을 만듭니다.</summary>
      <param name="index">범위가 시작되는 <see cref="T:System.Collections.Generic.List`1" /> 인덱스(0부터 시작)입니다.</param>
      <param name="count">범위의 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
      <returns>소스 <see cref="T:System.Collections.Generic.List`1" />에 있는 일련의 요소에 대한 단순 복사본입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary>지정된 개체를 검색하고, 전체 <see cref="T:System.Collections.Generic.List`1" />에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <paramref name="item" />가 있으면 전체 <see cref="T:System.Collections.Generic.List`1" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary>지정된 개체를 검색하고, 지정된 인덱스부터 마지막 요소까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
      <returns>
        <paramref name="index" />부터 마지막 요소까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />가 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>지정된 개체를 검색하고, 지정된 인덱스에서 시작하여 지정된 수의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 처음으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">검색의 0부터 시작하는 인덱스입니다. 0은 빈 목록에서 유효합니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
      <returns>
        <paramref name="index" />에서 시작하여 <paramref name="count" />개의 요소를 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />가 있으면 처음으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 요소를 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">삽입할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 컬렉션의 요소를 삽입합니다.</summary>
      <param name="index">새 요소가 삽입되어야 하는 0부터 시작하는 인덱스입니다.</param>
      <param name="collection">요소가 <see cref="T:System.Collections.Generic.List`1" />에 삽입되어야 하는 컬렉션입니다. 컬렉션 자체가 <see langword="null" />일 수는 없지만 <paramref name="T" />형식이 참조 형식인 경우 <see langword="null" />인 요소를 포함할 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 큰 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary>지정된 개체를 검색하고, 전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>전체 <see cref="T:System.Collections.Generic.List`1" />에서 마지막으로 검색된 <paramref name="item" />의 0부터 시작하는 인덱스이고, 검색되지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary>지정된 개체를 검색하고, 첫 번째 요소부터 지정된 인덱스까지 포함하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.</exception>
      <returns>첫 번째 요소부터 <paramref name="index" />까지 확장하는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 <paramref name="item" />이 있으면 마지막으로 검색한 개체의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>지정된 개체를 검색하며, 지정된 수의 요소를 포함하고 지정된 인덱스에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에서 마지막으로 검색한 개체의 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <param name="index">역방향 검색의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">검색할 섹션에 있는 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <see cref="T:System.Collections.Generic.List`1" />의 유효한 인덱스 범위를 벗어납니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 섹션을 지정하지 않습니다.</exception>
      <returns>
        <paramref name="count" />개의 요소를 포함하고 <paramref name="index" />에서 끝나는 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 마지막으로 검색한 <paramref name="item" />의 인덱스(0부터 시작)이고, 검색되지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.List`1" />에서 제거할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <paramref name="item" />이 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <see langword="false" />가 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.List`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary>지정된 조건자에 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />에서 제거한 요소의 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />에서 요소의 범위를 제거합니다.</summary>
      <param name="index">제거할 요소의 범위에 대한 0부터 시작하는 인덱스입니다.</param>
      <param name="count">제거할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary>전체 <see cref="T:System.Collections.Generic.List`1" />에서 요소의 순서를 반대로 바꿉니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary>지정된 범위에서 요소의 순서를 반대로 바꿉니다.</summary>
      <param name="index">순서를 반대로 바꿀 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">순서를 반대로 바꿀 범위의 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />에서 올바른 요소 범위를 나타내지 않습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary>기본 비교자를 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />의 요소를 정렬합니다.</summary>
      <exception cref="T:System.InvalidOperationException">기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스 또는 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />에 있는 요소를 정렬합니다.</summary>
      <param name="comparer">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 또는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스의 구현을 찾을 수 없습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다. 예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary>지정된 <see cref="T:System.Comparison`1" />을 사용하여 전체 <see cref="T:System.Collections.Generic.List`1" />의 요소를 정렬합니다.</summary>
      <param name="comparison">요소를 비교할 때 사용할 <see cref="T:System.Comparison`1" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparison" />의 구현으로 인해 정렬 중에 오류가 발생했습니다. 예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparison" />에서 0을 반환하지 않을 수 있습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하여 <see cref="T:System.Collections.Generic.List`1" />의 요소 범위에 있는 요소를 정렬합니다.</summary>
      <param name="index">정렬할 범위의 0부터 시작하는 인덱스입니다.</param>
      <param name="count">정렬할 범위의 길이입니다.</param>
      <param name="comparer">요소를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현이거나, 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />를 사용하려면 <see langword="null" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="count" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 및 <paramref name="count" />가 <see cref="T:System.Collections.Generic.List`1" />의 올바른 범위를 지정하지 않습니다.  
  
또는 
<paramref name="comparer" />의 구현으로 인해 정렬 중에 오류가 발생했습니다. 예를 들어 항목을 자기 자신과 비교할 때 <paramref name="comparer" />에서 0을 반환하지 않을 수 있습니다.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" />가 <see langword="null" />이고 기본 비교자 <see cref="P:System.Collections.Generic.Comparer`1.Default" />가 형식 <paramref name="T" />에 대한 <see cref="T:System.IComparable" /> 인터페이스 또는 <see cref="T:System.IComparable`1" /> 제네릭 인터페이스의 구현을 찾을 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
      <returns>새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.IList" />에서 찾을 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
      <returns>목록에 있으면 <paramref name="item" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">
        <see cref="T:System.Collections.IList" />에 삽입할 개체입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.IList" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" />의 형식은 <see cref="T:System.Collections.IList" />에 할당할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 요소를 새 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />의 요소 복사본을 포함하는 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />에 있는 요소의 실제 수가 임계값보다 작은 경우 용량을 요소 수로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 모든 요소가 지정된 조건자에 정의된 조건과 일치하는지 여부를 확인합니다.</summary>
      <param name="match">요소에 대해 확인할 조건을 정의하는 <see cref="T:System.Predicate`1" /> 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />의 모든 요소가 지정된 조건자에 정의된 조건과 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 목록에 요소가 없으면 반환 값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary>크기를 조정하지 않고 내부 데이터 구조가 보유할 수 있는 전체 요소 수를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.List`1.Capacity" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 작은 값으로 설정되어 있습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">시스템에 사용 가능한 메모리가 부족합니다.</exception>
      <returns>크기를 조정하지 않고 <see cref="T:System.Collections.Generic.List`1" />에 포함될 수 있는 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.List`1.Count" />보다 크거나 같은 경우</exception>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.List`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 <see cref="T:System.Collections.IList" />의 유효한 인덱스가 아닌 경우</exception>
      <exception cref="T:System.ArgumentException">속성이 설정되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IList" />에 할당할 수 없는 경우</exception>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.List`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.List`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.List`1" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>
        <see cref="T:System.Collections.Generic.List`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>개체의 선입선출(FIFO) 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">큐에 있는 요소의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">해당 요소가 새 <see cref="T:System.Collections.Generic.Queue`1" />에 복사되는 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>비어 있는 상태에서 지정한 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Queue`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />에서 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Queue`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Queue`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Queue`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" />가 비어 있는 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작에서 제거하는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>개체를 <see cref="T:System.Collections.Generic.Queue`1" />의 끝 부분에 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Queue`1" />에 추가할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Queue`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 시작 부분에서 개체를 제거하지 않고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" />가 비어 있는 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />의 처음에 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" /> 요소를 새 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에서 복사된 요소를 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <summary>의 시작 부분에서 개체를 제거 <see cref="T:System.Collections.Generic.Queue`1" /> 하 고 <paramref name="result" /> 매개 변수에 복사 합니다.</summary>
      <param name="result">제거된 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" /> 개체가 성공적으로 제거 되었으면이 고, 그렇지 않으면입니다. <see langword="false" /><see cref="T:System.Collections.Generic.Queue`1" /> 이 비어 있으면입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <summary>의 시작 부분에 개체가 있는지 여부를 나타내는 값을 반환 하 고, <see cref="T:System.Collections.Generic.Queue`1" /> 하나가 있으면 <paramref name="result" /> 매개 변수에 복사 합니다. 개체는에서 제거 되지 않습니다 <see cref="T:System.Collections.Generic.Queue`1" /> .</summary>
      <param name="result">의 시작 부분에 있는 개체 이면 <see cref="T:System.Collections.Generic.Queue`1" /> 이 고, 그렇지 않으면의 기본값입니다 <typeparamref name="T" /> .</param>
      <returns>
        <see langword="true" /> 의 시작 부분에 개체가 있으면 <see cref="T:System.Collections.Generic.Queue`1" /> 이 고, <see langword="false" /> 가 비어 있으면입니다 <see cref="T:System.Collections.Generic.Queue`1" /> .</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Queue`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Queue`1" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.ReferenceEqualityComparer">
      <summary>두 개의 개체 인스턴스를 비교할 때 값 동등성(<see cref="M:System.Object.Equals(System.Object)" />) 대신 참조 동등성(<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />)을 사용하는 <see cref="T:System.Collections.Generic.IEqualityComparer`1" />입니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
      <summary>두 개체 참조가 동일한 개체 인스턴스를 참조하는지 여부를 확인합니다.</summary>
      <param name="x">비교할 첫 번째 개체입니다.</param>
      <param name="y">비교할 두 번째 개체입니다.</param>
      <returns>
        <paramref name="x" />와 <paramref name="y" />가 둘 다 동일한 개체 인스턴스를 참조하거나 둘 다 <see langword="null" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
      <summary>지정한 개체의 해시 코드를 반환합니다. 반환되는 해시 코드는 개체의 내용이 아닌 개체 ID를 기준으로 합니다.</summary>
      <param name="obj">해시 코드를 검색할 개체입니다.</param>
      <returns>
        <paramref name="obj" />의 ID에 대한 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
      <summary>singleton <see cref="T:System.Collections.Generic.ReferenceEqualityComparer" /> 인스턴스를 가져옵니다.</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>키에 따라 정렬된 키/값 쌍의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey">사전에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">사전에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>비어 있고 키 형식에 대해 기본적으로 구현된 <see cref="T:System.Collections.Generic.SortedDictionary`2" />를 사용하는 빈 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 구현을 사용하여 키를 비교하는 빈 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 복사된 요소를 포함하고 키 형식에 대해 기본적으로 구현된 <see cref="T:System.Collections.Generic.IDictionary`2" />를 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 복사된 요소를 포함하고 지정한 <see cref="T:System.Collections.Generic.IDictionary`2" /> 구현을 사용하여 키를 비교하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</param>
      <param name="comparer">키를 비교할 때 사용할 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 지정하거나, 해당 키 형식에 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 사용하려면 <see langword="null" />을 지정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>지정된 키를 갖는 요소가 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>지정된 값을 갖는 요소가 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />에 지정한 값이 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>지정한 인덱스로부터 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 구조체의 지정한 배열에 복사합니다.</summary>
      <param name="array">현재 <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 복사된 요소의 대상인 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 구조체의 1차원 배열입니다. 이 배열의 인덱스는 0부터 시작해야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <see langword="false" />가 <paramref name="key" />에 없는 경우에도 <see cref="T:System.Collections.Generic.SortedDictionary`2" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 추가할 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 키와 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 찾을 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="keyValuePair" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 지정된 요소를 제거합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 제거할 <see cref="T:System.Collections.Generic.ICollection`1" /> 구조체입니다.</param>
      <returns>
        <see langword="true" />이 <paramref name="keyValuePair" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />가 <paramref name="keyValuePair" />에 없는 경우에도 <see cref="T:System.Collections.Generic.ICollection`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정한 배열 인덱스부터 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용할 개체입니다.</param>
      <param name="value">추가할 요소의 값으로 사용할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
  
또는 
 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 값 형식 <paramref name="TValue" />에 할당할 수 없는 경우  
  
또는 
같은 키를 가진 요소가 이미 <see cref="T:System.Collections.IDictionary" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" />의 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값이고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedDictionary`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.IComparer`1" />의 요소를 정렬하는 데 사용되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IComparer`1" />의 요소를 정렬하는 데 사용되는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 값의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없는 경우</exception>
      <returns>지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 throw하고 set 작업에서 지정한 키가 있는 새 요소를 만듭니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 키를 포함하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값을 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>의 키를 포함 하는 컬렉션 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>의 값을 포함 하는 컬렉션 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">가져올 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
  
또는 
값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없는 경우</exception>
      <returns>지정한 키를 갖는 요소입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 값을 포함하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>열거자의 현재 위치에 있는 요소를 <see cref="T:System.Collections.DictionaryEntry" /> 구조체로 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 사전의 현재 위치에 있는 요소인 <see cref="T:System.Collections.DictionaryEntry" /> 구조체입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>열거자의 현재 위치에 있는 요소의 키를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소의 키입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>열거자의 현재 위치에 있는 요소의 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소의 값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 키 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 키를 반영하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">해당 키가 새 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 지정한 값이 포함되어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns>항목이 <see cref="T:System.Collections.Generic.ICollection`1" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다.  이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
      <returns>항목이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거되었으면 <see langword="true" />이고, 제거되지 않았으면 <see langword="false" />입니다. 이 메서드는 항목이 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" />의 값 컬렉션을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>지정한 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 값을 반영하는 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">해당 값이 새 <see cref="T:System.Collections.Generic.SortedDictionary`2" />에 반영되는 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 요소를 지정한 배열 인덱스에서 시작하여 기존의 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 항목을 추가합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 항목을 모두 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <exception cref="T:System.NotSupportedException">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>집합에 지정된 값이 <see cref="T:System.Collections.Generic.ICollection`1" />에 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 찾을 개체입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 개체를 제거합니다. 이 구현은 항상 <see cref="T:System.NotSupportedException" />을 발생시킵니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">항상 발생하며 컬렉션은 읽기 전용입니다.</exception>
      <returns>
        <paramref name="item" />이 <see cref="T:System.Collections.Generic.ICollection`1" />에서 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <see langword="false" />가 <paramref name="item" />에 없는 경우에도 <see cref="T:System.Collections.Generic.ICollection`1" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 요소를 특정 배열 인덱스에서 시작하여 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.ICollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="index" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 요소를 열거합니다.</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>연관된 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현을 기반으로 키에 따라 정렬된 키/값 쌍의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TKey">컬렉션에 있는 키의 형식입니다.</typeparam>
      <typeparam name="TValue">컬렉션에 있는 값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>기본 초기 용량을 갖고 있고 기본 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>기본 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">키를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
  
또는 
 <see langword="null" />이면 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 키의 형식으로 사용합니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>지정된 <see cref="T:System.Collections.Generic.SortedList`2" />에서 복사된 요소가 포함되어 있고, 복사된 요소의 수를 수용할 수 있는 충분한 용량을 가지며, 기본 <see cref="T:System.Collections.Generic.IDictionary`2" />을 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>지정된 <see cref="T:System.Collections.Generic.SortedList`2" />에서 복사된 요소가 포함되어 있고, 복사된 요소의 수를 수용할 수 있는 충분한 용량을 가지며, 지정된 <see cref="T:System.Collections.Generic.IDictionary`2" />을 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">요소가 새 <see cref="T:System.Collections.Generic.IDictionary`2" />에 복사되는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</param>
      <param name="comparer">키를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
  
또는 
 <see langword="null" />이면 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 키의 형식으로 사용합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" />에 중복 키가 하나 이상 포함된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>지정된 초기 용량을 갖고 있고 기본 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>지정된 초기 용량을 갖고 있고 지정된 <see cref="T:System.Collections.Generic.SortedList`2" />을 사용하는 비어 있는 <see cref="T:System.Collections.Generic.IComparer`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <param name="comparer">키를 비교할 때 사용하는 <see cref="T:System.Collections.Generic.IComparer`1" /> 구현입니다.  
  
또는 
 <see langword="null" />이면 기본 <see cref="T:System.Collections.Generic.Comparer`1" />을 키의 형식으로 사용합니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>지정한 키와 값을 가지는 요소를 <see cref="T:System.Collections.Generic.SortedList`2" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">같은 키를 가진 요소가 이미 <see cref="T:System.Collections.Generic.SortedList`2" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 요소를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 특정 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedList`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 값입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />에 지정한 값이 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedList`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />에 대한 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 형식의 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>지정한 키를 검색하고 전체 <see cref="T:System.Collections.Generic.SortedList`2" />에서 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>전체 <see cref="T:System.Collections.Generic.SortedList`2" />에 <paramref name="key" />가 있으면 해당 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>지정한 값을 검색하고 전체 <see cref="T:System.Collections.Generic.SortedList`2" />에서 이 값이 맨 처음 발견되는 인덱스(0부터 시작)를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 찾을 값입니다.  참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <paramref name="value" />가 있으면 전체 <see cref="T:System.Collections.Generic.SortedList`2" />에서 맨 처음 발견되는 값의 0부터 시작하는 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에서 키가 지정된 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>요소가 제거되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  이 메서드는 <paramref name="key" />가 원래 <see cref="T:System.Collections.Generic.SortedList`2" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />의 지정된 인덱스에 있는 요소를 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
  
또는 
 <paramref name="index" />가 <see cref="P:System.Collections.Generic.SortedList`2.Count" />보다 크거나 같은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 키/값 쌍을 추가합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에 추가할 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에 특정 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 찾을 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="keyValuePair" />에 있으면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>특정 <see cref="T:System.Collections.Generic.ICollection`1" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.ICollection`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.ICollection`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />에서 맨 처음 발견되는 특정 키/값 쌍을 제거합니다.</summary>
      <param name="keyValuePair">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />에서 제거할 <see cref="T:System.Collections.Generic.ICollection`1" />입니다.</param>
      <returns>
        <see langword="true" />이 <paramref name="keyValuePair" />에서 제거되면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="keyValuePair" />가 원래 <see cref="T:System.Collections.Generic.ICollection`1" />에 없는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" />에 추가합니다.</summary>
      <param name="key">추가할 요소의 키로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <param name="value">추가할 요소의 값으로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
  
또는 
 <paramref name="value" />의 형식을 <see cref="T:System.Collections.IDictionary" />의 값 형식 <paramref name="TValue" />에 할당할 수 없는 경우  
  
또는 
같은 키를 가진 요소가 이미 <see cref="T:System.Collections.IDictionary" />에 있는 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>지정된 키를 갖는 요소가 <see cref="T:System.Collections.IDictionary" />에 들어 있는지 여부를 결정합니다.</summary>
      <param name="key">
        <see cref="T:System.Collections.IDictionary" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" />의 <see cref="T:System.Collections.IDictionary" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" />에 대한 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" />에서 키가 지정된 요소를 제거합니다.</summary>
      <param name="key">제거할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">가져올 값이 있는 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값이고, 그렇지 않으면 <paramref name="value" /> 매개 변수의 형식에 대한 기본값입니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see langword="true" />에 지정한 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.Generic.SortedList`2" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 요소의 수를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" />가 <see cref="P:System.Collections.Generic.SortedList`2.Count" />보다 작은 값으로 설정되어 있습니다.</exception>
      <exception cref="T:System.OutOfMemoryException">시스템에 사용 가능한 메모리가 부족합니다.</exception>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함될 수 있는 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>정렬된 목록에 대한 <see cref="T:System.Collections.Generic.IComparer`1" />을 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.IComparable`1" />에 대한 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함된 키/값 쌍의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 포함된 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 값이 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">속성을 검색할 때 컬렉션에 <paramref name="key" />가 없는 경우</exception>
      <returns>지정한 키와 연결된 값입니다. 지정한 키가 없으면 get 작업에서 <see cref="T:System.Collections.Generic.KeyNotFoundException" />을 throw하고 set 작업에서 지정한 키를 사용하여 새 요소를 만듭니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />에 있는 키가 들어있는 컬렉션을 정렬 순서대로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.Generic.ICollection`1" />이고, 그렇지 않으면 <see langword="false" />입니다. <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 키를 포함하는 <see cref="T:System.Collections.Generic.IDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" />의 값이 들어 있는 <see cref="T:System.Collections.Generic.IDictionary`2" />을 가져옵니다.</summary>
      <returns>의 값을 포함 하는 개체 <see cref="T:System.Collections.Generic.IDictionary`2" /> 입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>읽기 전용 사전의 키를 포함하는 열거 가능한 컬렉션을 가져옵니다.</summary>
      <returns>읽기 전용 사전의 키를 포함하는 열거 가능한 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>읽기 전용 사전의 값을 포함하는 열거 가능한 컬렉션을 가져옵니다.</summary>
      <returns>읽기 전용 사전의 값을 포함하는 열거 가능한 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IDictionary" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IDictionary" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.SortedList`2" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 요소의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">값이 할당되어 있고 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedList`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없는 경우  
  
또는 
값이 할당되어 있고 <paramref name="value" />의 형식을 <see cref="T:System.Collections.Generic.SortedList`2" />의 <paramref name="TValue" /> 값 형식에 할당할 수 없는 경우</exception>
      <returns>지정한 키를 갖는 요소입니다. <paramref name="key" />가 사전에 없거나 <paramref name="key" />의 형식을 <see cref="T:System.Collections.Generic.SortedList`2" />의 <paramref name="TKey" /> 키 형식에 할당할 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 값이 들어 있는 <see cref="T:System.Collections.IDictionary" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Collections.IDictionary" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>
        <see cref="T:System.Collections.Generic.SortedList`2" />의 값을 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IList`1" />의 값을 포함하는 <see cref="T:System.Collections.Generic.SortedList`2" />입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>정렬된 순서대로 유지 관리되는 개체의 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">집합에 있는 요소의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>지정된 비교자를 사용하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="comparer">개체 비교에 사용할 기본 비교자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정한 열거 가능한 컬렉션에서 복사된 요소를 포함하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">복사할 열거 가능한 컬렉션입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>지정한 열거 가능한 컬렉션에서 복사된 요소를 포함하고 지정된 비교자를 사용하는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">복사할 열거 가능한 컬렉션입니다.</param>
      <param name="comparer">개체 비교에 사용할 기본 비교자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 serialize하는 데 필요한 정보가 들어 있는 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에 연결된 serialize된 스트림의 소스와 대상이 들어 있는 구조체입니다.</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>집합에 요소를 추가하고 성공적으로 추가되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item">집합에 추가할 요소입니다.</param>
      <returns>
        <paramref name="item" />이 집합에 추가되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>집합에서 모든 요소를 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>집합에 특정 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="item">집합에서 찾을 요소입니다.</param>
      <returns>집합에 <paramref name="item" />이 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>대상 배열의 처음부터 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다.</param>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소의 수가 대상 배열이 포함할 수 있는 요소의 수를 초과하는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 <see cref="T:System.Collections.Generic.SortedSet`1" />에 있는 지정된 개수의 요소를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <param name="count">복사할 요소의 수입니다.</param>
      <exception cref="T:System.ArgumentException">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우  
  
또는 
 <paramref name="count" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary>개별 집합이 들어 있는 컬렉션을 만드는 데 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 반환합니다.</summary>
      <returns>집합의 컬렉션을 만들기 위한 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>지정된 비교자에 따라 개별 집합이 들어 있는 컬렉션을 만드는 데 사용할 수 있는 <see cref="T:System.Collections.IEqualityComparer" /> 개체를 반환합니다.</summary>
      <param name="memberEqualityComparer">반환된 비교자를 만드는 데 사용할 비교자입니다.</param>
      <returns>집합의 컬렉션을 만들기 위한 비교자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에서 지정된 컬렉션에 있는 모든 요소를 제거합니다.</summary>
      <param name="other">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에서 제거할 항목 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />를 반복하는 열거자를 반환합니다.</summary>
      <returns>정렬된 순서로 <see cref="T:System.Collections.Generic.SortedSet`1" />을 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체를 직렬화하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체에 연결되어 있는 serialize된 스트림의 소스와 대상이 포함된 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />에 있는 하위 집합의 뷰를 반환합니다.</summary>
      <param name="lowerValue">뷰에서 원하는 가장 낮은 값입니다.</param>
      <param name="upperValue">뷰에서 원하는 가장 높은 값입니다.</param>
      <exception cref="T:System.ArgumentException">비교자에 따르면 <paramref name="lowerValue" />은 <paramref name="upperValue" />보다 큽니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">뷰에서 시도한 작업이 <paramref name="lowerValue" /> 및 <paramref name="upperValue" />에 의해 지정된 범위를 벗어났습니다.</exception>
      <returns>지정된 범위의 값만 포함하는 하위 집합 뷰입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에도 있는 요소만 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 진 부분 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 진 부분 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 진 상위 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 진 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 하위 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 지정된 컬렉션의 상위 집합인지 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />의 포함 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체와 관련된 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 지정된 컬렉션이 공통 요소를 공유하는지 여부를 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 <paramref name="other" />가 최소한 하나의 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 지정된 항목을 제거합니다.</summary>
      <param name="item">제거할 요소입니다.</param>
      <returns>요소를 찾아서 성공적으로 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 지정된 조건자로 정의된 조건과 일치하는 요소를 모두 제거합니다.</summary>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 컬렉션에서 제거된 요소 수입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />를 역순으로 반복하는 <see cref="T:System.Collections.Generic.SortedSet`1" />을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" />를 역순으로 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
      <returns>현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 <paramref name="other" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 개체나 지정된 컬렉션에 있고 둘 다에는 없는 요소만 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 항목을 추가합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 개체에 추가할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하여 전체 <see cref="T:System.Collections.Generic.SortedSet`1" />를 호환되는 1차원 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.SortedSet`1" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">소스 배열의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지의 사용 가능한 공간보다 큰 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.SortedSet`1" /> 인스턴스를 serialize하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 연결되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 구조체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary>집합에서 지정된 값을 검색하여 동일한 값을 찾은 경우 해당 값을 반환합니다.</summary>
      <param name="equalValue">검색할 값입니다.</param>
      <param name="actualValue">집합에서 검색한 값입니다. 검색에서 일치하는 항목을 찾지 못한 경우 T의 기본값입니다.</param>
      <returns>검색에 성공했는지 여부를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>현재 개체 또는 지정된 컬렉션 중 하나에 있는 요소가 모두 포함되도록 현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체를 수정합니다.</summary>
      <param name="other">현재 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체와 비교할 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 값을 정렬하는 데 사용된 <see cref="T:System.Collections.Generic.IComparer`1" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 값을 정렬하는 데 사용하는 비교자입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" />의 요소 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>비교자로 정의된 <see cref="T:System.Collections.Generic.SortedSet`1" />의 최대값을 가져옵니다.</summary>
      <returns>집합의 최대값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>비교자로 정의된 <see cref="T:System.Collections.Generic.SortedSet`1" />의 최소값을 가져옵니다.</summary>
      <returns>집합의 최소값입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.ICollection" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었는지(스레드로부터 안전한지) 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다. <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체의 요소를 열거합니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.SortedSet`1" /> 컬렉션의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고, deserialization이 완료되면 deserialization 이벤트를 발생시킵니다.</summary>
      <param name="sender">deserialization 이벤트의 소스입니다.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">현재 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스와 관련된 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체가 잘못된 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.ISerializable" /> 인터페이스를 구현하고 <see cref="T:System.Collections.Generic.SortedSet`1" /> 인스턴스를 직렬화하는 데 필요한 데이터를 반환합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스를 serialize하는 데 필요한 정보가 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 인스턴스와 관련되어 있는 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Collections.Generic.SortedSet`1" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>지정한 동일 형식의 인스턴스로 이루어진 가변 크기 LIFO(후입선출) 방식의 컬렉션을 나타냅니다.</summary>
      <typeparam name="T">스택에 있는 요소의 형식을 지정합니다.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>비어 있는 상태에서 기본 초기 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>지정된 컬렉션에서 복사한 요소를 포함하고 복사한 요소를 모두 수용할 수 있을 정도의 용량을 가진 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="collection">요소를 복사할 원본 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>비어 있는 상태이고 지정한 초기 용량과 기본 초기 용량 중에서 더 큰 용량을 가지는 <see cref="T:System.Collections.Generic.Stack`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함될 수 있는 초기 요소 수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에서 개체를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에 요소가 있는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" />에서 찾을 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="item" />에 있으면 <see cref="T:System.Collections.Generic.Stack`1" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>지정된 배열 인덱스에서 시작하는 기존 1차원 <see cref="T:System.Array" />에 <see cref="T:System.Collections.Generic.Stack`1" />를 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.Generic.Stack`1" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Collections.Generic.Stack`1" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에 대한 <see cref="T:System.Collections.Generic.Stack`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하지 않고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 개체를 제거하고 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" />가 비어 있는 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에서 제거되는 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>개체를 <see cref="T:System.Collections.Generic.Stack`1" />의 맨 위에 삽입합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.Stack`1" />에 적용할 개체입니다. 참조 형식에 대해 값은 <see langword="null" />이 될 수 있습니다.</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" />가 0보다 작은 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />가 다차원 배열인 경우  
  
또는 
 <paramref name="array" />에 0부터 시작하는 인덱스가 없습니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 요소 수가 대상 <paramref name="array" />의 <paramref name="arrayIndex" />부터 끝까지 사용 가능한 공간보다 큽니다.  
  
또는 
소스 <see cref="T:System.Collections.ICollection" />의 형식을 대상 <paramref name="array" />의 형식으로 자동 캐스팅할 수 없습니다.</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />을 새 배열에 복사합니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />의 요소 복사본을 포함하는 새 배열입니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 실제 요소 수가 현재 용량의 90% 미만인 경우 용량을 이 값으로 설정합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <summary>의 맨 위에 개체가 있는지 여부를 나타내는 값을 반환 하 <see cref="T:System.Collections.Generic.Stack`1" /> 고, 하나가 있으면 <paramref name="result" /> 매개 변수에 복사 합니다. 개체는에서 제거 되지 않습니다 <see cref="T:System.Collections.Generic.Stack`1" /> .</summary>
      <param name="result">인 경우의 맨 위에 있는 개체이 고, <see cref="T:System.Collections.Generic.Stack`1" /> 그렇지 않으면의 기본값입니다 <typeparamref name="T" /> .</param>
      <returns>
        <see langword="true" /> 의 맨 위에 개체가 있으면 <see cref="T:System.Collections.Generic.Stack`1" /> 이 고, 비어 있으면입니다 <see langword="false" /><see cref="T:System.Collections.Generic.Stack`1" /> .</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <summary>의 맨 위에 개체가 있는지 여부를 나타내는 값을 반환 하 <see cref="T:System.Collections.Generic.Stack`1" /> 고, 하나가 있으면 <paramref name="result" /> 매개 변수에 복사 하 고에서 제거 합니다 <see cref="T:System.Collections.Generic.Stack`1" /> .</summary>
      <param name="result">인 경우의 맨 위에 있는 개체이 고, <see cref="T:System.Collections.Generic.Stack`1" /> 그렇지 않으면의 기본값입니다 <typeparamref name="T" /> .</param>
      <returns>
        <see langword="true" /> 의 맨 위에 개체가 있으면 <see cref="T:System.Collections.Generic.Stack`1" /> 이 고, 비어 있으면입니다 <see langword="false" /><see cref="T:System.Collections.Generic.Stack`1" /> .</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />에 포함된 요소의 수입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.  <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.  <see cref="T:System.Collections.Generic.Stack`1" />의 기본 구현에서 이 속성은 언제나 현재 인스턴스를 반환합니다.</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1" />의 요소를 열거합니다.</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>열거자를 <see cref="T:System.Collections.Generic.Stack`1" />의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다. 이 클래스는 상속될 수 없습니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" />에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>열거자의 현재 위치에 있는 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에서 열거자의 현재 위치에 있는 요소입니다.</returns>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary>두 컬렉션 개체의 구조를 비교하기 위한 개체를 제공합니다.</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary>두 개체의 구조를 비교하는 미리 정의된 개체를 가져옵니다.</summary>
      <returns>두 컬렉션 개체의 구조를 비교하는 데 사용되는 미리 정의된 개체입니다.</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary>두 개체의 구조가 같은지 비교하는 미리 정의된 개체를 가져옵니다.</summary>
      <returns>두 컬렉션 개체의 구조가 같은지 비교하는 데 사용되는 미리 정의된 개체입니다.</returns>
    </member>
  </members>
</doc>
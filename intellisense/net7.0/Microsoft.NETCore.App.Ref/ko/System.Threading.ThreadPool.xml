<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary>
        <see cref="T:System.Threading.ThreadPool" />에 의해 실행될 수 있는 작업 항목을 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary>스레드 풀에서 작업 항목을 실행합니다.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>
        <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />을 호출할 때 등록된 핸들을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>
        <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 메서드에서 발생한 등록된 대기 작업을 취소합니다.</summary>
      <param name="waitObject">신호를 받을 <see cref="T:System.Threading.WaitHandle" />입니다.</param>
      <returns>작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>작업 실행, 작업 항목 게시, 비동기 I/O 처리, 다른 스레드 대신 기다리기 및 타이머 처리에 사용할 수 있는 스레드 풀을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>
        <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</summary>
      <param name="osHandle">핸들을 보유하는 <see cref="T:System.IntPtr" />입니다. 핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</param>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <returns>핸들이 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>
        <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</summary>
      <param name="osHandle">운영 체제 핸들을 보유하는 <see cref="T:System.Runtime.InteropServices.SafeHandle" />입니다. 핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="osHandle" />이(가) <see langword="null" />인 경우.</exception>
      <returns>핸들이 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>
        <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 메서드에서 반환하는 최대 스레드 풀 스레드 수와 현재 활성 상태인 스레드 수의 차이를 검색합니다.</summary>
      <param name="workerThreads">사용 가능한 작업자 스레드 수입니다.</param>
      <param name="completionPortThreads">사용 가능한 비동기 I/O 스레드 수입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 검색합니다. 해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</summary>
      <param name="workerThreads">스레드 풀에 있는 최대 작업자 스레드 수입니다.</param>
      <param name="completionPortThreads">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 검색합니다.</summary>
      <param name="workerThreads">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</param>
      <param name="completionPortThreads">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>실행을 위해 메서드를 큐에 대기시킵니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.NotSupportedException">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</exception>
      <returns>메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>실행을 위해 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</param>
      <param name="state">메서드에서 사용할 데이터가 들어 있는 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" />이(가) <see langword="null" />인 경우.</exception>
      <returns>메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>실행을 위해 <see cref="T:System.Action`1" /> 대리자에 의해 지정된 메서드를 큐에 대기시키고 메서드에서 사용할 데이터를 제공합니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack">실행할 메서드를 나타내는 <see cref="T:System.Action`1" />입니다.</param>
      <param name="state">메서드에서 사용할 데이터가 들어 있는 개체입니다.</param>
      <param name="preferLocal">현재 스레드에 가까운 큐에 작업 항목을 넣으려면 <see langword="true" />이고, 스레드 풀의 공유 큐에 작업 항목을 넣으려면 <see langword="false" />입니다.</param>
      <typeparam name="TState">
        <paramref name="state" />의 요소 형식입니다.</typeparam>
      <returns>메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 있는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <returns>기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state">대리자에 전달된 개체입니다.</param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <returns>기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>제한 시간에 <see cref="T:System.Threading.WaitHandle" /> 값을 지정하여 <see cref="T:System.TimeSpan" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state">대리자에 전달된 개체입니다.</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다. <paramref name="timeout" />이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="timeout" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 매개 변수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <returns>기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state">대리자에 전달된 개체입니다.</param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <returns>등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 설정합니다. 해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</summary>
      <param name="workerThreads">스레드 풀에 있는 최대 작업자 스레드 수입니다.</param>
      <param name="completionPortThreads">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</param>
      <returns>성공적으로 변경되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 설정합니다.</summary>
      <param name="workerThreads">스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수입니다.</param>
      <param name="completionPortThreads">스레드 풀에서 필요할 때 만드는 비동기 I/O 스레드의 최소 개수입니다.</param>
      <returns>성공적으로 변경되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>실행할 중첩된 I/O 작업을 큐에 대기시킵니다.</summary>
      <param name="overlapped">큐에 대기시킬 <see cref="T:System.Threading.NativeOverlapped" /> 구조체입니다.</param>
      <returns>작업이 I/O 완료 포트 큐에 성공적으로 대기되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary>지정된 작업 항목 개체를 스레드 풀의 큐에 넣습니다.</summary>
      <param name="callBack">스레드 풀에 있는 스레드에서 작업 항목을 선택할 때 호출하는 작업 항목입니다.</param>
      <param name="preferLocal">현재 스레드에 가까운 큐에 작업 항목을 넣으려면 <see langword="true" />이고, 스레드 풀의 공유 큐에 작업 항목을 넣으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">작업 항목은 <see cref="T:System.Threading.Tasks.Task" />입니다.</exception>
      <exception cref="T:System.OutOfMemoryException">작업 항목을 큐에 대기할 수 없는 경우</exception>
      <returns>메서드가 성공하면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.OutOfMemoryException" />이 발생합니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>지정된 대리자를 스레드 풀에 대기시키지만 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="callBack">스레드 풀에 있는 스레드에서 작업 항목을 선택할 때 호출되는 대리자를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</param>
      <param name="state">스레드 풀에서 제공할 때 대리자에 전달되는 개체입니다.</param>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ApplicationException">메모리가 부족한 경우</exception>
      <exception cref="T:System.OutOfMemoryException">작업 항목을 큐에 대기할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callBack" />이(가) <see langword="null" />인 경우.</exception>
      <returns>메서드가 성공하면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.OutOfMemoryException" />이 발생합니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>실행을 위해 <see cref="T:System.Action`1" /> 대리자에 의해 지정된 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack">실행할 메서드를 나타내는 대리자입니다.</param>
      <param name="state">메서드에서 사용할 데이터가 들어 있는 개체입니다.</param>
      <param name="preferLocal">현재 스레드에 가까운 큐에 작업 항목을 넣으려면 <see langword="true" />이고, 스레드 풀의 공유 큐에 작업 항목을 넣으려면 <see langword="false" />입니다.</param>
      <typeparam name="TState">
        <paramref name="state" />의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.NotSupportedException">작업 항목을 큐에 대기할 수 없는 경우</exception>
      <returns>메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 있는 32비트 정수를 사용하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <returns>등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <returns>등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>제한 시간에 <see cref="T:System.Threading.WaitHandle" /> 값을 지정하여 <see cref="T:System.TimeSpan" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state">대리자에 전달되는 개체입니다.</param>
      <param name="timeout">
        <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다. <paramref name="timeout" />이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="timeout" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="timeout" /> 매개 변수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <returns>등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.Security.SecurityException">호출자에게 필요한 권한이 없는 경우</exception>
      <returns>등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary>지금까지 처리된 작업 항목 수를 가져옵니다.</summary>
      <returns>지금까지 처리 된 작업 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary>현재 처리 대기 중인 작업 항목의 수를 가져옵니다.</summary>
      <returns>현재 처리 대기 중인 작업 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary>현재 존재하는 스레드 풀 스레드의 수를 가져옵니다.</summary>
      <returns>현재 존재 하는 스레드 풀 스레드의 수입니다.</returns>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>스레드 풀 스레드에 의해 실행될 콜백 메서드를 나타냅니다.</summary>
      <param name="state">콜백 메서드에서 사용할 정보가 포함된 개체입니다.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>
        <see cref="T:System.Threading.WaitHandle" />이 신호를 받거나 시간 초과될 때 호출될 메서드를 나타냅니다.</summary>
      <param name="state">콜백 메서드가 실행될 때마다 사용할 정보가 포함된 개체입니다.</param>
      <param name="timedOut">
        <see cref="T:System.Threading.WaitHandle" /> 시간이 초과되면 <see langword="true" />이고, 신호를 받으면 <see langword="false" />입니다.</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>Stellt Unterstützung für eine alternative Vorgehensweise zum Generieren von MSIL (Microsoft Intermediate Language) und von Metadaten für eine dynamische Methode bereit. Dabei sind Methoden zum Erstellen von Token und zum Einfügen des Codes, Ausnahmenbehandlung sowie Signatur-BLOBs für lokale Variablen inbegriffen.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das die Signatur für die zugeordnete dynamische Methode darstellt.</summary>
      <param name="signature">Ein Array, das die Signatur enthält.</param>
      <returns>Ein Token, das in die Metadaten und in den MSIL-Stream für die zugeordnete dynamische Methode eingebettet werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das eine aus der zugeordneten Methode aufzurufende dynamische Methode darstellt.</summary>
      <param name="method">Die aufzurufende dynamische Methode.</param>
      <returns>Ein Token, das in den MSIL-Stream für die zugeordnete dynamische Methode als Ziel einer MSIL-Anweisung eingebettet werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das ein Feld darstellt, auf das aus der zugeordneten dynamischen Methode zugegriffen werden soll.</summary>
      <param name="field">Das Feld, auf das zugegriffen werden soll.</param>
      <returns>Ein Token im Bereich des aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Felder zugegriffen wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das ein Feld darstellt, auf das aus der zugeordneten dynamischen Methode zugegriffen werden soll. Das Feld ist vom angegebenen generischen Typ.</summary>
      <param name="field">Das Feld, auf das zugegriffen werden soll.</param>
      <param name="contextType">Der generische Typ, zu dem das Feld gehört.</param>
      <returns>Ein Token im Bereich des aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Felder zugegriffen wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das eine Methode darstellt, auf die aus der zugeordneten dynamischen Methode zugegriffen werden soll.</summary>
      <param name="method">Die Methode, auf die zugegriffen werden soll.</param>
      <returns>Ein Token im Bereich des aktuellen <see cref="F:System.Reflection.Emit.OpCodes.Call" />-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Methoden zugegriffen wird, z. B. <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> oder <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das eine Methode für einen generischen Typ darstellt.</summary>
      <param name="method">Die Methode.</param>
      <param name="contextType">Der generische Typ, zu dem die Methode gehört.</param>
      <returns>Ein Token im Bereich des aktuellen <see cref="F:System.Reflection.Emit.OpCodes.Call" />-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, mit der auf Methoden zugegriffen wird, z. B. <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" /> oder <see cref="T:System.Reflection.Emit.DynamicILInfo" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das einen Typ darstellt, der in der zugeordneten dynamischen Methode verwendet werden soll.</summary>
      <param name="type">Der zu verwendende Typ.</param>
      <returns>Ein Token im Bereich des aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, die einen Typ erfordert.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>Ruft ein im Bereich der aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" /> gültiges Token ab, das ein Zeichenfolgenliteral darstellt, das in der zugeordneten dynamischen Methode verwendet werden soll.</summary>
      <param name="literal">Die zu verwendende Zeichenfolge.</param>
      <returns>Ein Token im Bereich des aktuellen <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekts, das als Operand einer MSIL-Anweisung verwendet werden kann, die eine Zeichenfolge erfordert.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>Legt den Codetext der zugeordneten dynamischen Methode fest.</summary>
      <param name="code">Ein Zeiger auf ein Bytearray, das den MSIL-Stream enthält.</param>
      <param name="codeSize">Die Anzahl der Bytes im MSIL-Stream.</param>
      <param name="maxStackSize">Die maximale Anzahl von Elementen auf dem Operandenstapel beim Ausführen der Methode.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> ist <see langword="null" />, und <paramref name="codeSize" /> ist größer als 0 (null).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> ist kleiner als 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>Legt den Codetext der zugeordneten dynamischen Methode fest.</summary>
      <param name="code">Ein Array, das den MSIL-Stream enthält.</param>
      <param name="maxStackSize">Die maximale Anzahl von Elementen auf dem Operandenstapel beim Ausführen der Methode.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>Legt die Ausnahmemetadaten für die zugeordnete dynamische Methode fest.</summary>
      <param name="exceptions">Ein Zeiger auf ein Bytearray, das die Ausnahmemetadaten enthält.</param>
      <param name="exceptionsSize">Die Bytezahl der Ausnahmemetadaten.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> ist <see langword="null" />, und <paramref name="exceptionSize" /> ist größer als 0 (null).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> ist kleiner als 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>Legt die Ausnahmemetadaten für die zugeordnete dynamische Methode fest.</summary>
      <param name="exceptions">Ein Array, das die Ausnahmemetadaten enthält.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>Legt die lokale Variablensignatur fest, in der das Layout von lokalen Variablen für die zugeordnete dynamische Methode beschrieben wird.</summary>
      <param name="localSignature">Ein Array, das das Layout von lokalen Variablen für die zugeordnete <see cref="T:System.Reflection.Emit.DynamicMethod" /> enthält.</param>
      <param name="signatureSize">Die Anzahl der Bytes in der Signatur.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> ist <see langword="null" />, und <paramref name="signatureSize" /> ist größer als 0 (null).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> ist kleiner als 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>Legt die lokale Variablensignatur fest, in der das Layout von lokalen Variablen für die zugeordnete dynamische Methode beschrieben wird.</summary>
      <param name="localSignature">Ein Array, das das Layout von lokalen Variablen für die zugeordnete <see cref="T:System.Reflection.Emit.DynamicMethod" /> enthält.</param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>Ruft die dynamische Methode ab, deren Text von der aktuellen Instanz generiert wird.</summary>
      <returns>Ein <see cref="T:System.Reflection.Emit.DynamicMethod" />-Objekt, das die dynamische Methode darstellt, für die das aktuelle <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekt Code generiert.</returns>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Definiert eine dynamische Methode, die kompiliert, ausgeführt und verworfen werden kann, und stellt diese dar. Verworfene Methoden sind für die Garbage Collection verfügbar.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Erstellt eine dynamische Methode, die sich zu einem Modul global verhält und Methodennamen, Attribute, die Aufrufkonvention, den Rückgabetyp, die Parametertypen und das Modul angibt. Zudem wird angegeben, ob JIT-Sichtbarkeitsprüfungen (Just-In-Time) für Typen und Member übersprungen werden sollen, auf die von der MSIL (Microsoft Intermediate Language) der dynamischen Methode zugegriffen wird.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="attributes">Eine bitweise Kombination von <see cref="T:System.Reflection.MethodAttributes" />-Werten, die die Attribute der dynamischen Methode angibt. Die einzige zulässige Kombination ist <see cref="F:System.Reflection.MethodAttributes.Public" /> und <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Die Aufrufkonvention für die dynamische Methode. Muss <see cref="F:System.Reflection.CallingConventions.Standard" />lauten.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="m">Ein <see cref="T:System.Reflection.Module" />, das das Modul darstellt, dem die dynamische Methode logisch zugeordnet ist.</param>
      <param name="skipVisibility">
        <see langword="true" />, wenn JIT-Sichtbarkeitsprüfungen für Typen und Member übersprungen werden sollen, auf die die MSIL der dynamischen Methode zugreift, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.  
  
- oder - 
 <paramref name="m" /> ist ein Modul, das das anonyme Hosten für dynamische Methoden bereitstellt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="m" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> ist eine Kombination aus Flags außer <see cref="F:System.Reflection.MethodAttributes.Public" /> und <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- oder - 
 <paramref name="callingConvention" /> ist nicht <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
- oder - 
 <paramref name="returnType" /> ist ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Erstellt eine dynamische Methode. Dabei werden der Methodenname, die Attribute, die Aufrufkonvention, der Rückgabetyp, die Parametertypen und der Typ angegeben, der der dynamischen Methode logisch zugeordnet ist. Außerdem wird angegeben, ob JIT-Sichtbarkeitsprüfungen (Just-In-Time) für Typen und Member übersprungen werden sollen, auf die die MSIL (Microsoft Intermediate Language) der dynamischen Methode zugreift.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="attributes">Eine bitweise Kombination von <see cref="T:System.Reflection.MethodAttributes" />-Werten, die die Attribute der dynamischen Methode angibt. Die einzige zulässige Kombination ist <see cref="F:System.Reflection.MethodAttributes.Public" /> und <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Die Aufrufkonvention für die dynamische Methode. Muss <see cref="F:System.Reflection.CallingConventions.Standard" />lauten.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="owner">Ein <see cref="T:System.Type" />, der der dynamischen Methode logisch zugeordnet ist. Die dynamische Methode hat Zugriff auf alle Member des Typs.</param>
      <param name="skipVisibility">
        <see langword="true" />, wenn JIT-Sichtbarkeitsprüfungen für Typen und Member übersprungen werden sollen, auf die die MSIL der dynamischen Methode zugreift, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.  
  
- oder - 
 <paramref name="owner" /> ist eine Schnittstelle, ein Array, ein offener generischer Typ oder ein Typparameter eines generischen Typs oder einer Methode.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="owner" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> ist eine Kombination aus Flags außer <see cref="F:System.Reflection.MethodAttributes.Public" /> und <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- oder - 
 <paramref name="callingConvention" /> ist nicht <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
- oder - 
 <paramref name="returnType" /> ist ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Initialisiert eine anonym gehostete dynamische Methode, wobei der Methodenname, der Rückgabetyp und die Parametertypen angegeben werden.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> ist ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Initialisiert eine anonym gehostete dynamische Methode. Dazu werden der Methodenname, der Rückgabetyp und die Parametertypen angegeben und wird angegeben, ob JIT-Sichtbarkeitsprüfungen (Just-In-Time) für Typen und Member übersprungen werden sollen, auf die von der MSIL (Microsoft Intermediate Language) der dynamischen Methode zugegriffen wird.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="restrictedSkipVisibility">
        <see langword="true" />, wenn JIT-Sichtbarkeitsprüfungen für Typen und Member übersprungen werden sollen, auf die durch die MSIL der dynamischen Methode zugegriffen wird. Dafür gibt es folgende Einschränkung: Die Vertrauensebene der Assemblys, die diese Typen und Member enthalten, muss identisch sein mit oder kleiner sein als die Vertrauensebene der Aufrufliste, die die dynamische Methode ausgibt. Andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> ist ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Erstellt eine dynamische Methode, die sich zu einem Modul global verhält und den Methodennamen, den Rückgabetyp, die Parametertypen und das Modul angibt.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="m">Ein <see cref="T:System.Reflection.Module" />, das das Modul darstellt, dem die dynamische Methode logisch zugeordnet ist.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.  
  
- oder - 
 <paramref name="m" /> ist ein Modul, das das anonyme Hosten für dynamische Methoden bereitstellt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="m" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> ist ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Erstellt eine dynamische Methode, die sich zu einem Modul global verhält und den Methodennamen, Rückgabetyp, die Parametertypen und das Modul angibt. Zudem wird angegeben, ob JIT-Sichtbarkeitsprüfungen (Just-In-Time) für Typen und Member übersprungen werden sollen, auf die von der MSIL (Microsoft Intermediate Language) der dynamischen Methode zugegriffen wird.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="m">Ein <see cref="T:System.Reflection.Module" />, das das Modul darstellt, dem die dynamische Methode logisch zugeordnet ist.</param>
      <param name="skipVisibility">
        <see langword="true" />, wenn JIT-Sichtbarkeitsprüfungen für Typen und Member übersprungen werden sollen, auf die die MSIL der dynamischen Methode zugreift.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.  
  
- oder - 
 <paramref name="m" /> ist ein Modul, das das anonyme Hosten für dynamische Methoden bereitstellt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="m" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> ist ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Erstellt eine dynamische Methode und gibt den Methodennamen, den Rückgabetyp, die Parametertypen und den Typ an, dem die dynamische Methode logisch zugeordnet ist.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="owner">Ein <see cref="T:System.Type" />, der der dynamischen Methode logisch zugeordnet ist. Die dynamische Methode hat Zugriff auf alle Member des Typs.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.  
  
- oder - 
 <paramref name="owner" /> ist eine Schnittstelle, ein Array, ein offener generischer Typ oder ein Typparameter eines generischen Typs oder einer Methode.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="owner" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> ist <see langword="null" /> oder ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Erstellt eine dynamische Methode. Dabei werden der Methodenname, der Rückgabetyp, die Parametertypen und der Typ angegeben, der der dynamischen Methode logisch zugeordnet ist. Außerdem wird angegeben, ob JIT-Sichtbarkeitsprüfungen (Just-In-Time) für Typen und Member übersprungen werden sollen, auf die die MSIL (Microsoft Intermediate Language) der dynamischen Methode zugreift.</summary>
      <param name="name">Der Name der dynamischen Methode. Dies kann eine leere Zeichenfolge sein, sie darf aber nicht <see langword="null" /> sein.</param>
      <param name="returnType">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der dynamischen Methode angibt, oder <see langword="null" />, wenn die Methode keinen Rückgabetyp hat.</param>
      <param name="parameterTypes">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typen der Parameter der dynamischen Methode angeben, oder <see langword="null" />, wenn die Methode keine Parameter hat.</param>
      <param name="owner">Ein <see cref="T:System.Type" />, der der dynamischen Methode logisch zugeordnet ist. Die dynamische Methode hat Zugriff auf alle Member des Typs.</param>
      <param name="skipVisibility">
        <see langword="true" />, wenn JIT-Sichtbarkeitsprüfungen für Typen und Member übersprungen werden sollen, auf die die MSIL der dynamischen Methode zugreift, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Ein Element von <paramref name="parameterTypes" /> ist <see langword="null" /> oder <see cref="T:System.Void" />.  
  
- oder - 
 <paramref name="owner" /> ist eine Schnittstelle, ein Array, ein offener generischer Typ oder ein Typparameter eines generischen Typs oder einer Methode.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="owner" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> ist <see langword="null" /> oder ein Typ, für den <see cref="P:System.Type.IsByRef" /> den Wert <see langword="true" /> zurückgibt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Vervollständigt die dynamische Methode und erstellt einen Delegaten, mit dem die Methode ausgeführt werden kann.</summary>
      <param name="delegateType">Ein Delegattyp, dessen Signatur mit der Signatur der dynamischen Methode übereinstimmt.</param>
      <exception cref="T:System.InvalidOperationException">Die dynamische Methode verfügt über keinen Methodentext.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> weist die falsche Anzahl von Parametern oder die falschen Parametertypen auf.</exception>
      <returns>Ein Delegat des angegebenen Typs, mit dem die dynamische Methode ausgeführt werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Vervollständigt die dynamische Methode und erstellt einen Delegaten, mit dem die Methode ausgeführt werden kann, wobei der Delegattyp und ein Objekt angegeben werden, das an den Delegaten gebunden ist.</summary>
      <param name="delegateType">Ein Delegattyp, dessen Signatur mit der Signatur der dynamischen Methode übereinstimmt, ohne den ersten Parameter.</param>
      <param name="target">Ein Objekt, an das der Delegat gebunden ist. Muss denselben Typ wie der erste Parameter der dynamischen Methode aufweisen.</param>
      <exception cref="T:System.InvalidOperationException">Die dynamische Methode verfügt über keinen Methodentext.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> entspricht nicht demselben Typ wie der erste Parameter der dynamischen Methode und kann diesem Typ nicht zugewiesen werden.  
  
- oder - 
 <paramref name="delegateType" /> weist die falsche Anzahl von Parametern oder die falschen Parametertypen auf.</exception>
      <returns>Ein Delegat des angegebenen Typs, mit dem die dynamische Methode mit dem angegebenen Zielobjekt ausgeführt werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Definiert einen Parameter der dynamischen Methode.</summary>
      <param name="position">Die Position des Parameters in der Parameterliste. Parameter werden beginnend mit der Zahl 1 (für den ersten Parameter) indiziert.</param>
      <param name="attributes">Eine bitweise Kombination von <see cref="T:System.Reflection.ParameterAttributes" />-Werten, die die Attribute des Parameters angibt.</param>
      <param name="parameterName">Der Name des Parameters. Der Name kann eine leere Zeichenfolge sein.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Die Methode hat keine Parameter.  
  
- oder - 
 <paramref name="position" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="position" /> ist größer als die Anzahl der Parameter der Methode.</exception>
      <returns>Gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Gibt die Basisimplementierung für die Methode zurück.</summary>
      <returns>Die Basisimplementierung für die Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Gibt alle für die Methode definierten benutzerdefinierten Attribute zurück.</summary>
      <param name="inherit">
        <see langword="true" />, wenn die Vererbungskette der Methode nach den benutzerdefinierten Attributen durchsucht werden soll, <see langword="false" />, wenn nur die aktuelle Methode überprüft werden soll.</param>
      <returns>Ein Objektarray, das alle benutzerdefinierten Attribute der Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Gibt die benutzerdefinierten Attribute des angegebenen Typs zurück, die auf die Methode angewendet wurden.</summary>
      <param name="attributeType">Ein <see cref="T:System.Type" />, der den Typ des zurückzugebenden benutzerdefinierten Attributs darstellt.</param>
      <param name="inherit">
        <see langword="true" />, wenn die Vererbungskette der Methode nach den benutzerdefinierten Attributen durchsucht werden soll, <see langword="false" />, wenn nur die aktuelle Methode überprüft werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <returns>Ein Array von Objekten, die die Attribute der Methode darstellen und vom Typ <paramref name="attributeType" /> sind oder vom Typ <paramref name="attributeType" /> abgeleitet werden.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>Gibt ein <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekt zurück, das zum Generieren von Methodentext aus Metadatentoken, Bereichen und MSIL-Streams (Microsoft Intermediate Language) verwendet werden kann.</summary>
      <returns>Ein <see cref="T:System.Reflection.Emit.DynamicILInfo" />-Objekt, das zum Generieren von Methodentext aus Metadatentoken, Bereichen und MSIL-Streams verwendet werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Gibt für die Methode einen MSIL-Generator (Microsoft Intermediate Language) mit einer MSIL-Standardstreamgröße von 64 Byte zurück.</summary>
      <returns>Ein <see cref="T:System.Reflection.Emit.ILGenerator" />-Objekt für die Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Gibt für die Methode einen MSIL-Generator (Microsoft Intermediate Language) mit der angegebenen Größe der MSIL-Streams zurück.</summary>
      <param name="streamSize">Die Größe des MSIL-Streams in Bytes.</param>
      <returns>Ein <see cref="T:System.Reflection.Emit.ILGenerator" />-Objekt für die Methode mit der angegebenen Größe der MSIL-Streams.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Gibt die Implementierungsflags für die Methode zurück.</summary>
      <returns>Eine bitweise Kombination von <see cref="T:System.Reflection.MethodImplAttributes" />-Werten, die die Implementierungsflags für die Methode darstellen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Gibt die Parameter der dynamischen Methode zurück.</summary>
      <returns>Ein Array von <see cref="T:System.Reflection.ParameterInfo" />-Objekten, das die Parameter der dynamischen Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Ruft die dynamische Methode mithilfe des angegebenen Parameters und den Einschränkungen des angegebenen Binders mit den angegebenen Kulturinformationen auf.</summary>
      <param name="obj">Dieser Parameter wird bei dynamischen Methoden ignoriert, da er statisch ist. Geben Sie <see langword="null" />an.</param>
      <param name="invokeAttr">Eine bitweise Kombination von <see cref="T:System.Reflection.BindingFlags" />-Werten.</param>
      <param name="binder">Ein <see cref="T:System.Reflection.Binder" />-Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see cref="T:System.Reflection.MemberInfo" />-Objekten über Reflektion ermöglicht. Wenn <paramref name="binder" /> den Wert <see langword="null" /> aufweist, wird der Standardbinder verwendet. Weitere Details finden Sie unter <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Eine Argumentliste. Diese ist ein Array von Argumenten, die hinsichtlich Anzahl, Reihenfolge und Typ mit den Parametern der aufzurufenden Methode identisch sind. Wenn keine Parameter vorhanden sind, muss dieser Parameter gleich <see langword="null" /> sein.</param>
      <param name="culture">Eine Instanz von <see cref="T:System.Globalization.CultureInfo" /> für die Steuerung der Umwandlung von Typen. Wenn dies <see langword="null" /> ist, wird die <see cref="T:System.Globalization.CultureInfo" /> des aktuellen Threads verwendet. Diese Informationen sind z.B. erforderlich, um ein <see cref="T:System.String" />, das 1000 darstellt, ordnungsgemäß in einen <see cref="T:System.Double" />-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.</param>
      <exception cref="T:System.NotSupportedException">Die <see cref="F:System.Reflection.CallingConventions.VarArgs" />-Aufrufkonvention wird nicht unterstützt.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">Die Anzahl der Elemente in <paramref name="parameters" /> stimmt nicht mit der Anzahl der Parameter in der dynamischen Methode überein.</exception>
      <exception cref="T:System.ArgumentException">Der Typ eines oder mehrerer Elemente von <paramref name="parameters" /> entspricht nicht dem Typ des entsprechenden Parameters der dynamischen Methode.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Die dynamische Methode ist einem Modul zugeordnet, nicht anonym gehostet und wurde mit <paramref name="skipVisibility" /> (festgelegt auf <see langword="false" />) erstellt, aber die dynamische Methode greift auf die Member zu, die nicht <see langword="public" /> oder <see langword="internal" /> sind (<see langword="Friend" /> in Visual Basic).  
  
- oder - 
Die dynamische Methode wird anonym gehostet und wurde mit <paramref name="skipVisibility" /> (festgelegt auf <see langword="false" />) erstellt, aber sie greift auf Member zu, die nicht <see langword="public" /> sind.  
  
- oder - 
Die dynamische Methode enthält nicht überprüfbaren Code. Weitere Informationen finden Sie im Abschnitt „Überprüfung“ für <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <returns>Ein <see cref="T:System.Object" />, das den Rückgabewert der aufgerufenen Methode enthält.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Gibt an, ob der Typ des angegebenen benutzerdefinierten Attributs definiert ist.</summary>
      <param name="attributeType">Ein <see cref="T:System.Type" />, der den Typ des benutzerdefinierten Attributs darstellt, nach dem gesucht werden soll.</param>
      <param name="inherit">
        <see langword="true" />, wenn die Vererbungskette der Methode nach den benutzerdefinierten Attributen durchsucht werden soll, <see langword="false" />, wenn nur die aktuelle Methode überprüft werden soll.</param>
      <returns>
        <see langword="true" />, wenn der Typ des angegebenen benutzerdefinierten Attributs definiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Gibt die Signatur der Methode als Zeichenfolge zurück.</summary>
      <returns>Eine Zeichenfolge, die die Methodensignatur darstellt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Ruft die Attribute ab, die beim Erstellen der dynamischen Methode angegeben wurden.</summary>
      <returns>Eine bitweise Kombination der <see cref="T:System.Reflection.MethodAttributes" />-Werte, die die Attribute für die Methode darstellen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Ruft die Aufrufkonvention ab, die beim Erstellen der dynamischen Methode angegeben wurde.</summary>
      <returns>Einer der <see cref="T:System.Reflection.CallingConventions" />-Werte, der die Aufrufkonvention der Methode angibt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Ruft den Typ ab, der die Methode deklariert und für dynamische Methoden immer <see langword="null" /> ist.</summary>
      <returns>Immer <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Ruft einen Wert ab, der angibt, ob die lokalen Variablen in der Methode mit 0 (null) initialisiert werden, oder legt diesen Wert fest.</summary>
      <returns>
        <see langword="true" />, wenn die lokalen Variablen in der Methode mit 0 (null) initialisiert werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>Ruft einen Wert ab, der angibt, ob die aktuelle dynamische Methode sicherheitsrelevant ist und daher wichtige Vorgänge ausführen darf.</summary>
      <exception cref="T:System.InvalidOperationException">Die dynamische Methode weist keinen Methodentext auf.</exception>
      <returns>
        <see langword="true" />, wenn die aktuelle dynamische Methode sicherheitsrelevant ist. <see langword="false" />, wenn sie transparent ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>Ruft einen Wert ab, der angibt, ob die aktuelle dynamische Methode auf der aktuellen Vertrauensebene sicherheitsgeschützt ist, d. h. ob sie wichtige Vorgänge ausführen darf und ob von transparentem Code auf sie zugegriffen werden kann.</summary>
      <exception cref="T:System.InvalidOperationException">Die dynamische Methode weist keinen Methodentext auf.</exception>
      <returns>
        <see langword="true" />, wenn die dynamische Methode auf der aktuellen Vertrauensebene sicherheitsgeschützt ist, <see langword="false" /> wenn sie sicherheitskritisch oder sicherheitstransparent ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>Ruft einen Wert ab, der angibt, ob die aktuelle dynamische Methode auf der aktuellen Vertrauensebene sicherheitstransparent ist und daher keine wichtigen Vorgänge ausführen kann.</summary>
      <exception cref="T:System.InvalidOperationException">Die dynamische Methode weist keinen Methodentext auf.</exception>
      <returns>
        <see langword="true" />, wenn die dynamische Methode auf der aktuellen Vertrauensebene sicherheitstransparent ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>Für dynamische Methoden nicht unterstützt.</summary>
      <exception cref="T:System.InvalidOperationException">Für dynamische Methoden nicht zulässig.</exception>
      <returns>Für dynamische Methoden nicht unterstützt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Ruft das Modul ab, dem die dynamische Methode logisch zugeordnet ist.</summary>
      <returns>Das <see cref="T:System.Reflection.Module" />, dem die aktuelle dynamische Methode zugeordnet ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Ruft den Namen der dynamischen Methode ab.</summary>
      <returns>Der einfache Name der Methode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Ruft die Klasse ab, die bei der Reflektion zum Abrufen der Methode verwendet wurde.</summary>
      <returns>Immer <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Ruft den Rückgabeparameter der dynamischen Methode ab.</summary>
      <returns>Immer <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Ruft den Typ des Rückgabewerts für die dynamische Methode ab.</summary>
      <returns>Ein <see cref="T:System.Type" />, das den Typ des Rückgabewerts der aktuellen Methode darstellt. <see cref="T:System.Void" />, wenn die Methode keinen Rückgabetyp besitzt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Ruft die benutzerdefinierten Attribute des Rückgabetyps für die dynamische Methode ab.</summary>
      <returns>Ein <see cref="T:System.Reflection.ICustomAttributeProvider" />-Objekt, das die benutzerdefinierten Attribute des Rückgabetyps für die dynamische Methode darstellt.</returns>
    </member>
  </members>
</doc>
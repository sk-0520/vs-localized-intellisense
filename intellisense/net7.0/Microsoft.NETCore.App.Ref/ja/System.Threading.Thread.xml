<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>ローカル データを格納するメモリ スロットをカプセル化します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>ガベージ コレクターが <see cref="T:System.LocalDataStoreSlot" /> オブジェクトを再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>
        <see cref="T:System.Threading.Thread" /> のアパートメント状態を指定します。</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <see cref="T:System.Threading.Thread" /> は、マルチスレッド アパートメントを作成および入力します。</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <see cref="T:System.Threading.Thread" /> は、シングルスレッド アパートメントを作成および入力します。</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>
        <see cref="P:System.Threading.Thread.ApartmentState" /> プロパティが設定されていません。</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>現在のスレッドで圧縮スタックの設定とキャプチャを行うメソッドを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>現在のスレッドから圧縮スタックをキャプチャします。</summary>
      <returns>
        <see cref="T:System.Threading.CompressedStack" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>現在の圧縮スタックのコピーを作成します。</summary>
      <returns>現在の圧縮スタックを表す <see cref="T:System.Threading.CompressedStack" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>現在のスレッドに対する圧縮スタックを取得します。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出しチェイン内の呼び出し元に、アンマネージ コードへのアクセス許可がありません。  
  
- または - 
<see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> への要求が失敗しました。</exception>
      <returns>現在のスレッドに対する <see cref="T:System.Threading.CompressedStack" />。</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、この実行コンテキストのインスタンスを再作成するのに必要な論理コンテキスト情報を設定します。</summary>
      <param name="info">シリアル化情報が設定される <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context">シリアル化の対象コンテキストを表す <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>指定した圧縮スタックで、現在のスレッドに対してメソッドを実行します。</summary>
      <param name="compressedStack">設定する <see cref="T:System.Threading.CompressedStack" />。</param>
      <param name="callback">指定したセキュリティ コンテキストで実行するメソッドを表す <see cref="T:System.Threading.ContextCallback" />。</param>
      <param name="state">コールバック メソッドに渡すオブジェクト。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> が <see langword="null" />です。</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>
        <see cref="T:System.Threading.Thread" /> で実行するメソッドを表します。</summary>
      <param name="obj">スレッド プロシージャ用のデータを含むオブジェクト。</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>スレッドを作成および制御し、その優先順位の設定およびステータスの取得を実行します。</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>スレッドの開始時にオブジェクトをスレッドに渡すことを許可するデリゲートを指定して、<see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="start">このスレッドが実行を開始するときに呼び出されるメソッドを表すデリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>
        <see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化して、スレッドの開始時にオブジェクトをスレッドに渡すことを許可するデリゲートとこのスレッドの最大スタック サイズを指定します。</summary>
      <param name="start">このスレッドが実行を開始するときに呼び出されるメソッドを表す <see cref="T:System.Threading.ParameterizedThreadStart" /> デリゲート。</param>
      <param name="maxStackSize">スレッドが使用する最大スタック サイズ (バイト単位)。実行可能ファイルのヘッダーで指定された既定の最大スタック サイズを使用する場合は 0。  
  
重要: 部分的に信頼されているコードでは、既定のスタック サイズを超える <paramref name="maxStackSize" /> は無視されます。 例外をスローすることはありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>
        <see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="start">このスレッドが実行を開始するときに呼び出されるメソッドを表す <see cref="T:System.Threading.ThreadStart" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>
        <see cref="T:System.Threading.Thread" /> クラスの新しいインスタンスを初期化して、スレッドの最大スタック サイズを指定します。</summary>
      <param name="start">このスレッドが実行を開始するときに呼び出されるメソッドを表す <see cref="T:System.Threading.ThreadStart" /> デリゲート。</param>
      <param name="maxStackSize">スレッドが使用する最大スタック サイズ (バイト単位)。実行可能ファイルのヘッダーで指定された既定の最大スタック サイズを使用する場合は 0。  
  
重要: 部分的に信頼されているコードでは、既定のスタック サイズを超える <paramref name="maxStackSize" /> は無視されます。 例外をスローすることはありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>このメソッドが呼び出された対象のスレッドで、そのスレッドの終了プロセスを開始する <see cref="T:System.Threading.ThreadAbortException" /> を発生させます。 このメソッドを呼び出すと、通常、スレッドが終了します。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: すべてのケース。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.Threading.ThreadStateException">中止しようとしているスレッドが現在中断されています。</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>このメソッドが呼び出された対象のスレッドで、スレッドの終了プロセスを開始する <see cref="T:System.Threading.ThreadAbortException" /> を発生させます。またスレッドの終了に関する例外情報も提供します。 このメソッドを呼び出すと、通常、スレッドが終了します。</summary>
      <param name="stateInfo">中止するスレッドで使用できる、状態などのアプリケーション固有の情報を格納するオブジェクト。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: すべてのケース。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
      <exception cref="T:System.Threading.ThreadStateException">中止しようとしているスレッドが現在中断されています。</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>無名のデータ スロットをすべてのスレッドに割り当てます。 パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</summary>
      <returns>すべてのスレッドに割り当てられた名前付きのデータ スロット。</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>名前付きのデータ スロットをすべてのスレッドに割り当てます。 パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</summary>
      <param name="name">割り当てられるデータ スロットの名前。</param>
      <exception cref="T:System.ArgumentException">指定された名前の名前付きデータ スロットは、すでに存在します。</exception>
      <returns>すべてのスレッドに割り当てられた名前付きのデータ スロット。</returns>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>スレッドの中止または処理されない例外の影響によりアプリケーション ドメイン内の他のタスクが悪影響を受ける可能性があるコード領域に実行が入ることをホストに通知します。</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>マネージド コードが現在のオペレーティング システムの物理スレッドの ID に依存する命令の実行を開始することをホストに通知します。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>現在のスレッドのランタイム呼び出し可能ラッパー (RCW: Runtime Callable Wrapper) の自動クリーンアップをオフにします。</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>スレッドの中止または処理されない例外の影響が現在のタスクだけに及ぶコード領域に実行が入ることをホストに通知します。</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>マネージド コードが現在のオペレーティング システムの物理スレッドの ID に依存する命令の実行を完了したことをホストに通知します。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>ガベージ コレクターが <see cref="T:System.Threading.Thread" /> オブジェクトを再利用しているときに、リソースが解放され、他のクリーンアップ操作が確実に実行されるようにします。</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>プロセス内のすべてのスレッドに関して、名前とスロットの関連付けを解除します。 パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</summary>
      <param name="name">解放されるデータ スロットの名前。</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>アパートメント状態を示す <see cref="T:System.Threading.ApartmentState" /> 値を返します。</summary>
      <returns>マネージド スレッドのアパートメント状態を示す <see cref="T:System.Threading.ApartmentState" /> 値の 1 つ。 既定値は、<see cref="F:System.Threading.ApartmentState.Unknown" /> です。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>現在のスレッドのスタックをキャプチャするために使用できる <see cref="T:System.Threading.CompressedStack" /> オブジェクトを返します。</summary>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
      <returns>なし。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId">
      <summary>現在のスレッドが実行されているプロセッサを示すために使用される ID を取得します。</summary>
      <returns>キャッシュされたプロセッサ ID を表す整数。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>現在のスレッドの現在のドメイン内で指定した現在のスレッドのスロットから値を取得します。 パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</summary>
      <param name="slot">値の取得元の <see cref="T:System.LocalDataStoreSlot" />。</param>
      <returns>取得された値。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>現在のスレッドが実行されている現在のドメインを返します。</summary>
      <returns>実行中のスレッドの現在のアプリケーション ドメインを表す <see cref="T:System.AppDomain" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>一意のアプリケーション ドメイン識別子を返します。</summary>
      <returns>アプリケーション ドメインを一意に識別する 32 ビット符号付き整数。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>現在のスレッドのハッシュ コードを返します。</summary>
      <returns>整数ハッシュ コード値。</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>名前付きデータ スロットを検索します。 パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</summary>
      <param name="name">ローカル データ スロットの名前。</param>
      <returns>このスレッドに割り当てられた <see cref="T:System.LocalDataStoreSlot" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>
        <see cref="F:System.Threading.ThreadState.WaitSleepJoin" /> スレッド状態のスレッドを中断します。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出し元に適切な <see cref="T:System.Security.Permissions.SecurityPermission" /> がありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>このインスタンスが表すスレッドが終了するまで、呼び出し元のスレッドをブロックします。標準 COM および <see langword="SendMessage" /> ポンピングの実行は継続されます。</summary>
      <exception cref="T:System.Threading.ThreadStateException">呼び出し元が、<see cref="F:System.Threading.ThreadState.Unstarted" /> 状態のスレッドを結合しようとしました。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">待機中にスレッドが中断されました。</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>このインスタンスが表すスレッドが終了するまで、または指定された時間が経過するまで、呼び出し元のスレッドをブロックします。標準 COM/SendMessage ポンピングの実行は継続されます。</summary>
      <param name="millisecondsTimeout">スレッドが終了するまでの待機時間を表すミリ秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> の値が負の値であり、<see cref="F:System.Threading.Timeout.Infinite" /> (ミリ秒単位) と等しくありません。</exception>
      <exception cref="T:System.Threading.ThreadStateException">スレッドは開始していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> は -1 未満です (Timeout.Infinite)。</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">待機中にスレッドが中断されました。</exception>
      <returns>スレッドが終了した場合は <see langword="true" />。<paramref name="millisecondsTimeout" /> パラメーターで指定した時間が経過してもスレッドが終了していない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>このインスタンスが表すスレッドが終了するまで、または指定された時間が経過するまで、呼び出し元のスレッドをブロックします。標準 COM/SendMessage ポンピングの実行は継続されます。</summary>
      <param name="timeout">スレッドが終了するのを待機する時間に設定される <see cref="T:System.TimeSpan" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> の値が負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> (ミリ秒単位) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</exception>
      <exception cref="T:System.Threading.ThreadStateException">呼び出し元が、<see cref="F:System.Threading.ThreadState.Unstarted" /> 状態のスレッドを結合しようとしました。</exception>
      <returns>スレッドが終了した場合は <see langword="true" />。<paramref name="timeout" /> パラメーターで指定した時間が経過してもスレッドが終了していない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>メモリ アクセスを同期します。現在のスレッドを実行中のプロセッサは、<see cref="M:System.Threading.Thread.MemoryBarrier" /> を呼び出す前のメモリ アクセスを <see cref="M:System.Threading.Thread.MemoryBarrier" /> の呼び出し後のメモリ アクセスより後に実行するように命令を並べ替えることはできなくなります。</summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>現在のスレッドに対して要求された <see cref="M:System.Threading.Thread.Abort(System.Object)" /> をキャンセルします。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: すべてのケース。</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> は現在のスレッドで呼び出されませんでした。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元には、現在のスレッドに対する必要なセキュリティ アクセス許可がありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>中断されたスレッドを再開します。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: すべてのケース。</exception>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが開始されていないか、実行されていません。または中断状態にはありません。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に適切な <see cref="T:System.Security.Permissions.SecurityPermission" /> がありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>スレッドを開始する前にそのアパートメント状態を設定します。</summary>
      <param name="state">新しいアパートメント状態。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: macOS および Linux 上のすべてのケース。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> は有効なアパートメント状態ではありません。</exception>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが既に開始されています。</exception>
      <exception cref="T:System.InvalidOperationException">アパートメント状態は、すでに初期化されています。</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>キャプチャした <see cref="T:System.Threading.CompressedStack" /> を現在のスレッドに適用します。</summary>
      <param name="stack">現在のスレッドに適用される <see cref="T:System.Threading.CompressedStack" /> オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">すべての場合。</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>現在実行中のスレッド上にある指定されたスロット内のデータを、そのスレッドの現在のドメインに設定します。 パフォーマンスを向上させるためには、<see cref="T:System.ThreadStaticAttribute" /> 属性でマークされたフィールドを代わりに使用します。</summary>
      <param name="slot">値を設定する <see cref="T:System.LocalDataStoreSlot" />。</param>
      <param name="data">設定される値です。</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>指定したミリ秒数の間現在のスレッドを中断します。</summary>
      <param name="millisecondsTimeout">スレッドが中断ブロックされるミリ秒数。 <paramref name="millisecondsTimeout" /> 引数の値が 0 である場合は、スレッドは自らのタイム スライスの残りの部分を放棄し、実行する準備ができている同じ優先順位の他のスレッドに渡します。 優先順位が同じで実行する準備ができている他のスレッドが存在しない場合は、現在のスレッドの実行は中断されません。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">タイムアウト値が負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> に等しくありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>指定した時間の長さにわたって現在のスレッドを中断します。</summary>
      <param name="timeout">スレッドが中断される時間の長さ。 <paramref name="timeout" /> 引数の値が <see cref="F:System.TimeSpan.Zero" /> である場合は、スレッドは自らのタイム スライスの残りの部分を放棄し、実行する準備ができている同じ優先順位の他のスレッドに渡します。 優先順位が同じで実行する準備ができている他のスレッドが存在しない場合は、現在のスレッドの実行は中断されません。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> の値が負の値で、<see cref="F:System.Threading.Timeout.Infinite" /> (ミリ秒単位) と等しくないか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>スレッドが、<paramref name="iterations" /> パラメーターで定義される時間だけ待機するようにします。</summary>
      <param name="iterations">スレッドが待機する時間を定義する 32 ビット符号付き整数。</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>オペレーティング システムによって、現在のインスタンスの状態を <see cref="F:System.Threading.ThreadState.Running" /> に変更します。</summary>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが既に開始されています。</exception>
      <exception cref="T:System.OutOfMemoryException">メモリ不足のため、このスレッドを開始できません。</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>オペレーティング システムによって現在のインスタンスの状態が <see cref="F:System.Threading.ThreadState.Running" /> に変更され、オプションでスレッドが実行するメソッドで使用するデータを格納するオブジェクトが提供されます。</summary>
      <param name="parameter">スレッドが実行するメソッドで使用するデータを格納するオブジェクト。</param>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが既に開始されています。</exception>
      <exception cref="T:System.OutOfMemoryException">メモリ不足のため、このスレッドを開始できません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Threading.ParameterizedThreadStart" /> デリゲートの代わりに <see cref="T:System.Threading.ThreadStart" /> デリゲートを使用して、このスレッドは作成されました。</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>スレッドを中断します。スレッドが既に中断されている場合は無効です。</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: すべてのケース。</exception>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが開始していないか、または停止しています。</exception>
      <exception cref="T:System.Security.SecurityException">呼び出し元に適切な <see cref="T:System.Security.Permissions.SecurityPermission" /> がありません。</exception>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>スレッドを開始する前にそのアパートメント状態を設定します。</summary>
      <param name="state">新しいアパートメント状態。</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 以降および .NET Core: macOS および Linux 上のすべてのケース。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> は有効なアパートメント状態ではありません。</exception>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが開始され、終了したか、スレッドの実行中にスレッドのコンテキストから呼び出しが行われていません。</exception>
      <returns>アパートメント状態が設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>フィールドの値を読み取ります。 この値は、プロセッサの数やプロセッサ キャッシュの状態にかかわらず、コンピューター内のいずれかのプロセッサによって書き込まれた最新の値です。</summary>
      <param name="address">読み取られるフィールド。</param>
      <returns>いずれかのプロセッサによってフィールドに書き込まれた最新の値。</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>値をフィールドにすぐに書き込みます。値はコンピューター内のすべてのプロセッサに対して可視になります。</summary>
      <param name="address">値を書き込むフィールド。</param>
      <param name="value">書き込む値。</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>呼び出し元のスレッドから、現在のプロセッサ上で実行する準備が整っている別のスレッドに実行を切り替えます。 実行の切り替え先のスレッドは、オペレーティング システムによって選択されます。</summary>
      <returns>オペレーティング システムによって実行が別のスレッドに切り替えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>このスレッドのアパートメント状態を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">このプロパティを、有効ではないアパートメント状態に設定しようとしました (シングル スレッド アパートメント (<see langword="STA" />) またはマルチ スレッド アパートメント (<see langword="MTA" />) 以外の状態)。</exception>
      <returns>
        <see cref="T:System.Threading.ApartmentState" /> 値のいずれか 1 つ。 初期値は <see langword="Unknown" /> です。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>現在のスレッドのカルチャを取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
      <exception cref="T:System.InvalidOperationException">.NET Core のみ: 別のスレッドからのスレッドのカルチャの読み取りまたは書き込みはサポートされていません。</exception>
      <returns>現在のスレッドでカルチャを表すオブジェクト。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>ロールベースのセキュリティに関する、スレッドの現在のプリンシパルを取得または設定します。</summary>
      <exception cref="T:System.Security.SecurityException">呼び出し元に、プリンシパルを設定するために必要なアクセス許可がありません。</exception>
      <returns>セキュリティ コンテキストを表す <see cref="T:System.Security.Principal.IPrincipal" /> 値。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>現在実行中のスレッドを取得します。</summary>
      <returns>現在実行中のスレッドを表す <see cref="T:System.Threading.Thread" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>実行時にカルチャ固有のリソースを検索するためにリソース マネージャーで使用される、現在のカルチャを取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
      <exception cref="T:System.ArgumentException">プロパティが、リソース ファイルの検索に使用できないカルチャ名に設定されています。 リソース ファイル名に使用できるのは、文字、数字、ハイフン、またはアンダースコアのみです。</exception>
      <exception cref="T:System.InvalidOperationException">.NET Core のみ: 別のスレッドからのスレッドのカルチャの読み取りまたは書き込みはサポートされていません。</exception>
      <returns>現在のカルチャを表すオブジェクト。</returns>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>現在のスレッドのさまざまなコンテキストに関する情報を格納する <see cref="T:System.Threading.ExecutionContext" /> オブジェクトを取得します。</summary>
      <returns>現在のスレッドのコンテキスト情報を統合する <see cref="T:System.Threading.ExecutionContext" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>現在のスレッドの実行ステータスを示す値を取得します。</summary>
      <returns>このスレッドが起動していて、正常終了しておらず中止されてもいない場合は<see langword="true" /> 。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>スレッドがバックグラウンド スレッドであるかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが動作していません</exception>
      <returns>このスレッドがバックグラウンド スレッドである場合またはバックグラウンド スレッドになる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>スレッドがマネージド スレッド プールに所属しているかどうかを示す値を取得します。</summary>
      <returns>このスレッドがマネージド スレッド プールに所属している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>現在のマネージド スレッドの一意の識別子を取得します。</summary>
      <returns>このマネージド スレッドの一意の識別子を表す整数。</returns>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>スレッドの名前を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">設定操作が要求されましたが、<see langword="Name" /> プロパティは既に設定されています。</exception>
      <returns>スレッドの名前を含む文字列。名前が設定されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>スレッドのスケジューリング優先順位を示す値を取得または設定します。</summary>
      <exception cref="T:System.Threading.ThreadStateException">スレッドが、<see cref="F:System.Threading.ThreadState.Aborted" /> などの最終状態に達しました。</exception>
      <exception cref="T:System.ArgumentException">セット操作に対して設定された値が有効な <see cref="T:System.Threading.ThreadPriority" /> 値ではありません。</exception>
      <returns>
        <see cref="T:System.Threading.ThreadPriority" /> 値のいずれか 1 つ。 既定値は <see cref="F:System.Threading.ThreadPriority.Normal" /> です。</returns>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>現在のスレッドの状態を示す値を取得します。</summary>
      <returns>現在のスレッドの状態を示す <see cref="T:System.Threading.ThreadState" /> 値の 1 つ。 初期値は <see cref="F:System.Threading.ThreadState.Unstarted" /> です。</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>
        <see cref="M:System.Threading.Thread.Abort(System.Object)" /> メソッドが呼び出されるときにスローされる例外。 このクラスは継承できません。</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>スレッドの中止に関連するアプリケーション固有の情報を含むオブジェクトを取得します。</summary>
      <returns>アプリケーション固有の情報を含むオブジェクト。</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>
        <see cref="E:System.Windows.Forms.Application.ThreadException" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>
        <see cref="T:System.Threading.ThreadExceptionEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="t">発生した <see cref="T:System.Exception" />。</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>発生した <see cref="T:System.Exception" /> を取得します。</summary>
      <returns>発生した <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>
        <see cref="T:System.Windows.Forms.Application" /> の <see cref="E:System.Windows.Forms.Application.ThreadException" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender">イベントのソース。</param>
      <param name="e">イベント データを格納している <see cref="T:System.Threading.ThreadExceptionEventArgs" />。</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>
        <see cref="T:System.Threading.Thread" /> が待機状態のときに中断されるとスローされる例外。</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>
        <see cref="T:System.Threading.ThreadInterruptedException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Threading.ThreadInterruptedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Threading.ThreadInterruptedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Threading.ThreadInterruptedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>
        <see cref="T:System.Threading.Thread" /> のスケジューリング優先順位を指定します。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> は優先順位が <see langword="Highest" /> のスレッドから <see langword="Normal" /> のスレッドの間にスケジュールできます。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> は優先順位が <see langword="Normal" /> のスレッドから <see langword="Lowest" /> のスレッドの間にスケジュールできます。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <see cref="T:System.Threading.Thread" /> は、どの優先順位のスレッドの前にでもスケジュールできます。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <see cref="T:System.Threading.Thread" /> は、ほかのどの優先順位のスレッドの後でもスケジュールできます。</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <see cref="T:System.Threading.Thread" /> は優先順位が <see langword="AboveNormal" /> のスレッドから <see langword="BelowNormal" /> のスレッドの間にスケジュールできます。 スレッドの既定の優先順位は <see langword="Normal" /> です。</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>
        <see cref="T:System.Threading.Thread" /> で実行するメソッドを表します。</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>基になるオペレーティング システムのスレッドが起動された後、スレッドでユーザー コードを実行する準備が完了する前にマネージド スレッドでエラーが発生したときにスローされる例外。</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>
        <see cref="T:System.Threading.Thread" /> の実行状態を指定します。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>スレッド状態に <see cref="F:System.Threading.ThreadState.AbortRequested" /> が含まれ、そのスレッドは停止していますが、状態はまだ <see cref="F:System.Threading.ThreadState.Stopped" /> に変わっていません。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>スレッド上で <see cref="M:System.Threading.Thread.Abort(System.Object)" /> メソッドを呼び出しますが、そのスレッドの終了を試みる保留中の <see cref="T:System.Threading.ThreadAbortException" /> をスレッドが受け取っていません。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>スレッドは、フォアグラウンド スレッドではなく、バックグランド スレッドとして実行します。 この状態は、<see cref="P:System.Threading.Thread.IsBackground" /> プロパティを設定して制御されます。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>スレッドは開始されており、まだ停止していません。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>スレッドを停止します。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>スレッドの停止を要求します。 これは、内部でだけ使用します。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>スレッドは中断しています。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>スレッドの中断を要求します。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>スレッド上に <see cref="M:System.Threading.Thread.Start" /> メソッドを呼び出しません。</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>スレッドがブロックされています。 これは、<see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> または <see cref="M:System.Threading.Thread.Join" /> の呼び出し、ロックの要求 (たとえば、<see cref="M:System.Threading.Monitor.Enter(System.Object)" /> や <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" /> の呼び出しによる)、または <see cref="T:System.Threading.ManualResetEvent" /> などのスレッド同期オブジェクトの待機の結果である可能性があります。</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>メソッドの呼び出しで <see cref="T:System.Threading.Thread" /> が無効な <see cref="P:System.Threading.Thread.ThreadState" /> である場合は、例外がスローされます。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>
        <see cref="T:System.Threading.ThreadStateException" /> クラスの新しいインスタンスを、既定のプロパティを使用して初期化します。</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Threading.ThreadStateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされている例外に関するシリアル化済みオブジェクト データを保持している <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先についてのコンテキスト情報を含む <see cref="T:System.Runtime.Serialization.StreamingContext" /> です。</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Threading.ThreadStateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Threading.ThreadStateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外の原因を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。 <paramref name="innerException" /> パラメーターが <see langword="null" /> でない場合は、内部例外を処理する <see langword="catch" /> ブロックで現在の例外が発生します。</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>Stellt den Zugriff auf Instanzen des C#-Code-Generators und des C#-Codecompilers bereit.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.CSharp.CSharpCodeProvider" />-Klasse mit den angegebenen Anbieteroptionen.</summary>
      <param name="providerOptions">Ein <see cref="T:System.Collections.Generic.IDictionary`2" />-Objekt, das die Anbieteroptionen aus der Konfigurationsdatei enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>Ruft eine Instanz des C#-Codecompilers ab.</summary>
      <returns>Eine Instanz der C#-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>Ruft eine Instanz des C#-Code-Generators ab.</summary>
      <returns>Eine Instanz der C#-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen Klassenmember unter Verwendung der angegebenen TextWriter- und Code-Generator-Optionen.</summary>
      <param name="member">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, für den Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, in den geschrieben werden soll.</param>
      <param name="options">Der beim Generieren von Code zu verwendende <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Objekttyp ab.</summary>
      <param name="type">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
      <returns>Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ.</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>Ruft die beim Erstellen von Quellcodedateien zu verwendende Dateinamenerweiterung ab.</summary>
      <returns>Die für generierte Quellcodedateien zu verwendende Dateierweiterung.</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>Stellt den Zugriff auf Instanzen des Visual Basic-Code-Generators und des Visual Basic-Codecompilers bereit.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />-Klasse.</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Initialisiert eine neue Instanz der <see cref="T:Microsoft.VisualBasic.VBCodeProvider" />-Klasse mit den angegebenen Anbieteroptionen.</summary>
      <param name="providerOptions">Ein <see cref="T:System.Collections.Generic.IDictionary`2" />-Objekt, das die Anbieteroptionen aus der Konfigurationsdatei enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>Ruft eine Instanz des Visual Basic-Codecompilers ab.</summary>
      <returns>Eine Instanz der Visual Basic-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>Ruft eine Instanz des Visual Basic-Code-Generators ab.</summary>
      <returns>Eine Instanz der Visual Basic-Implementierung von <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen Klassenmember unter Verwendung der angegebenen TextWriter- und Code-Generator-Optionen.</summary>
      <param name="member">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, für den Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, in den geschrieben werden soll.</param>
      <param name="options">Der beim Generieren von Code zu verwendende <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />.</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Objekttyp ab.</summary>
      <param name="type">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
      <returns>Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>Ruft die beim Erstellen von Quellcodedateien zu verwendende Dateinamenerweiterung ab.</summary>
      <returns>Die für generierte Quellcodedateien zu verwendende Dateierweiterung.</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>Ruft einen Bezeichner für Sprachfeatures ab.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" />, die bestimmte Features der Sprache angeben.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>Stellt einen Verweis auf den Wert eines Arguments dar, das an eine Methode übergeben wurde.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />-Klasse unter Verwendung des angegebenen Parameternamens.</summary>
      <param name="parameterName">Der Name des Parameters, auf den verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>Ruft den Namen des Parameters ab, auf den dieser Ausdruck verweist, oder legt diesen fest.</summary>
      <returns>Der Name des Parameters, auf den verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>Stellt einen Ausdruck dar, der ein Array erstellt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und des Codeausdrucks, der die Anzahl der Indizes für das Array angibt.</summary>
      <param name="createType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Arrays angibt.</param>
      <param name="size">Ein Ausdruck, der die Anzahl der Indizes des zu erstellenden Arrays angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und der angegebenen Initialisierungsausdrücke.</summary>
      <param name="createType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Arrays angibt.</param>
      <param name="initializers">Ein Array von Ausdrücken, die zum Initialisieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und der Anzahl der Indizes für das Array.</summary>
      <param name="createType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Arrays angibt.</param>
      <param name="size">Die Anzahl der Indizes des zu erstellenden Arrays.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Namens des Arraydatentyps sowie des Codeausdrucks, der die Anzahl der Indizes für das Array angibt.</summary>
      <param name="createType">Der Name des Datentyps für das zu erstellende Array.</param>
      <param name="size">Ein Ausdruck, der die Anzahl der Indizes des zu erstellenden Arrays angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Namens des Datentyps für das Array sowie der Initialisierungen.</summary>
      <param name="createType">Der Name des Datentyps für das zu erstellende Array.</param>
      <param name="initializers">Ein Array von Ausdrücken, die zum Initialisieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Namens des Arraydatentyps und der Anzahl der Indizes für das Array.</summary>
      <param name="createType">Der Name des Datentyps für das zu erstellende Array.</param>
      <param name="size">Die Anzahl der Indizes des zu erstellenden Arrays.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und des Codeausdrucks, der die Anzahl der Indizes für das Array angibt.</summary>
      <param name="createType">Der Datentyp des zu erstellenden Arrays.</param>
      <param name="size">Ein Ausdruck, der die Anzahl der Indizes des zu erstellenden Arrays angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse, wobei der angegebene Arraydatentyp und die angegebenen Initialisierungen verwendet werden.</summary>
      <param name="createType">Der Datentyp des zu erstellenden Arrays.</param>
      <param name="initializers">Ein Array von Ausdrücken, die zum Initialisieren des Arrays verwendet werden.</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayCreateExpression" />-Klasse unter Verwendung des angegebenen Arraydatentyps und der Anzahl der Indizes für das Array.</summary>
      <param name="createType">Der Datentyp des zu erstellenden Arrays.</param>
      <param name="size">Die Anzahl der Indizes des zu erstellenden Arrays.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>Ruft den Typ des zu erstellenden Arrays ab oder legt ihn fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ des Arrays angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>Ruft die Initialisierungen ab, mit denen das Array initialisiert werden soll.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Initialisierungswerte angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>Ruft die Anzahl der Indizes im Array ab oder legt diese fest.</summary>
      <returns>Die Anzahl der Indizes im Array.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>Ruft den Ausdruck ab, der die Größe des Arrays angibt, oder legt ihn fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, der die Größe des Arrays angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>Stellt einen Verweis auf den Index eines Arrays dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und der angegebenen Indizes.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielarray des Indexers angibt.</param>
      <param name="indices">Der Index bzw. die Indizes, auf den bzw. die verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>Ruft den Index oder die Indizes des Indexerausdrucks ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die den Index oder die Indizes des Indexerausdrucks angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>Ruft das Zielobjekt des Arrayindexers ab oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Array darstellt, das indiziert wird.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>Stellt eine einfache Zuweisungsanweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAssignStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>Initialisiert unter Verwendung der angegebenen Ausdrücke eine neue Instanz der <see cref="T:System.CodeDom.CodeAssignStatement" />-Klasse.</summary>
      <param name="left">Die Variable, der ein Wert zugewiesen werden soll.</param>
      <param name="right">Der Wert, der zugewiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>Ruft den Ausdruck ab, der das Objekt oder den Verweis darstellt, dem ein Wert zugewiesen werden soll, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt oder den Verweis angibt, dem ein Wert zugewiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>Ruft den Ausdruck ab, der das zuzuweisende Objekt oder den zuzuweisenden Verweis darstellt, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das zuzuweisende Objekt oder den zuzuweisenden Verweis angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>Stellt eine Anweisung dar, die einen Ereignishandlerdelegaten an ein Ereignis anfügt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttachEventStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttachEventStatement" />-Klasse mit dem angegebenen Ereignis und Delegaten.</summary>
      <param name="eventRef">Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> zur Angabe des Ereignisses, an das ein Ereignishandler angefügt werden soll.</param>
      <param name="listener">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den neuen Ereignishandler angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttachEventStatement" />-Klasse unter Verwendung des angegebenen Objekts mit dem Ereignis, Ereignisnamen und Ereignishandlerdelegaten.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</param>
      <param name="eventName">Der Name des Ereignisses, an das ein Ereignishandler angefügt werden soll.</param>
      <param name="listener">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den neuen Ereignishandler angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>Ruft das Ereignis ab, an das ein Ereignishandlerdelegat angefügt werden soll, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> zur Angabe des Ereignisses, an das ein Ereignishandler angefügt werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>Ruft den neuen Ereignishandlerdelegaten ab, der an das Ereignis angefügt werden soll, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den neuen anzufügenden Ereignishandler angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>Stellt ein Argument dar, das in einer Deklaration eines Metadatenattributs verwendet wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse unter Verwendung des angegebenen Werts.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Wert des Arguments darstellt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse unter Verwendung des angegebenen Namens und Werts.</summary>
      <param name="name">Der Name der Attributeigenschaft, auf die das Argument angewendet wird.</param>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Wert des Arguments darstellt.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>Ruft den Namen des Attributs ab oder legt diesen fest.</summary>
      <returns>Der Name der Attributeigenschaft, für die das Argument bestimmt ist.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>Ruft den Wert für das Attributargument ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Wert für das Attributargument angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeAttributeArgument" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeArgument" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeAttributeArgument" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeArgument" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>Stellt eine Attributdeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Codetypverweises.</summary>
      <param name="attributeType">Der <see cref="T:System.CodeDom.CodeTypeReference" />, der das Attribut angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Codetypverweises und der angegebenen Argumente.</summary>
      <param name="attributeType">Der <see cref="T:System.CodeDom.CodeTypeReference" />, der das Attribut angibt.</param>
      <param name="arguments">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeArgument" />, das die Argumente für das Attribut enthält.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Namens.</summary>
      <param name="name">Der Name des Attributs.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse unter Verwendung des angegebenen Namens und Arguments.</summary>
      <param name="name">Der Name des Attributs.</param>
      <param name="arguments">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeArgument" />, das die Argumente für das Attribut enthält.</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>Ruft die Argumente für das Attribut ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />, die die Argumente für das Attribut enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>Ruft den Codetypverweis für die Deklaration des Codeattributs ab.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der die <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>Ruft den Namen des zu deklarierenden Attributs ab oder legt diesen fest.</summary>
      <returns>Der Name des Attributs.</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Fügt der Auflistung ein <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt mit dem angegebenen Wert hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt enthält, oder legt diesen fest.</summary>
      <param name="value">Das zu suchende <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>Der Index in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Objekt am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeDeclaration" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>Stellt einen Verweis auf die Basisklasse dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>Stellt einen Ausdruck dar, der aus einer binären Operation zwischen zwei Ausdrücken besteht.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>Initialisiert mit den angegebenen Parametern eine neue Instanz der <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />-Klasse.</summary>
      <param name="left">Die <see cref="T:System.CodeDom.CodeExpression" />, die links vom Operator steht.</param>
      <param name="op">Ein <see cref="T:System.CodeDom.CodeBinaryOperatorType" />, der den Typ des Operators angibt.</param>
      <param name="right">Die <see cref="T:System.CodeDom.CodeExpression" />, die rechts vom Operator steht.</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>Ruft den Codeausdruck ab, der links vom Operator steht, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den linken Operanden angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>Ruft den Operator im Ausdruck für binäre Operatoren ab oder legt diesen fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeBinaryOperatorType" />, der den Typ des Operators im Ausdruck angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>Ruft den Codeausdruck ab, der rechts vom Operator steht, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den rechten Operanden angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>Definiert Bezeichner für unterstützte binäre Operatoren.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>Additionsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>Zuweisungsoperator.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>Bitweiser Operator AND</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>Bitweiser Operator OR</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>Boolescher Operator AND Dies stellt einen Kurzschlussoperator dar. Ein Kurzschlussoperator wertet nur die für die Rückgabe eines korrekten Werts erforderliche Anzahl von Ausdrücken aus.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>Boolescher Operator OR Dies stellt einen Kurzschlussoperator dar. Ein Kurzschlussoperator wertet nur die für die Rückgabe eines korrekten Werts erforderliche Anzahl von Ausdrücken aus.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>Divisionsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>Größer als-Operator.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>Operator 'Größer oder gleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>Operator 'Identität gleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>Operator 'Identität ungleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>Kleiner als-Operator.</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>Operator 'Kleiner oder gleich'</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>Operator Modulo</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>Multiplikationsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>Subtraktionsoperator</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>Operator 'Wert gleich'</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>Stellt einen Ausdruck dar, der in einen Datentyp oder in eine Schnittstelle umgewandelt wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>Initialisiert unter Verwendung des angegebenen Zieltyps und Ausdrucks eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
      <param name="targetType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Zieltyp der Typumwandlung angibt.</param>
      <param name="expression">Die umzuwandelnde <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert unter Verwendung des angegebenen Zieltyps und Ausdrucks eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
      <param name="targetType">Der Name des Zieltyps für die Typumwandlung.</param>
      <param name="expression">Die umzuwandelnde <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>Initialisiert unter Verwendung des angegebenen Zieltyps und Ausdrucks eine neue Instanz der <see cref="T:System.CodeDom.CodeCastExpression" />-Klasse.</summary>
      <param name="targetType">Der Zieldatentyp für die Typumwandlung.</param>
      <param name="expression">Die umzuwandelnde <see cref="T:System.CodeDom.CodeExpression" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>Ruft den umzuwandelnden Ausdruck ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den umzuwandelnden Code angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>Ruft den Zieltyp der Typumwandlung ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Zieltyp für die Umwandlung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>Stellt einen <see langword="catch" />-Ausnahmeblock einer <see langword="try/catch" />-Anweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen für die Ausnahme.</summary>
      <param name="localName">Der Name der lokalen Variablen, die in der catch-Klausel für die Ausnahme deklariert ist. Diese Eingabe ist optional.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen für die Ausnahme und des Ausnahmetyps.</summary>
      <param name="localName">Der Name der lokalen Variablen, die in der catch-Klausel für die Ausnahme deklariert ist. Diese Eingabe ist optional.</param>
      <param name="catchExceptionType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der abzufangenden Ausnahme angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClause" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen für die Ausnahme, des Ausnahmetyps und der Anweisungsauflistung.</summary>
      <param name="localName">Der Name der lokalen Variablen, die in der catch-Klausel für die Ausnahme deklariert ist. Diese Eingabe ist optional.</param>
      <param name="catchExceptionType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der abzufangenden Ausnahme angibt.</param>
      <param name="statements">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die den Inhalt des catch-Blocks darstellen.</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>Ruft den Typ der Ausnahme ab, die mit dem catch-Block behandelt werden soll, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der zu behandelnden Ausnahme angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>Ruft den Variablennamen der Ausnahme ab, die von der <see langword="catch" />-Klausel behandelt wird, oder legt diesen fest.</summary>
      <returns>Der Name für die Ausnahmevariable, die von der <see langword="catch" />-Klausel behandelt wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>Ruft die Anweisungen im catch-Block ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die Anweisungen im catch-Block enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeCatchClause" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeCatchClause" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCatchClause" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeCatchClauseCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeCatchClause" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Ein <see cref="T:System.CodeDom.CodeCatchClause" />-Objekt an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>Stellt eine Pragmacodeentität für Codeprüfsummen dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeChecksumPragma" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>Initialisiert unter Verwendung eines Dateinamens, einer GUID, die den Prüfsummenalgorithmus darstellt, und eines Bytestreams, der die Prüfsummendaten darstellt, eine neue Instanz der <see cref="T:System.CodeDom.CodeChecksumPragma" />-Klasse.</summary>
      <param name="fileName">Der Pfad der Prüfsummendatei.</param>
      <param name="checksumAlgorithmId">Eine <see cref="T:System.Guid" />, die den Prüfsummenalgorithmus kennzeichnet, der verwendet werden soll.</param>
      <param name="checksumData">Ein Bytearray, das die Prüfsummendaten enthält.</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>Ruft eine GUID ab, die den zu verwendenden Prüfsummenalgorithmus bezeichnet, oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.Guid" />, die den Prüfsummenalgorithmus kennzeichnet, der verwendet werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>Ruft den Wert der Daten für die Prüfsummenberechnung ab oder legt diesen fest.</summary>
      <returns>Ein Bytearray, das die Daten für die Prüfsummenberechnung enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>Ruft den Pfad der Prüfsummendatei ab oder legt diesen fest.</summary>
      <returns>Der Pfad der Prüfsummendatei.</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>Stellt einen Kommentar dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeComment" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeComment" />-Klasse mit dem angegebenen Text als Inhalt.</summary>
      <param name="text">Der Inhalt des Kommentars.</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeComment" />-Klasse unter Verwendung des angegebenen Textes und des angegebenen Flags für Dokumentationskommentare.</summary>
      <param name="text">Der Inhalt des Kommentars.</param>
      <param name="docComment">
        <see langword="true" />, wenn es sich bei dem Kommentar um einen Dokumentationskommentar handelt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>Ruft einen Wert ab, der angibt, ob es sich bei dem Kommentar um einen Dokumentationskommentar handelt, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn es sich bei dem Kommentar um einen Dokumentationskommentar handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>Ruft den Text des Kommentars ab oder legt diesen fest.</summary>
      <returns>Eine Zeichenfolge, die den Text des Kommentars enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>Stellt eine Anweisung dar, die aus einem einzelnen Kommentar besteht.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse unter Verwendung des angegebenen Kommentars.</summary>
      <param name="comment">Eine <see cref="T:System.CodeDom.CodeComment" />-Klasse, die den Kommentar angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse mit dem angegebenen Text als Inhalt.</summary>
      <param name="text">Der Inhalt des Kommentars.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatement" />-Klasse unter Verwendung des angegebenen Textes und des angegebenen Flags für Dokumentationskommentare.</summary>
      <param name="text">Der Inhalt des Kommentars.</param>
      <param name="docComment">
        <see langword="true" />, wenn es sich bei dem Kommentar um einen Dokumentationskommentar handelt, andernfalls <see langword="false" />.</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>Ruft den Inhalt des Kommentars ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeComment" />-Klasse, die den Kommentar angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeCommentStatement" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeCommentStatement" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCommentStatement" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeCommentStatement" />, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend beim angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das zu suchende <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt.</param>
      <returns>Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>Fügt ein <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Ein <see cref="T:System.CodeDom.CodeCommentStatement" />-Objekt an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>Stellt einen Container für ein CodeDOM-Programmdiagramm bereit.</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeCompileUnit" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>Ruft eine Auflistung von benutzerdefinierten Attributen für die generierte Assembly ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die benutzerdefinierten Attribute für die generierte Assembly angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Enddirektiven enthält.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Enddirektiven enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>Ruft die Auflistung von Namespaces ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse, die die von der Kompilierungseinheit verwendeten Namespaces angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>Ruft die Assemblys ab, auf die verwiesen wird.</summary>
      <returns>Eine <see cref="T:System.Collections.Specialized.StringCollection" />-Klasse, die die Dateinamen der Assemblys enthält, auf die verwiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Startdirektiven enthält.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Startdirektiven enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>Stellt eine bedingte Verzweigungsanweisung dar, die i. d. R. als <see langword="if" />-Anweisung dargestellt wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConditionStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConditionStatement" />-Klasse unter Verwendung der angegebenen Bedingung und der angegebenen Anweisungen.</summary>
      <param name="condition">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den auszuwertenden Ausdruck angibt.</param>
      <param name="trueStatements">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die auszuführenden Anweisungen enthält, wenn die Bedingung <see langword="true" /> ist.</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConditionStatement" />-Klasse unter Verwendung der angegebenen Bedingung und der angegebenen Anweisungen.</summary>
      <param name="condition">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die auszuwertende Bedingung angibt.</param>
      <param name="trueStatements">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die auszuführenden Anweisungen enthält, wenn die Bedingung <see langword="true" /> ist.</param>
      <param name="falseStatements">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die auszuführenden Anweisungen enthält, wenn die Bedingung <see langword="false" /> ist.</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>Ruft den Ausdruck ab, um auf <see langword="true" /> oder <see langword="false" /> zu prüfen, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, um auf <see langword="true" /> oder <see langword="false" /> zu prüfen.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>Ruft die Auflistung von Anweisungen ab, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="false" /> ergibt.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" /> mit den Anweisungen, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="false" /> ergibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>Ruft die Auflistung von Anweisungen ab, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="true" /> ergibt.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" /> mit den Anweisungen, die ausgeführt werden sollen, wenn der bedingte Ausdruck <see langword="true" /> ergibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>Stellt eine Deklaration eines Instanzkonstruktors für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeConstructor" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>Ruft die Auflistung von Basiskonstruktorargumenten ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die die Basiskonstruktorargumente enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>Ruft die Auflistung von verketteten Konstruktorargumenten ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die die verketteten Konstruktorargumente enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>Stellt einen Verweis auf einen Standardwert dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDefaultValueExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDefaultValueExpression" />-Klasse unter Verwendung des angegebenen Codetypverweises.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse, die den Verweis auf einen Werttyp angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>Ruft den Datentypverweis für einen Standardwert ab oder legt diesen fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReference" />-Objekt, das einen Datentyp darstellt, der über einen Standardwert verfügt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>Stellt einen Ausdruck dar, der einen Delegaten erstellt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateCreateExpression" />-Klasse.</summary>
      <param name="delegateType">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des Delegaten angibt.</param>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, das die Ereignishandlermethode enthält.</param>
      <param name="methodName">Der Name der Ereignishandlermethode.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>Ruft den Datentyp des Delegaten ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des Delegaten angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>Ruft den Namen der Ereignishandlermethode ab oder legt diesen fest.</summary>
      <returns>Der Name der Ereignishandlermethode.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>Ruft das Objekt ab, das die Ereignishandlermethode enthält, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, das die Ereignishandlermethode enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>Stellt einen Ausdruck dar, der ein Ereignis auslöst.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und der angegebenen Parameter.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
      <param name="parameters">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, die die Parameter angeben.</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>Ruft die Parameter ab, die an die dem Ereignis angefügten Ereignisbehandlungsmethoden übergeben werden sollen, oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die die Parameter angibt, die an die dem Ereignis angefügten Ereignisbehandlungsmethoden übergeben werden sollen.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>Ruft das aufzurufende Ereignis ab oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das aufzurufende Ereignis angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>Stellt einen Ausdruck dar, der zusammen mit einem Indikator für die Verweisrichtung als Parameter für Methodenaufrufe verwendet wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectionExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectionExpression" />-Klasse unter Verwendung der angegebenen Feldrichtung und des angegebenen Ausdrucks.</summary>
      <param name="direction">Eine <see cref="T:System.CodeDom.FieldDirection" />, die die Feldrichtung des Ausdrucks angibt.</param>
      <param name="expression">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den darzustellenden Codeausdruck angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>Ruft die Feldrichtung für diesen Richtungsausdruck ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.FieldDirection" />, die die Feldrichtung für diesen Richtungsausdruck angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>Ruft den darzustellenden Codeausdruck ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den darzustellenden Ausdruck angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>Dient als Basisklasse für Codedirektivenklassen.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirective" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeDirective" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Klasse mit den Codedirektivenobjekten im angegebenen Array.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeDirective" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Klasse mit den Elementen in der angegebenen Codedirektivenauflistung.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeDirective" />-Objekt.</param>
      <returns>Die Indexposition, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>Fügt ein Array von <see cref="T:System.CodeDom.CodeDirective" />-Objekten am Ende der Auflistung hinzu.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeDirective" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>Fügt den Inhalt des angegebenen <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das die der Auflistung hinzuzufügenden <see cref="T:System.CodeDom.CodeDirective" />-Objekte enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeDirective" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>Kopiert den Inhalt der Auflistung in ein eindimensionales Array, beginnend am angegebenen Index.</summary>
      <param name="array">Ein Array vom Typ <see cref="T:System.CodeDom.CodeDirective" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen von Auflistungsobjekten begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeDirectiveCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als der kleinstmögliche Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>Ruft den Index in der Auflistung des angegebenen <see cref="T:System.CodeDom.CodeDirective" />-Objekts ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeDirective" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>Die Indexposition in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Die nullbasierte Indexposition, an der das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeDirective" />-Objekt.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="index" /> ist größer als <see cref="P:System.Collections.CollectionBase.Count" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeDirective" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeDirective" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeDirective" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Die Indexposition für den Zugriff.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> liegt außerhalb des gültigen Indexpositionsbereichs für die Auflistung.</exception>
      <returns>Die <see cref="T:System.CodeDom.CodeDirective" /> an der Indexposition.</returns>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>Stellt die Einstiegspunktmethode für eine ausführbare Datei dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeEntryPointMethod" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>Stellt einen Verweis auf ein Ereignis dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeEventReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeEventReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Ereignisnamens.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</param>
      <param name="eventName">Der Name des Ereignisses, auf das verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>Ruft den Namen des Ereignisses ab oder legt diesen fest.</summary>
      <returns>Der Name des Ereignisses.</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>Ruft das Objekt ab, in dem das Ereignis enthalten ist, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>Stellt einen Codeausdruck dar. Hierbei handelt es sich um eine Basisklasse für andere Codeausdrucksobjekte, die nie instanziiert wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeExpression" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeExpression" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>Kopiert die Elemente des angegebenen Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeExpression" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>Kopiert den Inhalt eines anderen <see cref="T:System.CodeDom.CodeExpressionCollection" />-Objekts an das Ende der Auflistung.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeExpression" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeExpressionCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeExpression" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeExpression" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>Der Index des angegebenen Objekts in der Auflistung, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeExpression" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeExpression" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeExpression" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der nullbasierte Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Ein <see cref="T:System.CodeDom.CodeExpression" />-Objekt an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>Stellt eine Anweisung dar, die aus einem einzelnen Ausdruck besteht.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeExpressionStatement" />-Klasse unter Verwendung des angegebenen Ausdrucks.</summary>
      <param name="expression">Eine <see cref="T:System.CodeDom.CodeExpression" /> für die Anweisung.</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>Ruft den Ausdruck für die Anweisung ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Ausdruck für die Anweisung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>Stellt einen Verweis auf ein Feld dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeFieldReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Feldnamens.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Feld enthalten ist.</param>
      <param name="fieldName">Der Name des Felds.</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>Ruft den Namen des Felds ab, auf das verwiesen werden soll, oder legt diesen fest.</summary>
      <returns>Eine Zeichenfolge, die den Feldnamen enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>Ruft das Objekt mit dem Feld ab, auf das verwiesen werden soll, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt mit dem Feld angibt, auf das verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>Stellt eine <see langword="goto" />-Anweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeGotoStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>Initialisiert unter Verwendung des angegebenen Sprungmarkennamens eine neue Instanz der <see cref="T:System.CodeDom.CodeGotoStatement" />-Klasse.</summary>
      <param name="label">Der Name der Sprungmarke, an der die Programmausführung fortgesetzt werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>Ruft den Namen der Sprungmarke ab, an der die Programmausführung fortgesetzt werden soll, oder legt diesen fest.</summary>
      <exception cref="T:System.ArgumentNullException">Die Bezeichnung kann nicht festgelegt werden, da <paramref name="value" /><see langword="null" /> oder eine leere Zeichenfolge ist.</exception>
      <returns>Eine Zeichenfolge, die den Namen der Sprungmarke angibt, an der die Programmausführung fortgesetzt werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>Stellt einen Verweis auf eine Indexereigenschaft eines Objekts dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIndexerExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIndexerExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Indexes.</summary>
      <param name="targetObject">Das Zielobjekt.</param>
      <param name="indices">Der Index oder die Indizes des Indexerausdrucks.</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>Ruft die Auflistung von Indizes des Indexerausdrucks ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die den Index oder die Indizes des Indexerausdrucks angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>Ruft das Zielobjekt ab, das indiziert werden kann, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Indexerobjekt angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>Stellt eine <see langword="for" />-Anweisung oder eine Schleife durch einen Anweisungsblock dar, wobei ein Testausdruck als Bedingung für die Fortsetzung der Schleife verwendet wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeIterationStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>Initialisiert mit den angegebenen Parametern eine neue Instanz der <see cref="T:System.CodeDom.CodeIterationStatement" />-Klasse.</summary>
      <param name="initStatement">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung zum Initialisieren der Schleife enthält.</param>
      <param name="testExpression">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die Anweisung enthält, die auf Exitbedingungen getestet werden soll.</param>
      <param name="incrementStatement">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung für das Inkrement pro Durchlauf enthält.</param>
      <param name="statements">Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" /> mit den Anweisungen in der Schleife.</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>Ruft die Anweisung ab, die nach jedem Schleifendurchlauf aufgerufen wird, oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung für das Inkrement pro Durchlauf angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>Ruft die Anweisung zum Initialisieren der Schleife ab oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisung zum Initialisieren der Schleife angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>Ruft die Auflistung von Anweisungen ab, die in der Schleife ausgeführt werden sollen.</summary>
      <returns>Ein Array vom Typ <see cref="T:System.CodeDom.CodeStatement" />, das die Anweisungen in der Schleife angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>Ruft den Ausdruck ab, der als Bedingung zum Fortsetzen der Schleife getestet werden soll, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu testenden Ausdruck angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>Stellt eine Anweisung mit Marke oder eine eigenständige Marke dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLabeledStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>Initialisiert unter Verwendung des angegebenen Sprungmarkennamens eine neue Instanz der <see cref="T:System.CodeDom.CodeLabeledStatement" />-Klasse.</summary>
      <param name="label">Der Name der Sprungmarke.</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLabeledStatement" />-Klasse unter Verwendung des angegebenen Sprungmarkennamens und der angegebenen Anweisung.</summary>
      <param name="label">Der Name der Sprungmarke.</param>
      <param name="statement">Das <see cref="T:System.CodeDom.CodeStatement" />, das der Sprungmarke zugeordnet werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>Ruft den Namen der Sprungmarke ab oder legt diesen fest.</summary>
      <returns>Der Name der Sprungmarke.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>Ruft die optionale zugeordnete Anweisung ab oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeStatement" />, das die der Sprungmarke zugeordnete Anweisung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>Stellt eine bestimmte Position innerhalb einer bestimmten Datei dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLinePragma" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeLinePragma" />-Klasse.</summary>
      <param name="fileName">Der Dateiname der zugeordneten Datei.</param>
      <param name="lineNumber">Die Zeilennummer, für die ein Verweis gespeichert werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>Ruft den Namen der zugeordneten Datei ab oder legt diesen fest.</summary>
      <returns>Der Dateiname der zugeordneten Datei.</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>Ruft die Zeilennummer des zugeordneten Verweises ab oder legt sie fest.</summary>
      <returns>Die Zeilennummer.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>Stellt eine Deklaration eines Ereignisses für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberEvent" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>Ruft den Datentyp ab, den das Memberereignis implementiert, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die den Datentyp oder die Datentypen angibt, die vom Memberereignis implementiert werden.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>Ruft den ggf. als private implementierten Datentyp ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, den das Ereignis als private implementiert.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>Ruft den Datentyp des Delegattyps ab, der das Ereignis behandelt, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Delegattyp angibt, der das Ereignis behandelt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>Stellt eine Deklaration eines Felds für einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initialisiert unter Verwendung des angegebenen Feldtyps und des Feldnamens eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
      <param name="type">Ein Objekt, das den Typ des Felds angibt.</param>
      <param name="name">Der Name des Felds.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>Initialisiert unter Verwendung des angegebenen Feldtyps und des Feldnamens eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
      <param name="type">Der Typ des Felds.</param>
      <param name="name">Der Name des Felds.</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>Initialisiert unter Verwendung des angegebenen Feldtyps und des Feldnamens eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberField" />-Klasse.</summary>
      <param name="type">Der Typ des Felds.</param>
      <param name="name">Der Name des Felds.</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>Ruft den Initialisierungsausdruck für das Feld ab oder legt diesen fest.</summary>
      <returns>Der Initialisierungsausdruck für das Feld.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>Ruft den Typ des Felds ab oder legt diesen fest.</summary>
      <returns>Der Typ des Felds.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>Stellt eine Deklaration einer Methode für einen Typ dar.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeMemberMethod.Statements" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberMethod" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>Ruft die Datentypen der von dieser Methode implementierten Schnittstellen ab, sofern es sich nicht um die Implementierung einer privaten Methode handelt. Dies wird durch die <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" />-Eigenschaft angegeben.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die von dieser Methode implementierten Schnittstellen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>Ruft die Parameterdeklarationen für die Methode ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Methodenparameter angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>Ruft den Datentyp der Schnittstelle ab, für die diese Methode (sofern es sich um eine private Methode handelt) ggf. eine Methode implementiert, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Schnittstelle mit der Methode angibt, die von der privaten Methode implementiert wird, deren Deklaration von dieser <see cref="T:System.CodeDom.CodeMemberMethod" /> dargestellt wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>Ruft den Datentyp des Rückgabewerts der Methode ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des von der Methode zurückgegebenen Werts angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>Ruft die benutzerdefinierten Attribute des Rückgabetyps der Methode ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die die benutzerdefinierten Attribute angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>Ruft die Anweisungen in der Methode ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die Anweisungen innerhalb der Methode angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>Ruft die Typparameter für die aktuelle generische Methode ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, die die Typparameter für die generische Methode enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>Stellt eine Deklaration für eine Eigenschaft eines Typs dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMemberProperty" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>Ruft die Auflistung von <see langword="get" />-Anweisungen für die Eigenschaft ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die <see langword="get" />-Anweisungen für die Membereigenschaft enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>Ruft einen Wert ab, der angibt, ob die Eigenschaft über einen Accessor für die <see langword="get" />-Methode verfügt, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn die <see langword="Count" />-Eigenschaft der <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" />-Auflistung nicht 0 ist, oder wenn der Wert dieser Eigenschaft auf <see langword="true" /> festgelegt wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>Ruft einen Wert ab, der angibt, ob die Eigenschaft über einen Accessor für die <see langword="set" />-Methode verfügt, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn die <see cref="P:System.Collections.CollectionBase.Count" />-Eigenschaft der <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" />-Auflistung nicht 0 ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>Ruft die Datentypen aller Schnittstellen ab, die von der Eigenschaft implementiert werden.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die von dieser Eigenschaft implementierten Datentypen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>Ruft die Auflistung von Deklarationsausdrücken für die Eigenschaft ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Deklarationsausdrücke für die Eigenschaft angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>Ruft ggf. den Datentyp der Schnittstelle ab, die von dieser Eigenschaft implementiert wird, sofern es sich um eine private Eigenschaft handelt, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die ggf. den Datentyp der Schnittstelle angibt, die von der Eigenschaft implementiert wird, sofern es sich um eine private Eigenschaft handelt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>Ruft die Auflistung von <see langword="set" />-Anweisungen für die Eigenschaft ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die <see langword="set" />-Anweisungen für die Membereigenschaft enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>Ruft den Datentyp der Eigenschaft ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Eigenschaft angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>Stellt einen Ausdruck dar, der eine Methode aufruft.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />-Klasse unter Verwendung der Angaben für Zielobjekt, Methodennamen und Parameter.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt mit der aufzurufenden Methode angibt.</param>
      <param name="methodName">Der Name der aufzurufenden Methode.</param>
      <param name="parameters">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, die die Parameter angeben, mit denen die Methode aufgerufen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />-Klasse unter Verwendung der angegebenen Methode und Parameter.</summary>
      <param name="method">Eine <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, die die aufzurufende Methode angibt.</param>
      <param name="parameters">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, die die Parameter angeben, mit denen die Methode aufgerufen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>Ruft die aufzurufende Methode ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />, die die aufzurufende Methode angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>Ruft die Parameter ab, mit denen die Methode aufgerufen werden soll.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Parameter angibt, mit denen die Methode aufgerufen wird.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>Stellt einen Verweis auf eine Methode dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Methodennamens.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
      <param name="methodName">Der Name der aufzurufenden Methode.</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />-Klasse unter Verwendung der Angaben für Zielobjekt, Methodennamen und generische Typargumente.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Zielobjekt angibt.</param>
      <param name="methodName">Der Name der aufzurufenden Methode.</param>
      <param name="typeParameters">Ein Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Werten, die das <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> für diese <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> angeben.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>Ruft den Namen der Methode ab, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns>Der Name der Methode, auf die verwiesen werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>Ruft den Ausdruck ab, der die Methode angibt, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die die Methode darstellt, auf die verwiesen werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>Ruft die Typargumente für den Verweisausdruck der aktuellen generischen Methode ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die Typargumente für die aktuelle Code-<see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>Stellt eine Rückgabewertanweisung dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReturnStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialisiert mit dem angegebenen Ausdruck eine neue Instanz der <see cref="T:System.CodeDom.CodeMethodReturnStatement" />-Klasse.</summary>
      <param name="expression">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Rückgabewert angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>Ruft den Rückgabewert ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den für die return-Anweisung zurückzugebenden Wert angibt, oder <see langword="null" />, wenn die Anweisung Teil einer Unterroutine ist.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>Stellt eine Namespacedeklaration dar.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeNamespace.Comments" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeNamespace.Imports" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>Ein Ereignis, das beim ersten Zugriff auf die <see cref="P:System.CodeDom.CodeNamespace.Types" />-Auflistung ausgelöst wird.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespace" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespace" />-Klasse unter Verwendung des angegebenen Namens.</summary>
      <param name="name">Der Name des zu deklarierenden Namespaces.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>Ruft die Kommentare für den Namespace ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />, die die Kommentare für den Namespace angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>Ruft die Auflistung der Direktiven für den Namespaceimport ab, die vom Namespace verwendet werden.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />, die die Direktiven für den Namespaceimport angibt, die vom Namespace verwendet werden.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>Ruft den Namen des Namespaces ab oder legt diesen fest.</summary>
      <returns>Der Name des Namespaces.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>Ruft die Auflistung der im Namespace enthaltenen Typen ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, die die im Namespace enthaltenen Typen angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>Stellt eine Auflistung von <see cref="T:System.CodeDom.CodeNamespace" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeNamespace" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeNamespace" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeNamespaceCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeNamespace" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeNamespace" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>Fügt den Inhalt des angegebenen <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeNamespaceCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeNamespace" />, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn <see cref="T:System.CodeDom.CodeNamespace" /> in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeNamespaceCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeNamespace" />-Objekts in der <see cref="T:System.CodeDom.CodeNamespaceCollection" /> ab, sofern dieses in der Auflistung vorhanden ist.</summary>
      <param name="value">Die zu suchende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <returns>Der Index des angegebenen <see cref="T:System.CodeDom.CodeNamespace" />, wenn dieser in der Auflistung gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das neue Element eingefügt werden soll.</param>
      <param name="value">Der einzufügende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeNamespace" />-Objekt aus der Auflistung.</summary>
      <param name="value">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeNamespace" />.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeNamespaceCollection" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeNamespace" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>Stellt eine Direktive für den Namespaceimport dar, die einen zu verwendenden Namespace angibt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceImport" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceImport" />-Klasse unter Verwendung des angegebenen Namespaces, der importiert werden soll.</summary>
      <param name="nameSpace">Der Name des zu importierenden Namespaces.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>Ruft die Zeile und Datei ab, in der die Anweisung auftritt, oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeLinePragma" />, das den Kontext der Anweisung angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>Ruft den zu importierenden Namespace ab oder legt diesen fest.</summary>
      <returns>Der Name des zu importierenden Namespaces.</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>Fügt der Auflistung ein <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt hinzu.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt, das zur Auflistung hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>Fügt der Auflistung eine Gruppe von <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekten hinzu.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeNamespaceImport" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>Löscht die Auflistung der Member.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>Ruft einen Enumerator ab, der die Member der Auflistung aufzählt.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der die Auflistungsmember angibt.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente der <see cref="T:System.Collections.ICollection" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.ICollection" /> kopierten Elemente ist. Für das Array muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="index">Der nullbasierte Index im <paramref name="array" />, bei dem der Kopiervorgang beginnt.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchlaufen kann.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>Fügt der <see cref="T:System.Collections.IList" /> ein Objekt hinzu.</summary>
      <param name="value">Das <see cref="T:System.Object" />, das in <see cref="T:System.Collections.IList" /> eingefügt werden soll.</param>
      <returns>Die Position, an der das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>Entfernt alle Elemente aus <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Ermittelt, ob die <see cref="T:System.Collections.IList" /> einen bestimmten Wert enthält.</summary>
      <param name="value">Das <see cref="T:System.Object" />, das in der <see cref="T:System.Collections.IList" /> gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn der Wert in der Liste vorhanden ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Bestimmt den Index eines bestimmten Elements in der <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Das <see cref="T:System.Object" />, das in der <see cref="T:System.Collections.IList" /> gesucht werden soll.</param>
      <returns>Der Index von <paramref name="value" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Fügt ein Element an der angegebenen Position in die <see cref="T:System.Collections.IList" /> ein.</summary>
      <param name="index">Der nullbasierte Index, an dem <paramref name="value" /> eingefügt werden soll.</param>
      <param name="value">Die <see cref="T:System.Object" />, die in die <see cref="T:System.Collections.IList" /> eingefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Entfernt das erste Vorkommen eines angegebenen Objekts aus der <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">Der <see cref="T:System.Object" />, der aus der <see cref="T:System.Collections.IList" /> entfernt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Entfernt das Element am angegebenen Index aus der <see cref="T:System.Collections.IList" />.</summary>
      <param name="index">Der nullbasierte Index des zu entfernenden Elements.</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>Ruft die Anzahl der Namespaces in der Auflistung ab.</summary>
      <returns>Die Anzahl von Namespaces in der Auflistung.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Ein <see cref="T:System.CodeDom.CodeNamespaceImport" />-Objekt an jedem gültigen Index.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>Ruft die Anzahl der Elemente ab, die in <see cref="T:System.Collections.ICollection" /> enthalten sind.</summary>
      <returns>Die Anzahl der Elemente, die in <see cref="T:System.Collections.ICollection" /> enthalten sind.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist.</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />. Diese Eigenschaft gibt immer <see langword="false" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.  Diese Eigenschaft gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> eine feste Größe aufweist.</summary>
      <returns>Ist <see langword="true" />, wenn die <see cref="T:System.Collections.IList" /> eine feste Größe aufweist, andernfalls <see langword="false" />.  Diese Eigenschaft gibt immer <see langword="false" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>Ruft einen Wert ab, der angibt, ob das <see cref="T:System.Collections.IList" /> schreibgeschützt ist.</summary>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.Collections.IList" /> schreibgeschützt ist, andernfalls <see langword="false" />.  Diese Eigenschaft gibt immer <see langword="false" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Ruft das Element am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
      <returns>Das Element am angegebenen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>Stellt eine allgemeine Basisklasse für die meisten CodeDOM-Objekte (Code Document Object Model) bereit.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObject" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>Ruft die benutzerdefinierbaren Daten für das aktuelle Objekt ab.</summary>
      <returns>Ein <see cref="T:System.Collections.IDictionary" />, das Benutzerdaten für das aktuelle Objekt enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>Stellt einen Ausdruck dar, der eine neue Instanz eines Typs erstellt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse unter Verwendung des angegebenen Typs und der angegebenen Parameter.</summary>
      <param name="createType">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp des zu erstellenden Objekts angibt.</param>
      <param name="parameters">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, das die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse unter Verwendung des angegebenen Typs und der angegebenen Parameter.</summary>
      <param name="createType">Der Name des Datentyps für das zu erstellende Objekt.</param>
      <param name="parameters">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, das die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeObjectCreateExpression" />-Klasse unter Verwendung des angegebenen Typs und der angegebenen Parameter.</summary>
      <param name="createType">Der Datentyp des zu erstellenden Objekts.</param>
      <param name="parameters">Ein Array von <see cref="T:System.CodeDom.CodeExpression" />-Objekten, das die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>Ruft den Datentyp des zu erstellenden Objekts ab oder legt diesen fest.</summary>
      <returns>Ein Verweis des Typs <see cref="T:System.CodeDom.CodeTypeReference" /> auf den Datentyp des zu erstellenden Objekts.</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>Ruft die für die Objekterstellung zu verwendenden Parameter ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpressionCollection" />, die die Parameter angibt, die beim Erstellen des Objekts verwendet werden sollen.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>Stellt eine Parameterdeklaration für eine Methode, eine Eigenschaft oder einen Konstruktor dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse unter Verwendung des angegebenen Parametertyps und -namens.</summary>
      <param name="type">Ein Objekt, das den Typ des zu deklarierenden Parameters angibt.</param>
      <param name="name">Der Name des zu deklarierenden Parameters.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse unter Verwendung des angegebenen Parametertyps und -namens.</summary>
      <param name="type">Der Typ des zu deklarierenden Parameters.</param>
      <param name="name">Der Name des zu deklarierenden Parameters.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse unter Verwendung des angegebenen Parametertyps und -namens.</summary>
      <param name="type">Der Typ des zu deklarierenden Parameters.</param>
      <param name="name">Der Name des zu deklarierenden Parameters.</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>Ruft die benutzerdefinierten Attribute für die Parameterdeklaration ab oder legt diese fest.</summary>
      <returns>Ein Objekt, das die benutzerdefinierten Attribute angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>Ruft die Richtung des Felds ab oder legt diese fest.</summary>
      <returns>Ein Objekt, das die Richtung des Felds angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>Ruft den Namen des Parameters ab oder legt ihn fest.</summary>
      <returns>Der Name des Parameters.</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>Ruft den Typ des Parameters ab oder legt ihn fest.</summary>
      <returns>Der Typ des Parameters.</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Eines oder mehrere Objekte im Array sind <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, mit der die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Fügt der Auflistung den angegebenen <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>Kopiert die Elemente des angegebenen Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Fügt den Inhalt einer anderen <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> am Ende der Auflistung hinzu.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung die angegebene <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, die in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Ruft den Index in der Auflistung der angegebenen <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> ab, sofern sie in der Auflistung vorhanden ist.</summary>
      <param name="value">Die <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, die in der Auflistung gesucht werden soll.</param>
      <returns>Der Index in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Fügt die angegebene <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Der einzufügende <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Entfernt den angegebenen <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> aus der Auflistung.</summary>
      <param name="value">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>Ruft eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> am angegebenen Index in der Auflistung ab oder legt diese fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>Stellt den Wert eines primitiven Datentyps dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePrimitiveExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePrimitiveExpression" />-Klasse unter Verwendung des angegebenen Objekts.</summary>
      <param name="value">Das darzustellende Objekt.</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>Ruft den darzustellenden primitiven Datentyp ab oder legt diesen fest.</summary>
      <returns>Die Instanz des primitiven Datentyps, dessen Wert dargestellt werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>Stellt einen Verweis auf den Wert einer Eigenschaft dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />-Klasse unter Verwendung des angegebenen Zielobjekts und Eigenschaftennamens.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt mit der Eigenschaft angibt, auf die verwiesen werden soll.</param>
      <param name="propertyName">Der Name der Eigenschaft, auf die verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>Ruft den Namen der Eigenschaft ab, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns>Der Name der Eigenschaft, auf die verwiesen werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>Ruft das Objekt mit der Eigenschaft ab, auf die verwiesen werden soll, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt mit der Eigenschaft angibt, auf die verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>Stellt das Wertargument eines Methodenaufrufs für ein Eigenschaftenset in einer Methode für Eigenschaftensets dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>Gibt den Namen und den Modus für einen Codebereich an.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRegionDirective" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRegionDirective" />-Klasse und gibt deren Namen und Modus an.</summary>
      <param name="regionMode">Einer der <see cref="T:System.CodeDom.CodeRegionMode" />-Werte.</param>
      <param name="regionText">Der Name für den Bereich.</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>Ruft den Modus für die Bereichsdirektive ab oder legt diesen fest.</summary>
      <returns>Einer der <see cref="T:System.CodeDom.CodeRegionMode" />-Werte. Der Standardwert ist <see cref="F:System.CodeDom.CodeRegionMode.None" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>Ruft den Namen des Bereichs ab oder legt diesen fest.</summary>
      <returns>Der Name der Region.</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>Gibt den Anfang oder das Ende eines Codebereichs an.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>Ende des Bereichs.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>Nicht verwendet.</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>Anfang des Bereichs.</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>Stellt eine Anweisung dar, die einen Ereignishandler entfernt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRemoveEventStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRemoveEventStatement" />-Klasse mit dem angegebenen Ereignis und Ereignishandler.</summary>
      <param name="eventRef">Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" />, die das Ereignis angibt, von dem der Ereignishandler getrennt werden soll.</param>
      <param name="listener">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu entfernenden Ereignishandler angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeRemoveEventStatement" />-Klasse unter Verwendung des angegebenen Zielobjekts, des Ereignisnamens und des Ereignishandlers.</summary>
      <param name="targetObject">Eine <see cref="T:System.CodeDom.CodeExpression" />, die das Objekt angibt, in dem das Ereignis enthalten ist.</param>
      <param name="eventName">Der Name des Ereignisses.</param>
      <param name="listener">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu entfernenden Ereignishandler angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>Ruft das Ereignis ab, von dem ein Listener entfernt werden soll, oder legt dieses fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeEventReferenceExpression" />, die das Ereignis angibt, von dem ein Listener entfernt werden soll.</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>Ruft den zu entfernenden Ereignishandler ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den zu entfernenden Ereignishandler angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>Stellt ein literales Codefragment dar, das kompiliert werden kann.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetCompileUnit" />-Klasse.</summary>
      <param name="value">Das darzustellende literale Codefragment.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>Ruft die Zeilen- und Dateiinformationen über die Position von Code in einem Quellcodedokument ab oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeLinePragma" />, das die Position des Codefragments angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>Ruft das darzustellende literale Codefragment ab oder legt dieses fest.</summary>
      <returns>Das literale Codefragment.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>Stellt einen literalen Ausdruck dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetExpression" />-Klasse unter Verwendung des angegebenen literalen Ausdrucks.</summary>
      <param name="value">Der darzustellende literale Ausdruck.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>Ruft das Zeichenfolgenliteral von Code ab oder legt dieses fest.</summary>
      <returns>Das Zeichenfolgenliteral.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>Stellt eine Anweisung mit einem literalen Codefragment dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetStatement" />-Klasse unter Verwendung des angegebenen Codefragments.</summary>
      <param name="value">Das literale Codefragment der darzustellenden Anweisung.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>Ruft das literale Codefragment der Anweisung ab oder legt dieses fest.</summary>
      <returns>Das literale Codefragment der Anweisung.</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>Stellt mithilfe eines literalen Codefragments einen Member eines Typs dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetTypeMember" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeSnippetTypeMember" />-Klasse unter Verwendung des angegebenen Textes.</summary>
      <param name="text">Das literale Codefragment für den Typmember.</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>Ruft das literale Codefragment für den Typmember ab oder legt dieses fest.</summary>
      <returns>Das literale Codefragment für den Typmember.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>Stellt die <see langword="abstract" />-Basisklasse dar, von der alle Codeanweisungen abgeleitet werden.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatement" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Enddirektiven enthält.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Enddirektiven enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>Ruft die Zeile ab, in der die Codeanweisung auftritt, oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeLinePragma" />-Objekt, das den Kontext der Codeanweisung angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>Ruft ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt ab, das Startdirektiven enthält.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Startdirektiven enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeStatement" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatementCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatementCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeStatementCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeExpression" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeExpression" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeStatement" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>Fügt der Auflistung eine Gruppe von <see cref="T:System.CodeDom.CodeStatement" />-Objekten hinzu.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>Fügt den Inhalt eines anderen <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekt, das die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeStatement" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>Kopiert alle Elemente des <see cref="T:System.CodeDom.CodeStatementCollection" />-Objekts in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeStatementCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeStatement" />-Objekts in der <see cref="T:System.CodeDom.CodeStatementCollection" /> ab, sofern dieses in der Auflistung vorhanden ist.</summary>
      <param name="value">Die <see cref="T:System.CodeDom.CodeStatement" />, die in der Auflistung gesucht werden soll.</param>
      <returns>Der Index der angegebenen Objekts, wenn sich dieses in der Auflistung befindet, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeStatement" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeStatement" />-Objekt aus der Auflistung.</summary>
      <param name="value">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeStatement" />.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeStatement" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatement" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>Stellt einen Verweis auf die aktuelle lokale Instanz der Klasse dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeThisReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>Stellt eine Anweisung dar, die eine Ausnahme auslöst.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeThrowExceptionStatement" />-Klasse unter Verwendung der angegebenen Ausnahmetypinstanz.</summary>
      <param name="toThrow">Eine <see cref="T:System.CodeDom.CodeExpression" />, die die auszulösende Ausnahme angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>Ruft die auszulösende Ausnahme ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die eine Instanz der auszulösenden Ausnahme darstellt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>Stellt einen <see langword="try" />-Block mit einer beliebigen Anzahl von <see langword="catch" />-Klauseln und einem optionalen <see langword="finally" />-Block dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />-Klasse unter Verwendung der angegebenen try-Anweisungen und catch-Abschnitte.</summary>
      <param name="tryStatements">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die die try-Anweisungen angeben.</param>
      <param name="catchClauses">Ein Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten, die die catch-Abschnitte angeben.</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" />-Klasse unter Verwendung der angegebenen try-Anweisungen, catch-Abschnitte und finally-Anweisungen.</summary>
      <param name="tryStatements">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die die try-Anweisungen angeben.</param>
      <param name="catchClauses">Ein Array von <see cref="T:System.CodeDom.CodeCatchClause" />-Objekten, die die catch-Abschnitte angeben.</param>
      <param name="finallyStatements">Ein Array von <see cref="T:System.CodeDom.CodeStatement" />-Objekten, die die zu verwendenden finally-Anweisungen angeben.</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>Ruft die zu verwendenden catch-Klauseln ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeCatchClauseCollection" />, die die zu verwendenden catch-Abschnitte angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>Ruft die zu verwendenden finally-Anweisungen ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die finally-Anweisungen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>Ruft die try-Anweisungen ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeStatementCollection" />, die die try-Anweisungen angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>Stellt einen statischen Konstruktor für eine Klasse dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeConstructor" />-Klasse.</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>Stellt eine Typdeklaration für eine Klasse, Struktur, Schnittstelle oder Enumeration dar.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>Erfolgt beim erstmaligen Zugriff auf die <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />-Auflistung.</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>Erfolgt beim erstmaligen Zugriff auf die <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />-Auflistung.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Klasse mit dem angegebenen Namen.</summary>
      <param name="name">Der Name für den neuen Typ.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>Ruft die Basistypen des Typs ab.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Objekt, das die Basistypen des Typs angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>Ruft einen Wert ab, der angibt, ob es sich bei dem Typ um eine Klasse oder einen Verweistyp handelt, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der Typ eine Klasse oder ein Verweistyp ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>Ruft einen Wert ab, der angibt, ob der Typ eine Enumeration ist, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der Typ eine Enumeration ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>Ruft einen Wert ab, der angibt, ob der Typ eine Schnittstelle ist, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der Typ eine Schnittstelle ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>Ruft einen Wert ab, der angibt, ob die Typdeklaration vollständig oder partiell ist, oder legt diesen Wert fest.</summary>
      <returns>
        <see langword="true" />, wenn die Klassen- oder Strukturdeklaration eine partielle Repräsentation der Implementierung darstellt, und <see langword="false" />, wenn die Deklaration eine vollständige Implementierung der Klasse oder der Struktur ist. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>Ruft einen Wert ab, der angibt, ob es sich bei dem Typ um einen Werttyp (Struktur) handelt, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der Typ ein Werttyp ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>Ruft die Auflistung der Klassenmember für den dargestellten Typ ab.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Objekt, das die Klassenmember angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>Ruft die Attribute des Typs ab oder legt diese fest.</summary>
      <returns>Ein <see cref="T:System.Reflection.TypeAttributes" />-Objekt, das die Attribute des Typs angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>Ruft die Typparameter für die Typdeklaration ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse, die die Typparameter für die Typdeklaration enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>Kopiert die Elemente des angegebenen Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeDeclaration" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>Fügt den Inhalt eines anderen <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekts am Ende der Auflistung hinzu.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekt, das die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>Kopiert die Elemente im <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />-Objekt in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekts in der <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ab, sofern dieses in der Auflistung vorhanden ist.</summary>
      <param name="value">Die <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die in der Auflistung gesucht werden soll.</param>
      <returns>Der Index der angegebenen Objekts, wenn sich dieses in der Auflistung befindet, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt aus der Auflistung.</summary>
      <param name="value">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>Stellt eine Delegatdeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDelegate" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeDelegate" />-Klasse.</summary>
      <param name="name">Der Name des Delegaten.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>Ruft die Parameter des Delegaten ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />, die die Parameter für den Delegaten angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>Ruft den Rückgabetyp des Delegaten ab oder legt diesen fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Rückgabetyp des Delegaten angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>Stellt eine Basisklasse für einen Member eines Typs bereit. Typmember sind u. a. Felder, Methoden, Eigenschaften, Konstruktoren und geschachtelte Typen.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>Ruft die Attribute des Members ab oder legt diese fest.</summary>
      <returns>Mit einer bitweisen Kombination der <see cref="T:System.CodeDom.MemberAttributes" />-Werte werden die Attribute des Members angegeben. Der Standardwert lautet <see cref="F:System.CodeDom.MemberAttributes.Private" /> | <see cref="F:System.CodeDom.MemberAttributes.Final" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>Ruft die Auflistung der Kommentare für den Typmember ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeCommentStatementCollection" />-Klasse, die die Kommentare für den Member angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>Ruft die benutzerdefinierten Attribute des Members ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die benutzerdefinierten Attribute des Members angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>Ruft die Enddirektiven für den Member ab.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Enddirektiven enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>Ruft die Zeile ab oder oder legt die Zeile fest, auf der die Typmemberanweisung auftritt.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeLinePragma" />-Objekt, das die Position der Typmemberdeklaration angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>Ruft den Namen des Members ab oder legt diesen fest.</summary>
      <returns>Der Name des Members.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>Ruft die Startdirektiven für den Member ab.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeDirectiveCollection" />-Objekt, das Startdirektiven enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeMember" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeMember" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeTypeMember" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeMemberCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, mit der die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>Fügt der Auflistung eine <see cref="T:System.CodeDom.CodeTypeMember" /> mit dem angegebenen Wert hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeTypeMember" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeMember" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>Fügt den Inhalt einer anderen <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> am Ende der Auflistung hinzu.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung die angegebene <see cref="T:System.CodeDom.CodeTypeMember" /> enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeTypeMember" />, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn die Auflistung das angegebene Objekt enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>Kopiert die Auflistungsobjekte in eine eindimensionale <see cref="T:System.Array" />-Instanz, beginnend am angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Das Zielarray ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>Ruft den Index in der Auflistung der angegebenen <see cref="T:System.CodeDom.CodeTypeMember" /> ab, sofern sie in der Auflistung vorhanden ist.</summary>
      <param name="value">Die <see cref="T:System.CodeDom.CodeTypeMember" />, die in der Auflistung gesucht werden soll.</param>
      <returns>Der Index in der Auflistung des angegebenen Objekts, sofern gefunden, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>Fügt die angegebene <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das angegebene Objekt eingefügt werden soll.</param>
      <param name="value">Der einzufügende <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>Entfernt eine bestimmte <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse aus der Auflistung.</summary>
      <param name="value">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeTypeMember" />.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>Ruft eine <see cref="T:System.CodeDom.CodeTypeMember" /> am angegebenen Index in der Auflistung ab oder legt diese fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeMember" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>Stellt einen <see langword="typeof" />-Ausdruck dar. Dies ist ein Ausdruck, der einen <see cref="T:System.Type" /> für einen angegebenen Typnamen zurückgibt.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp für den <see langword="typeof" />-Ausdruck angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
      <param name="type">Der Name des Datentyps für den <see langword="typeof" />-Ausdruck.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeOfExpression" />-Klasse.</summary>
      <param name="type">Der Datentyp für den Datentyp des <see langword="typeof" />-Ausdrucks.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>Ruft den Datentyp ab, auf den mit dem <see langword="typeof" />-Ausdruck verwiesen wird, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, auf den mit dem <see langword="typeof" />-Ausdruck verwiesen wird. Diese Eigenschaft gibt nie <see langword="null" /> zurück, und ihre Standardeinstellung ist der <see cref="T:System.Void" />-Typ.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>Stellt einen Typparameter eines generischen Typs oder einer generischen Methode dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameter" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameter" />-Klasse mit dem angegebenen Typparameternamen.</summary>
      <param name="name">Der Name des Typparameters.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>Ruft die Einschränkungen für den Typparameter ab.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Objekt, das die Einschränkungen für den Typparameter enthält.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>Ruft die benutzerdefinierten Attribute des Typparameters ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />-Klasse, die die benutzerdefinierten Attribute des Typparameters angibt. Der Standardwert ist <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>Ruft einen Wert ab, der angibt, ob der Typparameter eine Konstruktoreinschränkung hat, oder legt diesen Wert fest.</summary>
      <returns>
        <see langword="true" />, wenn der Typparameter eine Konstruktoreinschränkung aufweist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>Ruft den Namen des Typparameters ab oder legt diesen fest.</summary>
      <returns>Der Name des Typparameters. Der Standardwert ist eine leere Zeichenfolge ("").</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>Initialisiert eine neue leere Instanz der <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeParameterCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, mit der die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>Fügt der Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeParameter" />.</param>
      <returns>Der nullbasierte Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>Fügt der Auflistung unter Verwendung des angegebenen Datentypnamens das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt hinzu.</summary>
      <param name="value">Der Name des Datentyps, für den der Auflistung das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeTypeParameter" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeParameter" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>Kopiert die Elemente der angegebenen <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> an das Ende der Auflistung.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> mit den <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>Bestimmt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>Kopiert die Elemente in der Auflistung in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend beim angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> ist kleiner als der niedrigste Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>Ruft den Index in der Auflistung des angegebenen <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekts ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt, das in der Auflistung gesucht werden soll.</param>
      <returns>Der nullbasierte Index des angegebenen <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekts in der Auflistung, sofern es gefunden wurde, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>Fügt das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="value">Das einzufügende <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>Entfernt das angegebene <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt aus der Auflistung.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt, das aus der Auflistung entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>Ruft das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt am angegebenen Index in der Auflistung ab oder legt dieses fest.</summary>
      <param name="index">Der nullbasierte Index des Auflistungsobjekts, auf das zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Das <see cref="T:System.CodeDom.CodeTypeParameter" />-Objekt am angegebenen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>Stellt einen Verweis auf einen Typ dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Codetypparameters.</summary>
      <param name="typeParameter">Ein <see cref="T:System.CodeDom.CodeTypeParameter" />, der den Typ des Typparameters darstellt.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Arraytyps und -namens.</summary>
      <param name="arrayType">Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ des Arrays angibt.</param>
      <param name="rank">Die Anzahl der Dimensionen im Array.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse mit dem angegebenen Typnamen.</summary>
      <param name="typeName">Der Name des Typs, auf den verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Typnamens und Typarguments.</summary>
      <param name="typeName">Der Name des Typs, auf den verwiesen werden soll.</param>
      <param name="typeArguments">Ein Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Werten.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Typnamens und der angegebenen Codetypverweis-Option.</summary>
      <param name="typeName">Der Name des Typs, auf den verwiesen werden soll.</param>
      <param name="codeTypeReferenceOption">Die Codetypverweis-Option, einer der <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />-Werte.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Arraytypnamens und -rangs.</summary>
      <param name="baseType">Der Name des Typs der Arrayelemente.</param>
      <param name="rank">Die Anzahl der Dimensionen des Arrays.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse.</summary>
      <param name="type">Das <see cref="T:System.Type" />, auf das verwiesen werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse unter Verwendung des angegebenen Typs und des angegebenen Codetypverweises.</summary>
      <param name="type">Das <see cref="T:System.Type" />, auf das verwiesen werden soll.</param>
      <param name="codeTypeReferenceOption">Die Codetypverweis-Option, einer der <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />-Werte.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>Ruft den Typ der Elemente im Array ab oder legt diesen fest.</summary>
      <returns>Ein <see cref="T:System.CodeDom.CodeTypeReference" />, der den Typ der Arrayelemente angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>Ruft den Arrayrang des Arrays ab oder legt diesen fest.</summary>
      <returns>Die Anzahl der Dimensionen des Arrays.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>Ruft den Namen des Typs ab, auf den verwiesen wird, oder legt diesen fest.</summary>
      <returns>Der Name der Typbibliothek, auf die verwiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>Ruft die Codetypverweis-Option ab oder legt diese fest.</summary>
      <returns>Eine bitweise Kombination der <see cref="T:System.CodeDom.CodeTypeReferenceOptions" />-Werte.</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>Ruft die Typargumente für den aktuellen generischen Typverweis ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die Typargumente für das aktuelle <see cref="T:System.CodeDom.CodeTypeReference" />-Objekt enthält.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.CodeTypeReference" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.CodeTypeReference" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />-Klasse, die die Elemente der angegebenen Quellauflistung enthält.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, mit der die Auflistung initialisiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>Fügt der Auflistung den angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>Fügt der Auflistung unter Verwendung des angegebenen Datentypnamens einen <see cref="T:System.CodeDom.CodeTypeReference" /> hinzu.</summary>
      <param name="value">Der Name des Datentyps, für den der Auflistung eine <see cref="T:System.CodeDom.CodeTypeReference" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>Fügt der Auflistung unter Verwendung des angegebenen Datentyps einen <see cref="T:System.CodeDom.CodeTypeReference" /> hinzu.</summary>
      <param name="value">Der Datentyp, für den der Auflistung eine <see cref="T:System.CodeDom.CodeTypeReference" /> hinzugefügt werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>Kopiert die Elemente des angegebenen <see cref="T:System.CodeDom.CodeTypeReference" />-Arrays an das Ende der Auflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.CodeTypeReference" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>Fügt den Inhalt der angegebenen <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> am Ende der Auflistung hinzu.</summary>
      <param name="value">Eine <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, die die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> enthält.</summary>
      <param name="value">Das <see cref="T:System.CodeDom.CodeTypeReference" />, das in der Auflistung gesucht werden soll.</param>
      <returns>
        <see langword="true" />, wenn <see cref="T:System.CodeDom.CodeTypeReference" /> in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>Kopiert die Elemente in der Auflistung in das angegebene eindimensionale <see cref="T:System.Array" />, beginnend beim angegebenen Index.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der Auflistung kopierten Werte ist.</param>
      <param name="index">Der Index des Arrays, an dem mit dem Einfügen begonnen werden soll.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="array" />-Parameter ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in der <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> ist größer als der verfügbare Platz zwischen dem Index des Zielarrays, der durch den <paramref name="index" />-Parameter angegeben wird, und dem Ende des Zielarrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist kleiner als der minimale Index des Zielarrays.</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>Ruft den Index in der Auflistung der angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> ab, sofern sie in der Auflistung vorhanden ist.</summary>
      <param name="value">Die <see cref="T:System.CodeDom.CodeTypeReference" />, die in der Auflistung gesucht werden soll.</param>
      <returns>Der Index der angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> in der Auflistung, sofern diese gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>Fügt ein <see cref="T:System.CodeDom.CodeTypeReference" />-Objekt am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem das Element eingefügt werden soll.</param>
      <param name="value">Der einzufügende <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>Entfernt den angegebenen <see cref="T:System.CodeDom.CodeTypeReference" /> aus der Auflistung.</summary>
      <param name="value">Die aus der Auflistung zu entfernende <see cref="T:System.CodeDom.CodeTypeReference" />.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>Ruft eine <see cref="T:System.CodeDom.CodeTypeReference" /> am angegebenen Index in der Auflistung ab oder legt diese fest.</summary>
      <param name="index">Der Index der Auflistung, auf die zugegriffen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>Stellt einen Verweis auf einen Datentyp dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>Initialisiert mithilfe des angegebenen Typs eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, auf den verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse unter Verwendung des angegebenen Datentypnamens.</summary>
      <param name="type">Der Name des Datentyps, auf den verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeTypeReferenceExpression" />-Klasse unter Verwendung des angegebenen Datentyps.</summary>
      <param name="type">Eine Instanz des Datentyps, auf den verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>Ruft den Datentyp ab, auf den verwiesen werden soll, oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp angibt, auf den verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>Gibt an, wie der Codetypverweis aufgelöst werden soll.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>Löst den Typ vom Typparameter auf.</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>Löst den Typ vom Stammnamespace auf.</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>Stellt eine Variablendeklaration dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Typs und Namens.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Variablen angibt.</param>
      <param name="name">Der Name der Variablen.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps, Variablennamens und Initialisierungsausdrucks.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Typ der Variablen angibt.</param>
      <param name="name">Der Name der Variablen.</param>
      <param name="initExpression">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyp- und Variablennamens.</summary>
      <param name="type">Der Name für den Datentyp der Variablen.</param>
      <param name="name">Der Name der Variablen.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps, Variablennamens und Initialisierungsausdrucks.</summary>
      <param name="type">Der Name für den Datentyp der Variablen.</param>
      <param name="name">Der Name der Variablen.</param>
      <param name="initExpression">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps und Variablennamens.</summary>
      <param name="type">Der Datentyp für die Variable.</param>
      <param name="name">Der Name der Variablen.</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" />-Klasse unter Verwendung des angegebenen Datentyps, Variablennamens und Initialisierungsausdrucks.</summary>
      <param name="type">Der Datentyp der Variablen.</param>
      <param name="name">Der Name der Variablen.</param>
      <param name="initExpression">Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>Ruft den Initialisierungsausdruck für die Variable ab oder legt diesen fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeExpression" />, die den Initialisierungsausdruck für die Variable angibt.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>Ruft den Namen der Variablen ab oder legt ihn fest.</summary>
      <returns>Der Name der Variablen.</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>Ruft den Datentyp der Variablen ab oder legt ihn fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den Datentyp der Variablen angibt.</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>Stellt einen Verweis auf eine lokale Variable dar.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.CodeVariableReferenceExpression" />-Klasse unter Verwendung des angegebenen Namens der lokalen Variablen.</summary>
      <param name="variableName">Der Name der lokalen Variablen, auf die verwiesen werden soll.</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>Ruft den Namen der lokalen Variablen ab, auf die verwiesen werden soll, oder legt diesen fest.</summary>
      <returns>Der Name der lokalen Variablen, auf die verwiesen werden soll.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>Stellt eine Beispielimplementierung der <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeCompiler" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>Ruft die Befehlsargumente vom angegebenen <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> ab, die an den Compiler übergeben werden sollen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, das die Compileroptionen angibt.</param>
      <returns>Die Befehlsargumente.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Kompiliert die angegebene Kompilierungseinheit mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="e">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekt, das die Quelle für die Kompilierung angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Kompiliert die angegebenen Kompilierungseinheiten mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="ea">Ein Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten, das die Quelle für die Kompilierung angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ea" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Kompiliert die angegebene Datei mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileName">Der Name der zu kompilierenden Datei.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="fileName" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Kompiliert die angegebenen Dateien mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileNames">Ein Array von Zeichenfolgen, das die Dateinamen der zu kompilierenden Dateien angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="fileNames" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Kompiliert die angegebene Quellcodezeichenfolge mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="source">Die zu kompilierende Quellcodezeichenfolge.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Kompiliert die angegebenen Quellcodezeichenfolgen mit den angegebenen Optionen und gibt die Ergebnisse der Kompilierung zurück.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="sources">Ein Array mit Zeichenfolgen, das den zu kompilierenden Quellcode enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="sources" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Ruft die Befehlsargumente ab, mit denen der Compiler aufgerufen wird, wenn eine Antwortdatei generiert werden soll.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="cmdArgs">Eine Zeichenfolge mit Befehlsargumenten.</param>
      <returns>Die Befehlsargumente zum Generieren einer Antwortdatei oder <see langword="null" />, wenn keine Argumente für Antwortdateien vorhanden sind.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>Verknüpft die angegebenen Zeichenfolgenarrays.</summary>
      <param name="sa">Das Array mit den zu verknüpfenden Zeichenfolgen.</param>
      <param name="separator">Das zu verwendende Trennzeichen.</param>
      <returns>Die verkettete Zeichenfolge.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>Verarbeitet die angegebene Zeile aus dem angegebenen <see cref="T:System.CodeDom.Compiler.CompilerResults" />.</summary>
      <param name="results">Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />, das die Ergebnisse der Kompilierung angibt.</param>
      <param name="line">Die zu verarbeitende Zeile.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="e">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die die Quelle für die Kompilierung angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="ea">Ein Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten, das die Quelle für die Kompilierung angibt.</param>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileName">Der Name der zu kompilierenden Datei.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="fileNames">Ein Array von Zeichenfolgen, das die Namen der zu kompilierenden Dateien angibt.</param>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="source">Eine Zeichenfolge, die den zu kompilierenden Quellcode angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compileroptionen angibt.</param>
      <param name="sources">Ein Array mit Zeichenfolgen, das den zu kompilierenden Quellcode angibt.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
      <returns>Die Ergebnisse der Kompilierung.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>Ruft den Namen der ausführbaren Compilerdatei ab.</summary>
      <returns>Der Name der ausführbaren Compilerdatei.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>Ruft die für Quelldateien zu verwendende Dateinamenerweiterung ab.</summary>
      <returns>Die für Quelldateien zu verwendende Dateinamenerweiterung.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>Stellt eine Basisklasse für <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen bereit. Diese Klasse ist abstrakt.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Kompiliert eine Assembly auf Grundlage der <see cref="N:System.CodeDom" />-Strukturen im angegebenen Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten mit den angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="compilationUnits">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCompileUnit" />, das den zu kompilierenden Code angibt.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Kompiliert eine Assembly aus dem in den angegebenen Dateien enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="fileNames">Ein Array mit den Namen der zu kompilierenden Dateien.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Kompiliert eine Assembly aus dem angegebenen Array von Zeichenfolgen mit Quellcode und unter Verwendung der angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Compilereinstellungen für die Kompilierung angibt.</param>
      <param name="sources">Ein Array von zu kompilierenden Quellcodezeichenfolgen.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codecompiler.</summary>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> zum Kompilieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator.</summary>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen <see cref="T:System.IO.TextWriter" /> für die Ausgabe.</summary>
      <param name="output">Ein <see cref="T:System.IO.TextWriter" />, der für die Ausgabe verwendet werden soll.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codegenerator unter Verwendung des angegebenen Dateinamens für die Ausgabe.</summary>
      <param name="fileName">Der Dateiname für die Ausgabe.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> zum Generieren von <see cref="N:System.CodeDom" />-basierten Quellcodedarstellungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>Erstellt beim Überschreiben in einer abgeleiteten Klasse einen neuen Codeparser.</summary>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.ICodeParser" /> zum Analysieren von Quellcode. Die Basisimplementierung gibt immer <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebene Sprache ab.</summary>
      <param name="language">Der Sprachname.</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen implementiert wird.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Ruft eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die angegebenen Sprach- und Anbieteroptionen ab.</summary>
      <param name="language">Der Sprachname.</param>
      <param name="providerOptions">Eine Auflistung der Anbieteroptionen aus der Konfigurationsdatei.</param>
      <returns>Ein CodeDOM-Anbieter, der für den angegebenen Sprachnamen und die angegebenen Optionen implementiert wird.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Ein gültiger Bezeichner für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="compileUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, für die Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="expression">Ein <see cref="T:System.CodeDom.CodeExpression" />-Objekt, dass den Ausdruck angibt, für den Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Memberdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="member">Ein <see cref="T:System.CodeDom.CodeTypeMember" />, der den Member angibt, für den Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException">Diese Methode wird in einer abgeleiteten Klasse nicht überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="codeNamespace">Ein <see cref="T:System.CodeDom.CodeNamespace" />-Objekt, das den Namespace angibt, für den Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="statement">Eine <see cref="T:System.CodeDom.CodeStatement" />, die die CodeDOM-Elemente enthält, für die Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und sendet diesen mit den angegebenen Optionen an den angegebenen Textwriter.</summary>
      <param name="codeType">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die den Typ angibt, für den Code generiert werden soll.</param>
      <param name="writer">Der <see cref="T:System.IO.TextWriter" />, an den der Ausgabecode gesendet wird.</param>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>Gibt den Sprachanbieter und die Compilerkonfigurationseinstellungen für diesen Computer zurück.</summary>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>Ein Array vom Typ <see cref="T:System.CodeDom.Compiler.CompilerInfo" />, das die Einstellungen aller konfigurierten <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierungen darstellt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>Gibt die Sprachanbieter- und Compilerkonfigurationseinstellungen für die angegebene Sprache zurück.</summary>
      <param name="language">Der Name einer Sprache.</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> verfügt auf diesem Computer über keinen konfigurierten Anbieter.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>Ein mit Einstellungen der konfigurierten <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Implementierung aufgefülltes <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Objekt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>Ruft einen <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Datentyp ab.</summary>
      <param name="type">Der Objekttyp, für den ein Typkonverter abgerufen werden soll.</param>
      <returns>Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den angegebenen Typ oder <see langword="null" />, wenn für den angegebenen Typ kein <see cref="T:System.ComponentModel.TypeConverter" /> gefunden werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>Gibt, wie im <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationsabschnitt konfiguriert, einen der angegebenen Dateinamenerweiterung zugeordneten Sprachnamen zurück.</summary>
      <param name="extension">Eine Dateinamenerweiterung.</param>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" /> verfügt auf diesem Computer über keinen konfigurierten Sprachanbieter.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>Ein der Dateinamenerweiterung zugeordneter Sprachname, wie in den <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Compilerkonfigurationseinstellungen konfiguriert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den zurückzugebenden Typ angibt.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Eine Textdarstellung des angegebenen Typs, der für die Sprache formatiert ist, in der Code von diesem Codegenerator generiert wird. In Visual Basic wird z. B. beim Übergeben eines <see cref="T:System.CodeDom.CodeTypeReference" /> für den <see cref="T:System.Int32" />-Typ "Integer" zurückgegeben.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>Testet, ob eine Dateinamenerweiterung über eine ihr zugeordnete, auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
      <param name="extension">Eine Dateinamenerweiterung.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>
        <see langword="true" />, wenn für die angegebene Dateinamenerweiterung eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>Testet, ob eine Sprache über eine auf dem Computer konfigurierte <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung verfügt.</summary>
      <param name="language">Der Sprachname.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>
        <see langword="true" />, wenn für die angegebene Sprache eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung konfiguriert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>Gibt einen Wert zurück, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
      <param name="value">Der Wert, der als gültiger Bezeichner validiert werden soll.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>
        <see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>Kompiliert den aus dem angegebenen Textstream gelesenen Code in einer <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <param name="codeStream">Ein <see cref="T:System.IO.TextReader" />-Objekt, das zum Lesen des zu analysierenden Codes verwendet wird.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die eine Darstellung des analysierten Code enthält.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Gibt einen Wert zurück, der angibt, ob die angegebene Unterstützung für die Codegenerierung verfügbar ist.</summary>
      <param name="generatorSupport">Ein <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt, das den Typ der Unterstützung für die Codegenerierung angibt, der geprüft werden soll.</param>
      <exception cref="T:System.NotImplementedException">Weder diese Methode noch die <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />-Methode wird in einer abgeleiteten Klasse überschrieben.</exception>
      <returns>
        <see langword="true" />, wenn die angegebene Unterstützung für die Codegenerierung verfügbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>Ruft die Standarddateinamenerweiterung ab, die für Quellcodedateien in der aktuellen Sprache verwendet werden soll.</summary>
      <returns>Eine Dateinamenerweiterung, die der Erweiterung der Quelldateien für die aktuelle Sprache entspricht. Die Basisimplementierung gibt immer <see cref="F:System.String.Empty" /> zurück.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>Ruft einen Bezeichner für Sprachfeatures ab.</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.LanguageOptions" />, die bestimmte Features der Sprache angeben.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>Stellt eine Beispielimplementierung der <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />-Schnittstelle bereit. Diese Klasse ist abstrakt.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeGenerator" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>Generiert ein Zeilenfortsetzungszeichen und gibt die angegebene Zeichenfolge in einer neuen Zeile aus.</summary>
      <param name="st">Die Zeichenfolge, die in die neue Zeile geschrieben werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns>Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Eine Zeichenfolge, für die ein gültiger Bezeichner erstellt werden soll.</param>
      <returns>Ein gültiger Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>Generiert Code für den angegebenen Verweisausdruck von Argumenten.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für die Arrayerstellung.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeArrayCreateExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für die Arrayindizierung.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>Generiert Code für die angegebene Zuweisungsanweisung.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeAssignStatement" />, das die Anweisung angibt, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>Generiert Code für die angegebene Anweisung zum Anfügen von Ereignissen.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeAttachEventStatement" />, das die Anweisung angibt, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Generiert Code für das angegebene Attributblockende.</summary>
      <param name="attributes">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die das Ende des Attributblocks angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Generiert Code für den angegebenen Attributblockanfang.</summary>
      <param name="attributes">Eine <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />, die den Anfang des Attributblocks angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>Generiert Code für den angegebenen Basisverweisausdruck.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für binäre Operatoren.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>Generiert Code für den angegebenen Umwandlungsausdruck.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeCastExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen Klassenmember unter Verwendung der angegebenen TextWriter- und Code-Generator-Optionen.</summary>
      <param name="member">Der Klassenmember, für den Code generiert werden soll.</param>
      <param name="writer">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="options">Die beim Generieren von Code zu verwendenden Optionen.</param>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" />-Eigenschaft ist nicht gleich <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>Generiert Code für den angegebenen Kommentar.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeComment" />, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>Generiert Code für die angegebene Kommentaranweisung.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentException">Die <see cref="P:System.CodeDom.CodeCommentStatement.Comment" />-Eigenschaft von <paramref name="e" /> ist nicht festgelegt.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>Generiert Code für die angegebenen Kommentaranweisungen.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Generiert Code für die angegebene Kompilierungseinheit.</summary>
      <param name="e">Die Kompilierungseinheit, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>Generiert Code für das Ende einer Kompilierungseinheit.</summary>
      <param name="e">Die Kompilierungseinheit, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>Generiert Code für den Anfang einer Kompilierungseinheit.</summary>
      <param name="e">Die Kompilierungseinheit, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>Generiert Code für die angegebene Bedingungsanweisung.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für den angegebenen Konstruktor.</summary>
      <param name="e">Der Konstruktor, für den Code generiert werden soll.</param>
      <param name="c">Der Objekttyp, den dieser Konstruktor erstellt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>Generiert Code für den angegebenen Dezimalwert.</summary>
      <param name="d">Der Dezimalwert, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>Generiert Code für den angegebenen Verweis auf einen Standardwert.</summary>
      <param name="e">Der Verweis, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für die Delegatenerstellung.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für Delegatenaufrufe.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>Generiert Code für den angegebenen Richtungsausdruck.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>Generiert Code für die angegebenen Codedirektiven.</summary>
      <param name="directives">Die Codedirektiven, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>Generiert Code für eine Gleitkommazahl mit doppelter Genauigkeit.</summary>
      <param name="d">Der Wert, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für die angegebene Einstiegspunktmethode.</summary>
      <param name="e">Der Einstiegspunkt für den Code.</param>
      <param name="c">Der Code, in dem der Typ deklariert wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für das angegebene Ereignis.</summary>
      <param name="e">Das Memberereignis, für das Code generiert werden soll.</param>
      <param name="c">Der Typ des Objekts, bei dem dieses Ereignis eintritt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>Generiert Code für den angegebenen Verweisausdruck von Ereignissen.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>Generiert Code für den angegebenen Codeausdruck.</summary>
      <param name="e">Der Codeausdruck, für den Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> ist kein gültiger <see cref="T:System.CodeDom.CodeStatement" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>Generiert Code für die angegebene Ausdrucksanweisung.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>Generiert Code für das angegebene Memberfeld.</summary>
      <param name="e">Das Feld, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>Generiert Code für den angegebenen Feldverweisausdruck.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>Generiert Code für die angegebene <see langword="goto" />-Anweisung.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>Generiert Code für den angegebenen Indexerausdruck.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>Generiert Code für die angegebene Iterationsanweisung.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>Generiert Code für die angegebene Anweisung mit Marke.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>Generiert Code für das angegebene Ende des Zeilenpragmas.</summary>
      <param name="e">Das Ende des Zeilenpragmas, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>Generiert Code für den angegebenen Anfang des Zeilenpragmas.</summary>
      <param name="e">Der Anfang des Zeilenpragmas, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für die angegebene Methode.</summary>
      <param name="e">Die Membermethode, für die Code generiert werden soll.</param>
      <param name="c">Der Typ des Objekts, bei dem diese Methode auftritt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für Methodenaufrufe.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>Generiert Code für den angegebenen Methodenverweisausdruck.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>Generiert Code für die angegebene Rückgabeanweisung für die Methode.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>Generiert Code für den angegebenen Namespace.</summary>
      <param name="e">Der Namespace, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>Generiert Code für das Ende eines Namespaces.</summary>
      <param name="e">Der Namespace, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>Generiert Code für den angegebenen Namespaceimport.</summary>
      <param name="e">Der Namespaceimport, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>Generiert Code für den angegebenen Namespaceimport.</summary>
      <param name="e">Der Namespaceimport, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>Generiert Code für die Namespaces in der angegebenen Kompilierungseinheit.</summary>
      <param name="e">Die Kompilierungseinheit, für die Namespaces generiert werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>Generiert Code für den Anfang eines Namespaces.</summary>
      <param name="e">Der Namespace, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für die Objekterstellung.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für die Parameterdeklaration.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>Generiert Code für den angegebenen primitiven Ausdruck.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> verwendet einen ungültigen Datentyp. Es sind nur folgende Datentypen zulässig: 
–   string 
–   char 
–   byte 
–   Int16 
–   Int32 
–   Int64 
–   Single 
–   Double 
–   Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für die angegebene Eigenschaft.</summary>
      <param name="e">Die Eigenschaft, für die Code generiert werden soll.</param>
      <param name="c">Der Typ des Objekts, bei dem diese Eigenschaft auftritt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>Generiert Code für den angegebenen Verweisausdruck für Eigenschaften.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>Generiert Code für den angegebenen Verweisausdruck für den Wert eines Eigenschaftensets.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>Generiert Code für die angegebene Anweisung zum Entfernen von Ereignissen.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>Generiert Code für eine Gleitkommazahl mit einfacher Genauigkeit.</summary>
      <param name="s">Der Wert, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>Gibt den Code der Kompilierungseinheit des angegebenen literalen Codefragments aus.</summary>
      <param name="e">Die Kompilierungseinheit für das literale Codefragment, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>Gibt den Code des Ausdrucks des angegebenen literalen Codefragments aus.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>Gibt den Code des Klassenmembers des angegebenen literalen Codefragments aus.</summary>
      <param name="e">Der Member, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>Gibt den Code der Anweisung des angegebenen literalen Codefragments aus.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>Generiert Code für die angegebene Anweisung.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> ist kein gültiger <see cref="T:System.CodeDom.CodeStatement" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>Generiert Code für die angegebene Anweisungsauflistung.</summary>
      <param name="stmts" />
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für this-Verweise.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>Generiert Code für die angegebene Anweisung zum Auslösen von Ausnahmen.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>Generiert Code für die angegebene <c>try-catch-finally</c>-Anweisung</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>Generiert Code für den angegebenen Klassenkonstruktor.</summary>
      <param name="e">Der Klassenkonstruktor, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für das angegebene Ende der Klasse.</summary>
      <param name="e">Das Ende der Klasse, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>Generiert Code für den angegebenen Ausdruckstyp.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>Generiert Code für den angegebenen Ausdruck für Typenverweise.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>Generiert Code für den angegebenen Namespace und die darin enthaltenen Klassen.</summary>
      <param name="e">Der Namespace, für den Klassen generiert werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>Generiert Code für den angegebenen Anfang der Klasse.</summary>
      <param name="e">Der Anfang der Klasse, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>Generiert Code für die angegebene Anweisung für die Variablendeklaration.</summary>
      <param name="e">Die Anweisung, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>Generiert Code für den angegebenen Variablenverweisausdruck.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Ruft den Namen des angegebenen Datentyps ab.</summary>
      <param name="value">Der Typ, dessen Name zurückgegeben wird.</param>
      <returns>Der Name des Datentypverweises.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>Ruft einen Wert ab, der angibt, ob der angegebene Wert ein gültiger Bezeichner ist.</summary>
      <param name="value">Der Wert, der auf Konflikte mit gültigen Bezeichnern getestet werden soll.</param>
      <returns>
        <see langword="true" />, wenn der Wert ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>Ruft einen Wert ab, der angibt, ob die angegebene Zeichenfolge ein gültiger Bezeichner ist.</summary>
      <param name="value">Die Zeichenfolge, deren Gültigkeit getestet werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Zeichenfolge ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>Gibt ein Argument in einem Attributblock aus.</summary>
      <param name="arg">Das Attributargument, für das Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>Generiert Code für die angegebene Auflistung von Attributdeklarationen.</summary>
      <param name="attributes">Die Attribute, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>Generiert Code für die angegebene <see cref="T:System.CodeDom.FieldDirection" />.</summary>
      <param name="dir">Einer der Enumerationswerte, der das Attribut des Felds angibt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>Generiert Code für die angegebene Ausdrucksliste.</summary>
      <param name="expressions">Die Ausdrücke, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>Generiert Code für die angegebene Ausdrucksliste.</summary>
      <param name="expressions">Die Ausdrücke, für die Code generiert werden soll.</param>
      <param name="newlineBetweenItems">
        <see langword="true" />, um nach jedem Element eine neue Zeile einzufügen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Gibt einen Modifizierer für den Gültigkeitsbereich von Feldern aus, der den angegebenen Attributen entspricht.</summary>
      <param name="attributes">Einer der Enumerationswerte, der die Attribute angibt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>Gibt den angegebenen Bezeichner aus.</summary>
      <param name="ident">Der Bezeichner, der ausgegeben werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>Generiert Code für den angegebenen Modifizierer für den Memberzugriff.</summary>
      <param name="attributes">Einer der Enumerationswerte, der den Modifizierer für den Memberzugriff angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>Generiert Code für den angegebenen Modifizierer für den Gültigkeitsbereich von Membern.</summary>
      <param name="attributes">Einer der Enumerationswerte, der den Modifizierer für den Memberbereich angibt, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>Generiert Code für den angegebenen Operator.</summary>
      <param name="op">Der Operator, für den Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>Generiert Code für die angegebenen Parameter.</summary>
      <param name="parameters">Die Parameterdeklarationsausdrücke, für die Code generiert werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>Generiert Code für den angegebenen Typ.</summary>
      <param name="typeRef">Der Typ, für den der Code erzeugt wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>Generiert Code für die angegebenen Typattribute.</summary>
      <param name="attributes">Einer der Enumerationswerte, der die Typattribute angibt, für die Code generiert werden soll.</param>
      <param name="isStruct">
        <see langword="true" />, wenn der Typ eine Struktur ist, andernfalls <see langword="false" />.</param>
      <param name="isEnum">
        <see langword="true" />, wenn der Typ eine Enumeration ist, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>Generiert Code für das angegebene Typ-Name-Paar des Objekts.</summary>
      <param name="typeRef">Der Typ.</param>
      <param name="name">Der Name für das Objekt.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>Konvertiert die angegebene Zeichenfolge, indem diese mit Escapesequenzen formatiert wird.</summary>
      <param name="value">Die zu konvertierende Zeichenfolge.</param>
      <returns>Die konvertierte Zeichenfolge.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Ruft einen Wert ab, der angibt, ob die angegebene Unterstützung für die Codegenerierung verfügbar ist.</summary>
      <param name="support">Der Typ der Codegenerierungsunterstützung, auf die getestet werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Unterstützung für die Codegenerierung verfügbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns>Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
      <returns>Ein gültiger Bezeichner für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Die CodeDOM-Kompilierungseinheit, für die Code generiert werden soll.</param>
      <param name="w">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und gibt diesen an den angegebenen TextWriter aus.</summary>
      <param name="e">Der Ausdruck, für den Code generiert werden soll.</param>
      <param name="w">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Der Namespace, für den der Code erzeugt wird.</param>
      <param name="w">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Die Anweisung, die die zu übersetzenden CodeDOM-Elemente enthält.</param>
      <param name="w">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Der Typ, für den der Code erzeugt wird.</param>
      <param name="w">Der TextWriter, an den der Code ausgegeben werden soll.</param>
      <param name="o">Die Optionen, die beim Generieren von Code verwendet werden sollen.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> ist nicht verfügbar. <paramref name="w" /> wurde möglicherweise geschlossen, bevor der Methodenaufruf erfolgte.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
      <param name="type">Der Typ, der zurückgegeben wird.</param>
      <returns>Der Name des Datentypverweises.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>Ruft einen Wert ab, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
      <param name="value">Der zu testende Wert.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Ruft einen Wert ab, der angibt, ob der Generator die vom angegebenen <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt dargestellten Sprachfunktionen unterstützt.</summary>
      <param name="support">Die Funktionen, auf die der Generator getestet werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebenen Funktionen unterstützt werden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>Löst eine Ausnahme aus, wenn der angegebene Wert kein gültiger Bezeichner ist.</summary>
      <param name="value">Der zu überprüfende Bezeichner.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>Löst eine Ausnahme aus, wenn die angegebene Zeichenfolge kein gültiger Bezeichner ist.</summary>
      <param name="value">Der Bezeichner, der auf Gültigkeit als Bezeichner getestet werden soll.</param>
      <exception cref="T:System.ArgumentException">Bei Ungültigkeit des angegebenen Bezeichners oder wenn Konflikte mit reservierten oder sprachspezifischen Schlüsselwörtern vorliegen.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>Versucht, alle in der angegebenen <see cref="T:System.CodeDom.CodeObject" />-Struktur oder in der angegebenen <see cref="N:System.CodeDom" />-Struktur enthaltenen Bezeichnerfelder zu validieren.</summary>
      <param name="e">Ein auf ungültige Bezeichner zu überprüfendes Objekt.</param>
      <exception cref="T:System.ArgumentException">Das angegebene <see cref="T:System.CodeDom.CodeObject" /> enthält einen ungültigen Bezeichner.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>Ruft die Codetypdeklaration für die aktuelle Klasse ab.</summary>
      <returns>Die Codetypdeklaration für die aktuelle Klasse.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>Ruft den aktuellen Member der Klasse ab.</summary>
      <returns>Der aktuelle Member der Klasse.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>Ruft den Namen des aktuellen Members ab.</summary>
      <returns>Der Name des aktuellen Members.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>Ruft den Namen der aktuellen Klasse ab.</summary>
      <returns>Der aktuelle Klassenname.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>Ruft die Anzahl der Leerzeichen ab, um die die einzelnen Einzugsebenen eingerückt werden sollen, oder legt diese fest.</summary>
      <returns>Die Anzahl der Leerzeichen, um die die einzelnen Einzugsebenen eingerückt werden.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, eine Klasse ist.</summary>
      <returns>
        <see langword="true" />, wenn es sich beim aktuellen Objekt um eine Klasse handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, ein Delegat ist.</summary>
      <returns>
        <see langword="true" />, wenn es sich beim aktuellen Objekt um einen Delegaten handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, eine Enumeration ist.</summary>
      <returns>
        <see langword="true" />, wenn es sich beim aktuellen Objekt um eine Enumeration handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>Ruft einen Wert ab, der angibt, ob das aktuelle Objekt, das gerade generiert wird, eine Schnittstelle ist.</summary>
      <returns>
        <see langword="true" />, wenn es sich beim aktuellen Objekt um eine Schnittstelle handelt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>Ruft einen Wert ab, der angibt, ob das aktuell generierte Objekt ein Werttyp oder eine Struktur ist.</summary>
      <returns>
        <see langword="true" />, wenn das aktuelle Objekt ein Werttyp oder eine Struktur ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>Ruft das Token ab, das <see langword="null" /> darstellt.</summary>
      <returns>Das Token, das <see langword="null" /> darstellt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>Ruft die vom Codegenerator zu verwendenden Optionen ab.</summary>
      <returns>Ein Objekt, das die vom Code-Generator zu verwendenden Optionen angibt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>Ruft den für die Ausgabe zu verwendenden Textwriter ab.</summary>
      <returns>Der für die Ausgabe zu verwendende Textwriter.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>Stellt einen von einem Code-Generator verwendeten Satz von Optionen dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />-Klasse.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>Ruft einen Wert ab, der angibt, ob zwischen Membern leere Zeilen eingefügt werden sollen, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn leere Zeilen eingefügt werden sollen, andernfalls <see langword="false" />. Der Standardwert dieser Eigenschaft ist <see langword="true" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>Ruft das Format ab, das für Klammern verwendet werden soll, oder legt dieses fest.</summary>
      <returns>Eine Zeichenfolge, die das für Klammern zu verwendende Format enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>Ruft einen Wert ab, der angibt, ob ein <see langword="else" />-Block, ein <see langword="catch" />-Block oder ein <see langword="finally" />-Block, einschließlich der Klammern, an die abschließende Zeile jedes vorhergehenden <see langword="if" />-Blocks oder <see langword="try" />-Blocks angefügt werden soll.</summary>
      <returns>
        <see langword="true" />, wenn ein else-Block angefügt werden soll, andernfalls <see langword="false" />. Der Standardwert dieser Eigenschaft ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>Ruft die für Einzüge zu verwendende Zeichenfolge ab oder legt diese fest.</summary>
      <returns>Eine Zeichenfolge, die die für Einzüge zu verwendenden Zeichen enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>Ruft das Objekt am angegebenen Index ab oder legt dieses fest.</summary>
      <param name="index">Der dem abzurufenden Objekt zugeordnete Name.</param>
      <returns>Das dem angegebenen Namen zugeordnete Objekt. Wenn kein dem angegebenen Namen zugeordnetes Objekt in der Auflistung vorhanden ist, <see langword="null" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>Ruft einen Wert ab, der angibt, ob Member in der Reihenfolge generiert werden sollen, in der Sie in den Memberauflistungen aufgeführt sind.</summary>
      <returns>
        <see langword="true" />, um die Member in der Reihenfolge zu generieren, in der Sie in der Memberauflistung aufgeführt sind, andernfalls <see langword="false" />. Der Standardwert dieser Eigenschaft ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>Stellt eine leere Implementierung der <see cref="T:System.CodeDom.Compiler.ICodeParser" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CodeParser" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>Kompiliert den angegebenen Textstream in eine <see cref="T:System.CodeDom.CodeCompileUnit" />-Klasse.</summary>
      <param name="codeStream">Eine <see cref="T:System.IO.TextReader" />-Klasse, die zum Lesen des zu analysierenden Codes verwendet wird.</param>
      <returns>Eine <see cref="T:System.CodeDom.CodeCompileUnit" />-Klasse, die das beim Analysieren des Codes erstellte Codemodell enthält.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>Stellt einen Compilerfehler oder eine Compilerwarnung dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse mithilfe der Angaben für Dateiname, Zeile, Spalte, Fehlernummer und Fehlertext.</summary>
      <param name="fileName">Der Dateiname der Datei, die der Compiler kompiliert hat, als der Fehler aufgetreten ist.</param>
      <param name="line">Die Zeile der Fehlerquelle.</param>
      <param name="column">Die Spalte der Fehlerquelle.</param>
      <param name="errorNumber">Die Fehlernummer des Fehlers.</param>
      <param name="errorText">Der Text der Fehlermeldung.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>Stellt eine Implementierung der <see cref="M:System.Object.ToString" />-Methode des Objekts bereit.</summary>
      <returns>Eine Zeichenfolgendarstellung des Compilerfehlers.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>Ruft die Nummer der Spalte ab, in der die Fehlerquelle auftritt, oder legt diese fest.</summary>
      <returns>Die Spaltennummer der Quelldatei, in der der Compiler den Fehler gefunden hat.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>Ruft die Fehlernummer ab oder legt diese fest.</summary>
      <returns>Die Fehlernummer als Zeichenfolge.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>Ruft den Text der Fehlermeldung ab oder legt diesen fest.</summary>
      <returns>Der Text der Fehlermeldung.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>Ruft den Dateinamen der Quelldatei mit dem Code ab, der den Fehler verursacht hat, oder legt diesen fest.</summary>
      <returns>Der Dateiname der Quelldatei mit dem Code, der den Fehler verursacht hat.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>Ruft einen Wert ab, der angibt, ob der Fehler eine Warnung ist, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der Fehler eine Warnung ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>Ruft die Nummer der Zeile ab, in der die Fehlerquelle auftritt, oder legt diese fest.</summary>
      <returns>Die Zeilennummer der Quelldatei, in der der Compiler den Fehler gefunden hat.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>Stellt eine Auflistung von<see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekten dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse, die das angegebene Array von <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekten enthält.</summary>
      <param name="value">Ein Array von <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekten, mit denen die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse, die den Inhalt der angegebenen <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> enthält.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Objekt, mit dem die Auflistung initialisiert werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>Fügt der Fehlerauflistung das angegebene <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekt hinzu.</summary>
      <param name="value">Das hinzuzufügende <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekt.</param>
      <returns>Der Index, an dem das neue Element eingefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>Kopiert die Elemente eines Arrays an das Ende der Fehlerauflistung.</summary>
      <param name="value">Ein Array vom Typ <see cref="T:System.CodeDom.Compiler.CompilerError" /> mit den Objekten, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>Fügt den Inhalt der angegebenen Compilerfehlerauflistung am Ende der Fehlerauflistung hinzu.</summary>
      <param name="value">Ein <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Objekt, das die Objekte enthält, die der Auflistung hinzugefügt werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung das angegebene <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekt enthält.</summary>
      <param name="value">Die zu suchende <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns>
        <see langword="true" />, wenn <see cref="T:System.CodeDom.Compiler.CompilerError" /> in der Auflistung enthalten ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>Kopiert die Auflistungswerte am angegebenen Index in eine eindimensionale <see cref="T:System.Array" />-Instanz.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> kopierten Werte ist.</param>
      <param name="index">Der Index im Array, an dem der Kopiervorgang beginnt.</param>
      <exception cref="T:System.ArgumentException">Das durch den <paramref name="array" />-Parameter angegebene Array ist mehrdimensional.  
  
- oder - 
Die Anzahl der Elemente in <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> ist größer als der verfügbare Bereich zwischen dem Indexwert des <paramref name="arrayIndex" />-Parameters im Array, der durch den <paramref name="array" />-Parameter angegeben ist, und dem durch den <paramref name="array" />-Parameter angegebenen Ende des Arrays.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="array" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Der <paramref name="index" />-Parameter ist niedriger als die Untergrenze des durch den <paramref name="array" />-Parameter angegebenen Arrays.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>Ruft den Index des angegebenen <see cref="T:System.CodeDom.Compiler.CompilerError" />-Objekts in der Auflistung ab, sofern es in der Auflistung vorhanden ist.</summary>
      <param name="value">Die zu suchende <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
      <returns>Der Index der angegebenen <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse in der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />-Klasse, sofern diese gefunden wird, andernfalls -1.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>Fügt die angegebene <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse am angegebenen Index in die Auflistung ein.</summary>
      <param name="index">Der nullbasierte Index, an dem der Compilerfehler eingefügt werden soll.</param>
      <param name="value">Der einzufügende <see cref="T:System.CodeDom.Compiler.CompilerError" />.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>Entfernt eine bestimmte <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse aus der Auflistung.</summary>
      <param name="value">Der <see cref="T:System.CodeDom.Compiler.CompilerError" />, der aus der <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> entfernt werden soll.</param>
      <exception cref="T:System.ArgumentException">Das angegebene Objekt wurde nicht in der Auflistung gefunden.</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung Fehler enthält.</summary>
      <returns>
        <see langword="true" />, wenn die Auflistung Fehler enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>Ruft einen Wert ab, der angibt, ob die Auflistung Warnungen enthält.</summary>
      <returns>
        <see langword="true" />, wenn die Auflistung Warnungen enthält, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>Ruft die <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse am angegebenen Index ab oder legt diese fest.</summary>
      <param name="index">Der nullbasierte Index des Eintrags, der in der Auflistung gesucht werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Der durch den <paramref name="index" />-Parameter angegebene Indexwert liegt außerhalb des gültigen Bereichs von Indizes für die Auflistung.</exception>
      <returns>Eine <see cref="T:System.CodeDom.Compiler.CompilerError" />-Klasse an jedem gültigen Index.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>Stellt die Konfigurationseinstellungen eines Sprachanbieters dar. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>Ruft die konfigurierten Compilereinstellungen für die Sprachanbieterimplementierung ab.</summary>
      <returns>Eine schreibgeschützte <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Instanz, die die für den Sprachanbieter konfigurierten Compileroptionen und Einstellungen enthält.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>Gibt eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die aktuellen Sprachanbietereinstellungen zurück.</summary>
      <returns>Ein der Sprachanbieterkonfiguration zugeordneter CodeDOM-Anbieter.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>Gibt eine <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Instanz für die aktuellen Sprachanbietereinstellungen und die angegebenen Optionen zurück.</summary>
      <param name="providerOptions">Eine Auflistung der Anbieteroptionen aus der Konfigurationsdatei.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Der Anbieter unterstützt Optionen nicht.</exception>
      <returns>Ein der Sprachanbieterkonfiguration und den angegebenen Optionen zugeordneter CodeDOM-Anbieter.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>Bestimmt, ob das angegebene Objekt denselben Sprachanbieter und dieselben Compilereinstellungen wie die aktuelle <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> aufweist.</summary>
      <param name="o">Das Objekt, das mit der aktuellen <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="o" /> ein <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Objekt ist und denselben Wert wie diese Instanz aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>Gibt die vom Sprachanbieter unterstützten Dateinamenerweiterungen zurück.</summary>
      <returns>Ein Array von vom Sprachanbieter unterstützten Dateinamenerweiterungen.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>Gibt den Hashcode für die aktuelle Instanz zurück.</summary>
      <returns>Ein 32-Bit-Ganzzahl-Hashcode mit Vorzeichen für die aktuelle <see cref="T:System.CodeDom.Compiler.CompilerInfo" />-Instanz, der zur Verwendung in Hashalgorithmen und Datenstrukturen, z. B. Hashtabellen, geeignet ist.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>Ruft die vom Sprachanbieter unterstützten Sprachnamen ab.</summary>
      <returns>Ein Array von vom Sprachanbieter unterstützten Sprachnamen.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>Ruft den Typ der konfigurierten <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />-Implementierung ab.</summary>
      <exception cref="T:System.Configuration.ConfigurationException">Der Sprachanbieter ist nicht auf diesem Computer konfiguriert.</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">Der Typ konnte nicht gefunden werden, da er <see langword="null" /> ist oder es sich um leere Zeichenfolge handelt.  
  
- oder - 
Der Typ konnte nicht gefunden werden, da der Name für <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> nicht in der Konfigurationsdatei gefunden wurde.</exception>
      <returns>Eine schreibgeschützte <see cref="T:System.Type" />-Instanz, die den konfigurierten Sprachanbietertyp darstellt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>Gibt einen Wert zurück, der angibt, ob die Sprachanbieterimplementierung auf dem Computer konfiguriert ist.</summary>
      <returns>
        <see langword="true" />, wenn der Sprachanbieterimplementierungstyp auf dem Computer konfiguriert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>Stellt die zum Aufrufen eines Compilers verwendeten Parameter dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse mit den angegebenen Assemblynamen.</summary>
      <param name="assemblyNames">Die Namen der Assemblys, auf die verwiesen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse mit den angegebenen Assemblynamen und dem Ausgabedateinamen.</summary>
      <param name="assemblyNames">Die Namen der Assemblys, auf die verwiesen werden soll.</param>
      <param name="outputName">Der Name der Ausgabedatei.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Klasse mit den Angaben für die Assemblynamen und den Ausgabedateinamen sowie einem Wert, der die eventuelle Einbindung von Debuginformationen angibt.</summary>
      <param name="assemblyNames">Die Namen der Assemblys, auf die verwiesen werden soll.</param>
      <param name="outputName">Der Name der Ausgabedatei.</param>
      <param name="includeDebugInformation">
        <see langword="true" />, um Debuginformationen einzuschließen; <see langword="false" />, um Debuginformationen auszuschließen.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>Ruft die optionalen Befehlszeilenargumente ab, die beim Aufrufen des Compilers verwendet werden soll, oder legt diese fest.</summary>
      <returns>Alle zusätzlichen Befehlszeilenargumente für den Compiler.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>Ruft den Namen des Kern- oder Standard-Assemblys ab, das grundlegende Typen wie <see cref="T:System.Object" />, <see cref="T:System.String" /> oder <see cref="T:System.Int32" /> enthält, oder legt diesen fest.</summary>
      <returns>Der Name der Kernassembly, die einen Basistyp enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>Ruft die .NET Framework-Ressourcendateien ab, die in das Kompilieren der Assemblyausgabe eingeschlossen werden sollen.</summary>
      <returns>Eine Sammlung, die die Dateipfaden der .NET Framework-Ressourcen enthält, die in die generierte Assembly eingefügt werden sollen.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>Ruft einen Wert ab, der angibt, ob eine ausführbare Datei generiert werden soll, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn eine ausführbare Datei generiert werden soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>Ruft einen Wert ab, der angibt, ob die Ausgabe im Speicher generiert werden soll, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn der Compiler die Ausgabe im Speicher generieren soll, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>Ruft einen Wert ab, der angibt, ob Debuginformationen in die kompilierte ausführbare Datei aufgenommen werden sollen, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn Debuginformationen generiert werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>Ruft die .NET Framework-Ressourcendateien ab, auf die in der aktuellen Quelle verwiesen wird.</summary>
      <returns>Eine Sammlung, die die Dateipfade der .NET Framework-Ressourcen enthält, auf die in der Quelle verwiesen wird.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>Ruft den Namen der Hauptklasse ab oder legt diesen fest.</summary>
      <returns>Der Name der Hauptklasse.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>Ruft den Namen der Ausgabeassembly ab oder legt diesen fest.</summary>
      <returns>Der Name der Ausgabeassembly.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>Ruft die Assemblys ab, auf die durch das aktuelle Projekt verwiesen wird.</summary>
      <returns>Eine Sammlung, die die Assemblynamen enthält, auf die die zu kompilierende Quelle verweist.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>Ruft die Auflistung ab, die die temporären Dateien enthält, oder legt diese fest.</summary>
      <returns>Eine Sammlung, die die temporären Dateien enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>Ruft einen Wert ab, der angibt, ob Warnungen als Fehler behandelt werden sollen, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn Warnungen als Fehler behandelt werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>Ruft das Benutzertoken ab, das beim Erstellen des Compilerprozesses verwendet werden soll, oder legt dieses fest.</summary>
      <returns>Das zu verwendende Benutzertoken.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>Ruft die Warnstufe ab, bei der der Compiler die Kompilierung abbricht, oder legt diese fest.</summary>
      <returns>Die Warnstufe, bei der der Compiler die Kompilierung abbricht.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>Ruft den Dateinamen einer Win32-Ressourcendatei ab, zu der in der kompilierten Assembly ein Link erstellt werden soll, oder legt diesen fest.</summary>
      <returns>Eine Win32-Ressourcendatei, zu der in der kompilierten Assembly eine Verknüpfung erstellt wird.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>Stellt die Ergebnisse der Kompilierung dar, die von einem Compiler zurückgegeben werden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Klasse, die die angegebenen temporären Dateien verwendet.</summary>
      <param name="tempFiles">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>Ruft die kompilierte Assembly ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.Reflection.Assembly" />, die die kompilierte Assembly angibt.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>Ruft die Auflistung von Compilerfehlern und -warnungen ab.</summary>
      <returns>Eine <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, die eventuell vorliegende Fehler und Warnungen angibt, die sich aus der Kompilierung ergeben haben.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>Ruft den Rückgabewert des Compilers ab oder legt diesen fest.</summary>
      <returns>Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>Ruft die Compilerausgabemeldungen ab.</summary>
      <returns>Eine <see cref="T:System.Collections.Specialized.StringCollection" />, die die Ausgabemeldungen enthält.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>Ruft den Pfad der kompilierten Assembly ab oder legt diesen fest.</summary>
      <returns>Der Pfad der Assembly oder <see langword="null" />, wenn die Assembly im Speicher generiert wurde.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>Ruft die zu verwendende Auflistung von temporären Dateien ab oder legt diese fest.</summary>
      <returns>Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>Stellt Befehlsausführungsfunktionen zum Aufrufen von Compilern bereit. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>Führt den Befehl mit den angegebenen temporären Dateien aus und wartet, bis der Aufruf zurückgegeben wird.</summary>
      <param name="cmd">Den auszuführenden Befehl.</param>
      <param name="tempFiles">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Führt den angegebenen Befehl mit dem angegebenen Benutzertoken und den temporären Dateien aus und wartet auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="userToken">Das Token, mit dem der Compilerprozess gestartet wird.</param>
      <param name="cmd">Den auszuführenden Befehl.</param>
      <param name="tempFiles">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns>Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Führt den angegebenen Befehl mit den Angaben für das Benutzertoken, das aktuelle Verzeichnis und die temporären Dateien aus und wartet dann auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="userToken">Das Token, mit dem der Compilerprozess gestartet wird.</param>
      <param name="cmd">Den auszuführenden Befehl.</param>
      <param name="currentDir">Das Verzeichnis, in dem der Prozess gestartet werden soll.</param>
      <param name="tempFiles">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns>Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Führt den angegebenen Befehl mit den angegebenen temporären Dateien aus und wartet auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="cmd">Den auszuführenden Befehl.</param>
      <param name="tempFiles">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns>Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>Führt den angegebenen Befehl mit dem angegebenen aktuellen Verzeichnis und den temporären Dateien aus und wartet auf das Beenden des Aufrufs, wobei die Ausgabe und die Fehlerinformationen des Compilers in den angegebenen Zeichenfolgen gespeichert werden.</summary>
      <param name="cmd">Den auszuführenden Befehl.</param>
      <param name="currentDir">Das aktuelle Verzeichnis.</param>
      <param name="tempFiles">Eine <see cref="T:System.CodeDom.Compiler.TempFileCollection" />, mit der Verweise auf temporäre Dateien verwaltet und gespeichert werden, die während der Kompilierung generiert werden.</param>
      <param name="outputName">Ein Verweis auf eine Zeichenfolge, in der die Meldungsausgabe des Compilers gespeichert wird.</param>
      <param name="errorName">Ein Verweis auf eine Zeichenfolge, in der die Namen der aufgetretenen Fehler gespeichert werden.</param>
      <returns>Der Rückgabewert des Compilers.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>Definiert Bezeichner, mit denen bestimmt wird, ob ein Code-Generator bestimmte Typen von Codeelementen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>Gibt den Generator an, der Arrays von Arrays unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>Gibt den Generator an, der Assemblyattribute unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>Gibt den Generator an, der verkettete Konstruktorargumente unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>Gibt den Generator an, der komplexe Ausdrücke unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>Gibt den Generator an, der Delegatendeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>Gibt den Generator an, der Enumerationsdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>Gibt den Generator an, der Ereignisdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>Gibt den Generator an, der das Deklarieren von Indexereigenschaften unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>Gibt den Generator an, der Schnittstellendeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>Gibt den Generator an, der Werttypdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>Gibt den Generator an, der das Bezeichnen einer Methode für den Programmeinstiegspunkt unterstützt. Dies wird beim Erstellen von ausführbaren Dateien verwendet.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>Gibt den Generator an, der generische Typdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>Gibt den Generator an, der generische Typverweise unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>Gibt den Generator an, der goto-Anweisungen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>Gibt den Generator an, der Verweise auf mehrdimensionale Arrays unterstützt. Derzeit können mit CodeDom keine mehrdimensionalen Arrays instanziiert werden.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>Gibt den Generator an, der das Deklarieren von Membern unterstützt, die mehrere Schnittstellen implementieren.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>Gibt den Generator an, der das Deklarieren von geschachtelten Typen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>Gibt den Generator an, der Parameterattribute unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>Gibt den Generator an, der partielle Typdeklarationen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>Gibt den Generator an, der öffentliche statische Member unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>Gibt den Generator an, der Verweis- und Out-Parameter unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>Gibt an, dass der Generator die Kompilierung mit .NET Framework-Ressourcen unterstützt. Dabei kann es sich im Standardressourcen handeln, die direkt in eine Assembly kompiliert werden, oder um Ressourcen, auf die in einer Satellitenassembly verwiesen wird.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>Gibt den Generator an, der Attributdeklarationen von Rückgabetypen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>Gibt den Generator an, der statische Konstruktoren unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>Gibt an, dass der Generator <c>try-catch-</c> Anweisungen unterstützt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>Gibt den Generator an, der die Kompilierung mit Win32-Ressourcen unterstützt.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>Definiert eine Schnittstelle zum Aufrufen der Kompilierung eines Quellcodes oder einer CodeDOM-Struktur mit einem bestimmten Compiler.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>Kompiliert eine Assembly aus der <see cref="N:System.CodeDom" />-Struktur in der angegebenen <see cref="T:System.CodeDom.CodeCompileUnit" /> mit den angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="compilationUnit">Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die den zu kompilierenden Code angibt.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>Kompiliert eine Assembly auf Grundlage der <see cref="N:System.CodeDom" />-Strukturen im angegebenen Array von <see cref="T:System.CodeDom.CodeCompileUnit" />-Objekten mit den angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="compilationUnits">Ein Array vom Typ <see cref="T:System.CodeDom.CodeCompileUnit" />, das den zu kompilierenden Code angibt.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Kompiliert eine Assembly aus dem in der angegebenen Datei enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="fileName">Der Dateiname der Datei, die den zu kompilierenden Quellcode enthält.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Kompiliert eine Assembly aus dem in den angegebenen Dateien enthaltenen Quellcode mit den angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="fileNames">Die Dateinamen der zu kompilierenden Dateien.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>Kompiliert eine Assembly aus der angegebenen Zeichenfolge mit Quellcode unter Verwendung der angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="source">Der zu kompilierende Quellcode.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>Kompiliert eine Assembly aus dem angegebenen Array von Zeichenfolgen mit Quellcode und unter Verwendung der angegebenen Compilereinstellungen.</summary>
      <param name="options">Ein <see cref="T:System.CodeDom.Compiler.CompilerParameters" />-Objekt, das die Einstellungen für die Kompilierung angibt.</param>
      <param name="sources">Die zu kompilierenden Quellcodezeichenfolgen.</param>
      <returns>Ein <see cref="T:System.CodeDom.Compiler.CompilerResults" />-Objekt, das die Ergebnisse der Kompilierung angibt.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>Definiert eine Schnittstelle zum Generieren von Code.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>Erstellt einen mit einem Escapezeichen versehenen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein mit einem Escapezeichen versehener Bezeichner generiert werden soll.</param>
      <returns>Der mit einem Escapezeichen versehene Bezeichner für den Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
      <param name="value">Die Zeichenfolge, für die ein gültiger Bezeichner generiert werden soll.</param>
      <returns>Ein gültiger Bezeichner für den angegebenen Wert.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeCompileUnit" />, für den Code generiert werden soll.</param>
      <param name="w">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und gibt diesen an den angegebenen TextWriter aus.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeExpression" />, der den Ausdruck angibt, für den Code generiert werden soll.</param>
      <param name="w">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeNamespace" />, der den Namespace angibt, für den Code generiert werden soll.</param>
      <param name="w">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Ein <see cref="T:System.CodeDom.CodeStatement" />, das die zu übersetzenden CodeDOM-Elemente enthält.</param>
      <param name="w">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
      <param name="e">Eine <see cref="T:System.CodeDom.CodeTypeDeclaration" />, die den Typ angibt, für den Code generiert werden soll.</param>
      <param name="w">Der <see cref="T:System.IO.TextWriter" />, an den Code ausgegeben werden soll.</param>
      <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />, das die Optionen angibt, die für das Generieren von Code verwendet werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>Ruft den durch die angegebene <see cref="T:System.CodeDom.CodeTypeReference" /> angegebenen Typ ab.</summary>
      <param name="type">Eine <see cref="T:System.CodeDom.CodeTypeReference" />, die den zurückzugebenden Typ angibt.</param>
      <returns>Eine Textdarstellung des angegebenen Typs für die Sprache, für die dieser Code-Generator Code generieren kann. Durch Übergeben des Typs System.Int32 in Visual Basic wird z. B. "Integer" zurückgegeben.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>Ruft einen Wert ab, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
      <param name="value">Der Wert, der auf Gültigkeit als Bezeichner getestet werden soll.</param>
      <returns>
        <see langword="true" />, wenn der <paramref name="value" />-Parameter ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>Ruft einen Wert ab, der angibt, ob der Generator die vom angegebenen <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />-Objekt dargestellten Sprachfunktionen unterstützt.</summary>
      <param name="supports">Die Funktionen, auf die der Generator getestet werden soll.</param>
      <returns>
        <see langword="true" />, wenn die angegebenen Funktionen unterstützt werden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>Löst eine Ausnahme aus, wenn der angegebene Wert kein gültiger Bezeichner ist.</summary>
      <param name="value">Der zu überprüfende Bezeichner.</param>
      <exception cref="T:System.ArgumentException">Der Bezeichner ist ungültig.</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>Definiert eine Schnittstelle zum Analysieren von Code in eine <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>Bei der Implementierung in einer abgeleiteten Klasse wird der angegebene Textstream in eine <see cref="T:System.CodeDom.CodeCompileUnit" /> kompiliert.</summary>
      <param name="codeStream">Ein <see cref="T:System.IO.TextReader" />, der zum Lesen des zu kompilierenden Codes verwendet werden kann.</param>
      <returns>Eine <see cref="T:System.CodeDom.CodeCompileUnit" />, die eine Darstellung des analysierten Code enthält.</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>Definiert Bezeichner für die Angabe spezieller Features einer Sprache.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>Bei der Sprache wird die Groß- und Kleinschreibung nicht berücksichtigt.</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>Die Spache verfügt über Standardmerkmale.</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>Stellt eine Auflistung temporärer Dateien dar.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.TempFileCollection" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.TempFileCollection" />-Klasse mit dem angegebenen temporären Verzeichnis, für das festgelegt wurde, dass temporäre Dateien nach der Generierung und Verwendung standardmäßig gelöscht werden.</summary>
      <param name="tempDir">Ein Pfad zu dem temporären Verzeichnis, in dem die temporären Dateien gespeichert werden.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.CodeDom.Compiler.TempFileCollection" />-Klasse mit den Angaben für das temporäre Verzeichnis und dem Wert, der angibt, ob die temporären Dateien nach der Generierung und Verwendung standardmäßig gelöscht oder beibehalten werden.</summary>
      <param name="tempDir">Ein Pfad zu dem temporären Verzeichnis, in dem die temporären Dateien gespeichert werden.</param>
      <param name="keepFiles">
        <see langword="true" />, wenn die temporären Dateien nach der Verwendung beibehalten, <see langword="false" />, wenn sie gelöscht werden sollen.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>Fügt der Auflistung einen Dateinamen mit der angegebenen Dateinamenerweiterung hinzu.</summary>
      <param name="fileExtension">Die Dateinamenerweiterung für den automatisch generierten temporären Dateinamen, der der Auflistung hinzugefügt werden soll.</param>
      <returns>Ein Dateiname mit der angegebenen Erweiterung, der gerade der Auflistung hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>Fügt der Auflistung einen Dateinamen mit der angegebenen Dateinamenerweiterung unter Verwendung des angegebenen Wertes hinzu, der angibt, ob die Datei gelöscht oder beibehalten werden soll.</summary>
      <param name="fileExtension">Die Dateinamenerweiterung für den automatisch generierten temporären Dateinamen, der der Auflistung hinzugefügt werden soll.</param>
      <param name="keepFile">
        <see langword="true" />, wenn die Datei nach der Verwendung beibehalten, <see langword="false" />, wenn sie gelöscht werden soll.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="fileExtension" /> ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
      <returns>Ein Dateiname mit der angegebenen Erweiterung, der gerade der Auflistung hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>Fügt der Auflistung die Datei mit dem angegebenen Wert hinzu, der festlegt, ob die Datei nach dem Löschen der Auflistung oder dem Aufruf der <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />-Methode beibehalten werden soll.</summary>
      <param name="fileName">Der Name der Datei, die der Auflistung hinzugefügt werden soll.</param>
      <param name="keepFile">
        <see langword="true" />, wenn die Datei nach der Verwendung beibehalten, <see langword="false" />, wenn sie gelöscht werden soll.</param>
      <exception cref="T:System.ArgumentException">Der <paramref name="fileName" /> ist <see langword="null" /> oder eine leere Zeichenfolge.  
  
- oder - 
 "<paramref name="fileName" />" ist doppelt vorhanden.</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>Kopiert die Member der Auflistung beginnend am angegebenen Index in die angegebene Zeichenfolge.</summary>
      <param name="fileNames">Das Array von Zeichenfolgen, in das kopiert werden soll.</param>
      <param name="start">Der Index des Arrays, an dem mit dem Kopieren begonnen werden soll.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>Löscht die temporären Dateien in dieser Auflistung, die nicht für das Beibehalten markiert wurden.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>Gibt die von <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>Versucht, die temporären Dateien zu löschen, bevor dieses Objekt von der Garbage Collection freigegeben wird.</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>Ruft einen Enumerator ab, der die Member der Auflistung aufzählen kann.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der die Member der Auflistung enthält.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Kopiert die Elemente dieser Auflistung in ein Array, wobei am angegebenen Index des Zielarrays begonnen wird.</summary>
      <param name="array">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.ICollection" /> kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
      <param name="start">Der nullbasierte Index im Array, ab dem kopiert wird.</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein <see cref="T:System.Collections.IEnumerator" />, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>Ruft den vollständigen Pfad des Basisdateinamens ohne Dateinamenerweiterung im Pfad des temporären Verzeichnisses ab, das zum Generieren von temporären Dateinamen für die Auflistung verwendet wird.</summary>
      <exception cref="T:System.Security.SecurityException">Wenn die <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" />-Eigenschaft nicht oder auf <see langword="null" /> festgelegt wurde und <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> nicht für das von der <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" />-Eigenschaft angegebene temporäre Verzeichnis gewährt wird.</exception>
      <returns>Der vollständige Pfad des Basisdateinamens ohne Dateinamenerweiterung im Pfad des temporären Verzeichnisses, das zum Generieren von temporären Dateinamen für die Auflistung verwendet wird.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>Ruft die Anzahl der Dateien in der Auflistung ab.</summary>
      <returns>Die Anzahl der Dateien in der Auflistung.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>Ruft einen Wert ab, der angibt, ob die Dateien beim Aufrufen der <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" />-Methode oder beim Freigeben der Auflistung standardmäßig beibehalten werden sollen, oder legt diesen fest.</summary>
      <returns>
        <see langword="true" />, wenn die Dateien beibehalten werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>Ruft die Anzahl der Elemente in der Auflistung ab.</summary>
      <returns>Die Anzahl der Elemente, die in <see cref="T:System.Collections.ICollection" /> enthalten sind.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert ist (threadsicher).</summary>
      <returns>
        <see langword="true" />, wenn der Zugriff auf das <see cref="T:System.Collections.ICollection" /> synchronisiert (threadsicher) ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</summary>
      <returns>Ein Objekt, mit dem der Zugriff auf <see cref="T:System.Collections.ICollection" /> synchronisiert werden kann.</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>Ruft das temporäre Verzeichnis zum Speichern der temporären Dateien ab.</summary>
      <returns>Das temporäre Verzeichnis zum Speichern der temporären Dateien.</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>Definiert Bezeichner, mit denen die Richtung von Parameter- und Argumentdeklarationen angegeben wird.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>Ein eingehendes Feld.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>Ein ausgehendes Feld.</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>Ein Feld als Verweis.</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>Definiert Bezeichner für Memberattribute von Klassenmembern.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>Ein abstrakter Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>Eine Zugriffsmaske.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>Ein Member, auf den alle Klassen in der gleichen Assembly zugreifen können.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>Ein konstanter Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>Ein Member, auf den aus der Familie seiner Klasse und abgeleiteter Klassen zugegriffen werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>Ein Member, auf den aus seiner Klasse und aus abgeleiteten Klassen in der gleichen Assembly zugegriffen werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>Ein Member, auf den aus seiner Klasse, aus abgeleiteten Klassen in einer beliebigen Assembly und aus allen Klassen in der gleichen Assembly zugegriffen werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>Ein Member, der in einer abgeleiteten Klasse nicht überschrieben werden kann.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>Ein new-Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>Ein überladener Member. Bei einigen Sprachen wie Visual Basic müssen überladene Member explizit angegeben werden.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>Ein Member, der einen Basisklassenmember überschreibt.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>Ein private-Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>Ein public-Member.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>Eine Gültigkeitsbereichsmaske.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>Ein statischer Member. Dies entspricht dem <see langword="Shared" />-Schlüsselwort in Visual Basic.</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>Eine VTable-Maske.</summary>
    </member>
  </members>
</doc>
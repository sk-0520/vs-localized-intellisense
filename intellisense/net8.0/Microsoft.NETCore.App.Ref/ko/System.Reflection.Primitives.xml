<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>명령이 제어 흐름을 변경하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>분기 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>중단 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>호출 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>조건부 분기 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>다음 명령에 대한 정보를 제공합니다. 예를 들어 <see langword="Unaligned" />의 <see langword="Reflection.Emit.Opcodes" /> 명령에는 <see langword="FlowControl.Meta" />가 포함되어 있고, 이것은 다음 포인터 명령이 정렬되지 않을 수 있다는 것을 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>일반적인 제어 흐름입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary>이 열거자 값은 예약되었으므로 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>반환 명령입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>예외 throw 명령입니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>IL(중간 언어) 명령을 설명합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>지정된 개체가 이 <see langword="Opcode" />와 같은지 여부를 검사합니다.</summary>
      <param name="obj">이 개체와 비교할 개체입니다.</param>
      <returns>
        <paramref name="obj" />가 <see langword="true" />의 인스턴스이고 해당 개체와 같으면 <see langword="Opcode" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>현재 인스턴스와 지정된 <see cref="T:System.Reflection.Emit.OpCode" />이 같은지 여부를 나타냅니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <returns>
        <paramref name="obj" />의 값이 현재 인스턴스의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>이 <see langword="Opcode" />의 생성된 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>두 개의 <see cref="T:System.Reflection.Emit.OpCode" /> 구조체가 같은지 여부를 나타냅니다.</summary>
      <param name="a">
        <paramref name="b" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <param name="b">
        <paramref name="a" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="a" />와 같으면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>두 개의 <see cref="T:System.Reflection.Emit.OpCode" /> 구조체가 같지 않은지 여부를 나타냅니다.</summary>
      <param name="a">
        <paramref name="b" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <param name="b">
        <paramref name="a" />와 비교할 <see cref="T:System.Reflection.Emit.OpCode" />입니다.</param>
      <returns>
        <see langword="true" />가 <paramref name="a" />와 다르면 <paramref name="b" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>이 <see langword="Opcode" />를 <see cref="T:System.String" />으로 반환합니다.</summary>
      <returns>이 <see langword="Opcode" />의 이름이 들어 있는 문자열입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>IL(중간 언어) 명령의 흐름 제어 특성입니다.</summary>
      <returns>읽기 전용입니다. 흐름 제어의 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>IL(중간 언어) 명령의 이름입니다.</summary>
      <returns>읽기 전용입니다. IL 명령의 이름입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>IL(중간 언어) 명령의 형식입니다.</summary>
      <returns>읽기 전용입니다. IL(중간 언어) 명령의 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>IL(중간 언어) 명령의 피연산자 형식입니다.</summary>
      <returns>읽기 전용입니다. IL 명령의 피연산자 형식입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>IL(중간 언어) 명령의 크기입니다.</summary>
      <returns>읽기 전용입니다. IL 명령의 크기입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>IL(중간 언어) 명령에서 스택을 팝하는 방법입니다.</summary>
      <returns>읽기 전용입니다. IL 명령에서 스택을 팝 하는 방법입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>IL(중간 언어) 명령에서 스택에 피연산자를 푸시하는 방법입니다.</summary>
      <returns>읽기 전용입니다. IL 명령에서 스택에 피연산자를 푸시하는 방법입니다.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>IL(중간 언어) 명령의 숫자 값을 가져옵니다.</summary>
      <returns>읽기 전용입니다. IL 명령의 숫자 값입니다.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>
        <see cref="T:System.Reflection.Emit.ILGenerator" /> 같은 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" /> 클래스 멤버를 사용한 내보내기 작업에 사용되는 MSIL(Microsoft Intermediate Language) 명령의 필드 표현을 제공합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>두 개 값을 더하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>두 정수를 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>부호 없는 두 정수 값을 더하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>두 값의 비트 AND를 계산하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>현재 메서드의 인수 목록에 대한 관리되지 않는 포인터를 반환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>두 값이 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>두 값이 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>첫째 값이 둘째 값보다 크거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>첫째 값이 둘째 값보다 크거나 같으면 대상 명령(약식)으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 크면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작거나 같으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값을 비교한 결과 첫째 값이 둘째 값보다 작으면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>두 개의 부호 없는 정수 값 또는 순서가 지정되지 않은 부동 소수점 값이 서로 다르면 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>값 형식을 개체 참조(<see langword="O" /> 형식)로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>조건에 상관 없이 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>조건에 상관 없이 대상 명령(약식)으로 제어를 전송합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>중단점이 설정되었음을 디버거에 알리기 위해 CLI(공용 언어 인프라)에 신호를 보냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>
        <paramref name="value" />가 <see langword="false" />, null 참조(Visual Basic에서는 <see langword="Nothing" />) 또는 0인 경우 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>
        <paramref name="value" />가 <see langword="false" />, null 참조 또는 0인 경우 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>
        <paramref name="value" />가 <see langword="true" />이거나 null이 아니거나 0이 아닌 경우 대상 명령으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>
        <paramref name="value" />가 <see langword="true" />이거나 null이 아니거나 0이 아닌 경우 대상 명령(약식)으로 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>전송된 메서드 설명자가 나타내는 메서드를 호출합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>호출 규칙에서 설명하는 인수를 사용하여 계산 스택에 표시된 메서드를 진입점에 대한 포인터로 호출합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>개체에서 런타임에 바인딩된 메서드를 호출하고 반환 값을 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>참조로 전송된 개체를 지정된 클래스로 캐스팅하려고 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>두 값을 비교합니다. 두 값이 같으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>두 값을 비교합니다. 첫째 값이 둘째 값보다 크면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>부호가 없거나 순서가 없는 두 값을 비교합니다. 첫째 값이 둘째 값보다 크면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>값이 유한 값이 아니면 <see cref="T:System.ArithmeticException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>두 값을 비교합니다. 첫째 값이 둘째 값보다 작으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>부호가 없거나 순서가 없는 <paramref name="value1" />과 <paramref name="value2" />를 비교합니다. <paramref name="value1" />이 <paramref name="value2" />보다 작으면 정수 값 1(<see langword="(int32" />)이 계산 스택으로 푸시되고, 그렇지 않으면 0(<see langword="int32" />)이 계산 스택으로 푸시됩니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>가상 메서드가 호출되는 형식을 제한합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="native int" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="int8" />으로 변환하여 <see langword="int32" />로 확장합니다(채웁니다).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="int16" />으로 변환하여 <see langword="int32" />로 확장합니다(채웁니다).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="int32" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="int64" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="native int" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" /> 을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int16" />으로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" /> 을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 부호 있는 <see langword="int64" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" /> 을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 부호 있는 <see langword="int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned native int" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int32" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>계산 스택 맨 위에 있는 부호 있는 값을 <see langword="unsigned int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 값을 <see langword="unsigned int64" />로 변환하고, 오버플로에 대한 <see cref="T:System.OverflowException" />을 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>계산 스택 맨 위에 있는 부호 없는 정수 값을 <see langword="float32" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="float32" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="float64" />로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="unsigned native int" />로 변환하고 <see langword="native int" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="unsigned int8" />로 변환하고 <see langword="int32" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="unsigned int16" />로 변환하고 <see langword="int32" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="unsigned int32" />로 변환하고 <see langword="int32" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>계산 스택 맨 위에 있는 값을 <see langword="unsigned int64" />로 변환하고 <see langword="int64" />로 확장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>지정된 수의 바이트를 소스 주소에서 대상 주소로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>개체(<see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" /> 형식)의 주소에 있는 값 형식을 대상 개체(<see langword="&amp;" />, <see langword="*" /> 또는 <see langword="native int" /> 형식)의 주소로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>두 값을 나누고 결과를 부동 소수점(<see langword="F" /> 형식)이나 몫(<see langword="int32" /> 형식)으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>두 개의 부호 없는 정수를 나누고 결과(<see langword="int32" />)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>현재 계산 스택 맨 위에 있는 값을 복사하여 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>예외의 <see langword="filter" /> 절에서 CLI(공용 언어 인프라) 예외 처리기로 다시 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>예외 블록의 <see langword="fault" /> 절이나 <see langword="finally" /> 절에서 CLI(공용 언어 인프라) 예외 처리기로 다시 제어를 전달합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>특정 주소에 지정된 메모리 블록을 주어진 크기와 초기 값으로 초기화합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>지정된 주소에서 값 형식의 각 필드를 null 참조 또는 적절한 기본 형식의 0으로 초기화합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>개체 참조(<see langword="O" /> 형식)가 특정 클래스의 인스턴스인지 여부를 테스트합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>현재 메서드를 종료하고 지정된 메서드로 점프합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>지정된 인덱스 값이 참조하는 인수를 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>인덱스 0에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>인덱스 1에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>인덱스 2에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>인덱스 3에 있는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>지정된 약식 인덱스가 참조하는 인수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>인수 주소를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>인수 주소를 계산 스택에 약식으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>
        <see langword="int32" /> 형식의 주어진 값을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>정수 값 0을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>정수 값 1을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>정수 값 2를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>정수 값 3을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>정수 값 4를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>정수 값 5를 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>정수 값 6을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>정수 값 7을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>정수 값 8을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>정수 값 -1을 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>주어진 <see langword="int8" /> 값을 약식인 <see langword="int32" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>
        <see langword="int64" /> 형식의 주어진 값을 <see langword="int64" />로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>
        <see langword="float32" /> 형식의 주어진 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>
        <see langword="float64" /> 형식의 주어진 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>지정된 배열 인덱스에 있는 요소를 이 명령에 지정된 형식으로 계산 스택 맨 위에 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>지정된 배열 인덱스에서 <see langword="native int" /> 형식을 갖는 요소를 계산 스택 위에 <see langword="native int" />로서 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>지정된 배열 인덱스의 <see langword="int8" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>지정된 배열 인덱스의 <see langword="int16" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>지정된 배열 인덱스의 <see langword="int32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>지정된 배열 인덱스의 <see langword="int64" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int64" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>지정된 배열 인덱스에서 <see langword="float32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="F" />형식(부동 소수점)으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>지정된 배열 인덱스에서 <see langword="float64" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="F" />형식(부동 소수점)으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>지정된 배열 인덱스에서 개체 참조를 포함하는 요소를 <see langword="O" /> 형식(개체 참조)으로 계산 스택 맨 위에 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>지정된 배열 인덱스의 <see langword="unsigned int8" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>지정된 배열 인덱스의 <see langword="unsigned int16" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>지정된 배열 인덱스의 <see langword="unsigned int32" /> 형식을 갖는 요소를 계산 스택 맨 위에 <see langword="int32" />로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>지정된 배열 인덱스에 있는 배열 요소의 주소를 <see langword="&amp;" /> 형식(관리되는 포인터)으로 계산 스택 맨 위에 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>현재 계산 스택에 참조가 있는 개체에서 필드의 값을 찾습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>현재 계산 스택에 참조가 있는 개체에서 필드의 주소를 찾습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>특정 메서드를 구현하는 네이티브 코드에 대한 관리되지 않는 포인터(<see langword="native int" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>
        <see langword="native int" /> 형식의 값을 <see langword="native int" /> 형식으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>
        <see langword="int8" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>
        <see langword="int16" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>
        <see langword="int32" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>
        <see langword="int64" /> 형식의 값을 <see langword="int64" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>
        <see langword="float32" /> 형식의 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>
        <see langword="float64" /> 형식의 값을 <see langword="F" /> 형식(부동 소수점)으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>개체 참조를 <see langword="O" /> 형식(개체 참조)으로 계산 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>
        <see langword="unsigned int8" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>
        <see langword="unsigned int16" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>
        <see langword="unsigned int32" /> 형식의 값을 <see langword="int32" />로 스택에 간접적으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>0부터 시작하는 1차원 배열의 요소 수를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>특정 인덱스에 있는 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>인덱스 0의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>인덱스 1의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>인덱스 2의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>인덱스 3의 지역 변수를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>특정 인덱스에 있는 지역 변수를 계산 스택에 약식으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>특정 인덱스에 있는 지역 변수의 주소를 계산 스택으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>특정 인덱스에 있는 지역 변수의 주소를 계산 스택에 약식으로 로드합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>null 참조(<see langword="O" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>주소가 가리키는 값 형식 개체를 계산 스택 맨 위로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>정적 필드의 값을 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>정적 필드의 주소를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>새 개체 참조를 메타데이터에 저장된 문자열 리터럴로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>메타데이터 토큰을 런타임 표현으로 변환하여 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>지정된 개체와 관련된 특정 가상 메서드를 구현하는 네이티브 코드에 대한 관리되지 않는 포인터(<see langword="native int" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>조건에 관계없이 특정 대상 명령으로 제어를 전송하여 보호되는 코드 영역을 끝냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>조건에 관계없이 대상 명령(약식)으로 제어를 전달하여 보호되는 코드 영역을 끝냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>로컬 동적 메모리 풀에서 특정 바이트 수를 할당하고 처음 할당된 바이트의 주소(임시 포인터, <see langword="*" /> 형식)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>특정 형식의 인스턴스에 대한 형식화된 참조를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>두 값을 곱하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>두 정수 값을 곱하고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>부호 없는 두 정수 값을 곱하고 오버플로를 검사한 후 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>값을 음수로 만들고 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>0부터 시작하고 요소가 특정 형식인 새 1차원 배열에 대한 개체 참조를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>개체 참조(<see langword="O" /> 형식)를 계산 스택으로 푸시하여 값 형식의 새 개체나 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>opcode가 패치되면 공간을 채웁니다. 처리 사이클이 사용되더라도 의미 있는 연산이 수행되지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>스택 맨 위에 있는 정수 값의 비트 보수를 계산하고 결과를 같은 형식으로 계산 스택에 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>스택 맨 위에 있는 두 정수 값의 비트 보수를 계산하고 결과를 컴퓨팅 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>현재 계산 스택 맨 위에 있는 값을 제거합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>이 명령은 예약되어 있습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>후속 배열 주소 연산에서 런타임에 형식 검사를 수행하지 않고 가변성이 제한된 관리되는 포인터를 반환하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>형식화된 참조에 포함된 형식 토큰을 가져옵니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>형식화된 참조에 포함된 주소(<see langword="&amp;" /> 형식)를 검색합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>부호 없는 두 값을 나누어 나머지를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>현재 메서드에서 제어를 반환하고 반환 값이 있을 경우 호출 수신자의 계산 스택에서 호출자의 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>현재 예외를 다시 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>결과를 계산 스택으로 푸시하여 지정된 비트 수만큼 정수 값을 0에서 왼쪽으로 이동합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>결과를 계산 스택으로 푸시하여 부호 안에 있는 정수 값을 지정된 비트 수만큼 오른쪽으로 이동합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>결과를 계산 스택으로 푸시하여 부호 없는 정수 값을 지정된 비트 수만큼 0에서 오른쪽으로 이동합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>주어진 값 형식의 크기(바이트)를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>지정된 인덱스에 있는 인수 슬롯에 계산 스택 맨 위에 있는 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>계산 스택 맨 위의 값을 약식인 지정된 인덱스의 인수 슬롯에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>지정된 인덱스에 있는 배열 요소를 명령에 지정된 형식을 갖는 계산 스택의 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="native int" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int8" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int16" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int32" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="int64" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="float32" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 <see langword="float64" /> 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>주어진 인덱스에 있는 배열 요소를 계산 스택에 있는 개체 참조 값(<see langword="O" /> 형식)으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>개체 참조나 포인터의 필드에 저장된 값을 새 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>주어진 주소에 <see langword="native int" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>주어진 주소에 <see langword="int8" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>주어진 주소에 <see langword="int16" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>주어진 주소에 <see langword="int32" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>주어진 주소에 <see langword="int64" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>주어진 주소에 <see langword="float32" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>주어진 주소에 <see langword="float64" /> 형식의 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>주어진 주소에 개체 참조 값을 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>계산 스택 맨 위에서 현재 값을 팝하고 지정된 인덱스에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 0에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 1에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 2에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>계산 스택 맨 위에서 현재 값을 팝하여 인덱스 3에 있는 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>계산 스택 맨 위에서 현재 값을 팝하여 <paramref name="index" />(약식)의 지역 변수 목록에 저장합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>지정된 형식의 값을 계산 스택에서 주어진 메모리 주소로 복사합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>정적 필드의 값을 계산 스택에 있는 값으로 바꿉니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>값에서 다른 값을 빼고 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>정수 값에서 다른 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>부호 있는 정수 값에서 다른 부호 있는 정수 값을 빼고 오버플로를 검사하여 결과를 계산 스택으로 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>점프 테이블을 구현합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>실제 호출 명령이 실행되기 전에 현재 메서드의 스택 프레임이 제거되도록 후위 메서드 호출 명령을 수행합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>현재 계산 스택에 있는 예외 개체를 throw합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>현재 계산 스택의 맨 위에 있는 주소가 바로 다음에 오는 <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> 또는 <see langword="cpblk" /> 명령의 기본 크기에 따라 정렬될 수 없음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>boxed로 표시되는 값 형식을 unboxed 형식으로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>명령에 지정된 형식의 boxed 표현을 unboxed 형식으로 변환합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>현재 계산 스택 맨 위에 있는 주소가 휘발성이고, 해당 위치를 읽은 결과가 캐시되지 않으며 이 위치에 여러 번 저장할 수 있음을 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>계산 스택 맨 위에 있는 두 값의 비트 배타적 OR를 계산하고 결과를 스택으로 푸시합니다.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>주어진 opcode가 싱글바이트 인수를 사용할 경우 True나 false를 반환합니다.</summary>
      <param name="inst">Opcode 개체의 인스턴스입니다.</param>
      <returns>
        <see langword="true" /> 또는 <see langword="false" /></returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>MSIL(Microsoft Intermediate Language) 명령의 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary>이 열거자 값은 예약되었으므로 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>이것은 다른 MSIL(Microsoft Intermediate Language) 명령의 동의어로 사용되는 MSIL 명령들입니다. 예를 들어, <see langword="ldarg.0" />은 인수가 0인 <see langword="ldarg" /> 명령을 나타냅니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>예약된 MSIL(Microsoft Intermediate Language) 명령을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>개체에 적용될 MSIL(Microsoft Intermediate Language) 명령을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>다음 명령의 동작을 수정하는 접두사 명령을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>기본 제공 명령을 설명합니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>MSIL(Microsoft Intermediate Language) 명령의 피연산자 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>피연산자가 32비트 정수 분기 대상입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>피연산자가 32비트 메타데이터 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>피연산자가 32비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>피연산자가 64비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>피연산자가 32비트 메타데이터 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>피연산자가 없습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary>피연산자가 예약되었으므로 사용하지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>피연산자가 64비트 IEEE 부동 소수점 형식입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>피연산자가 32비트 메타데이터 시그니처 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>피연산자가 32비트 메타데이터 문자열 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>피연산자가 스위치 명령에 대한 32비트 정수 인수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>피연산자가 <see langword="FieldRef" />, <see langword="MethodRef" /> 또는 <see langword="TypeRef" /> 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>피연산자가 32비트 메타데이터 토큰입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>피연산자가 지역 변수나 인수의 서수가 포함된 16비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>피연산자가 8비트 정수 분기 대상입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>피연산자가 8비트 정수입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>피연산자가 32비트 IEEE 부동 소수점 형식입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>피연산자가 지역 변수나 인수의 서수가 포함된 8비트 정수입니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>형식이 마샬링될 때 필드의 메모리 맞춤을 결정하는 두 요소 중 하나를 지정합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>압축 크기가 1바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>압축 크기가 128바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>압축 크기가 16바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>압축 크기가 2바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>압축 크기가 32바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>압축 크기가 4바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>압축 크기가 64바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>압축 크기가 8바이트입니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>압축 크기가 지정되지 않았습니다.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>값을 스택에 푸시하거나 스택에서 팝하는 방법을 설명합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>스택에서 값을 팝하지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>스택에서 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>스택에서 첫 번째 피연산자에 대한 값 하나를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>스택에서 32비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 32비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 32비트 정수를 팝합니다. 그리고 세 번째 피연산자에 대한 32비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 64비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 32비트 부동 소수점 수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>스택에서 첫 번째 피연산자에 대한 32비트 정수를 팝하고, 두 번째 피연산자에 대한 64비트 부동 소수점 수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>스택에서 참조를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 32비트 정수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 32비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 값 하나도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 64비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 32비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 64비트 부동 소수점 수를 팝합니다. 그리고 세 번째 피연산자에 대한 64비트 정수도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>스택에서 첫 번째 피연산자에 대한 참조를 팝하고, 두 번째 피연산자에 대한 값 하나를 팝합니다. 그리고 세 번째 피연산자에 대한 참조도 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>스택에 값을 푸시하지 않습니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>스택에 값 하나를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>스택에 첫 번째 피연산자에 대한 값 하나를 푸시하고, 두 번째 피연산자에 대한 값 하나를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>스택에 32비트 정수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>스택에 64비트 정수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>스택에 32비트 부동 소수점 수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>스택에 64비트 부동 소수점 수를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>스택에 참조를 푸시합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>스택에서 변수를 팝합니다.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>스택에 변수를 푸시합니다.</summary>
    </member>
  </members>
</doc>
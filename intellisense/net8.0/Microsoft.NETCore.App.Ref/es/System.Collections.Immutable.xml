<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Collections.Immutable</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Representa una colección inmutable de pares de clave y valor.  

 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor especificados al diccionario.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentException">La clave especificada ya existe en el diccionario, pero tiene un valor diferente.</exception>
      <returns>Nuevo diccionario inmutable que contiene el par de clave-valor adicional.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Agrega los pares clave-valor especificados al diccionario.</summary>
      <param name="pairs">Pares clave-valor que se va a agregar.</param>
      <exception cref="T:System.ArgumentException">Una de las claves especificadas ya existe en el diccionario, pero tiene un valor diferente.</exception>
      <returns>Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Recupera un diccionario vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns>Diccionario vacío con orden y reglas de comparación de clave y valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si el diccionario inmutable contiene el par de clave-valor especificado.</summary>
      <param name="pair">Par clave-valor que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el par clave-valor especificado se encuentra en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Quita el elemento con la clave especificada del diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <returns>Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra la clave especificada en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita los elementos con la clave especificada del diccionario inmutable.</summary>
      <param name="keys">Claves de los elementos que se van a quitar.</param>
      <returns>Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Establece la clave y valor especificados en el diccionario inmutable, posiblemente sobrescribiendo un valor existente de la clave.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de clave que se va a establecer.</param>
      <returns>Nuevo diccionario inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Establece los pares de clave-valor especificados en el diccionario inmutable, posiblemente sobrescribiendo valores existentes de las claves.</summary>
      <param name="items">Pares de clave-valor que se van a establecer en el diccionario. Si ya existe alguna de las claves en el diccionario, este método sobrescribirá los valores anteriores.</param>
      <returns>Nuevo diccionario inmutable que contiene pares de clave-valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey">Clave que se va a buscar.</param>
      <param name="actualKey">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns>
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Representa una lista de elementos que no se puede modificar.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Realiza una copia de la lista y agrega el objeto especificado al final de la lista copiada.</summary>
      <param name="value">Objeto que se va a agregar a la lista.</param>
      <returns>Una nueva lista con el objeto agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Realiza una copia de la lista y agrega los objetos especificados al final de la lista copiada.</summary>
      <param name="items">Objetos que se va a agregar a la lista.</param>
      <returns>Una nueba lista con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Crea una lista con todos los elementos eliminados, pero con la misma ordenación y semántica del orden que esta lista.</summary>
      <returns>Lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item">Objeto que se va a buscar en <see cref="T:System.Collections.Immutable.IImmutableList`1" />. Este valor puede ser null para los tipos de referencia.</param>
      <param name="index">Índices iniciales de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar para localizar <paramref name="item" />.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Inserta el elemento especificado en el índice especificado en la lista inmutable.</summary>
      <param name="index">Índice de base cero donde se inserta el valor.</param>
      <param name="element">Objeto que se va a insertar.</param>
      <returns>Nueva lista inmutable que incluye el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserta los elementos especificados en el índice especificado en la lista inmutable.</summary>
      <param name="index">Índice de base cero donde se deben insertar los nuevos elementos.</param>
      <param name="items">Elementos que van a insertarse.</param>
      <returns>Nueva lista inmutable que incluye los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" /> que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item">Objeto que se va a buscar en la lista. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer">Comparador de igualdad para hallar la coincidencia con <paramref name="item" />.</param>
      <returns>Devuelve <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita la primera repetición de un objeto especificado de esta lista inmutable.</summary>
      <param name="value">Objeto que se va a quitar de la lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar para localizar <paramref name="value" />.</param>
      <returns>Nueva lista con el objeto especificado eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns>Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index">Índice del elemento que se va a quitar.</param>
      <returns>Lista nueva con el elemento eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita el objeto especificado de la lista.</summary>
      <param name="items">Objetos que se van a quitar de la lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se utiliza para determinar si <paramref name="items" /> coinciden con los objetos de la lista.</param>
      <returns>Nueva lista inmutable con los objetos especificados eliminada, si <paramref name="items" /> halló objetos coincidentes en la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</summary>
      <param name="index">Índice inicial de base cero del intervalo de elementos que se va a quitar.</param>
      <param name="count">Número de elementos que se va a quitar.</param>
      <returns>Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Devuelve una nueva lista con el primer elemento coincidente de la lista sustituido por el elemento especificado.</summary>
      <param name="oldValue">Elemento a sustituir.</param>
      <param name="newValue">Elemento que se usará para sustituir la primera aparición de <paramref name="oldValue" /></param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar para hallar la coincidencia con <paramref name="oldValue" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> no existe en la lista.</exception>
      <returns>Lista nueva que contiene <paramref name="newValue" />, incluso si <paramref name="oldvalue" /> coincide con <paramref name="newValue" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Reemplaza un elemento de la lista en una posición determinada por el elemento especificado.</summary>
      <param name="index">Posición en la lista del elemento que se va a reemplazar.</param>
      <param name="value">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <returns>Nueva lista que contiene el elemento nuevo, incluso si el elemento situado en la ubicación especificada es igual que el nuevo elemento.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Representa una colección de objetos de tipo primero en entrar, primero en salir inmutable.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elementos en la cola.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Devuelve una nueva cola con todos los elementos eliminados.</summary>
      <returns>Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Quita el primer elemento situado en la cola inmutable y devuelve la nueva cola.</summary>
      <exception cref="T:System.InvalidOperationException">La cola está vacía.</exception>
      <returns>Nueva cola inmutable con el primer elemento eliminado. Este valor nunca es <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Agrega un elemento situado al final de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value">Elemento que se va a agregar.</param>
      <returns>Nueva cola inmutable con el elemento especificado agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Devuelve el elemento situado al principio de la cola inmutable sin eliminarlo.</summary>
      <exception cref="T:System.InvalidOperationException">La cola está vacía.</exception>
      <returns>Elemento situado al principio de la cola.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Obtiene un valor que indica si esta cola inmutable está vacía.</summary>
      <returns>
        <see langword="true" /> si la cola está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Representa un conjunto de elementos que solo pueden modificarse mediante la creación de una nueva instancia del conjunto.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elemento almacenado en el conjunto.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Agrega el elemento especificado a este conjunto inmutable.</summary>
      <param name="value">Elemento que se va a agregar.</param>
      <returns>Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Recupera un conjunto inmutable vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns>Conjunto vacío que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Determina si este conjunto inmutable contiene un elemento especificado.</summary>
      <param name="value">Elemento que se debe buscar en el conjunto.</param>
      <returns>Es <see langword="true" /> si el conjunto contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto inmutable actual los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar de este conjunto.</param>
      <returns>Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que contiene solo elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other">Colección que se va a comparar con el <see cref="T:System.Collections.Immutable.IImmutableSet`1" /> actual.</param>
      <returns>Nuevo conjunto inmutable que contiene elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto inmutable actual es un subconjunto apropiado (estricto) de la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto inmutable actual es un supraconjunto apropiado (estricto) de la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto inmutable actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto inmutable actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto inmutable actual se superpone a la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual y la colección especificada comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Elimina el elemento especificado de este conjunto inmutable.</summary>
      <param name="value">Elemento que se va a quitar.</param>
      <returns>Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto inmutable actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Es <see langword="true" /> si los conjuntos son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Determina si el conjunto contiene un valor específico.</summary>
      <param name="equalValue">Valor que se va a buscar.</param>
      <param name="actualValue">Valor coincidente del conjunto, si se encuentra, o <c>equalvalue</c> si no hay ninguna coincidencia.</param>
      <returns>
        <see langword="true" /> si se encuentra un valor coincidente; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other">Colección de la que se van a agregar elementos.</param>
      <returns>Nuevo conjunto inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Representa una colección de objetos LIFO (último en entrar, primero en salir).  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elementos de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Elimina todos los objetos de la pila inmutable.</summary>
      <returns>Pila inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Devuelve el elemento situado al principio de la pila inmutable sin eliminarlo.</summary>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>Elemento situado al principio de la pila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Elimina el elemento de la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>La nueva pila; nunca <see langword="null" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Inserta un elemento en la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <param name="value">Elemento a insertar en la pila.</param>
      <returns>Pila nueva.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Obtiene un valor que indica si esta pila inmutable está vacía.</summary>
      <returns>
        <see langword="true" /> si esta pila está vacía; de lo contrario, será <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Proporciona métodos para crear una matriz que es inmutable, lo que significa que no se puede cambiar una vez que se crea.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Busca un elemento especificado en la matriz inmutable ordenada mediante el comparador predeterminado y devuelve el índice de base cero del elemento, si lo encuentra.</summary>
      <param name="array">Matriz ordenada que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <typeparam name="T">Tipo de elemento almacenado en la matriz.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
      <returns>Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Busca un elemento especificado en una matriz inmutable ordenada y devuelve el índice de base cero del elemento, si lo encuentra.</summary>
      <param name="array">Matriz ordenada que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <param name="comparer">Implementación del comparador que se va a utilizar al comparar elementos, o null para utilizar el comparador predeterminado.</param>
      <typeparam name="T">Tipo de elemento almacenado en la matriz.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null y <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
      <returns>Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Busca un elemento especificado en una matriz inmutable ordenada y devuelve el índice de base cero del elemento, si lo encuentra.</summary>
      <param name="array">Matriz ordenada que se va a buscar.</param>
      <param name="index">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <typeparam name="T">Tipo de elemento almacenado en la matriz.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.
        
o bien

<paramref name="length" /> es menor que cero.</exception>
      <returns>Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Busca una matriz inmutable ordenada para un elemento especificado y devuelve el índice basado en cero del elemento.</summary>
      <param name="array">Matriz ordenada que se va a buscar.</param>
      <param name="index">Índice inicial del intervalo en el que se va a buscar.</param>
      <param name="length">Longitud del intervalo en el que se va a buscar.</param>
      <param name="value">Objeto que se va a buscar.</param>
      <param name="comparer">Comparador que se va a usar al comparar elementos para la igualdad, o <see langword="null" /> para usar el comparador predeterminado.</param>
      <typeparam name="T">Tipo de elemento almacenado en la matriz.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es null y <paramref name="value" /> no implementa <see cref="T:System.IComparable" /> o la búsqueda detecta un elemento que no implementa <see cref="T:System.IComparable" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="length" /> no especifican un intervalo válido en <paramref name="array" />.
        
o bien

<paramref name="comparer" /> es <see langword="null" />, y <paramref name="value" /> es de un tipo que no es compatible con los elementos de <paramref name="array" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que el límite inferior de <paramref name="array" />.

o bien

<paramref name="length" /> es menor que cero.</exception>
      <returns>Índice de base cero del elemento de la matriz, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="value" /> o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.Generic.ICollection`1.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Crea una matriz inmutable vacía.</summary>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Crea una matriz inmutable que contiene el objeto especificado.</summary>
      <param name="item">Objeto para almacenar en la matriz.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene el objeto especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Crea una matriz inmutable que contiene los objetos especificados.</summary>
      <param name="item1">Primer objeto para almacenar en la matriz.</param>
      <param name="item2">Segundo objeto para almacenar en la matriz.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene los objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Crea una matriz inmutable que contiene los objetos especificados.</summary>
      <param name="item1">Primer objeto para almacenar en la matriz.</param>
      <param name="item2">Segundo objeto para almacenar en la matriz.</param>
      <param name="item3">Tercer objeto a almacenar en la matriz.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene los objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Crea una matriz inmutable que contiene los objetos especificados.</summary>
      <param name="item1">Primer objeto para almacenar en la matriz.</param>
      <param name="item2">Segundo objeto para almacenar en la matriz.</param>
      <param name="item3">Tercer objeto a almacenar en la matriz.</param>
      <param name="item4">Cuarto objeto a almacenar en la matriz.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene los objetos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Crea una matriz inmutable de la matriz especificada de objetos.</summary>
      <param name="items">Matriz de objetos con la que se va a rellenar la matriz.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene la matriz de elementos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Crea una matriz inmutable con los objetos especificados de otra matriz.</summary>
      <param name="items">Matriz de origen de objetos.</param>
      <param name="start">Índice del primer elemento desde el que efectuar la copia <paramref name="items" />.</param>
      <param name="length">Número de elementos de <paramref name="items" /> para incluir en esta matriz inmutable.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene los objetos especificados de la matriz de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Crea una matriz inmutable con los objetos especificados de otra matriz inmutable.</summary>
      <param name="items">Matriz de origen de objetos.</param>
      <param name="start">Índice del primer elemento desde el que efectuar la copia <paramref name="items" />.</param>
      <param name="length">Número de elementos de <paramref name="items" /> para incluir en esta matriz inmutable.</param>
      <typeparam name="T">Tipo de  elementos almacenados en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene los objetos especificados de la matriz de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Crea una matriz mutable que puede convertirse en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sin asignar nueva memoria.</summary>
      <typeparam name="T">Tipo de elementos almacenados en el generador.</typeparam>
      <returns>Matriz de mutable del tipo especificado que se puede convertir eficazmente en una matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Crea una matriz mutable que puede convertirse en un <see cref="T:System.Collections.Immutable.ImmutableArray" /> sin asignar nueva memoria.</summary>
      <param name="initialCapacity">Capacidad inicial del generador.</param>
      <typeparam name="T">Tipo de elementos almacenados en el generador.</typeparam>
      <returns>Matriz de mutable del tipo especificado que se puede convertir eficazmente en una matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuevo <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> rellenado con los elementos especificados.</summary>
      <param name="items">Elementos que se van a agregar la matriz.</param>
      <typeparam name="T">Tipo de elemento almacenado en la matriz.</typeparam>
      <returns>Matriz inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="selector">Función que se va a aplicar a cada elemento de la matriz de origen.</param>
      <typeparam name="TSource">Tipo de elemento almacenado en la matriz de origen.</typeparam>
      <typeparam name="TResult">Tipo de elemento que se va a almacenar en la matriz de destino.</typeparam>
      <returns>Matriz inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="start">Índice del primer elemento de la matriz de origen que se va a incluir en la matriz resultante.</param>
      <param name="length">Número de elementos de la matriz de origen a incluir en la matriz resultante.</param>
      <param name="selector">Función que se va a aplicar a cada elemento de la matriz de origen incluido en la matriz resultante.</param>
      <typeparam name="TSource">Tipo de elemento almacenado en la matriz de origen.</typeparam>
      <typeparam name="TResult">Tipo de elemento que se va a almacenar en la matriz de destino.</typeparam>
      <returns>Matriz inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="selector">Función que se va a aplicar a cada elemento de la matriz de origen.</param>
      <param name="arg">Argumento que se va a pasar a la función de asignación de selector.</param>
      <typeparam name="TSource">Tipo de elemento almacenado en la matriz de origen.</typeparam>
      <typeparam name="TArg">Tipo de argumento que se va a pasar a la función de asignación de selector.</typeparam>
      <typeparam name="TResult">Tipo de elemento que se va a almacenar en la matriz de destino.</typeparam>
      <returns>Matriz inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Inicializa una nueva instancia del struct <see cref="T:System.Collections.Immutable.ImmutableArray`1" />.</summary>
      <param name="items">Matriz de origen con la que se va a inicializar la matriz resultante.</param>
      <param name="start">Índice del primer elemento de la matriz de origen que se va a incluir en la matriz resultante.</param>
      <param name="length">Número de elementos de la matriz de origen a incluir en la matriz resultante.</param>
      <param name="selector">Función que se va a aplicar a cada elemento de la matriz de origen incluido en la matriz resultante.</param>
      <param name="arg">Argumento que se va a pasar a la función de asignación de selector.</param>
      <typeparam name="TSource">Tipo de elemento almacenado en la matriz de origen.</typeparam>
      <typeparam name="TArg">Tipo de argumento que se va a pasar a la función de asignación de selector.</typeparam>
      <typeparam name="TResult">Tipo de elemento que se va a almacenar en la matriz de destino.</typeparam>
      <returns>Matriz inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una matriz inmutable a partir de la colección especificada.</summary>
      <param name="items">Colección de objetos que se copiarán en la matriz inmutable.</param>
      <typeparam name="TSource">Tipo de elementos contenidos en <paramref name="items" />.</typeparam>
      <returns>Matriz inmutable que contiene la colección especificada de objetos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Crea una matriz inmutable a partir del contenido de la matriz del generador.</summary>
      <param name="builder">Generador desde el que se va a crear la matriz inmutable.</param>
      <typeparam name="TSource">Tipo de elementos contenidos en la matriz inmutable.</typeparam>
      <returns>Matriz inmutable que incluye el contenido actual de la matriz del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Representa una matriz que es inmutable, lo que significa que no se puede cambiar una vez que se crea.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elemento almacenado por la matriz.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Obtiene una matriz inmutable vacía.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Devuelve una copia de la matriz original con el elemento especificado que se agrega al final.</summary>
      <param name="item">Elemento que se va a agregar al final de la matriz.</param>
      <returns>Nueva matriz con el elemento especificado agregado al final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Devuelve una copia de la matriz original con los elementos especificados agregados al final de la matriz.</summary>
      <param name="items">Elementos que se van a agregar la matriz.</param>
      <returns>Nueva matriz con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Devuelve una copia de la matriz original con los elementos especificados agregados al final de la matriz.</summary>
      <param name="items">Elementos que se van a agregar la matriz.</param>
      <returns>Nueva matriz con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Devuelve una nueva matriz inmutable que contiene los elementos de esta matriz convertidos en un tipo diferente.</summary>
      <typeparam name="TOther">Tipo de elemento de matriz para devolver.</typeparam>
      <returns>Matriz inmutable que contiene los elementos de esta matriz convertidos en un tipo diferente. Si la conversión falla, devuelve una matriz cuya propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve <see langword="true" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsMemory">
      <summary>Crea una nueva región de memoria de solo lectura en esta matriz inmutable.</summary>
      <returns>Representación de memoria de solo lectura de esta matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AsSpan">
      <summary>Crea un nuevo intervalo de solo lectura en esta matriz inmutable.</summary>
      <returns>Intervalo de solo lectura de esta matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Inicializa una instancia nueva de la estructura <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> al convertir la matriz subyacente en una matriz de tipo <typeparamref name="TOther" />.</summary>
      <typeparam name="TOther">Tipo de elemento de matriz para devolver.</typeparam>
      <exception cref="T:System.InvalidCastException">Se produce si la conversión no es válida.</exception>
      <returns>Instancia de matriz inmutable con elementos convertidos al nuevo tipo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> basada en el contenido de una instancia existente, lo que permite que una conversión estática covariante vuelva a usar eficazmente la matriz existente.</summary>
      <param name="items">Matriz con la que inicializar la matriz. No se realiza ninguna copia.</param>
      <typeparam name="TDerived">Tipo de elemento de matriz para devolver.</typeparam>
      <returns>Instancia de matriz inmutable con elementos convertidos al nuevo tipo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Devuelve una matriz con todos los elementos eliminados.</summary>
      <returns>Matriz con todos los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Determina si el elemento especificado existe en la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <returns>
        <see langword="true" /> si se encontró el elemento especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Copia el contenido de esta matriz en la matriz especificada.</summary>
      <param name="destination">Matriz en la que se va a copiar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Copia el contenido de la matriz en la matriz especificada, empezando por el índice de destino especificado.</summary>
      <param name="destination">Matriz en la que se va a copiar.</param>
      <param name="destinationIndex">Índice de <paramref name="array" /> donde se inicia la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia los elementos especificados en esta matriz en la matriz especificada en el índice de inicio especificado.</summary>
      <param name="sourceIndex">Índice de la matriz en que se inicia la copia.</param>
      <param name="destination">Matriz en la que se va a copiar.</param>
      <param name="destinationIndex">Índice de <paramref name="array" /> donde se inicia la copia.</param>
      <param name="length">Número de elementos que se van a copiar desde esta matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Indica si la matriz especificada es igual a esta matriz.</summary>
      <param name="other">Objeto que se va a comparar con este objeto.</param>
      <returns>
        <see langword="true" /> si <paramref name="other" /> es igual a esta matriz; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Determina si esta matriz es igual al objeto especificado.</summary>
      <param name="obj">
        <see cref="T:System.Object" /> que se compara con esta matriz.</param>
      <returns>
        <see langword="true" /> si esta matriz es igual a <paramref name="obj" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el contenido de la matriz.</summary>
      <returns>Enumerador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Devuelve un código hash para esta instancia.</summary>
      <returns>Un código hash para esta instancia adecuado para utilizarlo en algoritmos de hash y estructuras de datos como una tabla hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Busca el elemento especificado en la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <returns>Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Busca el elemento especificado en la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <returns>Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el elemento especificado en la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Busca el elemento especificado en la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <returns>Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el elemento especificado en la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Devuelve la posición de índice de base cero del elemento si se encuentra; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Devuelve una nueva matriz con el valor especificado insertado en la posición especificada.</summary>
      <param name="index">Índice de base cero en la matriz en la que se debe agregar el nuevo elemento.</param>
      <param name="item">Elemento que se va a insertar al principio de la matriz.</param>
      <returns>Nueva matriz con el elemento insertado en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserta los valores especificados en el índice especificado.</summary>
      <param name="index">Índice en el que se va a insertar el valor.</param>
      <param name="items">Elementos que van a insertarse.</param>
      <returns>Nueva matriz inmutable con los elementos insertados en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Inserta los valores especificados en el índice especificado.</summary>
      <param name="index">Índice en el que se va a insertar el valor.</param>
      <param name="items">Elementos que van a insertarse.</param>
      <returns>Nueva matriz inmutable con los elementos insertados en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ItemRef(System.Int32)">
      <summary>Obtiene una referencia de solo lectura al elemento en el elemento <paramref name="index" /> especificado en la lista de solo lectura.</summary>
      <param name="index">Índice de base cero del elemento del que se va a obtener una referencia.</param>
      <returns>Referencia de solo lectura al elemento en el valor <paramref name="index" /> especificado en la lista de solo lectura.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el elemento especificado en la matriz, empezando por el final de la matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Filtra los elementos de esta matriz a los asignables al tipo especificado.</summary>
      <typeparam name="TResult">El tipo según el cual se van a filtrar los elementos de la secuencia.</typeparam>
      <returns>Una interfaz <see cref="T:System.Collections.IEnumerable" /> que contiene los elementos de la secuencia de entrada de tipo <paramref name="TResult" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Devuelve un valor que indica si dos matrices son iguales.</summary>
      <param name="left">Matriz situada a la izquierda del operador.</param>
      <param name="right">Matriz situada a la derecha del operador.</param>
      <returns>
        <see langword="true" /> si las matrices son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Devuelve un valor que indica si dos matrices son iguales.</summary>
      <param name="left">Matriz situada a la izquierda del operador.</param>
      <param name="right">Matriz situada a la derecha del operador.</param>
      <returns>
        <see langword="true" /> si las matrices son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Devuelve un valor que indica si dos matrices no son iguales.</summary>
      <param name="left">Matriz situada a la izquierda del operador.</param>
      <param name="right">Matriz situada a la derecha del operador.</param>
      <returns>
        <see langword="true" /> si las matrices no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Comprueba si hay desigualdades entre dos matrices.</summary>
      <param name="left">Objeto situado a la izquierda del operador.</param>
      <param name="right">Objeto situado a la derecha del operador.</param>
      <returns>
        <see langword="true" /> si las dos matrices no son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Devuelve una matriz con la primera aparición del elemento especificado que se quita de la matriz. Si no se encuentra ninguna coincidencia, se devuelve la matriz actual.</summary>
      <param name="item">Elemento que se va a quitar.</param>
      <returns>Nueva matriz con el elemento quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Devuelve una matriz con la primera aparición del elemento especificado que se quita de la matriz.  
  
 Si no se encuentra ninguna coincidencia, se devuelve la matriz actual.</summary>
      <param name="item">Elemento que se va a quitar.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Nueva matriz con el elemento especificado quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Quita todos los elementos de la matriz que cumplen la condición especificada.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns>Nueva matriz con los elementos que cumplen la condición especificada quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Devuelve una matriz con el elemento de la posición especificada quitado.</summary>
      <param name="index">Índice de base 0 del elemento a quitar de la matriz devuelta.</param>
      <returns>Nueva matriz con el elemento del índice especificado quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita los elementos especificados de esta matriz.</summary>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <returns>Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita los elementos especificados de esta matriz.</summary>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Quita los valores especificados de esta lista.</summary>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <returns>Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita los elementos especificados de esta lista.</summary>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Devuelve una matriz con los elementos de la posición especificada quitados.</summary>
      <param name="index">Índice de base 0 del elemento de inicio a quitar de la matriz.</param>
      <param name="length">Número de elementos que se va a quitar de la matriz.</param>
      <returns>Nueva matriz con los elemento especificados quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Busca el primer elemento de la matriz igual al valor especificado y reemplaza el valor por el nuevo valor especificado.</summary>
      <param name="oldValue">Valor para buscar y reemplazar en la matriz.</param>
      <param name="newValue">Valor con el que se va a reemplazar <c>oldvalue</c>.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> no se encuentra en la matriz.</exception>
      <returns>Una nueva matriz que contiene <paramref name="newValue" /> incluso si los valores nuevos y antiguos son los mismos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el primer elemento de la matriz igual al valor especificado y reemplaza el valor por el nuevo valor especificado.</summary>
      <param name="oldValue">Valor para buscar y reemplazar en la matriz.</param>
      <param name="newValue">Valor con el que se va a reemplazar <c>oldvalue</c>.</param>
      <param name="equalityComparer">Comparador de igualdad a usar para comparar los valores.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> no se encuentra en la matriz.</exception>
      <returns>Una nueva matriz que contiene <paramref name="newValue" /> incluso si los valores nuevos y antiguos son los mismos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Reemplaza el elemento situado en el índice determinado con el elemento especificado.</summary>
      <param name="index">Índice del elemento que se va a reemplazar.</param>
      <param name="item">Elemento que va a agregarse a la lista.</param>
      <returns>Nueva matriz que contiene <paramref name="item" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Ordena los elementos de la matriz inmutable utilizando el comparador predeterminado.</summary>
      <returns>Nueva matriz inmutable que contiene los elementos de esta matriz, en orden alfabético.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordena los elementos de la matriz inmutable usando el comparador especificado.</summary>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado</param>
      <returns>Nueva matriz inmutable que contiene los elementos de esta matriz, en orden alfabético.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Ordena los elementos de todo el elemento <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> con el elemento <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison">
        <see cref="T:System.Comparison`1" /> que se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> es null.</exception>
      <returns>Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordena los elementos especificados de la matriz inmutable usando el comparador especificado.</summary>
      <param name="index">Índice del primer elemento que se va a ordenar.</param>
      <param name="count">Número de elementos que se va a incluir en la ordenación.</param>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado</param>
      <returns>Nueva matriz inmutable que contiene los elementos de esta matriz, en orden alfabético.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="item">Texto que se va a agregar al final de la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="item">Objeto que se va a quitar de la matriz.</param>
      <returns>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que itera a través de la matriz.</summary>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve <see langword="true" />.</exception>
      <returns>Un enumerador que se puede usar para iterar por la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index">Índice de la ubicación donde se va a insertar el elemento.</param>
      <param name="item">Elemento que se va a insertar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index">Índice.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia esta matriz en otra matriz, empezando por el índice especificado.</summary>
      <param name="array">Matriz en la que se copiará esta matriz.</param>
      <param name="index">Índice de la matriz de destino por el que va a comenzar la operación de copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la matriz inmutable.</summary>
      <exception cref="T:System.InvalidOperationException">La propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve <see langword="true" />.</exception>
      <returns>Enumerador que recorre en iteración la matriz inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Add(System.Object)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="value">Valor que se va a agregar a la matriz.</param>
      <exception cref="T:System.NotSupportedException">Se produce en todos los casos.</exception>
      <returns>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Clear">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <exception cref="T:System.NotSupportedException">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Contains(System.Object)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="value">Valor que se va a comprobar.</param>
      <returns>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Obtiene el valor en el índice especificado.</summary>
      <param name="value">Valor cuyo índice se va a devolver.</param>
      <returns>Valor del elemento en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index">Índice que indica dónde se va a insertar el elemento.</param>
      <param name="value">Valor que se va a insertar.</param>
      <exception cref="T:System.NotSupportedException">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Remove(System.Object)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="value">Valor que se va a quitar de la matriz.</param>
      <exception cref="T:System.NotSupportedException">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Devuelve <see cref="T:System.NotSupportedException" /> en todos los casos</summary>
      <param name="index">El índice del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Devuelve una copia de la matriz original con el elemento especificado que se agrega al final.</summary>
      <param name="value">Valor que se va a agregar al final de la matriz.</param>
      <returns>Nueva matriz con el elemento especificado agregado al final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Devuelve una copia de la matriz original con los elementos especificados agregados al final de la matriz.</summary>
      <param name="items">Elementos que se van a agregar al final de la matriz.</param>
      <returns>Nueva matriz con los elementos agregados al final.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Devuelve una matriz con todos los elementos eliminados.</summary>
      <returns>Matriz con todos los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Devuelve una nueva matriz con el valor especificado insertado en la posición especificada.</summary>
      <param name="index">Índice de base cero en la matriz en la que se debe agregar el nuevo elemento.</param>
      <param name="element">Elemento que se va a insertar al principio de la matriz.</param>
      <returns>Nueva matriz con el valor especificado insertado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserta los valores especificados en el índice especificado.</summary>
      <param name="index">Índice en el que se va a insertar el valor.</param>
      <param name="items">Elementos que van a insertarse.</param>
      <returns>Nueva matriz con los valores especificados insertados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Devuelve una matriz con la primera aparición del elemento especificado que se quita de la matriz; si no se encuentra ninguna coincidencia, se devuelve la matriz actual.</summary>
      <param name="value">Valor que se va a quitar de la matriz.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Nueva matriz con el valor quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Quita todos los elementos de la matriz que cumplen la condición especificada.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns>Nueva matriz con los elementos que cumplen la condición especificada quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Devuelve una matriz con el elemento de la posición especificada quitado.</summary>
      <param name="index">Índice de base 0 del elemento a quitar de la matriz devuelta.</param>
      <returns>Nueva matriz con el elemento especificado quitado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita los elementos especificados de esta matriz.</summary>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Nueva matriz con los elementos quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Devuelve una matriz con los elementos de la posición especificada quitados.</summary>
      <param name="index">Índice de base 0 del elemento de inicio a quitar de la matriz.</param>
      <param name="count">Número de elementos que se va a quitar de la matriz.</param>
      <returns>Nueva matriz con los elemento especificados quitados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el primer elemento de la matriz igual al valor especificado y reemplaza el valor por el nuevo valor especificado.</summary>
      <param name="oldValue">Valor para buscar y reemplazar en la matriz.</param>
      <param name="newValue">Valor con el que se va a reemplazar <c>oldvalue</c>.</param>
      <param name="equalityComparer">Comparador de igualdad a usar para comparar los valores.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> no se encuentra en la matriz.</exception>
      <returns>Una nueva matriz que contiene <paramref name="newValue" /> incluso si los valores nuevos y antiguos son los mismos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Reemplaza el elemento situado en el índice determinado con el elemento especificado.</summary>
      <param name="index">Índice del elemento que se va a reemplazar.</param>
      <param name="value">Valor que se va a agregar a la lista.</param>
      <returns>Nueva matriz que contiene <paramref name="item" /> en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)">
      <summary>Determina si el elemento de colección actual precede o sigue a otro elemento en el criterio de ordenación, o aparece en la misma posición que él.</summary>
      <param name="other">Elemento que se va a comparar con la instancia actual.</param>
      <param name="comparer">Objeto que se utiliza para comparar a los miembros de la matriz actual con los miembros correspondientes de otra matriz.</param>
      <exception cref="T:System.ArgumentException">Las matrices no tienen la misma longitud.</exception>
      <returns>Número entero que indica si el elemento actual va previamente, si está en la misma posición o si sigue al otro elemento.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)">
      <summary>Determina si esta matriz equivale estructuralmente a la matriz especificada.</summary>
      <param name="other">Matriz que se va a comparar con la instancia actual.</param>
      <param name="comparer">Objeto que determina si la instancia actual y otra son iguales estructuralmente.</param>
      <returns>
        <see langword="true" /> si las dos matrices son estructuralmente iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)">
      <summary>Devuelve un código hash de la instancia actual.</summary>
      <param name="comparer">Objeto que calcula el código hash del objeto actual.</param>
      <returns>Código hash de la instancia actual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Crea una matriz inmutable con el mismo contenido que esta matriz y que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns>Nuevo generador con el mismo contenido que esta matriz.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Obtiene un valor que indica si esta matriz se ha declarado pero no se ha inicializado.</summary>
      <returns>Es <see langword="true" /> si el <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> es <see langword="null" />; si no, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Obtiene un valor que indica si esta <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vacía o no se ha inicializado.</summary>
      <returns>
        <see langword="true" /> es si <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> es <see langword="null" /> o <see cref="F:System.Collections.Immutable.ImmutableArray`1.Empty" /> ; en caso contrario, es <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Obtiene un valor que indica si esta <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vacía.</summary>
      <returns>Es <see langword="true" /> si <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> está vacío, en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado en la matriz inmutable.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener.</param>
      <returns>Elemento del índice especificado en la matriz inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Obtiene el número de elementos de la matriz.</summary>
      <returns>Número de elementos de la matriz</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#Count">
      <summary>Obtiene el número de elementos de la colección.</summary>
      <exception cref="T:System.InvalidOperationException">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns>
        <see langword="true" /> si esta instancia es de solo lectura; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado de la lista de solo lectura.</summary>
      <param name="index">Índice de base cero del elemento que se va a obtener.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce desde el establecedor.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
      <returns>Elemento en el índice especificado en la lista de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyCollection{T}#Count">
      <summary>Obtiene el número de elementos de la colección.</summary>
      <exception cref="T:System.InvalidOperationException">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#Generic#IReadOnlyList{T}#Item(System.Int32)">
      <summary>Obtiene el elemento en el índice especificado.</summary>
      <param name="index">Índice.</param>
      <exception cref="T:System.InvalidOperationException">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
      <returns>El elemento.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#Count">
      <summary>Obtiene el tamaño de la matriz.</summary>
      <exception cref="T:System.InvalidOperationException">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
      <returns>Número de elementos de la colección.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#IsSynchronized">
      <summary>Vea la interfaz <see cref="T:System.Collections.ICollection" />. Siempre devuelve <see langword="true" />, ya que las colecciones inmutables son seguras para subprocesos.</summary>
      <returns>Valor booleano que determina si la colección es segura para subprocesos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene la raíz para la sincronización.</summary>
      <returns>Objeto para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si esta instancia tiene un tamaño fijo.</summary>
      <returns>
        <see langword="true" /> Si esta instancia tiene un tamaño fijo; en caso contrario, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns>
        <see langword="true" /> si esta instancia es de solo lectura; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index">Índice.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce desde el establecedor.</exception>
      <exception cref="T:System.InvalidOperationException">Se inicia si la propiedad <see cref="P:System.Collections.Immutable.ImmutableArray`1.IsDefault" /> devuelve true.</exception>
      <returns>Objeto en el índice especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>Descriptor de acceso de escritura de matriz que se puede convertir en una instancia <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> sin asignar memoria adicional.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Add(`0)">
      <summary>Agrega el elemento especificado a la matriz.</summary>
      <param name="item">Objeto que se agrega a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[])">
      <summary>Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(`0[],System.Int32)">
      <summary>Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse a la matriz.</param>
      <param name="length">Número de elementos de la matriz de origen para agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0}.Builder)">
      <summary>Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse a la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange(System.Collections.Immutable.ImmutableArray{`0},System.Int32)">
      <summary>Agrega los elementos especificados al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse a la matriz.</param>
      <param name="length">Número de elementos de la matriz de origen para agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Agrega los elementos especificados que se derivan del tipo que se encuentra actualmente en la matriz, al final de la matriz.</summary>
      <param name="items">Elementos que van a agregarse al final de la matriz.</param>
      <typeparam name="TDerived">Tipo que se deriva el tipo de elemento ya está en la matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Agrega los elementos especificados que se derivan del tipo que se encuentra actualmente en la matriz, al final de la matriz.</summary>
      <param name="items">Elementos que se van a agregar al final de la matriz.</param>
      <typeparam name="TDerived">Tipo que se deriva el tipo de elemento ya está en la matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Agrega los elementos especificados que se derivan del tipo que se encuentra actualmente en la matriz, al final de la matriz.</summary>
      <param name="items">Elementos que se van a agregar al final de la matriz.</param>
      <typeparam name="TDerived">Tipo que se deriva el tipo de elemento ya está en la matriz.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Quita todos los elementos de la matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Contains(`0)">
      <summary>Determina si la matriz contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en la matriz.</param>
      <returns>
        <see langword="true" /> si se encuentra el objeto; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copia el contenido actual en la matriz especificada.</summary>
      <param name="array">Matriz en la que se va a copiar.</param>
      <param name="index">Índice en el que iniciar la operación de copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Obtiene un objeto que puede usarse para recorrer en iteración la colección.</summary>
      <returns>Objeto que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0)">
      <summary>Determina el índice de un elemento específico de la matriz.</summary>
      <param name="item">Elemento que va a buscarse en la matriz.</param>
      <returns>Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Determina el índice del elemento especificado.</summary>
      <param name="item">Elemento que va a buscarse en la matriz.</param>
      <param name="startIndex">Posición inicial de la búsqueda.</param>
      <returns>Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Determina el índice del elemento especificado.</summary>
      <param name="item">Elemento que va a buscarse en la matriz.</param>
      <param name="startIndex">Posición inicial de la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <returns>Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Determina el índice del elemento especificado.</summary>
      <param name="item">Elemento que va a buscarse en la matriz.</param>
      <param name="startIndex">El índice en el que se va a comenzar la búsqueda.</param>
      <param name="count">Posición inicial de la búsqueda.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda</param>
      <returns>Índice de <paramref name="item" />, si se encuentra en la lista; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Insert(System.Int32,`0)">
      <summary>Inserta un elemento en la matriz en el índice especificado.</summary>
      <param name="index">Índice de base cero donde se inserta el elemento.</param>
      <param name="item">Objeto que se va a insertar en la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ItemRef(System.Int32)">
      <summary>Obtiene una referencia de solo lectura al elemento en el índice especificado.</summary>
      <param name="index">Índice del elemento.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es mayor o igual que el número de la matriz.</exception>
      <returns>Referencia de solo lectura al elemento en el índice especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0)">
      <summary>Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">Posición inicial de la búsqueda.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">Posición inicial de la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Determina el índice de base cero de la última aparición del elemento especificado en esta matriz.</summary>
      <param name="item">Elemento que se va a buscar.</param>
      <param name="startIndex">Posición inicial de la búsqueda.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Índice de base cero de la matriz donde se encontró el elemento; o -1 si no se encontró.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Extrae la matriz interna como <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> y la reemplaza por una matriz de longitud cero.</summary>
      <exception cref="T:System.InvalidOperationException">Cuando <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count" /> no es igual que <see cref="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity" />.</exception>
      <returns>Matriz inmutable que contiene los elementos del generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Remove(`0)">
      <summary>Quita el elemento especificado.</summary>
      <param name="element">Elemento que se va a quitar.</param>
      <returns>
        <see langword="true" /> si <paramref name="element" /> se ha encontrado y eliminado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Quita de la matriz el elemento situado en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Invierte el orden de los elementos de la colección.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Ordena el contenido de la matriz.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordena el contenido de la matriz.</summary>
      <param name="comparer">Comparador que se va a utilizar para ordenar. Si el comparador es <see langword="null" />, se usa el comparador predeterminado para el tipo de elementos de la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Comparison{`0})">
      <summary>Ordena los elementos de toda la matriz con el elemento <see cref="T:System.Comparison`1" /> especificado.</summary>
      <param name="comparison">
        <see cref="T:System.Comparison`1" /> que se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> es null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordena el contenido de la matriz.</summary>
      <param name="index">Índice inicial para la ordenación.</param>
      <param name="count">Número de elementos que se va a incluir en la ordenación.</param>
      <param name="comparer">Comparador que se va a utilizar para ordenar. Si el comparador es <see langword="null" />, se usa el comparador predeterminado para el tipo de elementos de la matriz.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que itera a través de la matriz.</summary>
      <returns>Enumerador que recorre en iteración la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que itera a través de la matriz.</summary>
      <returns>Enumerador que recorre en iteración la matriz.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Crea una nueva matriz con el contenido actual de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Crea una nueva matriz con el contenido de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Devuelve una matriz inmutable que contiene el contenido actual de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</summary>
      <returns>Matriz inmutable que contiene el contenido actual de este <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Obtiene o establece la longitud de la matriz interna. Cuando se establece, la matriz interna se vuelve a asignar a la capacidad determinada si aún no tiene la longitud especificada.</summary>
      <returns>Longitud de la matriz interna.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Obtiene o establece el número de elementos de la matriz.</summary>
      <returns>Número de elementos de la matriz.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Obtiene o establece el elemento en el índice especificado.</summary>
      <param name="index">Índice del elemento que se va a obtener o establecer.</param>
      <exception cref="T:System.IndexOutOfRangeException">El índice especificado no está en la matriz.</exception>
      <returns>Elemento que se encuentra en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>Enumerador de matriz.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Avanza hasta el siguiente valor de la matriz.</summary>
      <returns>
        <see langword="true" /> si existe otro elemento de la matriz; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Obtiene el elemento actual.</summary>
      <returns>Elemento actual.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableDictionary`2" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Determina si el diccionario inmutable especificado contiene el par de clave-valor especificado.</summary>
      <param name="map">Diccionario inmutable para buscar.</param>
      <param name="key">Clave que se va a buscar en el diccionario inmutable.</param>
      <param name="value">Valor para buscar en la clave especificada, si se encuentra la clave.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario inmutable.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario inmutable.</typeparam>
      <returns>
        <see langword="true" /> si esta asignación contiene el par clave-valor especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Crea un nuevo diccionario inmutable vacío.</summary>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Diccionario inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un diccionario inmutable vacío que usa el comparador de claves especificado.</summary>
      <param name="keyComparer">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Diccionario inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un diccionario inmutable vacío que usa los comparadores de claves y valores especificados.</summary>
      <param name="keyComparer">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <param name="valueComparer">Implementación a utilizar para determinar la igualdad de valores en el diccionario.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Diccionario inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Crea un nuevo generador de diccionarios inmutable.</summary>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Generador nuevo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un nuevo generador de diccionarios inmutable.</summary>
      <param name="keyComparer">Comparador de claves.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Generador nuevo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un nuevo generador de diccionarios inmutable.</summary>
      <param name="keyComparer">Comparador de claves.</param>
      <param name="valueComparer">Comparador de claves.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Generador nuevo.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuevo diccionario inmutable que contiene los elementos especificados.</summary>
      <param name="items">Elementos que se usan para rellenar el diccionario antes de que se convierta en inmutable.</param>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <returns>Nuevo diccionario inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador de claves especificado.</summary>
      <param name="keyComparer">Implementación de comparador que se va a utilizar para comparar las claves para la igualdad.</param>
      <param name="items">Elementos que se van a agregar al diccionario antes de que se convierta en inmutable.</param>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <returns>Nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador de claves especificado.</summary>
      <param name="keyComparer">Implementación de comparador que se va a utilizar para comparar las claves para la igualdad.</param>
      <param name="valueComparer">Implementación de comparador que se va a utilizar para comparar los valores para la igualdad.</param>
      <param name="items">Elementos que se van a agregar al diccionario antes de que se convierta en inmutable.</param>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <returns>Nuevo diccionario inmutable que contiene los elementos especificados y usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="dictionary">Diccionario del que recuperar el valor.</param>
      <param name="key">Clave que se va a buscar.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="TValue">Tipo del valor.</typeparam>
      <returns>Valor de la clave o <c>default(TValue)</c> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="dictionary">Diccionario del que recuperar el valor.</param>
      <param name="key">Clave que se va a buscar.</param>
      <param name="defaultValue">Valor predeterminado para devolver si no se detecta ninguna clave coincidente en el diccionario.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="TValue">Tipo del valor.</typeparam>
      <returns>El valor de la clave, o <paramref name="defaultValue" /> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Crea un diccionario inmutable de una colección de elementos existente, aplicando una función de transformación en las claves de origen.</summary>
      <param name="source">Colección de origen que se usa para generar el diccionario inmutable.</param>
      <param name="keySelector">Función que se utiliza para transformar las claves para el diccionario inmutable.</param>
      <typeparam name="TSource">Tipo de elemento de la colección de origen.</typeparam>
      <typeparam name="TKey">Tipo de clave del diccionario inmutable resultante.</typeparam>
      <returns>Diccionario inmutable que contiene los elementos de <paramref name="source" />, con claves transformadas aplicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un diccionario inmutable basado en alguna transformación de una secuencia.</summary>
      <param name="source">Colección de origen que se usa para generar el diccionario inmutable.</param>
      <param name="keySelector">Función que se utiliza para transformar las claves para el diccionario inmutable.</param>
      <param name="keyComparer">Comparador de claves que se utilizará para el diccionario.</param>
      <typeparam name="TSource">Tipo de elemento de la colección de origen.</typeparam>
      <typeparam name="TKey">Tipo de clave del diccionario inmutable resultante.</typeparam>
      <returns>Diccionario inmutable que contiene los elementos de <paramref name="source" />, con claves transformadas aplicando <paramref name="keySelector" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumera una secuencia de pares de clave/valor y genera un diccionario ordenado inmutable de su contenido.</summary>
      <param name="source">Secuencia de pares clave-valor a enumerar.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumera una secuencia de pares de clave-valor y genera un diccionario inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera una secuencia de pares de clave-valor y genera un diccionario inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <param name="valueComparer">Comparador de valor que se usará para el diccionario inmutable.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}.Builder)">
      <summary>Crea un diccionario inmutable a partir del contenido actual del diccionario del generador.</summary>
      <param name="builder">Generador desde el que se va a crear el diccionario inmutable.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario inmutable que incluye el contenido actual del diccionario del generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumera y transforma una secuencia y genera un diccionario inmutable de su contenido.</summary>
      <param name="source">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario resultante.</typeparam>
      <returns>Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera y transforma una secuencia y genera un diccionario inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer">Comparador de claves que se utilizará para el diccionario.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario resultante.</typeparam>
      <returns>Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumera y transforma una secuencia y genera un diccionario inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer">Comparador de claves que se utilizará para el diccionario.</param>
      <param name="valueComparer">Comparador de valor que se usará para el diccionario.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario resultante.</typeparam>
      <returns>Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Representa una colección inmutable y no ordenada de claves y valores.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Obtiene un diccionario inmutable vacío.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor especificados en el diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentException">La clave especificada ya existe en el diccionario, pero tiene un valor diferente.</exception>
      <returns>Nuevo diccionario inmutable que contiene el par de clave-valor adicional.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Agrega los pares clave-valor especificados al diccionario inmutable.</summary>
      <param name="pairs">Pares clave-valor que se va a agregar.</param>
      <exception cref="T:System.ArgumentException">Una de las claves especificadas ya existe en el diccionario, pero tiene un valor diferente.</exception>
      <returns>Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Recupera un diccionario inmutable vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns>Diccionario vacío con orden y reglas de comparación de clave y valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si el diccionario inmutable contiene el par de clave-valor especificado.</summary>
      <param name="pair">Par clave-valor que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el par clave-valor especificado se encuentra en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Determina si el diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el diccionario inmutable contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Determina si el diccionario inmutable contiene un elemento con el valor especificado.</summary>
      <param name="value">Valor que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el diccionario inmutable.</summary>
      <returns>Enumerador que puede usarse para recorrer en iteración el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Quita el elemento con la clave especificada del diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <returns>Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra la clave especificada en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita los elementos con la clave especificada del diccionario inmutable.</summary>
      <param name="keys">Claves de los elementos que se van a quitar.</param>
      <returns>Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Establece la clave y valor especificados en el diccionario inmutable, posiblemente sobrescribiendo un valor existente de la clave.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de clave que se va a establecer.</param>
      <returns>Nuevo diccionario inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Establece los pares de clave-valor especificados en el diccionario inmutable, posiblemente sobrescribiendo valores existentes de las claves.</summary>
      <param name="items">Pares de clave-valor que se van a establecer en el diccionario. Si ya existe alguna de las claves en el diccionario, este método sobrescribirá los valores anteriores.</param>
      <returns>Nuevo diccionario inmutable que contiene pares de clave-valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.Generic.ICollection`1" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>Es <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="item" /> en la <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al diccionario inmutable.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Quita el elemento con la clave especificada del diccionario genérico.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
      <returns>Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si <paramref name="key" /> no se encontró en el diccionario genérico original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz, empezando por un índice de matriz concreto.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al objeto de diccionario inmutable.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Borra esta instancia.</summary>
      <exception cref="T:System.NotSupportedException">El objeto de diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si el objeto de diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se debe buscar en el objeto del diccionario.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto de diccionario inmutable.</summary>
      <returns>Objeto de enumerador para el objeto de diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada del objeto de diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de la entrada que se va a agregar.</param>
      <returns>Nuevo diccionario inmutable que contiene el par de clave-valor adicional.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="pairs">Secuencia de pares clave-valor que se van a agregar al diccionario.</param>
      <returns>Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>Recupera un diccionario vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns>Instancia de diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key">Clave de la entrada que se va a quitar.</param>
      <returns>Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra la clave especificada en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="keys">Secuencia de claves que se van a quitar.</param>
      <returns>Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de la entrada que se va a agregar.</param>
      <returns>Nuevo diccionario inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aplica un conjunto determinado de pares clave-valor a un diccionario inmutable, reemplazando cualquier clave en conflicto en el diccionario resultante.</summary>
      <param name="items">Pares clave-valor que se van a establecer en el mapa. Cualquier clave que esté en conflicto con las claves existentes reemplazará los valores anteriores.</param>
      <returns>Copia del diccionario inmutable con pares clave-valor actualizados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Crea un diccionario inmutable con el mismo contenido que este diccionario que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns>Colección con el mismo contenido que este diccionario que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey">Clave que se va a buscar.</param>
      <param name="actualKey">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns>
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key">Clave cuyo valor se va a recuperar.</param>
      <param name="value">Si se encuentra la clave, cuando este método devuelve un resultado, contiene el valor asociado a la clave especificada; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <returns>
        <see langword="true" /> si el objeto que implementa el diccionario contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Obtiene una instancia del diccionario inmutable que usa el comparador de claves especificado.</summary>
      <param name="keyComparer">Comparador de claves a utilizar.</param>
      <returns>Instancia del diccionario inmutable que usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Obtiene una instancia del diccionario inmutable que usa los comparadores de clave y valor especificados.</summary>
      <param name="keyComparer">Comparador de claves a utilizar.</param>
      <param name="valueComparer">Comparador de claves a utilizar.</param>
      <returns>Instancia del diccionario inmutable que usa los comparadores especificados.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Obtiene el número de pares de clave-valor incluido en el diccionario inmutable.</summary>
      <returns>Número de pares de clave-valor del diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Obtiene un valor que indica si esta instancia del dicionario inmutable está vacía.</summary>
      <returns>
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Obtiene el <paramref name="TValue" /> asociado con la clave especificada.</summary>
      <param name="key">Tipo de la clave.</param>
      <returns>Valor asociado a la clave especificada. Si no se encuentra ningún resultado, la operación produce una excepción.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Obtiene el comparador de claves del diccionario inmutable.</summary>
      <returns>Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Obtiene las claves en el diccionario inmutable.</summary>
      <returns>Claves del diccionario inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Obtiene o establece la clase <typeparamref name="TValue" /> con la clave especificada.</summary>
      <param name="key">Tipo de la clave.</param>
      <returns>Objeto de tipo <typeparamref name="TValue" /> asociado a <paramref name="key" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtiene las claves.</summary>
      <returns>Colección que contiene las claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtiene los valores.</summary>
      <returns>Colección que contiene los valores de.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">Clave.</param>
      <returns>Valor almacenado en la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Obtiene el comparador de valor que se utiliza para determinar si los valores son iguales.</summary>
      <returns>Comparador de valor que se utiliza para determinar si los valores son iguales.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Obtiene los valores del diccionario inmutable.</summary>
      <returns>Valores del diccionario inmutable.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Representa un mapa hash que transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de mapa hash inmutables muy eficazmente.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(`0,`1)">
      <summary>Agrega un elemento que dispone de la clave y el valor especificados al diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en el diccionario.</exception>
      <exception cref="T:System.NotSupportedException">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Agrega el elemento especificado al diccionario.</summary>
      <param name="item">Objeto que se agrega al diccionario.</param>
      <exception cref="T:System.NotSupportedException">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Agrega una secuencia de valores a esta colección.</summary>
      <param name="items">Elementos que se van a agregar a esta colección.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Elimina todos los elementos del diccionario inmutable.</summary>
      <exception cref="T:System.NotSupportedException">El diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si el diccionario inmutable contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en el diccionario.</param>
      <returns>
        <see langword="true" /> si el objeto <paramref name="item" /> está en el diccionario; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsKey(`0)">
      <summary>Determina si el diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se debe buscar en el diccionario.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ContainsValue(`1)">
      <summary>Determina si el diccionario contiene un elemento con el valor especificado.</summary>
      <param name="value">Valor que se va a buscar en el diccionario inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el diccionario inmutable.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="key">Clave que se va a buscar.</param>
      <returns>Valor de la clave o <c>default(TValue)</c> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario.</summary>
      <param name="key">Clave que se va a buscar.</param>
      <param name="defaultValue">Valor predeterminado para devolver si no se detecta ninguna clave coincidente en el diccionario.</param>
      <returns>El valor de la clave, o <paramref name="defaultValue" /> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(`0)">
      <summary>Quita el elemento con la clave especificada del diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <exception cref="T:System.NotSupportedException">El diccionario es de solo lectura.</exception>
      <returns>Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si no se encontró <paramref name="key" /> en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Quita la primera repetición de un objeto específico del diccionario inmutable.</summary>
      <param name="item">Objeto que se va a quitar del diccionario.</param>
      <exception cref="T:System.NotSupportedException">El diccionario es de solo lectura.</exception>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de ; en caso contrario, <see langword="false" />. Este método también devuelve false si <paramref name="item" /> no se encontró en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita todas las entradas con claves que coinciden con las que se encuentran en la secuencia especificada del diccionario inmutable.</summary>
      <param name="keys">Claves para las entradas que se quitarán del diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, comenzando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" />, comenzando en el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional de tipo <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al objeto del diccionario.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si el objeto del diccionario contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</summary>
      <exception cref="T:System.NotImplementedException" />
      <returns>Objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada del diccionario.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Crea un diccionario inmutable basado en el contenido de esta instancia.</summary>
      <returns>Diccionario inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey">Clave que se va a buscar.</param>
      <param name="actualKey">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns>
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Devuelve el valor asociado a la clave especificada.</summary>
      <param name="key">Clave cuyo valor se va a recuperar.</param>
      <param name="value">Valor asociado a la clave especificada cuando el método devuelve, si se encuentra la clave; en caso contrario, devuelve el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es null.</exception>
      <returns>
        <see langword="true" /> si el objeto que implementa el diccionario inmutable contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Obtiene el número de elementos contenido en el diccionario inmutable.</summary>
      <returns>Número de elementos contenido en el diccionario inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Item(`0)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">Elemento que se obtiene o establece.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">La propiedad se recuperará y no se encuentra <paramref name="key" />.</exception>
      <exception cref="T:System.NotSupportedException">La propiedad se establece y <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
      <returns>Elemento que tiene la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Obtiene o establece el comparador de claves.</summary>
      <returns>Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Obtiene una colección que contiene las claves del diccionario inmutable.</summary>
      <returns>Colección que contiene las claves del objeto que implementa el diccionario inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtiene un valor que indica si la colección es de solo lectura.</summary>
      <returns>
        <see langword="true" /> si la colección es de solo lectura; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtiene una colección que contiene las claves del diccionario genérico.</summary>
      <returns>Colección que contiene las claves del objeto que implementa el Diccionario genérico.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtiene una colección que contiene los valores del diccionario genérico.</summary>
      <returns>Colección que contiene los valores del objeto que implementa el Diccionario genérico.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">Clave.</param>
      <returns>Valor almacenado en la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Obtiene o establece el comparador de valores.</summary>
      <returns>Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Obtiene una colección que contiene los valores del diccionario inmutable.</summary>
      <returns>Colección que contiene los valores del objeto que implementa el diccionario.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Enumera el contenido del diccionario inmutable sin asignar memoria.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento del diccionario inmutable.</summary>
      <exception cref="T:System.InvalidOperationException">Se ha modificado el diccionario después de la creación del enumerador.</exception>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento del diccionario).</summary>
      <exception cref="T:System.InvalidOperationException">Se ha modificado el diccionario después de la creación del enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns>Elemento del diccionario en la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento actual.</summary>
      <returns>Elemento actual de la enumeración.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Crea un conjunto hash inmutable vacío.</summary>
      <typeparam name="T">Tipo de elementos que se almacenará en el conjunto hash inmutable.</typeparam>
      <returns>Conjunto hash inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Crea un nuevo conjunto hash inmutable que contiene el elemento especificado.</summary>
      <param name="item">Elemento con el que rellenar el conjunto hash.</param>
      <typeparam name="T">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns>Nuevo conjunto hash inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Crea un nuevo conjunto hash inmutable que contiene la matriz especificada de elementos.</summary>
      <param name="items">Matriz que contiene los elementos con los que rellenar el conjunto hash.</param>
      <typeparam name="T">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns>Nuevo conjunto hash inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un conjunto hash inmutable vacío que usa el comparador de igualdad especificado.</summary>
      <param name="equalityComparer">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <typeparam name="T">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns>Conjunto hash inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Crea un nuevo conjunto hash inmutable que contiene el elemento especificado y usa el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="equalityComparer">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <param name="item">Elemento con el que rellenar el conjunto hash.</param>
      <typeparam name="T">Tipo de elementos del conjunto hash inmutable.</typeparam>
      <returns>Nuevo conjunto hash inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Crea un nuevo conjunto hash inmutable que contiene los elementos de la colección especificada y usa el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="equalityComparer">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <param name="items">Matriz que contiene los elementos con los que rellenar el conjunto hash.</param>
      <typeparam name="T">Tipo de elementos almacenados en el conjunto hash inmutable.</typeparam>
      <returns>Nuevo conjunto hash inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Crea un nuevo generador de conjuntos hash inmutables.</summary>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Generador de conjuntos hash inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un nuevo generador de conjuntos hash inmutables.</summary>
      <param name="equalityComparer">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Nuevo generador de conjuntos hash inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuevo conjunto hash inmutable completado con los elementos especificados.</summary>
      <param name="items">Elementos a agregar al conjunto hash.</param>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Nuevo conjunto hash inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea un nuevo conjunto hash inmutable que contiene los elementos especificados y usa el comparador de igualdad especificado para el tipo de conjunto.</summary>
      <param name="equalityComparer">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <param name="items">Los elementos se agregan a la colección antes de que se aplique la inmutabilidad.</param>
      <typeparam name="T">Tipo de elementos almacenados en la colección.</typeparam>
      <returns>Nuevo conjunto hash inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera una secuencia y genera un conjunto hash inmutable de su contenido.</summary>
      <param name="source">Secuencia que se va a enumerar.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <returns>Conjunto hash inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumera una secuencia, genera un conjunto hash inmutable de su contenido y usa el comparador de igualdad especificado para este tipo de conjunto.</summary>
      <param name="source">Secuencia que se va a enumerar.</param>
      <param name="equalityComparer">Objeto que se va a utilizar para comparar la igualdad de los objetos del conjunto.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <returns>Conjunto hash inmutable que contiene los elementos en la secuencia especificada y usa el comparador de igualdad especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Immutable.ImmutableHashSet{``0}.Builder)">
      <summary>Crea un conjunto hash inmutable a partir del contenido del conjunto del generador.</summary>
      <param name="builder">Generador desde el que se va a crear el conjunto hash inmutable.</param>
      <typeparam name="TSource">Tipo de los elementos del conjunto hash.</typeparam>
      <returns>Conjunto hash inmutable que incluye el contenido actual del conjunto del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Representa un conjunto hash inmutable y sin ordenar.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de los elementos del conjunto hash.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Obtiene un conjunto hash inmutable establecido para este tipo que utiliza el <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> predeterminado.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Agrega el elemento especificado al conjunto hash.</summary>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
      <returns>Conjunto hash que contiene el valor agregado y todos los valores retenidos previamente por el objeto <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Recupera un conjunto hash inmutable vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns>Conjunto hash vacío que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Determina si este conjunto hash inmutable contiene el elemento especificado.</summary>
      <param name="item">Objeto que se va a buscar en el conjunto hash inmutable.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en la matriz <see cref="T:System.Collections.Immutable.ImmutableHashSet`1" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto hash inmutable actual los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar de este conjunto.</param>
      <returns>Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto hash inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Nuevo conjunto inmutable que contiene los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto hash inmutable actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto hash inmutable actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto hash actual es un supraconjunto de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto de la colección especificada; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto hash inmutable actual se superpone a la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual y la colección especificada comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Elimina el elemento especificado de este conjunto hash inmutable.</summary>
      <param name="item">Elemento que se va a quitar.</param>
      <returns>Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto hash inmutable actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Es <see langword="true" /> si los conjuntos son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto hash inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento al conjunto.</summary>
      <param name="item">Objeto que se va a agregar al conjunto.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Quita todos los elementos de este conjunto.</summary>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos del conjunto en una matriz, comenzando en un índice concreto.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Quita la primera aparición de un objeto específico del conjunto.</summary>
      <param name="item">Objeto que se va a quitar del conjunto.</param>
      <returns>Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Objeto Enumerator que itera por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item">Elemento que se agregará a la colección.</param>
      <returns>
        <see langword="false" /> si el elemento se ha agregado al conjunto; <see langword="true" /> si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a eliminar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con la colección actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del conjunto en una matriz, comenzando en un índice concreto.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración un conjunto.</summary>
      <returns>Enumerador que se puede usar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Agrega el elemento especificado a este conjunto inmutable.</summary>
      <param name="item">Elemento que se va a agregar.</param>
      <returns>Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Recupera un conjunto vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns>Conjunto vacío que tiene la misma ordenación o semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto actual los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar de este conjunto.</param>
      <returns>Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Nuevo conjunto inmutable que contiene los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Elimina el elemento especificado de este conjunto inmutable.</summary>
      <param name="item">Elemento que se va a quitar.</param>
      <returns>Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other">Colección de la que se van a agregar elementos.</param>
      <returns>Nuevo conjunto inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Crea un conjunto hash inmutable con el mismo contenido que este conjunto y que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns>Conjunto con el mismo contenido que este conjunto que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue">Valor que se va a buscar.</param>
      <param name="actualValue">Valor del conjunto encontrado por la búsqueda, o valor original si la búsqueda no produjo ninguna coincidencia.</param>
      <returns>Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un nuevo conjunto hash inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other">Colección de la que se van a agregar elementos.</param>
      <returns>Nuevo conjunto hash inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Obtiene una instancia del conjunto hash inmutable que utiliza al comparador de igualdad especificado para sus métodos de búsqueda.</summary>
      <param name="equalityComparer">Comparador de igualdad que se va a usar.</param>
      <returns>Instancia de este conjunto hash inmutable que usa el comparador especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Obtiene el número de elementos contenido en el conjunto hash inmutable.</summary>
      <returns>Número de elementos del conjunto hash.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Obtiene un valor que indica si el conjunto hash inmutable actual está vacío.</summary>
      <returns>
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Obtiene el objeto que se utiliza para obtener los códigos hash para las claves y para comprobar la igualdad de valores en el conjunto hash inmutable.</summary>
      <returns>Comparador que se utiliza para obtener códigos hash para las claves y comprobar la igualdad.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Vea la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Vea <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Representa un conjunto de hash que transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de conjunto hash inmutables muy eficazmente.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Add(`0)">
      <summary>Agrega el elemento especificado al conjunto hash inmutable.</summary>
      <param name="item">Elemento que se va a agregar.</param>
      <returns>
        <see langword="true" /> si el elemento no pertenecía ya a la colección; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Elimina todos los elementos del conjunto hash inmutable.</summary>
      <exception cref="T:System.NotSupportedException">El conjunto hash es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Contains(`0)">
      <summary>Determina si eI conjunto hash inmutable contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en el conjunto hash.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en el conjunto hash; de lo contrario, <see langword="false" /></returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar del conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el conjunto hash inmutable.</summary>
      <returns>Enumerador que se puede usar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual se superpone a la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Remove(`0)">
      <summary>Quita la primera repetición de un objeto específico del conjunto hash inmutable.</summary>
      <param name="item">Objeto que se va a quitar del conjunto.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura.</exception>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente del conjunto; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en el conjunto original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es igual a <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento al conjunto hash.</summary>
      <param name="item">Objeto que se va a agregar al conjunto.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos del conjunto hash en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto hash. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Crea un conjunto hash inmutable basado en el contenido de esta instancia.</summary>
      <returns>Conjunto inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.TryGetValue(`0,`0@)">
      <summary>Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue">Valor que se va a buscar.</param>
      <param name="actualValue">Valor del conjunto encontrado por la búsqueda, o valor original si la búsqueda no produjo ninguna coincidencia.</param>
      <returns>Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual en la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Obtiene el número de elementos contenido en el conjunto hash inmutable.</summary>
      <returns>Número de elementos contenido en el conjunto hash inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Obtiene o establece el comparador de claves.</summary>
      <returns>Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Enumera el contenido del conjunto hash inmutable sin asignar memoria.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento del conjunto hash inmutable.</summary>
      <exception cref="T:System.InvalidOperationException">El conjunto hash se ha modificado después de la creación del enumerador.</exception>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del conjunto hash.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento del conjunto hash).</summary>
      <exception cref="T:System.InvalidOperationException">El conjunto hash se ha modificado después de la creación del enumerador.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns>Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Obtiene el elemento actual.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Contiene mecanismos de intercambio interbloqueados para colecciones inmutables.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Obtiene el valor de un diccionario después de agregarlo o de actualizar una entrada existente.</summary>
      <param name="location">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</param>
      <param name="key">Clave del valor a agregar o actualizar.</param>
      <param name="addValue">Valor a utilizar si no existe ningún valor anterior.</param>
      <param name="updateValueFactory">Función que recibe la clave y el valor anterior y devuelve el nuevo valor con el que se va a actualizar el diccionario.</param>
      <typeparam name="TKey">Tipo de clave almacenada por el diccionario.</typeparam>
      <typeparam name="TValue">El tipo de valor almacenado por el diccionario.</typeparam>
      <returns>Valor agregado o actualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Obtiene el valor de un diccionario después de agregarlo o de actualizar una entrada existente.</summary>
      <param name="location">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</param>
      <param name="key">Clave del valor a agregar o actualizar.</param>
      <param name="addValueFactory">Función que recibe la clave y devuelve un nuevo valor para agregar al diccionario cuando no existe ningún valor anteriormente.</param>
      <param name="updateValueFactory">Función que recibe la clave y el valor anterior y devuelve el nuevo valor con el que se va a actualizar el diccionario.</param>
      <typeparam name="TKey">Tipo de clave almacenada por el diccionario.</typeparam>
      <typeparam name="TValue">El tipo de valor almacenado por el diccionario.</typeparam>
      <returns>Valor agregado o actualizado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Pone en cola un elemento al final de una cola automáticamente.</summary>
      <param name="location">Variable o campo para actualizar de manera automática.</param>
      <param name="value">Valor que se va a poner en cola.</param>
      <typeparam name="T">Tipo de elementos contenidos en la colección.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</summary>
      <param name="location">Variable o campo para actualizar de manera automática si la clave especificada no se encuentra en el diccionario.</param>
      <param name="key">Clave del valor que se va a obtener o agregar.</param>
      <param name="value">Valor que se va a agregar al diccionario si no se encuentra la clave.</param>
      <typeparam name="TKey">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en la colección.</typeparam>
      <returns>Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</summary>
      <param name="location">Variable o campo para actualizar de manera atomática si el  especificado no se encuentra en el diccionario.</param>
      <param name="key">Clave del valor que se va a recuperar o agregar.</param>
      <param name="valueFactory">Función que se va a ejecutar para obtener el valor que se va a insertar en el diccionario si no se encuentra la clave. Este delegado no se invocará más de una vez.</param>
      <typeparam name="TKey">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en la colección.</typeparam>
      <returns>Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Obtiene el valor de la clave especificada del diccionario, o si no se encontró la clave, se agrega un nuevo valor al diccionario.</summary>
      <param name="location">Variable o campo para actualizar si el especificado no se encuentra en el diccionario.</param>
      <param name="key">Clave del valor que se va a recuperar o agregar.</param>
      <param name="valueFactory">Función que se va a ejecutar para obtener el valor que se va a insertar en el diccionario si no se encuentra la clave.</param>
      <param name="factoryArgument">Argumento que se va a pasar al generador de valores.</param>
      <typeparam name="TKey">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en la colección.</typeparam>
      <typeparam name="TArg">Tipo del argumento proporcionado al generador de valores.</typeparam>
      <returns>Valor de la clave especificada o <paramref name="valueFactory" /> si la clave no estaba presente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Compara dos matrices inmutables para comprobar si son iguales y, si lo son, reemplaza una de las matrices.</summary>
      <param name="location">Destino, cuyo valor se compara con <paramref name="comparand" /> y que posiblemente se reemplace.</param>
      <param name="value">Valor que reemplaza el valor de destino si la comparación da como resultado una igualdad.</param>
      <param name="comparand">Valor que se compara con el valor que hay en <paramref name="location" />.</param>
      <typeparam name="T">Tipo de elemento almacenado por la matriz.</typeparam>
      <returns>Valor original de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Establece una matriz en el valor especificado y devuelve una referencia a la matriz original, como una operación atómica.</summary>
      <param name="location">Matriz que se va a establecer en el valor especificado.</param>
      <param name="value">Valor en el que está establecido el parámetro <paramref name="location" />.</param>
      <typeparam name="T">Tipo de elemento almacenado por la matriz.</typeparam>
      <returns>Valor original de <paramref name="location" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Si no se ha inicializado la matriz se establece una matriz en la matriz especificada.</summary>
      <param name="location">Matriz que se va a establecer en el valor especificado.</param>
      <param name="value">Valor en el que está establecido el parámetro <paramref name="location" />, si no se ha inicializado.</param>
      <typeparam name="T">Tipo de elemento almacenado por la matriz.</typeparam>
      <returns>
        <see langword="true" /> si se le asignó el valor especificado a la matriz; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Inserta un nuevo elemento en la pila.</summary>
      <param name="location">Pila para actualizar.</param>
      <param name="value">Valor que se va a insertar en la pila.</param>
      <typeparam name="T">Tipo de elementos de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Agrega la clave y el valor especificados al diccionario si la clave no está en el diccionario.</summary>
      <param name="location">Diccionario para actualizar con la clave y el valor especificados.</param>
      <param name="key">Clave para agregar, si no se ha definido en el diccionario.</param>
      <param name="value">El valor que se va a agregar.</param>
      <typeparam name="TKey">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en la colección.</typeparam>
      <returns>
        <see langword="true" />, si la clave no está en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Quita de forma atómica y devuelve el elemento especificado en el encabezado de la cola, si la cola no está vacía.</summary>
      <param name="location">Variable o campo para actualizar de manera automática.</param>
      <param name="value">Se establece en el valor del encabezado de la cola, si la cola no está vacía.</param>
      <typeparam name="T">Tipo de elementos de la cola.</typeparam>
      <returns>
        <see langword="true" /> si la cola no está vacía y se quita el elemento del encabezado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Quita un elemento de la parte superior de la pila, si hay un elemento para quitar.</summary>
      <param name="location">Pila para actualizar.</param>
      <param name="value">Recibe el valor quitado de la pila, si la pila no está vacía.</param>
      <typeparam name="T">Tipo de elementos de la pila.</typeparam>
      <returns>
        <see langword="true" /> si un elemento se quita de la pila; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Quita el elemento con la clave especificada si la clave existe.</summary>
      <param name="location">Diccionario que se va a actualizar.</param>
      <param name="key">Clave que se va a quitar.</param>
      <param name="value">Recibe el valor del elemento quitado, si el diccionario no está vacío.</param>
      <typeparam name="TKey">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en la colección.</typeparam>
      <returns>
        <see langword="true" /> si se ha encontrado y eliminado la clave; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Establece la clave especificada en el valor especificado si la clave especificada ya está establecida en un valor específico.</summary>
      <param name="location">Diccionario que se va a actualizar.</param>
      <param name="key">Clave a actualizar.</param>
      <param name="newValue">Nuevo valor que se va establecer.</param>
      <param name="comparisonValue">Valor actual de <paramref name="key" /> en orden para que la actualización tenga éxito.</param>
      <typeparam name="TKey">Tipo de claves contenidas en la colección.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en la colección.</typeparam>
      <returns>
        <see langword="true" /> si <paramref name="key" /> y <paramref name="comparisonValue" /> están presentes en el diccionario y se ha actualizado la comparación a <paramref name="newValue" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Transforma un valor local con semántica de transacción de bloqueo optimista mediante una función de transformación especificada.             La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</summary>
      <param name="location">Variable o campo que se va a modificar, al que pueden acceder varios subprocesos.</param>
      <param name="transformer">Función que transforma el valor. Esta función no debe tener efectos secundarios, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</param>
      <typeparam name="T">El tipo de datos.</typeparam>
      <returns>Es <see langword="true" /> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <see langword="false" /> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0}})">
      <summary>Muta una matriz inmutable en contexto con la semántica de transacciones de bloqueo optimista a través de una función de transformación especificada.
La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</summary>
      <param name="location">Matriz inmutable que se va a cambiar.</param>
      <param name="transformer">Función que genera la nueva matriz a partir de la antigua. Esta función debe tener un efecto secundario, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</param>
      <typeparam name="T">Tipo de datos de la matriz inmutable.</typeparam>
      <returns>Es <see langword="true" /> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <see langword="false" /> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Transforma un valor local con semántica de transacción de bloqueo optimista mediante una función de transformación especificada.             La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</summary>
      <param name="location">Variable o campo que se va a modificar, al que pueden acceder varios subprocesos.</param>
      <param name="transformer">Función que transforma el valor. Esta función no debe tener efectos secundarios, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</param>
      <param name="transformerArgument">El argumento que se va a pasar a <paramref name="transformer" />.</param>
      <typeparam name="T">El tipo de datos.</typeparam>
      <typeparam name="TArg">Tipo de argumento pasado a la <paramref name="transformer" /> .</typeparam>
      <returns>Es <see langword="true" /> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <see langword="false" /> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(System.Collections.Immutable.ImmutableArray{``0}@,System.Func{System.Collections.Immutable.ImmutableArray{``0},``1,System.Collections.Immutable.ImmutableArray{``0}},``1)">
      <summary>Muta una matriz inmutable en contexto con la semántica de transacciones de bloqueo optimista a través de una función de transformación especificada.
La transformación se vuelve a intentar tantas veces como sea necesario para ganar la carrera de bloqueo optimista.</summary>
      <param name="location">Matriz inmutable que se va a cambiar.</param>
      <param name="transformer">Función que genera la nueva matriz a partir de la antigua. Esta función debe tener un efecto secundario, ya que se puede ejecutar varias veces cuando se producen carreras con otros subprocesos.</param>
      <param name="transformerArgument">El argumento que se va a pasar a <paramref name="transformer" />.</param>
      <typeparam name="T">Tipo de datos de la matriz inmutable.</typeparam>
      <typeparam name="TArg">Tipo de argumento pasado a la <paramref name="transformer" /> .</typeparam>
      <returns>Es <see langword="true" /> si se modifica el valor de la ubicación al aplicar el resultado de la función <paramref name="transformer" />; es <see langword="false" /> si el valor de la ubicación es el mismo porque la última invocación de <paramref name="transformer" /> ha devuelto el valor existente.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableList`1" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Crea una lista inmutable vacía.</summary>
      <typeparam name="T">Tipo de elementos a almacenar en el .</typeparam>
      <returns>Lista inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Crea una nueva lista inmutable que contiene el elemento especificado.</summary>
      <param name="item">Elemento con el que rellenar la lista.</param>
      <typeparam name="T">Tipo de elementos del .</typeparam>
      <returns>Nuevo  que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Crea una nueva lista que contiene la matriz especificada de elementos.</summary>
      <param name="items">Matriz que contiene los elementos con los que rellenar la lista.</param>
      <typeparam name="T">Tipo de elementos del .</typeparam>
      <returns>Nueva lista inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Crea un nuevo generador de listas inmutable.</summary>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nueva lista inmutable que contiene los elementos especificados.</summary>
      <param name="items">Elementos que van a agregarse a la lista.</param>
      <typeparam name="T">Tipo de elementos del .</typeparam>
      <returns>Lista inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en la lista.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista. El valor puede ser null para los tipos de referencia.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en la lista.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el índice hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la última aparición del elemento en toda la lista inmutable, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la última aparición del elemento en toda la lista inmutable, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice especificado.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la última aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice especificado.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser null para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Índice de base cero de la última aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Quita el valor especificado de la lista.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="value">Valor que se va a quitar.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Nueva lista inmutable con el elemento quitado o esta lista si el elemento no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Quita los valores especificados de esta lista.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <returns>Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Reemplaza el primer elemento igual de la lista por el elemento especificado.</summary>
      <param name="list">Lista en la que buscar.</param>
      <param name="oldValue">Elemento que se va a reemplazar.</param>
      <param name="newValue">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <typeparam name="T">Tipo de elementos de la lista.</typeparam>
      <exception cref="T:System.ArgumentException">Se produce cuando el valor antiguo no existe en la lista.</exception>
      <returns>Nueva lista (incluso si el valor que se va a reemplazar es igual que el nuevo valor para esa posición).</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera una secuencia y genera una lista inmutable de su contenido.</summary>
      <param name="source">Secuencia que se va a enumerar.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <returns>Lista inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Immutable.ImmutableList{``0}.Builder)">
      <summary>Crea una lista inmutable a partir del contenido de la colección del generador.</summary>
      <param name="builder">Generador desde el que se va a crear la lista inmutable.</param>
      <typeparam name="TSource">Tipo de los elementos de la lista.</typeparam>
      <returns>Lista inmutable que incluye el contenido actual de la colección del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Representa una lista de objetos fuertemente tipados inmutable a la que se puede obtener acceso por índice.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elementos en la lista.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Obtiene un conjunto vacío con el comparador de ordenación predeterminado.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Agrega el objeto especificado al final de la lista inmutable.</summary>
      <param name="value">Objeto que se va a agregar.</param>
      <returns>Una nueva lista inmutable con el objeto agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Agrega los elementos de la colección especificada al final de la lista inmutable.</summary>
      <param name="items">Colección cuyos elementos se agregarán al final de la lista.</param>
      <returns>Una nueva lista inmutable con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Busca la lista ordenada completa de un elemento usando el comparador predeterminado y devuelve el índice de base cero del elemento.</summary>
      <param name="item">Objeto que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <exception cref="T:System.InvalidOperationException">El comparador predeterminado no puede encontrar una implementación de comparador para el tipo T.</exception>
      <returns>Índice de base cero del elemento en la lista ordenada, si es que se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que el elemento o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Busca en la lista completa ordenada un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="item">Objeto que se va a buscar. El valor puede ser null para los tipos de referencia.</param>
      <param name="comparer">Implementación del comparador que se va a utilizar al comparar elementos, o null para utilizar el comparador predeterminado.</param>
      <exception cref="T:System.InvalidOperationException">El comparador es <see langword="null" />, y el comparador predeterminado no puede encontrar una implementación de comparador para el tipo T.</exception>
      <returns>Índice de base cero del elemento en la lista ordenada, si es que se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que el elemento o, si no hay ningún elemento mayor, el complemento bit a bit de <see cref="P:System.Collections.ICollection.Count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Busca un intervalo de elementos en la lista ordenada para obtener un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a buscar.</param>
      <param name="count">Longitud del intervalo en el que se va a buscar.</param>
      <param name="item">Objeto que se va a buscar. El valor puede ser null para los tipos de referencia.</param>
      <param name="comparer">Implementación de comparador que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El índice es menor que 0 o <paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">El índice y <paramref name="count" /> no denotan un intervalo válido en la lista.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es <see langword="null" />, y el comparador predeterminado no puede encontrar una implementación de comparador para el tipo T.</exception>
      <returns>Índice de base cero del elemento en la lista ordenada, si es que se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que el elemento o, si no hay ningún elemento mayor, el complemento bit a bit de <paramref name="count" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Quita todos los elementos de la lista inmutable.</summary>
      <returns>Lista vacía que conserva el mismo tipo o semántica desordenada que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Determina si esta lista inmutable contiene el valor especificado.</summary>
      <param name="value">Valor que se va a buscar.</param>
      <returns>
        <see langword="true" /> si la lista contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Convierte en otro tipo los elementos incluidos en la lista inmutable actual y devuelve una lista que contiene los elementos convertidos.</summary>
      <param name="converter">Delegado que convierte cada elemento de un tipo en otro tipo.</param>
      <typeparam name="TOutput">Tipo de los elementos de la matriz de destino.</typeparam>
      <returns>Una lista del tipo de destino que contiene los elementos convertidos del elemento <see cref="T:System.Collections.Immutable.ImmutableList`1" /> actual.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Copia toda la lista inmutable en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia un intervalo de elementos de la lista inmutable en una matriz unidimensional compatible, empezando en el índice especificado de la matriz de destino.</summary>
      <param name="index">Índice de base cero de la lista inmutable de origen donde comienza la copia.</param>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero de la matriz donde comienza la copia.</param>
      <param name="count">Número de elementos que se van a copiar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Determina si la lista inmutable contiene elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns>
        <see langword="true" /> si la lista inmutable contiene uno o varios elementos que cumplen las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la primera aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Primer elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Recupera todos los elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns>Lista inmutable que contiene todos los elementos que cumplen las condiciones definidas por el predicado especificado, si se encuentran; en caso contrario, devuelve una lista inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por coincidencia, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que va desde el índice especificado hasta el último elemento.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por coincidencia, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por coincidencia, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la última aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Último elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que contiene el número especificado de elementos y termina en el índice especificado.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que va desde el primer elemento hasta el índice especificado.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Realiza la acción especificada en cada elemento de la lista inmutable.</summary>
      <param name="action">Delegado para realizar en cada elemento de la lista inmutable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la lista inmutable.</summary>
      <returns>Enumerador que se puede usar para recorrer en iteración la lista inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Crea una copia superficial de un intervalo de elementos en la lista inmutable de origen.</summary>
      <param name="index">Índice de base cero en el que empieza el intervalo.</param>
      <param name="count">Número de elementos del intervalo.</param>
      <returns>Copia superficial de un intervalo de elementos en la lista inmutable de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en toda la lista inmutable.</summary>
      <param name="value">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="value" /> en la totalidad de la lista inmutable, si se encuentra; en caso contrario, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item">Objeto que se va a buscar en la lista. Valor puede ser null para los tipos de referencia.</param>
      <param name="index">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista que comienza por el índice y contiene el número de elementos, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Inserta el objeto especificado en la lista inmutable en el índice especificado.</summary>
      <param name="index">Índice de base cero en el que se inserta el objeto.</param>
      <param name="item">Objeto que se va a insertar.</param>
      <returns>Lista inmutable nueva posterior a la inserción del objeto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserta los elementos de una colección en la lista inmutable en el índice especificado.</summary>
      <param name="index">Índice de base cero en el que se insertan los elementos.</param>
      <param name="items">Colección cuyos elementos se deben insertar.</param>
      <returns>Lista inmutable nueva posterior a la inserción de los elementos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ItemRef(System.Int32)">
      <summary>Obtiene una referencia de solo lectura al elemento del conjunto en el elemento <paramref name="index" /> especificado.</summary>
      <param name="index">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <returns>Referencia de solo lectura al elemento en la posición especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item">Objeto que se va a buscar en la lista. El valor puede ser null para los tipos de referencia.</param>
      <param name="index">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Índice de base cero de la última aparición del elemento dentro del intervalo de elementos de la lista que contiene el número de elementos y finaliza en el índice, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Quita la primera repetición de un objeto especificado de esta lista inmutable.</summary>
      <param name="value">Objeto que se va a quitar.</param>
      <returns>Lista nueva con el objeto eliminado, o esta lista si el objeto especificado no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita la primera repetición del objeto que coincide con el valor especificado de esta lista inmutable.</summary>
      <param name="value">Valor del elemento que se va a quitar de la lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Lista nueva con el objeto eliminado, o esta lista si el objeto especificado no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns>Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Quita el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <returns>Lista nueva con el elemento eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita un intervalo de elementos de esta lista inmutable.</summary>
      <param name="items">Colección cuyos elementos deben quitarse si se encuentran coincidencias en esta lista.</param>
      <returns>Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita los valores especificados de esta lista.</summary>
      <param name="items">Elementos a quitar si se encuentran coincidencias en esta lista.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <returns>Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Quita un intervalo de elementos, empezando por el índice especificado y que contiene el número especificado de elementos de esta lista inmutable.</summary>
      <param name="index">Índice de inicio para comenzar la eliminación.</param>
      <param name="count">Número de elementos que se va a quitar.</param>
      <returns>Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Reemplaza el elemento especificado de la lista inmutable por un elemento nuevo.</summary>
      <param name="oldValue">Elemento que se va a reemplazar.</param>
      <param name="newValue">Elemento con el que se va a reemplazar <paramref name="oldValue" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue" /> no existe en la lista inmutable.</exception>
      <returns>Nueva lista con el elemento reemplazado, aunque sea igual que el elemento anterior.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Reemplaza el elemento especificado de la lista inmutable por un elemento nuevo.</summary>
      <param name="oldValue">Elemento a reemplazar en la lista.</param>
      <param name="newValue">Elemento con el que se va a reemplazar <paramref name="oldValue" />.</param>
      <param name="equalityComparer">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <returns>Lista nueva con el objeto sustituido, o esta lista si el objeto especificado no está en esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Invierte el orden de los elementos de la lista inmutable completa.</summary>
      <returns>Lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Invierte el orden de los elementos del intervalo especificado de la lista inmutable.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a invertir.</param>
      <param name="count">Número de elementos del intervalo que se va a invertir.</param>
      <returns>Lista invertida.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Reemplaza un elemento en una posición determinada en la lista inmutable por el elemento especificado.</summary>
      <param name="index">Posición en la lista del elemento que se va a reemplazar.</param>
      <param name="value">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <returns>Nueva lista con el elemento reemplazado, aunque sea igual que el elemento anterior de esa posición.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
      <returns>Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
      <param name="comparer">Implementación de  que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
      <param name="comparison">Delegado que se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> es <see langword="null" />.</exception>
      <returns>Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordena un intervalo de elementos de la lista inmutable utilizando el comparador especificado.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a ordenar.</param>
      <param name="count">Longitud del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
      <returns>Lista ordenada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega el elemento especificado a la lista inmutable.</summary>
      <param name="item">Elemento que se va a agregar.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Elimina todos los elementos de la lista inmutable.</summary>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Quita la primera repetición de un objeto específico de la lista inmutable.</summary>
      <param name="item">Objeto que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de la lista; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en la lista original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la lista inmutable.</summary>
      <returns>Un enumerador que se puede utilizar para recorrer en iteración la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserta un objeto en la lista inmutable en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Elimina el valor en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados de la lista inmutable.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la lista inmutable.</summary>
      <returns>Un enumerador que se puede utilizar para recorrer en iteración la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a la lista inmutable.</summary>
      <param name="value">Objeto que se va a agregar a la lista.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
      <returns>La posición en la que se insertó el nuevo elemento o -1 para indicar que el elemento no se insertó en la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Clear">
      <summary>Elimina todos los elementos de la lista inmutable.</summary>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la lista inmutable contiene un valor específico.</summary>
      <param name="value">Objeto que se va a buscar en la lista.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>Es <see langword="true" /> si se ha encontrado el objeto en la lista; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de la lista inmutable.</summary>
      <param name="value">Objeto que se va a buscar en la lista.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en la lista inmutable en el índice específico.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto que se va a insertar en la lista.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera repetición de un objeto específico de la lista inmutable.</summary>
      <param name="value">Objeto que se va a quitar de la lista.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">Siempre se produce.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Add(`0)">
      <summary>Agrega el valor especificado a esta lista inmutable.</summary>
      <param name="value">El valor que se va a agregar.</param>
      <returns>Una nueva lista con el elemento agregado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Agrega los valores especificados a esta lista inmutable.</summary>
      <param name="items">Valores que se van a agregar.</param>
      <returns>Una nueba lista con los elementos agregados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Clear">
      <summary>Recupera una lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns>Lista vacía que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Insert(System.Int32,`0)">
      <summary>Inserta el elemento especificado en el índice especificado en la lista inmutable.</summary>
      <param name="index">Índice en el que se va a insertar el valor.</param>
      <param name="item">Elemento que se va a insertar.</param>
      <returns>Nueva lista inmutable que incluye el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserta los elementos especificados en el índice especificado en la lista inmutable.</summary>
      <param name="index">Índice en el que se van a insertar los elementos.</param>
      <param name="items">Elementos que van a insertarse.</param>
      <returns>Nueva lista inmutable que incluye los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita el elemento con el valor especificado de la lista.</summary>
      <param name="value">Valor del elemento que se va a quitar de la lista.</param>
      <param name="equalityComparer">Comparador que se va a utilizar para comparar la igualdad de los elementos.</param>
      <returns>Nuevo elemento <see cref="T:System.Collections.Immutable.ImmutableList`1" /> con el elemento especificado eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAll(System.Predicate{`0})">
      <summary>Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns>Nueva lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveAt(System.Int32)">
      <summary>Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index">Índice del elemento que se va a quitar.</param>
      <returns>Lista nueva con el elemento eliminado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Quita un intervalo de elementos de esta lista inmutable que coincide con los elementos especificados.</summary>
      <param name="items">Intervalo de elementos para quitar de la lista, si se encuentra.</param>
      <param name="equalityComparer">Comparador de igualdad a usar para comparar los elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> o <paramref name="equalityComparer" /> es <see langword="null" />.</exception>
      <returns>Lista inmutable con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#RemoveRange(System.Int32,System.Int32)">
      <summary>Quita el número especificado de elementos en la ubicación especificada de esta lista.</summary>
      <param name="index">Índice inicial del intervalo de elementos que se va a quitar.</param>
      <param name="count">Número de elementos que se va a quitar.</param>
      <returns>Lista nueva con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Reemplaza un elemento de la lista por el elemento especificado.</summary>
      <param name="oldValue">Elemento que se va a reemplazar.</param>
      <param name="newValue">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <param name="equalityComparer">Comparador de igualdad que se va a usar en la búsqueda.</param>
      <exception cref="T:System.ArgumentException">Se produce cuando el valor antiguo no existe en la lista.</exception>
      <returns>La nueva lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.System#Collections#Immutable#IImmutableList{T}#SetItem(System.Int32,`0)">
      <summary>Reemplaza un elemento de la lista en una posición determinada por el elemento especificado.</summary>
      <param name="index">Posición en la lista del elemento que se va a reemplazar.</param>
      <param name="value">Elemento por el que se va a reemplazar el elemento antiguo.</param>
      <returns>La nueva lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Crea una lista con el mismo contenido que esta lista y que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns>Lista creada con el mismo contenido que esta lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Determina si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones que los elementos deben cumplir.</param>
      <returns>
        <see langword="true" /> si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />. Si la lista no tiene ningún elemento, el valor devuelto es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Obtiene el número de elementos incluidos en la lista.</summary>
      <returns>Número de elementos de la lista.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Obtiene un valor que indica si esta lista está vacía.</summary>
      <returns>
        <see langword="true" /> si la lista está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Obtiene el elemento situado en el índice especificado de la lista.</summary>
      <param name="index">El índice del elemento que se va a recuperar.</param>
      <exception cref="T:System.IndexOutOfRangeException">En una operación Get, <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <returns>Elemento en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Obtiene o establece el valor en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento al que se va a acceder.</param>
      <exception cref="T:System.IndexOutOfRangeException">Se produce desde el captador cuando <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Siempre se produce desde el establecedor.</exception>
      <returns>Valor almacenado en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#IsSynchronized">
      <summary>Este tipo es inmutable, por lo que siempre es seguro para subprocesos. Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Valor booleano que determina si la colección es segura para subprocesos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#ICollection#SyncRoot">
      <summary>Vea <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se usa para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index">Índice.</param>
      <exception cref="T:System.IndexOutOfRangeException">Se produce desde el captador cuando <paramref name="index" /> es negativo o no es menor que <see cref="P:System.Collections.Immutable.ImmutableList`1.Count" />.</exception>
      <exception cref="T:System.NotSupportedException">Siempre se produce desde el establecedor.</exception>
      <returns>Valor en el índice especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Representa una lista que se transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de lista inmutables muy eficazmente.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Add(`0)">
      <summary>Agrega un elemento a la lista inmutable.</summary>
      <param name="item">Elemento que va a agregarse a la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Agrega una serie de elementos al final de esta lista.</summary>
      <param name="items">Elementos que se agregan al final de la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0)">
      <summary>Busca en toda la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> un elemento usando el comparador predeterminado y devuelve el índice de base cero del elemento.</summary>
      <param name="item">Objeto que se va a buscar. El valor puede ser null para los tipos de referencia.</param>
      <exception cref="T:System.InvalidOperationException">El comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o de la interfaz <see cref="T:System.IComparable" /> para el tipo T.</exception>
      <returns>Índice de base cero del elemento de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Busca la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> completa para un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="item">Objeto que se va a buscar. Este valor puede ser null para los tipos de referencia.</param>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para el comparador predeterminado.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es <see langword="null" /> y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo T.</exception>
      <returns>Índice de base cero del elemento de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Busca en el rango especificado de <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> un elemento usando el comparador especificado y devuelve el índice de base cero del elemento.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a buscar.</param>
      <param name="count">Longitud del intervalo en el que se va a buscar.</param>
      <param name="item">Objeto que se va a buscar. Este valor puede ser null para los tipos de referencia.</param>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para el comparador predeterminado.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> es menor que 0.
o bien

<paramref name="count" /> es menor que 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> y <paramref name="count" /> no denotan un intervalo válido en <see cref="T:System.Collections.Generic.List`1" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer" /> es <see langword="null" /> y el comparador predeterminado <see cref="P:System.Collections.Generic.Comparer`1.Default" /> no puede encontrar una implementación de la interfaz genérica <see cref="T:System.IComparable`1" /> o la interfaz <see cref="T:System.IComparable" /> del tipo T.</exception>
      <returns>Índice de base cero del elemento de la <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" />, si se encuentra el elemento; en caso contrario, número negativo que es el complemento bit a bit del índice del siguiente elemento mayor que <paramref name="item" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Elimina todos los elementos de la lista inmutable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Contains(`0)">
      <summary>Determina si la lista inmutable contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en la lista.</param>
      <returns>
        <see langword="true" /> si el elemento se encuentra en la lista; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ConvertAll``1(System.Func{`0,``0})">
      <summary>Crea una nueva lista inmutable de la lista representada por este generador con la función de conversión.</summary>
      <param name="converter">Función de conversión.</param>
      <typeparam name="TOutput">Tipo del resultado de la función de conversión de delegado.</typeparam>
      <returns>Nueva lista inmutable de la lista representada por este generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[])">
      <summary>Copia toda la lista inmutable en una matriz unidimensional compatible, empezando en el principio de la matriz de destino.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(`0[],System.Int32)">
      <summary>Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero de la matriz donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copia la lista inmutable completa en una matriz unidimensional compatible, empezando por el índice especificado de la matriz de destino.</summary>
      <param name="index">Índice de base cero de la lista inmutable de origen donde comienza la copia.</param>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista inmutable. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <param name="count">Número de elementos que se van a copiar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Exists(System.Predicate{`0})">
      <summary>Determina si la lista inmutable contiene elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns>
        <see langword="true" /> si la lista inmutable contiene uno o varios elementos que cumplen las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Find(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la primera aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Primer elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindAll(System.Predicate{`0})">
      <summary>Recupera todos los elementos que coinciden con las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a buscar.</param>
      <returns>Lista inmutable que contiene todos los elementos que cumplen las condiciones definidas por el predicado especificado, si se encuentran; en caso contrario, devuelve una lista inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en el intervalo de elementos de la lista inmutable que va desde el índice especificado hasta el último elemento.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindIndex(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la primera aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la primera aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLast(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve la última aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Último elemento que coincide con las condiciones definidas por el predicado especificado, si se encuentra; de lo contrario, valor predeterminado para el tipo <paramref name="T" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que contiene el número especificado de elementos y termina en el índice especificado.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en el intervalo de elementos de la lista inmutable que va desde el primer elemento hasta el índice especificado.</summary>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.FindLastIndex(System.Predicate{`0})">
      <summary>Busca un elemento que coincida con las condiciones definidas por el predicado especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="match">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <returns>Índice de base cero de la última aparición de un elemento que coincide con las condiciones definidas por <paramref name="match" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ForEach(System.Action{`0})">
      <summary>Realiza la acción especificada en cada elemento de la lista.</summary>
      <param name="action">Delegado para realizar la acción en cada elemento de la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Un enumerador que se puede utilizar para recorrer en iteración la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Crea una copia superficial de un intervalo de elementos en la lista inmutable de origen.</summary>
      <param name="index">Índice de base cero en el que empieza el intervalo.</param>
      <param name="count">Número de elementos del intervalo.</param>
      <returns>Copia superficial de un intervalo de elementos en la lista inmutable de origen.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición en el rango de elementos de la lista inmutable.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>Índice de base cero de la primera aparición de <paramref name="item" /> dentro del intervalo de elementos de la lista inmutable, si se encuentra; de lo contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el índice especificado hasta el último elemento.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que abarca desde <paramref name="index" /> hasta el último elemento, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de la lista inmutable que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la primera aparición dentro del intervalo de elementos de <see cref="T:System.Collections.Immutable.ImmutableList`1.Builder" /> que comienza en el índice especificado y contiene el número especificado de elementos.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="index">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer">Comparador de valores que se utilizará para comparar la igualdad de elementos.</param>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Insert(System.Int32,`0)">
      <summary>Inserta un elemento en la lista inmutable en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar en la lista inmutable.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserta los elementos de una colección en la lista inmutable en el índice especificado.</summary>
      <param name="index">Índice de base cero donde se deben insertar los nuevos elementos.</param>
      <param name="items">Colección cuyos elementos se deben insertar en la lista inmutable. La propia colección no puede ser <see langword="null" />, pero puede contener elementos null si el tipo <c>T</c> es un tipo de referencia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ItemRef(System.Int32)">
      <summary>Obtiene una referencia de solo lectura al valor de un elemento <paramref name="index" /> determinado en la lista.</summary>
      <param name="index">Índice del elemento elegido.</param>
      <returns>Referencia de solo lectura al valor en el elemento <paramref name="index" /> especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición en toda la lista inmutable.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>Índice de base cero de la última aparición de <paramref name="item" /> en toda la lista inmutable, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta el índice especificado.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <returns>Índice de base cero de la última aparición de <paramref name="item" /> dentro del intervalo de elementos de la lista inmutable que abarca desde el primer elemento hasta <paramref name="index" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda hacia atrás.</param>
      <param name="count">Número de elementos de la sección en la que se va a realizar la búsqueda.</param>
      <returns>Índice de base cero de la última aparición de <paramref name="item" /> dentro del intervalo de elementos de la lista inmutable que contiene el número de elementos de <paramref name="count" /> y termina en <paramref name="index" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Busca el objeto especificado y devuelve el índice de base cero de la última aparición dentro del intervalo de elementos de la lista inmutable que contiene el número de elementos especificado y termina en el índice determinado.</summary>
      <param name="item">Objeto que se va a buscar en la lista inmutable. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <param name="startIndex">Índice inicial de base cero de la búsqueda. 0 (cero) es válido en una lista vacía.</param>
      <param name="count">Número de elementos que se van a buscar.</param>
      <param name="equalityComparer">Comparador de valores que se utilizará para comparar la igualdad de elementos.</param>
      <returns>Índice de base cero de la primera aparición del elemento dentro del intervalo de elementos de la lista inmutable que comienza en <paramref name="index" /> y contiene el número de elementos de <paramref name="count" />, si se encuentra; en caso contrario, -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Remove(`0)">
      <summary>Quita la primera repetición de un objeto específico de la lista inmutable.</summary>
      <param name="item">Objeto que se va a quitar de la lista.</param>
      <returns>
        <see langword="true" /> si el elemento se ha quitado correctamente de la lista; de lo contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra el elemento en la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAll(System.Predicate{`0})">
      <summary>Quita todos los elementos que cumplen las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones de los elementos que se van a quitar.</param>
      <returns>Número de elementos que se han quitado de la lista inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Quita el elemento del índice especificado de la lista inmutable.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar de la lista.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Invierte el orden de los elementos de la lista inmutable completa.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Invierte el orden de los elementos del intervalo especificado de la lista inmutable.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a invertir.</param>
      <param name="count">Número de elementos del intervalo que se va a invertir.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Ordena los elementos de toda la lista inmutable utilizando el comparador predeterminado.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Ordena los elementos de la lista inmutable completa usando el comparador especificado.</summary>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Comparison{`0})">
      <summary>Ordena los elementos de la lista inmutable completa usando el objeto de comparación especificado.</summary>
      <param name="comparison">Objeto ue se va a utilizar al comparar elementos.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Ordena los elementos en un intervalo de elementos de la lista inmutable usando el comparador especificado.</summary>
      <param name="index">Índice inicial de base cero del intervalo que se va a ordenar.</param>
      <param name="count">Longitud del intervalo que se va a ordenar.</param>
      <param name="comparer">Implementación que se va a utilizar al comparar elementos, o <see langword="null" /> para utilizar el comparador predeterminado (<see cref="P:System.Collections.Generic.Comparer`1.Default" />).</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos de la lista en una matriz, a partir de un índice de matriz determinado.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde la lista. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento a la lista.</summary>
      <param name="value">Objeto que se va a agregar a la lista.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>Posición en la que se insertó el elemento nuevo, o -1 para indicar que el elemento no se insertó en la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Clear">
      <summary>Quita todos los elementos de la lista.</summary>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si la lista contiene un valor específico.</summary>
      <param name="value">Objeto que se va a buscar en la lista.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>
        <see langword="true" /> si <see cref="T:System.Object" /> se encuentra en la lista; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico de la lista.</summary>
      <param name="value">Objeto que se va a buscar en la lista.</param>
      <exception cref="T:System.NotImplementedException" />
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en la lista del índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto que se va a insertar en la lista.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico de la lista.</summary>
      <param name="value">Objeto que se va a quitar de la lista.</param>
      <exception cref="T:System.NotImplementedException" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Crea una lista inmutable basada en el contenido de esta instancia.</summary>
      <returns>Lista inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.TrueForAll(System.Predicate{`0})">
      <summary>Determina si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado.</summary>
      <param name="match">Delegado que define las condiciones que los elementos deben cumplir.</param>
      <returns>
        <see langword="true" /> si cada elemento de la lista inmutable cumple las condiciones definidas por el predicado especificado; en caso contrario, es <see langword="false" />. Si la lista no tiene ningún elemento, el valor devuelto es <see langword="true" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Obtiene el número de elementos de esta lista inmutable.</summary>
      <returns>Número de elementos de esta lista.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Obtiene o establece el valor de un índice determinado de la lista.</summary>
      <param name="index">Índice del elemento que se va a obtener o establecer.</param>
      <returns>Valor en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>
        <see langword="true" /> si la <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index">Índice.</param>
      <returns>Objeto en el índice especificado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Enumera el contenido de un árbol binario.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Desplaza la enumeración al siguiente elemento de la lista inmutable.</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la lista.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento de la lista inmutable).</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns>Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Elemento actual.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableQueue`1" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Crea una cola inmutable vacía.</summary>
      <typeparam name="T">Tipo de elementos que se almacenará en la cola inmutable.</typeparam>
      <returns>Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Crea una nueva cola inmutable que contiene el elemento especificado.</summary>
      <param name="item">Elemento con el que rellenar la cola.</param>
      <typeparam name="T">Tipo de elementos de la cola inmutable.</typeparam>
      <returns>Nueva cola inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Crea una nueva cola que contiene la matriz especificada de elementos.</summary>
      <param name="items">Matriz que contiene los elementos con los que rellenar la cola.</param>
      <typeparam name="T">Tipo de elementos de la cola inmutable.</typeparam>
      <returns>Nueva cola inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nueva cola inmutable que contiene los elementos especificados.</summary>
      <param name="items">Elementos a agregar a la cola antes de que se aplique la inmutabilidad.</param>
      <typeparam name="T">Tipo de elementos en la cola.</typeparam>
      <returns>Cola inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="queue">Cola de la que quitar el elemento.</param>
      <param name="value">Cuando este método vuelve, contiene el elemento desde el principio de la cola.</param>
      <typeparam name="T">Tipo de elementos de la cola inmutable.</typeparam>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>La nueva cola con el elemento quitado.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Representa una cola inmutable.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elementos en la cola.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Elimina todos los objetos de la cola inmutable.</summary>
      <returns>Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <exception cref="T:System.InvalidOperationException">La cola está vacía.</exception>
      <returns>La nueva cola inmutable; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value">Cuando este método vuelve, contiene el elemento desde el principio de la cola.</param>
      <exception cref="T:System.InvalidOperationException">La cola está vacía.</exception>
      <returns>Nueva cola inmutable sin el elemento inicial.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Agrega un elemento situado al final de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value">Elemento que se va a agregar.</param>
      <returns>Nueva cola inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la cola inmutable.</summary>
      <returns>Un enumerador que se puede usar para recorrer en iteración la cola.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Devuelve el elemento situado al principio de la cola inmutable sin eliminarlo.</summary>
      <exception cref="T:System.InvalidOperationException">La cola está vacía.</exception>
      <returns>Elemento situado al principio de la cola.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.PeekRef">
      <summary>Obtiene una referencia de solo lectura al elemento del conjunto en la parte delantera de la cola.</summary>
      <exception cref="T:System.InvalidOperationException">La cola está vacía.</exception>
      <returns>Referencia de solo lectura al elemento del conjunto en la parte delantera de la cola.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Clear">
      <summary>Elimina todos los elementos de la cola inmutable.</summary>
      <returns>Cola inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Dequeue">
      <summary>Quita el elemento situado al principio de la cola inmutable y devuelve la nueva cola.</summary>
      <exception cref="T:System.InvalidOperationException">Se produce cuando la cola está vacía.</exception>
      <returns>La nueva cola inmutable; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.System#Collections#Immutable#IImmutableQueue{T}#Enqueue(`0)">
      <summary>Agrega un elemento situado al final de la cola inmutable y devuelve la nueva cola.</summary>
      <param name="value">Elemento que se va a agregar.</param>
      <returns>Nueva cola inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Obtiene una cola inmutable vacía.</summary>
      <returns>Cola inmutable vacía.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Obtiene un valor que indica si esta cola inmutable está vacía.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <returns>
        <see langword="true" /> si la cola está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Enumera el contenido de una cola inmutable sin asignar memoria.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la cola inmutable.</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la cola.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns>Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Crea un diccionario ordenado inmutable vacío.</summary>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Crea un diccionario ordenado inmutable vacío que usa el comparador de claves especificado.</summary>
      <param name="keyComparer">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un diccionario ordenado inmutable vacío que usa los comparadores de claves y valores especificado.</summary>
      <param name="keyComparer">Implementación a utilizar para determinar la igualdad de claves en el diccionario.</param>
      <param name="valueComparer">Implementación a utilizar para determinar la igualdad de valores en el diccionario.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Crea un nuevo generador de diccionarios ordenados inmutables.</summary>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Crea un nuevo generador de diccionarios ordenados inmutables.</summary>
      <param name="keyComparer">Comparador de claves.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Crea un nuevo generador de diccionarios ordenados inmutables.</summary>
      <param name="keyComparer">Comparador de claves.</param>
      <param name="valueComparer">Comparador de claves.</param>
      <typeparam name="TKey">Tipo de claves almacenadas por el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores almacenados por el diccionario.</typeparam>
      <returns>Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuevo diccionario ordenado inmutable desde el intervalo especificado de elementos con el comparador de claves especificado.</summary>
      <param name="keyComparer">Implementación de comparador que se va a utilizar para evaluar las claves para la igualdad y la ordenación.</param>
      <param name="items">Elementos a agregar al diccionario ordenado.</param>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <returns>El nuevo diccionario ordenado inmutable que contiene los elementos especificados y usa el comparador de claves especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un nuevo diccionario ordenado inmutable desde el intervalo especificado de elementos con el comparador de claves y valores especificado.</summary>
      <param name="keyComparer">Implementación de comparador que se va a utilizar para comparar las claves para la igualdad y la ordenación.</param>
      <param name="valueComparer">Implementación de comparador que se va a utilizar para comparar los valores para la igualdad y la ordenación.</param>
      <param name="items">Elementos que se van a agregar al diccionario ordenado antes de que se convierta en inmutable.</param>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los elementos especificados y usa los comparadores especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Crea un diccionario ordenado inmutable que contiene los elementos especificados y usa el comparador especificado.</summary>
      <param name="items">Elementos que se van a agregar al diccionario ordenado antes de que se convierta en inmutable.</param>
      <typeparam name="TKey">Tipo de claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores del diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumera una secuencia de pares de clave/valor y genera un diccionario ordenado inmutable de su contenido.</summary>
      <param name="source">Secuencia de pares clave-valor a enumerar.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Enumera una secuencia de pares de clave-valor y genera un diccionario inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumera una secuencia de pares de clave-valor y genera un diccionario ordenado inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source">Secuencia de pares clave-valor a enumerar.</param>
      <param name="keyComparer">Comparador de claves a utilizar al crear el diccionario inmutable.</param>
      <param name="valueComparer">Comparador de valor que se usará para el diccionario inmutable.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los pares clave-valor en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Immutable.ImmutableSortedDictionary{``0,``1}.Builder)">
      <summary>Crea un diccionario ordenado inmutable a partir del contenido actual del diccionario del generador.</summary>
      <param name="builder">Generador desde el que se va a crear el diccionario ordenado inmutable.</param>
      <typeparam name="TKey">Tipo de las claves del diccionario.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario.</typeparam>
      <returns>Diccionario ordenado inmutable que incluye el contenido actual del diccionario del generador.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumera y transforma una secuencia y genera un diccionario ordenado inmutable de su contenido.</summary>
      <param name="source">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario resultante.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Enumera y transforma una secuencia y genera un diccionario ordenado inmutable de su contenido mediante el comparador de claves especificado.</summary>
      <param name="source">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer">Comparador de claves que se utilizará para el diccionario.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario resultante.</typeparam>
      <returns>Diccionario inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumera y transforma una secuencia y genera un diccionario ordenador inmutable de su contenido mediante el comparador de claves y valores especificado.</summary>
      <param name="source">Secuencia a enumerar para generar el diccionario.</param>
      <param name="keySelector">Función que generará la clave del diccionario desde cada elemento de la secuencia.</param>
      <param name="elementSelector">Función que generará el valor del diccionario desde cada elemento de la secuencia.</param>
      <param name="keyComparer">Comparador de claves que se utilizará para el diccionario.</param>
      <param name="valueComparer">Comparador de valor que se usará para el diccionario.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <typeparam name="TKey">Tipo de las claves del diccionario resultante.</typeparam>
      <typeparam name="TValue">Tipo de los valores del diccionario resultante.</typeparam>
      <returns>Diccionario ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Representa un diccionario ordenado inmutable.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey">Tipo de claves contenidas en el diccionario.</typeparam>
      <typeparam name="TValue">Tipo de valores contenidos en el diccionario.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Obtiene un diccionario ordenado inmutable vacío.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor especificados en el diccionario ordenado inmutable.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de la entrada que se va a agregar.</param>
      <exception cref="T:System.ArgumentException">La clave especificada ya existe en el diccionario, pero tiene un valor diferente.</exception>
      <returns>Nuevo diccionario ordenado inmutable que contiene el par de clave-valor adicional.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Agrega los pares clave-valor específicos al diccionario ordenado inmutable.</summary>
      <param name="items">Pares clave-valor que se va a agregar.</param>
      <exception cref="T:System.ArgumentException">Una de las claves especificadas ya existe en el diccionario, pero tiene un valor diferente.</exception>
      <returns>Nuevo diccionario inmutable que contiene los pares clave-valor adicionales.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Recupera un diccionario ordenado inmutable vacío que tiene el mismo orden y reglas de comparación de clave-valor que esta instancia del diccionario.</summary>
      <returns>Diccionario vacío con orden y reglas de comparación de clave y valor equivalentes.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si el diccionario ordenado inmutable contiene el par de clave-valor especificado.</summary>
      <param name="pair">Par clave-valor que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el par clave-valor especificado se encuentra en el diccionario; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Determina si este mapa ordenado inmutable contiene la clave especificada.</summary>
      <param name="key">Clave que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el diccionario inmutable contiene la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Determina si el diccionario ordenado inmutable contiene un elemento con el valor especificado.</summary>
      <param name="value">Valor que se va a buscar. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con el valor especificado; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el diccionario ordenado inmutable.</summary>
      <returns>Enumerador que puede usarse para recorrer en iteración el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Quita el elemento con el valor especificado del diccionario ordenado inmutable.</summary>
      <param name="value">Valor del elemento que se va a quitar.</param>
      <returns>Un nuevo diccionario inmutable con el elemento especificado eliminado; o bien esta instancia si no se encuentra el valor especificado en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita los elementos con la clave especificada del diccionario ordenado inmutable.</summary>
      <param name="keys">Claves de los elementos que se van a quitar.</param>
      <returns>Nuevo diccionario inmutable con las claves especificadas eliminados; o bien esta instancia si no se encuentran en el diccionario las claves especificadas.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Establece la clave y valor especificados en el diccionario ordenado inmutable, posiblemente sobrescribiendo un valor existente de la clave facilitada.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de clave que se va a establecer.</param>
      <returns>Nuevo diccionario ordenado inmutable que contiene el par de clave-valor especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Establece los pares de clave-valor especificados en el diccionario ordenado inmutable, posiblemente sobrescribiendo valores existentes de las claves.</summary>
      <param name="items">Pares de clave-valor que se van a establecer en el diccionario. Si ya existe alguna de las claves en el diccionario, este método sobrescribirá los valores anteriores.</param>
      <returns>Diccionario inmutable que contiene pares de clave-valor especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Agrega un elemento a <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objeto que se va a agregar a <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <summary>Quita todos los elementos de <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Copia los elementos de <see cref="T:System.Collections.Generic.ICollection`1" /> en <see cref="T:System.Array" />, empezando por un índice determinado de <see cref="T:System.Array" />.</summary>
      <param name="array">
        <see cref="T:System.Array" /> unidimensional que constituye el destino de los elementos copiados de <see cref="T:System.Collections.Generic.ICollection`1" />. La matriz <see cref="T:System.Array" /> debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Quita la primera aparición de un objeto específico de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">Objeto que se va a quitar de <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>Es <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si no se encuentra <paramref name="item" /> en la <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al diccionario genérico.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Ya existe un elemento con la misma clave en <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary>Quita el elemento con la clave especificada del diccionario genérico.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.IDictionary`2" /> es de solo lectura.</exception>
      <returns>Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />.  Este método también devuelve <see langword="false" /> si <paramref name="key" /> no se encontró en el diccionario genérico original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz, empezando por un índice de matriz concreto.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al objeto del diccionario.</summary>
      <param name="key">Objeto que se va a utilizar como clave del elemento que se va a agregar.</param>
      <param name="value">El objeto que se va a usar como valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Clear">
      <summary>Borra esta instancia.</summary>
      <exception cref="T:System.NotSupportedException">El objeto de diccionario es de solo lectura.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si el objeto de diccionario inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se debe buscar en el objeto del diccionario.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el objeto de diccionario inmutable.</summary>
      <returns>Objeto de enumerador para el objeto de diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada del objeto de diccionario inmutable.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Add(`0,`1)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key">Clave de la entrada que se va a agregar.</param>
      <param name="value">Valor de la entrada que se va a agregar.</param>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="pairs">Secuencia de pares clave-valor que se van a agregar.</param>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Clear">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#Remove(`0)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key">Clave de la entrada que se va a quitar.</param>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="keys">Secuencia de claves que se van a quitar.</param>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItem(`0,`1)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</summary>
      <param name="key">Clave de la entrada que se va a actualizar.</param>
      <param name="value">Valor de la entrada que se va a actualizar.</param>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Immutable#IImmutableDictionary{TKey@TValue}#SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Aplica un conjunto determinado de pares clave-valor a un diccionario inmutable, reemplazando cualquier clave en conflicto en el diccionario resultante.</summary>
      <param name="items">Un conjunto de pares clave-valor que se establecerán en el mapa.</param>
      <returns>Instancia de <see cref="T:System.Collections.Immutable.IImmutableDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Crea un diccionario ordenado inmutable con el mismo contenido que este diccionario que puede transformarse eficazmente en varias operaciones mediante interfaces mutables estándar.</summary>
      <returns>Colección con el mismo contenido que este diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey">Clave que se va a buscar.</param>
      <param name="actualKey">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns>
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key">Clave cuyo valor se va a recuperar.</param>
      <param name="value">Si se encuentra la clave, cuando este método devuelve un resultado, contiene el valor asociado a la clave especificada; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueRef(`0)">
      <summary>Devuelve una referencia de solo lectura al valor asociado con el elemento <paramref name="key" /> proporcionado.</summary>
      <param name="key">Clave de la entrada que se va a buscar.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">El elemento <paramref name="key" /> no está presente.</exception>
      <returns>Referencia de solo lectura al valor asociado con el elemento <paramref name="key" /> proporcionado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Obtiene una instancia del diccionario ordenado inmutable que usa los comparadores de claves especificados.</summary>
      <param name="keyComparer">Comparador de claves a utilizar.</param>
      <returns>Instancia del diccionario inmutable que usa el comparador especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Obtiene una instancia del diccionario ordenado inmutable que usa los comparadores de claves y valores especificados.</summary>
      <param name="keyComparer">Comparador de claves a utilizar.</param>
      <param name="valueComparer">Comparador de claves a utilizar.</param>
      <returns>Instancia del diccionario inmutable que usa los comparadores especificados.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Obtiene el número de pares de clave-valor incluido en el diccionario ordenado inmutable.</summary>
      <returns>Número de pares de clave-valor del diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Obtiene un valor que indica si esta instancia del dicionario ordenado inmutable está vacía.</summary>
      <returns>
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Obtiene el <paramref name="TValue" /> asociado con la clave especificada.</summary>
      <param name="key">Clave de la que se debe recuperar el valor.</param>
      <returns>Valor asociado a la clave especificada. Si no se encuentra ningún resultado, la operación produce una excepción.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Obtiene el comparador de claves del diccionario ordenado inmutable.</summary>
      <returns>Comparador de claves para el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Obtiene las claves del diccionario ordenado inmutable.</summary>
      <returns>Claves del diccionario inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Item(`0)">
      <summary>Obtiene o establece la clase <typeparamref name="TValue" /> con la clave especificada.</summary>
      <param name="key">Objeto que se va a usar como clave del elemento al que se va a acceder.</param>
      <returns>Objeto de tipo <typeparamref name="TValue" /> asociado a <paramref name="key" /> .</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Obtiene las claves.</summary>
      <returns>Colección que contiene las claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Obtiene los valores.</summary>
      <returns>Colección que contiene los valores de.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a la interfaz <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>
        <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (seguro para subprocesos); en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">La clave del elemento al que se tendrá acceso.</param>
      <returns>Valor almacenado en la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Obtiene el comparador de valor que se utiliza para determinar si los valores son iguales.</summary>
      <returns>Comparador de valor que se utiliza para determinar si los valores son iguales.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Obtiene los valores del diccionario ordenado inmutable.</summary>
      <returns>Valores del diccionario.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Representa un diccionario ordenado que se transforma con poca o ninguna asignación de memoria y que puede generar o compilar instancias de diccionario ordenado inmutable muy eficazmente.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(`0,`1)">
      <summary>Agrega un elemento que dispone de la clave y el valor especificados al diccionario ordenado inmutable.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Agrega el elemento especificado al diccionario ordenado inmutable.</summary>
      <param name="item">Objeto que se agrega al diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Agrega una secuencia de valores al diccionario ordenado inmutable.</summary>
      <param name="items">Elementos que se agregarán al diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Elimina todos los elementos del diccionario ordenado inmutable.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determina si el diccionario ordenado inmutable contiene un valor específico.</summary>
      <param name="item">Objeto que se va a buscar en el diccionario.</param>
      <returns>
        <see langword="true" /> si el objeto <paramref name="item" /> está en el diccionario; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsKey(`0)">
      <summary>Determina si el diccionario ordenado inmutable contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se debe buscar en el diccionario.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ContainsValue(`1)">
      <summary>Determina si el diccionario ordenado inmutable contiene un elemento con el valor especificado.</summary>
      <param name="value">Valor que se va a buscar en el diccionario. El valor puede ser <see langword="null" /> para los tipos de referencia.</param>
      <returns>
        <see langword="true" /> si el diccionario ordenado inmutable contiene un elemento con el valor especificado; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el diccionario ordenado inmutable.</summary>
      <returns>Enumerador que puede usarse para recorrer en iteración el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0)">
      <summary>Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario; de lo contrario, obtiene el valor predeterminado.</summary>
      <param name="key">Clave que se va a buscar.</param>
      <returns>Valor de la clave o <c>default(TValue)</c> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetValueOrDefault(`0,`1)">
      <summary>Obtiene el valor de una clave determinada si existe una clave coincidente en el diccionario; de lo contrario, obtiene el valor predeterminado.</summary>
      <param name="key">Clave que se va a buscar.</param>
      <param name="defaultValue">Valor predeterminado para devolver si no se detecta ninguna clave coincidente en el diccionario.</param>
      <returns>El valor de la clave, o <paramref name="defaultValue" /> si no se ha encontrado ninguna clave coincidente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(`0)">
      <summary>Quita el elemento con la clave especificada del diccionario ordenado inmutable.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
      <returns>Es <see langword="true" /> si el elemento se quita correctamente; en caso contrario, es <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="key" /> no se encontró en el diccionario original.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Quita la primera repetición de un objeto específico del diccionario ordenado inmutable.</summary>
      <param name="item">Objeto que se va a quitar del diccionario.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se ha quitado correctamente de ; en caso contrario, <see langword="false" />. Este método también devuelve <see langword="false" /> si <paramref name="item" /> no se encuentra en el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita todas las entradas con claves que coinciden con las que se encuentran en la secuencia especificada del diccionario ordenado inmutable.</summary>
      <param name="keys">Claves para las entradas que se quitarán del diccionario.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>Consulta <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>Consulta <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del diccionario en una matriz, empezando por un índice de matriz concreto.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el diccionario. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>Agrega un elemento con la clave y el valor proporcionados al objeto del diccionario.</summary>
      <param name="key">Clave del elemento que se va a agregar.</param>
      <param name="value">Valor del elemento que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>Determina si el objeto del diccionario contiene un elemento con la clave especificada.</summary>
      <param name="key">Clave que se va a localizar.</param>
      <returns>
        <see langword="true" /> si el diccionario contiene un elemento con la clave; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#GetEnumerator">
      <summary>Devuelve un objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</summary>
      <returns>Objeto <see cref="T:System.Collections.IDictionaryEnumerator" /> para el diccionario.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>Quita el elemento con la clave especificada del diccionario.</summary>
      <param name="key">Clave del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Crea un diccionario ordenado inmutable basado en el contenido de esta instancia.</summary>
      <returns>Diccionario ordenado inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetKey(`0,`0@)">
      <summary>Determina si el diccionario contiene una clave específica.</summary>
      <param name="equalKey">Clave que se va a buscar.</param>
      <param name="actualKey">Clave correspondiente ubicada en el diccionario si se encuentra, o <c>equalkey</c> si no se encuentra ninguna coincidencia.</param>
      <returns>
        <see langword="true" /> si se encuentra una coincidencia para <paramref name="equalKey" />; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.TryGetValue(`0,`1@)">
      <summary>Obtiene el valor asociado a la clave especificada.</summary>
      <param name="key">Clave cuyo valor se va a recuperar.</param>
      <param name="value">Si se encuentra la clave, cuando este método devuelve un resultado, contiene el valor asociado a la clave especificada; en caso contrario, contiene el valor predeterminado para el tipo del parámetro <paramref name="value" />. Este parámetro se pasa sin inicializar.</param>
      <returns>
        <see langword="true" /> si el objeto que implementa el diccionario contiene un elemento con la clave especificada; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueRef(`0)">
      <summary>Devuelve una referencia de solo lectura al valor asociado con el elemento <paramref name="key" /> proporcionado.</summary>
      <param name="key">Clave de la entrada que se va a buscar.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">El elemento <paramref name="key" /> no está presente.</exception>
      <returns>Referencia de solo lectura al valor asociado con el elemento <paramref name="key" /> proporcionado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Obtiene el número de elementos de este diccionario ordenado inmutable.</summary>
      <returns>Número de elementos de este diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Item(`0)">
      <summary>Obtiene o establece el valor de una clave especificada en el diccionario ordenado inmutable.</summary>
      <param name="key">Clave de la que se debe recuperar el valor.</param>
      <returns>Valor asociado a la clave facilitada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Obtiene o establece el comparador de claves.</summary>
      <returns>Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Obtiene una colección fuertemente tipada, de sólo lectura de elementos.</summary>
      <returns>Colección de elementos fuertemente tipada y de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Devuelve una colección que contiene todas las claves almacenadas en el diccionario. Consulta <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Colección que contiene todas las claves almacenadas en el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Devuelve una colección que contiene todos los valores almacenados en el diccionario. Consulta <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>Colección que contiene todos los valores almacenados en el diccionario.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>Es <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos); de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si el objeto <see cref="T:System.Collections.IDictionary" /> tiene un tamaño fijo; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Item(System.Object)">
      <summary>Obtiene o establece el elemento con la clave especificada.</summary>
      <param name="key">Clave.</param>
      <returns>Valor asociado a la clave especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Keys">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene las claves del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.System#Collections#IDictionary#Values">
      <summary>Obtiene una interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores de la interfaz <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.ICollection`1" /> que contiene los valores del objeto que implementa el <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Obtiene o establece el comparador de valores.</summary>
      <returns>Comparador de claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Obtiene una colección que contiene los valores del diccionario ordenado inmutable.</summary>
      <returns>Colección que contiene los valores del objeto que implementa el diccionario.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Enumera el contenido de un árbol binario.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="TKey" />
      <typeparam name="TValue" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator" />.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento del diccionario ordenado inmutable.</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del diccionario ordenado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento del diccionario ordenado inmutable).</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns>Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Elemento actual.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Crea un nuevo conjunto ordenado inmutable vacío.</summary>
      <typeparam name="T">Tipo de elementos que se almacenará en el conjunto inmutable.</typeparam>
      <returns>Conjunto ordenado inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Crea un nuevo conjunto ordenado inmutable que contiene el elemento especificado.</summary>
      <param name="item">Elemento con el que rellenar el conjunto.</param>
      <typeparam name="T">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns>Nuevo conjunto inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Crea un nuevo conjunto ordenado inmutable que contiene la matriz especificada de elementos.</summary>
      <param name="items">Matriz que contiene los elementos con los que rellenar el conjunto.</param>
      <typeparam name="T">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns>Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Crea un conjunto ordenado inmutable vacío que usa el comparador especificado.</summary>
      <param name="comparer">Implementación que se va a usar al comparar los elementos del conjunto.</param>
      <typeparam name="T">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns>Conjunto inmutable vacío.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Crea un nuevo conjunto ordenado inmutable que contiene el elemento especificado y usa el comparador especificado.</summary>
      <param name="comparer">Implementación que se va a usar al comparar los elementos del conjunto.</param>
      <param name="item">Elemento con el que rellenar el conjunto.</param>
      <typeparam name="T">Tipo de elementos almacenado en el conjunto inmutable.</typeparam>
      <returns>Nuevo conjunto inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Crea un nuevo conjunto ordenado inmutable que contiene la matriz especificada de elementos y usa el comparador especificado.</summary>
      <param name="comparer">Implementación que se va a usar al comparar los elementos del conjunto.</param>
      <param name="items">Matriz que contiene los elementos con los que rellenar el conjunto.</param>
      <typeparam name="T">Tipo de elementos del conjunto inmutable.</typeparam>
      <returns>Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Devuelve una colección que puede utilizarse para crear un conjunto ordenado inmutable.</summary>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Generador de colecciones inmutables.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Devuelve una colección que puede utilizarse para crear un conjunto ordenado inmutable.</summary>
      <param name="comparer">Comparador que se utiliza para comparar elementos del conjunto en cuanto a igualdad.</param>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Colección inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nueva colección inmutable que contiene los elementos especificados.</summary>
      <param name="comparer">Comparador que se va a utilizar para comparar elementos de este conjunto.</param>
      <param name="items">Elementos que se van a agregar al conjunto antes de que se convierta en inmutable.</param>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nueva colección inmutable que contiene los elementos especificados.</summary>
      <param name="items">Elementos que se van a agregar al conjunto antes de que se convierta en inmutable.</param>
      <typeparam name="T">Tipo de elementos ordenados por colección.</typeparam>
      <returns>Nuevo conjunto inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumera una secuencia y genera un conjunto ordenado inmutable de su contenido.</summary>
      <param name="source">Secuencia que se va a enumerar.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <returns>Conjunto ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Enumera una secuencia, genera un conjunto ordenado inmutable de su contenido y usa el comparador especificado.</summary>
      <param name="source">Secuencia que se va a enumerar.</param>
      <param name="comparer">Comparador que se va a utilizar para inicializar y agregar miembros al conjunto ordenado.</param>
      <typeparam name="TSource">Tipo de los elementos de la secuencia.</typeparam>
      <returns>Conjunto ordenado inmutable que contiene los elementos en la secuencia especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Immutable.ImmutableSortedSet{``0}.Builder)">
      <summary>Crea un conjunto ordenado inmutable a partir del contenido del conjunto del generador.</summary>
      <param name="builder">Generador desde el que se va a crear el conjunto ordenado inmutable.</param>
      <typeparam name="TSource">Tipo de los elementos del conjunto ordenado inmutable.</typeparam>
      <returns>Conjunto ordenado inmutable que incluye el contenido actual del conjunto del generador.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Representa una implementación de un conjunto ordenado inmutable.

Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elementos del conjunto.</typeparam>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Obtiene un conjunto ordenado inmutable vacío.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Agrega el valor especificado a este conjunto ordenado inmutable.</summary>
      <param name="value">El valor que se va a agregar.</param>
      <returns>Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en este conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Elimina todos los elementos del conjunto ordenado inmutable.</summary>
      <returns>Conjunto vacío con los elementos eliminados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Determina si este conjunto ordenador inmutable contiene el valor especificado.</summary>
      <param name="value">Valor que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si el conjunto contiene el valor especificado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita un conjunto especificado de elementos de este conjunto ordenado inmutable.</summary>
      <param name="other">Elementos que se van a quitar de este conjunto.</param>
      <returns>Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración el conjunto ordenado inmutable.</summary>
      <returns>Enumerador que se puede usar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Obtiene la posición dentro de este conjunto ordenado inmutable en el que aparece el valor especificado.</summary>
      <param name="item">Valor cuya posición se está buscando.</param>
      <returns>Índice del <paramref name="item" /> especificado en el conjunto ordenado, si se encuentra <paramref name="item" />. Si no se encuentra <paramref name="item" /> y es menor que uno o varios elementos de este conjunto, este método devuelve un número negativo que es el complemento bit a bit del índice del primer elemento que sea mayor que el valor. Si no se encuentra <paramref name="item" /> y es mayor que cualquiera de los elementos del conjunto, este método devuelve un número negativo que es el complemento bit a bit del índice del último elemento más 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto ordenado inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other">Conjunto que va a formar una intersección con este</param>
      <returns>Nuevo conjunto ordenado inmutable que incluye todos los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto ordenado inmutable actual es un subconjunto apropiado (estricto) de la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto ordenado inmutable actual es un supraconjunto apropiado de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto ordenado inmutable actual es un subconjunto apropiado de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ItemRef(System.Int32)">
      <summary>Obtiene una referencia de solo lectura del elemento del conjunto en el elemento <paramref name="index" /> especificado.</summary>
      <param name="index">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns>Referencia de solo lectura del elemento en la posición especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto ordenado inmutable actual y una colección especificada comparten elementos comunes.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Elimina el valor especificado de este conjunto ordenado inmutable.</summary>
      <param name="value">Elemento que se va a quitar.</param>
      <returns>Nuevo conjunto ordenado inmutable con el elemento eliminado, o este conjunto si el elemento no se encontró en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Devuelve un <see cref="T:System.Collections.Generic.IEnumerable`1" /> que itera este conjunto ordenado inmutable en orden inverso.</summary>
      <returns>Enumerador que itera el conjunto ordenado inmutable en orden inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto ordenado inmutable actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Es <see langword="true" /> si los conjuntos son iguales; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto ordenado inmutable que contiene elementos que existen en este conjunto o en una secuencia determinada, pero no en ambos.</summary>
      <param name="other">La otra secuencia de elementos.</param>
      <returns>Nuevo conjunto ordenado inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega el valor especificado a la colección.</summary>
      <param name="item">El valor que se va a agregar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Quita todos los elementos de la colección.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos de la colección en una matriz a partir de un índice de matriz concreto.</summary>
      <param name="array">Matriz unidimensional que es el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <summary>Quita la primera aparición de un objeto concreto de la colección.</summary>
      <param name="item">Objeto que se quitará de la colección.</param>
      <returns>Es <see langword="true" /> si <paramref name="item" /> se quitó correctamente de la colección; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
      <summary>Inserta un elemento en el conjunto del índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="item" />.</param>
      <param name="item">Objeto que se va a insertar en el conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Quita el elemento en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#Add(`0)">
      <summary>Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
      <returns>
        <see langword="false" /> si el elemento se ha agregado al conjunto; <see langword="true" /> si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto actual todos los elementos de la colección especificada.</summary>
      <param name="other">Colección de elementos que se van a quitar del conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ISet{T}#UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del conjunto en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="index">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto de enumerador que puede usarse para iterar por la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Add(System.Object)">
      <summary>Agrega un elemento al conjunto.</summary>
      <param name="value">Objeto que se va a agregar al conjunto.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
      <returns>La posición en la que se insertó el nuevo elemento o -1 para indicar que el elemento no se insertó en la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Clear">
      <summary>Quita todos los elementos del conjunto.</summary>
      <exception cref="T:System.NotSupportedException">Se produce en todos los casos.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Contains(System.Object)">
      <summary>Determina si el conjunto contiene un valor específico.</summary>
      <param name="value">Objeto que se va a ubicar en el conjunto.</param>
      <returns>
        <see langword="true" /> si el objeto se encuentra en el conjunto, de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determina el índice de un elemento específico del conjunto.</summary>
      <param name="value">Objeto que se va a ubicar en el conjunto.</param>
      <returns>Devuelve el índice de <paramref name="value" /> si se encuentra en la lista; de lo contrario, devuelve -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserta un elemento en el conjunto en el índice especificado.</summary>
      <param name="index">Índice basado en cero en el que debe insertarse <paramref name="value" />.</param>
      <param name="value">Objeto que se va a insertar en el conjunto.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Remove(System.Object)">
      <summary>Quita la primera aparición de un objeto específico del conjunto.</summary>
      <param name="value">Objeto que se va a quitar del conjunto.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Quita del conjunto el elemento situado en el índice especificado.</summary>
      <param name="index">Índice de base cero del elemento que se va a quitar.</param>
      <exception cref="T:System.NotSupportedException">El conjunto es de solo lectura o tiene un tamaño fijo.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Add(`0)">
      <summary>Agrega el elemento especificado a este conjunto inmutable.</summary>
      <param name="value">Elemento que se va a agregar.</param>
      <returns>Nuevo conjunto con el elemento agregado o este conjunto si el elemento ya está en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Clear">
      <summary>Recupera un conjunto inmutable vacío que tiene la misma ordenación y semántica de orden que esta instancia.</summary>
      <returns>Conjunto vacío que tiene la misma ordenación y semántica de orden que esta instancia.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita del conjunto inmutable actual los elementos de la colección especificada.</summary>
      <param name="other">Elementos que se van a quitar de este conjunto.</param>
      <returns>Nuevo conjunto con los elementos que se han quitado; o el conjunto original si no se encontraba ninguno de los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que contiene los elementos que existen en este conjunto y en el conjunto especificado.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Nuevo conjunto inmutable que contiene los elementos que existen en ambos conjuntos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Remove(`0)">
      <summary>Elimina el elemento especificado de este conjunto inmutable.</summary>
      <param name="value">Elemento que se va a quitar.</param>
      <returns>Nuevo conjunto con el elemento especificado eliminado o el conjunto actual si no se encuentra el elemento en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>Conjunto nuevo que únicamente contiene elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Immutable#IImmutableSet{T}#Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Crea un conjunto inmutable que contiene todos los elementos que están presentes en el conjunto actual o en la colección especificada.</summary>
      <param name="other">Colección de la que se van a agregar elementos.</param>
      <returns>Nuevo conjunto inmutable con los elementos agregados; o conjunto original si ya estaban todos los elementos en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Crea una colección que tiene el mismo contenido que este conjunto ordenado inmutable que puede manipularse eficazmente mediante interfaces estándar mutables.</summary>
      <returns>Generador de conjuntos ordenados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue">Valor que se va a buscar.</param>
      <param name="actualValue">Valor del conjunto encontrado por la búsqueda, o valor original si la búsqueda no produjo ninguna coincidencia.</param>
      <returns>Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Agrega un conjunto determinado de elementos a este conjunto ordenado inmutable.</summary>
      <param name="other">Los elementos que se van a agregar.</param>
      <returns>Nuevo conjunto con elementos agregados; o conjunto original si todos los elementos ya se encontraban en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Devuelve el conjunto ordenado inmutable que dispone del comparador de claves especificado.</summary>
      <param name="comparer">Comparador que se va buscar.</param>
      <returns>Conjunto ordenado inmutable que dispone del comparador de claves especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Obtiene el número de elementos contenido en el conjunto ordenado inmutable.</summary>
      <returns>Número de elementos contenido en el conjunto ordenado inmutable.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Obtiene un valor que indica si este conjunto ordenado inmutable está vacío.</summary>
      <returns>
        <see langword="true" /> si este conjunto está vacío; de lo contrario, será <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Obtiene el elemento del conjunto ordenado inmutable en el índice especificado.</summary>
      <param name="index">Índice del elemento a recuperar del conjunto ordenado.</param>
      <returns>Elemento del índice facilitado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Obtiene al comparador que se utiliza para ordenar claves en el conjunto ordenado inmutable.</summary>
      <returns>Comparador que se utiliza para ordenar claves.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Obtiene el valor máximo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns>Valor máximo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Obtiene el valor mínimo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns>Valor mínimo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Devuelve true, ya que las colecciones inmutables siempre son de solo lectura. Vea la interfaz <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>Valor booleano que indica si la colección es de solo lectura.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Vea la interfaz <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="index">Índice de base cero del elemento al que se va a acceder.</param>
      <returns>Elemento almacenado en el índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>Devuelve true, ya que las colecciones inmutables siempre son seguras para subprocesos. Vea la interfaz <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Valor booleano que indica si la colección es segura para subprocesos.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>Vea <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Objeto que se usa para sincronizar el acceso a la colección.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsFixedSize">
      <summary>Obtiene un valor que indica si el objeto <see cref="T:System.Collections.IList" /> tiene un tamaño fijo.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.IList" /> tiene un tamaño fijo; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#IsReadOnly">
      <summary>Obtiene un valor que indica si <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura.</summary>
      <returns>Es <see langword="true" /> si la interfaz <see cref="T:System.Collections.Generic.ICollection`1" /> es de solo lectura; de lo contrario, es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.System#Collections#IList#Item(System.Int32)">
      <summary>Obtiene o establece la clase <see cref="T:System.Object" /> en el índice especificado.</summary>
      <param name="index">Índice.</param>
      <exception cref="T:System.NotSupportedException" />
      <returns>
        <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Representa un conjunto ordenado que permite cambios con poca o ninguna asignación de memoria y manipula o crea eficazmente conjuntos ordenados inmutables.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Add(`0)">
      <summary>Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
      <returns>
        <see langword="true" /> si el elemento se ha agregado al conjunto; <see langword="false" /> si el elemento ya está en el conjunto</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Quita todos los elementos de este conjunto.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Contains(`0)">
      <summary>Determina si el conjunto contiene el objeto especificado.</summary>
      <param name="item">Objeto que se va a ubicar en el conjunto.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se encuentra en el conjunto; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Quita el conjunto especificado de elementos del conjunto actual.</summary>
      <param name="other">Colección de elementos que se van a quitar del conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Devuelve un enumerador que itera por el conjunto.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que solo contenga elementos que también estén en una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto apropiado (estricto) de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto apropiado de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un subconjunto de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un subconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual es un supraconjunto de una colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es un supraconjunto de <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ItemRef(System.Int32)">
      <summary>Obtiene una referencia de solo lectura al elemento del conjunto en el elemento <paramref name="index" /> especificado.</summary>
      <param name="index">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns>Referencia de solo lectura al elemento en la posición especificada.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual se superpone a la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual y <paramref name="other" /> comparten al menos un elemento común; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Remove(`0)">
      <summary>Quita la primera aparición del objeto especificado del conjunto.</summary>
      <param name="item">Objeto que se va a quitar del conjunto.</param>
      <returns>
        <see langword="true" /> si <paramref name="item" /> se ha quitado del conjunto; <see langword="false" /> si <paramref name="item" /> no se encontró en el conjunto.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Devuelve un enumerador que recorre en iteración el conjunto ordenado inmutable en orden inverso.</summary>
      <returns>Enumerador que recorre en iteración el conjunto en orden inverso.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determina si el conjunto actual y la colección especificada contienen los mismos elementos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
      <returns>
        <see langword="true" /> si el conjunto actual es igual a <paramref name="other" />; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que únicamente contenga elementos que están presentes en el conjunto actual o en la colección especificada, pero no en ambos.</summary>
      <param name="other">Colección que se va a comparar con el conjunto actual.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Agrega un elemento al conjunto actual y devuelve un valor que indica si el elemento se ha agregado correctamente.</summary>
      <param name="item">Elemento que se va a agregar al conjunto.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <summary>Copia los elementos de la colección en una matriz a partir de un índice de matriz concreto.</summary>
      <param name="array">Matriz unidimensional que es el destino de los elementos copiados de la colección. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copia los elementos del conjunto en una matriz, comenzando en un índice concreto de la matriz.</summary>
      <param name="array">Matriz unidimensional que constituye el destino de los elementos copiados desde el conjunto. La matriz debe tener una indización de base cero.</param>
      <param name="arrayIndex">Índice de base cero en la <paramref name="array" /> donde comienza la copia.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Crea un conjunto ordenado inmutable basado en el contenido de esta instancia.</summary>
      <returns>Conjunto inmutable.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.TryGetValue(`0,`0@)">
      <summary>Busca en el conjunto un valor determinado y devuelve un valor igual al que encuentra, si encuentra alguno.</summary>
      <param name="equalValue">Valor que se va a buscar.</param>
      <param name="actualValue">Valor del conjunto encontrado por la búsqueda, o valor original si la búsqueda no produjo ninguna coincidencia.</param>
      <returns>Valor que indica si la búsqueda se ha realizado correctamente.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifica el conjunto actual para que contenga todos los elementos que están presentes en el conjunto actual en la colección especificada.</summary>
      <param name="other">Colección que se va a comparar con el estado actual.</param>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Obtiene el número de elementos contenido en el conjunto ordenado inmutable.</summary>
      <returns>Número de elementos del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Obtiene el elemento del conjunto en el índice especificado.</summary>
      <param name="index">Índice de base 0 del elemento en el conjunto que se va a devolver.</param>
      <returns>Elemento situado en la posición especificada.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Obtiene o establece el objeto que se utiliza para determinar la igualdad de los valores del conjunto ordenado inmutable.</summary>
      <returns>Comparador que se usa para determinar la igualdad de los valores del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Obtiene el valor máximo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns>Valor máximo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Obtiene el valor mínimo del conjunto ordenado inmutable, tal y como define el comparador.</summary>
      <returns>Valor mínimo del conjunto.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Obtiene un valor que indica si esta instancia es de solo lectura.</summary>
      <returns>Siempre es <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#IsSynchronized">
      <summary>Obtiene un valor que indica si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (es seguro para subprocesos).</summary>
      <returns>
        <see langword="true" /> si el acceso a <see cref="T:System.Collections.ICollection" /> está sincronizado (seguro para subprocesos); en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.System#Collections#ICollection#SyncRoot">
      <summary>Obtiene un objeto que se puede usar para sincronizar el acceso a <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>Un objeto que se puede usar para sincronizar el acceso a la clase <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Enumera el contenido de un árbol binario.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Libera los recursos utilizados por la instancia actual de la clase <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento del conjunto ordenado inmutable.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final del conjunto ordenado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Establece el enumerador en su posición inicial (antes del primer elemento del conjunto ordenado inmutable).  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <returns>Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Elemento actual.</summary>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Proporciona un conjunto de métodos de inicialización para las instancias de la clase <see cref="T:System.Collections.Immutable.ImmutableStack`1" />.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Crea una pila inmutable vacía.</summary>
      <typeparam name="T">Tipo de elementos que se almacenará en la pila inmutable.</typeparam>
      <returns>Pila inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Crea una nueva pila inmutable que contiene el elemento especificado.</summary>
      <param name="item">Elemento con el que rellenar la pila.</param>
      <typeparam name="T">Tipo de elementos de la pila inmutable.</typeparam>
      <returns>Nueva colección inmutable que contiene el elemento especificado.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Crea una nueva pila inmutable que contiene la matriz especificada de elementos.</summary>
      <param name="items">Matriz que contiene los elementos con los que rellenar la pila.</param>
      <typeparam name="T">Tipo de elementos de la pila inmutable.</typeparam>
      <returns>Nueva pila inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Crea una nueva pila inmutable que contiene los elementos especificados.</summary>
      <param name="items">Elementos que se van a agregar a la pila antes de que se convierta en inmutable.</param>
      <typeparam name="T">Tipo de elementos de la pila.</typeparam>
      <returns>Pila inmutable que contiene los elementos especificados.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Quita de la pila el elemento especificado.</summary>
      <param name="stack">Pila para modificar.</param>
      <param name="value">Elemento que se va a quitar de la pila.</param>
      <typeparam name="T">Tipo de elementos que se incluyen en la pila.</typeparam>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>Una pila; nunca <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Representa una pila inmutable.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T">Tipo de elemento de la pila.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Elimina todos los objetos de la pila inmutable.</summary>
      <returns>Pila inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración la pila inmutable.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la pila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Devuelve el objeto situado al principio de la pila sin eliminarlo.</summary>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>Objeto situado al principio de la pila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.PeekRef">
      <summary>Obtiene una referencia de solo lectura al elemento en la parte superior de la pila.</summary>
      <exception cref="T:System.InvalidOperationException">Se produce cuando la pila está vacía.</exception>
      <returns>Referencia de solo lectura al elemento en la parte superior de la pila.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Elimina el elemento de la parte superior de la pila inmutable y devuelve la pila después de la eliminación.</summary>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>Una pila; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Elimina el elemento especificado de la pila inmutable y devuelve la pila después de la eliminación.</summary>
      <param name="value">Valor que se va a quitar de la pila.</param>
      <returns>Una pila; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Inserta un objeto en la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <param name="value">Objeto que se va a insertar en la pila.</param>
      <returns>Pila nueva.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Devuelve un enumerador que procesa una iteración en la colección.</summary>
      <returns>Enumerador que se puede utilizar para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Devuelve un enumerador que recorre en iteración una colección.</summary>
      <returns>Objeto <see cref="T:System.Collections.IEnumerator" /> que puede usarse para recorrer en iteración la colección.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Clear">
      <summary>Elimina todos los elementos de la pila inmutable.</summary>
      <returns>Pila inmutable vacía.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Pop">
      <summary>Elimina el elemento de la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <exception cref="T:System.InvalidOperationException">La pila está vacía.</exception>
      <returns>Nueva pila; nunca <see langword="null" />.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.System#Collections#Immutable#IImmutableStack{T}#Push(`0)">
      <summary>Inserta un elemento en la parte superior de la pila inmutable y devuelve la nueva pila.</summary>
      <param name="value">Elemento a insertar en la pila.</param>
      <returns>Pila nueva.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Obtiene una pila inmutable vacía.</summary>
      <returns>Pila inmutable vacía.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Obtiene un valor que indica si esta instancia de la pila inmutable está vacía.</summary>
      <returns>
        <see langword="true" /> si esta instancia está vacía; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Enumera el contenido de una pila inmutable sin asignar memoria.  
  
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
      <typeparam name="T" />
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Desplaza el enumerador al siguiente elemento de la pila inmutable.</summary>
      <returns>Es <see langword="true" /> si el enumerador avanzó con éxito hasta el siguiente elemento; es <see langword="false" /> si el enumerador alcanzó el final de la pila.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Obtiene el elemento en la posición actual del enumerador.</summary>
      <returns>Elemento de la posición actual del enumerador.</returns>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>Invalidaciones de método de extensión LINQ que ofrecen una mayor eficiencia para <see cref="T:System.Collections.Immutable.ImmutableArray`1" /> que los métodos estándar de LINQ 
 Paquete NuGet: System.Collections.Immutable (sobre las colecciones inmutables y la instalación)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Aplica una función a una secuencia de elementos de forma acumulativa.</summary>
      <param name="immutableArray">Colección a la que se va a aplicar la función.</param>
      <param name="func">Función que se va a invocar en cada elemento de manera acumulativa.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Valor final después de aplicar la función acumulativa a todos los elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Aplica una función a una secuencia de elementos de forma acumulativa.</summary>
      <param name="immutableArray">Colección a la que se va a aplicar la función.</param>
      <param name="seed">Valor de inicio del acumulador.</param>
      <param name="func">Función que se va a invocar en cada elemento de manera acumulativa.</param>
      <typeparam name="TAccumulate">Tipo del valor acumulado.</typeparam>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Valor final del acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Aplica una función a una secuencia de elementos de forma acumulativa.</summary>
      <param name="immutableArray">Colección a la que se va a aplicar la función.</param>
      <param name="seed">Valor de inicio del acumulador.</param>
      <param name="func">Función que se va a invocar en cada elemento de manera acumulativa.</param>
      <param name="resultSelector" />
      <typeparam name="TAccumulate">Tipo del valor acumulado.</typeparam>
      <typeparam name="TResult">Tipo de resultado devuelto por el selector de resultados.</typeparam>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Valor final del acumulador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Obtiene un valor que indica si todos los elementos de esta matriz coinciden con una condición determinada.</summary>
      <param name="immutableArray">Matriz para buscar coincidencias.</param>
      <param name="predicate">Predicado.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>
        <see langword="true" /> si todos los elementos de la secuencia de origen pasan la prueba en el predicado especificado; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Devuelve un valor que indica si la colección contiene elementos.</summary>
      <param name="builder">Generador para buscar coincidencias.</param>
      <typeparam name="T">Tipo de los elementos de la matriz.</typeparam>
      <returns>
        <see langword="true" /> si el generador de matrices contiene elementos; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Obtiene un valor que indica si la matriz contiene elementos.</summary>
      <param name="immutableArray">Matriz para buscar elementos.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>
        <see langword="true" /> si la matriz contiene un elemento; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Obtiene un valor que indica si la matriz contiene elementos que coinciden con una condición especificada.</summary>
      <param name="immutableArray">Matriz para buscar elementos.</param>
      <param name="predicate">Delegado que define las condiciones que deben coincidir con los elementos.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>
        <see langword="true" /> si un elemento coincide con la condición especificada; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Devuelve el elemento situado en un índice especificado de la matriz.</summary>
      <param name="immutableArray">Matriz en la que buscar un elemento.</param>
      <param name="index">Índice del elemento que se va a recuperar.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Elemento que se encuentra en el índice especificado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Devuelve el elemento situado en un índice especificado de una secuencia o un valor predeterminado si el índice está fuera del intervalo.</summary>
      <param name="immutableArray">Matriz en la que buscar un elemento.</param>
      <param name="index">Índice del elemento que se va a recuperar.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Elemento del índice especificado, o el valor predeterminado si no se encuentra el índice.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Devuelve el primer elemento de la colección.</summary>
      <param name="builder">Generador del que recuperar un elemento.</param>
      <typeparam name="T">Tipo de elementos de la matriz.</typeparam>
      <exception cref="T:System.InvalidOperationException">Si la matriz está vacía.</exception>
      <returns>Primer elemento de la lista.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Devuelve el primer elemento de una matriz.</summary>
      <param name="immutableArray">Matriz de la que obtener un elemento.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <exception cref="T:System.InvalidOperationException">Si la matriz está vacía.</exception>
      <returns>Primer elemento de la matriz.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el primer elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="immutableArray">Matriz de la que obtener un elemento.</param>
      <param name="predicate">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <exception cref="T:System.InvalidOperationException">Si la matriz está vacía.</exception>
      <returns>Primer elemento de la lista si cumple la condición especificada por <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Devuelve el primer elemento de la colección o el valor predeterminado si la colección está vacía.</summary>
      <param name="builder">Generador del que recuperar un elemento.</param>
      <typeparam name="T">Tipo del elemento del generador.</typeparam>
      <returns>Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Devuelve el primer elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="immutableArray">Matriz del que recuperar elementos.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el primer elemento de la secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="immutableArray">Matriz de la que recuperar elementos.</param>
      <param name="predicate">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Primer elemento de la lista, si se encuentra; de lo contrario, valor predeterminado para el tipo de elemento.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Devuelve el último elemento de la colección.</summary>
      <param name="builder">Generador del que recuperar elementos.</param>
      <typeparam name="T">Tipo del elemento del generador.</typeparam>
      <exception cref="T:System.InvalidOperationException">Se produce si la colección está vacía.</exception>
      <returns>Último elemento del generador.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Devuelve el último elemento de la secuencia.</summary>
      <param name="immutableArray">Matriz del que recuperar elementos.</param>
      <typeparam name="T">Tipo de elemento incluido en la matriz.</typeparam>
      <exception cref="T:System.InvalidOperationException">Se produce si la colección está vacía.</exception>
      <returns>Último elemento de la matriz.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el último elemento de una secuencia que satisface una condición especificada.</summary>
      <param name="immutableArray">Matriz de la que recuperar elementos.</param>
      <param name="predicate">Delegado que define las condiciones del elemento que se va a recuperar.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <exception cref="T:System.InvalidOperationException">Se produce si la colección está vacía.</exception>
      <returns>Último elemento de la matriz que satisface la condición <paramref name="predicate" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Devuelve el último elemento de la colección o el valor predeterminado si la colección está vacía.</summary>
      <param name="builder">Generador del que recuperar un elemento.</param>
      <typeparam name="T">Tipo del elemento del generador.</typeparam>
      <returns>Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Devuelve el último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</summary>
      <param name="immutableArray">Matriz del que recuperar elementos.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el último elemento de una secuencia que satisface una condición o un valor predeterminado si no se encuentra dicho elemento.</summary>
      <param name="immutableArray">Matriz de la que recuperar un elemento.</param>
      <param name="predicate">Delegado que define las condiciones del elemento que se va a buscar.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Último elemento de una secuencia o un valor predeterminado si la secuencia no contiene elementos.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Proyecta cada elemento de una secuencia a un nuevo formulario.</summary>
      <param name="immutableArray">Matriz inmutable de la que seleccionar elementos.</param>
      <param name="selector">Función de transformación que se va a aplicar a cada elemento.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <typeparam name="TResult">Tipo del elemento del resultado.</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar una función de transformación en cada elemento del origen.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Proyecta cada elemento de una secuencia en <see cref="T:System.Collections.Generic.IEnumerable`1" />, reduce las secuencias resultantes en una única secuencia e invoca una función del selector de resultados en cada elemento.</summary>
      <param name="immutableArray">La matriz inmutable.</param>
      <param name="collectionSelector">Una función de transformación que se va a aplicar a cada elemento de la secuencia de entrada.</param>
      <param name="resultSelector">Una función de transformación que se va a aplicar a cada elemento de la secuencia intermedia.</param>
      <typeparam name="TSource">Tipo de los elementos de <paramref name="immutableArray" />.</typeparam>
      <typeparam name="TCollection">Tipo de los elementos intermedios recopilados por <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">Tipo de los elementos de la secuencia resultante.</typeparam>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> cuyos elementos son el resultado de invocar la función de transformación uno a varios <paramref name="collectionSelector" /> en cada elemento de <paramref name="immutableArray" /> y de asignar a continuación cada uno de los elementos de la secuencia y sus elementos de origen correspondientes a un elemento de resultado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determina si dos secuencias son iguales según un comparador de igualdad.</summary>
      <param name="immutableArray">Matriz que se va a utilizar para la comparación.</param>
      <param name="items">Elementos que se van a utilizar para la comparación.</param>
      <param name="comparer">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <typeparam name="TDerived">Tipo de elemento de la matriz comparada.</typeparam>
      <typeparam name="TBase">Tipo de elemento incluido en la colección.</typeparam>
      <returns>
        <see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determina si dos secuencias son iguales según un comparador de igualdad.</summary>
      <param name="immutableArray">Matriz que se va a utilizar para la comparación.</param>
      <param name="items">Elementos que se van a utilizar para la comparación.</param>
      <param name="comparer">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <typeparam name="TDerived">Tipo de elemento de la matriz comparada.</typeparam>
      <typeparam name="TBase">Tipo de elemento incluido en la colección.</typeparam>
      <returns>
        <see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Determina si dos secuencias son iguales según un comparador de igualdad.</summary>
      <param name="immutableArray">Matriz que se va a utilizar para la comparación.</param>
      <param name="items">Elementos que se van a utilizar para la comparación.</param>
      <param name="predicate">Comparador que se va a utilizar para comprobar la igualdad.</param>
      <typeparam name="TDerived">Tipo de elemento de la matriz comparada.</typeparam>
      <typeparam name="TBase">Tipo de elemento incluido en la colección.</typeparam>
      <returns>
        <see langword="true" /> para indicar que las secuencias son iguales; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Devuelve el único elemento de una secuencia y produce una excepción si no hay exactamente un elemento en la secuencia.</summary>
      <param name="immutableArray">Matriz de la que se recupera el elemento.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Elemento de la secuencia.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el único elemento de una secuencia que cumpla una condición especificada y produce una excepción si existe más de un elemento de este tipo.</summary>
      <param name="immutableArray" />
      <param name="predicate" />
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Devuelve <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Devuelve el único elemento de la matriz o un valor predeterminado si la secuencia está vacía; este método produce una excepción si hay más de un elemento en la secuencia.</summary>
      <param name="immutableArray">Matriz.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contiene más de un elemento.</exception>
      <returns>Elemento de la matriz o valor predeterminado si la matriz está vacía.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Devuelve el único elemento de una secuencia que cumpla la condición especificada, o bien, un valor predeterminado si ese elemento no existe; este método produce una excepción si varios elementos cumplen la condición.</summary>
      <param name="immutableArray">Matriz de la que se obtiene el elemento.</param>
      <param name="predicate">Condición que debe satisfacer el elemento.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <exception cref="T:System.InvalidOperationException">Varios elementos satisfacen la condición de <paramref name="predicate" />.</exception>
      <returns>Elemento si cumple la condición especificada; en caso contrario, el elemento predeterminado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Copia el contenido de la matriz en una matriz mutable.</summary>
      <param name="immutableArray" />
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Matriz de la instancia recién creada.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector">Selector de claves.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector">Selector de claves.</param>
      <param name="comparer">Comparador con el que inicializar el diccionario.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector">Selector de claves.</param>
      <param name="elementSelector">Selector de elementos.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="TElement">El tipo del elemento.</typeparam>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Crea un diccionario basado en el contenido de esta matriz.</summary>
      <param name="immutableArray">Matriz desde la que crear un diccionario.</param>
      <param name="keySelector">Selector de claves.</param>
      <param name="elementSelector">Selector de elementos.</param>
      <param name="comparer">Comparador con el que inicializar el diccionario.</param>
      <typeparam name="TKey">Tipo de la clave.</typeparam>
      <typeparam name="TElement">El tipo del elemento.</typeparam>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Diccionario recién inicializado.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filtra una secuencia de valores en función de un predicado.</summary>
      <param name="immutableArray">Matriz que se va a filtrar.</param>
      <param name="predicate">Condición que se va a utilizar para filtrar el contenido de la matriz.</param>
      <typeparam name="T">Tipo de elemento incluido en la colección.</typeparam>
      <returns>Devuelve <see cref="T:System.Collections.Generic.IEnumerable`1" /> que contiene los elementos que cumplen la condición.</returns>
    </member>
  </members>
</doc>
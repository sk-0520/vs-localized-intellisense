<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary>Representa un elemento de trabajo que <see cref="T:System.Threading.ThreadPool" /> puede ejecutar.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary>Ejecuta el elemento de trabajo en el grupo de subprocesos.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary>Representa un identificador que se registró al llamar a <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. Esta clase no puede heredarse.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary>Cancela una operación de espera registrada y emitida por el método <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
      <param name="waitObject">
        <see cref="T:System.Threading.WaitHandle" /> que hay que marcar.</param>
      <returns>
        <see langword="true" /> si la función se realiza correctamente; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary>Proporciona un grupo de subprocesos que pueden usarse para ejecutar tareas, exponer elementos de trabajo, procesar la E/S asincrónica, esperar en nombre de otros subprocesos y procesar temporizadores.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary>Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">
        <see cref="T:System.IntPtr" /> que contiene el controlador. El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</param>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <returns>Es <see langword="true" /> si el identificador está enlazado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary>Enlaza un identificador del sistema operativo a <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle">Propiedad <see cref="T:System.Runtime.InteropServices.SafeHandle" /> que contiene el identificador del sistema operativo. El identificador debe haberse abierto para la E/S superpuesta en la parte no administrada.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="osHandle" /> es <see langword="null" />.</exception>
      <returns>Es <see langword="true" /> si el identificador está enlazado; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary>Recupera la diferencia entre el número máximo de subprocesos de grupo de subprocesos devuelto por el método <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> y el número activo actualmente.</summary>
      <param name="workerThreads">Número de subprocesos de trabajo disponibles.</param>
      <param name="completionPortThreads">Número de subprocesos de E/S asincrónicos disponibles.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary>Recupera el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo. Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</summary>
      <param name="workerThreads">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</param>
      <param name="completionPortThreads">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary>Recupera el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</summary>
      <param name="workerThreads">Cuando este método vuelve, contiene el número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</param>
      <param name="completionPortThreads">Cuando este método vuelve, contiene el número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary>Pone en cola un método para su ejecución. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> que representa el método que se va a ejecutar.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="callBack" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</exception>
      <returns>
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Pone un método en cola para su ejecución y especifica un objeto que contiene los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> que representa el método que se va a ejecutar.</param>
      <param name="state">Objeto que contiene los datos que va a usar el método.</param>
      <exception cref="T:System.NotSupportedException">Common Language Runtime (CLR) está en un host y el host no admite esta acción.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="callBack" /> es <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Pone un método en cola para su ejecución especificado por un delegado de <see cref="T:System.Action`1" /> y proporciona los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack">
        <see cref="T:System.Action`1" /> que representa el método que se va a ejecutar.</param>
      <param name="state">Objeto que contiene los datos que va a usar el método.</param>
      <param name="preferLocal">
        <see langword="true" /> si se prefiere poner en cola el elemento de trabajo en una cola junto al subproceso actual; <see langword="false" /> si se prefiere poner en cola el elemento de trabajo en la cola compartida del grupo de subprocesos.</param>
      <typeparam name="TState">Tipo de elementos de <paramref name="state" />.</typeparam>
      <returns>
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits con signo como tiempo de espera, en milisegundos.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se ha pasado al delegado.</param>
      <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un valor <see cref="T:System.TimeSpan" /> como tiempo de espera.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se ha pasado al delegado.</param>
      <param name="timeout">Tiempo de espera representado por <see cref="T:System.TimeSpan" />. Si <paramref name="timeout" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="timeout" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="timeout" /> es menor que -1.</exception>
      <exception cref="T:System.NotSupportedException">El valor del parámetro <paramref name="timeout" /> es mayor que el valor de la propiedad <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que encapsula el identificador nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado de <see cref="T:System.Threading.WaitOrTimerCallback" /> al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se ha pasado al delegado.</param>
      <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <returns>
        <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary>Establece el número de solicitudes al grupo de subprocesos que pueden estar activas al mismo tiempo. Todas las solicitudes que pasen de ese número permanecen en la cola hasta que haya disponibles subprocesos de grupo de subprocesos.</summary>
      <param name="workerThreads">Número máximo de subprocesos de trabajo en el grupo de subprocesos.</param>
      <param name="completionPortThreads">Número máximo de subprocesos de E/S asincrónicos en el grupo de subprocesos.</param>
      <returns>Es <see langword="true" /> si el cambio se realiza correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary>Establece el número mínimo de subprocesos que el grupo de subprocesos crea a petición, según se realizan nuevas solicitudes, antes de conmutar a un algoritmo para administrar la creación y destrucción de subprocesos.</summary>
      <param name="workerThreads">Número mínimo de subprocesos de trabajo que el grupo de subprocesos crea a petición.</param>
      <param name="completionPortThreads">Número mínimo de subprocesos de E/S asincrónicos que el grupo de subprocesos crea a petición.</param>
      <returns>Es <see langword="true" /> si el cambio se realiza correctamente; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary>Pone en cola una operación de E/S superpuesta para que se ejecute.</summary>
      <param name="overlapped">Estructura <see cref="T:System.Threading.NativeOverlapped" /> que se va a poner en cola.</param>
      <returns>Es <see langword="true" /> si la operación se puso correctamente en la cola de un puerto de finalización de E/S; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary>Pone en cola el objeto del elemento de trabajo especificado en el grupo de subprocesos.</summary>
      <param name="callBack">Elemento de trabajo que se va a invocar cuando un subproceso del grupo de subprocesos elige el elemento de trabajo.</param>
      <param name="preferLocal">
        <see langword="true" /> si se prefiere poner en cola el elemento de trabajo en una cola junto al subproceso actual; <see langword="false" /> si se prefiere poner en cola el elemento de trabajo en la cola compartida del grupo de subprocesos.</param>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El elemento de trabajo es <see cref="T:System.Threading.Tasks.Task" />.</exception>
      <exception cref="T:System.OutOfMemoryException">No se pudo poner en la cola el elemento de trabajo.</exception>
      <returns>
        <see langword="true" /> si el método se ejecuta correctamente; se produce la excepción <see cref="T:System.OutOfMemoryException" /> si el elemento de trabajo no se puede poner en la cola.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary>Pone en cola el delegado especificado en el grupo de subprocesos, pero no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="callBack">
        <see cref="T:System.Threading.WaitCallback" /> que representa el delegado al que se va a invocar cuando un subproceso del grupo de subprocesos seleccione el elemento de trabajo.</param>
      <param name="state">Objeto que se pasa al delegado cuando se atiende desde el grupo de subprocesos.</param>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <exception cref="T:System.ApplicationException">Se ha encontrado una condición de falta de memoria.</exception>
      <exception cref="T:System.OutOfMemoryException">No se pudo poner en la cola el elemento de trabajo.</exception>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="callBack" /> es <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si el método se ejecuta correctamente; se produce la excepción <see cref="T:System.OutOfMemoryException" /> si el elemento de trabajo no se puede poner en la cola.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary>Pone un método en cola para su ejecución especificado por un delegado de <see cref="T:System.Action`1" /> y especifica un objeto que contiene los datos que debe usar el método. El método se ejecuta cuando hay disponible un subproceso de grupo de subprocesos.</summary>
      <param name="callBack">Un delegado que representa el método que se va a ejecutar.</param>
      <param name="state">Objeto que contiene los datos que va a usar el método.</param>
      <param name="preferLocal">
        <see langword="true" /> si se prefiere poner en cola el elemento de trabajo en una cola junto al subproceso actual; <see langword="false" /> si se prefiere poner en cola el elemento de trabajo en la cola compartida del grupo de subprocesos.</param>
      <typeparam name="TState">Tipo de elementos de <paramref name="state" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">El valor de <paramref name="callback" /> es <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">No se pudo poner en la cola el elemento de trabajo.</exception>
      <returns>
        <see langword="true" /> si el método se pone en la cola correctamente; se produce la excepción <see cref="T:System.NotSupportedException" /> si no se puede poner en la cola el elemento de trabajo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y usa un entero de 32 bits con signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 64 bits con signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="millisecondsTimeOutInterval" /> es menor que -1.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un valor <see cref="T:System.TimeSpan" /> como tiempo de espera. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se pasa al delegado.</param>
      <param name="timeout">Tiempo de espera representado por <see cref="T:System.TimeSpan" />. Si <paramref name="timeout" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="timeout" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="timeout" /> es menor que -1.</exception>
      <exception cref="T:System.NotSupportedException">El valor del parámetro <paramref name="timeout" /> es mayor que el valor de la propiedad <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary>Registra un delegado para que espere a la clase <see cref="T:System.Threading.WaitHandle" /> y especifica un entero de 32 bits sin signo como tiempo de espera, en milisegundos. Este método no propaga la pila de llamadas al subproceso de trabajo.</summary>
      <param name="waitObject">La clase <see cref="T:System.Threading.WaitHandle" /> que se va a registrar. Use un <see cref="T:System.Threading.WaitHandle" /> diferente de <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack">Delegado al que se llamará cuando el parámetro <paramref name="waitObject" /> esté marcado.</param>
      <param name="state">Objeto que se pasa al delegado.</param>
      <param name="millisecondsTimeOutInterval">Tiempo de espera en milisegundos. Si el valor del parámetro <paramref name="millisecondsTimeOutInterval" /> es 0 (cero), la función comprueba el estado del objeto y regresa inmediatamente.  Si <paramref name="millisecondsTimeOutInterval" /> es -1, el intervalo de tiempo de espera de la función nunca transcurre.</param>
      <param name="executeOnlyOnce">Es <see langword="true" /> para indicar que el subproceso no esperará en el parámetro <paramref name="waitObject" /> después de haber llamado al delegado; es <see langword="false" /> para indicar que el temporizador se restablecerá cada vez que se complete la operación de espera, hasta que se anule el registro de la espera.</param>
      <exception cref="T:System.Security.SecurityException">El llamador no dispone del permiso requerido.</exception>
      <returns>Objeto <see cref="T:System.Threading.RegisteredWaitHandle" /> que puede usarse para cancelar la operación de espera registrada.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary>Obtiene el número de elementos de trabajo que se han procesado hasta ahora.</summary>
      <returns>El número de elementos de trabajo que se han procesado hasta el momento.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary>Obtiene el número de elementos de trabajo que se encuentran actualmente en cola para procesarse.</summary>
      <returns>El número de elementos de trabajo actualmente en cola para ser procesados.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary>Obtiene el número de subprocesos del grupo de subprocesos que existen actualmente.</summary>
      <returns>Número de subprocesos del grupo de subprocesos que existen actualmente.</returns>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary>Representa un método de devolución de llamada que debe ejecutar un subproceso del grupo de subprocesos.</summary>
      <param name="state">Objeto que contiene la información que va a usar el método de devolución de llamada.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary>Representa un método al que se debe llamar cuando un <see cref="T:System.Threading.WaitHandle" /> está señalado o se agota su tiempo de espera.</summary>
      <param name="state">Objeto que contiene la información que va a utilizar el método de devolución de llamadas cada vez que se ejecute.</param>
      <param name="timedOut">
        <see langword="true" /> si <see cref="T:System.Threading.WaitHandle" /> ha agotado el tiempo de espera; <see langword="false" /> si estaba señalado.</param>
    </member>
  </members>
</doc>
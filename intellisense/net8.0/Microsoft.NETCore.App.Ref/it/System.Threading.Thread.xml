<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Thread</name>
  </assembly>
  <members>
    <member name="T:System.LocalDataStoreSlot">
      <summary>Incapsula uno slot di memoria per l'archiviazione di dati locali. La classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.LocalDataStoreSlot.Finalize">
      <summary>Garantisce che le risorse vengano liberate e che vengano eseguite le altre operazioni di pulizia quando l'oggetto <see cref="T:System.LocalDataStoreSlot" /> viene recuperato da Garbage Collector.</summary>
    </member>
    <member name="T:System.Threading.ApartmentState">
      <summary>Specifica lo stato dell'apartment di un <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.MTA">
      <summary>
        <see cref="T:System.Threading.Thread" /> creerà ed immetterà un apartment con multithreading.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.STA">
      <summary>
        <see cref="T:System.Threading.Thread" /> creerà ed immetterà un apartment a thread singolo.</summary>
    </member>
    <member name="F:System.Threading.ApartmentState.Unknown">
      <summary>La proprietà <see cref="P:System.Threading.Thread.ApartmentState" /> non è stata impostata.</summary>
    </member>
    <member name="T:System.Threading.CompressedStack">
      <summary>Fornisce metodi per l'impostazione e l'acquisizione dello stack compresso sul thread corrente. La classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.Threading.CompressedStack.Capture">
      <summary>Acquisisce lo stack compresso dal thread corrente.</summary>
      <returns>Un oggetto <see cref="T:System.Threading.CompressedStack" />.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.CreateCopy">
      <summary>Crea una copia dello stack compresso corrente.</summary>
      <returns>Oggetto <see cref="T:System.Threading.CompressedStack" /> che rappresenta lo stack compresso corrente.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetCompressedStack">
      <summary>Ottiene lo stack compresso per il thread corrente.</summary>
      <exception cref="T:System.Security.SecurityException">Un chiamante nella catena di chiamate non dispone dell'autorizzazione all'accesso a codice non gestito.  
  
-oppure- 
Richiesta dell'oggetto <see cref="T:System.Security.Permissions.StrongNameIdentityPermission" /> non riuscita.</exception>
      <returns>Oggetto <see cref="T:System.Threading.CompressedStack" /> per il thread corrente.</returns>
    </member>
    <member name="M:System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Imposta l'oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> con le informazioni logiche sul contesto necessarie per ricreare un'istanza del contesto di esecuzione.</summary>
      <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> da completare con le informazioni di serializzazione.</param>
      <param name="context">Struttura <see cref="T:System.Runtime.Serialization.StreamingContext" /> che rappresenta il contesto di destinazione della serializzazione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.CompressedStack.Run(System.Threading.CompressedStack,System.Threading.ContextCallback,System.Object)">
      <summary>Esegue un metodo nello stack compresso specificato sul thread corrente.</summary>
      <param name="compressedStack">Oggetto <see cref="T:System.Threading.CompressedStack" /> da impostare.</param>
      <param name="callback">Delegato <see cref="T:System.Threading.ContextCallback" /> che rappresenta il metodo da eseguire nel contesto di sicurezza specificato.</param>
      <param name="state">Oggetto da passare al metodo di callback.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="compressedStack" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.Threading.ParameterizedThreadStart">
      <summary>Rappresenta il metodo eseguito in un oggetto <see cref="T:System.Threading.Thread" />.</summary>
      <param name="obj">Oggetto che contiene i dati per la routine del thread.</param>
    </member>
    <member name="T:System.Threading.Thread">
      <summary>Crea e controlla un thread, ne imposta le priorità e ne ottiene lo stato.</summary>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Thread" />, specificando un delegato che consente di passare un oggetto al thread quando quest'ultimo viene avviato.</summary>
      <param name="start">Delegato che rappresenta i metodi da richiamare quando inizia l'esecuzione di questo thread.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> costruito in modo predefinito è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Thread" />, specificando un delegato che consente di passare un oggetto al thread quando quest'ultimo viene avviato e specificando la dimensione massima dello stack per il thread.</summary>
      <param name="start">Delegato <see cref="T:System.Threading.ParameterizedThreadStart" /> che rappresenta i metodi da richiamare quando inizia l'esecuzione di questo thread.</param>
      <param name="maxStackSize">Dimensione massima dello stack, in byte, usata dal thread oppure 0 per usare la dimensione massima predefinita specificata nell'intestazione del file eseguibile.  
  
Importante: per il codice parzialmente attendibile, <paramref name="maxStackSize" /> viene ignorato se è maggiore delle dimensioni predefinite dello stack. Non viene generata alcuna eccezione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Thread" />.</summary>
      <param name="start">Delegato <see cref="T:System.Threading.ThreadStart" /> che rappresenta i metodi da richiamare quando inizia l'esecuzione di questo thread.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="start" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.#ctor(System.Threading.ThreadStart,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Thread" />, specificando la dimensione massima dello stack per il thread.</summary>
      <param name="start">Delegato <see cref="T:System.Threading.ThreadStart" /> che rappresenta i metodi da richiamare quando inizia l'esecuzione di questo thread.</param>
      <param name="maxStackSize">Dimensione massima dello stack, in byte, usata dal thread oppure 0 per usare la dimensione massima predefinita specificata nell'intestazione del file eseguibile.  
  
Importante: per il codice parzialmente attendibile, <paramref name="maxStackSize" /> viene ignorato se è maggiore delle dimensioni predefinite dello stack. Non viene generata alcuna eccezione.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="start" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxStackSize" /> è minore di zero.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort">
      <summary>Genera un'eccezione <see cref="T:System.Threading.ThreadAbortException" /> nel thread in cui viene richiamato, per iniziare il processo di terminazione del thread. La chiamata a questo metodo in genere termina il thread.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread che si sta interrompendo è attualmente sospeso.</exception>
    </member>
    <member name="M:System.Threading.Thread.Abort(System.Object)">
      <summary>Genera un'eccezione <see cref="T:System.Threading.ThreadAbortException" /> nel thread in cui viene richiamato per iniziare il processo di terminazione del thread fornendo anche informazioni sull'eccezione relative alla terminazione del thread. La chiamata a questo metodo in genere termina il thread.</summary>
      <param name="stateInfo">Oggetto che contiene informazioni specifiche dell'applicazione, ad esempio lo stato, che possono essere usate dal thread interrotto.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread che si sta interrompendo è attualmente sospeso.</exception>
    </member>
    <member name="M:System.Threading.Thread.AllocateDataSlot">
      <summary>Alloca uno slot di dati senza nome su tutti i thread. Per ottenere prestazioni migliori, usare i campi contrassegnati con l'attributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <returns>Slot di dati denominato allocato su tutti i thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.AllocateNamedDataSlot(System.String)">
      <summary>Alloca uno slot di dati denominato su tutti i thread. Per ottenere prestazioni migliori, usare i campi contrassegnati con l'attributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nome dello slot di dati da allocare.</param>
      <exception cref="T:System.ArgumentException">Esiste già uno slot di dati denominato con il nome specificato.</exception>
      <returns>Slot di dati denominato allocato su tutti i thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.BeginCriticalRegion">
      <summary>Notifica a un host che l'esecuzione sta per entrare in un'area di codice in cui gli effetti di un'interruzione del thread o di un'eccezione non gestita possono rappresentare un rischio per altre attività nel dominio applicazione.</summary>
    </member>
    <member name="M:System.Threading.Thread.BeginThreadAffinity">
      <summary>Notifica a un host che il codice gestito sta per eseguire istruzioni che dipendono dall'identità del thread fisico corrente del sistema operativo.</summary>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Threading.Thread.DisableComObjectEagerCleanup">
      <summary>Disattiva la pulizia automatica dei Runtime Callable Wrapper (RCW) per il thread corrente.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndCriticalRegion">
      <summary>Notifica a un host che l'esecuzione sta per entrare in un'area di codice in cui gli effetti di un'interruzione del thread o di un'eccezione non gestita sono limitati all'attività corrente.</summary>
    </member>
    <member name="M:System.Threading.Thread.EndThreadAffinity">
      <summary>Notifica a un host che il codice gestito ha terminato l'esecuzione di istruzioni che dipendono dall'identità del thread fisico corrente del sistema operativo.</summary>
      <exception cref="T:System.Security.SecurityException">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
    </member>
    <member name="M:System.Threading.Thread.Finalize">
      <summary>Garantisce che le risorse vengano liberate e che vengano eseguite le altre operazioni di pulizia quando l'oggetto <see cref="T:System.Threading.Thread" /> viene recuperato da Garbage Collector.</summary>
    </member>
    <member name="M:System.Threading.Thread.FreeNamedDataSlot(System.String)">
      <summary>Elimina l'associazione tra un nome e uno slot per tutti i thread del processo. Per ottenere prestazioni migliori, usare i campi contrassegnati con l'attributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nome dello slot di dati da liberare.</param>
    </member>
    <member name="M:System.Threading.Thread.GetApartmentState">
      <summary>Restituisce un valore <see cref="T:System.Threading.ApartmentState" /> che indica lo stato dell'apartment.</summary>
      <returns>Uno dei valori di <see cref="T:System.Threading.ApartmentState" /> che indica lo stato dell'apartment del thread gestito. Il valore predefinito è <see cref="F:System.Threading.ApartmentState.Unknown" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCompressedStack">
      <summary>Restituisce un oggetto <see cref="T:System.Threading.CompressedStack" /> che può essere usato per acquisire lo stack per il thread corrente.</summary>
      <exception cref="T:System.InvalidOperationException">In tutti i casi.</exception>
      <returns>Nessuno.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetCurrentProcessorId">
      <summary>Ottiene un ID usato per indicare il processore in cui è in esecuzione il thread corrente.</summary>
      <returns>Intero che rappresenta l'ID processore memorizzato nella cache.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetData(System.LocalDataStoreSlot)">
      <summary>Recupera il valore dallo slot specificato sul thread corrente, all'interno del dominio corrente del thread corrente. Per ottenere prestazioni migliori, usare i campi contrassegnati con l'attributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">Oggetto <see cref="T:System.LocalDataStoreSlot" /> dal quale ottenere il valore.</param>
      <returns>Valore recuperato.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomain">
      <summary>Restituisce il dominio corrente in cui viene eseguito il thread corrente.</summary>
      <returns>Oggetto <see cref="T:System.AppDomain" /> che rappresenta il dominio applicazione corrente del thread in esecuzione.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetDomainID">
      <summary>Restituisce un identificatore di dominio applicazione univoco.</summary>
      <returns>Intero con segno a 32 bit che identifica in modo univoco il dominio applicazione.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetHashCode">
      <summary>Restituisce un codice hash per il thread corrente.</summary>
      <returns>Intero del valore del codice hash.</returns>
    </member>
    <member name="M:System.Threading.Thread.GetNamedDataSlot(System.String)">
      <summary>Cerca uno slot di dati denominato. Per ottenere prestazioni migliori, usare i campi contrassegnati con l'attributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="name">Nome dello slot di dati locale.</param>
      <returns>Oggetto <see cref="T:System.LocalDataStoreSlot" /> allocato per il thread.</returns>
    </member>
    <member name="M:System.Threading.Thread.Interrupt">
      <summary>Interrompe un thread il cui stato è <see cref="F:System.Threading.ThreadState.WaitSleepJoin" />.</summary>
      <exception cref="T:System.Security.SecurityException">Il chiamante non ha l'oggetto <see cref="T:System.Security.Permissions.SecurityPermission" /> appropriato.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join">
      <summary>Blocca il thread chiamante finché non termina il thread rappresentato da questa istanza, pur continuando a eseguire la distribuzione di <see langword="SendMessage" /> e COM standard.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Il chiamante ha provato a eseguire il join di un thread che si trova nello stato <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">Il thread viene interrotto durante l'attesa.</exception>
    </member>
    <member name="M:System.Threading.Thread.Join(System.Int32)">
      <summary>Blocca il thread chiamante finché non termina il thread rappresentato da questa istanza o finché non trascorre l'intervallo di tempo specificato, pur continuando a eseguire la distribuzione di SendMessage e COM standard.</summary>
      <param name="millisecondsTimeout">Tempo di attesa espresso in millisecondi prima che il thread venga terminato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="millisecondsTimeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> in millisecondi.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread non è stato avviato.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="millisecondsTimeout" /> è minore di -1 (Timeout.Infinite).</exception>
      <exception cref="T:System.Threading.ThreadInterruptedException">Il thread è stato interrotto durante l'attesa.</exception>
      <returns>
        <see langword="true" /> se il thread è stato terminato; <see langword="false" /> se il thread non è stato terminato dopo l'intervallo di tempo specificato dal parametro <paramref name="millisecondsTimeout" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.Join(System.TimeSpan)">
      <summary>Blocca il thread chiamante finché non termina il thread rappresentato da questa istanza o finché non trascorre l'intervallo di tempo specificato, pur continuando a eseguire la distribuzione di SendMessage e COM standard.</summary>
      <param name="timeout">Oggetto <see cref="T:System.TimeSpan" /> impostato sul tempo di attesa prima che il thread venga terminato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="timeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> in millisecondi oppure è maggiore di <see cref="F:System.Int32.MaxValue" /> in millisecondi.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il chiamante ha provato a eseguire il join di un thread che si trova nello stato <see cref="F:System.Threading.ThreadState.Unstarted" />.</exception>
      <returns>
        <see langword="true" /> se il thread è stato terminato; <see langword="false" /> se il thread non è stato terminato dopo l'intervallo di tempo specificato dal parametro <paramref name="timeout" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.MemoryBarrier">
      <summary>Sincronizza l'accesso alla memoria come segue: il processore che esegue il thread corrente non può riordinare le istruzioni in modo tale che gli accessi alla memoria prima della chiamata al metodo <see cref="M:System.Threading.Thread.MemoryBarrier" /> vengano eseguiti dopo quelli successivi alla chiamata al metodo <see cref="M:System.Threading.Thread.MemoryBarrier" />.</summary>
    </member>
    <member name="M:System.Threading.Thread.ResetAbort">
      <summary>Annulla il metodo <see cref="M:System.Threading.Thread.Abort(System.Object)" /> richiesto per il thread corrente.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi.</exception>
      <exception cref="T:System.Threading.ThreadStateException">
        <see langword="Abort" /> non è stato richiamato sul thread corrente.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non ha l'autorizzazione di sicurezza richiesta per il thread corrente.</exception>
    </member>
    <member name="M:System.Threading.Thread.Resume">
      <summary>Riprende un thread che era stato sospeso.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread non è stato avviato, è inattivo o non è in stato sospeso.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non ha l'oggetto <see cref="T:System.Security.Permissions.SecurityPermission" /> appropriato.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetApartmentState(System.Threading.ApartmentState)">
      <summary>Imposta lo stato dell'apartment di un thread prima che venga avviato.</summary>
      <param name="state">Nuovo stato dell'apartment.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi in macOS e Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> non è uno stato di apartment valido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread è già stato avviato.</exception>
      <exception cref="T:System.InvalidOperationException">Lo stato di apartment è già stato inizializzato.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetCompressedStack(System.Threading.CompressedStack)">
      <summary>Applica un oggetto <see cref="T:System.Threading.CompressedStack" /> acquisito al thread corrente.</summary>
      <param name="stack">Oggetto <see cref="T:System.Threading.CompressedStack" /> da applicare al thread corrente.</param>
      <exception cref="T:System.InvalidOperationException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Threading.Thread.SetData(System.LocalDataStoreSlot,System.Object)">
      <summary>Imposta i dati nello slot specificato sul thread in esecuzione per il dominio corrente di tale thread. Per ottenere prestazioni migliori, usare i campi contrassegnati con l'attributo <see cref="T:System.ThreadStaticAttribute" />.</summary>
      <param name="slot">Oggetto <see cref="T:System.LocalDataStoreSlot" /> nel quale impostare il valore.</param>
      <param name="data">Valore da impostare.</param>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.Int32)">
      <summary>Sospende il thread corrente per il numero specificato di millisecondi.</summary>
      <param name="millisecondsTimeout">Numero di millisecondi per cui sospendere il thread. Se il valore dell'argomento <paramref name="millisecondsTimeout" /> è zero, il thread cede il periodo di tempo rimanente a un thread di uguale priorità pronto per l'esecuzione. Se non sono presenti altri thread di uguale priorità pronti per l'esecuzione, l'esecuzione del thread corrente non viene sospesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di timeout è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Sleep(System.TimeSpan)">
      <summary>Sospende il thread corrente per il periodo di tempo specificato.</summary>
      <param name="timeout">Periodo di tempo per cui sospendere il thread. Se il valore dell'argomento <paramref name="timeout" /> è <see cref="F:System.TimeSpan.Zero" />, il thread cede il periodo di tempo rimanente a un thread di uguale priorità pronto per l'esecuzione. Se non sono presenti altri thread di uguale priorità pronti per l'esecuzione, l'esecuzione del thread corrente non viene sospesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore di <paramref name="timeout" /> è negativo e non è uguale a <see cref="F:System.Threading.Timeout.Infinite" /> in millisecondi oppure è maggiore di <see cref="F:System.Int32.MaxValue" /> in millisecondi.</exception>
    </member>
    <member name="M:System.Threading.Thread.SpinWait(System.Int32)">
      <summary>Determina che un thread rimanga in attesa il numero di volte definito dal parametro <paramref name="iterations" />.</summary>
      <param name="iterations">Intero con segno a 32 bit che definisce la durata dell'attesa di un thread.</param>
    </member>
    <member name="M:System.Threading.Thread.Start">
      <summary>Determina il cambiamento da parte del sistema operativo dello stato dell'istanza corrente in <see cref="F:System.Threading.ThreadState.Running" />.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Il thread è già stato avviato.</exception>
      <exception cref="T:System.OutOfMemoryException">La memoria disponibile non è sufficiente per avviare il thread.</exception>
    </member>
    <member name="M:System.Threading.Thread.Start(System.Object)">
      <summary>Determina il cambiamento da parte del sistema operativo dello stato dell'istanza corrente in <see cref="F:System.Threading.ThreadState.Running" /> e, facoltativamente, fornisce un oggetto contenente i dati che devono essere usati dal metodo eseguito dal thread.</summary>
      <param name="parameter">Oggetto contenente i dati che devono essere usati dal metodo eseguito dal thread.</param>
      <exception cref="T:System.Threading.ThreadStateException">Il thread è già stato avviato.</exception>
      <exception cref="T:System.OutOfMemoryException">La memoria disponibile non è sufficiente per avviare il thread.</exception>
      <exception cref="T:System.InvalidOperationException">Questo thread è stato creato usando un delegato di <see cref="T:System.Threading.ThreadStart" /> invece di uno di <see cref="T:System.Threading.ParameterizedThreadStart" />.</exception>
    </member>
    <member name="M:System.Threading.Thread.Suspend">
      <summary>Sospende il thread o, se il thread è già sospeso, non avrà alcun effetto.</summary>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread non è stato avviato o è inattivo.</exception>
      <exception cref="T:System.Security.SecurityException">Il chiamante non ha l'oggetto <see cref="T:System.Security.Permissions.SecurityPermission" /> appropriato.</exception>
    </member>
    <member name="M:System.Threading.Thread.TrySetApartmentState(System.Threading.ApartmentState)">
      <summary>Imposta lo stato dell'apartment di un thread prima che venga avviato.</summary>
      <param name="state">Nuovo stato dell'apartment.</param>
      <exception cref="T:System.PlatformNotSupportedException">.NET 5.0 e versioni successive e .NET Core: in tutti i casi in macOS e Linux.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> non è uno stato di apartment valido.</exception>
      <exception cref="T:System.Threading.ThreadStateException">Il thread è stato avviato e completato o la chiamata non viene eseguita dal contesto del thread mentre il thread è in esecuzione.</exception>
      <returns>
        <see langword="true" /> se è impostato lo stato dell'apartment; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Byte@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Double@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int16@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int32@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Int64@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.IntPtr@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Object@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.SByte@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.Single@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt16@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt32@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UInt64@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileRead(System.UIntPtr@)">
      <summary>Legge il valore di un campo. Tale valore è l'ultimo che è stato scritto da un processore qualsiasi in un computer, indipendentemente dal numero di processori o dallo stato della cache del processore.</summary>
      <param name="address">Campo da leggere.</param>
      <returns>Ultimo valore scritto nel campo da un processore.</returns>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Byte@,System.Byte)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Double@,System.Double)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int16@,System.Int16)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int32@,System.Int32)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Int64@,System.Int64)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.IntPtr@,System.IntPtr)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Object@,System.Object)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.SByte@,System.SByte)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.Single@,System.Single)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt16@,System.UInt16)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt32@,System.UInt32)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UInt64@,System.UInt64)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.VolatileWrite(System.UIntPtr@,System.UIntPtr)">
      <summary>Scrive immediatamente un valore in un campo, in modo che tale valore possa essere visibile a tutti i processori nel computer.</summary>
      <param name="address">Campo in cui deve essere scritto il valore.</param>
      <param name="value">Valore da scrivere.</param>
    </member>
    <member name="M:System.Threading.Thread.Yield">
      <summary>Determina che il thread chiamante ceda l'esecuzione a un altro thread pronto per l'esecuzione sul processore corrente. Il sistema operativo seleziona il thread a cui cedere l'esecuzione.</summary>
      <returns>
        <see langword="true" /> se il sistema operativo ha passato l'esecuzione a un altro thread; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.ApartmentState">
      <summary>Ottiene o imposta lo stato dell'apartment del thread.</summary>
      <exception cref="T:System.ArgumentException">Viene effettuato un tentativo di impostare questa proprietà su uno stato che non è uno stato dell'apartment valido (uno stato diverso da apartment a thread singolo (<see langword="STA" />) o apartment con multithreading (<see langword="MTA" />)).</exception>
      <returns>Uno dei valori di <see cref="T:System.Threading.ApartmentState" />. Il valore iniziale è <see langword="Unknown" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentCulture">
      <summary>Ottiene o imposta le impostazioni cultura per il thread corrente.</summary>
      <exception cref="T:System.ArgumentNullException">La proprietà è impostata su <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Solo .NET Core: la lettura o la scrittura delle impostazioni cultura di un thread da un altro thread non sono supportate.</exception>
      <returns>Oggetto che rappresenta le impostazioni cultura per il thread corrente.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentPrincipal">
      <summary>Ottiene o imposta l'entità corrente del thread (per la sicurezza basata sui ruoli).</summary>
      <exception cref="T:System.Security.SecurityException">Il chiamante non ha l'autorizzazione necessaria per impostare l'entità.</exception>
      <returns>Valore <see cref="T:System.Security.Principal.IPrincipal" /> che rappresenta il contesto di sicurezza.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentThread">
      <summary>Ottiene il thread attualmente in esecuzione.</summary>
      <returns>Oggetto <see cref="T:System.Threading.Thread" /> che rappresenta il thread attualmente in esecuzione.</returns>
    </member>
    <member name="P:System.Threading.Thread.CurrentUICulture">
      <summary>Ottiene o imposta le impostazioni cultura correnti usate da Gestione risorse per cercare le risorse specifiche delle impostazioni cultura in fase di esecuzione.</summary>
      <exception cref="T:System.ArgumentNullException">La proprietà è impostata su <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">La proprietà è impostata su un nome delle impostazioni cultura che non può essere usato per individuare un file di risorse. I nomi dei file di risorsa devono includere solo lettere, numeri, trattini o caratteri di sottolineatura.</exception>
      <exception cref="T:System.InvalidOperationException">Solo .NET Core: la lettura o la scrittura delle impostazioni cultura di un thread da un altro thread non sono supportate.</exception>
      <returns>Oggetto che rappresenta le impostazioni cultura correnti.</returns>
    </member>
    <member name="P:System.Threading.Thread.ExecutionContext">
      <summary>Ottiene un oggetto <see cref="T:System.Threading.ExecutionContext" /> contenente informazioni sui diversi contesti del thread corrente.</summary>
      <returns>Oggetto <see cref="T:System.Threading.ExecutionContext" /> che consolida le informazioni di contesto per il thread corrente.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsAlive">
      <summary>Ottiene un valore che indica lo stato di esecuzione del thread corrente.</summary>
      <returns>Viene restituito <see langword="true" /> se il thread è stato avviato, ma non è terminato normalmente o è stato interrotto. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsBackground">
      <summary>Ottiene o imposta un valore che indica se il thread viene eseguito in background.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Thread inattivo.</exception>
      <returns>
        <see langword="true" /> se il thread viene o verrà eseguito in background; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.IsThreadPoolThread">
      <summary>Ottiene un valore che indica se un thread appartiene o meno al pool di thread gestiti.</summary>
      <returns>
        <see langword="true" /> se il thread appartiene al pool di thread gestiti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.ManagedThreadId">
      <summary>Ottiene un identificatore univoco per il thread gestito corrente.</summary>
      <returns>Intero che rappresenta un identificatore univoco per il thread gestito.</returns>
    </member>
    <member name="P:System.Threading.Thread.Name">
      <summary>Ottiene o imposta il nome del thread.</summary>
      <exception cref="T:System.InvalidOperationException">È stata richiesta un'operazOttiene o imposta il descrittore di sicurezza per questa voce.ione set, ma la proprietà <see langword="Name" /> è già stata impostata.</exception>
      <returns>Stringa che contiene il nome del thread oppure <see langword="null" /> se non è stato impostato alcun nome.</returns>
    </member>
    <member name="P:System.Threading.Thread.Priority">
      <summary>Ottiene o imposta un valore che indica la priorità di pianificazione di un thread.</summary>
      <exception cref="T:System.Threading.ThreadStateException">Il thread ha raggiunto uno stato finale, ad esempio <see cref="F:System.Threading.ThreadState.Aborted" />.</exception>
      <exception cref="T:System.ArgumentException">Il valore specificato per un'operazione set non è un valore <see cref="T:System.Threading.ThreadPriority" /> valido.</exception>
      <returns>Uno dei valori di <see cref="T:System.Threading.ThreadPriority" />. Il valore predefinito è <see cref="F:System.Threading.ThreadPriority.Normal" />.</returns>
    </member>
    <member name="P:System.Threading.Thread.ThreadState">
      <summary>Ottiene un valore contenente gli stati del thread corrente.</summary>
      <returns>Uno dei valori di <see cref="T:System.Threading.ThreadState" /> che indica lo stato del thread corrente. Il valore iniziale è <see cref="F:System.Threading.ThreadState.Unstarted" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadAbortException">
      <summary>Eccezione generata quando viene eseguita una chiamata al metodo <see cref="M:System.Threading.Thread.Abort(System.Object)" />. La classe non può essere ereditata.</summary>
    </member>
    <member name="P:System.Threading.ThreadAbortException.ExceptionState">
      <summary>Viene fornito un oggetto che contiene informazioni specifiche dell'applicazione relative all'interruzione del thread.</summary>
      <returns>Oggetto contenente informazioni specifiche dell'applicazione.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>Fornisce dati per l'evento <see cref="E:System.Windows.Forms.Application.ThreadException" />.</summary>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadExceptionEventArgs" />.</summary>
      <param name="t">
        <see cref="T:System.Exception" /> generata.</param>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>Ottiene l'oggetto <see cref="T:System.Exception" /> che si è verificato.</summary>
      <returns>
        <see cref="T:System.Exception" /> generata.</returns>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>Rappresenta il metodo che gestirà l'evento <see cref="E:System.Windows.Forms.Application.ThreadException" /> di un oggetto <see cref="T:System.Windows.Forms.Application" />.</summary>
      <param name="sender">Origine dell'evento.</param>
      <param name="e">Oggetto <see cref="T:System.Threading.ThreadExceptionEventArgs" /> che contiene i dati dell'evento.</param>
    </member>
    <member name="T:System.Threading.ThreadInterruptedException">
      <summary>Eccezione generata quando un <see cref="T:System.Threading.Thread" /> viene interrotto mentre si trova nello stato di attesa.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadInterruptedException" /> con le proprietà predefinite.</summary>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadInterruptedException" /> con dati serializzati.</summary>
      <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> che contiene i dati oggetto serializzati relativi all'eccezione generata.</param>
      <param name="context">Oggetto <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenente le informazioni contestuali sull'origine o sulla destinazione.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadInterruptedException" /> con un messaggio di errore specificato.</summary>
      <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
    </member>
    <member name="M:System.Threading.ThreadInterruptedException.#ctor(System.String,System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadInterruptedException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
      <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
      <param name="innerException">Eccezione che ha determinato l'eccezione corrente. Se il parametro <paramref name="innerException" /> non è <see langword="null" />, l'eccezione corrente viene generata in un blocco <see langword="catch" /> in cui viene gestita l'eccezione interna.</param>
    </member>
    <member name="T:System.Threading.ThreadPriority">
      <summary>Consente di specificare la priorità di pianificazione di un <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.AboveNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> può essere pianificato dopo i thread la cui priorità è <see langword="Highest" /> e prima di quelli la cui priorità è <see langword="Normal" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.BelowNormal">
      <summary>
        <see cref="T:System.Threading.Thread" /> può essere pianificato dopo i thread la cui priorità è <see langword="Normal" /> e prima di quelli la cui priorità è <see langword="Lowest" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Highest">
      <summary>
        <see cref="T:System.Threading.Thread" /> può essere pianificato prima dei thread con una qualsiasi priorità.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Lowest">
      <summary>
        <see cref="T:System.Threading.Thread" /> può essere pianificato dopo i thread con una qualsiasi priorità.</summary>
    </member>
    <member name="F:System.Threading.ThreadPriority.Normal">
      <summary>
        <see cref="T:System.Threading.Thread" /> può essere pianificato dopo i thread la cui priorità è <see langword="AboveNormal" /> e prima di quelli la cui priorità è <see langword="BelowNormal" />. I thread presentano la priorità <see langword="Normal" /> per impostazione predefinita.</summary>
    </member>
    <member name="T:System.Threading.ThreadStart">
      <summary>Rappresenta il metodo eseguito in un oggetto <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStartException">
      <summary>Eccezione generata quando si verifica un errore in un thread gestito dopo l'avvio del thread del sistema operativo sottostante, ma prima che il thread sia pronto per l'esecuzione di codice utente.</summary>
    </member>
    <member name="T:System.Threading.ThreadState">
      <summary>Vengono specificati gli stati di esecuzione di un <see cref="T:System.Threading.Thread" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Aborted">
      <summary>Lo stato del thread include <see cref="F:System.Threading.ThreadState.AbortRequested" /> e il thread è ora inattivo, ma il relativo stato non è ancora stato modificato in <see cref="F:System.Threading.ThreadState.Stopped" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.AbortRequested">
      <summary>Il metodo <see cref="M:System.Threading.Thread.Abort(System.Object)" /> è stato richiamato dal thread ma il thread non ha ancora ricevuto l'oggetto <see cref="T:System.Threading.ThreadAbortException" /> sospeso che tenterà di sottoporlo al processo di terminazione.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Background">
      <summary>Il thread sarà eseguito come un thread in background, invece che come un thread in primo piano. Questo stato viene controllato dall'impostazione della proprietà <see cref="P:System.Threading.Thread.IsBackground" />.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Running">
      <summary>Il thread è stato avviato e non è ancora stato interrotto.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Stopped">
      <summary>Il thread è stato interrotto.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.StopRequested">
      <summary>Il thread riceverà richiesta di interruzione. Solo per uso interno.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Suspended">
      <summary>Il thread è stato sospeso.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.SuspendRequested">
      <summary>Il thread riceverà richiesta di sospensione.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.Unstarted">
      <summary>Il metodo <see cref="M:System.Threading.Thread.Start" /> non è stato richiamato dal thread.</summary>
    </member>
    <member name="F:System.Threading.ThreadState.WaitSleepJoin">
      <summary>Il thread è bloccato. Potrebbe essere il risultato della chiamata al metodo <see cref="M:System.Threading.Thread.Sleep(System.Int32)" /> o <see cref="M:System.Threading.Thread.Join" />, della richiesta di un blocco, ad esempio tramite la chiamata a <see cref="M:System.Threading.Monitor.Enter(System.Object)" /> o <see cref="M:System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)" />, oppure dell'attesa di un oggetto di sincronizzazione thread, ad esempio <see cref="T:System.Threading.ManualResetEvent" />.</summary>
    </member>
    <member name="T:System.Threading.ThreadStateException">
      <summary>Eccezione generata quando un <see cref="T:System.Threading.Thread" /> si trova in un <see cref="P:System.Threading.Thread.ThreadState" /> non valido per la chiamata al metodo.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadStateException" /> con le proprietà predefinite.</summary>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadStateException" /> con dati serializzati.</summary>
      <param name="info">Oggetto <see cref="T:System.Runtime.Serialization.SerializationInfo" /> che contiene i dati oggetto serializzati relativi all'eccezione generata.</param>
      <param name="context">Oggetto <see cref="T:System.Runtime.Serialization.StreamingContext" /> contenente le informazioni contestuali sull'origine o sulla destinazione.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadStateException" /> con un messaggio di errore specificato.</summary>
      <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
    </member>
    <member name="M:System.Threading.ThreadStateException.#ctor(System.String,System.Exception)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.ThreadStateException" /> con un messaggio di errore specificato e un riferimento all'eccezione interna che è la causa dell'eccezione corrente.</summary>
      <param name="message">Messaggio di errore in cui viene indicato il motivo dell'eccezione.</param>
      <param name="innerException">Eccezione che ha determinato l'eccezione corrente. Se il parametro <paramref name="innerException" /> non è <see langword="null" />, l'eccezione corrente viene generata in un blocco <see langword="catch" /> in cui viene gestita l'eccezione interna.</param>
    </member>
  </members>
</doc>
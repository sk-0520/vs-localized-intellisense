<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.PerformanceCounter</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.CounterCreationData">
      <summary>사용자 지정 카운터의 카운터 형식, 이름 및 도움말 문자열을 정의합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationData" /> 클래스의 새 인스턴스를 이름과 도움말 문자열을 비어있는 <see langword="NumberOfItems32" /> 형식의 카운터로 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
      <summary>지정 카운터 이름과 도움말 문자열을 이용해 <see cref="T:System.Diagnostics.CounterCreationData" /> 클래스의 새 인스턴스를 지정 형식의 카운터로 초기화합니다.</summary>
      <param name="counterName">카운터의 이름은 해당 범주내에서 고유해야 합니다.</param>
      <param name="counterHelp">카운터의 동작을 설명하는 텍스트입니다.</param>
      <param name="counterType">카운터의 동작을 식별하는 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 입니다.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 열거형의 멤버가 아닌 <paramref name="counterType" />의 값을 지정한 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterHelp" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterHelp">
      <summary>사용자 지정 카운터의 설명을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">지정한 값이 <see langword="null" />인 경우</exception>
      <returns>카운터의 동작을 설명하는 텍스트입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterName">
      <summary>특성의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">지정한 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">지정한 값이 길이가 1-80자가 아니거나 큰따옴표, 제어 문자 또는 선행 공백이나 후행 공백을 포함하는 경우</exception>
      <returns>해당 범주내에서 고유한 카운터의 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterType">
      <summary>사용자 지정 카운터의 성능 카운터 형식을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Diagnostics.PerformanceCounterType" /> 열거형의 멤버가 아닌 형식을 지정한 경우</exception>
      <returns>성능 카운터 동작을 정의하는 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.CounterCreationDataCollection">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationData" /> 개체의 강력한 형식의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor">
      <summary>연결된 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스가 없는 상태에서 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationData[])">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 인스턴스의 지정된 배열을 사용하여 <see cref="T:System.Diagnostics.CounterCreationData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 <see cref="T:System.Diagnostics.CounterCreationData" />을 초기화하는 데 사용할 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 인스턴스의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationDataCollection)">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 인스턴스의 지정된 컬렉션을 사용하여 <see cref="T:System.Diagnostics.CounterCreationData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">이 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />을 초기화하는 데 사용할 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스가 포함된 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Add(System.Diagnostics.CounterCreationData)">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationData" /> 클래스의 인스턴스를 컬렉션에 추가합니다.</summary>
      <param name="value">기존 컬렉션에 추가할 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />이 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체가 아닙니다.</exception>
      <returns>새 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationData[])">
      <summary>컬렉션에 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스의 지정된 배열을 추가합니다.</summary>
      <param name="value">기존 컬렉션에 추가할 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationDataCollection)">
      <summary>컬렉션에 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스의 지정된 컬렉션을 추가합니다.</summary>
      <param name="value">기존 컬렉션에 추가할 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스의 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Contains(System.Diagnostics.CounterCreationData)">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스가 컬렉션에 있는지 여부를 확인합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체입니다.</param>
      <returns>지정된 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.CopyTo(System.Diagnostics.CounterCreationData[],System.Int32)">
      <summary>배열의 지정된 인덱스에서 시작하여 <see cref="T:System.Diagnostics.CounterCreationData" />의 요소를 배열에 복사합니다.</summary>
      <param name="array">컬렉션에 추가할 <see cref="T:System.Diagnostics.CounterCreationData" /> 인스턴스의 배열입니다.</param>
      <param name="index">새 인스턴스를 추가할 위치입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Diagnostics.CounterCreationDataCollection" />의 요소 수가 <paramref name="index" />에서 대상 배열 끝까지 사용 가능한 공간보다 큰 경우</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.IndexOf(System.Diagnostics.CounterCreationData)">
      <summary>컬렉션에 있는 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체의 인덱스를 반환합니다.</summary>
      <param name="value">컬렉션에서 찾을 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체입니다.</param>
      <returns>컬렉션에서 개체를 찾은 경우 지정된 <see cref="T:System.Diagnostics.CounterCreationData" />의 인덱스(0부터 시작)이고, 개체를 찾지 못한 경우 -1입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Insert(System.Int32,System.Diagnostics.CounterCreationData)">
      <summary>컬렉션의 지정된 인덱스에 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체를 삽입합니다.</summary>
      <param name="index">
        <see cref="T:System.Diagnostics.CounterCreationData" />가 삽입될 0부터 시작하는 인덱스입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.Diagnostics.CounterCreationData" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />이 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체가 아닙니다.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 컬렉션의 항목 수보다 큰 경우</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.OnValidate(System.Object)">
      <summary>지정된 개체를 검사하여 유효한 <see cref="T:System.Diagnostics.CounterCreationData" /> 형식인지 확인합니다.</summary>
      <param name="value">유효성을 검사할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />이 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체가 아닙니다.</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Remove(System.Diagnostics.CounterCreationData)">
      <summary>컬렉션에서 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체를 제거합니다.</summary>
      <param name="value">컬렉션에서 제거할 <see cref="T:System.Diagnostics.CounterCreationData" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />이 <see cref="T:System.Diagnostics.CounterCreationData" /> 개체가 아닙니다.  
  
또는 
 <paramref name="value" />이 컬렉션에 없습니다.</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationDataCollection.Item(System.Int32)">
      <summary>
        <see cref="T:System.Diagnostics.CounterCreationData" /> 컬렉션을 인덱싱합니다.</summary>
      <param name="index">
        <see cref="T:System.Diagnostics.CounterCreationDataCollection" />의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 가 0보다 작습니다.  
  
또는 
 <paramref name="index" />가 컬렉션의 항목 수보다 크거나 같은 경우</exception>
      <returns>컬렉션의 개별 요소에 액세스하는 데 사용되는 컬렉션 인덱스입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.CounterSample">
      <summary>성능 카운터의 원시 데이터를 보유하는 구조체를 정의합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.CounterSample.Empty">
      <summary>
        <see langword="NumberOfItems32" /> 형식의 초기화되지 않은 빈 성능 카운터 샘플을 정의합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)">
      <summary>
        <see cref="T:System.Diagnostics.CounterSample" /> 구조체의 새 인스턴스를 초기화하고 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 속성을 0으로 설정합니다.</summary>
      <param name="rawValue">성능 카운터 샘플과 연결된 숫자 값입니다.</param>
      <param name="baseValue">샘플이 여러 개의 카운터에 기반하는 경우에 사용할 카운터의 선택적인 기본 원시 값입니다.</param>
      <param name="counterFrequency">카운터를 읽는 빈도입니다.</param>
      <param name="systemFrequency">시스템에서 카운터를 읽는 빈도입니다.</param>
      <param name="timeStamp">원시 타임스탬프입니다.</param>
      <param name="timeStamp100nSec">초정밀 원시 타임스탬프입니다.</param>
      <param name="counterType">이 샘플이 스냅샷으로 사용되는 카운터의 형식을 나타내는 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 개체입니다.</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)">
      <summary>
        <see cref="T:System.Diagnostics.CounterSample" /> 구조체의 새 인스턴스를 초기화하고 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 속성을 전달된 값으로 설정합니다.</summary>
      <param name="rawValue">성능 카운터 샘플과 연결된 숫자 값입니다.</param>
      <param name="baseValue">샘플이 여러 개의 카운터에 기반하는 경우에 사용할 카운터의 선택적인 기본 원시 값입니다.</param>
      <param name="counterFrequency">카운터를 읽는 빈도입니다.</param>
      <param name="systemFrequency">시스템에서 카운터를 읽는 빈도입니다.</param>
      <param name="timeStamp">원시 타임스탬프입니다.</param>
      <param name="timeStamp100nSec">초정밀 원시 타임스탬프입니다.</param>
      <param name="counterType">이 샘플이 스냅샷으로 사용되는 카운터의 형식을 나타내는 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 개체입니다.</param>
      <param name="counterTimeStamp">샘플을 가져온 시간입니다.</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)">
      <summary>단일 샘플 위치를 사용하여 카운터의 성능 데이터를 계산합니다. 일반적으로 이 메서드는 계산되지 않은 성능 카운터 형식에 사용됩니다.</summary>
      <param name="counterSample">성능 데이터를 계산하는 기준점으로 사용할 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <returns>계산된 성능 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>샘플 위치 두 개를 사용하여 카운터의 성능 데이터를 계산합니다. 일반적으로 이 메서드는 평균 등의 계산된 성능 카운터 형식에 사용됩니다.</summary>
      <param name="counterSample">성능 데이터를 계산하는 기준점으로 사용할 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <param name="nextCounterSample">성능 데이터를 계산하는 끝점으로 사용할 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <returns>계산된 성능 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)">
      <summary>지정된 <see cref="T:System.Diagnostics.CounterSample" /> 구조체가 현재 <see cref="T:System.Diagnostics.CounterSample" /> 구조체와 같은지 여부를 나타냅니다.</summary>
      <param name="sample">해당 인스턴스와 비교할 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <returns>
        <paramref name="sample" />가 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Object)">
      <summary>지정된 구조체가 <see cref="T:System.Diagnostics.CounterSample" /> 구조체이고 현재 <see cref="T:System.Diagnostics.CounterSample" /> 구조체와 동일한지 여부를 나타냅니다.</summary>
      <param name="o">현재 구조체와 비교할 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <returns>
        <paramref name="o" />가 <see cref="T:System.Diagnostics.CounterSample" /> 구조체이고 현재 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.GetHashCode">
      <summary>현재 카운터 샘플의 해시 코드를 가져옵니다.</summary>
      <returns>현재 카운터 샘플의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>두 <see cref="T:System.Diagnostics.CounterSample" /> 구조체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <param name="b">
        <paramref name="a" /> 매개 변수로 지정한 구조체와 비교할 다른 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <returns>
        <paramref name="a" />과 <paramref name="b" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>두 <see cref="T:System.Diagnostics.CounterSample" /> 구조체가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a">
        <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <param name="b">
        <paramref name="a" /> 매개 변수로 지정한 구조체와 비교할 다른 <see cref="T:System.Diagnostics.CounterSample" /> 구조체입니다.</param>
      <returns>
        <paramref name="a" />와 <paramref name="b" />가 같지 않으면 <see langword="true" />이고 같으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.BaseValue">
      <summary>카운터의 선택적인 기본 원시 값을 가져옵니다.</summary>
      <returns>샘플이 여러 개의 카운터에 기반하는 경우에만 사용되는 기본 원시 값입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterFrequency">
      <summary>원시 카운터 빈도를 가져옵니다.</summary>
      <returns>카운터를 읽는 빈도입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterTimeStamp">
      <summary>카운터의 타임스탬프를 가져옵니다.</summary>
      <returns>샘플을 가져온 시간입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterType">
      <summary>성능 카운터 형식을 가져옵니다.</summary>
      <returns>이 샘플이 스냅샷으로 사용되는 카운터의 형식을 나타내는 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.RawValue">
      <summary>카운터의 원시 값을 가져옵니다.</summary>
      <returns>성능 카운터 샘플과 연결된 숫자 값입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.SystemFrequency">
      <summary>원시 시스템 빈도를 가져옵니다.</summary>
      <returns>시스템에서 카운터를 읽는 빈도입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp">
      <summary>원시 타임스탬프를 가져옵니다.</summary>
      <returns>시스템 타임스탬프입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp100nSec">
      <summary>초정밀 원시 타임스탬프를 가져옵니다.</summary>
      <returns>0.1밀리초 내에서 표현되는 시스템 타임스탬프입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.CounterSampleCalculator">
      <summary>성능 카운터 데이터를 해석하는 유틸리티 함수 집합을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample)">
      <summary>원시 카운터 샘플 하나의 계산된 값을 구합니다.</summary>
      <param name="newSample">시스템이 가장 최근에 가져온 샘플을 나타내는 <see cref="T:System.Diagnostics.CounterSample" /> 입니다.</param>
      <returns>성능 카운터 계산값의 부동 소수점 표현입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>원시 카운터 샘플 두 개의 계산된 값을 구합니다.</summary>
      <param name="oldSample">시스템이 이전에 가져온 샘플을 나타내는 <see cref="T:System.Diagnostics.CounterSample" /> 입니다.</param>
      <param name="newSample">시스템이 가장 최근에 가져온 샘플을 나타내는 <see cref="T:System.Diagnostics.CounterSample" /> 입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="oldSample" />이 <paramref name="newSample" />과 다른 카운터 형식을 사용하는 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="newSample" /> 카운터 형식에 PDH(성능 데이터 도우미) 오류가 있는 경우. 자세한 내용은 이 설명서의 Win32 및 COM 개발 단원에서 "PDH 인터페이스 반환 값 확인"을 참조하십시오.</exception>
      <returns>성능 카운터 계산값의 부동 소수점 표현입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.ICollectData">
      <summary>성능 카운터를 사용하여 작업할 때 시스템이 로드하는 성능 DLL에 대한 성능 데이터를 준비합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CloseData">
      <summary>성능 DLL의 성능 데이터 닫기 함수에 의해 호출됩니다.</summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>성능 DLL에 대한 성능 데이터를 수집합니다.</summary>
      <param name="id">호출 인덱스입니다.</param>
      <param name="valueName">요청된 개체 식별자가 포함된 유니코드 문자열 목록에 대한 포인터입니다.</param>
      <param name="data">데이터 버퍼에 대한 포인터입니다.</param>
      <param name="totalBytes">바이트 수에 대한 포인터입니다.</param>
      <param name="res">이 메서드는 반환될 때 데이터 뒤의 첫 번째 바이트에 대한 <see cref="T:System.IntPtr" />를 포함하고, 오류가 발생한 경우 -1, 더 큰 버퍼가 필요한 경우에는 -2를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="T:System.Diagnostics.InstanceData">
      <summary>성능 카운터 샘플과 관련된 인스턴스 데이터를 보유합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceData.#ctor(System.String,System.Diagnostics.CounterSample)">
      <summary>지정 샘플과 성능 카운터 인스턴스를 이용해 새 InstanceData 클래스 인스턴스를 초기화합니다.</summary>
      <param name="instanceName">성능 카운터와 관련된 인스턴스 이름입니다.</param>
      <param name="sample">
        <paramref name="instanceName" /> 매개 변수가 지정한 인스턴스에서 가져온 <see cref="T:System.Diagnostics.CounterSample" /> 입니다.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceData.InstanceName">
      <summary>이러한 인스턴스 데이터와 관련된 인스턴스 이름을 가져옵니다.</summary>
      <returns>성능 카운터와 관련된 인스턴스 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.RawValue">
      <summary>성능 카운터 샘플과 관련된 원시 데이터 값을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Diagnostics.InstanceData.Sample" /> 속성과 관련된 성능 카운터 샘플이 읽은 원시 값입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.Sample">
      <summary>이 데이터를 생성한 성능 카운터 샘플을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Diagnostics.CounterSample" /> 속성이 지정한 인스턴스에서 가져온 <see cref="P:System.Diagnostics.InstanceData.InstanceName" /> 입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollection">
      <summary>
        <see cref="T:System.Diagnostics.InstanceData" /> 개체의 강력한 형식의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.#ctor(System.String)">
      <summary>성능 인스턴스를 정의하는 지정된 성능 카운터를 사용하여 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="counterName">자주 계산하고 있는 수량을 설명하는 카운터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.Contains(System.String)">
      <summary>인덱싱된 <see cref="T:System.Diagnostics.InstanceData" /> 개체 중 하나로 식별되는 지정된 이름의 성능 인스턴스가 해당 컬렉션에 존재하는지 여부를 확인합니다.</summary>
      <param name="instanceName">이 컬렉션에서 찾을 인스턴스의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>해당 인스턴스가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.CopyTo(System.Diagnostics.InstanceData[],System.Int32)">
      <summary>컬렉션의 항목을 지정된 1차원 배열의 지정된 인덱스에 복사합니다.</summary>
      <param name="instances">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">새 인스턴스를 추가할 인덱스 값(0부터 시작)입니다.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.CounterName">
      <summary>해당 인스턴스 데이터가 들어 있는 성능 카운터의 이름을 가져옵니다.</summary>
      <returns>성능 카운터의 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Item(System.String)">
      <summary>이 카운터와 관련된 인스턴스 데이터를 가져옵니다. 이 데이터는 일반적으로 원시 카운터 값의 집합입니다.</summary>
      <param name="instanceName">성능 카운터 범주 인스턴스의 이름이거나, 범주에 단일 인스턴스가 포함된 경우 빈 문자열("")입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Diagnostics.InstanceData" /> 개체가 인덱싱될 때 기준이 되는 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 항목입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Keys">
      <summary>이 인스턴스 데이터와 관련된 개체 및 개체의 카운터 레지스트리 키를 가져옵니다.</summary>
      <returns>개체별 레지스트리 키 집합을 나타내는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Values">
      <summary>카운터의 인스턴스 데이터를 구성하는 원시 카운터 값을 가져옵니다.</summary>
      <returns>카운터의 원시 데이터 값을 나타내는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollectionCollection">
      <summary>
        <see cref="T:System.Diagnostics.InstanceDataCollection" /> 개체의 강력한 형식의 컬렉션을 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.Contains(System.String)">
      <summary>인덱싱된 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 개체 중 하나로 식별되는 지정된 카운터의 인스턴스 데이터 컬렉션이 해당 컬렉션에 존재하는지 여부를 확인합니다.</summary>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>지정된 카운터를 포함하는 인스턴스 데이터 컬렉션이 해당 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.CopyTo(System.Diagnostics.InstanceDataCollection[],System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 인스턴스의 배열을 복사합니다.</summary>
      <param name="counters">포함된 카운터로 식별되는, 컬렉션에 추가할 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 인스턴스의 배열입니다.</param>
      <param name="index">새 인스턴스를 추가할 위치입니다.</param>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Item(System.String)">
      <summary>지정한 카운터의 인스턴스 데이터를 가져옵니다.</summary>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Diagnostics.InstanceDataCollection" /> 개체가 인덱싱될 때 기준이 되는 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 항목입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Keys">
      <summary>해당 개체 및 이 인스턴스 데이터 컬렉션과 관련된 개체의 카운터 레지스트리 키를 가져옵니다.</summary>
      <returns>개체별 레지스트리 키 집합을 나타내는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Values">
      <summary>카운터의 인스턴스 컬렉션을 구성하는 인스턴스 데이터 값을 가져옵니다.</summary>
      <returns>카운터의 인스턴스 및 관련된 데이터 값을 나타내는 <see cref="T:System.Collections.ICollection" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounter">
      <summary>Windows NT 성능 카운터 구성 요소를 나타냅니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize">
      <summary>성능 카운터에서 공유하는 전역 메모리의 크기(바이트)를 지정합니다. 기본 크기는 524,288바이트입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 클래스의 새 읽기 전용 인스턴스를 초기화하면서 이 인스턴스를 시스템이나 사용자 지정 성능 카운터와 연결하지 않습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 클래스의 새 읽기 전용 인스턴스를 초기화하고 로컬 컴퓨터의 지정 시스템이나 사용자 지정 성능 카운터에 연결합니다. 이 생성자를 사용하려면 범주에 단일 인스턴스가 있어야 합니다.</summary>
      <param name="categoryName">이 성능 카운터와 연결된 성능 카운터 범주(성능 개체)의 이름입니다.</param>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="counterName" />가 빈 문자열("")인 경우  
  
또는 
지정한 범주가 없는 경우  
  
또는 
지정된 범주가 다중 인스턴스로 표시되어 있으며 인스턴스 이름을 사용하여 성능 카운터를 만들어야 합니다.  
  
또는 
 <paramref name="categoryName" />과 <paramref name="counterName" />이 서로 다른 언어로 지역화된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 또는 <paramref name="counterName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 클래스의 새 읽기 전용 인스턴스 또는 읽기/쓰기 인스턴스를 초기화하여 로컬 컴퓨터의 지정 시스템이나 사용자 지정 성능 카운터에 연결합니다. 이 생성자를 사용하려면 범주에 단일 인스턴스가 있어야 합니다.</summary>
      <param name="categoryName">이 성능 카운터와 연결된 성능 카운터 범주(성능 개체)의 이름입니다.</param>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <param name="readOnly">카운터 자체는 읽기/쓰기가 가능할 수도 있지만 읽기 전용 모드로 카운터에 액세스하려면 <see langword="true" />이고, 읽기/쓰기 모드로 카운터에 액세스하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" />이 빈 문자열("")인 경우  
  
또는 
<paramref name="counterName" />이 빈 문자열("")인 경우  
  
또는 
지정한 범주가 없는 경우 (<paramref name="readOnly" />가 <see langword="true" />인 경우)  
  
또는 
지정한 범주가 .NET Framework 사용자 지정 범주가 아닌 경우(<paramref name="readOnly" />가 <see langword="false" />인 경우)  
  
또는 
지정된 범주가 다중 인스턴스로 표시되어 있으며 인스턴스 이름을 사용하여 성능 카운터를 만들어야 합니다.  
  
또는 
 <paramref name="categoryName" />과 <paramref name="counterName" />이 서로 다른 언어로 지역화된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 또는 <paramref name="counterName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 클래스의 새 읽기 전용 인스턴스를 초기화하여 로컬 컴퓨터의 지정 시스템이나 사용자 지정 성능 카운터 및 범주 인스턴스에 연결합니다.</summary>
      <param name="categoryName">이 성능 카운터와 연결된 성능 카운터 범주(성능 개체)의 이름입니다.</param>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <param name="instanceName">성능 카운터 범주 인스턴스의 이름입니다. 범주에 단일 인스턴스가 포함된 경우에는 빈 문자열("") 입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="counterName" />가 빈 문자열("")인 경우  
  
또는 
지정한 범주가 잘못된 경우  
  
또는 
지정된 범주가 다중 인스턴스로 표시되어 있으며 인스턴스 이름을 사용하여 성능 카운터를 만들어야 합니다.  
  
또는 
 <paramref name="instanceName" />이 127자보다 긴 경우  
  
또는 
 <paramref name="categoryName" />과 <paramref name="counterName" />이 서로 다른 언어로 지역화된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 또는 <paramref name="counterName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 클래스의 새 읽기 전용 또는 읽기/쓰기 인스턴스를 초기화하여 로컬 컴퓨터의 지정 시스템이나 사용자 지정 성능 카운터 및 범주 인스턴스에 연결합니다.</summary>
      <param name="categoryName">이 성능 카운터와 연결된 성능 카운터 범주(성능 개체)의 이름입니다.</param>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <param name="instanceName">성능 카운터 범주 인스턴스의 이름입니다. 범주에 단일 인스턴스가 포함된 경우에는 빈 문자열("") 입니다.</param>
      <param name="readOnly">읽기 전용 모드로 카운터에 액세스하려면 <see langword="true" />이고, 읽기/쓰기 모드로 카운터에 액세스하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="counterName" />가 빈 문자열("")인 경우  
  
또는 
요청된 읽기/쓰기 권한 설정이 이 카운터에 대해 유효하지 않습니다.  
  
또는 
지정한 범주가 없는 경우(<paramref name="readOnly" />가 <see langword="true" />인 경우)  
  
또는 
지정한 범주가 .NET Framework 사용자 지정 범주가 아닌 경우(<paramref name="readOnly" />가 <see langword="false" />인 경우)  
  
또는 
지정된 범주가 다중 인스턴스로 표시되어 있으며 인스턴스 이름을 사용하여 성능 카운터를 만들어야 합니다.  
  
또는 
 <paramref name="instanceName" />이 127자보다 긴 경우  
  
또는 
 <paramref name="categoryName" />과 <paramref name="counterName" />이 서로 다른 언어로 지역화된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 또는 <paramref name="counterName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 클래스의 새 읽기 전용 인스턴스를 초기화하여 특정 컴퓨터의 지정 시스템이나 사용자 지정 성능 카운터 및 범주 인스턴스에 연결합니다.</summary>
      <param name="categoryName">이 성능 카운터와 연결된 성능 카운터 범주(성능 개체)의 이름입니다.</param>
      <param name="counterName">성능 카운터의 이름입니다.</param>
      <param name="instanceName">성능 카운터 범주 인스턴스의 이름입니다. 범주에 단일 인스턴스가 포함된 경우에는 빈 문자열("") 입니다.</param>
      <param name="machineName">성능 카운터 및 관련 범주가 있는 컴퓨터입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" />가 빈 문자열("")인 경우  
  
또는 
 <paramref name="counterName" />가 빈 문자열("")인 경우  
  
또는 
요청된 읽기/쓰기 권한 설정이 이 카운터에 대해 유효하지 않습니다.  
  
또는 
지정한 컴퓨터에 카운터가 없는 경우  
  
또는 
지정된 범주가 다중 인스턴스로 표시되어 있으며 인스턴스 이름을 사용하여 성능 카운터를 만들어야 합니다.  
  
또는 
 <paramref name="instanceName" />이 127자보다 긴 경우  
  
또는 
 <paramref name="categoryName" />과 <paramref name="counterName" />이 서로 다른 언어로 지역화된 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 매개 변수가 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 또는 <paramref name="counterName" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.BeginInit">
      <summary>폼 또는 다른 구성 요소에서 사용하는 <see cref="T:System.Diagnostics.PerformanceCounter" /> 인스턴스의 초기화를 시작합니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Close">
      <summary>성능 카운터를 닫고 이 성능 카운터 인스턴스가 할당한 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.CloseSharedResources">
      <summary>카운터에서 할당한 성능 카운터 라이브러리의 공유 상태를 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Decrement">
      <summary>효율적인 원자 단위 연산을 통해 관련 성능 카운터를 1씩 감소시킵니다.</summary>
      <exception cref="T:System.InvalidOperationException">카운터는 읽기 전용이므로 애플리케이션에서 카운터를 감소시킬 수 없는 경우  
  
또는 
인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <returns>감소된 카운터 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.EndInit">
      <summary>폼 또는 다른 구성 요소에서 사용하는 <see cref="T:System.Diagnostics.PerformanceCounter" /> 인스턴스의 초기화를 끝냅니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Increment">
      <summary>효율적인 원자 단위 연산을 통해 관련 성능 카운터를 1씩 증가시킵니다.</summary>
      <exception cref="T:System.InvalidOperationException">카운터는 읽기 전용이므로 애플리케이션에서 카운터를 증가시킬 수 없는 경우  
  
또는 
인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <returns>증가된 카운터 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)">
      <summary>효율적인 원자 단위 연산을 통해 관련 성능 카운터의 값을 지정한 양 만큼 증가 또는 감소시킵니다.</summary>
      <param name="value">증분 값입니다. (음수 값은 카운터를 감소시킵니다.)</param>
      <exception cref="T:System.InvalidOperationException">카운터는 읽기 전용이므로 애플리케이션에서 카운터를 증가시킬 수 없는 경우  
  
또는 
인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <returns>새 카운터 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextSample">
      <summary>카운터 샘플을 가져와서 이에 대한 원시 값 또는 계산되지 않은 값을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>이 카운터에 대해 시스템이 다음에 가져오는 원시 값을 나타내는 <see cref="T:System.Diagnostics.CounterSample" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextValue">
      <summary>카운터 샘플을 가져와 계산된 값을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>이 카운터에 대해 시스템이 다음에 가져오는 계산된 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.RemoveInstance">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 개체의 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName" /> 속성에서 지정한 범주 인스턴스를 삭제합니다.</summary>
      <exception cref="T:System.InvalidOperationException">이 카운터가 읽기 전용이기 때문에 해당 범주와 관련된 인스턴스를 제거할 수 없는 경우  
  
또는 
인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CategoryName">
      <summary>이 성능 카운터에 대한 성능 카운터 범주의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CategoryName" />이 <see langword="null" />인 경우</exception>
      <returns>이 성능 카운터와 연결된 성능 카운터 범주(성능 개체)의 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterHelp">
      <summary>이 성능 카운터에 대한 설명을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 인스턴스가 성능 카운터와 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>이 성능 카운터가 측정하는 항목 또는 수량에 대한 설명입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterName">
      <summary>이 <see cref="T:System.Diagnostics.PerformanceCounter" /> 인스턴스와 연결된 성능 카운터의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CounterName" />이 <see langword="null" />인 경우</exception>
      <returns>일반적으로 계산하고 있는 수량을 설명하는 카운터의 이름입니다. 이 이름은 성능 카운터 관리자 MMC 스냅인의 카운터 추가 대화 상자에서 카운터 목록에 표시됩니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterType">
      <summary>관련된 성능 카운터의 카운터 형식을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>카운터가 모니터링 애플리케이션과 상호 작용하는 방법, 카운터에 들어 있는 값의 속성(예: 계산된 값 또는 계산되지 않은 값) 등을 설명하는 <see cref="T:System.Diagnostics.PerformanceCounterType" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceLifetime">
      <summary>프로세스의 수명을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">값 집합이 <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 열거형의 멤버가 아닌 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" />가 초기화된 후에 <see cref="T:System.Diagnostics.PerformanceCounter" />이 설정된 경우</exception>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceName">
      <summary>이 성능 카운터에 대한 인스턴스 이름을 가져오거나 설정합니다.</summary>
      <returns>성능 카운터 범주 인스턴스의 이름이거나, 카운터가 단일 인스턴스 카운터인 경우 빈 문자열("") 입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.MachineName">
      <summary>이 성능 카운터에 대한 컴퓨터 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounter.MachineName" /> 형식이 잘못된 경우</exception>
      <returns>성능 카운터와 관련 범주가 있는 서버입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.RawValue">
      <summary>이 카운터의 원시 값 또는 계산되지 않은 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">카운터의 원시 값을 설정하려 했으나 읽기 전용 카운터인 경우  
  
또는 
인스턴스가 성능 카운터와 제대로 연결되어 있지 않은 경우  
  
또는 
전역 공유 메모리를 사용할 때 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 속성이 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />로 설정되어 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">시스템 API에 액세스할 때 오류가 발생했습니다.</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>카운터의 원시 값입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.ReadOnly">
      <summary>이 <see cref="T:System.Diagnostics.PerformanceCounter" /> 인스턴스가 읽기 전용 모드에 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>카운터가 사용자 지정 .NET Framework 카운터이더라도 <see cref="T:System.Diagnostics.PerformanceCounter" /> 인스턴스가 읽기 전용 모드에 있으면 <see langword="true" />이고, 읽기/쓰기 모드에 있으면 <see langword="false" />입니다. 생성자가 설정한 값이 기본값입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategory">
      <summary>성능 카운터의 범주를 정의하는 성능 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 클래스의 새 인스턴스를 초기화하고 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성을 비운 다음 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 속성을 로컬 컴퓨터로 설정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 클래스의 새 인스턴스를 초기화하고 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성을 지정한 값으로 설정한 다음 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 속성을 로컬 컴퓨터로 설정합니다.</summary>
      <param name="categoryName">이 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 인스턴스에 연결할 성능 카운터 범주 또는 성능 개체의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" />이 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 클래스의 새 인스턴스를 초기화하고 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />과 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 속성을 지정한 값으로 설정합니다.</summary>
      <param name="categoryName">이 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 인스턴스에 연결할 성능 카운터 범주 또는 성능 개체의 이름입니다.</param>
      <param name="machineName">성능 카운터 범주 및 관련 카운터가 있는 컴퓨터입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" />이 빈 문자열("")인 경우  
  
또는 
<paramref name="machineName" /> 구문이 잘못된 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)">
      <summary>지정한 카운터가 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />과 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 속성이 나타내는 이 범주에 등록되었는지 여부를 확인합니다.</summary>
      <param name="counterName">찾을 성능 카운터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성이 설정되어 있지 않은 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>카운터가 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 및 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 속성에 지정된 범주에 등록되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)">
      <summary>지정한 카운터가 로컬 컴퓨터의 지정한 범주에 등록되었는지 여부를 확인합니다.</summary>
      <param name="counterName">찾을 성능 카운터의 이름입니다.</param>
      <param name="categoryName">지정한 성능 카운터와 관련된 성능 카운터 범주 또는 성능 개체의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="counterName" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" />이 빈 문자열("")인 경우</exception>
      <exception cref="T:System.InvalidOperationException">범주 이름이 없습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>카운터가 로컬 컴퓨터의 지정한 범주에 등록되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)">
      <summary>지정한 카운터가 원격 컴퓨터의 지정한 범주에 등록되었는지 여부를 확인합니다.</summary>
      <param name="counterName">찾을 성능 카운터의 이름입니다.</param>
      <param name="categoryName">지정한 성능 카운터와 관련된 성능 카운터 범주 또는 성능 개체의 이름입니다.</param>
      <param name="machineName">성능 카운터 범주 및 관련 카운터가 있는 컴퓨터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이 <see langword="null" />인 경우  
  
또는 
<paramref name="counterName" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" />이 빈 문자열("")인 경우  
  
또는 
<paramref name="machineName" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">범주 이름이 없습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>카운터가 지정한 컴퓨터의 지정한 범주에 등록되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)">
      <summary>지정한 카운터를 포함하는 사용자 지정 성능 카운터 범주를 로컬 컴퓨터에 등록합니다.</summary>
      <param name="categoryName">만들어서 시스템에 등록할 사용자 지정 성능 카운터 범주의 이름입니다.</param>
      <param name="categoryHelp">사용자 지정 범주에 대한 설명입니다.</param>
      <param name="counterData">새 범주의 일부로 만들 카운터를 지정하는 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterData" /> 컬렉션에 지정된 카운터 이름이 <see langword="null" />이거나 빈 문자열("")인 경우  
  
또는 
지정된 카운터가 <paramref name="counterData" /> 컬렉션에 이미 있는 경우  
  
또는 
<paramref name="counterName" /> 매개 변수 구문이 잘못된 경우. 구문에 백슬래시 문자("\")가 포함되었거나 구문의 길이가 80자를 넘은 것 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">범주가 이미 로컬 컴퓨터에 있는 경우  
  
또는 
<paramref name="counterData" /> 컬렉션의 레이아웃이 기본 카운터에 맞지 않는 경우. <see langword="AverageCount64" />, <see langword="AverageTimer32" />, <see langword="CounterMultiTimer" />, <see langword="CounterMultiTimerInverse" />, <see langword="CounterMultiTimer100Ns" />, <see langword="CounterMultiTimer100NsInverse" />, <see langword="RawFraction" />, <see langword="SampleFraction" /> 또는 <see langword="SampleCounter" /> 형식의 카운터 바로 다음에는 기본 카운터 형식(<see langword="AverageBase" />, <see langword="MultiBase" />, <see langword="RawBase" /> 또는 <see langword="SampleBase" />)중 하나가 와야 합니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>새 사용자 지정 범주 또는 성능 개체와 관련된 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
      <summary>지정한 카운터를 포함하는 사용자 지정 성능 카운터 범주를 로컬 컴퓨터에 등록합니다.</summary>
      <param name="categoryName">만들어서 시스템에 등록할 사용자 지정 성능 카운터 범주의 이름입니다.</param>
      <param name="categoryHelp">사용자 지정 범주에 대한 설명입니다.</param>
      <param name="categoryType">
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 값 중 하나입니다.</param>
      <param name="counterData">새 범주의 일부로 만들 카운터를 지정하는 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterData" /> 컬렉션에 지정된 카운터 이름이 <see langword="null" />이거나 빈 문자열("")인 경우  
  
또는 
지정된 카운터가 <paramref name="counterData" /> 컬렉션에 이미 있는 경우  
  
또는 
 <paramref name="counterName" />에 잘못된 구문이 있는 경우. 구문에 백슬래시 문자("\")가 포함되었거나 구문의 길이가 80자를 넘은 것 같습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="counterData" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="categoryType" /> 값이 <see langword="MultiInstance" />, <see langword="SingleInstance" /> 또는 <see langword="Unknown" /> 값의 범위를 벗어난 경우</exception>
      <exception cref="T:System.InvalidOperationException">범주가 이미 로컬 컴퓨터에 있는 경우  
  
또는 
<paramref name="counterData" /> 컬렉션의 레이아웃이 기본 카운터에 맞지 않는 경우. <see langword="AverageCount64" />, <see langword="AverageTimer32" />, <see langword="CounterMultiTimer" />, <see langword="CounterMultiTimerInverse" />, <see langword="CounterMultiTimer100Ns" />, <see langword="CounterMultiTimer100NsInverse" />, <see langword="RawFraction" />, <see langword="SampleFraction" /> 또는 <see langword="SampleCounter" /> 형식의 카운터 바로 다음에는 기본 카운터 형식(<see langword="AverageBase" />, <see langword="MultiBase" />, <see langword="RawBase" /> 또는 <see langword="SampleBase" />)중 하나가 와야 합니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>새 사용자 지정 범주 또는 성능 개체와 관련된 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)">
      <summary>
        <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" /> 형식의 단일 카운터를 포함하는 사용자 지정 성능 카운터 범주를 로컬 컴퓨터에 등록합니다.</summary>
      <param name="categoryName">만들어서 시스템에 등록할 사용자 지정 성능 카운터 범주의 이름입니다.</param>
      <param name="categoryHelp">사용자 지정 범주에 대한 설명입니다.</param>
      <param name="categoryType">범주가 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance" />, <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance" /> 또는 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown" />인지를 지정하는 <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 값 중 하나입니다.</param>
      <param name="counterName">새 범주의 일부로 만들 새 카운터의 이름입니다.</param>
      <param name="counterHelp">새 사용자 지정 범주와 관련된 카운터에 대한 설명입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" />이 <see langword="null" />이거나 빈 문자열("")인 경우  
  
또는 
<paramref name="counterName" />이 지정한 카운터가 이미 있는 경우  
  
또는 
 <paramref name="counterName" />에 잘못된 구문이 있는 경우. 구문에 백슬래시 문자("\")가 포함되었거나 구문의 길이가 80자를 넘은 것 같습니다.</exception>
      <exception cref="T:System.InvalidOperationException">범주가 이미 로컬 컴퓨터에 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="counterHelp" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>새 시스템 범주 또는 성능 개체와 관련된 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)">
      <summary>
        <see langword="NumberOfItems32" /> 형식의 단일 카운터를 포함하는 사용자 지정 성능 카운터 범주를 로컬 컴퓨터에 등록합니다.</summary>
      <param name="categoryName">만들어서 시스템에 등록할 사용자 지정 성능 카운터 범주의 이름입니다.</param>
      <param name="categoryHelp">사용자 지정 범주에 대한 설명입니다.</param>
      <param name="counterName">새 범주의 일부로 만들 <see langword="NumberOfItems32" /> 형식의 새 카운터 이름입니다.</param>
      <param name="counterHelp">새 사용자 지정 범주와 관련된 카운터에 대한 설명입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" />이 <see langword="null" />이거나 빈 문자열("")인 경우  
  
또는 
<paramref name="counterName" />이 지정한 카운터가 이미 있는 경우  
  
또는 
 <paramref name="counterName" />에 잘못된 구문이 있는 경우. 구문에 백슬래시 문자("\")가 포함되었거나 구문의 길이가 80자를 넘은 것 같습니다.</exception>
      <exception cref="T:System.InvalidOperationException">범주가 이미 로컬 컴퓨터에 있는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="counterHelp" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>새 시스템 범주 또는 성능 개체와 관련된 <see cref="T:System.Diagnostics.PerformanceCounterCategory" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)">
      <summary>로컬 컴퓨터에서 범주와 관련 카운터를 제거합니다.</summary>
      <param name="categoryName">삭제할 사용자 지정 성능 카운터 범주의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 매개 변수 구문이 잘못된 경우. 구문에 백슬래시 문자("\")가 포함되었거나 구문의 길이가 80자를 넘은 것 같습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 범주가 사용자 지정 범주가 아니므로 삭제될 수 없는 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)">
      <summary>범주가 로컬 시스템에 등록되었는지 여부를 확인합니다.</summary>
      <param name="categoryName">찾을 성능 카운터 범주의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 매개 변수가 빈 문자열("")입니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>범주가 등록되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)">
      <summary>범주가 지정한 컴퓨터에 등록되었는지 여부를 확인합니다.</summary>
      <param name="categoryName">찾을 성능 카운터 범주의 이름입니다.</param>
      <param name="machineName">해당 범주에 대해 조사할 컴퓨터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 매개 변수가 빈 문자열("")입니다.  
  
또는 
<paramref name="machineName" /> 매개 변수가 잘못되었습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.IO.IOException">네트워크 경로를 찾을 수 없는 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">호출자에게 필요한 권한이 없는 경우  
  
 또는  
  
 관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>범주가 등록되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories">
      <summary>로컬 컴퓨터에 등록된 성능 카운터 범주의 목록을 검색합니다.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>로컬 컴퓨터에 등록된 범주를 나타내는 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)">
      <summary>지정한 컴퓨터에 등록된 성능 카운터 범주의 목록을 검색합니다.</summary>
      <param name="machineName">조사할 컴퓨터입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 매개 변수가 잘못되었습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>지정한 컴퓨터에 등록된 범주를 나타내는 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters">
      <summary>정확히 하나의 인스턴스가 포함된 성능 카운터 범주에서 카운터 목록을 검색합니다.</summary>
      <exception cref="T:System.ArgumentException">범주가 단일 인스턴스가 아닌 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.InvalidOperationException">범주에 연관된 인스턴스가 없는 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>이러한 단일 인스턴스 성능 카운터 범주와 관련된 범주를 나타내는 <see cref="T:System.Diagnostics.PerformanceCounter" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)">
      <summary>인스턴스가 하나 이상 포함된 성능 카운터 범주에서 카운터 목록을 검색합니다.</summary>
      <param name="instanceName">관련 카운터 목록을 검색할 성능 개체 인스턴스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">이 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />의 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 속성을 설정하지 않은 경우  
  
또는 
이 범주에 <paramref name="instanceName" /> 매개 변수에 의해 지정된 인스턴스가 없는 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>이러한 성능 카운터 범주의 지정한 개체 인스턴스와 관련된 카운터를 나타내는 <see cref="T:System.Diagnostics.PerformanceCounter" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames">
      <summary>이 범주와 관련된 성능 개체 인스턴스 목록을 검색합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성은 <see langword="null" />입니다. 속성을 설정하지 않았을 수도 있습니다.  
  
또는 
범주에 연관된 인스턴스가 없는 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>이 범주와 관련된 성능 개체 인스턴스 이름을 나타내는 문자열 배열이거나, 해당 범주에 성능 개체 인스턴스가 하나만 있는 경우 빈 문자열("")을 포함하는 단일 엔트리 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)">
      <summary>지정한 성능 개체 인스턴스가 이 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 개체의 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성에 의해 식별된 범주에 있는지 여부를 확인합니다.</summary>
      <param name="instanceName">이 성능 카운터 범주에서 검색할 성능 개체 인스턴스입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성은 <see langword="null" />입니다. 속성을 설정하지 않았을 수도 있습니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>해당 범주에 지정한 성능 개체 인스턴스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)">
      <summary>로컬 컴퓨터의 지정한 범주에 지정한 성능 개체 인스턴스가 있는지 여부를 확인합니다.</summary>
      <param name="instanceName">검색할 성능 개체 인스턴스입니다.</param>
      <param name="categoryName">검색할 성능 카운터 범주입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 매개 변수가 <see langword="null" />인 경우  
  
또는 
<paramref name="categoryName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 매개 변수가 빈 문자열("")입니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>해당 범주에 지정한 성능 개체 인스턴스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)">
      <summary>지정한 컴퓨터의 지정한 범주에 지정한 성능 개체 인스턴스가 있는지 여부를 확인합니다.</summary>
      <param name="instanceName">검색할 성능 개체 인스턴스입니다.</param>
      <param name="categoryName">검색할 성능 카운터 범주입니다.</param>
      <param name="machineName">범주 인스턴스 쌍을 찾을 대상 컴퓨터의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 매개 변수가 <see langword="null" />인 경우  
  
또는 
<paramref name="categoryName" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 매개 변수가 빈 문자열("")입니다.  
  
또는 
<paramref name="machineName" /> 매개 변수가 잘못되었습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>해당 범주에 지정한 성능 개체 인스턴스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory">
      <summary>이 성능 카운터 범주와 관련된 카운터와 성능 개체 인스턴스를 모두 읽습니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성은 <see langword="null" />입니다. 속성을 설정하지 않았을 수도 있습니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <exception cref="T:System.UnauthorizedAccessException">관리자 권한 없이 실행되는 코드가 성능 카운터를 읽으려고 한 경우</exception>
      <returns>해당 범주에 대한 카운터와 성능 개체 인스턴스 데이터가 들어 있는 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp">
      <summary>범주의 도움말 텍스트를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 속성은 <see langword="null" />입니다. 범주 도움말을 가져오기 전에 범주 이름을 설정해야 합니다.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 시스템 API를 호출하지 못한 경우</exception>
      <returns>이 범주가 측정하는 성능 개체에 대한 설명입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryName">
      <summary>이 범주를 정의하는 성능 개체의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />이 빈 문자열("")인 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" />이 <see langword="null" />인 경우</exception>
      <returns>이 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 인스턴스에 연결할 성능 카운터 범주 또는 성능 개체의 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryType">
      <summary>성능 카운터 범주 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.MachineName">
      <summary>이 범주가 있는 컴퓨터의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 구문이 잘못된 경우</exception>
      <returns>성능 카운터 범주 및 관련 카운터가 있는 컴퓨터의 이름입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategoryType">
      <summary>성능 카운터 범주가 다중 인스턴스를 가질 수 있는지 여부를 나타냅니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance">
      <summary>성능 카운터 범주가 다중 인스턴스를 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance">
      <summary>성능 카운터 범주가 단일 인스턴스만을 가질 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown">
      <summary>성능 카운터 범주의 인스턴스 기능을 알 수 없습니다.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterInstanceLifetime">
      <summary>성능 카운터 인스턴스의 수명을 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global">
      <summary>프로세스 범주를 사용하는 카운터가 없는 경우 성능 카운터 인스턴스를 제거합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process">
      <summary>프로세스가 닫히면 성능 카운터 인스턴스를 제거합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterManager">
      <summary>성능 카운터를 사용하여 작업할 때 시스템이 로드하는 performance.dll에 대한 성능 데이터를 준비합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.#ctor">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounterManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CloseData">
      <summary>performance.dll의 성능 데이터 닫기에 의해 호출됩니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>성능 데이터 수집 루틴입니다. 성능 카운터 performance.dll에 의해 호출됩니다.</summary>
      <param name="callIdx">호출 인덱스입니다.</param>
      <param name="valueNamePtr">요청된 개체 ID가 포함된 유니코드 문자열 목록에 대한 포인터입니다.</param>
      <param name="dataPtr">데이터 버퍼에 대한 포인터입니다.</param>
      <param name="totalBytes">바이트 수에 대한 포인터입니다.</param>
      <param name="res">이 메서드는 반환될 때 값이 -1인 <see cref="T:System.IntPtr" />를 포함합니다.</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterType">
      <summary>
        <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> 인스턴스의 <see cref="T:System.Diagnostics.PerformanceCounter" /> 메서드를 계산하는 데 사용되는 수식을 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
      <summary>
        <see langword="AverageTimer32" /> 및 <see langword="AverageCount64" />처럼 시간이나 횟수 평균을 계산하는 데 사용되는 기본 카운터입니다. "연산 당 시간" 또는 "연산 당 수"를 나타내는 카운터를 계산하는 데 사용되는 분모를 저장합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
      <summary>작업하는 동안에 처리되는 평균 항목 수를 표시하는 평균 카운터입니다. 이 형식의 카운터는 완성되는 작업 수에 대한 처리되는 항목의 비율을 표시합니다. 이 비율은 마지막 기간 동안 처리되는 항목의 수를 해당 기간 동안 완성되는 작업의 수와 비교하여 계산됩니다. 이 형식의 카운터는 PhysicalDisk \ Avg. Disk Bytes/Transfer를 포함 합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
      <summary>프로세스나 작업을 완성하는 데 소요되는 평균 시간을 측정하는 평균 카운터입니다. 이 형식의 카운터는 샘플 기간 동안 완성되는 프로세스나 작업의 수에 대한 해당 기간의 총 경과 시간의 비율을 표시합니다. 이 카운터 형식은 시스템 시계의 틱을 단위로 하여 시간을 측정합니다. 이 형식의 카운터는 PhysicalDisk \ Avg. Disk sec/Transfer를 포함 합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
      <summary>가장 최근의 두 샘플 기간 사이에 측정된 특성의 변경 내용을 표시하는 차이 카운터입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
      <summary>가장 최근의 두 샘플 기간 사이에 측정된 특성의 변경 내용을 표시하는 차이 카운터입니다. 더 큰 값을 수용하기 위해 큰 필드를 사용하는 것을 제외하면 <see langword="CounterDelta32" /> 카운터 형식과 동일합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
      <summary>샘플링되는 항목의 수를 나타내는 기본 카운터입니다. 이 카운터는 여러 개의 유사한 타이밍 항목을 사용하는 경우에 샘플링된 항목들의 평균을 구하는 계산에서 분모로 사용됩니다. <see langword="CounterMultiTimer" />, <see langword="CounterMultiTimerInverse" />, <see langword="CounterMultiTimer100Ns" /> 및 <see langword="CounterMultiTimer100NsInverse" />와 함께 사용됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
      <summary>하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시하는 백분율 카운터입니다. 분자는 동시에 작동하는 구성 요소의 활성 시간을 기록하므로 결과 백분율은 100%를 초과할 수 있습니다. 이 카운터 형식은 100나노초가 아닌 시스템 성능 타이머의 틱을 단위로 하여 시간을 측정한다는 점에서 <see langword="CounterMultiTimer100Ns" />와는 다릅니다. 이 카운터 형식은 멀티타이머입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
      <summary>하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시하는 백분율 카운터입니다. 이 카운터는 100나노초(ns)를 단위로 하여 시간을 측정합니다. 이 카운터 형식은 멀티타이머입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
      <summary>하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시하는 백분율 카운터입니다. 이 형식의 카운터는 100나노초(ns)를 단위로 하여 시간을 측정하며, 구성 요소가 비활성 상태인 시간을 측정한 다음 모니터링되는 개체의 수에 100%를 곱한 값에서 이 시간을 빼서 활성 시간을 구합니다. 이 카운터 형식은 멀티타이머와는 정반대입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
      <summary>하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시하는 백분율 카운터입니다. 이 카운터는 구성 요소가 비활성 상태인 시간을 측정한 다음 모니터링되는 개체의 수에 100%를 곱한 값에서 이 시간을 빼서 활성 시간을 계산합니다. 이 카운터 형식은 멀티타이머와는 정반대입니다. 이는 100나노초가 아닌 시스템 성능 타이머의 틱을 단위로 하여 시간을 측정한다는 점에서 CounterMultiTimer100NsInverse와는 다릅니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
      <summary>구성 요소가 활성 상태인 평균 시간을 총 샘플 시간에 대한 백분율로 나타내는 백분율 카운터입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
      <summary>샘플 기간 동안 관찰되는 활성 시간의 평균 백분율을 표시하는 백분율 카운터입니다. 이러한 카운터의 값은 서비스가 비활성 상태인 시간의 백분율을 모니터링한 다음 이 값을 100%에서 빼서 계산합니다. 이 형식은 카운터 형식과는 정반대입니다. 이는 100나노초 단위가 아닌 시스템 성능 타이머의 틱을 단위로 시간을 측정한다는 점을 제외하고 CounterTimer100NsInv와는 동일합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
      <summary>평균 카운터는 시간 경과에 따라 리소스 큐의 평균 길이를 모니터링하도록 설계되었으며, 기간별로 나누어진 마지막 두 샘플 기간 중에 관찰되는 큐 길이 간 차이를 표시합니다. 일반적으로 이 형식의 카운터는 큐에 들어와 있거나 대기 중인 항목 수를 추적하는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
      <summary>시간 경과에 따라 리소스 큐의 평균 길이를 모니터링하는 평균 카운터입니다. 이 형식의 카운터는 기간별로 나누어진 마지막 두 샘플 기간 중에 관찰되는 큐 길이 간 차이를 표시합니다. 큰 값을 수용하기 위해 좀 더 큰 필드를 사용한다는 점을 제외하면 이 카운터 형식은 <see langword="CountPerTimeInterval32" />와 같습니다. 일반적으로 이 형식의 카운터는 큐에 들어와 있거나 대기 중인 대용량 또는 다수의 항목을 추적하는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
      <summary>구성 요소나 프로세스가 시작된 시간과 이 값이 계산되는 시간 간의 총 시간을 표시하는 차이 타이머입니다. 이 형식의 카운터에는 System\System Up Time이 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
      <summary>가장 최근에 관찰된 값을 표시하는 순간 카운터입니다. 예를 들어, 항목 또는 연산의 단순한 수를 유지하는 데 사용됩니다. 이 형식의 카운터에는 Memory\Available Bytes가 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
      <summary>가장 최근에 관찰된 값을 표시하는 순간 카운터입니다. 예를 들어, 매우 많은 항목 또는 연산의 단순한 수를 유지하는 데 사용됩니다. 큰 값을 수용하기 위해 좀 더 큰 필드를 사용한다는 점을 제외하면 이 카운터 형식은 <see langword="NumberOfItems32" />와 같습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
      <summary>가장 최근에 관찰된 값을 16진수 형식으로 표시하는 순간 카운터입니다. 예를 들어, 항목 또는 연산의 단순한 수를 유지하는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
      <summary>가장 최근에 관찰된 값을 표시하는 순간 카운터입니다. 예를 들어, 매우 많은 항목 또는 연산의 단순한 수를 유지하는 데 사용됩니다. 큰 값을 수용하기 위해 좀 더 큰 필드를 사용한다는 점을 제외하면 이 카운터 형식은 <see langword="NumberOfItemsHEX32" />와 같습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
      <summary>샘플 기간에 초 당 완성되는 평균 작업 수를 표시하는 차이 카운터입니다. 이 형식의 카운터는 시스템 시계의 틱을 단위로 하여 시간을 측정합니다. 이 형식의 카운터에는 System\File Read Operations/sec가 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
      <summary>샘플 기간에 초 당 완성되는 평균 작업 수를 표시하는 차이 카운터입니다. 이 형식의 카운터는 시스템 시계의 틱을 단위로 하여 시간을 측정합니다. 이 카운터 형식은 <see langword="RateOfCountsPerSecond32" /> 형식과 같지만 큰 값을 수용하기 위해 좀 더 큰 필드를 사용하여 초 당 많은 수의 항목 또는 작업을 추적합니다(예: 바이트 전송률). 이 형식의 카운터에는 System\File Read Bytes/sec가 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
      <summary>일반 산술 분수를 제공하는 카운터의 분모를 저장하는 기본 카운터입니다. 해당 값을 분모로 사용하여 <see langword="RawFraction" /> 값을 계산하려는 경우 이 값이 0보다 커야 합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
      <summary>해당 집합에 대한 하위 집합의 비율을 백분율로 표시하는 순간 백분율 카운터입니다. 예를 들어, 이 카운터는 디스크에서 사용되는 바이트 수를 디스크에 있는 총 바이트 수와 비교합니다. 이 형식의 카운터는 현재 백분율만 표시하며 시간 경과에 따른 평균은 표시하지 않습니다. 이 형식의 카운터에는 Paging File\% Usage Peak이 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
      <summary>샘플링한 샘플링 인터럽트의 수를 저장하며 샘플링 분수에서 분모로 사용되는 기본 카운터입니다. 샘플링 분수는 샘플 인터럽트가1(또는 <see langword="true" />)인 샘플의 수입니다. 해당 값을 분모로 사용하여 <see langword="SampleFraction" />을 계산하려는 경우 이 값이 0보다 커야 합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
      <summary>초 당 완성되는 평균 작업 수를 표시하는 평균 카운터입니다. 이 형식의 카운터가 데이터를 샘플링할 때 각 샘플링 인터럽트가 1 또는 0을 반환합니다. 카운터 데이터는 샘플링된 데이터 수입니다. 이는 시스템 성능 타이머의 틱을 단위로 하여 시간을 측정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
      <summary>마지막 두 샘플 기간 동안의 모든 작업에 대한 평균 적중 비율을 표시하는 백분율 카운터입니다. 이 형식의 카운터에는 Cache\Pin Read Hits %가 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
      <summary>구성 요소의 활성 시간을 샘플 기간의 총 경과 시간에 대한 백분율로 표시하는 백분율 카운터입니다. 이 카운터는 100나노초(ns)를 단위로 하여 시간을 측정합니다. 이 형식의 카운터는 한 번에 하나의 구성 요소에 대한 작업을 측정하도록 설계되었습니다. 이 형식의 카운터에는 Processor\% User Time이 포함됩니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
      <summary>샘플 기간 동안 관찰되는 활성 시간의 평균 백분율을 표시하는 백분율 카운터입니다. 이는 역 카운터입니다. 이 형식의 카운터에는 Processor\% Processor Time이 포함됩니다.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>카운터의 원시 데이터가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>카운터 값이 1만큼 감소합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>카운터 값이 1만큼 증가합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>카운터 값이 지정된 양만큼 증가합니다.</summary>
      <param name="value">카운터 값이 증가할 양입니다. 증가 값은 양수 또는 음수가 될 수 있습니다.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>원시 카운터 데이터를 가져오거나 설정합니다.</summary>
      <returns>원시 카운터 데이터입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>카운터 데이터를 가져오거나 설정합니다.</summary>
      <returns>카운터 데이터입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>논리 카운터 집합을 정의합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providerGuid">카운터 데이터의 공급자를 고유하게 식별하는 GUID입니다. 매니페스트에 지정된 GUID를 사용해야 합니다.</param>
      <param name="counterSetGuid">공급자의 카운터 집합을 고유하게 식별하는 GUID입니다. 매니페스트에 지정된 GUID를 사용해야 합니다.</param>
      <param name="instanceType">카운터 집합의 형식을 식별합니다. 예를 들어 카운터 집합이 단일 인스턴스인지 아니면 여러 인스턴스인지 여부를 식별합니다.</param>
      <exception cref="T:System.InsufficientMemoryException">메모리가 부족 하 여 작업을 완료할 수 없습니다.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Windows Vista 이전 버전이므로 지원되지 않는 경우</exception>
      <exception cref="T:System.ArgumentException">매개 변수 중 하나가 NULL이거나 잘못된 경우</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">내부 Win32 함수 호출에 실패한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>지정된 카운터 식별자 및 형식을 사용하여 카운터 집합에 카운터를 추가합니다.</summary>
      <param name="counterId">카운터를 식별합니다. 매니페스트에서 카운터를 정의하는 데 사용한 것과 동일한 값을 사용해야 합니다.</param>
      <param name="counterType">카운터 형식을 식별합니다. 카운터 형식은 카운터 데이터를 계산하고 평균을 구하여 표시하는 방법을 결정합니다.</param>
      <exception cref="T:System.ArgumentException">카운터 식별자가 이미 집합에 있거나 음수이거나 NULL이거나 잘못된 경우</exception>
      <exception cref="T:System.InvalidOperationException">카운터 집합의 인스턴스를 만든 후 카운터 집합에 카운터를 추가한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>지정된 카운터 식별자, 카운터 형식 및 표시 이름을 사용하여 카운터 집합에 카운터를 추가합니다.</summary>
      <param name="counterId">카운터를 식별합니다. 매니페스트에서 카운터를 정의하는 데 사용한 것과 동일한 값을 사용해야 합니다.</param>
      <param name="counterType">카운터 형식을 식별합니다. 카운터 형식은 카운터 데이터를 계산하고 평균을 구하여 표시하는 방법을 결정합니다.</param>
      <param name="counterName">카운터의 이름입니다. 이 이름을 사용하여 카운터 집합 인스턴스에서 카운터를 인덱싱할 수 있습니다. <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />을 참조하십시오.</param>
      <exception cref="T:System.ArgumentException">카운터 식별자가 이미 집합에 있거나 음수이거나 NULL이거나 잘못된 경우</exception>
      <exception cref="T:System.InvalidOperationException">카운터 집합의 인스턴스를 만든 후 카운터 집합에 카운터를 추가한 경우</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>카운터 집합의 인스턴스를 만듭니다.</summary>
      <param name="instanceName">인스턴스 이름입니다. 이름은 고유해야 합니다.</param>
      <exception cref="T:System.ArgumentException">인스턴스 이름이 NULL인 경우</exception>
      <exception cref="T:System.InvalidOperationException">카운터 집합의 인스턴스를 만들기 전에 카운터 집합에 카운터를 추가한 경우</exception>
      <returns>카운터 데이터를 포함할 카운터 집합의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>이 개체에서 사용하는 관리되지 않는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>이 개체에서 사용하는 관리되지 않는 모든 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">Dispose 메서드에서 호출된 경우 <see langword="True" />이고, 종료자에서 호출된 경우 <see langword="False" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>가비지 수집에서 개체를 회수해 넣기 전에 리소스를 해제합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> 클래스에서 정의된 논리 카운터의 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>이 개체에서 사용하는 관리되지 않는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Finalize">
      <summary>관리되지 않는 리소스를 해제하고 다른 정리 작업을 수행합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>카운터 집합 인스턴스에 대한 카운터 데이터의 컬렉션을 검색합니다.</summary>
      <returns>카운터 집합 인스턴스에 포함된 카운터 데이터의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>카운터 값의 컬렉션이 들어 있습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>이 개체에서 사용하는 관리되지 않는 리소스를 모두 해제합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Finalize">
      <summary>가비지 컬렉션이 회수하기 전에 개체가 리소스를 해제하고 다른 정리 작업을 수행할 수 있게 합니다.</summary>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>지정된 카운터 식별자를 사용하여 컬렉션의 카운터 값에 액세스합니다.</summary>
      <param name="counterId">카운터의 식별자입니다. 이는 카운터 집합에 카운터를 추가할 때 사용한 식별자입니다.</param>
      <returns>카운터 데이터입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>지정된 카운터 이름을 사용하여 컬렉션의 카운터 값에 액세스합니다.</summary>
      <param name="counterName">카운터의 이름입니다. 이는 카운터 집합에 카운터를 추가할 때 사용한 이름입니다.</param>
      <returns>카운터 데이터입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>카운터 집합에 프로세스 및 실제 디스크와 같은 여러 인스턴스를 사용할 수 있는지 아니면 메모리와 같은 단일 인스턴스를 사용할 수 있는지를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>카운터 집합에 하나 이상의 소스에서 가져온 집계 값을 갖는 단일 인스턴스 카운터가 들어 있습니다. 예를 들어 이 형식의 카운터 집합에 있는 카운터는 컴퓨터에 있는 하드 디스크 세 대에서 읽은 바이트 수를 각각 가져와 모두 더할 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" />와 비슷하지만 이 카운터 집합 형식에는 소비자 애플리케이션의 전체 수명 동안 수집한 모든 카운터 값이 저장된다는 점이 다릅니다. 카운터 값은 카운터 수명이 경과된 이후에도 캐시됩니다. 예를 들어 위에 나와 있는 전역 집계 예제에서 하드 디스크 중 하나를 사용할 수 없게 되어도 해당 디스크에서 읽은 총 바이트 수를 계속 사용하여 집계 값을 계산할 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />와 비슷하지만 모든 인스턴스 데이터를 단일 집계 인스턴스(_Total)로 집계하는 대신 이름이 같은 인스턴스의 카운터 데이터를 집계한다는 점이 다릅니다. 예를 들어 여러 공급자 프로세스에 IExplore라는 인스턴스가 들어 있는 경우 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> 및 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet은 IExplore, IExplore#1, IExplore#2 등의 여러 IExplore 인스턴스를 표시하지만 <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> 인스턴스 형식은 IExplore라는 모든 인스턴스의 카운터 데이터를 집계하여 하나의 IExplore 인스턴스만 게시합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>카운터 집합에 프로세스의 평균 디스크 I/O를 측정하는 카운터와 같은 여러 인스턴스 카운터가 들어 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>카운터 집합에 카운터의 모든 인스턴스에서 가져온 집계 값을 갖는 여러 인스턴스 카운터가 들어 있습니다. 예를 들어 이 형식의 카운터 집합에 있는 카운터는 다중 스레드 애플리케이션의 모든 스레드에서 총 스레드 실행 시간을 가져와 모두 더할 수 있습니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>카운터 집합에 실제 메모리를 측정하는 카운터와 같은 단일 카운터 인스턴스가 들어 있습니다.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>카운터의 가능한 형식을 정의합니다. 각 카운터에는 카운터 형식이 할당됩니다. 카운터 형식은 카운터 데이터를 계산하고 평균을 구하여 표시하는 방법을 결정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>이 카운터는 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> 및 <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> 카운터 형식에서 시간을 계산하거나 평균을 구할 때 기본 데이터(분모)로 사용됩니다. 이 카운터 형식은 마지막으로 관찰된 값만 수집합니다. 자세한 내용은 배포 키트에서 PERF_AVERAGE_BASE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>이 카운터 형식은 작업 도중 처리된 평균 항목 수를 표시합니다. 이 형식의 카운터는 완료된 작업 수에 대한 처리된 항목(예: 전송된 바이트 수)의 비율을 표시합니다. 이 비율은 마지막 기간 동안 처리되는 항목의 수를 해당 기간 동안 완성되는 작업의 수와 비교하여 계산됩니다. 자세한 내용은 배포 키트에서 PERF_AVERAGE_BULK 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>이 카운터 형식은 프로세스나 작업을 완료하는 데 걸리는 평균 시간을 측정합니다. 이 형식의 카운터는 샘플 기간 동안 완성되는 프로세스나 작업의 수에 대한 해당 기간의 총 경과 시간의 비율을 표시합니다. 이 카운터 형식은 시스템 시계의 틱을 단위로 하여 시간을 측정합니다. 자세한 내용은 배포 키트에서 PERF_AVERAGE_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>이 카운터 형식은 가장 최근의 두 샘플 기간 사이에 측정된 특성의 변경 내용을 표시합니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_DELTA 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>이 카운터 형식은 가장 최근의 두 샘플 기간 사이에 측정된 특성의 변경 내용을 표시합니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> 카운터 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용한다는 점이 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_LARGE_DELTA 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>이 카운터 형식은 구성 요소나 프로세스가 시작된 시간과 이 값이 계산되는 시간 사이의 총 시간을 표시합니다. 자세한 내용은 배포 키트에서 PERF_ELAPSED_TIME 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>이 카운터 형식은 일정 시간 동안 리소스 큐의 평균 길이를 모니터링합니다. 이 형식의 카운터는 기간별로 나누어진 마지막 두 샘플 기간 중에 관찰되는 큐 길이 간 차이를 표시합니다. 이 카운터 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> 카운터 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용한다는 점이 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_LARGE_QUEUELEN_TYPE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>샘플링된 항목 수를 나타냅니다. 이 수는 서로 비슷한 여러 항목의 타이밍을 측정할 때 샘플링된 항목의 평균을 구하는 계산에서 분모로 사용됩니다. 이 형식은 카운터 형식 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> 및 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />를 지원합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>이 카운터 형식은 멀티타이머입니다. 멀티타이머는 둘 이상의 구성 요소 인스턴스에서 데이터를 수집합니다(예: 프로세서 또는 디스크). 이 형식의 카운터는 하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시합니다. 분자는 동시에 작동하는 구성 요소의 활성 시간을 기록하므로 결과 백분율은 100%를 초과할 수 있습니다. 이 카운터 형식은 100나노초가 아닌 시스템 성능 타이머의 틱을 단위로 하여 시간을 측정한다는 점에서 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />와는 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_MULTI_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>이 카운터 형식은 하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시합니다. 시간은 100나노초 단위로 측정됩니다. 이 카운터 형식은 멀티타이머입니다. 멀티타이머는 둘 이상의 구성 요소 인스턴스를 모니터링하도록 설계되었습니다(예: 프로세서 또는 디스크). 자세한 내용은 배포 키트에서 PERF_100NSEC_MULTI_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>이 카운터 형식은 하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시합니다. 이 카운터 형식은 멀티타이머와는 정반대입니다. 멀티타이머는 둘 이상의 구성 요소 인스턴스를 모니터링합니다(예: 프로세서 또는 디스크). 역 카운터는 구성 요소가 비활성 상태인 시간을 측정한 다음 이 측정 값으로부터 활성 시간을 구합니다. 이 카운터는 100나노초가 아닌 시스템 성능 타이머의 틱을 단위로 하여 시간을 측정한다는 점에서 <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />와는 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_MULTI_TIMER_INV 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>이 카운터 형식은 하나 이상의 구성 요소에 대한 활성 시간을 샘플 기간의 총 시간에 대한 백분율로 표시합니다. 이 형식의 카운터는 시간을 100나노초 단위로 측정합니다. 이 카운터 형식은 멀티타이머와는 정반대입니다. 멀티타이머는 둘 이상의 구성 요소 인스턴스를 모니터링하도록 설계되었습니다(예: 프로세서 또는 디스크). 역 카운터는 구성 요소가 비활성 상태로 유지된 시간을 측정한 다음 이 측정 값으로부터 활성 시간을 구합니다. 자세한 내용은 배포 키트에서 PERF_100NSEC_MULTI_TIMER_INV 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>이 64비트 카운터 형식은 개체별 단위로 표시되는 타이머입니다. 자세한 내용은 배포 키트에서 PERF_OBJ_TIME_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>이 카운터 형식은 구성 요소가 활성 상태인 평균 시간을 총 샘플 시간에 대한 백분율로 표시합니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>이 카운터 형식은 구성 요소의 활성 시간을 샘플 기간의 총 경과 시간에 대한 백분율로 표시합니다. 시간은 100나노초 단위로 측정됩니다. 이 형식의 카운터는 한 번에 하나의 구성 요소에 대한 작업을 측정하도록 설계되었습니다. 자세한 내용은 배포 키트에서 PERF_100NSEC_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>이 형식은 카운터 형식과는 정반대입니다. 역 카운터는 구성 요소가 비활성 상태인 시간을 측정한 다음 이 측정 값으로부터 활성 시간을 구합니다. 이 형식의 카운터는 샘플 기간 동안 관찰되는 활성 시간의 평균 백분율을 표시합니다. 이러한 카운터의 값은 서비스가 비활성 상태인 시간의 백분율을 모니터링한 다음 이 값을 100%에서 빼서 계산합니다. 이 카운터 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> 카운터 형식과 같지만 시간을 100나노초 단위가 아닌 시스템 성능 타이머의 틱 단위로 측정한다는 점이 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_TIMER_INV 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>이 카운터 형식은 샘플 기간 동안 관찰되는 활성 시간의 평균 백분율을 표시합니다. 이는 역 카운터입니다. 역 카운터의 값은 서비스가 비활성 상태인 시간의 백분율을 모니터링한 다음 이 값을 100%에서 빼서 계산합니다. 자세한 내용은 배포 키트에서 PERF_100NSEC_TIMER_INV 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>이 카운터 형식은 두 카운터 값으로 구성된 값을 보여 줍니다. 첫 번째 값은 모니터링되는 이벤트의 경과 시간이고, 두 번째 값은 개체 헤더의 PerfFreq 필드에 지정된 빈도입니다. 이 카운터 형식은 시계 틱 값이 카운터 값과 함께 사용되므로 함수 호출에 따르는 지연으로 인한 오차가 없다는 점에서 다른 카운터 타이머와 다릅니다. 정밀 카운터 형식은 표준 시스템 타이머의 정밀도가 부족한 경우에 사용됩니다. 자세한 내용은 배포 키트에서 PERF_PRECISION_OBJECT_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>이 카운터 형식은 두 카운터 값으로 구성된 값을 보여 줍니다. 첫 번째 값은 모니터링되는 이벤트의 경과 시간이고, 두 번째 값은 시스템 성능 타이머의 빈도입니다. 이 카운터 형식은 시계 틱 값이 카운터 값과 함께 사용되므로 함수 호출에 따르는 지연으로 인한 오차가 없다는 점에서 다른 카운터 타이머와 다릅니다. 정밀 카운터 형식은 표준 시스템 타이머의 정밀도가 부족한 경우에 사용됩니다. 자세한 내용은 배포 키트에서 PERF_PRECISION_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>이 카운터 형식은 두 카운터 값으로 구성된 값을 보여 줍니다. 첫 번째 값은 모니터링되는 이벤트의 경과 시간이고, 두 번째 값은 같은 단위의 프라이빗 타이머에서 가져온 "시계" 시간입니다. 시간은 100나노초 단위로 측정됩니다. 이 카운터 형식은 시계 틱 값이 카운터 값과 함께 사용되므로 함수 호출에 따르는 지연으로 인한 오차가 없다는 점에서 다른 카운터 타이머와 다릅니다. 정밀 카운터 형식은 표준 시스템 타이머의 정밀도가 부족한 경우에 사용됩니다. 자세한 내용은 배포 키트에서 PERF_PRECISION_100NS_TIMER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>이 카운터 형식은 일정 시간 동안 리소스 큐의 평균 길이를 모니터링하도록 설계되었습니다. 기간별로 나누어진 마지막 두 샘플 기간 중에 관찰되는 큐 길이 간 차이를 표시합니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_QUEUELEN_TYPE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>이 카운터 형식은 100나노초 시간 기준을 사용하여 큐 길이와 시간의 곱을 측정합니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_100NS_QUEUELEN_TYPE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>이 카운터 형식은 개체별 시간 기준을 사용하여 큐 길이와 시간의 곱을 측정합니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_OBJ_QUEUELEN_TYPE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>이 카운터 형식은 샘플 기간 동안 1초마다 완료되는 작업 수를 표시합니다. 이 형식의 카운터는 시스템 시계의 틱을 단위로 하여 시간을 측정합니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_COUNTER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>이 카운터 형식은 샘플 기간 동안 1초마다 완료되는 작업 수를 표시합니다. 이 형식의 카운터는 시스템 시계의 틱을 단위로 하여 시간을 측정합니다. 이 카운터 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용하는 점이 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_BULK_COUNT 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>이 카운터 형식은 마지막으로 관찰된 값만 수집합니다. 이 값은 일반 산술 분수를 제공하는 카운터의 분모로 사용됩니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 카운터 형식을 지원합니다. 자세한 내용은 배포 키트에서 PERF_RAW_BASE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>이 카운터 형식은 마지막으로 관찰된 값을 수집합니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" /> 카운터 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용한다는 점이 다릅니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> 카운터 형식을 지원합니다. 자세한 내용은 배포 키트에서 PERF_LARGE_RAW_BASE 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>이 카운터 형식은 마지막으로 관찰된 값만 표시합니다. 평균은 표시되지 않습니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_RAWCOUNT 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>이 카운터 형식은 평균이 아닌 마지막으로 관찰된 값만 표시합니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> 카운터 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용한다는 점이 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_LARGE_RAWCOUNT 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>이 카운터 형식은 가장 최근에 관찰된 값을 16진수 형식으로 표시합니다. 평균은 표시되지 않습니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_RAWCOUNT_HEX 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>이 카운터 형식은 마지막으로 관찰된 값을 16진수 형식으로 표시합니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> 카운터 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용한다는 점이 다릅니다. 자세한 내용은 배포 키트에서 PERF_COUNTER_LARGE_RAWCOUNT_HEX 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>이 카운터 형식은 전체 집합에 대한 부분 집합의 비율을 백분율로 표시합니다. 예를 들어, 이 카운터는 디스크에서 사용되는 바이트 수를 디스크에 있는 총 바이트 수와 비교합니다. 이 형식의 카운터는 현재 백분율만 표시하며 시간 경과에 따른 평균은 표시하지 않습니다. 자세한 내용은 배포 키트에서 PERF_RAW_FRACTION 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>이 카운터 형식은 전체 집합에 대한 부분 집합의 비율을 백분율로 표시합니다. 예를 들어, 이 카운터는 디스크에서 사용되는 바이트 수를 디스크에 있는 총 바이트 수와 비교합니다. 이 형식의 카운터는 현재 백분율만 표시하며 시간 경과에 따른 평균은 표시하지 않습니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> 카운터 형식과 같지만 보다 큰 값을 수용할 수 있도록 더 큰 필드를 사용한다는 점이 다릅니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>이 카운터는 샘플링한 샘플링 인터럽트의 수를 저장하며, 샘플링 분수에서 분모로 사용됩니다. 이 형식은 <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> 카운터 형식을 지원합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>이 카운터 형식은 1초마다 완료되는 평균 작업 수를 표시합니다. 이는 시스템 성능 타이머의 틱을 단위로 하여 시간을 측정합니다. 변수 F는 1초에 발생하는 틱 수를 나타냅니다. 결과가 초 단위로 표시되도록 수식에서 F 값이 함께 계산됩니다. 자세한 내용은 배포 키트에서 PERF_SAMPLE_COUNTER 카운터 형식을 참조하십시오.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>이 카운터 형식은 마지막 두 샘플 기간 동안의 모든 작업에 대한 평균 적중 비율을 표시합니다. 자세한 내용은 배포 키트에서 PERF_SAMPLE_FRACTION 카운터 형식을 참조하십시오.</summary>
    </member>
  </members>
</doc>
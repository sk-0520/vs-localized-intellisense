<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Xml.ReaderWriter</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary vsli:raw="Specifies the amount of input or output checking that &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; objects perform.">指定 <see cref="T:System.Xml.XmlReader" /> 和 <see cref="T:System.Xml.XmlWriter" /> 物件所執行的輸入或輸出檢查數量。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object automatically detects whether document-level or fragment-level checking should be performed, and does the appropriate checking. If you're wrapping another &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object, the outer object doesn't do any additional conformance checking. Conformance checking is left up to the underlying object.  &#xA;  &#xA; See the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.ConformanceLevel&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.ConformanceLevel&quot; /&gt; properties for details on how the compliance level is determined.">
        <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 物件會自動偵測是否應執行文件或片段檢查，並進行適當的檢查。 如果您包裝其他 <see cref="T:System.Xml.XmlReader" /> 或 <see cref="T:System.Xml.XmlWriter" /> 物件，則外部物件不會執行任何其他的一致性檢查。 必須由基礎物件來進行一致性檢查。  
  
請參閱 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" /> 和 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" /> 屬性，以取得如何判定合規性層級的詳細資料。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary vsli:raw="The XML data complies with the rules for a well-formed XML 1.0 document, as defined by the W3C. This level of checking ensures that the stream being read or written can be consumed by any processor as an XML 1.0 document.">XML 資料使用語式正確的 XML 1.0 文件規則編譯，如 W3C 所定義。 此檢查層級可確保任何處理器都可使用讀寫的資料流作為 XML 1.0 文件。</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary vsli:raw="The XML data is a well-formed XML fragment, as defined by the W3C.  This conformance level represents an XML document that might not have a root element but is otherwise well-formed. This level of checking ensures that the stream being read or written can be consumed by any processor as an XML 1.0 external parsed entity].">XML 資料是語式正確的 XML 片段，如 W3C 所定義。  此一致性層級表示 XML 文件可能沒有根項目，但卻是語式正確。 此檢查層級可確保任何處理器都可使用讀寫的資料流作為 XML 1.0 外部剖析實體]。</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary vsli:raw="Specifies the options for processing DTDs. The &lt;see cref=&quot;T:System.Xml.DtdProcessing&quot; /&gt; enumeration is used by the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; class.">指定處理 DTD 的選項。 <see cref="T:System.Xml.DtdProcessing" /> 列舉型別是由 <see cref="T:System.Xml.XmlReaderSettings" /> 類別所使用。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary vsli:raw="Causes the DOCTYPE element to be ignored. No DTD processing occurs, and the DTD/DOCTYPE is lost on output.">導致 DOCTYPE 項目受到忽略。 未發生 DTD 處理，且輸出遺失 DTD/DOCTYPE。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary vsli:raw="Used for parsing DTDs.">用於剖析 DTD。</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary vsli:raw="Specifies that when a DTD is encountered, an &lt;see cref=&quot;T:System.Xml.XmlException&quot; /&gt; is thrown with a message that states that DTDs are prohibited. This is the default behavior.">指定在遇到 DTD 時擲回 <see cref="T:System.Xml.XmlException" /> 並顯示訊息，說明禁止使用 DTD。 這是預設行為。</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary vsli:raw="Specifies how the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; handle entities.">指定 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 如何處理實體 (Entity)。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary vsli:raw="Expands character entities and returns general entities as &lt;see cref=&quot;F:System.Xml.XmlNodeType.EntityReference&quot; /&gt; nodes. &#xA;        &#xA;You must call &lt;see cref=&quot;Overload:System.Xml.XmlReader.ResolveEntity&quot; /&gt; to see what the general entities expand to. This enables you to optimize entity handling by only expanding the entity the first time it is used.  &#xA;  &#xA;When set to &lt;see langword=&quot;ExpandCharEntities&quot; /&gt;, a reader call to the &lt;see cref=&quot;Overload:System.Xml.XmlReader.GetAttribute&quot; /&gt; method expands all entities (both general and character entities).">展開字元實體，並傳回一般實體做為 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 節點。 
        
您必須呼叫 <see cref="Overload:System.Xml.XmlReader.ResolveEntity" /> 才能查看一般實體展開後的內容。 這可讓您最佳化第一次使用時只展開實體的實體。  
  
當設定為 <see langword="ExpandCharEntities" /> 時，讀取器呼叫 <see cref="Overload:System.Xml.XmlReader.GetAttribute" /> 方法會展開所有實體 (一般和字元實體)。</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary vsli:raw="Expands all entities and returns the expanded nodes.&#xA;        &#xA;&lt;see cref=&quot;F:System.Xml.XmlNodeType.EntityReference&quot; /&gt; nodes are not returned. The entity text is expanded in place of the entity references.">展開所有實體，並傳回已展開的節點。
        
不會傳回 <see cref="F:System.Xml.XmlNodeType.EntityReference" /> 節點。 展開實體文字取代實體參考。</summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary vsli:raw="Specifies formatting options for the &lt;see cref=&quot;T:System.Xml.XmlTextWriter&quot; /&gt;.">指定 <see cref="T:System.Xml.XmlTextWriter" /> 的格式選項。</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary vsli:raw="Causes child elements to be indented according to the &lt;see cref=&quot;P:System.Xml.XmlTextWriter.Indentation&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlTextWriter.IndentChar&quot; /&gt; settings.&#xA;&#xA;This option indents element content only; mixed content is not affected. For the XML 1.0 definitions of these terms, see the World Wide Web Consortium (W3C) documentation Element Content and Mixed Content.">使子項目根據 <see cref="P:System.Xml.XmlTextWriter.Indentation" /> 和 <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> 設定縮排。

此選項僅縮排項目內容，混合內容不受影響。 如需這些字詞的 XML 1.0 定義，請參閱全球資訊網協會 (W3C) 文件Element Content (項目內容) 和 Mixed Content (混合內容)。</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary vsli:raw="No special formatting is applied. This is the default.">不套用特殊的格式。 此為預設值。</summary>
    </member>
    <member name="T:System.Xml.IApplicationResourceStreamResolver">
      <summary vsli:raw="Represents an application resource stream resolver.">表示應用程式資源資料流解析程式。</summary>
    </member>
    <member name="M:System.Xml.IApplicationResourceStreamResolver.GetApplicationResourceStream(System.Uri)">
      <summary vsli:raw="Returns an application resource stream from the specified URI.">從指定的 URI 傳回應用程式資源資料流。</summary>
      <param name="relativeUri" vsli:raw="The relative URI.">相對 URI。</param>
      <returns vsli:raw="An application resource stream.">應用程式資源資料流。</returns>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary vsli:raw="Enables a class to return an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; from the current context or position.">讓類別從目前的內容或位置傳回 <see cref="T:System.Xml.XmlNode" />。</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; for the current position.">傳回目前位置的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; for the current position.">目前位置的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary vsli:raw="Provides an interface to enable a class to return line and position information.">提供讓類別能夠傳回行和位置資訊的介面。</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary vsli:raw="Gets a value indicating whether the class can return line information.">取得值，這個值指出類別是否可以傳回行資訊。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Xml.IXmlLineInfo.LineNumber&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.IXmlLineInfo.LinePosition&quot; /&gt; can be provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以提供 <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> 和 <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary vsli:raw="Gets the current line number.">取得目前的行號。</summary>
      <returns vsli:raw="The current line number or 0 if no line information is available (for example, &lt;see cref=&quot;M:System.Xml.IXmlLineInfo.HasLineInfo&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;).">目前的行號，如果沒有可用的行資訊 (例如 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 傳回 <see langword="false" />)，則為 0。</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary vsli:raw="Gets the current line position.">取得目前的行位置。</summary>
      <returns vsli:raw="The current line position or 0 if no line information is available (for example, &lt;see cref=&quot;M:System.Xml.IXmlLineInfo.HasLineInfo&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;).">目前的行位置，如果沒有可用的行資訊 (例如 <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> 傳回 <see langword="false" />)，則為 0。</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary vsli:raw="Provides read-only access to a set of prefix and namespace mappings.">提供對一組前置詞和命名空間 (Namespace) 對應的唯讀存取。</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Gets a collection of defined prefix-namespace mappings that are currently in scope.">取得定義之前置詞/命名空間對應的集合，目前位於範圍中。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value that specifies the type of namespace nodes to return.">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回之命名空間節點的類型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that contains the current in-scope namespaces.">
        <see cref="T:System.Collections.IDictionary" />，包含目前範圍內的命名空間。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary vsli:raw="Gets the namespace URI mapped to the specified prefix.">取得命名空間 URI，對應至指定的前置詞。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you wish to find.">您要尋找其命名空間 URI 的前置詞。</param>
      <returns vsli:raw="The namespace URI that is mapped to the prefix; &lt;see langword=&quot;null&quot; /&gt; if the prefix is not mapped to a namespace URI.">對應至前置詞的命名空間 URI，如果前置詞未對應至命名空間 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary vsli:raw="Gets the prefix that is mapped to the specified namespace URI.">取得前置詞，對應至指定的命名空間 URI。</summary>
      <param name="namespaceName" vsli:raw="The namespace URI whose prefix you wish to find.">您要尋找其前置詞的命名空間 URI。</param>
      <returns vsli:raw="The prefix that is mapped to the namespace URI; &lt;see langword=&quot;null&quot; /&gt; if the namespace URI is not mapped to a prefix.">對應至命名空間 URI 的前置詞，如果命名空間 URI 未對應至前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary vsli:raw="Specifies whether to remove duplicate namespace declarations in the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定是否要移除 <see cref="T:System.Xml.XmlWriter" /> 中的重複命名空間宣告。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary vsli:raw="Specifies that duplicate namespace declarations will not be removed.">指定不要移除重複的命名空間宣告。</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary vsli:raw="Specifies that duplicate namespace declarations will be removed. For the duplicate namespace to be removed, the prefix and the namespace must match.">指定要移除重複的命名空間宣告。 若要移除重複的命名空間，前置詞和命名空間必須相符。</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary vsli:raw="Implements a single-threaded &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">實作單一執行緒的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;NameTable&quot; /&gt; class.">初始化 <see langword="NameTable" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Atomizes the specified string and adds it to the &lt;see langword=&quot;NameTable&quot; /&gt;.">將指定的字串原子化，並將其加入至 <see langword="NameTable" />。</summary>
      <param name="key" vsli:raw="The character array containing the string to add.">包含要加入之字串的字元陣列。</param>
      <param name="start" vsli:raw="The zero-based index into the array specifying the first character of the string.">陣列中以零起始的索引，指定字串的第一個字元。</param>
      <param name="len" vsli:raw="The number of characters in the string.">字串中的字元數。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;start&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;start&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;len&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;len&quot; /&gt; =0.">0 &gt; <paramref name="start" />  
  
-或- 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
-或- 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
如果 <paramref name="len" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0.">
        <paramref name="len" /> &lt; 0。</exception>
      <returns vsli:raw="The atomized string or the existing string if one already exists in the &lt;see langword=&quot;NameTable&quot; /&gt;. If &lt;paramref name=&quot;len&quot; /&gt; is zero, String.Empty is returned.">原子化後的字串，如果已經存在於 <see langword="NameTable" /> 中，則為現有的字串。 如果 <paramref name="len" /> 為零，則會傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary vsli:raw="Atomizes the specified string and adds it to the &lt;see langword=&quot;NameTable&quot; /&gt;.">將指定的字串原子化，並將其加入至 <see langword="NameTable" />。</summary>
      <param name="key" vsli:raw="The string to add.">要加入的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The atomized string or the existing string if it already exists in the &lt;see langword=&quot;NameTable&quot; /&gt;.">原子化後的字串，如果已經存在於 <see langword="NameTable" /> 中，則為現有的字串。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Gets the atomized string containing the same characters as the specified range of characters in the given array.">取得包含與指定陣列中指定字元範圍內的字元相同的字串。</summary>
      <param name="key" vsli:raw="The character array containing the name to find.">包含要尋找之名稱的字元陣列。</param>
      <param name="start" vsli:raw="The zero-based index into the array specifying the first character of the name.">陣列中以零起始的索引，指定名稱的第一個字元。</param>
      <param name="len" vsli:raw="The number of characters in the name.">名稱中字元的數目。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;start&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;start&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;len&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;key&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;len&quot; /&gt; =0.">0 &gt; <paramref name="start" />  
  
-或- 
 <paramref name="start" /> &gt;= <paramref name="key" />.Length 
-或- 
 <paramref name="len" /> &gt;= <paramref name="key" />.Length 
如果 <paramref name="len" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0.">
        <paramref name="len" /> &lt; 0。</exception>
      <returns vsli:raw="The atomized string or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized. If &lt;paramref name=&quot;len&quot; /&gt; is zero, String.Empty is returned.">原子化字串，如果字串尚未原子化，則為 <see langword="null" />。 如果 <paramref name="len" /> 為零，則會傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary vsli:raw="Gets the atomized string with the specified value.">取得具有指定值的原子化字串。</summary>
      <param name="value" vsli:raw="The name to find.">要尋找的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The atomized string object or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized.">原子化字串物件；如果字串尚未原子化，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary vsli:raw="Specifies how to handle line breaks.">指定如何處理分行符號。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary vsli:raw="New line characters are entitized. This setting preserves all characters when the output is read by a normalizing &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">實體化換行字元。 當正規化 <see cref="T:System.Xml.XmlReader" /> 來讀取輸出時，這個設定會保留所有字元。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary vsli:raw="The new line characters are unchanged. The output is the same as the input.">換行字元未變更。 輸出與輸入相同。</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary vsli:raw="New line characters are replaced to match the character specified in the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.NewLineChars&quot; /&gt; property.">取代換行字元，使其與 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 屬性中指定的字元相符。</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary vsli:raw="Specifies the state of the reader.">指定讀取器 (Reader) 的狀態。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary vsli:raw="The &lt;see cref=&quot;M:System.Xml.XmlReader.Close&quot; /&gt; method has been called.">已經呼叫 <see cref="M:System.Xml.XmlReader.Close" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary vsli:raw="The end of the file has been reached successfully.">已經順利到達檔案結尾。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary vsli:raw="An error occurred that prevents the read operation from continuing.">發生錯誤，造成讀取作業無法繼續。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary vsli:raw="The &lt;see langword=&quot;Read&quot; /&gt; method has not been called.">尚未呼叫 <see langword="Read" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary vsli:raw="The &lt;see langword=&quot;Read&quot; /&gt; method has been called. Additional methods may be called on the reader.">已經呼叫 <see langword="Read" /> 方法。 讀取器可能呼叫其他方法。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.Resolvers.XmlKnownDtds&quot; /&gt; enumeration is used by the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; and defines which well-known DTDs that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; recognizes.">
        <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> 列舉是由 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 使用，並且會定義 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 可辨識哪些已知的 DTD。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will recognize all currently supported DTDs. This is the default behavior.">指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 會辨識所有目前支援的 DTD。 此為預設行為。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will not recognize any of the predefined DTDs.">指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 不會辨識任何預先定義的 DTD。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will recognize DTDs and entities that are defined in RSS 0.91.">指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 會辨識以 RSS 0.91 定義的 DTD 和實體。</summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; will recognize DTDs and entities that are defined in XHTML 1.0.">指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 會辨識以 XHTML 1.0 定義的 DTD 和實體。</summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary vsli:raw="Represents a class that is used to prepopulate the cache with DTDs or XML streams.">表示類別，用來將 DTD 或 XML 資料流預先填入快取區。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class.">將 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體初始化。</summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified preloaded well-known DTDs.">使用指定預先載入的已知 DTD，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="preloadedDtds" vsli:raw="The well-known DTDs that should be prepopulated into the cache.">應預先填入快取區的已知 DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified fallback resolver.">使用指定的後援解析程式，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="fallbackResolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt;, &lt;see langword=&quot;XmlXapResolver&quot; /&gt;, or your own resolver.">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的解析程式。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified fallback resolver and preloaded well-known DTDs.">使用指定的後援解析程式和預先載入的已知 DTD，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="fallbackResolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt;, &lt;see langword=&quot;XmlXapResolver&quot; /&gt;, or your own resolver.">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的解析程式。</param>
      <param name="preloadedDtds" vsli:raw="The well-known DTDs that should be prepopulated into the cache.">應預先填入快取區的已知 DTD。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; class with the specified fallback resolver, preloaded well-known DTDs, and URI equality comparer.">使用指定的後援解析程式、預先載入的已知 DTD 和 URI 相等比較子，初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 類別的新執行個體。</summary>
      <param name="fallbackResolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt;, &lt;see langword=&quot;XmlXapResolver&quot; /&gt;, or your own resolver.">
        <see langword="XmlResolver" />、<see langword="XmlXapResolver" /> 或您自己的解析程式。</param>
      <param name="preloadedDtds" vsli:raw="The well-known DTDs that should be prepopulated into cache.">應預先填入快取區的已知 DTD。</param>
      <param name="uriComparer" vsli:raw="The implementation of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface to use when you compare URIs.">比較 URI 時所要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 泛型介面實作。</param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary vsli:raw="Adds a byte array to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">將位元組陣列加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value" vsli:raw="A byte array with the data that corresponds to the provided URI.">位元組陣列，其資料對應至提供的 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Adds a byte array to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">將位元組陣列加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value" vsli:raw="A byte array with the data that corresponds to the provided URI.">位元組陣列，其資料對應至提供的 URI。</param>
      <param name="offset" vsli:raw="The offset in the provided byte array where the data starts.">提供的位元組陣列中資料開始的位移。</param>
      <param name="count" vsli:raw="The number of bytes to read from the byte array, starting at the provided offset.">要從位元組陣列中讀取的位元組數，起始於提供的位移。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;value&quot; /&gt; minus &lt;paramref name=&quot;offset&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於 0。  
  
-或- 
<paramref name="value" /> 減去 <paramref name="offset" /> 的長度小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">將 <see cref="T:System.IO.Stream" /> 加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; with the data that corresponds to the provided URI.">
        <see cref="T:System.IO.Stream" />，其資料對應至提供的 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary vsli:raw="Adds a string with preloaded data to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.">將具有預先載入資料的字串加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區，並將其對應至 URI。 如果存放區已經包含相同 URI 的對應，則會覆寫現有的對應。</summary>
      <param name="uri" vsli:raw="The URI of the data that is being added to the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">將要加入至 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區之資料的 URI。</param>
      <param name="value" vsli:raw="A &lt;see langword=&quot;String&quot; /&gt; with the data that corresponds to the provided URI.">
        <see langword="String" />，其資料對應至提供的 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 或 <paramref name="value" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Maps a URI to an object that contains the actual resource.">對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.">目前的 .NET Framework for Silverlight 版本在解析 URI 時不使用這個參數。 提供這個參數的目的是要供未來擴充使用。 例如，這個參數可對應至 xlink:role 並在其他情節中當做實作專屬的引數使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; supports &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects and &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; objects for URIs that were added as &lt;see langword=&quot;String&quot; /&gt;. If the requested type is not supported by the resolver, an exception will be thrown. Use the &lt;see cref=&quot;M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)&quot; /&gt; method to determine whether a certain &lt;see langword=&quot;Type&quot; /&gt; is supported by this resolver.">要傳回的物件類型。 針對以 <see langword="String" /> 形式加入的 URI，<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支援 <see cref="T:System.IO.Stream" /> 物件和 <see cref="T:System.IO.TextReader" /> 物件。 如果解析程式不支援要求的型別，則會擲回例外狀況。 請使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法，判斷此解析程式是否支援特定 <see langword="Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Cannot resolve URI passed in &lt;paramref name=&quot;absoluteUri&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is not of a supported type.">無法解析 <paramref name="absoluteUri" /> 中傳遞的 URI。  
  
-或- 
 <paramref name="ofObjectToReturn" /> 不是支援的型別。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that corresponds to the actual source.">對應於實際來源的 <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">以非同步的方式對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This parameter is provided for future extensibility purposes. For example, this parameter can be mapped to the xlink:role and used as an implementation-specific argument in other scenarios.">目前的 .NET Framework for Silverlight 版本在解析 URI 時不使用這個參數。 提供這個參數的目的是要供未來擴充使用。 例如，這個參數可對應至 xlink:role 並在其他情節中當做實作專屬的引數使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; supports &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects and &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; objects for URIs that were added as &lt;see langword=&quot;String&quot; /&gt;. If the requested type is not supported by the resolver, an exception will be thrown. Use the &lt;see cref=&quot;M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)&quot; /&gt; method to determine whether a certain &lt;see langword=&quot;Type&quot; /&gt; is supported by this resolver.">要傳回的物件類型。 針對以 <see langword="String" /> 形式加入的 URI，<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 支援 <see cref="T:System.IO.Stream" /> 物件和 <see cref="T:System.IO.TextReader" /> 物件。 如果解析程式不支援要求的型別，則會擲回例外狀況。 請使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" /> 方法，判斷此解析程式是否支援特定 <see langword="Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that corresponds to the actual source.">對應於實際來源的 <see cref="T:System.IO.Stream" /> 或 <see cref="T:System.IO.TextReader" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary vsli:raw="Removes the data that corresponds to the URI from the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt;.">從 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 移除 URI 的對應資料。</summary>
      <param name="uri" vsli:raw="The URI of the data that should be removed from the &lt;see cref=&quot;T:System.Xml.Resolvers.XmlPreloadedResolver&quot; /&gt; store.">應該從 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> 存放區移除之資料的 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="Resolves the absolute URI from the base and relative URIs.">從基底和相對 URI 解析絕對 URI。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Uri&quot; /&gt; representing the absolute URI or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved.">
        <see cref="T:System.Uri" />，表示絕對 URI；如果不能解析相對 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary vsli:raw="Determines whether the resolver supports other &lt;see cref=&quot;T:System.Type&quot; /&gt;s than just &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">判斷解析程式除了 <see cref="T:System.Type" /> 之外是否還支援其他 <see cref="T:System.IO.Stream" />。</summary>
      <param name="absoluteUri" vsli:raw="The absolute URI to check.">要檢查的絕對 URI。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to return.">要傳回的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="uri" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Type&quot; /&gt; is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果支援 <see cref="T:System.Type" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.Credentials">
      <summary vsli:raw="Sets the credentials that are used to authenticate the underlying &lt;see cref=&quot;T:System.Net.WebRequest&quot; /&gt;.">設定用來驗證基礎 <see cref="T:System.Net.WebRequest" /> 的認證。</summary>
      <returns vsli:raw="The credentials that are used to authenticate the underlying web request.">用來驗證基礎 Web 要求的認證。</returns>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary vsli:raw="Gets a collection of preloaded URIs.">取得預先載入 URI 的集合。</summary>
      <returns vsli:raw="The collection of preloaded URIs.">預先載入的 URI 集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.IXmlSchemaInfo">
      <summary vsli:raw="Defines the post-schema-validation infoset of a validated XML node.">定義已驗證之 XML 節點的後結構描述驗證資訊集。</summary>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsDefault">
      <summary vsli:raw="Gets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.">取得值，指出 XML 結構描述定義語言 (XSD) 結構描述驗證期間，是否將這個已驗證的 XML 節點設為套用之預設值的結果。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this validated XML node was set as the result of a default being applied during schema validation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個已驗證的 XML 節點是因在結構描述驗證期間套用預設值而設定則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.IsNil">
      <summary vsli:raw="Gets a value indicating if the value for this validated XML node is nil.">取得值，指出這個已驗證之 XML 節點的值是否為 nil。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value for this validated XML node is nil; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這個已驗證 XML 節點的值為 nil 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.MemberType">
      <summary vsli:raw="Gets the dynamic schema type for this validated XML node.">取得這個已驗證之 XML 節點的動態結構描述型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object that represents the dynamic schema type for this validated XML node.">表示這個已驗證 XML 節點之動態結構描述型別的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute">
      <summary vsli:raw="Gets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; that corresponds to this validated XML node.">取得已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />，其會對應至這個已驗證的 XML 節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; that corresponds to this validated XML node.">對應於這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaElement">
      <summary vsli:raw="Gets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; that corresponds to this validated XML node.">取得已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，其會對應至這個已驗證的 XML 節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; that corresponds to this validated XML node.">對應於這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.SchemaType">
      <summary vsli:raw="Gets the static XML Schema Definition Language (XSD) schema type of this validated XML node.">取得這個已驗證之 XML 節點的靜態 XML 結構描述定義語言 (XSD) 結構描述型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; of this validated XML node.">這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.IXmlSchemaInfo.Validity">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value of this validated XML node.">取得這個已驗證之 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value of this validated XML node.">這個已驗證 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventArgs">
      <summary vsli:raw="Returns detailed information related to the &lt;see langword=&quot;ValidationEventHandler&quot; /&gt;.">傳回與 <see langword="ValidationEventHandler" /> 相關的詳細資訊。</summary>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Exception">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; associated with the validation event.">取得與驗證事件關聯的 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchemaException&quot; /&gt; associated with the validation event.">與驗證事件關聯的 <see langword="XmlSchemaException" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Message">
      <summary vsli:raw="Gets the text description corresponding to the validation event.">取得對應至驗證事件的文字描述。</summary>
      <returns vsli:raw="The text description.">文字描述。</returns>
    </member>
    <member name="P:System.Xml.Schema.ValidationEventArgs.Severity">
      <summary vsli:raw="Gets the severity of the validation event.">取得驗證事件的嚴重性。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSeverityType&quot; /&gt; value representing the severity of the validation event.">
        <see cref="T:System.Xml.Schema.XmlSeverityType" />，表示驗證事件嚴重性。</returns>
    </member>
    <member name="T:System.Xml.Schema.ValidationEventHandler">
      <summary vsli:raw="Represents the callback method that will handle XML schema validation events and the &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventArgs&quot; /&gt;.">表示將處理 XML 結構描述驗證事件和 <see cref="T:System.Xml.Schema.ValidationEventArgs" /> 的回呼方法。</summary>
      <param name="sender" vsli:raw="The source of the event.  &#xA;  &#xA; Note Determine the type of a sender before using it in your code. You cannot assume that the sender is an instance of a particular type. The sender is also not guaranteed to not  be null. Always surround your casts with failure handling logic.">事件的來源。  
  
 附註：在程式碼中使用之前，判斷傳送者的類型。 您不能假設傳送者是特定類型的執行個體。 傳送者也不是一定都不會是 null。 請一律使用失敗處理邏輯來包住轉型。</param>
      <param name="e" vsli:raw="The event data.">事件資料。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlAtomicValue">
      <summary vsli:raw="Represents the typed value of a validated XML element or attribute. The &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; class cannot be inherited.">表示已驗證之 XML 項目或屬性的具型別值。 無法繼承 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 類別 (Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.Clone">
      <summary vsli:raw="Returns a copy of this &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object.">傳回這個 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件的複本。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object copy of this &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object.">這個 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件的 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件複本。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.System#ICloneable#Clone">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlAtomicValue.Clone&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlAtomicValue.Clone" />。</summary>
      <returns vsli:raw="A copy of this &lt;see cref=&quot;T:System.Xml.Schema.XmlAtomicValue&quot; /&gt; object.">這個 <see cref="T:System.Xml.Schema.XmlAtomicValue" /> 物件的複本。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ToString">
      <summary vsli:raw="Gets the &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">取得已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlAtomicValue.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Returns the validated XML element or attribute's value as the type specified using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">使用為解析命名空間前置詞而指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，以指定的型別形式傳回已驗證之 XML 項目或屬性的值。</summary>
      <param name="type" vsli:raw="The type to return the validated XML element or attribute's value as.">傳回已驗證之 XML 項目或屬性值所使用的型別。</param>
      <param name="nsResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the target type.">已驗證之 XML 項目或屬性的值不是目標型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The value of the validated XML element or attribute as the type requested.">型別所要求之已驗證 XML 項目或屬性的值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.IsNode">
      <summary vsli:raw="Gets a value indicating whether the validated XML element or attribute is an XPath node or an atomic value.">取得值，指出已驗證的 XML 項目或屬性是 XPath 節點還是原子值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the validated XML element or attribute is an XPath node; &lt;see langword=&quot;false&quot; /&gt; if the validated XML element or attribute is an atomic value.">如果已驗證的 XML 項目或屬性是 XPath 節點，則為 <see langword="true" />；如果已驗證的 XML 項目或屬性是原子值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.TypedValue">
      <summary vsli:raw="Gets the current validated XML element or attribute as a boxed object of the most appropriate .NET type according to its schema type.">取得目前已驗證的 XML 項目或屬性，做為最適當 Microsoft .NET Framework 型別的 Boxed 物件 (根據其結構描述型別)。</summary>
      <returns vsli:raw="The current validated XML element or attribute as a boxed object of the most appropriate .NET type.">目前已驗證的 XML 項目或屬性，做為最適當 .NET Framework 型別的 Boxed 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">取得已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; value of the validated XML element or attribute.">已驗證之 XML 項目或屬性的 <see langword="string" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsBoolean">
      <summary vsli:raw="Gets the validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">取得 <see cref="T:System.Boolean" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; type.">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Boolean" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Boolean&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Boolean" /> 無效。</exception>
      <returns vsli:raw="The validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">
        <see cref="T:System.Boolean" /> 形式之已驗證的 XML 項目或屬性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDateTime">
      <summary vsli:raw="Gets the validated XML element or attribute's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">取得 <see cref="T:System.DateTime" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; type.">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.DateTime" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.DateTime" /> 無效。</exception>
      <returns vsli:raw="The validated XML element or attribute's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" /> 形式之已驗證的 XML 項目或屬性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsDouble">
      <summary vsli:raw="Gets the validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">取得 <see cref="T:System.Double" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Double&quot; /&gt; type.">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Double" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Double&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Double" /> 無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The validated XML element or attribute's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" /> 形式之已驗證的 XML 項目或屬性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsInt">
      <summary vsli:raw="Gets the validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">取得 <see cref="T:System.Int32" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Int32" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int32&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Int32" /> 無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> 形式之已驗證的 XML 項目或屬性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueAsLong">
      <summary vsli:raw="Gets the validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">取得 <see cref="T:System.Int64" /> 形式之已驗證的 XML 項目或屬性值。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The validated XML element or attribute's value is not in the correct format for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; type.">已驗證之 XML 項目或屬性的值不是 <see cref="T:System.Int64" /> 型別的正確格式。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int64&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Int64" /> 無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The validated XML element or attribute's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" /> 形式之已驗證的 XML 項目或屬性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.ValueType">
      <summary vsli:raw="Gets the .NET type of the validated XML element or attribute.">取得已驗證之 XML 項目或屬性的 Microsoft .NET Framework 型別。</summary>
      <returns vsli:raw="The .NET type of the validated XML element or attribute. The default value is &lt;see cref=&quot;T:System.String&quot; /&gt;.">已驗證之 XML 項目或屬性的 .NET Framework 型別。 預設值是 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlAtomicValue.XmlType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the validated XML element or attribute.">取得已驗證之 XML 項目或屬性的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the validated XML element or attribute.">已驗證之 XML 項目或屬性的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchema">
      <summary vsli:raw="An in-memory representation of an XML Schema, as specified in the World Wide Web Consortium (W3C) XML Schema Part 1: Structures and XML Schema Part 2: Datatypes].">依全球資訊網協會 (W3C) 的 XML 結構描述第 1 部分：結構 (英文) 及 XML 結構描述第 2 部分：資料類型 (英文) 所規定之 XML 結構描述的記憶體內部表示。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.InstanceNamespace">
      <summary vsli:raw="The XML schema instance namespace. This field is constant.">XML 結構描述執行個體命名空間。 這個欄位為常數。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchema.Namespace">
      <summary vsli:raw="The XML schema namespace. This field is constant.">XML 結構描述命名空間。 這個欄位為常數。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchema" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.">將 XML 結構描述物件模型 (SOM) 編譯成驗證用的結構描述資訊。 用於檢查以程式方式建置的 SOM 的語法和語意結構。 語意驗證檢查是在編譯階段執行。</summary>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about XML Schema validation errors.">驗證事件處理常式，接收 XML 結構描述驗證錯誤的相關資訊。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Compile(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlResolver)">
      <summary vsli:raw="Compiles the XML Schema Object Model (SOM) into schema information for validation. Used to check the syntactic and semantic structure of the programmatically built SOM. Semantic validation checking is performed during compilation.">將 XML 結構描述物件模型 (SOM) 編譯成驗證用的結構描述資訊。 用於檢查以程式方式建置的 SOM 的語法和語意結構。 語意驗證檢查是在編譯階段執行。</summary>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about the XML Schema validation errors.">接收 XML 結構描述驗證錯誤相關資訊的驗證事件處理常式。</param>
      <param name="resolver" vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; used to resolve namespaces referenced in &lt;see langword=&quot;include&quot; /&gt; and &lt;see langword=&quot;import&quot; /&gt; elements.">
        <see langword="XmlResolver" />，用來解析 <see langword="include" /> 和 <see langword="import" /> 項目中參考的命名空間。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.Stream,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Reads an XML Schema from the supplied stream.">從提供的資料流讀取 XML 結構描述。</summary>
      <param name="stream" vsli:raw="The supplied data stream.">提供的資料流。</param>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about XML Schema syntax errors.">接收 XML 結構描述語法錯誤相關資訊的驗證事件處理常式。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is raised if no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified.">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，就會引發 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object representing the XML Schema.">表示 XML 結構描述的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.IO.TextReader,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Reads an XML Schema from the supplied &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">從提供的 <see cref="T:System.IO.TextReader" /> 讀取 XML 結構描述。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML Schema to read.">包含要讀取 XML 結構描述的 <see langword="TextReader" />。</param>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about the XML Schema syntax errors.">接收 XML 結構描述語法錯誤相關資訊的驗證事件處理常式。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is raised if no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified.">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，就會引發 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object representing the XML Schema.">表示 XML 結構描述的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Read(System.Xml.XmlReader,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Reads an XML Schema from the supplied &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">從提供的 <see cref="T:System.Xml.XmlReader" /> 讀取 XML 結構描述。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; containing the XML Schema to read.">包含要讀取 XML 結構描述的 <see langword="XmlReader" />。</param>
      <param name="validationEventHandler" vsli:raw="The validation event handler that receives information about the XML Schema syntax errors.">接收 XML 結構描述語法錯誤相關資訊的驗證事件處理常式。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is raised if no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified.">如果未指定 <see cref="T:System.Xml.Schema.XmlSchemaException" />，就會引發 <see cref="T:System.Xml.Schema.ValidationEventHandler" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object representing the XML Schema.">表示 XML 結構描述的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream)">
      <summary vsli:raw="Writes the XML Schema to the supplied data stream.">將 XML 結構描述寫入提供的資料流。</summary>
      <param name="stream" vsli:raw="The supplied data stream.">提供的資料流。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.Stream,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; specified.">使用指定的 <see cref="T:System.IO.Stream" />，將 XML 結構描述寫入提供的 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <param name="stream" vsli:raw="The supplied data stream.">提供的資料流。</param>
      <param name="namespaceManager" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">將 XML 結構描述寫入提供的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">要寫入的目標 <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.IO.TextWriter,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">將 XML 結構描述寫入提供的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">要寫入的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="namespaceManager" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將 XML 結構描述寫入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to write to.">要寫入的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; parameter is null.">
        <paramref name="writer" /> 參數為 null。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchema.Write(System.Xml.XmlWriter,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Writes the XML Schema to the supplied &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將 XML 結構描述寫入提供的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to write to.">要寫入的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="namespaceManager" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNamespaceManager" />。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeFormDefault">
      <summary vsli:raw="Gets or sets the form for attributes declared in the target namespace of the schema.">取得或設定在結構描述目標命名空間中宣告的屬性 (Attribute) 格式。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; value that indicates if attributes from the target namespace are required to be qualified with the namespace prefix. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaForm.None&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，表示目標命名空間中的屬性是否必須以命名空間前置詞限定。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.AttributeGroups">
      <summary vsli:raw="Gets the post-schema-compilation value of all the global attribute groups in the schema.">取得結構描述中所有全域屬性群組的後結構描述編譯值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the global attribute groups in the schema.">結構描述中所有全域屬性群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Attributes">
      <summary vsli:raw="Gets the post-schema-compilation value for all the attributes in the schema.">取得結構描述中所有屬性的後結構描述編譯值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the attributes in the schema.">結構描述中所有屬性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.BlockDefault">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;blockDefault&quot; /&gt; attribute which sets the default value of the &lt;see langword=&quot;block&quot; /&gt; attribute on element and complex types in the &lt;see langword=&quot;targetNamespace&quot; /&gt; of the schema.">取得或設定 <see langword="blockDefault" /> 屬性，該屬性設定結構描述之 <see langword="block" /> 中項目和複雜型別上 <see langword="targetNamespace" /> 屬性的預設值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; value representing the different methods for preventing derivation. The default value is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示防止衍生的各種方法。 預設值是 <see langword="XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.ElementFormDefault">
      <summary vsli:raw="Gets or sets the form for elements declared in the target namespace of the schema.">取得或設定在結構描述目標命名空間中宣告的元素格式。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; value that indicates if elements from the target namespace are required to be qualified with the namespace prefix. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaForm.None&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值，表示目標命名空間中的項目是否必須以命名空間前置詞限定。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Elements">
      <summary vsli:raw="Gets the post-schema-compilation value for all the elements in the schema.">取得結構描述中所有元素的後結構描述編譯值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the elements in the schema.">結構描述中所有項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.FinalDefault">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;finalDefault&quot; /&gt; attribute which sets the default value of the &lt;see langword=&quot;final&quot; /&gt; attribute on elements and complex types in the target namespace of the schema.">取得或設定 <see langword="finalDefault" /> 屬性，該屬性設定結構描述之目標命名空間中項目和複雜型別上 <see langword="final" /> 屬性的預設值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; value representing the different methods for preventing derivation. The default value is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示防止衍生的各種方法。 預設值是 <see langword="XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Groups">
      <summary vsli:raw="Gets the post-schema-compilation value of all the groups in the schema.">取得結構描述中所有群組的後結構描述編譯值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all the groups in the schema.">結構描述中所有群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Id">
      <summary vsli:raw="Gets or sets the string ID.">取得或設定字串 ID。</summary>
      <returns vsli:raw="The ID of the string. The default value is &lt;see langword=&quot;String.Empty&quot; /&gt;.">字串的 ID。 預設值是 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Includes">
      <summary vsli:raw="Gets the collection of included and imported schemas.">取得包含和匯入結構描述的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of the included and imported schemas.">已包含和匯入之結構描述的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.IsCompiled">
      <summary vsli:raw="Indicates if the schema has been compiled.">指出結構描述是否已編譯。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if schema has been compiled, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">如果結構描述已編譯，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Items">
      <summary vsli:raw="Gets the collection of schema elements in the schema and is used to add new element types at the &lt;see langword=&quot;schema&quot; /&gt; element level.">取得結構描述中結構描述項目的集合，並用於在 <see langword="schema" /> 項目層級加入新項目型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of schema elements in the schema.">結構描述中結構描述項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Notations">
      <summary vsli:raw="Gets the post-schema-compilation value for all notations in the schema.">取得結構描述中所有標記法的後結構描述編譯值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; collection of all notations in the schema.">結構描述中所有標記法的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.SchemaTypes">
      <summary vsli:raw="Gets the post-schema-compilation value of all schema types in the schema.">取得結構描述中所有結構描述類型的後結構描述編譯值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of all schema types in the schema.">結構描述中所有結構描述型別的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.TargetNamespace">
      <summary vsli:raw="Gets or sets the Uniform Resource Identifier (URI) of the schema target namespace.">取得或設定結構描述目標命名空間的統一資源識別元 (URI)。</summary>
      <returns vsli:raw="The schema target namespace.">結構描述目標命名空間。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes which do not belong to the schema target namespace.">取得或設定不屬於結構描述目標命名空間的限定屬性。</summary>
      <returns vsli:raw="An array of qualified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects that do not belong to the schema target namespace.">不屬於結構描述目標命名空間之限定 <see cref="T:System.Xml.XmlAttribute" /> 物件的陣列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchema.Version">
      <summary vsli:raw="Gets or sets the version of the schema.">取得或設定結構描述的版本。</summary>
      <returns vsli:raw="The version of the schema. The default value is &lt;see langword=&quot;String.Empty&quot; /&gt;.">結構描述的版本。 預設值是 <see langword="String.Empty" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAll">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;all&quot; /&gt; element (compositor).">表示全球資訊網協會 (W3C) 的 <see langword="all" /> 項目 (複合項)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAll.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAll" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAll.Items">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;XmlSchemaElement&quot; /&gt; elements contained within the &lt;see langword=&quot;all&quot; /&gt; compositor.">取得 <see langword="XmlSchemaElement" /> 複合項中包含之 <see langword="all" /> 項目的集合。</summary>
      <returns vsli:raw="The collection of elements contained in &lt;see langword=&quot;XmlSchemaAll&quot; /&gt;.">
        <see langword="XmlSchemaAll" /> 中包含的項目集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotated">
      <summary vsli:raw="The base class for any element that can contain annotation elements.">可以包含附註項目的任何項目之基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotated.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotated&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Annotation">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;annotation&quot; /&gt; property.">取得或設定 <see langword="annotation" /> 屬性。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotation&quot; /&gt; representing the &lt;see langword=&quot;annotation&quot; /&gt; property.">
        <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />，表示 <see langword="annotation" /> 屬性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.Id">
      <summary vsli:raw="Gets or sets the string id.">取得或設定字串 ID。</summary>
      <returns vsli:raw="The string id. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">字串識別碼。預設值為 <see langword="String.Empty" /> 。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes that do not belong to the current schema's target namespace.">取得或設定不屬於目前結構描述之目標命名空間的限定屬性 (Attribute)。</summary>
      <returns vsli:raw="An array of qualified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects that do not belong to the schema's target namespace.">不屬於結構描述的之目標命名空間的限定 <see cref="T:System.Xml.XmlAttribute" /> 物件陣列。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnnotation">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;annotation&quot; /&gt; element.">表示全球資訊網協會 (W3C) 的 <see langword="annotation" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnnotation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotation&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Id">
      <summary vsli:raw="Gets or sets the string id.">取得或設定字串 ID。</summary>
      <returns vsli:raw="The string id. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">字串識別碼。預設值為 <see langword="String.Empty" /> 。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.Items">
      <summary vsli:raw="Gets the &lt;see langword=&quot;Items&quot; /&gt; collection that is used to store the &lt;see langword=&quot;appinfo&quot; /&gt; and &lt;see langword=&quot;documentation&quot; /&gt; child elements.">取得用於存放 <see langword="Items" /> 和 <see langword="appinfo" /> 子項目的 <see langword="documentation" /> 集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt; of &lt;see langword=&quot;appinfo&quot; /&gt; and &lt;see langword=&quot;documentation&quot; /&gt; child elements.">
        <see langword="appinfo" /> 和 <see langword="documentation" /> 子項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnnotation.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes that do not belong to the schema's target namespace.">取得或設定不屬於結構描述目標命名空間的限定屬性 (Attribute)。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects that do not belong to the schema's target namespace.">
        <see cref="T:System.Xml.XmlAttribute" /> 物件的陣列，不屬於結構描述的目標命名空間。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAny">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;any&quot; /&gt; element.">表示全球資訊網協會 (W3C) 的 <see langword="any" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAny.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAny&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.Namespace">
      <summary vsli:raw="Gets or sets the namespaces containing the elements that can be used.">取得或設定包含可以使用之項目的命名空間。</summary>
      <returns vsli:raw="Namespaces for elements that are available for use. The default is &lt;see langword=&quot;##any&quot; /&gt;. Optional.">可以使用之項目的命名空間。 預設為 <see langword="##any" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAny.ProcessContents">
      <summary vsli:raw="Gets or sets information about how an application or XML processor should handle the validation of XML documents for the elements specified by the &lt;see langword=&quot;any&quot; /&gt; element.">取得或設定應用程式或 XML 處理器應如何處理驗證 <see langword="any" /> 項目指定之項目的 XML 文件的相關資訊。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentProcessing&quot; /&gt; values. If no &lt;see langword=&quot;processContents&quot; /&gt; attribute is specified, the default is &lt;see langword=&quot;Strict&quot; /&gt;.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值。 如果未指定 <see langword="processContents" /> 屬性，會預設值為 <see langword="Strict" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAnyAttribute">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">表示全球資訊網協會 (W3C) 的 <see langword="anyAttribute" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAnyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.Namespace">
      <summary vsli:raw="Gets or sets the namespaces containing the attributes that can be used.">取得或設定包含可以使用之屬性的命名空間。</summary>
      <returns vsli:raw="Namespaces for attributes that are available for use. The default is &lt;see langword=&quot;##any&quot; /&gt;. Optional.">可以使用之屬性的命名空間。 預設為 <see langword="##any" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAnyAttribute.ProcessContents">
      <summary vsli:raw="Gets or sets information about how an application or XML processor should handle the validation of XML documents for the attributes specified by the &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">取得或設定應用程式或 XML 處理器應如何處理驗證 <see langword="anyAttribute" /> 項目指定之屬性的 XML 文件的相關資訊。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentProcessing&quot; /&gt; values. If no &lt;see langword=&quot;processContents&quot; /&gt; attribute is specified, the default is &lt;see langword=&quot;Strict&quot; /&gt;.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" /> 值。 如果未指定 <see langword="processContents" /> 屬性，會預設值為 <see langword="Strict" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAppInfo">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;appinfo&quot; /&gt; element.">表示全球資訊網協會 (W3C) 的 <see langword="appinfo" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAppInfo.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAppInfo&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Markup">
      <summary vsli:raw="Gets or sets an array of &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; objects that represents the &lt;see langword=&quot;appinfo&quot; /&gt; child nodes.">取得或設定 <see cref="T:System.Xml.XmlNode" /> 物件的陣列，表示 <see langword="appinfo" /> 子節點。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; objects that represents the &lt;see langword=&quot;appinfo&quot; /&gt; child nodes.">
        <see cref="T:System.Xml.XmlNode" /> 物件的陣列，表示 <see langword="appinfo" /> 子節點。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAppInfo.Source">
      <summary vsli:raw="Gets or sets the source of the application information.">取得或設定應用程式資訊的來源。</summary>
      <returns vsli:raw="A Uniform Resource Identifier (URI) reference. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">統一資源識別元 (URI) 參考。 預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttribute">
      <summary vsli:raw="Represents the &lt;see langword=&quot;attribute&quot; /&gt; element from the XML Schema as specified by the World Wide Web Consortium (W3C). Attributes provide additional information for other document elements. The attribute tag is nested between the tags of a document's element for the schema. The XML document displays attributes as named items in the opening tag of an element.">將來自 XML 結構描述的 <see langword="attribute" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 屬性會提供其他文件元素的額外資訊。 屬性標記會以巢狀方式置於結構描述的文件元素標記之間。 XML 文件會在元素的開頭標記中，將屬性顯示成一個具名的項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeSchemaType">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object representing the type of the attribute based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaType&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName&quot; /&gt; of the attribute.">依照屬性的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" />，取得表示屬性型別的 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.AttributeType">
      <summary vsli:raw="Gets the common language runtime (CLR) object based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaType&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName&quot; /&gt; of the attribute that holds the post-compilation value of the &lt;see langword=&quot;AttributeType&quot; /&gt; property.">根據包含 <see langword="AttributeType" /> 屬性編譯後值之屬性的 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />，取得 Common Language Runtime (CLR) 物件。</summary>
      <returns vsli:raw="The common runtime library (CLR) object that holds the post-compilation value of the &lt;see langword=&quot;AttributeType&quot; /&gt; property.">Common Runtime Library (CRL) 物件，包含 <see langword="AttributeType" /> 屬性之編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.DefaultValue">
      <summary vsli:raw="Gets or sets the default value for the attribute.">取得或設定屬性的預設值。</summary>
      <returns vsli:raw="The default value for the attribute. The default is a null reference. Optional.">屬性的預設值。 預設值為 Null 參考。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.FixedValue">
      <summary vsli:raw="Gets or sets the fixed value for the attribute.">取得或設定屬性的固定值。</summary>
      <returns vsli:raw="The fixed value for the attribute. The default is null. Optional.">屬性的固定值。 預設值是 null。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Form">
      <summary vsli:raw="Gets or sets the form for the attribute.">取得或設定屬性的格式。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; values. The default is the value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchema.AttributeFormDefault&quot; /&gt; of the schema element containing the attribute. Optional.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設值是包含屬性的結構描述項目的 <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" /> 的值。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">取得或設定屬性的名稱。</summary>
      <returns vsli:raw="The name of the attribute.">屬性的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.QualifiedName">
      <summary vsli:raw="Gets the qualified name for the attribute.">取得屬性的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">
        <see langword="QualifiedName" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.RefName">
      <summary vsli:raw="Gets or sets the name of an attribute declared in this schema (or another schema indicated by the specified namespace).">取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中宣告的屬性名稱。</summary>
      <returns vsli:raw="The name of the attribute declared.">宣告的屬性的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType">
      <summary vsli:raw="Gets or sets the attribute type to a simple type.">取得或設定屬性類型為簡單類型。</summary>
      <returns vsli:raw="The simple type defined in this schema.">結構描述中定義的簡單類型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName">
      <summary vsli:raw="Gets or sets the name of the simple type defined in this schema (or another schema indicated by the specified namespace).">取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中定義的簡單類型的名稱。</summary>
      <returns vsli:raw="The name of the simple type.">簡單類型的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttribute.Use">
      <summary vsli:raw="Gets or sets information about how the attribute is used.">取得或設定如何使用屬性的相關資訊。</summary>
      <returns vsli:raw="One of the following values: None, Prohibited, Optional, or Required. The default is Optional. Optional.">下列其中一個值：None、Prohibited、Optional 或 Required。 預設值為 Optional。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroup">
      <summary vsli:raw="Represents the &lt;see langword=&quot;attributeGroup&quot; /&gt; element from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroups provides a mechanism to group a set of attribute declarations so that they can be incorporated as a group into complex type definitions.">將來自 XML 結構描述的 <see langword="attributeGroup" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 AttributesGroups 提供群組一組屬性宣告的機制，使其能做為一個群組加入複雜類型定義中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroup.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroup&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the attribute group.">取得或設定屬性群組的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</summary>
      <returns vsli:raw="The World Wide Web Consortium (W3C) &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">全球資訊網協會 (W3C) 的 <see langword="anyAttribute" /> 項目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the attribute group. Contains &lt;see langword=&quot;XmlSchemaAttribute&quot; /&gt; and &lt;see langword=&quot;XmlSchemaAttributeGroupRef&quot; /&gt; elements.">取得屬性群組的屬性集合。 包含 <see langword="XmlSchemaAttribute" /> 和 <see langword="XmlSchemaAttributeGroupRef" /> 項目。</summary>
      <returns vsli:raw="The collection of attributes for the attribute group.">屬性群組的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.Name">
      <summary vsli:raw="Gets or sets the name of the attribute group.">取得或設定屬性群組的名稱。</summary>
      <returns vsli:raw="The name of the attribute group.">屬性群組的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.QualifiedName">
      <summary vsli:raw="Gets the qualified name of the attribute group.">取得屬性群組的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="The qualified name of the attribute group.">屬性群組的限定名稱 (Qualified Name)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroup.RedefinedAttributeGroup">
      <summary vsli:raw="Gets the redefined attribute group property from the XML Schema.">從 XML 結構描述中取得重新定義的屬性 (Attribute) 群組屬性 (Property)。</summary>
      <returns vsli:raw="The redefined attribute group property.">重新定義的屬性 (Attribute) 群組屬性 (Property)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaAttributeGroupRef">
      <summary vsli:raw="Represents the &lt;see langword=&quot;attributeGroup&quot; /&gt; element with the &lt;see langword=&quot;ref&quot; /&gt; attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). AttributesGroupRef is the reference for an attributeGroup, name property contains the attribute group being referenced.">將來自 XML 結構描述之具有 <see langword="ref" /> 屬性的 <see langword="attributeGroup" /> 元素，依全球資訊網協會 (W3C) 規定表示。 AttributesGroupRef 是 attributeGroup 的參考，name 屬性包含所參考的屬性群組。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaAttributeGroupRef.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaAttributeGroupRef.RefName">
      <summary vsli:raw="Gets or sets the name of the referenced &lt;see langword=&quot;attributeGroup&quot; /&gt; element.">取得或設定參考 <see langword="attributeGroup" /> 項目的名稱。</summary>
      <returns vsli:raw="The name of the referenced attribute group. The value must be a QName.">參考屬性群組的名稱。 值必須是 QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaChoice">
      <summary vsli:raw="Represents the &lt;see langword=&quot;choice&quot; /&gt; element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The &lt;see langword=&quot;choice&quot; /&gt; allows only one of its children to appear in an instance.">將來自 XML 結構描述的 <see langword="choice" /> 元素 (複合項)，依全球資訊網協會 (W3C) 的規定表示。 <see langword="choice" /> 可讓一個執行個體中只允許其子系之一出現。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaChoice.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaChoice.Items">
      <summary vsli:raw="Gets the collection of the elements contained with the compositor (&lt;see langword=&quot;choice&quot; /&gt;): &lt;see langword=&quot;XmlSchemaElement&quot; /&gt;, &lt;see langword=&quot;XmlSchemaGroupRef&quot; /&gt;, &lt;see langword=&quot;XmlSchemaChoice&quot; /&gt;, &lt;see langword=&quot;XmlSchemaSequence&quot; /&gt;, or &lt;see langword=&quot;XmlSchemaAny&quot; /&gt;.">取得以複合項 (<see langword="choice" />)：<see langword="XmlSchemaElement" />、<see langword="XmlSchemaGroupRef" />、<see langword="XmlSchemaChoice" />、<see langword="XmlSchemaSequence" /> 或 <see langword="XmlSchemaAny" /> 來包含的項目集合。</summary>
      <returns vsli:raw="The collection of elements contained within &lt;see langword=&quot;XmlSchemaChoice&quot; /&gt;.">
        <see langword="XmlSchemaChoice" /> 中包含的項目集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollection">
      <summary vsli:raw="Contains a cache of XML Schema definition language (XSD) and XML-Data Reduced (XDR) schemas. The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCollection&quot; /&gt; class is obsolete. Use &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; instead.">包含 XML 結構描述定義語言 (XSD) 和 XML-Data Reduced (XDR) 結構描述的快取。 <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> 類別已經過時。 請改用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaCollection.ValidationEventHandler">
      <summary vsli:raw="Sets an event handler for receiving information about the XDR and XML schema validation errors.">設定事件處理常式，接收關於 XDR 和 XML 結構描述驗證錯誤的資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; class.">初始化 <see langword="XmlSchemaCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;. The &lt;see langword=&quot;XmlNameTable&quot; /&gt; is used when loading schemas.">使用指定的 <see langword="XmlSchemaCollection" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。 載入結構描述時會使用 <see langword="XmlNameTable" />。</summary>
      <param name="nametable" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.String)">
      <summary vsli:raw="Adds the schema located by the given URL into the schema collection.">將指定的 URL 找到的結構描述加入結構描述集合中。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt;.">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是 <see langword="targetNamespace" />。</param>
      <param name="uri" vsli:raw="The URL that specifies the schema to load.">指定要載入之結構描述的 URL。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">結構描述不是有效的結構描述。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; added to the schema collection; &lt;see langword=&quot;null&quot; /&gt; if the schema being added is an XDR schema or if there are compilation errors in the schema.">加入結構描述集合的 <see cref="T:System.Xml.Schema.XmlSchema" />，如果加入的結構描述是 XDR 結構描述，或者結構描述中有編譯錯誤，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader)">
      <summary vsli:raw="Adds the schema contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the schema collection.">加入包含在 <see cref="T:System.Xml.XmlReader" /> 中的結構描述至結構描述集合。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt;.">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是 <see langword="targetNamespace" />。</param>
      <param name="reader" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the schema to add.">包含要加入之結構描述的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">結構描述不是有效的結構描述。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; added to the schema collection; &lt;see langword=&quot;null&quot; /&gt; if the schema being added is an XDR schema or if there are compilation errors in the schema.">加入結構描述集合的 <see cref="T:System.Xml.Schema.XmlSchema" />，如果加入的結構描述是 XDR 結構描述，或者結構描述中有編譯錯誤，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.String,System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary vsli:raw="Adds the schema contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the schema collection. The specified &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is used to resolve any external resources.">加入包含在 <see cref="T:System.Xml.XmlReader" /> 中的結構描述至結構描述集合。 指定的 <see cref="T:System.Xml.XmlResolver" />，用來解析任何的外部資源。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt;.">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是 <see langword="targetNamespace" />。</param>
      <param name="reader" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the schema to add.">包含要加入之結構描述的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces referenced in &lt;see langword=&quot;include&quot; /&gt; and &lt;see langword=&quot;import&quot; /&gt; elements or &lt;see langword=&quot;x-schema&quot; /&gt; attribute (XDR schemas). If this is &lt;see langword=&quot;null&quot; /&gt;, external references are not resolved.">
        <see cref="T:System.Xml.XmlResolver" />，用來解析在 <see langword="include" /> 和 <see langword="import" /> 項目或 <see langword="x-schema" /> 屬性 (XDR 結構描述) 中參考的命名空間。 如果這個值是 <see langword="null" />，就不會解析外部參考。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">結構描述不是有效的結構描述。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; added to the schema collection; &lt;see langword=&quot;null&quot; /&gt; if the schema being added is an XDR schema or if there are compilation errors in the schema.">加入結構描述集合的 <see cref="T:System.Xml.Schema.XmlSchema" />，如果加入的結構描述是 XDR 結構描述，或者結構描述中有編譯錯誤，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; to the collection.">將 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入至集合中。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; to add to the collection.">要加入至集合的 <see langword="XmlSchema" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; object.">
        <see langword="XmlSchema" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchema,System.Xml.XmlResolver)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; to the collection. The specified &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is used to resolve any external references.">將 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入至集合中。 指定的 <see cref="T:System.Xml.XmlResolver" />，用來解析任何的外部參考。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; to add to the collection.">要加入至集合的 <see langword="XmlSchema" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces referenced in &lt;see langword=&quot;include&quot; /&gt; and &lt;see langword=&quot;import&quot; /&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external references are not resolved.">
        <see cref="T:System.Xml.XmlResolver" />，用來解析 <see langword="include" /> 和 <see langword="import" /> 項目中參考的命名空間。 如果這個值是 <see langword="null" />，就不會解析外部參考。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The schema is not a valid schema.">結構描述不是有效的結構描述。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; added to the schema collection.">要加入至結構描述集合中的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Add(System.Xml.Schema.XmlSchemaCollection)">
      <summary vsli:raw="Adds all the namespaces defined in the given collection (including their associated schemas) to this collection.">將指定的集合中定義的所有命名空間 (包含其相關的結構描述) 加入這個集合。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; you want to add to this collection.">您要加入至這個集合的 <see langword="XmlSchemaCollection" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.String)">
      <summary vsli:raw="Gets a value indicating whether a schema with the specified namespace is in the collection.">取得值，表示具有指定命名空間的結構描述是否在集合中。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema. For XML Schemas, this will typically be the target namespace.">與結構描述關聯的命名空間 URI。 對於 XML 結構描述而言，這通常會是目標命名空間。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a schema with the specified namespace is in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果具有指定命名空間的結構描述是在集合中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.Contains(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Gets a value indicating whether the &lt;see langword=&quot;targetNamespace&quot; /&gt; of the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; is in the collection.">取得值，表示指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 的 <see langword="targetNamespace" /> 是否在集合中。</summary>
      <param name="schema" vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; object.">
        <see langword="XmlSchema" /> 物件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a schema in the collection with the same &lt;see langword=&quot;targetNamespace&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合中有具有相同 <see langword="true" /> 的結構描述，則為 <see langword="targetNamespace" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see langword=&quot;XmlSchema&quot; /&gt; objects from this collection into the given array starting at the given index.">將這個集合中所有的 <see langword="XmlSchema" /> 物件複製到從指定索引開始的指定陣列中。</summary>
      <param name="array" vsli:raw="The array to copy the objects to.">將物件複製到其中的陣列。</param>
      <param name="index" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying will begin.">
        <paramref name="array" /> 中開始複製處的索引。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator">
      <summary vsli:raw="Provides support for the &quot;for each&quot; style iteration over the collection of schemas.">提供以「各自獨立」方式逐一查看結構描述集合的支援。</summary>
      <returns vsli:raw="An enumerator for iterating over all schemas in the current collection.">列舉程式，用來逐一查看目前集合中的所有結構描述。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollection.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)" />。</summary>
      <param name="array" vsli:raw="The array to copy the objects to.">將物件複製到其中的陣列。</param>
      <param name="index" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; where copying will begin.">
        <paramref name="array" /> 中開始複製處的索引。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollection.GetEnumerator" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the collection.">用於集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Count">
      <summary vsli:raw="Gets the number of namespaces defined in this collection.">取得這個集合中定義的命名空間數目。</summary>
      <returns vsli:raw="The number of namespaces defined in this collection.">這個集合中定義的命名空間數目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.Item(System.String)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; associated with the given namespace URI.">取得與指定的命名空間 URI 關聯的 <see cref="T:System.Xml.Schema.XmlSchema" />。</summary>
      <param name="ns" vsli:raw="The namespace URI associated with the schema you want to return. This will typically be the &lt;see langword=&quot;targetNamespace&quot; /&gt; of the schema.">與您要傳回的結構描述相關聯的命名空間 URI。 這通常是結構描述的 <see langword="targetNamespace" />。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; associated with the namespace URI; &lt;see langword=&quot;null&quot; /&gt; if there is no loaded schema associated with the given namespace or if the namespace is associated with an XDR schema.">與命名空間 URI 相關聯的 <see langword="XmlSchema" />，如果載入的結構描述與指定的命名空間無關聯，或者命名空間與 XDR 結構描述相關聯，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.NameTable">
      <summary vsli:raw="Gets the default &lt;see langword=&quot;XmlNameTable&quot; /&gt; used by the &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; when loading new schemas.">取得載入新結構描述時 <see langword="XmlNameTable" /> 使用的預設 <see langword="XmlSchemaCollection" />。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollection.Count&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollection.Count" />。</summary>
      <returns vsli:raw="The count of the items in the collection.">集合中專案的計數。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#IsSynchronized" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果同步處理集合，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollection.System#Collections#ICollection#SyncRoot" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt; object that can be used to synchronize access to the collection.">
        <see cref="P:System.Collections.ICollection.SyncRoot" />可以用來同步存取集合的物件。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCollectionEnumerator">
      <summary vsli:raw="Supports a simple iteration over a collection. This class cannot be inherited.">支援簡單反覆處理集合。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next schema in the collection.">使列舉程式前進至集合中下一個結構描述。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the move was successful; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">如果移動成功，則為 <see langword="true" />；如果列舉程式已通過集合的結尾，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.MoveNext" />。</summary>
      <returns vsli:raw="The next node.">下一個節點。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Reset" />。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; in the collection.">取得集合中目前的 <see cref="T:System.Xml.Schema.XmlSchema" />。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;XmlSchema&quot; /&gt; in the collection.">集合中目前的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaCollectionEnumerator.Current" />。</summary>
      <returns vsli:raw="The current node.">目前節點。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaCompilationSettings">
      <summary vsli:raw="Provides schema compilation options for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; class This class cannot be inherited.">提供 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 類別的結構描述編譯選項。這個類別無法被繼承。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaCompilationSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; should check for Unique Particle Attribution (UPA) violations.">取得或設定值，指出 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 是否應該檢查 Unique Particle Attribution (UPA) 違規。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; should check for Unique Particle Attribution (UPA) violations; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 應該檢查 Unique Particle Attribution (UPA) 違規，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContent">
      <summary vsli:raw="Represents the &lt;see langword=&quot;complexContent&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class represents the complex content model for complex types. It contains extensions or restrictions on a complex type that has either only elements or mixed content.">將來自 XML 結構描述的 <see langword="complexContent" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 表示複雜類型的複雜內容模型。 它包含只具有元素或混合內容之複雜類型的擴充或限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContent&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.Content">
      <summary vsli:raw="Gets or sets the content.">取得或設定內容。</summary>
      <returns vsli:raw="One of either the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentRestriction&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentExtension&quot; /&gt; classes.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 類別之一。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContent.IsMixed">
      <summary vsli:raw="Gets or sets information that determines if the type has a mixed content model.">取得或設定資訊，決定類型是否具有混合內容模型。</summary>
      <returns vsli:raw="If this property is &lt;see langword=&quot;true&quot; /&gt;, character data is allowed to appear between the child elements of the complex type (mixed content model). The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">如果屬性為 <see langword="true" />，複雜型別 (混合內容模型) 的子項目之間允許出現字元資料。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentExtension">
      <summary vsli:raw="Represents the &lt;see langword=&quot;extension&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with complex content model derived by extension. It extends the complex type by adding attributes or elements.">將來自 XML 結構描述的 <see langword="extension" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於具有由擴充衍生之複雜內容模型的複雜類型。 它會藉由加入屬性 (Attribute) 或元素以擴充複雜類型。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentExtension&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">取得或設定複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the complex content. Contains &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; elements.">取得複雜內容的屬性集合。 包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 項目。</summary>
      <returns vsli:raw="The collection of attributes for the complex content.">複雜內容的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of the complex type from which this type is derived by extension.">取得或設定利用擴充衍生這個類型的來源複雜類型名稱。</summary>
      <returns vsli:raw="The name of the complex type from which this type is derived by extension.">利用擴充衍生這個類型的來源複雜類型名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentExtension.Particle">
      <summary vsli:raw="Gets or sets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">取得或設定其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexContentRestriction">
      <summary vsli:raw="Represents the &lt;see langword=&quot;restriction&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for complex types with a complex content model derived by restriction. It restricts the contents of the complex type to a subset of the inherited complex type.">將來自 XML 結構描述的 <see langword="restriction" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於具有由限制衍生之複雜內容模型的複雜類型。 它會將複雜類型的內容限制為繼承複雜類型的子集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexContentRestriction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContentRestriction&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">取得或設定複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex content model.">複雜內容模型的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the complex type. Contains the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; elements.">取得複雜類型的屬性集合。 包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 項目。</summary>
      <returns vsli:raw="The collection of attributes for the complex type.">複雜類型的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of a complex type from which this type is derived by restriction.">取得或設定利用限制衍生這個類型的來源複雜類型名稱。</summary>
      <returns vsli:raw="The name of the complex type from which this type is derived by restriction.">利用限制衍生這個類型的來源複雜類型名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexContentRestriction.Particle">
      <summary vsli:raw="Gets or sets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">取得或設定其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaComplexType">
      <summary vsli:raw="Represents the &lt;see langword=&quot;complexType&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a complex type that determines the set of attributes and content of an element.">將來自 XML 結構描述的 <see langword="complexType" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 定義決定元素屬性 (Attribute) 集和內容的複雜類型。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaComplexType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AnyAttribute">
      <summary vsli:raw="Gets or sets the value for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex type.">取得或設定複雜型別的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件之值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; component of the complex type.">複雜型別的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" /> 元件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Attributes">
      <summary vsli:raw="Gets the collection of attributes for the complex type.">取得複雜類型的屬性集合。</summary>
      <returns vsli:raw="Contains &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; classes.">包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 類別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeUses">
      <summary vsli:raw="Gets the collection of all the complied attributes of this complex type and its base types.">取得這個複雜類型及其基底類型 (Base Type) 所有遵守之屬性的集合。</summary>
      <returns vsli:raw="The collection of all the attributes from this complex type and its base types. The post-compilation value of the &lt;see langword=&quot;AttributeUses&quot; /&gt; property.">這個複雜類型及其基本類型中所有屬性的集合。 <see langword="AttributeUses" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.AttributeWildcard">
      <summary vsli:raw="Gets the post-compilation value for &lt;see langword=&quot;anyAttribute&quot; /&gt; for this complex type and its base type(s).">取得這個複雜型別及其基底型別之 <see langword="anyAttribute" /> 的編譯後值。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;anyAttribute&quot; /&gt; element.">
        <see langword="anyAttribute" /> 項目的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Block">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;block&quot; /&gt; attribute.">取得或設定 <see langword="block" /> 屬性。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;block&quot; /&gt; attribute prevents a complex type from being used in the specified type of derivation. The default is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;. Optional.">
        <see langword="block" /> 屬性會防止複雜型別用於指定的衍生型別。 預設為 <see langword="XmlSchemaDerivationMethod.None" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.BlockResolved">
      <summary vsli:raw="Gets the value after the type has been compiled to the post-schema-validation information set (infoset). This value indicates how the type is enforced when &lt;see langword=&quot;xsi:type&quot; /&gt; is used in the instance document.">取得類型編譯為 post-schema-validation 資訊集 (infoset) 之後的值。 這個值指示在執行個體文件中使用 <see langword="xsi:type" /> 時，如何強制型別。</summary>
      <returns vsli:raw="The post-schema-validated infoset value. The default is &lt;see langword=&quot;BlockDefault&quot; /&gt; value on the &lt;see langword=&quot;schema&quot; /&gt; element.">Post-Schema-Validation Infoset 值。 預設值為 <see langword="BlockDefault" /> 項目上的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentModel">
      <summary vsli:raw="Gets or sets the post-compilation &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentModel&quot; /&gt; of this complex type.">取得或設定這個複雜型別的編譯後 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" />。</summary>
      <returns vsli:raw="The content model type that is one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContent&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexContent&quot; /&gt; classes.">屬於其中一個 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" /> 類別的內容模型型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentType">
      <summary vsli:raw="Gets the content model of the complex type which holds the post-compilation value.">取得包含編譯後值之複雜類型的內容模型。</summary>
      <returns vsli:raw="The post-compilation value of the content model for the complex type.">複雜類型之內容模型的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.ContentTypeParticle">
      <summary vsli:raw="Gets the particle that holds the post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaComplexType.ContentType&quot; /&gt; particle.">取得包含 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 物件編譯後值的物件。</summary>
      <returns vsli:raw="The particle for the content type. The post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaComplexType.ContentType&quot; /&gt; particle.">內容類型的物件。 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" /> 物件的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsAbstract">
      <summary vsli:raw="Gets or sets the information that determines if the &lt;see langword=&quot;complexType&quot; /&gt; element can be used in the instance document.">取得或設定資訊，決定是否可在執行個體文件中使用 <see langword="complexType" /> 項目。</summary>
      <returns vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, an element cannot use this &lt;see langword=&quot;complexType&quot; /&gt; element directly and must use a complex type that is derived from this &lt;see langword=&quot;complexType&quot; /&gt; element. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">如果為 <see langword="true" />，項目不能直接使用這個 <see langword="complexType" /> 項目，必須使用從這個 <see langword="complexType" /> 項目衍生的複雜型別。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.IsMixed">
      <summary vsli:raw="Gets or sets information that determines if the complex type has a mixed content model (markup within the content).">取得或設定資訊，決定複雜類型是否具有混合內容模型 (內容中的標記)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if character data can appear between child elements of this complex type; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">如果這個複雜型別的子項目之間可以出現字元資料，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaComplexType.Particle">
      <summary vsli:raw="Gets or sets the compositor type as one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">取得或設定複合項型別為其中一個 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns vsli:raw="The compositor type.">複合項類型。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContent">
      <summary vsli:raw="An abstract class for schema content.">結構描述內容的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContent&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentModel">
      <summary vsli:raw="Specifies the order and structure of the child elements of a type.">指定型別子項目的順序和結構。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaContentModel.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentModel&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaContentModel.Content">
      <summary vsli:raw="Gets or sets the content of the type.">取得或設定型別的內容。</summary>
      <returns vsli:raw="Provides the content of the type.">提供型別的內容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentProcessing">
      <summary vsli:raw="Provides information about the validation mode of &lt;see langword=&quot;any&quot; /&gt; and &lt;see langword=&quot;anyAttribute&quot; /&gt; element replacements.">提供 <see langword="any" /> 和 <see langword="anyAttribute" /> 項目取代之驗證模式的相關資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Lax">
      <summary vsli:raw="If the associated schema is found, the document items will be validated. No errors will be thrown otherwise.&#xA;        &#xA;If the item is not validated, the XML processor attempts to notify the client through a validation event handler with &lt;see cref=&quot;P:System.Xml.Schema.ValidationEventArgs.Severity&quot; /&gt; = &lt;see langword=&quot;XmlSeverityType.Warning&quot; /&gt;. If a validation event handler has not been set up, no information is returned when the warning is produced.">如果找到相關聯的結構描述，則將會驗證文件項目。 否則不會擲回任何錯誤。
        
如未驗證此項目，則 XML 處理器會嘗試透過驗證事件處理常式與 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 來通知用戶端。 如果尚未設定驗證事件處理常式，則產生警告時不會傳回任何資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.None">
      <summary vsli:raw="Document items are not validated.">未驗證文件項目。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Skip">
      <summary vsli:raw="Document items must consist of well-formed XML and are not validated by the schema.&#xA;        &#xA;The XML processor attempts to notify the client through a validation event handler with &lt;see cref=&quot;P:System.Xml.Schema.ValidationEventArgs.Severity&quot; /&gt; = &lt;see langword=&quot;XmlSeverityType.Warning&quot; /&gt; that no validation took place for the given item. If a validation event handler has not been set up, no information is returned when the warning is produced.">文件項目必須由語式正確的 XML 構成，並且未經結構描述驗證。
        
XML 處理器嘗試透過驗證事件處理常式與 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 來通知用戶端未針對指定項目執行驗證作業。 如果尚未設定驗證事件處理常式，則產生警告時不會傳回任何資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentProcessing.Strict">
      <summary vsli:raw="The schema processor must find a schema associated with the indicated namespace to validate the document items.&#xA;        &#xA;If the processor cannot find a schema or if the items are not valid, the XML processor attempts to notify the client through a validation event handler with &lt;see cref=&quot;P:System.Xml.Schema.ValidationEventArgs.Severity&quot; /&gt; = &lt;see langword=&quot;XmlSeverityType.Warning&quot; /&gt;. If a validation error occurs and a validation event handler is not provided, an exception is thrown.">結構描述處理器必須找到與指示之命名空間相關聯的結構描述，才能驗證文件項目。
        
如果處理器找不到結構描述，或如果項目未經驗證，則 XML 處理器會嘗試透過驗證事件處理常式與 <see cref="P:System.Xml.Schema.ValidationEventArgs.Severity" /> = <see langword="XmlSeverityType.Warning" /> 來通知用戶端。 如果發生驗證錯誤，且未提供驗證事件處理常式，則會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaContentType">
      <summary vsli:raw="Enumerations for the content model of the complex type. This represents the content in the post-schema-validation information set (infoset).">複雜型別之內容模型的列舉型別 (Enumeration)。 這表示 post-schema-validation 資訊集 (infoset) 中的內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.ElementOnly">
      <summary vsli:raw="Element-only content.">純項目內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Empty">
      <summary vsli:raw="Empty content.">空白內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.Mixed">
      <summary vsli:raw="Mixed content.">混合內容。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaContentType.TextOnly">
      <summary vsli:raw="Text-only content.">純文字內容。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatype">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; class is an abstract class for mapping XML Schema definition language (XSD) types to Common Language Runtime (CLR) types.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 類別是抽象類別，用於將 XML 結構描述定義語言 (XSD) 型別對應至 Common Language Runtime (CLR) 型別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type)">
      <summary vsli:raw="Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;, to the CLR type specified.">將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成指定的 CLR 型別。</summary>
      <param name="value" vsli:raw="The input value to convert to the specified type.">要轉換成指定型別的輸入值。</param>
      <param name="targetType" vsli:raw="The target type to convert the input value to.">將輸入值轉換成的目標型別。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; does not support a conversion from type of the value specified to the type specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的型別不支援從指定值的型別到指定型別的轉換。</exception>
      <returns vsli:raw="The converted input value.">已轉換的輸入值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ChangeType(System.Object,System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Converts the value specified, whose type is one of the valid Common Language Runtime (CLR) representations of the XML schema type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;, to the CLR type specified using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; represents the xs:QName type or a type derived from it.">將指定的值 (其型別是由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示之 XML 結構描述型別的其中一個有效 Common Language Runtime (CLR) 表示) 轉換成指定的 CLR 型別，如果 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 表示 xs:QName 型別或其衍生的型別，則使用 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</summary>
      <param name="value" vsli:raw="The input value to convert to the specified type.">要轉換成指定型別的輸入值。</param>
      <param name="targetType" vsli:raw="The target type to convert the input value to.">將輸入值轉換成的目標型別。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; used for resolving namespace prefixes. This is only of use if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; represents the xs:QName type or a type derived from it.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" />，用於解析命名空間前置詞。 這只在 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示 xs:QName 型別或其衍生的型別時使用。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; or &lt;see cref=&quot;T:System.Type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Object" /> 或 <see cref="T:System.Type" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type represented by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; does not support a conversion from type of the value specified to the type specified.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 表示的型別不支援從指定值的型別到指定型別的轉換。</exception>
      <returns vsli:raw="The converted input value.">已轉換的輸入值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)">
      <summary vsli:raw="The &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)&quot; /&gt; method always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" /> 方法永遠傳回 <see langword="false" />。</summary>
      <param name="datatype" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">一律傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDatatype.ParseValue(System.String,System.Xml.XmlNameTable,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="When overridden in a derived class, validates the &lt;see langword=&quot;string&quot; /&gt; specified against a built-in or user-defined simple type.">在衍生類別中覆寫時，對內建或使用者定義的簡單型別驗證指定的 <see langword="string" />。</summary>
      <param name="s" vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; to validate against the simple type.">要對簡單型別驗證的 <see langword="string" />。</param>
      <param name="nameTable" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use for atomization while parsing the &lt;see langword=&quot;string&quot; /&gt; if this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; object represents the xs:NCName type.">如果這個 <see cref="T:System.Xml.XmlNameTable" /> 物件表示 xs:NCName 型別，則為 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />，用於剖析 <see langword="string" /> 時的原子化。</param>
      <param name="nsmgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object to use while parsing the &lt;see langword=&quot;string&quot; /&gt; if this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; object represents the xs:QName type.">如果這個 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件表示 xs:QName 型別，則為剖析 <see langword="string" /> 時要使用的 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 物件。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The input value is not a valid instance of this W3C XML Schema type.">輸入值不是這個 W3C XML 結構描述型別的有效執行個體。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value to parse cannot be &lt;see langword=&quot;null&quot; /&gt;.">要剖析的值不能是 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that can be cast safely to the type returned by the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaDatatype.ValueType&quot; /&gt; property.">
        <see cref="T:System.Object" />，可安全地轉換為 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" /> 屬性傳回的型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TokenizedType">
      <summary vsli:raw="When overridden in a derived class, gets the type for the &lt;see langword=&quot;string&quot; /&gt; as specified in the World Wide Web Consortium (W3C) XML 1.0 specification.">在衍生類別中覆寫時，取得如在全球資訊網協會 (W3C) XML 1.0 規格中所指定之 <see langword="string" /> 的型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlTokenizedType&quot; /&gt; value for the &lt;see langword=&quot;string&quot; /&gt;.">
        <see langword="string" /> 的 <see cref="T:System.Xml.XmlTokenizedType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.TypeCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; value for the simple type.">取得簡單型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; value for the simple type.">簡單型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.ValueType">
      <summary vsli:raw="When overridden in a derived class, gets the Common Language Runtime (CLR) type of the item.">在衍生類別中覆寫時，取得項目的 Common Language Runtime (CLR) 型別。</summary>
      <returns vsli:raw="The Common Language Runtime (CLR) type of the item.">項目的 Common Language Runtime (CLR) 型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDatatype.Variety">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatypeVariety&quot; /&gt; value for the simple type.">取得簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatypeVariety&quot; /&gt; value for the simple type.">簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDatatypeVariety">
      <summary vsli:raw="Specifies the W3C XML schema data type variety of the type.">指定 W3C XML 結構描述資料型別的各種型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Atomic">
      <summary vsli:raw="A W3C XML schema atomic type.">W3C XML 結構描述原子型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.List">
      <summary vsli:raw="A W3C XML schema list type.">W3C XML 結構描述清單型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDatatypeVariety.Union">
      <summary vsli:raw="A W3C XML schema union type.">W3C XML 結構描述等位型別。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDerivationMethod">
      <summary vsli:raw="Provides different methods for preventing derivation.">提供防止衍生的各種方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.All">
      <summary vsli:raw="&lt;see langword=&quot;#all&quot; /&gt;. Refers to all derivation methods.">
        <see langword="#all" />. 參考所有的衍生方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Empty">
      <summary vsli:raw="Override default derivation method to allow any derivation.">覆寫預設衍生方法，以允許任何衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Extension">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Extension&quot; /&gt;.">由 <see langword="Extension" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.List">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;List&quot; /&gt;.">由 <see langword="List" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.None">
      <summary vsli:raw="Accepts the default derivation method.">接受預設的衍生方法。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Restriction">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Restriction&quot; /&gt;.">由 <see langword="Restriction" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Substitution">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Substitution&quot; /&gt;.">由 <see langword="Substitution" /> 參考衍生。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaDerivationMethod.Union">
      <summary vsli:raw="Refers to derivations by &lt;see langword=&quot;Union&quot; /&gt;.">由 <see langword="Union" /> 參考衍生。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaDocumentation">
      <summary vsli:raw="Represents the &lt;see langword=&quot;documentation&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies information to be read or used by humans within an &lt;see langword=&quot;annotation&quot; /&gt;.">將來自 XML 結構描述的 <see langword="documentation" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別會指定要讓使用者在 <see langword="annotation" /> 中讀取或使用的資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaDocumentation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDocumentation&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Language">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;xml:lang&quot; /&gt; attribute. This serves as an indicator of the language used in the contents.">取得或設定 <see langword="xml:lang" /> 屬性。 這可做為內容中使用之語言的指示器。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; attribute. Optional.">
        <see langword="xml:lang" /> 屬性。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Markup">
      <summary vsli:raw="Gets or sets an array of &lt;see langword=&quot;XmlNodes&quot; /&gt; that represents the documentation child nodes.">取得或設定表示文件子節點的 <see langword="XmlNodes" /> 陣列。</summary>
      <returns vsli:raw="The array that represents the documentation child nodes.">表示文件子節點的陣列。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaDocumentation.Source">
      <summary vsli:raw="Gets or sets the Uniform Resource Identifier (URI) source of the information.">取得或設定資訊的統一資源識別元 (URI) 來源。</summary>
      <returns vsli:raw="A URI reference. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">URI 參考。 預設為 <see langword="String.Empty" />。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaElement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;element&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is the base class for all particle types and is used to describe an element in an XML document.">將來自 XML 結構描述的 <see langword="element" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別是所有物件類型的基底類別，並且用於描述 XML 文件中的元素。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaElement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Block">
      <summary vsli:raw="Gets or sets a &lt;see langword=&quot;Block&quot; /&gt; derivation.">取得或設定 <see langword="Block" /> 衍生。</summary>
      <returns vsli:raw="The attribute used to block a type derivation. Default value is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;. Optional.">用於阻斷類型衍生的屬性 (Attribute)。 預設值為 <see langword="XmlSchemaDerivationMethod.None" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.BlockResolved">
      <summary vsli:raw="Gets the post-compilation value of the &lt;see langword=&quot;Block&quot; /&gt; property.">取得 <see langword="Block" /> 屬性的編譯後值。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;Block&quot; /&gt; property. The default is the &lt;see langword=&quot;BlockDefault&quot; /&gt; value on the &lt;see langword=&quot;schema&quot; /&gt; element.">
        <see langword="Block" /> 屬性的編譯後值。 預設值為 <see langword="BlockDefault" /> 項目上的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Constraints">
      <summary vsli:raw="Gets the collection of constraints on the element.">取得元素上條件約束 (Constraint) 的集合。</summary>
      <returns vsli:raw="The collection of constraints.">條件約束的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.DefaultValue">
      <summary vsli:raw="Gets or sets the default value of the element if its content is a simple type or content of the element is &lt;see langword=&quot;textOnly&quot; /&gt;.">如果項目的內容是簡單型別，或者項目的內容是 <see langword="textOnly" />，則取得項目的預設值。</summary>
      <returns vsli:raw="The default value for the element. The default is a null reference. Optional.">元素的預設值。 預設值為 Null 參考。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementSchemaType">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object representing the type of the element based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaElement.SchemaType&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName&quot; /&gt; values of the element.">依照項目的 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 或 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" /> 值，取得表示項目型別的 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.ElementType">
      <summary vsli:raw="Gets a common language runtime (CLR) object based on the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; of the element, which holds the post-compilation value of the &lt;see langword=&quot;ElementType&quot; /&gt; property.">根據包含 <see langword="ElementType" /> 屬性編譯後值之項目的 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，取得 Common Language Runtime (CLR) 物件。</summary>
      <returns vsli:raw="The common language runtime object. The post-compilation value of the &lt;see langword=&quot;ElementType&quot; /&gt; property.">Common Language Runtime 物件。 <see langword="ElementType" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Final">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;Final&quot; /&gt; property to indicate that no further derivations are allowed.">取得或設定 <see langword="Final" /> 屬性，表示不允許進一步的衍生。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Final&quot; /&gt; property. The default is &lt;see langword=&quot;XmlSchemaDerivationMethod.None&quot; /&gt;. Optional.">
        <see langword="Final" /> 屬性。 預設為 <see langword="XmlSchemaDerivationMethod.None" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FinalResolved">
      <summary vsli:raw="Gets the post-compilation value of the &lt;see langword=&quot;Final&quot; /&gt; property.">取得 <see langword="Final" /> 屬性的編譯後值。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;Final&quot; /&gt; property. Default value is the &lt;see langword=&quot;FinalDefault&quot; /&gt; value on the &lt;see langword=&quot;schema&quot; /&gt; element.">
        <see langword="Final" /> 屬性的編譯後值。 預設值為 <see langword="FinalDefault" /> 項目上的 <see langword="schema" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.FixedValue">
      <summary vsli:raw="Gets or sets the fixed value.">取得或設定固定值。</summary>
      <returns vsli:raw="The fixed value that is predetermined and unchangeable. The default is a null reference. Optional.">預先決定且不能變更的固定值。 預設值為 Null 參考。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Form">
      <summary vsli:raw="Gets or sets the form for the element.">取得或設定元素的格式。</summary>
      <returns vsli:raw="The form for the element. The default is the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchema.ElementFormDefault&quot; /&gt; value. Optional.">項目的形式。 預設值為 <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" /> 值。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsAbstract">
      <summary vsli:raw="Gets or sets information to indicate if the element can be used in an instance document.">取得或設定資訊，指出執行個體文件中是否能使用元素。</summary>
      <returns vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the element cannot appear in the instance document. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">如果為 <see langword="true" />，則項目不能出現在執行個體文件中。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.IsNillable">
      <summary vsli:raw="Gets or sets information that indicates if &lt;see langword=&quot;xsi:nil&quot; /&gt; can occur in the instance data. Indicates if an explicit nil value can be assigned to the element.">取得或設定資訊，指出執行個體資料中是否能出現 <see langword="xsi:nil" />。 指出是否能為元素指定明確的 nil 值。</summary>
      <returns vsli:raw="If nillable is &lt;see langword=&quot;true&quot; /&gt;, this enables an instance of the element to have the &lt;see langword=&quot;nil&quot; /&gt; attribute set to &lt;see langword=&quot;true&quot; /&gt;. The &lt;see langword=&quot;nil&quot; /&gt; attribute is defined as part of the XML Schema namespace for instances. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">如果 Nillable 為 <see langword="true" />，可以讓項目執行個體的 <see langword="nil" /> 屬性設定為 <see langword="true" />。 <see langword="nil" /> 屬性定義為執行個體 XML 結構描述命名空間的一部分。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.Name">
      <summary vsli:raw="Gets or sets the name of the element.">取得或設定項目的名稱。</summary>
      <returns vsli:raw="The name of the element. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;.">元素的名稱。 預設為 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.QualifiedName">
      <summary vsli:raw="Gets the actual qualified name for the given element.">取得指定元素的實際限定名稱。</summary>
      <returns vsli:raw="The qualified name of the element. The post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">項目的限定名稱。 <see langword="QualifiedName" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.RefName">
      <summary vsli:raw="Gets or sets the reference name of an element declared in this schema (or another schema indicated by the specified namespace).">取得或設定在這個結構描述 (或指定的命名空間指示的其他結構描述) 中宣告的元素的參考名稱。</summary>
      <returns vsli:raw="The reference name of the element.">元素的參考名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaType">
      <summary vsli:raw="Gets or sets the type of the element. This can either be a complex type or a simple type.">取得或設定元素的類型。 可以是複雜類型或簡單類型。</summary>
      <returns vsli:raw="The type of the element.">元素的類型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName">
      <summary vsli:raw="Gets or sets the name of a built-in data type defined in this schema or another schema indicated by the specified namespace.">取得或設定在這個結構描述 (或指定的命名空間指示的其他結構描述) 中定義的內建資料類型的名稱。</summary>
      <returns vsli:raw="The name of the built-in data type.">內建資料類型的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaElement.SubstitutionGroup">
      <summary vsli:raw="Gets or sets the name of an element that is being substituted by this element.">取得或設定由這個元素取代的元素的名稱。</summary>
      <returns vsli:raw="The qualified name of an element that is being substituted by this element. Optional.">由這個項元素取代之元素的限定名稱。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaEnumerationFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;enumeration&quot; /&gt; facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class specifies a list of valid values for a simpleType element. Declaration is contained within a &lt;see langword=&quot;restriction&quot; /&gt; declaration.">將來自 XML 結構描述的 <see langword="enumeration" /> Facet，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 指定 simpleType 項目的有效值清單。 宣告內含於 <see langword="restriction" /> 宣告中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaEnumerationFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaEnumerationFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaException">
      <summary vsli:raw="Returns detailed information about the schema exception.">傳回結構描述例外狀況的詳細資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Constructs a new &lt;see langword=&quot;XmlSchemaException&quot; /&gt; object with the given &lt;see langword=&quot;SerializationInfo&quot; /&gt; and &lt;see langword=&quot;StreamingContext&quot; /&gt; information that contains all the properties of the &lt;see langword=&quot;XmlSchemaException&quot; /&gt;.">以指定的 <see langword="XmlSchemaException" /> 和 <see langword="SerializationInfo" /> 資訊建構包含 <see langword="StreamingContext" /> 所有屬性的新 <see langword="XmlSchemaException" /> 物件。</summary>
      <param name="info" vsli:raw="SerializationInfo.">SerializationInfo。</param>
      <param name="context" vsli:raw="StreamingContext.">StreamingContext。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class with the exception message specified.">使用指定的例外狀況訊息，初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">錯誤狀況的 <see langword="string" /> 描述。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class with the exception message and original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception specified.">使用例外狀況訊息和導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 物件，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">導致這個例外狀況的原始 <see cref="T:System.Exception" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; class with the exception message specified, and the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, line number, and line position of the XML that cause this exception specified.">使用指定的例外狀況訊息，以及導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaException" /> 物件、XML 中的行號和行位置，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">導致這個例外狀況的原始 <see cref="T:System.Exception" /> 物件。</param>
      <param name="lineNumber" vsli:raw="The line number of the XML that caused this exception.">導致這個例外狀況的 XML 行號。</param>
      <param name="linePosition" vsli:raw="The line position of the XML that caused this exception.">導致這個例外狀況的 XML 行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XmlSchemaException&quot; /&gt; properties into the &lt;see langword=&quot;SerializationInfo&quot; /&gt; class for the given &lt;see langword=&quot;StreamingContext&quot; /&gt;.">將所有 <see langword="XmlSchemaException" /> 屬性資料流至指定之 <see langword="SerializationInfo" /> 的 <see langword="StreamingContext" /> 類別。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt;.">
        <see langword="SerializationInfo" />。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; information.">
        <see langword="StreamingContext" /> 資訊。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LineNumber">
      <summary vsli:raw="Gets the line number indicating where the error occurred.">取得行號，指出發生錯誤的位置。</summary>
      <returns vsli:raw="The line number indicating where the error occurred.">指示發生錯誤之位置的行號。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.LinePosition">
      <summary vsli:raw="Gets the line position indicating where the error occurred.">取得行位置，指出發生錯誤的位置。</summary>
      <returns vsli:raw="The line position indicating where the error occurred.">指示發生錯誤之位置的行位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.Message">
      <summary vsli:raw="Gets the description of the error condition of this exception.">取得這個例外狀況之錯誤條件的描述。</summary>
      <returns vsli:raw="The description of the error condition of this exception.">這個例外狀況之錯誤條件的描述。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceSchemaObject">
      <summary vsli:raw="The &lt;see langword=&quot;XmlSchemaObject&quot; /&gt; that produced the &lt;see langword=&quot;XmlSchemaException&quot; /&gt;.">產生 <see langword="XmlSchemaObject" /> 的 <see langword="XmlSchemaException" />。</summary>
      <returns vsli:raw="A valid object instance represents a structural validation error in the XML Schema Object Model (SOM).">表示 XML 結構描述物件模型 (SOM) 中之結構化驗證錯誤的有效物件執行個體。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaException.SourceUri">
      <summary vsli:raw="Gets the Uniform Resource Identifier (URI) location of the schema that caused the exception.">取得導致該例外狀況之結構描述的統一資源識別元 (URI) 位置。</summary>
      <returns vsli:raw="The URI location of the schema that caused the exception.">導致該例外狀況之結構描述的 URI 位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaExternal">
      <summary vsli:raw="An abstract class. Provides information about the included schema.">抽象類別。 提供包含之結構描述的詳細資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaExternal.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaExternal&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Id">
      <summary vsli:raw="Gets or sets the string id.">取得或設定字串 ID。</summary>
      <returns vsli:raw="The string id. The default is &lt;see langword=&quot;String.Empty&quot; /&gt;. Optional.">字串識別碼。預設值為 <see langword="String.Empty" /> 。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.Schema">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;XmlSchema&quot; /&gt; for the referenced schema.">取得或設定參考結構描述的 <see langword="XmlSchema" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchema&quot; /&gt; for the referenced schema.">參考結構描述的 <see langword="XmlSchema" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.SchemaLocation">
      <summary vsli:raw="Gets or sets the Uniform Resource Identifier (URI) location for the schema, which tells the schema processor where the schema physically resides.">取得或設定結構描述的統一資源識別元 (URI) 位置，告知結構描述處理器，結構描述實際存放的位置。</summary>
      <returns vsli:raw="The URI location for the schema. Optional for imported schemas.">結構描述的 URI 位置。 對於匯入結構描述而言是選擇性的。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaExternal.UnhandledAttributes">
      <summary vsli:raw="Gets or sets the qualified attributes, which do not belong to the schema target namespace.">取得或設定不屬於結構描述目標命名空間的限定屬性。</summary>
      <returns vsli:raw="Qualified attributes that belong to another target namespace.">屬於其他目標命名空間的限定屬性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFacet">
      <summary vsli:raw="Abstract class for all facets that are used when simple types are derived by restriction.">利用限制衍生簡單型別時使用的所有 Facet 的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.IsFixed">
      <summary vsli:raw="Gets or sets information that indicates that this facet is fixed.">取得或設定資訊，表示這個 Facet 為固定的。</summary>
      <returns vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, value is fixed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;. Optional.">如果值固定，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaFacet.Value">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;value&quot; /&gt; attribute of the facet.">取得或設定 Facet 的 <see langword="value" /> 屬性。</summary>
      <returns vsli:raw="The value attribute.">數值屬性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaForm">
      <summary vsli:raw="Indicates if attributes or elements need to be qualified with a namespace prefix.">表示屬性或項目是否需要以命名空間前置詞限定。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.None">
      <summary vsli:raw="Element and attribute form is not specified in the schema.">項目和屬性格式未在結構描述中指定。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Qualified">
      <summary vsli:raw="Elements and attributes must be qualified with a namespace prefix.">項目和屬性必須以命名空間前置詞限定。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaForm.Unqualified">
      <summary vsli:raw="Elements and attributes are not required to be qualified with a namespace prefix.">項目和屬性不需要以命名空間前置詞限定。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet">
      <summary vsli:raw="Specifies a restriction on the number of digits that can be entered for the fraction value of a simpleType element. The value of fractionDigits must be a positive integer. Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;fractionDigits&quot; /&gt; facet.">指定 simpleType 項目分數值所能輸入的數字數目限制。 fractionDigits 的值必須是正整數。 表示全球資訊網協會 (W3C) 的 <see langword="fractionDigits" /> Facet。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaFractionDigitsFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFractionDigitsFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroup">
      <summary vsli:raw="Represents the &lt;see langword=&quot;group&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines groups at the &lt;see langword=&quot;schema&quot; /&gt; level that are referenced from the complex types. It groups a set of element declarations so that they can be incorporated as a group into complex type definitions.">將來自 XML 結構描述的 <see langword="group" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別會在 <see langword="schema" /> 層級定義從複雜型別參考而來的群組。 它會群組一組元素宣告，以做為一個群組加入複雜類型定義中。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroup.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroup&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroup" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Name">
      <summary vsli:raw="Gets or sets the name of the schema group.">取得或設定結構描述群組的名稱。</summary>
      <returns vsli:raw="The name of the schema group.">結構描述群組的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.Particle">
      <summary vsli:raw="Gets or sets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">取得或設定其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroup.QualifiedName">
      <summary vsli:raw="Gets the qualified name of the schema group.">取得結構描述群組的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object representing the qualified name of the schema group.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件，表示結構描述群組的限定名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupBase">
      <summary vsli:raw="An abstract class for &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaAll" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupBase.Items">
      <summary vsli:raw="This collection is used to add new elements to the compositor.">這個集合是用於將新項目加入至複合項中。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">
        <see langword="XmlSchemaObjectCollection" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaGroupRef">
      <summary vsli:raw="Represents the &lt;see langword=&quot;group&quot; /&gt; element with &lt;see langword=&quot;ref&quot; /&gt; attribute from the XML Schema as specified by the World Wide Web Consortium (W3C). This class is used within complex types that reference a &lt;see langword=&quot;group&quot; /&gt; defined at the &lt;see langword=&quot;schema&quot; /&gt; level.">將來自 XML 結構描述、具有 <see langword="ref" /> 屬性的 <see langword="group" /> 元素，依全球資訊網協會 (W3C) 規定表示。 這個類別 (Class) 用於複雜型別中，以參考在 <see langword="group" /> 層級定義的 <see langword="schema" />。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaGroupRef.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.Particle">
      <summary vsli:raw="Gets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes, which holds the post-compilation value of the &lt;see langword=&quot;Particle&quot; /&gt; property.">取得包含 <see langword="Particle" /> 屬性之編譯後值的其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;Particle&quot; /&gt; property, which is one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAll&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; classes.">屬於其中一個 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaAll" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別的 <see langword="Particle" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaGroupRef.RefName">
      <summary vsli:raw="Gets or sets the name of a group defined in this schema (or another schema indicated by the specified namespace).">取得或設定在這個結構描述 (或指定的命名空間指示的結構描述) 中定義的群組的名稱。</summary>
      <returns vsli:raw="The name of a group defined in this schema.">在這個結構描述中定義的群組的名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaIdentityConstraint">
      <summary vsli:raw="Class for the identity constraints: &lt;see langword=&quot;key&quot; /&gt;, &lt;see langword=&quot;keyref&quot; /&gt;, and &lt;see langword=&quot;unique&quot; /&gt; elements.">識別條件約束的類別：<see langword="key" />、<see langword="keyref" /> 和 <see langword="unique" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaIdentityConstraint.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaIdentityConstraint&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Fields">
      <summary vsli:raw="Gets the collection of fields that apply as children for the XML Path Language (XPath) expression selector.">取得當成 XML 路徑語言 (XPath) 運算式選取器之子系套用的欄位集合。</summary>
      <returns vsli:raw="The collection of fields.">欄位的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Name">
      <summary vsli:raw="Gets or sets the name of the identity constraint.">取得或設定識別條件約束的名稱。</summary>
      <returns vsli:raw="The name of the identity constraint.">識別條件約束的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.QualifiedName">
      <summary vsli:raw="Gets the qualified name of the identity constraint, which holds the post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">取得包含 <see langword="QualifiedName" /> 屬性編譯後值之識別條件約束的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see langword=&quot;QualifiedName&quot; /&gt; property.">
        <see langword="QualifiedName" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaIdentityConstraint.Selector">
      <summary vsli:raw="Gets or sets the XPath expression &lt;see langword=&quot;selector&quot; /&gt; element.">取得或設定 XPath 運算式 <see langword="selector" /> 項目。</summary>
      <returns vsli:raw="The XPath expression &lt;see langword=&quot;selector&quot; /&gt; element.">XPath 運算式 <see langword="selector" /> 項目。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaImport">
      <summary vsli:raw="Represents the &lt;see langword=&quot;import&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to import schema components from other schemas.">將來自 XML 結構描述的 <see langword="import" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於從其他結構描述匯入結構描述元件。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaImport&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaImport" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Annotation">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;annotation&quot; /&gt; property.">取得或設定 <see langword="annotation" /> 屬性。</summary>
      <returns vsli:raw="The annotation.">附註。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaImport.Namespace">
      <summary vsli:raw="Gets or sets the target namespace for the imported schema as a Uniform Resource Identifier (URI) reference.">取得或設定匯入結構描述做為統一資源識別元 (URI) 參考的目標命名空間。</summary>
      <returns vsli:raw="The target namespace for the imported schema as a URI reference. Optional.">匯入結構描述做為 URI 參考的目標命名空間。 選擇性。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInclude">
      <summary vsli:raw="Represents the &lt;see langword=&quot;include&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is used to include declarations and definitions from an external schema. The included declarations and definitions are then available for processing in the containing schema.">將來自 XML 結構描述的 <see langword="include" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於包含來自外部結構描述的宣告和定義。 然後，所包含的宣告和定義可用於包含結構描述中的處理。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInclude.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInclude&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInclude.Annotation">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;annotation&quot; /&gt; property.">取得或設定 <see langword="annotation" /> 屬性。</summary>
      <returns vsli:raw="The annotation.">附註。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference">
      <summary vsli:raw="Infers an XML Schema Definition Language (XSD) schema from an XML document. The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class cannot be inherited.">從 XML 文件推斷 XML 結構描述定義語言 (XSD) 結構描述。 無法繼承 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別 (Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)">
      <summary vsli:raw="Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">從指定 <see cref="T:System.Xml.XmlReader" /> 物件中包含的 XML 文件，推斷 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="instanceDocument" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object containing the XML document to infer a schema from.">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含從其推斷結構描述的 XML 文件。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML document is not well-formed.">XML 文件的語式不正確。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is not positioned on the root node or on an element. An error occurs during the schema inference process.">
        <see cref="T:System.Xml.XmlReader" /> 物件不位於根節點上或項目上。 結構描述推斷處理序期間發生錯誤。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the inferred schemas.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含推斷的結構描述。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)">
      <summary vsli:raw="Infers an XML Schema Definition Language (XSD) schema from the XML document contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified, and refines the inferred schema using an existing schema in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object specified with the same target namespace.">從指定 <see cref="T:System.Xml.XmlReader" /> 物件中包含的 XML 文件，推斷 XML 結構描述定義語言 (XSD) 結構描述，並使用以相同目標命名空間指定之 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件中的現有結構描述，修改推斷的結構描述。</summary>
      <param name="instanceDocument" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object containing the XML document to infer a schema from.">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含從其推斷結構描述的 XML 文件。</param>
      <param name="schemas" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing an existing schema used to refine the inferred schema.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含用於修改推斷之結構描述的現有結構描述。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML document is not well-formed.">XML 文件的語式不正確。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaInferenceException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is not positioned on the root node or on an element. An error occurs during the schema inference process.">
        <see cref="T:System.Xml.XmlReader" /> 物件不位於根節點上或項目上。 結構描述推斷處理序期間發生錯誤。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the inferred schemas.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含推斷的結構描述。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.Occurrence">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; value that affects schema occurrence declarations inferred from the XML document.">取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，影響從 XML 文件推斷的結構描述符合項目宣告。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInference.TypeInference">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; value that affects types inferred from the XML document.">取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 值，影響從 XML 文件推斷的型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference.InferenceOption&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" /> 物件。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInference.InferenceOption">
      <summary vsli:raw="Affects occurrence and type information inferred by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class for elements and attributes in an XML document.">影響由 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別為 XML 文件中的項目和屬性所推斷的符合項目和型別資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Relaxed">
      <summary vsli:raw="Indicates that a less restrictive schema declaration should be inferred for a particular element or attribute.">表示應當為特定項目或屬性推斷較少限制性的結構描述宣告。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaInference.InferenceOption.Restricted">
      <summary vsli:raw="Indicates that a more restrictive schema declaration should be inferred for a particular element or attribute.">表示應當為特定項目或屬性推斷較多限制性的結構描述宣告。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInferenceException">
      <summary vsli:raw="Returns information about errors encountered by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInference&quot; /&gt; class while inferring a schema from an XML document.">在從 XML 文件推斷結構描述 (Schema) 時，傳回 <see cref="T:System.Xml.Schema.XmlSchemaInference" /> 類別 (Class) 所遇到之錯誤的相關資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects specified that contain all the properties of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">使用包含 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 所有屬性之指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the error message specified.">使用指定的錯誤訊息，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A description of the error.">錯誤的描述。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the error message specified and the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; specified.">使用指定的錯誤訊息和導致指定之 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始 <see cref="T:System.Exception" />，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A description of the error.">錯誤的描述。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object containing the original exception that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Exception" /> 物件，包含導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始例外狀況。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; class with the error message specified, the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; specified, and the line number and line position of the error in the XML document specified.">使用指定的錯誤訊息、導致指定之 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始 <see cref="T:System.Exception" /> 和指定之 XML 文件中錯誤的行號和行位置，初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A description of the error.">錯誤的描述。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; object containing the original exception that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">
        <see cref="T:System.Exception" /> 物件，包含導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的原始例外狀況。</param>
      <param name="lineNumber" vsli:raw="The line number in the XML document that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">XML 文件中導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的行號。</param>
      <param name="linePosition" vsli:raw="The line position in the XML document that caused the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt;.">XML 文件中導致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 的行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInferenceException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInferenceException&quot; /&gt; object properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object specified for the &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object specified.">將所有的 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" /> 物件屬性資料流處理到針對指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件所指定的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaInfo">
      <summary vsli:raw="Represents the post-schema-validation infoset of a validated XML node.">表示已驗證之 XML 節點的後結構描述驗證資訊集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaInfo.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.ContentType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentType&quot; /&gt; object that corresponds to the content type of this validated XML node.">取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 物件，該物件對應至這個已驗證之 XML 節點的內容型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaContentType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaContentType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsDefault">
      <summary vsli:raw="Gets or sets a value indicating if this validated XML node was set as the result of a default being applied during XML Schema Definition Language (XSD) schema validation.">取得或設定值，指出 XML 結構描述定義語言 (XSD) 結構描述驗證期間，是否要將這個已驗證的 XML 節點設為套用之預設值的結果。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;bool&quot; /&gt; value.">
        <see langword="bool" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.IsNil">
      <summary vsli:raw="Gets or sets a value indicating if the value for this validated XML node is nil.">取得或設定值，指出這個已驗證之 XML 節點的值是否為 nil。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;bool&quot; /&gt; value.">
        <see langword="bool" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.MemberType">
      <summary vsli:raw="Gets or sets the dynamic schema type for this validated XML node.">取得或設定這個已驗證之 XML 節點的動態結構描述型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaAttribute">
      <summary vsli:raw="Gets or sets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; object that corresponds to this validated XML node.">取得或設定已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件，該物件對應至這個已驗證的 XML 節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaElement">
      <summary vsli:raw="Gets or sets the compiled &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; object that corresponds to this validated XML node.">取得或設定已編譯的 <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 物件，該物件對應至這個已驗證的 XML 節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.SchemaType">
      <summary vsli:raw="Gets or sets the static XML Schema Definition Language (XSD) schema type of this validated XML node.">取得或設定這個已驗證之 XML 節點的靜態 XML 結構描述定義語言 (XSD) 結構描述型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaInfo.Validity">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value of this validated XML node.">取得或設定這個已驗證之 XML 節點的 <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidity&quot; /&gt; value.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidity" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKey">
      <summary vsli:raw="This class represents the &lt;see langword=&quot;key&quot; /&gt; element from XMLSchema as specified by the World Wide Web Consortium (W3C).">此類別會將來自 XML 結構描述的 <see langword="key" /> 元素，依全球資訊網協會 (W3C) 的規定表示。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKey.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaKey&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaKey" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaKeyref">
      <summary vsli:raw="This class represents the &lt;see langword=&quot;keyref&quot; /&gt; element from XMLSchema as specified by the World Wide Web Consortium (W3C).">此類別會將來自 XML 結構描述的 <see langword="keyref" /> 元素，依全球資訊網協會 (W3C) 的規定表示。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaKeyref.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaKeyref&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaKeyref" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaKeyref.Refer">
      <summary vsli:raw="Gets or sets the name of the key that this constraint refers to in another simple or complex type.">取得或設定這個條件約束所參考的其他簡單或複雜類型中的索引鍵之名稱。</summary>
      <returns vsli:raw="The QName of the key that this constraint refers to.">這個條件約束參考的索引鍵之 QName。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaLengthFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;length&quot; /&gt; facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the length of a &lt;see langword=&quot;simpleType&quot; /&gt; element on the data type.">將來自 XML 結構描述的 <see langword="length" /> Facet，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 可用於指定資料型別上 <see langword="simpleType" /> 項目的長度限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaLengthFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaLengthFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;maxExclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The element value must be less than the value of the &lt;see langword=&quot;maxExclusive&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="maxExclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定對 <see langword="simpleType" /> 項目之最大值的限制。 該項目值必須小於 <see langword="maxExclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxExclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;maxInclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The element value must be less than or equal to the value of the &lt;see langword=&quot;maxInclusive&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="maxInclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定對 <see langword="simpleType" /> 項目之最大值的限制。 項目值必須小於或等於 <see langword="maxInclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxInclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMaxLengthFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;maxLength&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the maximum length of the data value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The length must be less than the value of the &lt;see langword=&quot;maxLength&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="maxLength" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定對 <see langword="simpleType" /> 項目之資料值最大長度的限制。 該長度必須小於 <see langword="maxLength" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMaxLengthFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxLengthFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;minExclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The element value must be greater than the value of the &lt;see langword=&quot;minExclusive&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="minExclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於指定對 <see langword="simpleType" /> 項目之最小值的限制。 該項目值必須大於 <see langword="minExclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinExclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinExclusiveFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;minInclusive&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum value of a simpleType element. The element value must be greater than or equal to the value of the &lt;see langword=&quot;minInclusive&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="minInclusive" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於指定對 simpleType 項目之最小值的限制。 該項目值必須大於或等於 <see langword="minInclusive" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinInclusiveFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinInclusiveFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaMinLengthFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;minLength&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the minimum length of the data value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. The length must be greater than the value of the &lt;see langword=&quot;minLength&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="minLength" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於指定 <see langword="simpleType" /> 項目之資料值的最小長度限制。 長度必須大於 <see langword="minLength" /> 項目的值。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaMinLengthFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNotation">
      <summary vsli:raw="Represents the &lt;see langword=&quot;notation&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). An XML Schema &lt;see langword=&quot;notation&quot; /&gt; declaration is a reconstruction of &lt;see langword=&quot;XML 1.0 NOTATION&quot; /&gt; declarations. The purpose of notations is to describe the format of non-XML data within an XML document.">將來自 XML 結構描述的 <see langword="notation" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 XML 結構描述 <see langword="notation" /> 宣告是 <see langword="XML 1.0 NOTATION" /> 宣告的重新建構。 標記法的目的是描述 XML 文件中非 XML 資料的格式。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNotation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaNotation&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaNotation" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Name">
      <summary vsli:raw="Gets or sets the name of the notation.">取得或設定標記法的名稱。</summary>
      <returns vsli:raw="The name of the notation.">標記法的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.Public">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;public&quot; /&gt; identifier.">取得或設定 <see langword="public" /> 識別項。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;public&quot; /&gt; identifier. The value must be a valid Uniform Resource Identifier (URI).">
        <see langword="public" /> 識別碼。 值必須是有效的統一資源識別元 (URI)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaNotation.System">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;system&quot; /&gt; identifier.">取得或設定 <see langword="system" /> 識別項。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;system&quot; /&gt; identifier. The value must be a valid URI.">
        <see langword="system" /> 識別碼。 值必須是有效的 URI。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaNumericFacet">
      <summary vsli:raw="Abstract class for defining &lt;see langword=&quot;numeric&quot; /&gt; facets. This class is the base class for numeric facet classes such as &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt;.">定義 <see langword="numeric" /> Facet 的抽象類別 (Abstract Class)。 這個類別是 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" /> 等數字 Facet 類別的基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaNumericFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaNumericFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaNumericFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObject">
      <summary vsli:raw="Represents the root class for the Xml schema object model hierarchy and serves as a base class for classes such as the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; class.">表示 Xml 結構描述物件模型階層架構的根類別，並且做為 <see cref="T:System.Xml.Schema.XmlSchema" /> 等類別的基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LineNumber">
      <summary vsli:raw="Gets or sets the line number in the file to which the &lt;see langword=&quot;schema&quot; /&gt; element refers.">取得或設定 <see langword="schema" /> 項目參考之檔案中的行號。</summary>
      <returns vsli:raw="The line number.">行號。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.LinePosition">
      <summary vsli:raw="Gets or sets the line position in the file to which the &lt;see langword=&quot;schema&quot; /&gt; element refers.">取得或設定 <see langword="schema" /> 項目參考之檔案中的行位置。</summary>
      <returns vsli:raw="The line position.">行位置。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Namespaces">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; to use with this schema object.">取得或設定 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />，以便與這個結構描述物件一起使用。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; property for the schema object.">結構描述物件的 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 屬性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.Parent">
      <summary vsli:raw="Gets or sets the parent of this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">取得或設定這個 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的父項。</summary>
      <returns vsli:raw="The parent &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; of this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">這個 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObject.SourceUri">
      <summary vsli:raw="Gets or sets the source location for the file that loaded the schema.">取得或設定載入結構描述之檔案的來源位置。</summary>
      <returns vsli:raw="The source location (URI) for the file.">檔案的來源位置 (URI)。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectCollection">
      <summary vsli:raw="A collection of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;s.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的集合。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt; class.">初始化 <see langword="XmlSchemaObjectCollection" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.#ctor(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt; class that takes an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">初始化採用 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 之 <see langword="XmlSchemaObjectCollection" /> 類別的新執行個體。</summary>
      <param name="parent" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Add(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">將 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 加入至 <see langword="XmlSchemaObjectCollection" />。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see langword=&quot;Count&quot; /&gt;.">
        <paramref name="index" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <see langword="Count" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; parameter specified is not of type &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaExternal&quot; /&gt; or its derived types &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaImport&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInclude&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaRedefine&quot; /&gt;.">指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不屬於型別 <see cref="T:System.Xml.Schema.XmlSchemaExternal" /> 或其衍生型別 <see cref="T:System.Xml.Schema.XmlSchemaImport" />、<see cref="T:System.Xml.Schema.XmlSchemaInclude" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />。</exception>
      <returns vsli:raw="The index at which the item has been added.">新增項目的索引位置。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Contains(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Indicates if the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; is in the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">指示指定的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 是否在 <see langword="XmlSchemaObjectCollection" /> 中。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified qualified name is in the collection; otherwise, returns &lt;see langword=&quot;false&quot; /&gt;. If null is supplied, &lt;see langword=&quot;false&quot; /&gt; is returned because there is no qualified name with a null name.">如果指定的限定名稱是在集合中，則為 <see langword="true" />，否則傳回 <see langword="false" />。 如果提供了 Null，因為沒有具有 Null 名稱的限定名稱，所以會傳回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.CopyTo(System.Xml.Schema.XmlSchemaObject[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;s from the collection into the given array, starting at the given index.">將集合中所有的 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 複製到指定陣列中，從指定索引處開始。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;. The array must have zero-based indexing.">從 <see langword="XmlSchemaObjectCollection" /> 複製的項目之目的地一維陣列。 陣列必須有以零為起始的索引。</param>
      <param name="index" vsli:raw="The zero-based index in the array at which copying begins.">陣列中以零為起始的索引，而且複製會從該位置開始。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <paramref name="array" /> 為 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multi-dimensional.  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA;-or-&#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; is greater than the available space from index to the end of the destination array.">
        <paramref name="array" /> 是多維式。  
  
-或- 
 <paramref name="index" /> 等於或大於 <paramref name="array" /> 的長度。  
  
-或- 
來源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中的項目數大於從索引至目的陣列結束間的可用空間。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type of the source &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; cannot be cast automatically to the type of the destination array.">來源 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的類型無法自動轉換成目的陣列的類型。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for iterating through the &lt;see langword=&quot;XmlSchemaObjects&quot; /&gt; contained in the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">傳回可以逐一查看 <see langword="XmlSchemaObjects" /> 中包含之 <see langword="XmlSchemaObjectCollection" /> 的列舉值。</summary>
      <returns vsli:raw="The iterator returns &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectEnumerator&quot; /&gt;.">Iterator 傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.IndexOf(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Gets the collection index corresponding to the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">取得與指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 相關的集合索引。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; whose index you want to return.">您所要傳回索引的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <returns vsli:raw="The index corresponding to the specified &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">與所指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 相關的索引。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Insert(System.Int32,System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">將 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 插入 <see langword="XmlSchemaObjectCollection" />。</summary>
      <param name="index" vsli:raw="The zero-based index at which an item should be inserted.">在應插入項目處之以零起始的索引。</param>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to insert.">要插入的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see langword=&quot;Count&quot; /&gt;.">
        <paramref name="index" /> 小於零。  
  
-或- 
 <paramref name="index" /> 大於 <see langword="Count" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnClear">
      <summary vsli:raw="&lt;see langword=&quot;OnClear&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Clear&quot; /&gt; behavior. For more information, see OnClear method for &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">
        <see langword="OnClear" /> 會在標準 <see langword="Clear" /> 行為之前叫用。 如需詳細資訊，請參閱 <see cref="T:System.Collections.CollectionBase" /> 的 OnClear 方法。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnInsert(System.Int32,System.Object)">
      <summary vsli:raw="&lt;see langword=&quot;OnInsert&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Insert&quot; /&gt; behavior. For more information, see &lt;see langword=&quot;OnInsert&quot; /&gt; method &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">
        <see langword="OnInsert" /> 會在標準 <see langword="Insert" /> 行為之前叫用。 如需詳細資訊，請參閱 <see langword="OnInsert" /> 方法 <see cref="T:System.Collections.CollectionBase" />。</summary>
      <param name="index" vsli:raw="The index of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="item" vsli:raw="The item.">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnRemove(System.Int32,System.Object)">
      <summary vsli:raw="&lt;see langword=&quot;OnRemove&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Remove&quot; /&gt; behavior. For more information, see the &lt;see langword=&quot;OnRemove&quot; /&gt; method for &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">
        <see langword="OnRemove" /> 會在標準 <see langword="Remove" /> 行為之前叫用。 如需詳細資訊，請參閱 <see cref="T:System.Collections.CollectionBase" /> 的 <see langword="OnRemove" /> 方法。</summary>
      <param name="index" vsli:raw="The index of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="item" vsli:raw="The item.">項目。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary vsli:raw="&lt;see langword=&quot;OnSet&quot; /&gt; is invoked before the standard &lt;see langword=&quot;Set&quot; /&gt; behavior. For more information, see the OnSet method for &lt;see cref=&quot;T:System.Collections.CollectionBase&quot; /&gt;.">
        <see langword="OnSet" /> 會在標準 <see langword="Set" /> 行為之前叫用。 如需詳細資訊，請參閱 <see cref="T:System.Collections.CollectionBase" /> 的 OnSet 方法。</summary>
      <param name="index" vsli:raw="The index of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <param name="oldValue" vsli:raw="The old value.">舊值。</param>
      <param name="newValue" vsli:raw="The new value.">新值。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectCollection.Remove(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Removes an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; from the &lt;see langword=&quot;XmlSchemaObjectCollection&quot; /&gt;.">從 <see langword="XmlSchemaObjectCollection" /> 移除 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; to remove.">要移除的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; at the specified index.">取得指定索引處的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; at the specified index.">指定之索引處的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectEnumerator">
      <summary vsli:raw="Represents the enumerator for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectCollection&quot; /&gt;.">代表 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" /> 的列舉程式。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext">
      <summary vsli:raw="Moves to the next item in the collection.">移至集合中下一個項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; at the end of the collection.">集合結尾的 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset">
      <summary vsli:raw="Resets the enumerator to the start of the collection.">將列舉程式重設為集合的起點。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.MoveNext" />。</summary>
      <returns vsli:raw="The next &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">下一個 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.Schema.XmlSchemaObjectEnumerator.Reset" />。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current">
      <summary vsli:raw="Gets the current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; in the collection.">取得集合中目前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">目前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.Schema.XmlSchemaObjectEnumerator.Current" />。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt;.">目前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaObjectTable">
      <summary vsli:raw="Provides the collections for contained elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; class (for example, Attributes, AttributeGroups, Elements, and so on).">提供 <see cref="T:System.Xml.Schema.XmlSchema" /> 類別中所包含項目的集合 (例如，Attributes、AttributeGroups、Elements 等)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.Contains(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Determines if the qualified name specified exists in the collection.">判斷集合中是否存在指定的限定名稱。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the qualified name specified exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合中存在指定的限定名稱，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaObjectTable.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">傳回可用來逐一查看 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; that can iterate through &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">可逐一查看 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">取得 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所含的項目數。</summary>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所含的項目數。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Item(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Returns the element in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; specified by qualified name.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中限定名稱所指定的項目。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; of the element to return.">要傳回項目 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; of the element in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; specified by qualified name.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 中限定名稱所指定項目的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Names">
      <summary vsli:raw="Returns a collection of all the named elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有具名項目的集合。</summary>
      <returns vsli:raw="A collection of all the named elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有具名項目的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaObjectTable.Values">
      <summary vsli:raw="Returns a collection of all the values for all the elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有項目之所有值的集合。</summary>
      <returns vsli:raw="A collection of all the values for all the elements in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> 中所有項目之所有值的集合。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaParticle">
      <summary vsli:raw="Abstract class for that is the base class for all particle types (e.g. &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAny&quot; /&gt;).">該物件的抽象類別是所有物件型別的基底類別 (例如，<see cref="T:System.Xml.Schema.XmlSchemaAny" />)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaParticle.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaParticle&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccurs">
      <summary vsli:raw="Gets or sets the maximum number of times the particle can occur.">取得或設定物件可以發生的最大次數。</summary>
      <returns vsli:raw="The maximum number of times the particle can occur. The default is 1.">物件可以發生的最大次數。 預設值是 1。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MaxOccursString">
      <summary vsli:raw="Gets or sets the number as a string value. Maximum number of times the particle can occur.">取得或設定數值為字串值。 物件可以發生的最大次數。</summary>
      <returns vsli:raw="The number as a string value. &lt;see langword=&quot;String.Empty&quot; /&gt; indicates that &lt;see langword=&quot;MaxOccurs&quot; /&gt; is equal to the default value. The default is a null reference.">將數字當做是字串值。 <see langword="String.Empty" /> 表示 <see langword="MaxOccurs" /> 等於預設值。 預設值為 Null 參考。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccurs">
      <summary vsli:raw="Gets or sets the minimum number of times the particle can occur.">取得或設定物件可以發生的最小次數。</summary>
      <returns vsli:raw="The minimum number of times the particle can occur. The default is 1.">物件可以發生的最小次數。 預設值是 1。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaParticle.MinOccursString">
      <summary vsli:raw="Gets or sets the number as a string value. The minimum number of times the particle can occur.">取得或設定數值為字串值。 物件可以發生的最小次數。</summary>
      <returns vsli:raw="The number as a string value. &lt;see langword=&quot;String.Empty&quot; /&gt; indicates that &lt;see langword=&quot;MinOccurs&quot; /&gt; is equal to the default value. The default is a null reference.">將數字當做是字串值。 <see langword="String.Empty" /> 表示 <see langword="MinOccurs" /> 等於預設值。 預設值為 Null 參考。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaPatternFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;pattern&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the value entered for a &lt;see langword=&quot;simpleType&quot; /&gt; element.">將來自 XML 結構描述的 <see langword="pattern" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於指定對 <see langword="simpleType" /> 項目輸入之值的限制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaPatternFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaPatternFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaRedefine">
      <summary vsli:raw="Represents the &lt;see langword=&quot;redefine&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to allow simple and complex types, groups and attribute groups from external schema files to be redefined in the current schema. This class can also be used to provide versioning for the schema elements.">將來自 XML 結構描述的 <see langword="redefine" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於允許在目前結構描述中，重新定義外部結構描述檔案中的簡單和複雜類型、群組及屬性 (Attribute) 群組。 這個類別還可用於提供結構描述元素的版本控制。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaRedefine.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaRedefine&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.AttributeGroups">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; , for all attributes in the schema, which holds the post-compilation value of the &lt;see langword=&quot;AttributeGroups&quot; /&gt; property.">取得結構描述中所有屬性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> (這個表格包含 <see langword="AttributeGroups" /> 屬性的編譯後值)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; for all attributes in the schema. The post-compilation value of the &lt;see langword=&quot;AttributeGroups&quot; /&gt; property.">結構描述中所有屬性的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="AttributeGroups" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Groups">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;, for all groups in the schema, which holds the post-compilation value of the &lt;see langword=&quot;Groups&quot; /&gt; property.">取得結構描述中所有群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" /> (這個表格包含 <see langword="Groups" /> 屬性的編譯後值)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; for all groups in the schema. The post-compilation value of the &lt;see langword=&quot;Groups&quot; /&gt; property.">結構描述中所有群組的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="Groups" /> 屬性的編譯後值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.Items">
      <summary vsli:raw="Gets the collection of the following classes: &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnnotation&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroup&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroup&quot; /&gt;.">取得下列類別的集合：<see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />、<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />、<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaGroup" />。</summary>
      <returns vsli:raw="The elements contained within the redefine element.">重新定義元素中包含的元素。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaRedefine.SchemaTypes">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt;, for all simple and complex types in the schema, which holds the post-compilation value of the &lt;see langword=&quot;SchemaTypes&quot; /&gt; property.">取得結構描述中所有簡單和複雜型別的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />，這個表格包含 <see langword="SchemaTypes" /> 屬性的編譯後值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObjectTable&quot; /&gt; for all schema types in the schema. The post-compilation value of the &lt;see langword=&quot;SchemaTypes&quot; /&gt; property.">結構描述中所有結構描述型別的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />。 <see langword="SchemaTypes" /> 屬性的編譯後值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSequence">
      <summary vsli:raw="Represents the &lt;see langword=&quot;sequence&quot; /&gt; element (compositor) from the XML Schema as specified by the World Wide Web Consortium (W3C). The &lt;see langword=&quot;sequence&quot; /&gt; requires the elements in the group to appear in the specified sequence within the containing element.">將來自 XML 結構描述的 <see langword="sequence" /> 元素 (複合項)，依全球資訊網協會 (W3C) 的規定表示。 <see langword="sequence" /> 要求群組中的項目在包含項目中以指定的順序出現。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSequence.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSequence.Items">
      <summary vsli:raw="The elements contained within the compositor. Collection of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaGroupRef&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaChoice&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSequence&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAny&quot; /&gt;.">複合項中包含的元素。 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />、<see cref="T:System.Xml.Schema.XmlSchemaChoice" />、<see cref="T:System.Xml.Schema.XmlSchemaSequence" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaAny" /> 的集合。</summary>
      <returns vsli:raw="The elements contained within the compositor.">複合項中包含的元素。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSet">
      <summary vsli:raw="Contains a cache of XML Schema definition language (XSD) schemas.">包含 XML 結構描述定義語言 (XSD) 結構描述的快取。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler">
      <summary vsli:raw="Specifies an event handler for receiving information about XML Schema definition language (XSD) schema validation errors.">指定事件處理常式，接收 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤的資訊。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nameTable" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object to use.">要使用的 <see cref="T:System.Xml.XmlNameTable" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">做為參數傳遞的 <see cref="T:System.Xml.XmlNameTable" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)">
      <summary vsli:raw="Adds the XML Schema definition language (XSD) schema at the URL specified to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">將指定 URL 處的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property, or &lt;see langword=&quot;null&quot; /&gt; to use the &lt;paramref name=&quot;targetNamespace&quot; /&gt; specified in the schema.">結構描述 <paramref name="targetNamespace" /> 屬性，如果使用結構描述中指定的 <paramref name="targetNamespace" /> 則為 <see langword="null" />。</param>
      <param name="schemaUri" vsli:raw="The URL that specifies the schema to load.">指定要載入之結構描述的 URL。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The URL passed as a parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">以參數形式傳遞的 URL 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is valid. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, then &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)">
      <summary vsli:raw="Adds the XML Schema definition language (XSD) schema contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">將 <see cref="T:System.Xml.XmlReader" /> 中包含的 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property, or &lt;see langword=&quot;null&quot; /&gt; to use the &lt;paramref name=&quot;targetNamespace&quot; /&gt; specified in the schema.">結構描述 <paramref name="targetNamespace" /> 屬性，如果使用結構描述中指定的 <paramref name="targetNamespace" /> 則為 <see langword="null" />。</param>
      <param name="schemaDocument" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">做為參數傳遞的 <see cref="T:System.Xml.XmlReader" /> 物件為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is valid. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, then &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Adds the given &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">將指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schema" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to add to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">要加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is valid. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, then &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述有效)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)">
      <summary vsli:raw="Adds all the XML Schema definition language (XSD) schemas in the given &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">將指定 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的所有 XML 結構描述定義語言 (XSD) 結構描述加入 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <param name="schemas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="A schema in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; is not valid.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Compile">
      <summary vsli:raw="Compiles the XML Schema definition language (XSD) schemas added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; into one logical schema.">將加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的 XML 結構描述定義語言 (XSD) 結構描述，編譯為一個邏輯結構描述。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An error occurred when validating and compiling the schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">錯誤發生於驗證和編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述時。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.String)">
      <summary vsli:raw="Indicates whether an XML Schema definition language (XSD) schema with the specified target namespace URI is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指出具有指定目標命名空間 URI 的 XML 結構描述定義語言 (XSD) 結構描述是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property.">結構描述 <paramref name="targetNamespace" /> 屬性。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a schema with the specified target namespace URI is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果具有指定的目標命名空間 URI 的結構描述位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Indicates whether the specified XML Schema definition language (XSD) &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">指出指定的 XML 結構描述定義語言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" /> 物件是否位於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</summary>
      <param name="schema" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object is in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; objects from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to the given array, starting at the given index.">複製 <see cref="T:System.Xml.Schema.XmlSchema" /> 中的所有 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件至指定陣列，開始於指定的索引處。</summary>
      <param name="schemas" vsli:raw="The array to copy the objects to.">將物件複製到其中的陣列。</param>
      <param name="index" vsli:raw="The index in the array where copying will begin.">在陣列中開始複製的索引。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Removes the specified XML Schema definition language (XSD) schema from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">移除 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的指定 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="schema" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to remove from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">要從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not a valid schema.">結構描述不是有效的結構描述。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object removed from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if the schema was not found in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，如果在 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中找不到結構描述則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Removes the specified XML Schema definition language (XSD) schema and all the schemas it imports from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">移除 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中指定的 XML 結構描述定義語言 (XSD) 結構描述及其匯入的所有結構描述。</summary>
      <param name="schemaToRemove" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to remove from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">要從 <see cref="T:System.Xml.Schema.XmlSchema" /> 中移除的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object and all its imports were successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果成功移除 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件及其匯入的所有結構描述，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Reprocesses an XML Schema definition language (XSD) schema that already exists in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">重新處理已存在於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="schema" vsli:raw="The schema to reprocess.">要重新處理的結構描述。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The schema is not valid.">此結構描述無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object passed as a parameter is &lt;see langword=&quot;null&quot; /&gt;.">做為參數傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object passed as a parameter does not already exist in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">以參數形式傳遞的 <see cref="T:System.Xml.Schema.XmlSchema" /> 物件不存在於 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object if the schema is a valid schema. If the schema is not valid and a &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; is specified, &lt;see langword=&quot;null&quot; /&gt; is returned and the appropriate validation event is raised. Otherwise, an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaException&quot; /&gt; is thrown.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件 (如果結構描述是有效的結構描述)。 如果結構描述無效，且指定了 <see cref="T:System.Xml.Schema.ValidationEventHandler" />，則會傳回 <see langword="null" />，並會引發適當的驗證事件。 否則會擲回 <see cref="T:System.Xml.Schema.XmlSchemaException" />。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas">
      <summary vsli:raw="Returns a collection of all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object containing all the schemas that have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;. If no schemas have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;, an empty &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object is returned.">
        <see cref="T:System.Collections.ICollection" /> 物件，包含已加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的所有結構描述。 如果結構描述尚未加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則會傳回空的 <see cref="T:System.Collections.ICollection" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSet.Schemas(System.String)">
      <summary vsli:raw="Returns a collection of all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; that belong to the given namespace.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中屬於指定命名空間之所有 XML 結構描述定義語言 (XSD) 結構描述的集合。</summary>
      <param name="targetNamespace" vsli:raw="The schema &lt;paramref name=&quot;targetNamespace&quot; /&gt; property.">結構描述 <paramref name="targetNamespace" /> 屬性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object containing all the schemas that have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; that belong to the given namespace. If no schemas have been added to the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;, an empty &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; object is returned.">
        <see cref="T:System.Collections.ICollection" /> 物件，包含已加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 之屬於指定命名空間的所有結構描述。 如果結構描述尚未加入至 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，則會傳回空的 <see cref="T:System.Collections.ICollection" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.CompilationSettings">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; for the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;. The default is an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCompilationSettings&quot; /&gt; instance with the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck&quot; /&gt; property set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 預設為將 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" /> 屬性設為 <see langword="true" /> 的 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" /> 執行個體。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.Count">
      <summary vsli:raw="Gets the number of logical XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的邏輯 XML 結構描述定義語言 (XSD) 結構描述數目。</summary>
      <returns vsli:raw="The number of logical schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的邏輯結構描述數目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalAttributes">
      <summary vsli:raw="Gets all the global attributes in all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域屬性。</summary>
      <returns vsli:raw="The collection of global attributes.">全域屬性的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalElements">
      <summary vsli:raw="Gets all the global elements in all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域項目。</summary>
      <returns vsli:raw="The collection of global elements.">全域元素的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.GlobalTypes">
      <summary vsli:raw="Gets all of the global simple and complex types in all the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;.">取得 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所有 XML 結構描述定義語言 (XSD) 結構描述的所有全域簡單和複雜型別。</summary>
      <returns vsli:raw="The collection of global simple and complex types.">全域簡單和複雜類型的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.IsCompiled">
      <summary vsli:raw="Gets a value that indicates whether the XML Schema definition language (XSD) schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; have been compiled.">取得值，指出是否已編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; have been compiled since the last time a schema was added or removed from the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果上次從 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 加入或移除結構描述之後，已編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中的結構描述，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.NameTable">
      <summary vsli:raw="Gets the default &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; when loading new XML Schema definition language (XSD) schemas.">當載入新的 XML 結構描述定義語言 (XSD) 結構描述時，取得 <see cref="T:System.Xml.XmlNameTable" /> 所使用的預設 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns vsli:raw="A table of atomized string objects.">擷取字串物件的資料表。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSet.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces or locations referenced in include and import elements of a schema.">設定 <see cref="T:System.Xml.XmlResolver" />，用於解析在結構描述之 Include 和 Import 項目中參考的命名空間或位置。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve namespaces or locations referenced in include and import elements of a schema.">
        <see cref="T:System.Xml.XmlResolver" />，用於解析在結構描述之 Include 和 Import 項目中參考的命名空間或位置。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContent">
      <summary vsli:raw="Represents the &lt;see langword=&quot;simpleContent&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class is for simple and complex types with simple content model.">將來自 XML 結構描述的 <see langword="simpleContent" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 用於具有簡單內容模型的簡單和複雜類型。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContent&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContent.Content">
      <summary vsli:raw="Gets one of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentRestriction&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentExtension&quot; /&gt;.">取得其中一個 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />。</summary>
      <returns vsli:raw="The content contained within the &lt;see langword=&quot;XmlSchemaSimpleContentRestriction&quot; /&gt; or &lt;see langword=&quot;XmlSchemaSimpleContentExtension&quot; /&gt; class.">
        <see langword="XmlSchemaSimpleContentRestriction" /> 或 <see langword="XmlSchemaSimpleContentExtension" /> 類別中包含的內容。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentExtension">
      <summary vsli:raw="Represents the &lt;see langword=&quot;extension&quot; /&gt; element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by extension. Such derivations are used to extend the simple type content of the element by adding attributes.">將來自 XML 結構描述之簡單內容的 <see langword="extension" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 可用於由擴充衍生簡單類型。 這種衍生用於藉由加入屬性 (Attribute) 來擴充元素的簡單類型內容。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentExtension.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentExtension&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.AnyAttribute">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;XmlSchemaAnyAttribute&quot; /&gt; to be used for the attribute value.">取得或設定要用於屬性值的 <see langword="XmlSchemaAnyAttribute" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchemaAnyAttribute&quot; /&gt;. Optional.">
        <see langword="XmlSchemaAnyAttribute" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.Attributes">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt;.">取得 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 的集合。</summary>
      <returns vsli:raw="The collection of attributes for the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see langword="simpleType" /> 項目的屬性 (Attribute) 集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentExtension.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of a built-in data type or simple type from which this type is extended.">取得或設定這個類型之擴充來源的內建資料類型或簡單類型的名稱。</summary>
      <returns vsli:raw="The base type name.">基底類型 (Base Type) 名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction">
      <summary vsli:raw="Represents the &lt;see langword=&quot;restriction&quot; /&gt; element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to derive simple types by restriction. Such derivations can be used to restrict the range of values for the element to a subset of the values specified in the inherited simple type.">將來自 XML 結構描述之簡單內容的 <see langword="restriction" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別可用於透過限制衍生簡單類型。 此類衍生可用於將元素值的範圍限制為在繼承之簡單類型中指定的值子集。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleContentRestriction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleContentRestriction&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.AnyAttribute">
      <summary vsli:raw="Gets or sets an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; to be used for the attribute value.">取得或設定要用於屬性值的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAnyAttribute&quot; /&gt; for the attribute value. Optional.">屬性值的 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />。 選擇性。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Attributes">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttributeGroupRef&quot; /&gt; collection of attributes for the simple type.">取得簡單類型之屬性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 及 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" /> 集合。</summary>
      <returns vsli:raw="The collection of attributes for a simple type.">簡單類型的屬性集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseType">
      <summary vsli:raw="Gets or sets the simple type base value.">取得或設定簡單類型基底數值。</summary>
      <returns vsli:raw="The simple type base value.">簡單類型基底數值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of the built-in data type or simple type from which this type is derived.">取得或設定衍生這個類型之來源的內建資料類型或簡單類型的名稱。</summary>
      <returns vsli:raw="The name of the base type.">基底類型 (Base Type) 的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleContentRestriction.Facets">
      <summary vsli:raw="Gets or sets an Xml Schema facet.">取得或設定 XML 結構描述 facet。</summary>
      <returns vsli:raw="One of the following facet classes:  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaPatternFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaEnumerationFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFractionDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaTotalDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet&quot; /&gt;.">下列其中一個 facet 類別： 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleType">
      <summary vsli:raw="Represents the &lt;see langword=&quot;simpleType&quot; /&gt; element for simple content from XML Schema as specified by the World Wide Web Consortium (W3C). This class defines a simple type. Simple types can specify information and constraints for the value of attributes or elements with text-only content.">將來自 XML 結構描述之簡單內容的 <see langword="simpleType" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別 (Class) 定義簡單類型。 簡單類型可以指定具有純文字內容之屬性 (Attribute) 或元素值的資訊和條件約束。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleType.Content">
      <summary vsli:raw="Gets or sets one of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeUnion&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeList&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction&quot; /&gt;.">取得或設定 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 之一。</summary>
      <returns vsli:raw="One of &lt;see langword=&quot;XmlSchemaSimpleTypeUnion&quot; /&gt;, &lt;see langword=&quot;XmlSchemaSimpleTypeList&quot; /&gt;, or &lt;see langword=&quot;XmlSchemaSimpleTypeRestriction&quot; /&gt;.">
        <see langword="XmlSchemaSimpleTypeUnion" />、<see langword="XmlSchemaSimpleTypeList" /> 或 <see langword="XmlSchemaSimpleTypeRestriction" /> 之一。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeContent">
      <summary vsli:raw="Abstract class for simple type content classes.">簡單型別內容類別的抽象類別 (Abstract Class)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeContent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeContent&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeContent" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeList">
      <summary vsli:raw="Represents the &lt;see langword=&quot;list&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to define a &lt;see langword=&quot;simpleType&quot; /&gt; element as a list of values of a specified data type.">將來自 XML 結構描述的 <see langword="list" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別可用於將 <see langword="simpleType" /> 項目定義為指定資料型別的值清單。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeList.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeList&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.BaseItemType">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName&quot; /&gt; values of the simple type.">依據簡單型別的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" /> 值，取得或設定 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" />，表示 <see langword="simpleType" /> 項目 型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示 <see langword="simpleType" /> 項目的型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType">
      <summary vsli:raw="Gets or sets the &lt;see langword=&quot;simpleType&quot; /&gt; element that is derived from the type specified by the base value.">取得或設定 <see langword="simpleType" /> 項目，這個項目是從基底數值指定的型別衍生。</summary>
      <returns vsli:raw="The item type for the simple type element.">簡單類型元素的項目類型。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName">
      <summary vsli:raw="Gets or sets the name of a built-in data type or &lt;see langword=&quot;simpleType&quot; /&gt; element defined in this schema (or another schema indicated by the specified namespace).">取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中定義之內建資料型別或 <see langword="simpleType" /> 項目的名稱。</summary>
      <returns vsli:raw="The type name of the simple type list.">簡單類型清單的類型名稱。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction">
      <summary vsli:raw="Represents the &lt;see langword=&quot;restriction&quot; /&gt; element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used restricting &lt;see langword=&quot;simpleType&quot; /&gt; element.">將來自 XML 結構描述之簡單類型的 <see langword="restriction" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 這個類別可用於限制 <see langword="simpleType" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseType">
      <summary vsli:raw="Gets or sets information on the base type.">取得或設定基底類型 (Base Type) 上的資訊。</summary>
      <returns vsli:raw="The base type for the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see langword="simpleType" /> 項目的基底型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.BaseTypeName">
      <summary vsli:raw="Gets or sets the name of the qualified base type.">取得或設定限定基底類型的名稱。</summary>
      <returns vsli:raw="The qualified name of the simple type restriction base type.">簡單類型限制基底類型的限定名稱 (Qualified Name)。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeRestriction.Facets">
      <summary vsli:raw="Gets or sets an Xml Schema facet.">取得或設定 XML 結構描述 facet。</summary>
      <returns vsli:raw="One of the following facet classes:  &#xA;  &#xA; &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxLengthFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaPatternFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaEnumerationFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinInclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaMinExclusiveFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaFractionDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaTotalDigitsFacet&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet&quot; /&gt;.">下列其中一個 facet 類別： 
 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />, <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />.</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion">
      <summary vsli:raw="Represents the &lt;see langword=&quot;union&quot; /&gt; element for simple types from XML Schema as specified by the World Wide Web Consortium (W3C). A &lt;see langword=&quot;union&quot; /&gt; datatype can be used to specify the content of a &lt;see langword=&quot;simpleType&quot; /&gt;. The value of the &lt;see langword=&quot;simpleType&quot; /&gt; element must be any one of a set of alternative datatypes specified in the union. Union types are always derived types and must comprise at least two alternative datatypes.">將來自 XML 結構描述之簡單類型的 <see langword="union" /> 元素，依全球資訊網協會 (W3C) 的規定表示。 <see langword="union" /> 資料型別可以用來指定 <see langword="simpleType" /> 的內容。 <see langword="simpleType" /> 項目的值必須是等位中指定之一組替代資料型別的其中任何一個。 等位型別一定是衍生的類型，並且必須至少由兩個替代資料類型構成。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaSimpleTypeUnion.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleTypeUnion&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseMemberTypes">
      <summary vsli:raw="Gets an array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; objects representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element based on the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes&quot; /&gt; values of the simple type.">取得 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件的陣列，表示基於簡單型別之 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" /> 和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" /> 值的 <see langword="simpleType" /> 項目型別。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; objects representing the type of the &lt;see langword=&quot;simpleType&quot; /&gt; element.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 物件的陣列，表示 <see langword="simpleType" /> 項目的型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes">
      <summary vsli:raw="Gets the collection of base types.">取得基底類型 (Base Type) 的集合。</summary>
      <returns vsli:raw="The collection of simple type base values.">簡單類型基底數值的集合。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes">
      <summary vsli:raw="Gets or sets the array of qualified member names of built-in data types or &lt;see langword=&quot;simpleType&quot; /&gt; elements defined in this schema (or another schema indicated by the specified namespace).">取得或設定在這個結構描述 (或指定命名空間指示的其他結構描述) 中定義的內建資料型別或 <see langword="simpleType" /> 項目的成員限定名稱 (Qualified Name) 陣列。</summary>
      <returns vsli:raw="An array that consists of a list of members of built-in data types or simple types.">陣列，含有內建資料類型或簡單類型的成員清單。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet">
      <summary vsli:raw="Represents the &lt;see langword=&quot;totalDigits&quot; /&gt; facet from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to specify a restriction on the number of digits that can be entered for the value of a &lt;see langword=&quot;simpleType&quot; /&gt; element. That value of &lt;see langword=&quot;totalDigits&quot; /&gt; must be a positive integer.">將來自 XML 結構描述的 <see langword="totalDigits" /> Facet，依全球資訊網協會 (W3C) 的規定表示。 這個類別可用於指定對可以為 <see langword="simpleType" /> 項目值輸入之位數的限制。 該 <see langword="totalDigits" /> 值必須是正整數。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaTotalDigitsFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaTotalDigitsFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaType">
      <summary vsli:raw="The base class for all simple types and complex types.">所有簡單型別和複雜型別的基底類別。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type of the complex type specified.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示指定之複雜型別的內建複雜型別。</summary>
      <param name="typeCode" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; values representing the complex type.">其中一個 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值，表示複雜型別。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示內建複雜型別。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type of the complex type specified by qualified name.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示完整名稱指定之複雜型別的內建複雜型別。</summary>
      <param name="qualifiedName" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; of the complex type.">複雜型別的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 參數為 <see langword="null" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; that represents the built-in complex type.">
        <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，表示內建複雜型別。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type of the specified simple type.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示指定之簡單型別的內建簡單型別。</summary>
      <param name="typeCode" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; values representing the simple type.">其中一個 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值，表示簡單型別。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示內建簡單型別。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type of the simple type that is specified by the qualified name.">傳回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示限定名稱指定之簡單型別的內建簡單型別。</summary>
      <param name="qualifiedName" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; of the simple type.">簡單型別的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 參數為 <see langword="null" />。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt; that represents the built-in simple type.">
        <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />，表示內建簡單型別。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)">
      <summary vsli:raw="Returns a value indicating if the derived schema type specified is derived from the base schema type specified.">傳回值，指出所指定衍生結構描述類型是否衍生自指定的基底結構描述類型。</summary>
      <param name="derivedType" vsli:raw="The derived &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; to test.">要測試的衍生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="baseType" vsli:raw="The base &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; to test the derived &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; against.">基底 <see cref="T:System.Xml.Schema.XmlSchemaType" />，要對其測試衍生 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</param>
      <param name="except" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; values representing a type derivation method to exclude from testing.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值，表示從測試排除的型別衍生方法。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the derived type is derived from the base type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果衍生型別是衍生自基底型別，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseSchemaType">
      <summary vsli:raw="Gets the post-compilation object type or the built-in XML Schema Definition Language (XSD) data type, simpleType element, or complexType element. This is a post-schema-compilation infoset property.">取得編譯後物件型別或內建 XML 結構描述定義語言 (XSD) 資料型別、simpleType 項目或 complexType 項目。 這是後結構描述編譯資訊集屬性。</summary>
      <returns vsli:raw="The built-in XSD data type, simpleType element, or complexType element.">內建 XSD 資料型別、simpleType 項目或 complexType 項目。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType">
      <summary vsli:raw="Gets the post-compilation value for the base type of this schema type.">取得此結構描述型別之基底型別的編譯後值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object representing the base type of this schema type.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件，表示這個結構描述型別的基底型別。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Datatype">
      <summary vsli:raw="Gets the post-compilation value for the data type of the complex type.">取得複雜型別之資料型別的編譯後值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt; post-schema-compilation value.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" /> 後結構描述編譯值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.DerivedBy">
      <summary vsli:raw="Gets the post-compilation information on how this element was derived from its base type.">取得有關此項目如何從其基底型別衍生的編譯後資訊。</summary>
      <returns vsli:raw="One of the valid &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Final">
      <summary vsli:raw="Gets or sets the final attribute of the type derivation that indicates if further derivations are allowed.">取得或設定型別衍生的 final 屬性，指出是否允許進一步衍生。</summary>
      <returns vsli:raw="One of the valid &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDerivationMethod&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaDerivationMethod.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" /> 值。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.FinalResolved">
      <summary vsli:raw="Gets the post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaType.Final&quot; /&gt; property.">取得 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 屬性的編譯後值。</summary>
      <returns vsli:raw="The post-compilation value of the &lt;see cref=&quot;P:System.Xml.Schema.XmlSchemaType.Final&quot; /&gt; property. The default is the &lt;see langword=&quot;finalDefault&quot; /&gt; attribute value of the &lt;see langword=&quot;schema&quot; /&gt; element.">
        <see cref="P:System.Xml.Schema.XmlSchemaType.Final" /> 屬性的編譯後值。 預設值為 <see langword="finalDefault" /> 項目的 <see langword="schema" /> 屬性值。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.IsMixed">
      <summary vsli:raw="Gets or sets a value indicating if this type has a mixed content model. This property is only valid in a complex type.">取得或設定值，指出這個型別是否具有混合內容模型。 這個屬性只在複雜型別中有效。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type has a mixed content model; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果型別有混合內容模型，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.Name">
      <summary vsli:raw="Gets or sets the name of the type.">取得或設定類型的名稱。</summary>
      <returns vsli:raw="The name of the type.">型別的名稱。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.QualifiedName">
      <summary vsli:raw="Gets the qualified name for the type built from the &lt;see langword=&quot;Name&quot; /&gt; attribute of this type. This is a post-schema-compilation property.">取得從這個型別的 <see langword="Name" /> 屬性 (Attribute) 建置之型別的限定名稱 (Qualified Name)。 這是後結構描述編譯屬性。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; for the type built from the &lt;see langword=&quot;Name&quot; /&gt; attribute of this type.">型別的 <see cref="T:System.Xml.XmlQualifiedName" />，從這個型別的 <see langword="Name" /> 屬性建置而來。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaType.TypeCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; of the type.">取得型別的 <see cref="T:System.Xml.Schema.XmlTypeCode" />。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlTypeCode&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.Schema.XmlTypeCode" /> 值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUnique">
      <summary vsli:raw="Represents the &lt;see langword=&quot;unique&quot; /&gt; element from XML Schema as specified by the World Wide Web Consortium (W3C). This class can be used to identify a unique constraint among a set of elements.">將來自 XML 結構描述的 <see langword="unique" /> 項目依 World Wide Web Consortium (W3C) 規定表示。 這個類別 (Class) 可用於識別一組元素中唯一的條件約束 (Unique Constraint)。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaUnique.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaUnique&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaUnique" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaUse">
      <summary vsli:raw="Indicator of how the attribute is used.">如何使用屬性的指示器。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.None">
      <summary vsli:raw="Attribute use not specified.">未指定屬性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Optional">
      <summary vsli:raw="Attribute is optional.">屬性是選擇項。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Prohibited">
      <summary vsli:raw="Attribute cannot be used.">不能使用屬性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaUse.Required">
      <summary vsli:raw="Attribute must appear once.">屬性必須出現一次。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationException">
      <summary vsli:raw="Represents the exception thrown when XML Schema Definition Language (XSD) schema validation errors and warnings are encountered in an XML document being validated.">表示在正在驗證之 XML 文件中遇到 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤和警告時，所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects specified.">使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件，初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the exception message specified.">使用指定的例外狀況訊息，初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">錯誤狀況的 <see langword="string" /> 描述。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the exception message and original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception specified.">使用例外狀況訊息和導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 物件，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">導致這個例外狀況的原始 <see cref="T:System.Exception" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; class with the exception message specified, and the original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, line number, and line position of the XML that cause this exception specified.">使用指定的例外狀況訊息，以及導致這個指定之例外狀況的原始 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 物件、XML 中的行號和行位置，初始化 <see cref="T:System.Exception" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; description of the error condition.">錯誤狀況的 <see langword="string" /> 描述。</param>
      <param name="innerException" vsli:raw="The original &lt;see cref=&quot;T:System.Exception&quot; /&gt; object that caused this exception.">導致這個例外狀況的原始 <see cref="T:System.Exception" /> 物件。</param>
      <param name="lineNumber" vsli:raw="The line number of the XML that caused this exception.">導致這個例外狀況的 XML 行號。</param>
      <param name="linePosition" vsli:raw="The line position of the XML that caused this exception.">導致這個例外狀況的 XML 行位置。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Constructs a new &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt; object with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; information that contains all the properties of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt;.">以指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 資訊建構包含 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 所有屬性的新 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 物件。</summary>
      <param name="info" vsli:raw="&lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt;">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />
      </param>
      <param name="context" vsli:raw="&lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />
      </param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidationException.SetSourceObject(System.Object)">
      <summary vsli:raw="Sets the XML node that causes the error.">設定引起這個錯誤的 XML 節點。</summary>
      <param name="sourceObject" vsli:raw="The source object.">來源物件。</param>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidationException.SourceObject">
      <summary vsli:raw="Gets the XML node that caused this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt;.">取得導致這個 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 的 XML 節點。</summary>
      <returns vsli:raw="The XML node that caused this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationException&quot; /&gt;.">導致這個 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" /> 的 XML 節點。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidationFlags">
      <summary vsli:raw="Specifies schema validation options used by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; classes.">指定 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 和 <see cref="T:System.Xml.XmlReader" /> 類別 (Class) 所使用的結構描述驗證選項。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes">
      <summary vsli:raw="Allow xml:* attributes even if they are not defined in the schema. The attributes will be validated based on their data type.">允許 xml:* 屬性，即使未在結構描述中定義它們也是如此。 對屬性的驗證會依據其資料型別進行。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.None">
      <summary vsli:raw="Do not process identity constraints, inline schemas, schema location hints, or report schema validation warnings.">請勿處理識別條件約束、內嵌結構描述、結構描述位置提示，或報告結構描述驗證警告。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints">
      <summary vsli:raw="Process identity constraints (&lt;c&gt;xs:ID&lt;/c&gt;, &lt;c&gt;xs:IDREF&lt;/c&gt;, &lt;c&gt;xs:key&lt;/c&gt;, &lt;c&gt;xs:keyref&lt;/c&gt;, &lt;c&gt;xs:unique&lt;/c&gt;) encountered during validation.">處理驗證期間遇到的識別條件約束 (<c>xs:ID</c>、<c>xs:IDREF</c>、<c>xs:key</c>、<c>xs:keyref</c>、<c>xs:unique</c>)。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema">
      <summary vsli:raw="Process inline schemas encountered during validation.">處理驗證期間遇到的內嵌結構描述。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation">
      <summary vsli:raw="Process schema location hints (&lt;c&gt;xsi:schemaLocation&lt;/c&gt;, &lt;c&gt;xsi:noNamespaceSchemaLocation&lt;/c&gt;) encountered during validation.">處理驗證期間遇到的結構描述位置提示 (<c>xsi:schemalocation</c>、<c>xsi:noNamespaceSchemaLocation</c>)。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings">
      <summary vsli:raw="Report schema validation warnings encountered during validation.">報告驗證期間遇到的結構描述驗證警告。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidator">
      <summary vsli:raw="Represents an XML Schema Definition Language (XSD) Schema validation engine. The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class cannot be inherited.">表示 XML 結構描述定義語言 (XSD) 結構描述驗證引擎。 無法繼承 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別 (Class)。</summary>
    </member>
    <member name="E:System.Xml.Schema.XmlSchemaValidator.ValidationEventHandler">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; that receives schema validation warnings and errors encountered during schema validation.">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" />，可接收結構描述驗證期間遇到的結構描述驗證警告和錯誤。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.#ctor(System.Xml.XmlNameTable,System.Xml.Schema.XmlSchemaSet,System.Xml.IXmlNamespaceResolver,System.Xml.Schema.XmlSchemaValidationFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別的新執行個體。</summary>
      <param name="nameTable" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object containing element and attribute names as atomized strings.">
        <see cref="T:System.Xml.XmlNameTable" /> 物件，包含原子化字串形式的項目和屬性名稱。</param>
      <param name="schemas" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the XML Schema Definition Language (XSD) schemas used for validation.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含用於驗證的 XML 結構描述定義語言 (XSD) 結構描述。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used for resolving namespaces encountered during validation.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析驗證期間遇到的命名空間。</param>
      <param name="validationFlags" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidationFlags&quot; /&gt; value specifying schema validation options.">
        <see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" /> 值，指定結構描述驗證選項。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">一或多個指定的參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="An error occurred while compiling schemas in the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; parameter.">在編譯 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 參數中的結構描述時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.AddSchema(System.Xml.Schema.XmlSchema)">
      <summary vsli:raw="Adds an XML Schema Definition Language (XSD) schema to the set of schemas used for validation.">將 XML 結構描述定義語言 (XSD) 結構描述加入一組用於驗證的結構描述。</summary>
      <param name="schema" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; object to add to the set of schemas used for validation.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 物件，該物件要加入一組用於驗證的結構描述。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; parameter specified is &lt;see langword=&quot;null&quot; /&gt;.">指定的 <see cref="T:System.Xml.Schema.XmlSchema" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The target namespace of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; parameter matches that of any element or attribute already encountered by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 參數的目標命名空間與 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件已經遇到之任何項目或屬性的目標命名空間都相符。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; parameter is invalid.">
        <see cref="T:System.Xml.Schema.XmlSchema" /> 參數無效。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.EndValidation">
      <summary vsli:raw="Ends validation and checks identity constraints for the entire XML document.">結束驗證，並檢查整個 XML 文件的識別條件約束。</summary>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="An identity constraint error was found in the XML document.">在 XML 文件中找到識別條件約束錯誤。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedAttributes">
      <summary vsli:raw="Returns the expected attributes for the current element context.">傳回目前元素內容的預期屬性。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; objects or an empty array if there are no expected attributes.">
        <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件的陣列；如果沒有預期屬性，則為空白陣列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetExpectedParticles">
      <summary vsli:raw="Returns the expected particles in the current element context.">傳回目前元素內容中的預期物件。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaParticle&quot; /&gt; objects or an empty array if there are no expected particles.">
        <see cref="T:System.Xml.Schema.XmlSchemaParticle" /> 物件的陣列；如果沒有預期物件，則為空白陣列。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.GetUnspecifiedDefaultAttributes(System.Collections.ArrayList)">
      <summary vsli:raw="Validates identity constraints on the default attributes and populates the &lt;see cref=&quot;T:System.Collections.ArrayList&quot; /&gt; specified with &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; objects for any attributes with default values that have not been previously validated using the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; method in the element context.">對預設屬性驗證識別條件約束，並針對先前尚未使用 <see cref="T:System.Collections.ArrayList" /> 方法在項目內容中驗證預設值的任何屬性，以其 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件填入指定的 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />。</summary>
      <param name="defaultAttributes" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ArrayList&quot; /&gt; to populate with &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt; objects for any attributes not yet encountered during validation in the element context.">
        <see cref="T:System.Collections.ArrayList" />，要用驗證期間尚未在項目內容中遇到之任何屬性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 物件填入。</param>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize">
      <summary vsli:raw="Initializes the state of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的狀態。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.Initialize&quot; /&gt; method is valid immediately after the construction of an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object or after a call to &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.EndValidation&quot; /&gt; only.">只有在建構 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 物件之後或呼叫 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之後立即呼叫，<see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法才有效。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.Initialize(System.Xml.Schema.XmlSchemaObject)">
      <summary vsli:raw="Initializes the state of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object using the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; specified for partial validation.">使用為部分驗證指定的 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />，初始化 <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 物件的狀態。</summary>
      <param name="partialValidationType" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object used to initialize the validation context of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object for partial validation.">
        <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件，用於初始化部分驗證之 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件的驗證內容。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.Initialize&quot; /&gt; method is valid immediately after the construction of an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object or after a call to &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.EndValidation&quot; /&gt; only.">只有在建構 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" /> 物件之後或呼叫 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 之後立即呼叫，<see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" /> 方法才有效。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaElement&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaAttribute&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不是 <see cref="T:System.Xml.Schema.XmlSchemaElement" />、<see cref="T:System.Xml.Schema.XmlSchemaAttribute" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaObject&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaObject" /> 參數不可為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Skips validation of the current element content and prepares the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object to validate content in the parent element's context.">略過目前項目內容的驗證，並準備 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件，以驗證父項目內容 (Context) 中的內容 (Content)。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set if the current element content is successfully skipped. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，如果順利略過目前項目內容，則會設定此物件的屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">未按正確的順序呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，在呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Validates the attribute name, namespace URI, and value in the current element context.">驗證目前元素內容中的屬性名稱、命名空間 URI 和值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to validate.">要驗證之屬性的本機名稱。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute to validate.">要驗證之屬性的命名空間 URI。</param>
      <param name="attributeValue" vsli:raw="The value of the attribute to validate.">要驗證之屬性的值。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the attribute. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證屬性 (Attribute) 時會設定其屬性 (Property)。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The attribute is not valid in the current element context.">此屬性在目前項目內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">一或多個指定的參數為 <see langword="null" />。</exception>
      <returns vsli:raw="The validated attribute's value.">已驗證之屬性的值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute(System.String,System.String,System.Xml.Schema.XmlValueGetter,System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Validates the attribute name, namespace URI, and value in the current element context.">驗證目前元素內容中的屬性名稱、命名空間 URI 和值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to validate.">要驗證之屬性的本機名稱。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the attribute to validate.">要驗證之屬性的命名空間 URI。</param>
      <param name="attributeValue" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt;&lt;see langword=&quot;delegate&quot; /&gt; used to pass the attribute's value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" />，用於將屬性的值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the attribute. This parameter and can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證屬性 (Attribute) 時會設定其屬性 (Property)。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The attribute is not valid in the current element context.">此屬性在目前項目內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">一或多個指定的參數為 <see langword="null" />。</exception>
      <returns vsli:raw="The validated attribute's value.">已驗證之屬性的值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Validates the element in the current context.">驗證目前內容中的元素。</summary>
      <param name="localName" vsli:raw="The local name of the element to validate.">要驗證之元素的區域名稱。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element to validate.">要驗證之元素的命名空間 (Namespace) URI。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the element's name. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目名稱時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's name is not valid in the current context.">項目的名稱在目前內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateElement(System.String,System.String,System.Xml.Schema.XmlSchemaInfo,System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Validates the element in the current context with the &lt;c&gt;xsi:Type&lt;/c&gt;, &lt;c&gt;xsi:Nil&lt;/c&gt;, &lt;c&gt;xsi:SchemaLocation&lt;/c&gt;, and &lt;c&gt;xsi:NoNamespaceSchemaLocation&lt;/c&gt; attribute values specified.">驗證目前內容中已指定 <c>xsi:Yype</c>、<c>xsi:Nil</c>、<c>xsi:SchemaLocation</c> 和 <c>xsi:NoNamespaceSchemaLocation</c> 屬性值的元素。</summary>
      <param name="localName" vsli:raw="The local name of the element to validate.">要驗證之元素的區域名稱。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the element to validate.">要驗證之元素的命名空間 (Namespace) URI。</param>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the element's name. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目名稱時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiType" vsli:raw="The &lt;c&gt;xsi:Type&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">元素的 <c>xsi:Type</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiNil" vsli:raw="The &lt;c&gt;xsi:Nil&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">元素的 <c>xsi:Nil</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiSchemaLocation" vsli:raw="The &lt;c&gt;xsi:SchemaLocation&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">元素的 <c>xsi:SchemaLocation</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <param name="xsiNoNamespaceSchemaLocation" vsli:raw="The &lt;c&gt;xsi:NoNamespaceSchemaLocation&lt;/c&gt; attribute value of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">元素的 <c>xsi:NoNamespaceSchemaLocation</c> 屬性值。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's name is not valid in the current context.">項目的名稱在目前內容中無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Verifies if the text content of the element is valid according to its data type for elements with simple content, and verifies if the content of the current element is complete for elements with complex content.">對於具有簡單內容的元素，根據元素的資料類型驗證它的文字內容是否有效；對於具有複雜內容的元素，驗證目前元素的內容是否完整。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's content is not valid.">項目的內容無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method was not called in the correct sequence. For example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method is called after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法。</exception>
      <returns vsli:raw="The parsed, typed text value of the element if the element has simple content.">如果此元素具有簡單內容，則為此元素之已剖析的具類型文字值。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement(System.Xml.Schema.XmlSchemaInfo,System.Object)">
      <summary vsli:raw="Verifies if the text content of the element specified is valid according to its data type.">根據指定元素的資料類型，驗證此元素的文字內容是否有效。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful validation of the text content of the element. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證此項目的文字內容時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <param name="typedValue" vsli:raw="The typed text content of the element.">此元素的具類型文字內容。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The element's text content is not valid.">此項目的文字內容無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method was not called in the correct sequence (for example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement&quot; /&gt; method is called after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;), calls to the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method have been previously made, or the element has complex content.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 方法 (例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" /> 方法)、先前已呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法，或此項目具有複雜內容。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The typed text content parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">具型別之文字內容參數不能為 <see langword="null" />。</exception>
      <returns vsli:raw="The parsed, typed simple content of the element.">此元素之已剖析的具類型簡單內容。</returns>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)">
      <summary vsli:raw="Verifies whether all the required attributes in the element context are present and prepares the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object to validate the child content of the element.">驗證項目內容中的所有必要屬性是否均已存在，並準備 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件以驗證項目的子內容。</summary>
      <param name="schemaInfo" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaInfo&quot; /&gt; object whose properties are set on successful verification that all the required attributes in the element context are present. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaInfo" /> 物件，在成功驗證項目內容中的所有必要屬性都已存在時會設定其屬性。 這個參數可以是 <see langword="null" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="One or more of the required attributes in the current element context were not found.">找不到目前項目內容中的一或多個必要屬性。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; method was not called in the correct sequence. For example, calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt; after calling &lt;see cref=&quot;M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)&quot; /&gt;.">未按正確的順序呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 方法。 例如，在呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" /> 之後呼叫 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more of the parameters specified are &lt;see langword=&quot;null&quot; /&gt;.">一或多個指定的參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.String)">
      <summary vsli:raw="Validates whether the text &lt;see langword=&quot;string&quot; /&gt; specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.">驗證在目前項目內容中是否允許指定的文字 <see langword="string" />，並在目前項目具有簡單內容的情況下，彙總文字以進行驗證。</summary>
      <param name="elementValue" vsli:raw="A text &lt;see langword=&quot;string&quot; /&gt; to validate in the current element context.">目前項目內容中要驗證的文字 <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; specified is not allowed in the current element context.">在目前項目內容中不允許指定的文字 <see langword="string" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">文字 <see langword="string" /> 參數不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateText(System.Xml.Schema.XmlValueGetter)">
      <summary vsli:raw="Validates whether the text returned by the &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt; object specified is allowed in the current element context, and accumulates the text for validation if the current element has simple content.">驗證在目前項目內容中是否允許指定之 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 物件傳回的文字，並在目前項目具有簡單內容的情況下，彙總文字以進行驗證。</summary>
      <param name="elementValue" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt;&lt;see langword=&quot;delegate&quot; /&gt; used to pass the text value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" />，用於將文字值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; specified is not allowed in the current element context.">在目前項目內容中不允許指定的文字 <see langword="string" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method was not called in the correct sequence. For example, the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The text &lt;see langword=&quot;string&quot; /&gt; parameter cannot be &lt;see langword=&quot;null&quot; /&gt;.">文字 <see langword="string" /> 參數不能為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.String)">
      <summary vsli:raw="Validates whether the white space in the &lt;see langword=&quot;string&quot; /&gt; specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.">驗證在目前項目內容中是否允許指定之 <see langword="string" /> 中的空白區，並在目前項目具有簡單內容的情況下，彙總空白區以進行驗證。</summary>
      <param name="elementValue" vsli:raw="A white space &lt;see langword=&quot;string&quot; /&gt; to validate in the current element context.">要在目前項目內容中驗證的空白區 <see langword="string" />。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="White space is not allowed in the current element context.">在目前項目內容中不允許空白區。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method was not called in the correct sequence. For example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace(System.Xml.Schema.XmlValueGetter)">
      <summary vsli:raw="Validates whether the white space returned by the &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt; object specified is allowed in the current element context, and accumulates the white space for validation if the current element has simple content.">驗證在目前項目內容中是否允許指定之 <see cref="T:System.Xml.Schema.XmlValueGetter" /> 物件傳回的空白區，並在目前項目具有簡單內容的情況下，彙總空白區以進行驗證。</summary>
      <param name="elementValue" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlValueGetter&quot; /&gt;&lt;see langword=&quot;delegate&quot; /&gt; used to pass the white space value as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute.">
        <see cref="T:System.Xml.Schema.XmlValueGetter" />
        <see langword="delegate" />，用於將空白字元值當做與屬性之 XML 結構描述定義語言 (XSD) 類型相容的 Common Language Runtime (CLR) 類型進行傳遞。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="White space is not allowed in the current element context.">在目前項目內容中不允許空白區。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method was not called in the correct sequence. For example, if the &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace&quot; /&gt; method is called after calling &lt;see cref=&quot;Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute&quot; /&gt;.">未按正確的順序呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 方法。 例如，在呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" /> 之後呼叫 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" /> 方法。</exception>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.LineInfoProvider">
      <summary vsli:raw="Gets or sets the line number information for the XML node being validated.">取得或設定正在驗證之 XML 節點的行號資訊。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlLineInfo&quot; /&gt; object.">
        <see cref="T:System.Xml.IXmlLineInfo" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.SourceUri">
      <summary vsli:raw="Gets or sets the source URI for the XML node being validated.">取得或設定正在驗證之 XML 節點的來源 URI。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Uri&quot; /&gt; object representing the source URI for the XML node being validated; the default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Uri" /> 物件，表示正在驗證之 XML 節點的來源 URI；預設值為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.ValidationEventSender">
      <summary vsli:raw="Gets or sets the object sent as the sender object of a validation event.">取得或設定物件，該物件是以驗證事件的傳送者物件形式傳送。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt;; the default is this &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; object.">
        <see cref="T:System.Object" />，預設為這個 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaValidator.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object used to resolve &lt;c&gt;xs:import&lt;/c&gt; and &lt;c&gt;xs:include&lt;/c&gt; elements as well as &lt;c&gt;xsi:schemaLocation&lt;/c&gt; and &lt;c&gt;xsi:noNamespaceSchemaLocation&lt;/c&gt; attributes.">設定 <see cref="T:System.Xml.XmlResolver" /> 物件，用於解析 <c>xs:import</c> 和 <c>xs:include</c> 元素，以及 <c>xsi:schemaLocation</c> 和 <c>xsi:noNamespaceSchemaLocation</c> 屬性。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object; the default is an &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlResolver" /> 物件，預設值為 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaValidity">
      <summary vsli:raw="Represents the validity of an XML item validated by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class.">表示 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別所驗證之 XML 項目的有效性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Invalid">
      <summary vsli:raw="The XML item is invalid.">XML 項目無效。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.NotKnown">
      <summary vsli:raw="The validity of the XML item is not known.">XML 項目的有效性未知。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSchemaValidity.Valid">
      <summary vsli:raw="The XML item is valid.">XML 項目有效。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;whiteSpace&quot; /&gt; facet.">表示全球資訊網協會 (W3C) 的 <see langword="whiteSpace" /> Facet。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaWhiteSpaceFacet.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlSchemaXPath">
      <summary vsli:raw="Represents the World Wide Web Consortium (W3C) &lt;see langword=&quot;selector&quot; /&gt; element.">表示全球資訊網協會 (W3C) 的 <see langword="selector" /> 項目。</summary>
    </member>
    <member name="M:System.Xml.Schema.XmlSchemaXPath.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaXPath&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Schema.XmlSchemaXPath" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Schema.XmlSchemaXPath.XPath">
      <summary vsli:raw="Gets or sets the attribute for the XPath expression.">取得或設定 XPath 運算式的屬性。</summary>
      <returns vsli:raw="The string attribute value for the XPath expression.">XPath 運算式的字串屬性值。</returns>
    </member>
    <member name="T:System.Xml.Schema.XmlSeverityType">
      <summary vsli:raw="Represents the severity of the validation event.">表示驗證事件的嚴重性。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Error">
      <summary vsli:raw="Indicates a validation error occurred when validating the instance document. This applies to document type definitions (DTDs) and XML Schema definition language (XSD) schemas. The World Wide Web Consortium (W3C) validity constraints are considered errors. If no validation event handler has been created, errors throw an exception.">指示在驗證執行個體文件時發生驗證錯誤。 這會套用至文件類型定義 (DTD) 和 XML 結構描述定義語言 (XSD) 結構描述。 全球資訊網協會 (W3C) 有效性條件約束 (Constraint) 會被視為錯誤。 如果未建立驗證事件處理常式，錯誤會擲回例外狀況。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlSeverityType.Warning">
      <summary vsli:raw="Indicates that a validation event occurred that is not an error. A warning is typically issued when there is no DTD, or XML Schema to validate a particular element or attribute against. Unlike errors, warnings do not throw an exception if there is no validation event handler.">表示發生了驗證事件，但不是錯誤。 通常在沒有可以驗證特定項目或屬性的 DTD 或 XML 結構描述時，會發出警告。 警告與錯誤不同，如果沒有驗證事件處理常式，並不會擲回例外狀況。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlTypeCode">
      <summary vsli:raw="Represents the W3C XML Schema Definition Language (XSD) schema types.">表示 W3C XML 結構描述定義語言 (XSD) 結構描述型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyAtomicType">
      <summary vsli:raw="Any atomic value of a union.">等位的任何原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.AnyUri">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:anyURI&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:anyURI" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Attribute">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Base64Binary">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:base64Binary&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:base64Binary" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Boolean">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:boolean&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:boolean" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Byte">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:byte&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:byte" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Comment">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Date">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:date&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:date" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DateTime">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:dateTime&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:dateTime" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.DayTimeDuration">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Decimal">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:decimal&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:decimal" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Document">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Double">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:double&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:double" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Duration">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:Duration&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:Duration" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Element">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Entity">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:ENTITY&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:ENTITY" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Float">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:float&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:float" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GDay">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gDay&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:gDay" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonth">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gMonth&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:gMonth" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GMonthDay">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gMonthDay&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:gMonthDay" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYear">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gYear&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:gYear" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.GYearMonth">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:gYearMonth&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:gYearMonth" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.HexBinary">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:hexBinary&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:hexBinary" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Id">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:ID&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:ID" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Idref">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:IDREF&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:IDREF" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Int">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:int&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:int" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Integer">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:integer&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:integer" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Item">
      <summary vsli:raw="An item such as a node or atomic value.">項目，例如節點或原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Language">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:language&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:language" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Long">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:long&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:long" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Name">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:Name&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:Name" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Namespace">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NCName">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:NCName&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:NCName" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NegativeInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:negativeInteger&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:negativeInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NmToken">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:NMTOKEN&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:NMTOKEN" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Node">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.None">
      <summary vsli:raw="No type information.">沒有型別資訊。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonNegativeInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:nonNegativeInteger&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:nonNegativeInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NonPositiveInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:nonPositiveInteger&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:nonPositiveInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.NormalizedString">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:normalizedString&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:normalizedString" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Notation">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:NOTATION&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:NOTATION" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.PositiveInteger">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:positiveInteger&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:positiveInteger" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.ProcessingInstruction">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.QName">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:QName&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:QName" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Short">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:short&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:short" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.String">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:string&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:string" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Text">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Time">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:time&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:time" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.Token">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:token&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:token" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedByte">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedByte&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:unsignedByte" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedInt">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedInt&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:unsignedInt" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedLong">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedLong&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:unsignedLong" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UnsignedShort">
      <summary vsli:raw="A W3C XML Schema &lt;see langword=&quot;xs:unsignedShort&quot; /&gt; type.">W3C XML 結構描述 <see langword="xs:unsignedShort" /> 型別。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.UntypedAtomic">
      <summary vsli:raw="An untyped atomic value.">不具型別的原子值。</summary>
    </member>
    <member name="F:System.Xml.Schema.XmlTypeCode.YearMonthDuration">
      <summary vsli:raw="This value supports the .NET Framework infrastructure and is not intended to be used directly from your code.">這個值會支援 .NET Framework 基礎結構，而且並不適合直接從您的程式碼中使用。</summary>
    </member>
    <member name="T:System.Xml.Schema.XmlValueGetter">
      <summary vsli:raw="A &lt;see langword=&quot;delegate&quot; /&gt; used by the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaValidator&quot; /&gt; class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.">由 <see cref="T:System.Xml.Schema.XmlSchemaValidator" /> 類別使用的 <see langword="delegate" />，用來將屬性、文字和泛空白字元值做為與屬性、文字或泛空白字元的 XML 結構描述定義語言 (XSD) 型別相容的 Common Language Runtime (CLR) 型別進行傳遞。</summary>
      <returns vsli:raw="An object containing the attribute, text, or white space value. The object is a CLR type that corresponds to the XSD type of the attribute, text, or white space value.">物件，包含屬性、文字或泛空白字元值。 該物件是對應到屬性、文字或空白字元值 XSD 類型的 CLR 類型。</returns>
    </member>
    <member name="T:System.Xml.Serialization.IXmlSerializable">
      <summary vsli:raw="Provides custom formatting for XML serialization and deserialization.">為 XML 序列化和還原序列化提供自訂格式。</summary>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.GetSchema">
      <summary vsli:raw="This method is reserved and should not be used. When implementing the &lt;see langword=&quot;IXmlSerializable&quot; /&gt; interface, you should return &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSchemaProviderAttribute&quot; /&gt; to the class.">這個方法已保留且不應使用。 實作 <see langword="IXmlSerializable" /> 介面時，您應該要從這個方法傳回 <see langword="null" /> (在 Visual Basic 中為 <see langword="Nothing" />)；相對地，在需要指定自訂結構描述時，將 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 套用至該類別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchema&quot; /&gt; that describes the XML representation of the object that is produced by the &lt;see cref=&quot;M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)&quot; /&gt; method and consumed by the &lt;see cref=&quot;M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)&quot; /&gt; method.">描述物件之 XML 表示法的 <see cref="T:System.Xml.Schema.XmlSchema" />，該物件是由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 方法所產生並由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> 方法所取用。</returns>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)">
      <summary vsli:raw="Generates an object from its XML representation.">從物件的 XML 表示產生該物件。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; stream from which the object is deserialized.">從中還原序列化物件的 <see cref="T:System.Xml.XmlReader" /> 資料流。</param>
    </member>
    <member name="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)">
      <summary vsli:raw="Converts an object into its XML representation.">將物件轉換為其 XML 表示。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; stream to which the object is serialized.">
        <see cref="T:System.Xml.XmlWriter" /> 資料流，物件會序列化至其中。</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyAttributeAttribute">
      <summary vsli:raw="Specifies that the member (a field that returns an array of &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects) can contain any XML attributes.">指定成員 (傳回 <see cref="T:System.Xml.XmlAttribute" /> 物件陣列的欄位) 可以包含任何 XML 屬性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyAttributeAttribute.#ctor">
      <summary vsli:raw="Constructs a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyAttributeAttribute&quot; /&gt; class.">建構 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttribute">
      <summary vsli:raw="Specifies that the member (a field that returns an array of &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; or &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; objects) contains objects that represent any XML element that has no corresponding member in the object being serialized or deserialized.">指定成員 (傳回 <see cref="T:System.Xml.XmlElement" /> 或 <see cref="T:System.Xml.XmlNode" /> 物件陣列的欄位) 包含物件，該物件表示在序列化或還原序列化物件中沒有對應成員的任何 XML 項目。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyElementAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyElementAttribute&quot; /&gt; class and specifies the XML element name generated in the XML document.">初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 類別的新執行個體，指定 XML 文件中產生的 XML 項目名稱。</summary>
      <param name="name" vsli:raw="The name of the XML element that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 項目名稱。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAnyElementAttribute&quot; /&gt; class and specifies the XML element name generated in the XML document and its XML namespace.">初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> 類別的新執行個體，指定 XML 文件中產生的 XML 項目名稱及其 XML 命名空間。</summary>
      <param name="name" vsli:raw="The name of the XML element that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 項目名稱。</param>
      <param name="ns" vsli:raw="The XML namespace of the XML element.">XML 項目的 XML 命名空間。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Name">
      <summary vsli:raw="Gets or sets the XML element name.">取得或設定 XML 項目名稱。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The element name of an array member does not match the element name specified by the &lt;see cref=&quot;P:System.Xml.Serialization.XmlAnyElementAttribute.Name&quot; /&gt; property.">陣列成員的項目名稱與 <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" /> 屬性指定的項目名稱不符。</exception>
      <returns vsli:raw="The name of the XML element.">XML 項目的名稱。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Namespace">
      <summary vsli:raw="Gets or sets the XML namespace generated in the XML document.">取得或設定在 XML 文件中產生的 XML 命名空間。</summary>
      <returns vsli:raw="An XML namespace.">XML 命名空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttribute.Order">
      <summary vsli:raw="Gets or sets the explicit order in which the elements are serialized or deserialized.">取得或設定項目序列化或還原序列化的明確順序。</summary>
      <returns vsli:raw="The order of the code generation.">程式碼產生的順序。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeAttribute">
      <summary vsli:raw="Specifies that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; must serialize the class member as an XML attribute.">指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 必須將類別成員序列化為 XML 屬性。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class and specifies the name of the generated XML attribute.">初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體，並指定產生的 XML 屬性的名稱。</summary>
      <param name="attributeName" vsli:raw="The name of the XML attribute that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates.">
        <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 屬性名稱。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體。</summary>
      <param name="attributeName" vsli:raw="The name of the XML attribute that is generated.">產生的 XML 屬性名稱。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; used to store the attribute.">
        <see cref="T:System.Type" />，用於儲存屬性。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlAttributeAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; used to store the attribute.">
        <see cref="T:System.Type" />，用於儲存屬性。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.AttributeName">
      <summary vsli:raw="Gets or sets the name of the XML attribute.">取得或設定 XML 屬性的名稱。</summary>
      <returns vsli:raw="The name of the XML attribute. The default is the member name.">XML 屬性的名稱。 預設為成員名稱。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.DataType">
      <summary vsli:raw="Gets or sets the XSD data type of the XML attribute generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt;.">取得或設定由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生之 XML 屬性的 XSD 資料型別。</summary>
      <returns vsli:raw="An XSD (XML Schema Document) data type.">XSD (XML 架構檔) 資料類型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Form">
      <summary vsli:raw="Gets or sets a value that indicates whether the XML attribute name generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; is qualified.">取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生的 XML 屬性名稱是否為限定的。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; values. The default is &lt;see langword=&quot;XmlForm.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設為 <see langword="XmlForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Namespace">
      <summary vsli:raw="Gets or sets the XML namespace of the XML attribute.">取得或設定 XML 屬性的 XML 命名空間。</summary>
      <returns vsli:raw="The XML namespace of the XML attribute.">XML 屬性的 XML 命名空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeAttribute.Type">
      <summary vsli:raw="Gets or sets the complex type of the XML attribute.">取得或設定 XML 屬性的複雜型別。</summary>
      <returns vsli:raw="The type of the XML attribute.">XML 屬性的型別。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttribute">
      <summary vsli:raw="Indicates that a public field or property represents an XML element when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes or deserializes the object that contains it.">表示在 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化或還原序列化包含 XML 項目的物件時，公用欄位或屬性表示該項目。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; class and specifies the name of the XML element.">初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 類別的新執行個體，並且指定 XML 項目的名稱。</summary>
      <param name="elementName" vsli:raw="The XML element name of the serialized member.">序列成員的 XML 項目名稱。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; and specifies the name of the XML element and a derived type for the member to which the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; is applied. This member type is used when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes the object that contains it.">初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的新執行個體，並針對套用 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的成員指定 XML 項目名稱和衍生型別。 這個成員型別用於 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化包含它的物件時。</summary>
      <param name="elementName" vsli:raw="The XML element name of the serialized member.">序列成員的 XML 項目名稱。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of an object derived from the member's type.">衍生自成員型別的物件 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; class and specifies a type for the member to which the &lt;see cref=&quot;T:System.Xml.Serialization.XmlElementAttribute&quot; /&gt; is applied. This type is used by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; when serializing or deserializing object that contains it.">初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 類別的新執行個體，並針對套用 <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> 的成員指定型別。 序列化或還原序列化包含這個型別的物件時，<see cref="T:System.Xml.Serialization.XmlSerializer" /> 會使用該型別。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of an object derived from the member's type.">衍生自成員型別的物件 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.DataType">
      <summary vsli:raw="Gets or sets the XML Schema definition (XSD) data type of the XML element generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt;.">取得或設定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 所產生 XML 項目的 XML 結構描述定義 (XSD) 資料型別。</summary>
      <exception cref="T:System.Exception" vsli:raw="The XML Schema data type you have specified cannot be mapped to the.NET data type.">您指定的 XML 結構描述資料型別無法對應至 .NET 資料型別。</exception>
      <returns vsli:raw="An XML Schema data type.">XML 架構資料類型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.ElementName">
      <summary vsli:raw="Gets or sets the name of the generated XML element.">取得或設定產生的 XML 項目的名稱。</summary>
      <returns vsli:raw="The name of the generated XML element. The default is the member identifier.">產生的 XML 項目的名稱。 預設值為成員識別項。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Form">
      <summary vsli:raw="Gets or sets a value that indicates whether the element is qualified.">取得或設定值，指出項目是否為限定的。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaForm&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaForm.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值。 預設為 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.IsNullable">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; must serialize a member that is set to &lt;see langword=&quot;null&quot; /&gt; as an empty tag with the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute set to &lt;see langword=&quot;true&quot; /&gt;.">取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必須將設為 <see langword="null" /> 的成員序列化為 <see langword="xsi:nil" /> 屬性設為 <see langword="true" /> 的空標記。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生 <see langword="true" /> 屬性，則為 <see langword="xsi:nil" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Namespace">
      <summary vsli:raw="Gets or sets the namespace assigned to the XML element that results when the class is serialized.">取得或設定指派給類別序列化時所產生之 XML 項目的命名空間。</summary>
      <returns vsli:raw="The namespace of the XML element.">XML 項目的命名空間。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Order">
      <summary vsli:raw="Gets or sets the explicit order in which the elements are serialized or deserialized.">取得或設定項目序列化或還原序列化的明確順序。</summary>
      <returns vsli:raw="The order of the code generation.">程式碼產生的順序。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttribute.Type">
      <summary vsli:raw="Gets or sets the object type used to represent the XML element.">取得或設定用來表示 XML 項目的物件類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the member.">成員的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlEnumAttribute">
      <summary vsli:raw="Controls how the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes an enumeration member.">控制 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化列舉型別 (Enumeration) 成員的方式。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlEnumAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlEnumAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlEnumAttribute&quot; /&gt; class, and specifies the XML value that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates or recognizes (when it serializes or deserializes the enumeration, respectively).">初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> 類別的新執行個體，並指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 分別在序列化或還原序列化列舉型別時所產生或識別的 XML 值。</summary>
      <param name="name" vsli:raw="The overriding name of the enumeration member.">列舉型別成員的覆寫名稱。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlEnumAttribute.Name">
      <summary vsli:raw="Gets or sets the value generated in an XML-document instance when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes an enumeration, or the value recognized when it deserializes the enumeration member.">取得或設定當 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化列舉型別時，在 XML 文件執行個體所產生的值，或是當它還原序列化列舉型別成員時所識別的值。</summary>
      <returns vsli:raw="The value generated in an XML-document instance when the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; serializes the enumeration, or the value recognized when it is deserializes the enumeration member.">當 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 序列化列舉型別時，在 XML 文件執行個體中所產生的值，或是當它還原序列化列舉型別成員時所識別的值。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlIgnoreAttribute">
      <summary vsli:raw="Instructs the &lt;see cref=&quot;M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; not to serialize the public field or public read/write property value.">表示 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 的 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 方法不要序列化公用欄位或公用讀取/寫入屬性值。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlIgnoreAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlIgnoreAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute">
      <summary vsli:raw="Specifies that the target property, parameter, return value, or class member contains prefixes associated with namespaces that are used within an XML document.">指定目標屬性、參數、傳回值或類別成員包含在 XML 文件中使用之命名空間關聯的前置詞。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlRootAttribute">
      <summary vsli:raw="Controls XML serialization of the attribute target as an XML root element.">控制做為 XML 根項目之屬性目標的 XML 序列化。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlRootAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlRootAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlRootAttribute&quot; /&gt; class and specifies the name of the XML root element.">初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> 類別的新執行個體，並指定 XML 根項目的名稱。</summary>
      <param name="elementName" vsli:raw="The name of the XML root element.">XML 根項目的名稱。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.DataType">
      <summary vsli:raw="Gets or sets the XSD data type of the XML root element.">取得或設定 XML 根項目的 XSD 資料類型。</summary>
      <returns vsli:raw="An XSD (XML Schema Document) data type.">XSD (XML 架構檔) 資料類型。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.ElementName">
      <summary vsli:raw="Gets or sets the name of the XML element that is generated and recognized by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; class's &lt;see cref=&quot;M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)&quot; /&gt; and &lt;see cref=&quot;M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)&quot; /&gt; methods, respectively.">取得或設定分別由 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 類別的 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" /> 和 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" /> 方法所產生和辨識的 XML 項目。</summary>
      <returns vsli:raw="The name of the XML root element that is generated and recognized in an XML-document instance. The default is the name of the serialized class.">在 XML 文件執行個體中所產生或辨識的 XML 根項目名稱。 預設值為序列類別的名稱。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.IsNullable">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; must serialize a member that is set to &lt;see langword=&quot;null&quot; /&gt; into the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute set to &lt;see langword=&quot;true&quot; /&gt;.">取得或設定值，指出 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必須將設為 <see langword="null" /> 的成員序列化成設為 <see langword="true" /> 的 <see langword="xsi:nil" /> 屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; generates the &lt;see langword=&quot;xsi:nil&quot; /&gt; attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 產生 <see langword="true" /> 屬性，則為 <see langword="xsi:nil" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlRootAttribute.Namespace">
      <summary vsli:raw="Gets or sets the namespace for the XML root element.">取得或設定 XML 根項目的命名空間。</summary>
      <returns vsli:raw="The namespace for the XML element.">XML 根項目的命名空間。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSchemaProviderAttribute">
      <summary vsli:raw="When applied to a type, stores the name of a static method of the type that returns an XML schema and a &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; (or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for anonymous types) that controls the serialization of the type.">套用至類型時，儲存傳回 XML 結構描述類型的靜態方法名稱，以及控制類型序列化的 <see cref="T:System.Xml.XmlQualifiedName" /> (匿名類型則為 <see cref="T:System.Xml.Schema.XmlSchemaType" />)。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSchemaProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSchemaProviderAttribute&quot; /&gt; class, taking the name of the static method that supplies the type's XML schema.">採用提供類型之 XML 結構描述的靜態方法名稱，初始化 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> 類別的新執行個體。</summary>
      <param name="methodName" vsli:raw="The name of the static method that must be implemented.">必須實作的靜態方法名稱。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.IsAny">
      <summary vsli:raw="Gets or sets a value that determines whether the target class is a wildcard, or that the schema for the class has contains only an &lt;see langword=&quot;xs:any&quot; /&gt; element.">取得或設定值，這個值可判斷目標類別是萬用字元，或該類別的結構描述僅包含 <see langword="xs:any" /> 項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if the class is a wildcard, or if the schema contains only the &lt;see langword=&quot;xs:any&quot; /&gt; element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果類別是萬用字元，則為 <see langword="true" />；如果結構描述僅包含 <see langword="xs:any" /> 項目，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSchemaProviderAttribute.MethodName">
      <summary vsli:raw="Gets the name of the static method that supplies the type's XML schema and the name of its XML Schema data type.">取得靜態方法的名稱，這個名稱會提供類型的 XML 結構描述及其 XML 結構描述資料類型的名稱。</summary>
      <returns vsli:raw="The name of the method that is invoked by the XML infrastructure to return an XML schema.">由 XML 基礎結構叫用以傳回 XML 結構描述之方法的名稱。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary vsli:raw="Contains the XML namespaces and prefixes that the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; uses to generate qualified names in an XML-document instance.">將 XML 命名空間 (Namespace) 和 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 用來產生限定名稱的前置詞包含在 XML 文件執行個體中。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; class, using the specified instance of &lt;see langword=&quot;XmlSerializerNamespaces&quot; /&gt; containing the collection of prefix and namespace pairs.">使用包含前置詞和命名空間配對集合之 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 的指定執行個體，初始化 <see langword="XmlSerializerNamespaces" /> 類別的新執行個體。</summary>
      <param name="namespaces" vsli:raw="An instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; containing the namespace and prefix pairs.">
        <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 的執行個體，包含命名空間和前置詞配對。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 類別的新執行個體。</summary>
      <param name="namespaces" vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件的陣列。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary vsli:raw="Adds a prefix and namespace pair to an &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; object.">將前置詞和命名空間配對加入 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 物件。</summary>
      <param name="prefix" vsli:raw="The prefix associated with an XML namespace.">與 XML 命名空間相關的前置詞。</param>
      <param name="ns" vsli:raw="An XML namespace.">XML 命名空間。</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary vsli:raw="Gets the array of prefix and namespace pairs in an &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializerNamespaces&quot; /&gt; object.">取得 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> 物件中前置詞和命名空間配對的陣列。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects that are used as qualified names in an XML document.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件的陣列，在 XML 文件中用作限定名稱。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary vsli:raw="Gets the number of prefix and namespace pairs in the collection.">取得集合中前置詞和命名空間配對的數目。</summary>
      <returns vsli:raw="The number of prefix and namespace pairs in the collection.">集合中前置詞和命名空間配對數目。</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTextAttribute">
      <summary vsli:raw="Indicates to the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt; that the member must be treated as XML text when the class that contains it is serialized or deserialized.">表示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在序列化或還原序列化包含它的類別之後，應該將成員視為 XML 文字。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlTextAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlTextAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Serialization.XmlTextAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> 類別的新執行個體。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the member to be serialized.">要序列化之成員的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.DataType">
      <summary vsli:raw="Gets or sets the XML Schema definition language (XSD) data type of the text generated by the &lt;see cref=&quot;T:System.Xml.Serialization.XmlSerializer&quot; /&gt;.">取得或設定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 所產生之文字的XML 結構描述定義語言 (XSD) 資料型別。</summary>
      <exception cref="T:System.Exception" vsli:raw="The XML Schema data type you have specified cannot be mapped to the .NET data type.">您指定的 XML 結構描述資料型別無法對應至 .NET 資料型別。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The XML Schema data type you have specified is invalid for the property and cannot be converted to the member type.">您指定的 XML 結構描述資料型別對於該屬性無效，且無法轉換為成員型別。</exception>
      <returns vsli:raw="An XML Schema (XSD) data type."> (XSD) 資料類型的 XML 架構。</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTextAttribute.Type">
      <summary vsli:raw="Gets or sets the type of the member.">取得或設定成員的類型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the member.">成員的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary vsli:raw="Specifies the type of validation to perform.">指定要執行的驗證類型。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary vsli:raw="Validates if DTD or schema information is found. &#xA;&#xA;Starting with .NET Framework 2.0, this field is obsolete. It applies only to the obsolete &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; class.">驗證是否找到 DTD 或結構描述資訊。 

從 .NET Framework 2.0 開始，此欄位已淘汰。 它只適用於淘汰的 <see cref="T:System.Xml.XmlValidatingReader" /> 類別。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary vsli:raw="Validates according to the DTD.">根據 DTD 驗證。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary vsli:raw="No validation is performed, and no validation errors are thrown. This setting creates an XML 1.0 compliant non-validating parser.&#xA;        &#xA;Calls to &lt;see cref=&quot;M:System.Xml.XmlReader.ResolveEntity&quot; /&gt; report default attributes and resolve general entities. The DOCTYPE is not used for validation purposes.">不執行任何驗證，也不擲回任何驗證錯誤。 這個設定建立 XML 1.0 相容的非驗證剖析器。
        
呼叫 <see cref="M:System.Xml.XmlReader.ResolveEntity" /> 以報告預設屬性，並解析一般實體。 DOCTYPE 不作為驗證用途。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary vsli:raw="Validate according to XML Schema definition language (XSD) schemas, including inline XML Schemas. XML Schemas are associated with namespace URIs either by using the &lt;see langword=&quot;schemaLocation&quot; /&gt; attribute or the provided &lt;see langword=&quot;Schemas&quot; /&gt; property.">根據 XML 結構描述定義語言 (XSD) 結構描述進行驗證，包括內嵌 XML 結構描述。 藉由使用 <see langword="schemaLocation" /> 屬性 (Attribute) 或提供的 <see langword="Schemas" /> 屬性 (Property)，使 XML 結構描述與命名空間 URI 產生關聯。</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary vsli:raw="Validate according to XML-Data Reduced (XDR) schemas, including inline XDR schemas. XDR schemas are recognized using the &lt;see langword=&quot;x-schema&quot; /&gt; namespace prefix or the &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.Schemas&quot; /&gt; property.&#xA;        &#xA;Starting with .NET Framework 2.0, this field is obsolete. It applies only to the obsolete &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; class.">根據 XML-Data Reduced (XDR) 結構描述進行驗證，包括內嵌 XML 結構描述。 XDR 結構描述是使用 <see langword="x-schema" /> 命名空間前置詞或 <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> 屬性辨識。
        
從 .NET Framework 2.0 開始，此欄位已淘汰。 它只適用於淘汰的 <see cref="T:System.Xml.XmlValidatingReader" /> 類別。</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary vsli:raw="Specifies how white space is handled.">指定如何處理泛空白字元 (White Space)。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary vsli:raw="Return &lt;see langword=&quot;Whitespace&quot; /&gt; and &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes. This is the default.">傳回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 節點。 此為預設值。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary vsli:raw="Return no &lt;see langword=&quot;Whitespace&quot; /&gt; and no &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes.">不傳回 <see langword="Whitespace" /> 和 <see langword="SignificantWhitespace" /> 節點。</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary vsli:raw="Return &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes only.">只傳回 <see langword="SignificantWhitespace" /> 節點。</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary vsli:raw="Specifies the state of the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">指定 <see cref="T:System.Xml.XmlWriter" /> 的狀態。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary vsli:raw="Indicates that an attribute value is being written.">指出正在寫入屬性值。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method has been called.">指出已呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary vsli:raw="Indicates that element content is being written.">指出正在寫入項目內容。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary vsli:raw="Indicates that an element start tag is being written.">指出正在寫入項目開始標記。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary vsli:raw="An exception has been thrown, which has left the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; in an invalid state. You can call the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method to put the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; in the &lt;see cref=&quot;F:System.Xml.WriteState.Closed&quot; /&gt; state. Any other &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method calls results in an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt;.&#xA;&#xA;This field was added in .NET Framework 2.0.">已經擲回例外狀況，<see cref="T:System.Xml.XmlWriter" /> 因此處於無效狀態。 您可以呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法，將 <see cref="T:System.Xml.XmlWriter" /> 置於 <see cref="F:System.Xml.WriteState.Closed" /> 狀態下。 任何其他 <see cref="T:System.Xml.XmlWriter" /> 方法呼叫會導致 <see cref="T:System.InvalidOperationException" />。

此欄位已新增在 .NET Framework 2.0 中。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary vsli:raw="Indicates that the prolog is being written.">指出正在寫入初構 (Prolog)。</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary vsli:raw="Indicates that a Write method has not yet been called.">指出尚未呼叫 Write 方法。</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary vsli:raw="Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.">代表屬性。 該屬性的有效和預設值會在文件類型定義 (DTD) 或結構描述中定義。</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlAttribute" /> 類別的新執行個體。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace uniform resource identifier (URI).">命名空間的統一資源識別元 (URI)。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the end of the list of child nodes, of this node.">將指定的節點加入這個節點之子節點清單的結尾。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to add.">要加入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; added.">所加入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />，若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns vsli:raw="The duplicate node.">重複的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately after the specified reference node.">在指定的參考節點之後，插入指定的節點。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to insert.">要插入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that is the reference node. The &lt;paramref name=&quot;newChild&quot; /&gt; is placed after the &lt;paramref name=&quot;refChild&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> 為參考節點。 <paramref name="newChild" /> 會置於 <paramref name="refChild" /> 之後。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
<paramref name="refChild" /> 不是這個節點的子節點。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; inserted.">所插入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately before the specified reference node.">在指定的參考節點之前，插入指定的節點。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to insert.">要插入的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="refChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that is the reference node. The &lt;paramref name=&quot;newChild&quot; /&gt; is placed before this node.">
        <see cref="T:System.Xml.XmlNode" /> 為參考節點。 <paramref name="newChild" /> 會置於這個節點之前。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">目前這種型別的節點不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
<paramref name="refChild" /> 不是這個節點的子節點。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; inserted.">所插入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the beginning of the list of child nodes for this node.">將指定的節點加入這個節點之子節點清單的開頭。</summary>
      <param name="newChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to add. If it is an &lt;see cref=&quot;T:System.Xml.XmlDocumentFragment&quot; /&gt;, the entire contents of the document fragment are moved into the child list of this node.">要加入的 <see cref="T:System.Xml.XmlNode" />。 如果是 <see cref="T:System.Xml.XmlDocumentFragment" />，則文件片段的整個內容都會移入這個節點的子節點清單中。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; added.">所加入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary vsli:raw="Removes the specified child node.">移除指定的子節點。</summary>
      <param name="oldChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to remove.">要移除的 <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node. Or this node is read-only.">
        <paramref name="oldChild" /> 不是這個節點的子節點。 或者這個節點是唯讀的。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; removed.">所移除的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Replaces the child node specified with the new child node specified.">用指定的新子節點取代指定的子節點。</summary>
      <param name="newChild" vsli:raw="The new child &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">新的子 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldChild" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; to replace.">要取代的 <see cref="T:System.Xml.XmlNode" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.  &#xA;  &#xA; The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
這個節點是唯讀的。  
  
<paramref name="oldChild" /> 不是這個節點的子節點。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; replaced.">所取代的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary vsli:raw="Gets the base Uniform Resource Identifier (URI) of the node.">取得節點的基底統一資源識別元 (URI)。</summary>
      <returns vsli:raw="The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, &lt;see langword=&quot;BaseURI&quot; /&gt; returns String.Empty.">節點載入的位置；如果節點沒有基底 URI，則為 String.Empty。 屬性節點的基底 URI 與其擁有人項目的相同。 如果屬性節點沒有擁有人項目，<see langword="BaseURI" /> 會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary vsli:raw="Sets the concatenated values of the node and all its children.">設定節點的串連值和其所有的子節點。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the &lt;see cref=&quot;P:System.Xml.XmlAttribute.Value&quot; /&gt; property.">節點的串連值和其所有的子節點。 在屬性節點方面，這個屬性的功能與 <see cref="P:System.Xml.XmlAttribute.Value" /> 屬性相同。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary vsli:raw="Sets the value of the attribute.">設定屬性值。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">未正確設定這個屬性之語式時所指定的 XML。</exception>
      <returns vsli:raw="The attribute value.">屬性值。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="The name of the attribute node with the prefix removed. In the following example &amp;lt;book bk:genre= 'novel'&amp;gt;, the &lt;see langword=&quot;LocalName&quot; /&gt; of the attribute is &lt;see langword=&quot;genre&quot; /&gt;.">已移除前置詞的屬性節點名稱。 在下列範例 &lt; book bk：內容類型 = ' 新穎 ' 中 &gt; ， <see langword="LocalName" /> 屬性的是 <see langword="genre" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="The qualified name of the attribute node.">屬性節點的限定名稱 (Qualified Name)。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI of this node.">取得這個節點的命名空間 URI。</summary>
      <returns vsli:raw="The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.">這個節點的命名空間 URI。 如果屬性並未明確指定命名空間，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="The node type for &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes is XmlNodeType.Attribute.">
        <see langword="XmlAttribute" /> 節點的節點型別是 XmlNodeType.Attribute。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns vsli:raw="An XML document to which this node belongs.">這個節點所屬的 XML 文件。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; to which the attribute belongs.">取得屬性所屬的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlElement&quot; /&gt; that the attribute belongs to or &lt;see langword=&quot;null&quot; /&gt; if this attribute is not part of an &lt;see langword=&quot;XmlElement&quot; /&gt;.">屬性所屬的 <see langword="XmlElement" />；如果這個屬性不是 <see langword="null" /> 的一部分，則為 <see langword="XmlElement" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary vsli:raw="Gets the parent of this node. For &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes, this property always returns &lt;see langword=&quot;null&quot; /&gt;.">取得這個節點的父代 (Parent)。 對於 <see langword="XmlAttribute" /> 節點，這個屬性永遠傳回 <see langword="null" />。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes, this property always returns &lt;see langword=&quot;null&quot; /&gt;.">對於 <see langword="XmlAttribute" /> 節點，這個屬性永遠傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary vsli:raw="Gets or sets the namespace prefix of this node.">取得或設定這個節點的命名空間前置詞。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">這個節點是唯讀的。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified prefix contains an invalid character.  &#xA;  &#xA; The specified prefix is malformed.  &#xA;  &#xA; The namespaceURI of this node is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; The specified prefix is &quot;xml&quot;, and the namespaceURI of this node is different from &quot;http://www.w3.org/XML/1998/namespace&quot;.  &#xA;  &#xA; This node is an attribute, the specified prefix is &quot;xmlns&quot;, and the namespaceURI of this node is different from &quot;http://www.w3.org/2000/xmlns/&quot;.  &#xA;  &#xA; This node is an attribute, and the qualifiedName of this node is &quot;xmlns&quot; [Namespaces].">指定的前置詞包含無效的字元。  
  
指定的前置詞格式不正確。  
  
此節點的 namespaceURI 為 <see langword="null" />。  
  
指定的前置詞為 "xml"，且此節點的 namespaceURI 與 "http://www.w3.org/XML/1998/namespace" \(英文\) 的不同。  
  
此節點是一個屬性，指定的前置詞是 "xmlns"，且此節點的 namespaceURI 與 "http://www.w3.org/2000/xmlns/" \(英文\) 的不同。  
  
這個節點是一個屬性，其 qualifiedName 為 "xmlns" [Namespaces]。</exception>
      <returns vsli:raw="The namespace prefix of this node. If there is no prefix, this property returns String.Empty.">這個節點的命名空間前置詞。 如果沒有前置詞，則這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary vsli:raw="Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.">取得後結構描述驗證資訊集，在結構描述驗證之後已將其指派給這個節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; containing the post-schema-validation-infoset of this node.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />，包含這個節點的後結構描述驗證資訊集。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary vsli:raw="Gets a value indicating whether the attribute value was explicitly set.">取得值，表示是否明確設定屬性值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this attribute was explicitly given a value in the original instance document; otherwise, &lt;see langword=&quot;false&quot; /&gt;. A value of &lt;see langword=&quot;false&quot; /&gt; indicates that the value of the attribute came from the DTD.">如果在原始執行個體文件中明確指定了這個屬性的值，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="false" /> 值指示屬性的值是來自 DTD。</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only and a set operation is called.">節點為唯讀，並會呼叫設定作業。</exception>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. For &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes, this property is the value of attribute.">傳回值需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 至於 <see langword="XmlAttribute" /> 節點，這個屬性 (Property) 是屬性 (Attribute) 的值。</returns>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary vsli:raw="Represents a collection of attributes that can be accessed by name or index.">代表可用名稱或索引存取的屬性集合。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute as the last node in the collection.">插入指定的屬性做為集合的最後一個節點。</summary>
      <param name="node" vsli:raw="The attribute to insert.">要插入的屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; was created from a document different from the one that created this collection.">
        <paramref name="node" /> 由不同於建立這個集合的另一個文件所建立。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to append to the collection.">
        <see langword="XmlAttribute" />，要附加至集合。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary vsli:raw="Copies all the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; objects from this collection into the given array.">從這個集合中複製所有 <see cref="T:System.Xml.XmlAttribute" /> 物件至指定的陣列中。</summary>
      <param name="array" vsli:raw="The array that is the destination of the objects copied from this collection.">陣列，是從這個集合所複製的物件的目的端。</param>
      <param name="index" vsli:raw="The index in the array where copying begins.">在複製開始的所在陣列中的索引。</param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute immediately after the specified reference attribute.">在指定的參考屬性之後，立即插入指定的屬性。</summary>
      <param name="newNode" vsli:raw="The attribute to insert.">要插入的屬性。</param>
      <param name="refNode" vsli:raw="The reference attribute. &lt;paramref name=&quot;newNode&quot; /&gt; is placed after the &lt;paramref name=&quot;refNode&quot; /&gt;.">參考屬性。 <paramref name="newNode" /> 會置於 <paramref name="refNode" /> 之後。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newNode&quot; /&gt; was created from a document different from the one that created this collection. Or the &lt;paramref name=&quot;refNode&quot; /&gt; is not a member of this collection.">
        <paramref name="newNode" /> 由不同於建立這個集合的另一個文件所建立。 或者 <paramref name="refNode" /> 並非這個集合的成員。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to insert into the collection.">要插入至集合的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute immediately before the specified reference attribute.">在指定的參考屬性之前，立即插入指定的屬性。</summary>
      <param name="newNode" vsli:raw="The attribute to insert.">要插入的屬性。</param>
      <param name="refNode" vsli:raw="The reference attribute. &lt;paramref name=&quot;newNode&quot; /&gt; is placed before the &lt;paramref name=&quot;refNode&quot; /&gt;.">參考屬性。 <paramref name="newNode" /> 會置於 <paramref name="refNode" /> 之前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newNode&quot; /&gt; was created from a document different from the one that created this collection. Or the &lt;paramref name=&quot;refNode&quot; /&gt; is not a member of this collection.">
        <paramref name="newNode" /> 由不同於建立這個集合的另一個文件所建立。 或者 <paramref name="refNode" /> 並非這個集合的成員。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to insert into the collection.">要插入至集合的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary vsli:raw="Inserts the specified attribute as the first node in the collection.">插入指定的屬性做為集合的第一個節點。</summary>
      <param name="node" vsli:raw="The attribute to insert.">要插入的屬性。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; added to the collection.">要加入至集合中的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary vsli:raw="Removes the specified attribute from the collection.">從集合中移除指定的屬性。</summary>
      <param name="node" vsli:raw="The attribute to remove.">要移除的屬性。</param>
      <returns vsli:raw="The node removed or &lt;see langword=&quot;null&quot; /&gt; if it is not found in the collection.">這個節點將會移除，如果集合中找不到這個節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary vsli:raw="Removes all attributes from the collection.">從集合移除所有的屬性。</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the attribute corresponding to the specified index from the collection.">從集合中移除對應指定索引的屬性。</summary>
      <param name="i" vsli:raw="The index of the node to remove. The first node has index 0.">要移除之節點的索引。 第一個節點的索引為 0。</param>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt; if there is no attribute at the specified index.">如果在指定的索引處並無屬性，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; using its &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property.">使用其 <see cref="T:System.Xml.XmlNode" /> 屬性新增 <see cref="P:System.Xml.XmlNode.Name" />。</summary>
      <param name="node" vsli:raw="An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection.">儲存在這個集合中的屬性節點。 這個節點稍後可用節點名稱來存取。 如果集合中已經有這個名稱的節點，它將會被新的節點取代；否則，這個節點就會附加在集合的結尾。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; was created from a different &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; than the one that created this collection.  &#xA;  &#xA; This &lt;see langword=&quot;XmlAttributeCollection&quot; /&gt; is read-only.">
        <paramref name="node" /> 由不同於建立這個集合的另一個 <see cref="T:System.Xml.XmlDocument" /> 所建立。  
  
這個 <see langword="XmlAttributeCollection" /> 是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; that is already an attribute of another &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; object. To re-use attributes in other elements, you must clone the &lt;see langword=&quot;XmlAttribute&quot; /&gt; objects you want to re-use.">
        <paramref name="node" /> 是已經成為另一個 <see cref="T:System.Xml.XmlAttribute" /> 物件屬性的 <see cref="T:System.Xml.XmlElement" />。 若要重複使用其他項目中的屬性，您必須複製 (Clone) 想要重複使用的 <see langword="XmlAttribute" /> 物件。</exception>
      <returns vsli:raw="If the &lt;paramref name=&quot;node&quot; /&gt; replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.">如果 <paramref name="node" /> 取代同名的現有節點，則傳回舊節點；否則傳回所加入的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />。</summary>
      <param name="array" vsli:raw="The array that is the destination of the objects copied from this collection.">陣列，是從這個集合所複製的物件的目的端。</param>
      <param name="index" vsli:raw="The index in the array where copying begins.">在複製開始的所在陣列中的索引。</param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index.">取得具有指定索引的屬性。</summary>
      <param name="i" vsli:raw="The index of the attribute.">屬性的索引。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The index being passed in is out of range.">傳入的索引超出範圍。</exception>
      <returns vsli:raw="The attribute at the specified index.">位於指定索引位置的屬性。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary vsli:raw="Gets the attribute with the specified name.">取得具有指定名稱的屬性。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="The attribute with the specified name. If the attribute does not exist, this property returns &lt;see langword=&quot;null&quot; /&gt;.">具有指定名稱的屬性。 如果屬性 (attribute) 不存在，這個屬性 (property) 會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary vsli:raw="Gets the attribute with the specified local name and namespace Uniform Resource Identifier (URI).">取得指定的區域名稱和命名空間統一資源識別元 (URI) 之屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="The attribute with the specified local name and namespace URI. If the attribute does not exist, this property returns &lt;see langword=&quot;null&quot; /&gt;.">具有指定區功能變數名稱稱和命名空間 URI 的屬性。 如果屬性 (attribute) 不存在，這個屬性 (property) 會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count" />。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;int&quot; /&gt; that contains the count of the attributes.">
        <see langword="int" />，其中包含屬性的計數。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is synchronized.">
        <see langword="true" /> 如果集合已同步處理，則為。</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that is the root of the collection.">
        <see cref="T:System.Object" />，其為集合的根。</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary vsli:raw="Represents a CDATA section.">表示 CDATA 區段。</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlCDataSection&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlCDataSection" /> 類別的新執行個體。</summary>
      <param name="data" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains character data.">包含字元資料的 <see cref="T:System.String" />。</param>
      <param name="doc" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlDocument" /> 物件</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 因為 CDATA 節點沒有子系，所以無論參數設定為何，所複製的節點永遠會包含資料內容。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點的子系儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For CDATA nodes, the local name is &lt;see langword=&quot;#cdata-section&quot; /&gt;.">對於 CDATA 節點，其區域名稱為 <see langword="#cdata-section" />。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For CDATA nodes, the name is &lt;see langword=&quot;#cdata-section&quot; /&gt;.">對於 CDATA 節點，其名稱為 <see langword="#cdata-section" />。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="The node type. For CDATA nodes, the value is XmlNodeType.CDATA.">節點類型。 對於 CDATA 節點，其值為 XmlNodeType.CDATA。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.">表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">取得這個節點的前置文字節點。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary vsli:raw="Provides text manipulation methods that are used by several classes.">提供許多類別使用的文字操作方法。</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlCharacterData&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlCharacterData" /> 類別的新執行個體。</summary>
      <param name="data" vsli:raw="String that contains character data to be added to document.">字串，包含要加入至文件的字元資料。</param>
      <param name="doc" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to contain character data.">要包含字元資料的 <see cref="T:System.Xml.XmlDocument" />。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary vsli:raw="Appends the specified string to the end of the character data of the node.">將指定的字串附加至節點字元資料的結尾。</summary>
      <param name="strData" vsli:raw="The string to insert into the existing string.">要插入現有字串中的字串。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of characters from the node.">從節點移除字元範圍。</summary>
      <param name="offset" vsli:raw="The position within the string to start deleting.">字串中要開始刪除的位置。</param>
      <param name="count" vsli:raw="The number of characters to delete.">要刪除的字元數。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary vsli:raw="Inserts the specified string at the specified character offset.">在指定的字元位移處插入指定的字串。</summary>
      <param name="offset" vsli:raw="The position within the string to insert the supplied string data.">字串中要插入提供的字串資料的位置。</param>
      <param name="strData" vsli:raw="The string data that is to be inserted into the existing string.">要插入現有字串中的字串資料。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary vsli:raw="Replaces the specified number of characters starting at the specified offset with the specified string.">從指定的位移處開始，以指定的字串取代指定的字元數。</summary>
      <param name="offset" vsli:raw="The position within the string to start replacing.">字串中要開始取代的位置。</param>
      <param name="count" vsli:raw="The number of characters to replace.">要取代的字元數。</param>
      <param name="strData" vsli:raw="The new data that replaces the old string data.">取代舊字串資料的新資料。</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary vsli:raw="Retrieves a substring of the full string from the specified range.">從指定的範圍擷取完整字串中的一個子字串。</summary>
      <param name="offset" vsli:raw="The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data.">字串中要開始擷取的位置。 零位移指示起點就在資料的開頭。</param>
      <param name="count" vsli:raw="The number of characters to retrieve.">要擷取的字元數。</param>
      <returns vsli:raw="The substring corresponding to the specified range.">對應至指定範圍的子字串。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary vsli:raw="Contains the data of the node.">包含節點的資料。</summary>
      <returns vsli:raw="The data of the node.">節點的資料。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all the children of the node.">取得或設定節點和節點所有子系的串連值。</summary>
      <returns vsli:raw="The concatenated values of the node and all the children of the node.">節點和節點所有子系的串連值。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary vsli:raw="Gets the length of the data, in characters.">取得資料的長度，以字元為單位。</summary>
      <returns vsli:raw="The length, in characters, of the string in the &lt;see cref=&quot;P:System.Xml.XmlCharacterData.Data&quot; /&gt; property. The length may be zero; that is, CharacterData nodes can be empty.">
        <see cref="P:System.Xml.XmlCharacterData.Data" /> 屬性中字串的長度 (以字元為單位)。 長度可能是零，也就是 CharacterData 節點可能是空的。</returns>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Node is read-only.">節點是唯讀的。</exception>
      <returns vsli:raw="The value of the node.">節點的值。</returns>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary vsli:raw="Represents the content of an XML comment.">代表 XML 註解的內容。</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlComment&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlComment" /> 類別的新執行個體。</summary>
      <param name="comment" vsli:raw="The content of the comment element.">註解項目的內容。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 因為註解節點沒有子系，所以無論參數設定為何，所複製的節點永遠會包含文字內容。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. Because comment nodes do not have children, this method has no effect.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 因為註解節點沒有子系，所以這個方法不會有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For comment nodes, the value is &lt;see langword=&quot;#comment&quot; /&gt;.">對於註解節點，其值為 <see langword="#comment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For comment nodes, the value is &lt;see langword=&quot;#comment&quot; /&gt;.">對於註解節點，其值為 <see langword="#comment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For comment nodes, the value is XmlNodeType.Comment.">對於註解節點，其值為 XmlNodeType.Comment。</returns>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary vsli:raw="Encodes and decodes XML names, and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types, the values returned are locale-independent.">編碼和解碼 XML 名稱，並且提供在 Common Language Runtime 類型和 XML 結構描述定義語言 (XSD) 類型之間轉換的方法。 轉換資料類型時，傳回的值與地區設定無關。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlConvert&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlConvert" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary vsli:raw="Decodes a name. This method does the reverse of the &lt;see cref=&quot;M:System.Xml.XmlConvert.EncodeName(System.String)&quot; /&gt; and &lt;see cref=&quot;M:System.Xml.XmlConvert.EncodeLocalName(System.String)&quot; /&gt; methods.">將名稱解碼。 這個方法反向執行 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> 和 <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> 方法。</summary>
      <param name="name" vsli:raw="The name to be transformed.">要轉換的名稱。</param>
      <returns vsli:raw="The decoded name.">解碼的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary vsli:raw="Converts the name to a valid XML local name.">將名稱轉換為有效的 XML 區域名稱。</summary>
      <param name="name" vsli:raw="The name to be encoded.">要編碼的名稱。</param>
      <returns vsli:raw="The encoded name.">編碼的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary vsli:raw="Converts the name to a valid XML name.">將名稱轉換為有效的 XML 名稱。</summary>
      <param name="name" vsli:raw="A name to be translated.">要轉譯的名稱。</param>
      <returns vsli:raw="The name with any invalid characters replaced by an escape string.">具有以逸出字元取代之任何無效字元的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary vsli:raw="Verifies the name is valid according to the XML specification.">根據 XML 規格驗證確定名稱有效。</summary>
      <param name="name" vsli:raw="The name to be encoded.">要編碼的名稱。</param>
      <returns vsli:raw="The encoded name.">編碼的名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary vsli:raw="Checks whether the passed-in character is a valid non-colon character type.">檢查傳入的字元是否為有效的非冒號字元型別。</summary>
      <param name="ch" vsli:raw="The character to verify as a non-colon character.">要做為非冒號字元來驗證的字元。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character is a valid non-colon character type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字元是有效的非冒號字元型別，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary vsli:raw="Returns the passed-in character instance if the character in the argument is a valid public id character, otherwise &lt;see langword=&quot;null&quot; /&gt;.">如果引數中的字元是有效的公用 ID 字元，則會傳回傳入的字元執行個體，否則傳回 <see langword="null" />。</summary>
      <param name="ch" vsli:raw="&lt;see cref=&quot;T:System.Char&quot; /&gt; object to validate.">要驗證的 <see cref="T:System.Char" /> 物件。</param>
      <returns vsli:raw="The passed-in character if the character is a valid public id character, otherwise &lt;see langword=&quot;null&quot; /&gt;.">如果字元是有效的公用 ID 字元，則為傳入的字元；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary vsli:raw="Checks if the passed-in character is a valid Start Name Character type.">檢查傳入的字元是否為有效的開頭名稱字元型別。</summary>
      <param name="ch" vsli:raw="The character to validate.">要驗證的字元。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character is a valid Start Name Character type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果字元是有效的開頭名稱字元型別則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary vsli:raw="Checks if the passed-in character is a valid XML whitespace character.">檢查傳入的字元是否為有效的 XML 空白字元。</summary>
      <param name="ch" vsli:raw="The character to validate.">要驗證的字元。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the passed in character is a valid XML whitespace character; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果傳入的字元是有效的 XML 空白字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary vsli:raw="Checks if the passed-in character is a valid XML character.">檢查傳入的字元是否為有效的 XML 字元。</summary>
      <param name="ch" vsli:raw="The character to validate.">要驗證的字元。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the passed in character is a valid XML character; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果傳入的字元是有效的 XML 字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary vsli:raw="Checks if the passed-in surrogate pair of characters is a valid XML character.">檢查傳入的字元 Surrogate 字組是否為有效的 XML 字元。</summary>
      <param name="lowChar" vsli:raw="The surrogate character to validate.">要驗證的 Surrogate 字元。</param>
      <param name="highChar" vsli:raw="The surrogate character to validate.">要驗證的 Surrogate 字元。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the passed in surrogate pair of characters is a valid XML character; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果傳入的 Surrogate 字元組是有效的 XML 字元，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Boolean" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; does not represent a &lt;see langword=&quot;Boolean&quot; /&gt; value.">
        <paramref name="s" /> 不表示為 <see langword="Boolean" /> 值。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;Boolean&quot; /&gt; value, that is, &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="Boolean" /> 值，為 <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Byte&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Byte" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Byte.MinValue&quot;&gt;Byte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Byte.MaxValue&quot;&gt;Byte.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Byte.MinValue" /> 或大於 <see cref="F:System.Byte.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;Byte&quot; /&gt; equivalent of the string.">字串的對等 <see langword="Byte" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Char&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Char" />。</summary>
      <param name="s" vsli:raw="The string containing a single character to convert.">字串，含有要轉換的單一字元。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of the &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 參數的值為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter contains more than one character.">
        <paramref name="s" /> 含有一個以上字元。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;Char&quot; /&gt; representing the single character.">
        <see langword="Char" />，表示單一字元。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is an empty string or is not in the correct format.">
        <paramref name="s" /> 是空字串或是格式不正確。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;DateTime&quot; /&gt; equivalent of the string.">字串的對等 <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <param name="format" vsli:raw="The format structure to apply to the converted &lt;see langword=&quot;DateTime&quot; /&gt;. Valid formats include &quot;yyyy-MM-ddTHH:mm:sszzzzzz&quot; and its subsets. The string is validated against this format.">要套用至轉換後 <see langword="DateTime" /> 的格式結構。 有效格式包含 "yyyy-MM-ddTHH:mm:sszzzzzz" 及其子集。 字串會對照這個格式來驗證。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; or &lt;paramref name=&quot;format&quot; /&gt; is String.Empty  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;s&quot; /&gt; does not contain a date and time that corresponds to &lt;paramref name=&quot;format&quot; /&gt;.">
        <paramref name="s" /> 或 <paramref name="format" /> 是 String.Empty。 
-或- 
 <paramref name="s" /> 不包含對應至 <paramref name="format" /> 的日期和時間。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;DateTime&quot; /&gt; equivalent of the string.">字串的對等 <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.DateTime" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <param name="formats" vsli:raw="An array containing the format structures to apply to the converted &lt;see langword=&quot;DateTime&quot; /&gt;. Valid formats include &quot;yyyy-MM-ddTHH:mm:sszzzzzz&quot; and its subsets.">包含要套用至轉換後 <see langword="DateTime" /> 的格式結構的陣列。 有效格式包含 "yyyy-MM-ddTHH:mm:sszzzzzz" 及其子集。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; or an element of &lt;paramref name=&quot;formats&quot; /&gt; is String.Empty  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;s&quot; /&gt; does not contain a date and time that corresponds to any of the elements of &lt;paramref name=&quot;formats&quot; /&gt;.">
        <paramref name="s" /> 或 <paramref name="formats" /> 的項目是 String.Empty。 
-或- 
 <paramref name="s" /> 不包含對應至任何 <paramref name="formats" /> 項目的日期和時間。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;DateTime&quot; /&gt; equivalent of the string.">字串的對等 <see langword="DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlDateTimeSerializationMode&quot; /&gt; specified.">使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />，將 <see cref="T:System.String" /> 轉換為 <see cref="T:System.DateTime" />。</summary>
      <param name="s" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to convert.">要進行轉換的 <see cref="T:System.String" /> 值。</param>
      <param name="dateTimeOption" vsli:raw="One of the enumeration values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.">其中一個列舉值，可指定應將日期轉換為當地時間，或保留為國際標準時間 (UTC) (如果它是 UTC 日期)。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dateTimeOption&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dateTimeOption" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is an empty string or is not in a valid format.">
        <paramref name="s" /> 是空字串或不是使用有效的格式。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTime&quot; /&gt; equivalent of the &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.String" /> 的對等 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent.">將提供的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTimeOffset" /> 對等用法。</summary>
      <param name="s" vsli:raw="The string to convert. The string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information, see the dateTime section of the XML Schema specification.">要轉換的字串。  
  
 注意：字串必須符合 XML dateTime 類型的 W3C 建議事項 (W3C Recommendation) 子集。 如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The argument passed to this method is outside the range of allowable values. For information about allowable values, see &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">傳遞至這個方法的引數是在容許值的範圍之外。 如需有關容許值的詳細資訊，請參閱 <see cref="T:System.DateTimeOffset" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information, see the dateTime section of the XML Schema specification.">傳遞至這個方法的引數不符合 XML dateTime 型別的 W3C Recommendations 子集。 如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent of the supplied string.">所提供之字串的 <see cref="T:System.DateTimeOffset" /> 對應項。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent.">將提供的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTimeOffset" /> 對等用法。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <param name="format" vsli:raw="The format from which &lt;paramref name=&quot;s&quot; /&gt; is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..) The string &lt;paramref name=&quot;s&quot; /&gt; is validated against this format.">轉換 <paramref name="s" /> 的來源格式。 格式參數可以是 XML dateTime 型別之 W3C Recommendation 的任何子集 (如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。)字串 <paramref name="s" /> 會針對這個格式進行驗證。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; or &lt;paramref name=&quot;format&quot; /&gt; is an empty string or is not in the specified format.">
        <paramref name="s" /> 或 <paramref name="format" /> 是空字串或沒有使用指定的格式。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent of the supplied string.">所提供之字串的 <see cref="T:System.DateTimeOffset" /> 對應項。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent.">將提供的 <see cref="T:System.String" /> 轉換成 <see cref="T:System.DateTimeOffset" /> 對等用法。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <param name="formats" vsli:raw="An array of formats from which &lt;paramref name=&quot;s&quot; /&gt; can be converted. Each format in &lt;paramref name=&quot;formats&quot; /&gt; can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..) The string &lt;paramref name=&quot;s&quot; /&gt; is validated against one of these formats.">轉換 <paramref name="s" /> 之來源格式的陣列。 <paramref name="formats" /> 中的每個格式，可以是 XML dateTime 型別的 W3C Recommendation 子集 (如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。)字串 <paramref name="s" /> 會針對其中一種格式進行驗證。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; equivalent of the supplied string.">所提供之字串的 <see cref="T:System.DateTimeOffset" /> 對應項。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Decimal" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Decimal.MinValue&quot;&gt;Decimal.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Decimal.MaxValue&quot;&gt;Decimal.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Decimal.MinValue" /> 或大於 <see cref="F:System.Decimal.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;Decimal&quot; /&gt; equivalent of the string.">字串的對等 <see langword="Decimal" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Double&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Double" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Double.MinValue&quot;&gt;Double.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Double.MaxValue&quot;&gt;Double.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Double.MinValue" /> 或大於 <see cref="F:System.Double.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Double&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Guid&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Guid" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <returns vsli:raw="A &lt;see langword=&quot;Guid&quot; /&gt; equivalent of the string.">字串的對等 <see langword="Guid" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Int16&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Int16" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Int16.MinValue&quot;&gt;Int16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int16.MaxValue&quot;&gt;Int16.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int16.MinValue" /> 或大於 <see cref="F:System.Int16.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int16&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.Int16" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Int32&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Int32" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Int32.MinValue&quot;&gt;Int32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int32.MinValue" /> 或大於 <see cref="F:System.Int32.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Int64&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Int64" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Int64.MinValue&quot;&gt;Int64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Int64.MaxValue&quot;&gt;Int64.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Int64.MinValue" /> 或大於 <see cref="F:System.Int64.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int64&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.SByte&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.SByte" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.SByte.MinValue&quot;&gt;SByte.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.SByte.MaxValue&quot;&gt;SByte.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.SByte.MinValue" /> 或大於 <see cref="F:System.SByte.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="An &lt;see langword=&quot;SByte&quot; /&gt; equivalent of the string.">字串的對等 <see langword="SByte" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.Single&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.Single" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.Single.MinValue&quot;&gt;Single.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.Single.MaxValue&quot;&gt;Single.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.Single.MinValue" /> 或大於 <see cref="F:System.Single.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Single&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.Single" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Boolean" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Boolean&quot; /&gt;, that is, &quot;true&quot; or &quot;false&quot;.">
        <see langword="Boolean" /> 的字串表示，也就是 "true" 或 "false"。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Byte&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Byte" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Byte&quot; /&gt;.">
        <see langword="Byte" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Char&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Char" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Char&quot; /&gt;.">
        <see langword="Char" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.DateTime" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;DateTime&quot; /&gt; in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.">
        <see langword="DateTime" /> 的字串表示，格式為 yyyy-MM-ddTHH:mm:ss，其中 'T' 是常值。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.DateTime" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <param name="format" vsli:raw="The format structure that defines how to display the converted string. Valid formats include &quot;yyyy-MM-ddTHH:mm:sszzzzzz&quot; and its subsets.">定義如何顯示轉換後字串的格式結構。 有效格式包含 "yyyy-MM-ddTHH:mm:sszzzzzz" 及其子集。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;DateTime&quot; /&gt; in the specified format.">
        <see langword="DateTime" /> 的指定格式字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlDateTimeSerializationMode&quot; /&gt; specified.">使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />，將 <see cref="T:System.DateTime" /> 轉換為 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value to convert.">要進行轉換的 <see cref="T:System.DateTime" /> 值。</param>
      <param name="dateTimeOption" vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlDateTimeSerializationMode&quot; /&gt; values that specify how to treat the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.">其中一個 <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> 值，可指定如何處理 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;dateTimeOption&quot; /&gt; value is not valid.">
        <paramref name="dateTimeOption" /> 值不是有效的。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;dateTimeOption&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 或 <paramref name="dateTimeOption" /> 的值為 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; equivalent of the &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">
        <see cref="T:System.DateTime" /> 的對等 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將提供的 <see cref="T:System.DateTimeOffset" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">要轉換的 <see cref="T:System.DateTimeOffset" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representation of the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">所提供之 <see cref="T:System.DateTimeOffset" /> 的 <see cref="T:System.String" /> 表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary vsli:raw="Converts the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt; in the specified format.">將提供的 <see cref="T:System.DateTimeOffset" /> 轉換成指定格式的 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">要轉換的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="format" vsli:raw="The format to which &lt;paramref name=&quot;s&quot; /&gt; is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information, see the dateTime section of the XML Schema specification..)">
        <paramref name="s" /> 所要轉換成的格式。 格式參數可以是 XML dateTime 型別之 W3C Recommendation 的任何子集 (如需詳細資訊，請參閱 XML 結構描述規格的 dateTime 一節。)</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representation in the specified format of the supplied &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">以所提供之 <see cref="T:System.DateTimeOffset" /> 指定格式的 <see cref="T:System.String" /> 表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Decimal&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Decimal" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Decimal&quot; /&gt;.">
        <see langword="Decimal" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Double&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Double" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Double&quot; /&gt;.">
        <see cref="T:System.Double" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Guid&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Guid" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;Guid&quot; /&gt;.">
        <see langword="Guid" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Int16&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Int16" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Int16&quot; /&gt;.">
        <see cref="T:System.Int16" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Int32&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Int32" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Int32" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Int64&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Int64" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">
        <see cref="T:System.Int64" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.SByte&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.SByte" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;SByte&quot; /&gt;.">
        <see langword="SByte" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.Single&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.Single" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.Single&quot; /&gt;.">
        <see cref="T:System.Single" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.TimeSpan" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see langword=&quot;TimeSpan&quot; /&gt;.">
        <see langword="TimeSpan" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.UInt16&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.UInt16" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.UInt16&quot; /&gt;.">
        <see cref="T:System.UInt16" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.UInt32&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.UInt32" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.UInt32&quot; /&gt;.">
        <see cref="T:System.UInt32" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.UInt64&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">將 <see cref="T:System.UInt64" /> 轉換成 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The value to convert.">要進行轉換的值。</param>
      <returns vsli:raw="A string representation of the &lt;see cref=&quot;T:System.UInt64&quot; /&gt;.">
        <see cref="T:System.UInt64" /> 的字串表示。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.TimeSpan" />。</summary>
      <param name="s" vsli:raw="The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.">要轉換的字串。 字串格式必須符合＜W3C XML 結構描述第 2 部分：資料型別＞對持續期間的建議。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in correct format to represent a &lt;see langword=&quot;TimeSpan&quot; /&gt; value.">
        <paramref name="s" /> 是以不正確的格式表示 <see langword="TimeSpan" /> 值。</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TimeSpan&quot; /&gt; equivalent of the string.">字串的對等 <see langword="TimeSpan" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.UInt16&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.UInt16" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.UInt16.MinValue&quot;&gt;UInt16.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt16.MaxValue&quot;&gt;UInt16.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt16.MinValue" /> 或大於 <see cref="F:System.UInt16.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.UInt16&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.UInt16" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.UInt32&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.UInt32" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.UInt32.MinValue&quot;&gt;UInt32.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt32.MaxValue&quot;&gt;UInt32.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt32.MinValue" /> 或大於 <see cref="F:System.UInt32.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.UInt32&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.UInt32" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary vsli:raw="Converts the &lt;see cref=&quot;T:System.String&quot; /&gt; to a &lt;see cref=&quot;T:System.UInt64&quot; /&gt; equivalent.">將 <see cref="T:System.String" /> 轉換成對等的 <see cref="T:System.UInt64" />。</summary>
      <param name="s" vsli:raw="The string to convert.">要轉換的字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="s" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; is not in the correct format.">
        <paramref name="s" /> 的格式不正確。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="&lt;paramref name=&quot;s&quot; /&gt; represents a number less than &lt;see cref=&quot;F:System.UInt64.MinValue&quot;&gt;UInt64.MinValue&lt;/see&gt; or greater than &lt;see cref=&quot;F:System.UInt64.MaxValue&quot;&gt;UInt64.MaxValue&lt;/see&gt;.">
        <paramref name="s" /> 代表小於 <see cref="F:System.UInt64.MinValue" /> 或大於 <see cref="F:System.UInt64.MaxValue" /> 的數字。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.UInt64&quot; /&gt; equivalent of the string.">字串的對等 <see cref="T:System.UInt64" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary vsli:raw="Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.">根據 W3C Extended Markup Language Recommendation，驗證確定名稱是有效的名稱。</summary>
      <param name="name" vsli:raw="The name to verify.">要驗證的名稱。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid XML name.">
        <paramref name="name" /> 不是有效的 XML 名稱。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or String.Empty.">
        <paramref name="name" /> 是 <see langword="null" /> 或是 String.Empty。</exception>
      <returns vsli:raw="The name, if it is a valid XML name.">名稱 (如果它是有效的 XML 名稱)。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary vsli:raw="Verifies that the name is a valid &lt;see langword=&quot;NCName&quot; /&gt; according to the W3C Extended Markup Language recommendation. An &lt;see langword=&quot;NCName&quot; /&gt; is a name that cannot contain a colon.">根據 W3C Extended Markup Language Recommendation，驗證確定名稱是有效的 <see langword="NCName" />。 <see langword="NCName" /> 是不能包含冒號的名稱。</summary>
      <param name="name" vsli:raw="The name to verify.">要驗證的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">
        <paramref name="name" /> 是 <see langword="null" /> 或是 <c>String.Empty</c>。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid non-colon name.">
        <paramref name="name" /> 不是有效的無冒號名稱。</exception>
      <returns vsli:raw="The name, if it is a valid NCName.">名稱 (如果它是有效的 NCName)。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary vsli:raw="Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation.">根據＜W3C XML 結構描述第 2 部分：資料型別建議事項＞(英文) 驗證字串是否為有效的權杖。</summary>
      <param name="name" vsli:raw="The string you wish to verify.">您要驗證的字串。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The string is not a valid name token.">字串不是有效的名稱語彙基元。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The name token, if it is a valid NMTOKEN.">名稱語彙基元 (如果它是有效的 NMTOKEN)。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary vsli:raw="Returns the passed in string instance if all the characters in the string argument are valid public id characters.">如果字串引數中的所有字元都是有效的公用 ID 字元，則會傳回傳入的字串執行個體。</summary>
      <param name="publicId" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains the id to validate.">包含要驗證之 ID 的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="The passed-in string if all the characters in the argument are valid public id characters.">如果引數中的所有字元都是有效的公用 ID 字元，則為傳入的字串。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary vsli:raw="Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.">根據＜W3C XML Schema Part2: Datatypes＞建議，驗證字串是否為有效的語彙基元。</summary>
      <param name="token" vsli:raw="The string value you wish to verify.">您要驗證的字串值。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The string value is not a valid token.">此字串值不是有效的語彙基元。</exception>
      <returns vsli:raw="The token, if it is a valid token.">語彙基元 (如果它是有效的語彙基元)。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary vsli:raw="Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters.">如果字串引數中的所有字元都是有效的空白字元，則會傳回傳入的字串執行個體。</summary>
      <param name="content" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; to verify.">要驗證的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="The passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise &lt;see langword=&quot;null&quot; /&gt;.">如果字串引數中的所有字元都是有效的空白字元，則為傳入的字串執行個體；否則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary vsli:raw="Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise an &lt;see langword=&quot;XmlException&quot; /&gt; is thrown with information on the first invalid character encountered.">如果字串引數中的所有字元及 Surrogate 字組字元都是有效的 XML 字元，則傳回傳入的字串，否則擲回 <see langword="XmlException" />，並提供遇到的第一個無效字元的相關資訊。</summary>
      <param name="content" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains characters to verify.">包含要驗證之字元的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="The passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise an &lt;see langword=&quot;XmlException&quot; /&gt; is thrown with information on the first invalid character encountered.">如果字串引數中的所有字元及 Surrogate 字組字元都是有效的 XML 字元，則為傳入的字串；否則擲回 <see langword="XmlException" />，並提供遇到的第一個無效字元的相關資訊。</returns>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary vsli:raw="Specifies how to treat the time value when converting between string and &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">指定在字串和 <see cref="T:System.DateTime" /> 之間轉換時如何處理時間值。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary vsli:raw="Treat as local time. If the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object represents a Coordinated Universal Time (UTC), it is converted to the local time.">當做當地時間。 如果 <see cref="T:System.DateTime" /> 物件表示 Coordinated Universal Time (UTC)，則將它轉換成當地時間。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary vsli:raw="Time zone information should be preserved when converting.">時區資訊應在轉換時保存。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary vsli:raw="Treat as a local time if a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is being converted to a string. If a string is being converted to &lt;see cref=&quot;T:System.DateTime&quot; /&gt;, convert to a local time if a time zone is specified.">如果要將 <see cref="T:System.DateTime" /> 轉換成字串，則當做當地時間。 字串若要轉換成 <see cref="T:System.DateTime" />，若有指定時區，請轉換成當地時間。</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary vsli:raw="Treat as a UTC. If the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object represents a local time, it is converted to a UTC.">當做 UTC。 如果 <see cref="T:System.DateTime" /> 物件表示當地時間，則將它轉換成 UTC。</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary vsli:raw="Represents the XML declaration node &amp;lt;?xml version='1.0'...?&amp;gt;.">代表 XML 宣告節點 &lt;?xml version='1.0'...?&gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDeclaration&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlDeclaration" /> 類別的新執行個體。</summary>
      <param name="version" vsli:raw="The XML version; see the &lt;see cref=&quot;P:System.Xml.XmlDeclaration.Version&quot; /&gt; property.">XML 版本；請參閱 <see cref="P:System.Xml.XmlDeclaration.Version" /> 屬性。</param>
      <param name="encoding" vsli:raw="The encoding scheme; see the &lt;see cref=&quot;P:System.Xml.XmlDeclaration.Encoding&quot; /&gt; property.">編碼配置；請參閱 <see cref="P:System.Xml.XmlDeclaration.Encoding" /> 屬性。</param>
      <param name="standalone" vsli:raw="Indicates whether the XML document depends on an external DTD; see the &lt;see cref=&quot;P:System.Xml.XmlDeclaration.Standalone&quot; /&gt; property.">表示 XML 文件是否取決於外部 DTD；請參閱 <see cref="P:System.Xml.XmlDeclaration.Standalone" /> 屬性。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. Because &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 因為 <see langword="XmlDeclaration" /> 節點沒有子系，所以無論參數設定為何，所複製的節點永遠會包含資料值。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. Because &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes do not have children, this method has no effect.">將節點的子系儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 因為 <see langword="XmlDeclaration" /> 節點並沒有子系，所以這個方法不會有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary vsli:raw="Gets or sets the encoding level of the XML document.">取得或設定 XML 文件的編碼方式層級。</summary>
      <returns vsli:raw="The valid character encoding name. The most commonly supported character encoding names for XML are the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Category&lt;/term&gt;&lt;description&gt; Encoding Names&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Unicode&lt;/term&gt;&lt;description&gt; UTF-8, UTF-16&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ISO 10646&lt;/term&gt;&lt;description&gt; ISO-10646-UCS-2, ISO-10646-UCS-4&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ISO 8859&lt;/term&gt;&lt;description&gt; ISO-8859-n (where &quot;n&quot; is a digit from 1 to 9)&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; JIS X-0208-1997&lt;/term&gt;&lt;description&gt; ISO-2022-JP, Shift_JIS, EUC-JP&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;  &#xA;&#xA; This value is optional. If a value is not set, this property returns String.Empty.  &#xA;  &#xA; If an encoding attribute is not included, UTF-8 encoding is assumed when the document is written or saved out.">有效的字元編碼名稱。 最常支援的 XML 字元編碼名稱如下：  
  
 <list type="table"><listheader><term> 類別</term><description> 編碼名稱</description></listheader><item><term> Unicode</term><description> UTF-8、UTF-16</description></item><item><term> ISO 10646</term><description> ISO-10646-UCS-2, ISO-10646-UCS-4</description></item><item><term> ISO 8859</term><description> ISO-8859-n (其中 "n" 可以是 1 到 9 的數字)</description></item><item><term> JIS X-0208-1997</term><description> ISO-2022-JP, Shift_JIS, EUC-JP</description></item></list>  

 此為選用值。 如果沒有設定值，這個屬性會傳回 String.Empty。  
  
 如果未包含編碼方式屬性，在文件被寫入或儲存時會假設為 UTF-8 編碼方式。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt;.">取得或設定 <see langword="XmlDeclaration" /> 的串聯值。</summary>
      <returns vsli:raw="The concatenated values of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt; (that is, everything between &lt;c&gt;&amp;lt;?xml&lt;/c&gt; and &lt;c&gt;?&amp;gt;&lt;/c&gt;)."> (的串連值 <see langword="XmlDeclaration" /> 是<c> &lt; ？ xml</c>與<c>？ &gt; </c>) 之間的所有專案。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes, the local name is &lt;see langword=&quot;xml&quot; /&gt;.">對於 <see langword="XmlDeclaration" /> 節點，其區域名稱為 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes, the name is &lt;see langword=&quot;xml&quot; /&gt;.">對於 <see langword="XmlDeclaration" /> 節點，其名稱為 <see langword="xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDeclaration&quot; /&gt; nodes, this value is XmlNodeType.XmlDeclaration.">如果是 <see langword="XmlDeclaration" /> 節點，則這個值會是 XmlNodeType.XmlDeclaration。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary vsli:raw="Gets or sets the value of the standalone attribute.">取得或設定獨立屬性的值。</summary>
      <returns vsli:raw="Valid values are &lt;see langword=&quot;yes&quot; /&gt; if all entity declarations required by the XML document are contained within the document or &lt;see langword=&quot;no&quot; /&gt; if an external document type definition (DTD) is required. If a standalone attribute is not present in the XML declaration, this property returns String.Empty.">如果 XML 文件所需的所有實體宣告都包含在文件中，其有效值為 <see langword="yes" />；如果需要外部文件類型定義 (DTD)，則有效值為 <see langword="no" />。 如果在 XML 宣告中沒有獨立屬性，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary vsli:raw="Gets or sets the value of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt;.">取得或設定 <see langword="XmlDeclaration" /> 的值。</summary>
      <returns vsli:raw="The contents of the &lt;see langword=&quot;XmlDeclaration&quot; /&gt; (that is, everything between &lt;c&gt;&amp;lt;?xml&lt;/c&gt; and &lt;c&gt;?&amp;gt;&lt;/c&gt;)."> (的內容 <see langword="XmlDeclaration" /> 是<c> &lt; ？ xml</c>與<c>？ &gt; </c>) 之間的所有專案。</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary vsli:raw="Gets the XML version of the document.">取得文件的 XML 版本。</summary>
      <returns vsli:raw="The value is always &lt;see langword=&quot;1.0&quot; /&gt;.">這個值一定是 <see langword="1.0" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary vsli:raw="Represents an XML document. You can use this class to load, validate, edit, add, and position XML in a document.">表示 XML 文件。 您可以於文件中使用這個類別來載入、驗證、編輯、加入和置放 XML。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.Xml.XmlNode.Value&quot; /&gt; of a node belonging to this document has been changed.">發生於屬於這份文件之節點的 <see cref="P:System.Xml.XmlNode.Value" /> 變更時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.Xml.XmlNode.Value&quot; /&gt; of a node belonging to this document is about to be changed.">發生於屬於這份文件之節點的 <see cref="P:System.Xml.XmlNode.Value" /> 即將變更時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary vsli:raw="Occurs when a node belonging to this document has been inserted into another node.">發生於屬於這份文件的節點插入另一個節點時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary vsli:raw="Occurs when a node belonging to this document is about to be inserted into another node.">發生於屬於這份文件的節點將要插入另一個節點時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary vsli:raw="Occurs when a node belonging to this document has been removed from its parent.">發生於屬於這份文件的節點從其父代 (Parent) 移除時。</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary vsli:raw="Occurs when a node belonging to this document is about to be removed from the document.">發生於屬於這份文件的節點即將從文件中移除時。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlDocument" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlDocument&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt;.">使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlImplementation" /> 類別的新執行個體。</summary>
      <param name="imp" vsli:raw="The &lt;see langword=&quot;XmlImplementation&quot; /&gt; to use.">要使用的 <see langword="XmlImplementation" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlDocument&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 <see langword="XmlDocument" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns vsli:raw="The cloned &lt;see langword=&quot;XmlDocument&quot; /&gt; node.">複製的 <see langword="XmlDocument" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;.">建立具有指定 <see cref="P:System.Xml.XmlDocument.Name" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute. If the name contains a colon, the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property reflects the part of the name preceding the first colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property reflects the part of the name following the first colon. The &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt; remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case &lt;see langword=&quot;NamespaceURI&quot; /&gt; has a value of &lt;c&gt;http://www.w3.org/2000/xmlns/&lt;/c&gt;.">屬性的限定名稱 (Qualified Name)。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映第一個冒號之前的名稱部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映第一個冒號之後的名稱部分。 除非前置詞能夠辨認為內建前置詞 (例如 xmlns)，否則 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 會保持空白。 在此情況下，<see langword="NamespaceURI" /> 的值為 <c>http://www.w3.org/2000/xmlns/</c>。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlAttribute&quot; /&gt;.">新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified qualified name and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有指定限定名稱和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="qualifiedName" vsli:raw="The qualified name of the attribute. If the name contains a colon then the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property will reflect the part of the name preceding the colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property will reflect the part of the name after the colon.">屬性的限定名稱 (Qualified Name)。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映冒號前面的名稱部分，而  <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映冒號後面的名稱部分。</param>
      <param name="namespaceURI" vsli:raw="The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be &lt;c&gt;http://www.w3.org/2000/xmlns/&lt;/c&gt;.">屬性的命名空間 URI。 如果限定名稱包含 xmlns 前置詞，則此參數必須是 <c>http://www.w3.org/2000/xmlns/</c>。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlAttribute&quot; /&gt;.">新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有指定的 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="prefix" vsli:raw="The prefix of the attribute (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">屬性的前置詞 (如有此項)。 String.Empty 與 <see langword="null" /> 相等。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent. If &lt;paramref name=&quot;prefix&quot; /&gt; is xmlns, then this parameter must be &lt;c&gt;http://www.w3.org/2000/xmlns/&lt;/c&gt;; otherwise an exception is thrown.">屬性的命名空間 URI (如有此項)。 String.Empty 與 <see langword="null" /> 相等。 如果 <paramref name="prefix" /> 是 xmlns，則這個參數必須是 <c>http://www.w3.org/2000/xmlns/</c>；否則會擲回例外狀況。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlAttribute&quot; /&gt;.">新的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlCDataSection&quot; /&gt; containing the specified data.">建立包含指定資料的 <see cref="T:System.Xml.XmlCDataSection" />。</summary>
      <param name="data" vsli:raw="The content of the new &lt;see langword=&quot;XmlCDataSection&quot; /&gt;.">新 <see langword="XmlCDataSection" /> 的內容。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlCDataSection&quot; /&gt;.">新的 <see langword="XmlCDataSection" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlComment&quot; /&gt; containing the specified data.">建立包含指定資料的 <see cref="T:System.Xml.XmlComment" />。</summary>
      <param name="data" vsli:raw="The content of the new &lt;see langword=&quot;XmlComment&quot; /&gt;.">新 <see langword="XmlComment" /> 的內容。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlComment&quot; /&gt;.">新的 <see langword="XmlComment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Creates a default attribute with the specified prefix, local name and namespace URI.">建立具有指定前置詞、區域名稱和命名空間 URI 的預設屬性。</summary>
      <param name="prefix" vsli:raw="The prefix of the attribute (if any).">屬性的前置詞 (如有此項)。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute (if any).">屬性的命名空間 URI (如有此項)。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">新的 <see cref="T:System.Xml.XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDocumentFragment&quot; /&gt;.">建立 <see cref="T:System.Xml.XmlDocumentFragment" />。</summary>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt;.">新的 <see langword="XmlDocumentFragment" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Xml.XmlDocumentType&quot; /&gt; object.">傳回新的 <see cref="T:System.Xml.XmlDocumentType" /> 物件。</summary>
      <param name="name" vsli:raw="Name of the document type.">文件類型的名稱。</param>
      <param name="publicId" vsli:raw="The public identifier of the document type or &lt;see langword=&quot;null&quot; /&gt;. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.">文件類型的公用識別項或 <see langword="null" />。 您可以指定公用 URI 及系統識別項，以識別外部 DTD 子集的位置。</param>
      <param name="systemId" vsli:raw="The system identifier of the document type or &lt;see langword=&quot;null&quot; /&gt;. Specifies the URL of the file location for the external DTD subset.">文件類型的系統識別項或 <see langword="null" />。 指定外部 DTD 子集之檔案位置的 URL。</param>
      <param name="internalSubset" vsli:raw="The DTD internal subset of the document type or &lt;see langword=&quot;null&quot; /&gt;.">文件類型的 DTD 內部子集或 <see langword="null" />。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDocumentType&quot; /&gt;.">新的 <see langword="XmlDocumentType" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary vsli:raw="Creates an element with the specified name.">建立具有指定名稱的項目。</summary>
      <param name="name" vsli:raw="The qualified name of the element. If the name contains a colon then the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property reflects the part of the name preceding the colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property reflects the part of the name after the colon. The qualified name cannot include a prefix of 'xmlns'.">項目的限定名稱。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映冒號之前的名稱部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映冒號之後的名稱部分。 限定名稱不能包含 'xmlns' 前置詞。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlElement&quot; /&gt;.">新的 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; with the qualified name and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有限定名稱和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="qualifiedName" vsli:raw="The qualified name of the element. If the name contains a colon then the &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; property will reflect the part of the name preceding the colon and the &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; property will reflect the part of the name after the colon. The qualified name cannot include a prefix of 'xmlns'.">項目的限定名稱。 如果名稱包含冒號，<see cref="P:System.Xml.XmlNode.Prefix" /> 屬性會反映冒號前面的名稱部分，而  <see cref="P:System.Xml.XmlDocument.LocalName" /> 屬性會反映冒號後面的名稱部分。 限定名稱不能包含 'xmlns' 前置詞。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlElement&quot; /&gt;.">新的 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an element with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有指定之 <see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的元素。</summary>
      <param name="prefix" vsli:raw="The prefix of the new element (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新項目的前置詞 (如有此項)。 String.Empty 與 <see langword="null" /> 相等。</param>
      <param name="localName" vsli:raw="The local name of the new element.">新項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new element (if any). String.Empty and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新項目的命名空間 URI (如有此項)。 String.Empty 與 <see langword="null" /> 相等。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt;.">新的 <see cref="T:System.Xml.XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlEntityReference&quot; /&gt; with the specified name.">建立具有指定名稱的 <see cref="T:System.Xml.XmlEntityReference" />。</summary>
      <param name="name" vsli:raw="The name of the entity reference.">實體參考的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is invalid (for example, names starting with'#' are invalid.)">不正確的名稱 (例如以 '#' 開頭的名稱無效)。</exception>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlEntityReference&quot; /&gt;.">新的 <see langword="XmlEntityReference" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object for navigating this document.">建立巡覽這份文件的新 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object for navigating this document positioned on the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; specified.">建立 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，用於巡覽位於指定之 <see cref="T:System.Xml.XmlNode" /> 上的這個文件。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; you want the navigator initially positioned on.">您希望巡覽器一開始定位所在的 <see cref="T:System.Xml.XmlNode" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified node type, &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有指定節點類型、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="nodeTypeString" vsli:raw="String version of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the new node. This parameter must be one of the values listed in the table below.">新節點的 <see cref="T:System.Xml.XmlNodeType" /> 的字串版本。 這個參數必須是下表中所列的其中一個值。</param>
      <param name="name" vsli:raw="The qualified name of the new node. If the name contains a colon, it is parsed into &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; components.">新節點的限定名稱。 如果名稱包含冒號，將會剖析為 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 元件。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new node.">新節點的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name was not provided and the &lt;see langword=&quot;XmlNodeType&quot; /&gt; requires a name; or &lt;paramref name=&quot;nodeTypeString&quot; /&gt; is not one of the strings listed below.">未提供名稱且 <see langword="XmlNodeType" /> 需要名稱；或者 <paramref name="nodeTypeString" /> 不是下列字串之一。</exception>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt;.">新的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有指定的 <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="type" vsli:raw="The &lt;see langword=&quot;XmlNodeType&quot; /&gt; of the new node.">新節點的 <see langword="XmlNodeType" />。</param>
      <param name="name" vsli:raw="The qualified name of the new node. If the name contains a colon then it is parsed into &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; components.">新節點的限定名稱。 如果名稱包含冒號，將會剖析為 <see cref="P:System.Xml.XmlNode.Prefix" /> 和 <see cref="P:System.Xml.XmlDocument.LocalName" /> 元件。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new node.">新節點的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name was not provided and the &lt;see langword=&quot;XmlNodeType&quot; /&gt; requires a name.">未提供名稱且 <see langword="XmlNodeType" /> 需要名稱。</exception>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt;.">新的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlNode.Prefix&quot; /&gt;, &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;, and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">建立具有指定之 <see cref="T:System.Xml.XmlNodeType" />、<see cref="P:System.Xml.XmlNode.Prefix" />、<see cref="P:System.Xml.XmlDocument.Name" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="type" vsli:raw="The &lt;see langword=&quot;XmlNodeType&quot; /&gt; of the new node.">新節點的 <see langword="XmlNodeType" />。</param>
      <param name="prefix" vsli:raw="The prefix of the new node.">新節點的前置詞。</param>
      <param name="name" vsli:raw="The local name of the new node.">新節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new node.">新節點的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name was not provided and the &lt;see langword=&quot;XmlNodeType&quot; /&gt; requires a name.">未提供名稱且 <see langword="XmlNodeType" /> 需要名稱。</exception>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt;.">新的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlProcessingInstruction&quot; /&gt; with the specified name and data.">建立具有指定名稱和資料的 <see cref="T:System.Xml.XmlProcessingInstruction" />。</summary>
      <param name="target" vsli:raw="The name of the processing instruction.">處理指示的名稱。</param>
      <param name="data" vsli:raw="The data for the processing instruction.">處理指示的資料。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlProcessingInstruction&quot; /&gt;.">新的 <see langword="XmlProcessingInstruction" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlSignificantWhitespace&quot; /&gt; node.">建立 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 節點。</summary>
      <param name="text" vsli:raw="The string must contain only the following characters &amp;amp;#20; &amp;amp;#10; &amp;amp;#13; and &amp;amp;#9;.">字串必須只包含下列字元：&amp;#20; &amp;#10; &amp;#13; 和 &amp;#9;</param>
      <returns vsli:raw="A new &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; node.">新的 <see langword="XmlSignificantWhitespace" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlText&quot; /&gt; with the specified text.">建立具有指定文字的 <see cref="T:System.Xml.XmlText" />。</summary>
      <param name="text" vsli:raw="The text for the Text node.">Text 節點的文字。</param>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlText&quot; /&gt; node.">新的  <see langword="XmlText" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlWhitespace&quot; /&gt; node.">建立 <see cref="T:System.Xml.XmlWhitespace" /> 節點。</summary>
      <param name="text" vsli:raw="The string must contain only the following characters &amp;amp;#20; &amp;amp;#10; &amp;amp;#13; and &amp;amp;#9;.">字串必須只包含下列字元：&amp;#20; &amp;#10; &amp;#13; 和 &amp;#9;</param>
      <returns vsli:raw="A new &lt;see langword=&quot;XmlWhitespace&quot; /&gt; node.">新的 <see langword="XmlWhitespace" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlDeclaration&quot; /&gt; node with the specified values.">建立具有指定值的 <see cref="T:System.Xml.XmlDeclaration" /> 節點。</summary>
      <param name="version" vsli:raw="The version must be &quot;1.0&quot;.">版本必須是 "1.0"。</param>
      <param name="encoding" vsli:raw="The value of the encoding attribute. This is the encoding that is used when you save the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to a file or a stream; therefore, it must be set to a string supported by the &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; class, otherwise &lt;see cref=&quot;M:System.Xml.XmlDocument.Save(System.String)&quot; /&gt; fails. If this is &lt;see langword=&quot;null&quot; /&gt; or String.Empty, the &lt;see langword=&quot;Save&quot; /&gt; method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.  &#xA;  &#xA; Note: If the &lt;see langword=&quot;XmlDocument&quot; /&gt; is saved to either a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; or an &lt;see cref=&quot;T:System.Xml.XmlTextWriter&quot; /&gt;, this encoding value is discarded. Instead, the encoding of the &lt;see langword=&quot;TextWriter&quot; /&gt; or the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; is used. This ensures that the XML written out can be read back using the correct encoding.">編碼屬性的值。 這是在您將 <see cref="T:System.Xml.XmlDocument" /> 儲存至檔案或資料流時使用的編碼方式，因此，必須設定為 <see cref="T:System.Text.Encoding" /> 類別支援的字串，否則 <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> 會失敗。 如果這是 <see langword="null" /> 或 String.Empty，<see langword="Save" /> 方法不會在 XML 宣告上寫入編碼屬性，因此會使用預設編碼方式 UTF-8。  
  
注意：如果 <see langword="XmlDocument" /> 儲存至 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.Xml.XmlTextWriter" />，則會捨棄這個編碼值。 改用 <see langword="TextWriter" /> 或 <see langword="XmlTextWriter" /> 的編碼方式。 這可以確保寫出的 XML 可以使用正碼的編碼方式讀回。</param>
      <param name="standalone" vsli:raw="The value must be either &quot;yes&quot; or &quot;no&quot;. If this is &lt;see langword=&quot;null&quot; /&gt; or String.Empty, the &lt;see langword=&quot;Save&quot; /&gt; method does not write a standalone attribute on the XML declaration.">值必須為「是」或「否」。 如果這是 <see langword="null" /> 或 String.Empty，<see langword="Save" /> 方法不會在 XML 宣告上寫入獨立屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The values of &lt;paramref name=&quot;version&quot; /&gt; or &lt;paramref name=&quot;standalone&quot; /&gt; are something other than the ones specified above.">
        <paramref name="version" /> 或 <paramref name="standalone" /> 的值非上述指定的值。</exception>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDeclaration&quot; /&gt; node.">新的  <see langword="XmlDeclaration" /> 節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; with the specified ID.">取得具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />。</summary>
      <param name="elementId" vsli:raw="The attribute ID to match.">要比對的屬性 ID。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlElement&quot; /&gt; with the matching ID or &lt;see langword=&quot;null&quot; /&gt; if no matching element is found.">具有相符 ID 的 <see langword="XmlElement" />；如果找不到相符的項目，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlDocument.Name&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定 <see cref="P:System.Xml.XmlDocument.Name" /> 之所有子代 (Descendant) 項目的清單。</summary>
      <param name="name" vsli:raw="The qualified name to match. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node. The special value &quot;*&quot; matches all tags.">要相符的限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。 特殊值 "*" 與所有標記相符。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. If no nodes match &lt;paramref name=&quot;name&quot; /&gt;, the returned collection will be empty.">
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有節點符合 <paramref name="name" />，就會傳回空的集合。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlDocument.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定之 <see cref="P:System.Xml.XmlDocument.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的所有子代元素的清單。</summary>
      <param name="localName" vsli:raw="The LocalName to match. The special value &quot;*&quot; matches all tags.">要相符的 LocalName。 特殊值 "*" 與所有標記相符。</param>
      <param name="namespaceURI" vsli:raw="NamespaceURI to match.">要比對的 NamespaceURI。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. If no nodes match the specified &lt;paramref name=&quot;localName&quot; /&gt; and &lt;paramref name=&quot;namespaceURI&quot; /&gt;, the returned collection will be empty.">
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有節點符合指定的 <paramref name="localName" /> 及 <paramref name="namespaceURI" />，就會傳回空的集合。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary vsli:raw="Imports a node from another document to the current document.">從其他文件匯入節點至目前的文件。</summary>
      <param name="node" vsli:raw="The node being imported.">匯入的節點。</param>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to perform a deep clone; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 以執行深層複製；否則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling this method on a node type which cannot be imported.">在無法匯入的節點類型上呼叫這個方法。</exception>
      <returns vsli:raw="The imported &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">匯入的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary vsli:raw="Loads the XML document from the specified stream.">從指定的資料流載入 XML 文件。</summary>
      <param name="inStream" vsli:raw="The stream containing the XML document to load.">包含要載入之 XML 文件的資料流。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, a &lt;see cref=&quot;T:System.IO.FileNotFoundException&quot; /&gt; is raised.">XML 中發生載入或剖析錯誤。 在這種情況下，會引發 <see cref="T:System.IO.FileNotFoundException" />。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary vsli:raw="Loads the XML document from the specified &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">從指定的 <see cref="T:System.IO.TextReader" /> 載入 XML 文件。</summary>
      <param name="txtReader" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; used to feed the XML data into the document.">用於將 XML 資料送入文件中的 <see langword="TextReader" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, the document remains empty.">XML 中發生載入或剖析錯誤。 在這種情況下，文件會保持空白。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary vsli:raw="Loads the XML document from the specified URL.">從指定的 URL 載入 XML 文件。</summary>
      <param name="filename" vsli:raw="URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).">包含要載入之 XML 文件的檔案的 URL。 這個 URL 可以是本機檔案，也可以是 HTTP URL (網址)。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, a &lt;see cref=&quot;T:System.IO.FileNotFoundException&quot; /&gt; is raised.">XML 中發生載入或剖析錯誤。 在這種情況下，會引發 <see cref="T:System.IO.FileNotFoundException" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; is a zero-length string, contains only white space, or contains one or more invalid characters as defined by &lt;see cref=&quot;F:System.IO.Path.InvalidPathChars&quot; /&gt;.">
        <paramref name="filename" /> 為零長度字串，只包含空格，或包含一或多個如 <see cref="F:System.IO.Path.InvalidPathChars" /> 所定義的無效字元。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="filename" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.PathTooLongException" vsli:raw="The specified path, file name, or both exceed the system-defined maximum length.">指定的路徑、檔案名稱，或兩者都超出系統定義的長度上限。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The specified path is invalid (for example, it is on an unmapped drive).">指定的路徑無效 (例如，它位於未對應的磁碟機上)。</exception>
      <exception cref="T:System.IO.IOException" vsli:raw="An I/O error occurred while opening the file.">開啟檔案時發生 I/O 錯誤。</exception>
      <exception cref="T:System.UnauthorizedAccessException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; specified a file that is read-only.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation is not supported on the current platform.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;filename&quot; /&gt; specified a directory.  &#xA;  &#xA; -or-  &#xA;  &#xA; The caller does not have the required permission.">
        <paramref name="filename" /> 指定了唯讀的檔案。  
  
-或- 
這個作業在目前平台不受支援。  
  
-或- 
 <paramref name="filename" /> 指定了目錄。  
  
-或- 
呼叫端沒有必要的權限。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file specified in &lt;paramref name=&quot;filename&quot; /&gt; was not found.">找不到 <paramref name="filename" /> 指定的檔案。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;filename&quot; /&gt; is in an invalid format.">
        <paramref name="filename" /> 格式無效。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads the XML document from the specified &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">從指定的 <see cref="T:System.Xml.XmlReader" /> 載入 XML 文件。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; used to feed the XML data into the document.">用於將 XML 資料送入文件中的 <see langword="XmlReader" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, the document remains empty.">XML 中發生載入或剖析錯誤。 在這種情況下，文件會保持空白。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary vsli:raw="Loads the XML document from the specified string.">從指定的字串載入 XML 文件。</summary>
      <param name="xml" vsli:raw="String containing the XML document to load.">包含要載入之 XML 文件的字串。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There is a load or parse error in the XML. In this case, the document remains empty.">XML 中發生載入或剖析錯誤。 在這種情況下，文件會保持空白。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object based on the information in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;. The reader must be positioned on a node or attribute.">根據 <see cref="T:System.Xml.XmlReader" /> 中的資訊建立一個 <see cref="T:System.Xml.XmlNode" /> 物件。 讀取器必須定位在節點或屬性上。</summary>
      <param name="reader" vsli:raw="The XML source.">XML 來源。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity).">此讀取器置於節點類型上，該類型不會轉譯為有效的 DOM 節點 (例如 EndElement 或 EndEntity)。</exception>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlNode&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if no more nodes exist.">新的 <see langword="XmlNode" />；如果沒有其他節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the XML document to the specified stream.">將 XML 文件儲存至指定的資料流。</summary>
      <param name="outStream" vsli:raw="The stream to which you want to save.">要在其中儲存的資料流。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary vsli:raw="Saves the XML document to the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">將 XML 文件儲存至指定的 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="writer" vsli:raw="The &lt;see langword=&quot;TextWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="TextWriter" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary vsli:raw="Saves the XML document to the specified file. If the specified file exists, this method overwrites it.">將 XML 文件儲存至指定的檔案。 如果指定的檔案存在，則這個方法會覆寫該檔案。</summary>
      <param name="filename" vsli:raw="The location of the file where you want to save the document.">您要儲存文件的目標檔案位置。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the XML document to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將 XML 文件儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations).">作業不會產生格式正確的 XML 文件 (例如，沒有文件項目或有重複的 XML 宣告)。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Validates the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; against the XML Schema Definition Language (XSD) schemas contained in the &lt;see cref=&quot;P:System.Xml.XmlDocument.Schemas&quot; /&gt; property.">根據 <see cref="P:System.Xml.XmlDocument.Schemas" /> 屬性中包含的 XML 結構描述定義語言 (XSD) 結構描述，驗證 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <param name="validationEventHandler" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object that receives information about schema validation warnings and errors.">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件，可接收有關結構描述驗證警告和錯誤的資訊。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="A schema validation event occurred and no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object was specified.">發生結構描述驗證事件且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary vsli:raw="Validates the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object specified against the XML Schema Definition Language (XSD) schemas in the &lt;see cref=&quot;P:System.Xml.XmlDocument.Schemas&quot; /&gt; property.">根據 <see cref="P:System.Xml.XmlDocument.Schemas" /> 屬性中包含的 XML 結構描述定義語言 (XSD) 結構描述，驗證指定的 <see cref="T:System.Xml.XmlNode" /> 物件。</summary>
      <param name="validationEventHandler" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object that receives information about schema validation warnings and errors.">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件，可接收有關結構描述驗證警告和錯誤的資訊。</param>
      <param name="nodeToValidate" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object created from an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to validate.">從要驗證的 <see cref="T:System.Xml.XmlDocument" /> 所建立的 <see cref="T:System.Xml.XmlNode" /> 物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object parameter was not created from an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNode" /> 物件參數不是從 <see cref="T:System.Xml.XmlDocument" /> 所建立。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; object parameter is not an element, attribute, document fragment, or the root node.">
        <see cref="T:System.Xml.XmlNode" /> 物件參數不是項目、屬性、文件片段或根節點。</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="A schema validation event occurred and no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; object was specified.">發生結構描述驗證事件且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 物件。</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the &lt;see langword=&quot;XmlDocument&quot; /&gt; node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將 <see langword="XmlDocument" /> 節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="xw" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the &lt;see langword=&quot;XmlDocument&quot; /&gt; node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將 <see langword="XmlDocument" /> 節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">取得目前節點的基底 (Base) URI。</summary>
      <returns vsli:raw="The location from which the node was loaded.">節點載入的位置。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary vsli:raw="Gets the root &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; for the document.">取得文件的根 <see cref="T:System.Xml.XmlElement" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlElement&quot; /&gt; that represents the root of the XML document tree. If no root exists, &lt;see langword=&quot;null&quot; /&gt; is returned.">表示 XML 文件樹狀之根的 <see langword="XmlElement" />。 如果有根，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary vsli:raw="Gets the node containing the DOCTYPE declaration.">取得包含 DOCTYPE 宣告的節點。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; containing the DocumentType (DOCTYPE declaration).">包含 DocumentType (DOCTYPE 宣告) 的 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt; object for the current document.">取得目前文件的 <see cref="T:System.Xml.XmlImplementation" /> 物件。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlImplementation&quot; /&gt; object for the current document.">目前文件的 <see langword="XmlImplementation" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary vsli:raw="Throws an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; in all cases.">在所有情況下都擲回 <see cref="T:System.InvalidOperationException" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">在所有情況下。</exception>
      <returns vsli:raw="The values of the node and all its child nodes.">節點和其所有子節點的值。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing the children of the current node.">取得或設定表示目前節點子系的標記。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">未正確設定這個屬性之語式時所指定的 XML。</exception>
      <returns vsli:raw="The markup of the children of the current node.">目前節點子系的標記。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the current node is read-only.">取得值，指示目前節點是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is read-only; otherwise &lt;see langword=&quot;false&quot; /&gt;. &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes always return &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點為唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlDocument" /> 節點永遠傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes, the local name is #document.">對於 <see langword="XmlDocument" /> 節點，區域名稱為 #document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes, the name is #document.">對於  <see langword="XmlDocument" /> 節點，名稱為 #document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the document.">
        <see langword="XmlNameTable" />，可讓您取得文件中字串之擷取版本。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes, this value is XmlNodeType.Document.">節點類型。 對於 <see langword="XmlDocument" /> 節點，此值為 XmlNodeType.Document。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which the current node belongs.">取得目前節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocument&quot; /&gt; nodes (&lt;see cref=&quot;P:System.Xml.XmlDocument.NodeType&quot; /&gt; equals XmlNodeType.Document), this property always returns &lt;see langword=&quot;null&quot; /&gt;.">對於 <see langword="XmlDocument" /> 節點 (<see cref="P:System.Xml.XmlDocument.NodeType" /> 等於 XmlNodeType.Document)，此屬性一律會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary vsli:raw="Gets the parent node of this node (for nodes that can have parents).">取得這個節點的父節點 (針對可以具有父代的節點而言)。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;null&quot; /&gt;.">一律傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary vsli:raw="Gets or sets a value indicating whether to preserve white space in element content.">取得或設定值，指出是否要保留項目內容中的空白字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to preserve white space; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">若要保留空白字元，則為 <see langword="true" />；否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary vsli:raw="Returns the Post-Schema-Validation-Infoset (PSVI) of the node.">傳回節點的後結構描述驗證資訊集 (PSVI)。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object representing the PSVI of the node.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，表示節點的 PSVI。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object associated with this &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;.">取得或設定與這個 <see cref="T:System.Xml.XmlDocument" /> 相關聯的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object containing the XML Schema Definition Language (XSD) schemas associated with this &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;; otherwise, an empty &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件，包含與這個 <see cref="T:System.Xml.XmlDocument" /> 相關聯的 XML 結構描述定義語言 (XSD) 結構描述；否則為空白的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to use for resolving external resources.">設定用於解析外部資源的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="This property is set to &lt;see langword=&quot;null&quot; /&gt; and an external DTD or entity is encountered.">這個屬性設定為 <see langword="null" /> 且遇到外部 DTD 或實體。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; to use.  &#xA;  &#xA; In version 1.1 of the.NET Framework, the caller must be fully trusted in order to specify an &lt;see langword=&quot;XmlResolver&quot; /&gt;.">要使用的 <see langword="XmlResolver" />。  
  
在 .NET Framework 1.1 中，必須完全信任呼叫端，才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary vsli:raw="Represents a lightweight object that is useful for tree insert operations.">代表適用於樹狀插入作業的輕量型物件。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDocumentFragment&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlDocumentFragment" /> 類別的新執行個體。</summary>
      <param name="ownerDocument" vsli:raw="The XML document that is the source of the fragment.">片段來源的 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing the children of this node.">取得或設定表示這個節點的子節點的標記。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">未正確設定這個屬性之語式時所指定的 XML。</exception>
      <returns vsli:raw="The markup of the children of this node.">此節點子系的標記。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt; nodes, the local name is &lt;see langword=&quot;#document-fragment&quot; /&gt;.">對於 <see langword="XmlDocumentFragment" /> 節點，其區域名稱為 <see langword="#document-fragment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt;, the name is &lt;see langword=&quot;#document-fragment&quot; /&gt;.">對於 <see langword="XmlDocumentFragment" />，其名稱為 <see langword="#document-fragment" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt; nodes, this value is XmlNodeType.DocumentFragment.">對於 <see langword="XmlDocumentFragment" /> 節點，其值為 XmlNodeType.DocumentFragment。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlDocument&quot; /&gt; to which this node belongs.">這個節點所屬的 <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns vsli:raw="The parent of this node.  &#xA;  &#xA; For &lt;see langword=&quot;XmlDocumentFragment&quot; /&gt; nodes, this property is always &lt;see langword=&quot;null&quot; /&gt;.">這個節點的父代。  
  
對於 <see langword="XmlDocumentFragment" /> 節點，這個屬性必定為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary vsli:raw="Represents the document type declaration.">表示文件類型宣告。</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlDocumentType&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlDocumentType" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The qualified name; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.Name&quot; /&gt; property.">限定名稱；請參閱 <see cref="P:System.Xml.XmlDocumentType.Name" /> 屬性。</param>
      <param name="publicId" vsli:raw="The public identifier; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.PublicId&quot; /&gt; property.">公用識別項；請參閱 <see cref="P:System.Xml.XmlDocumentType.PublicId" /> 屬性。</param>
      <param name="systemId" vsli:raw="The system identifier; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.SystemId&quot; /&gt; property.">系統識別項；請參閱 <see cref="P:System.Xml.XmlDocumentType.SystemId" /> 屬性。</param>
      <param name="internalSubset" vsli:raw="The DTD internal subset; see the &lt;see cref=&quot;P:System.Xml.XmlDocumentType.InternalSubset&quot; /&gt; property.">DTD 內部子集；請參閱 <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> 屬性。</param>
      <param name="doc" vsli:raw="The parent document.">父代文件。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於文件類型節點，不論參數設定為何，複製的節點永遠包含子樹狀結構。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. For &lt;see langword=&quot;XmlDocumentType&quot; /&gt; nodes, this method has no effect.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 對於 <see langword="XmlDocumentType" /> 節點，這個方法沒有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Xml.XmlEntity&quot; /&gt; nodes declared in the document type declaration.">取得在文件類型宣告中宣告之 <see cref="T:System.Xml.XmlEntity" /> 節點的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamedNodeMap&quot; /&gt; containing the &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes. The returned &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; is read-only.">包含 <see langword="XmlEntity" /> 節點的 <see cref="T:System.Xml.XmlNamedNodeMap" />。 傳回的 <see langword="XmlNamedNodeMap" /> 是唯讀的。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary vsli:raw="Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.">取得在 DOCTYPE 宣告上的文件類型定義 (DTD) 內部子集的值。</summary>
      <returns vsli:raw="The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.">DOCTYPE 上的 DTD 內部子集。 如果沒有 DTD 內部子集，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">取得值，表示節點是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because DocumentType nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 如果節點是唯讀的，否則為 <see langword="false" /> 。  
  
由於 DocumentType 節點是唯讀，因此這個屬性一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For DocumentType nodes, this property returns the name of the document type.">對於 DocumentType 節點，這個屬性會傳回文件類型的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For DocumentType nodes, this property returns the name of the document type.">對於 DocumentType 節點，這個屬性會傳回文件類型的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For DocumentType nodes, this value is XmlNodeType.DocumentType.">如果是 DocumentType 節點，則這個值為 XmlNodeType.DocumentType。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary vsli:raw="Gets the collection of &lt;see cref=&quot;T:System.Xml.XmlNotation&quot; /&gt; nodes present in the document type declaration.">取得在文件類型宣告中出現之 <see cref="T:System.Xml.XmlNotation" /> 節點的集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamedNodeMap&quot; /&gt; containing the &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes. The returned &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; is read-only.">包含 <see langword="XmlNotation" /> 節點的 <see cref="T:System.Xml.XmlNamedNodeMap" />。 傳回的 <see langword="XmlNamedNodeMap" /> 是唯讀的。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary vsli:raw="Gets the value of the public identifier on the DOCTYPE declaration.">取得 DOCTYPE 宣告上的公用識別項的值。</summary>
      <returns vsli:raw="The public identifier on the DOCTYPE. If there is no public identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">DOCTYPE 上的公用識別項。 如果沒有公用識別項，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary vsli:raw="Gets the value of the system identifier on the DOCTYPE declaration.">取得 DOCTYPE 宣告上的系統識別項 (System Identifier) 的值。</summary>
      <returns vsli:raw="The system identifier on the DOCTYPE. If there is no system identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">DOCTYPE 上的系統識別項。 如果沒有系統識別項，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary vsli:raw="Represents an element.">代表項目。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlElement" /> 類別的新執行個體。</summary>
      <param name="prefix" vsli:raw="The namespace prefix; see the &lt;see cref=&quot;P:System.Xml.XmlElement.Prefix&quot; /&gt; property.">命名空間前置字元；請參閱 <see cref="P:System.Xml.XmlElement.Prefix" /> 屬性。</param>
      <param name="localName" vsli:raw="The local name; see the &lt;see cref=&quot;P:System.Xml.XmlElement.LocalName&quot; /&gt; property.">本機名稱；請參閱 <see cref="P:System.Xml.XmlElement.LocalName" /> 屬性。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI; see the &lt;see cref=&quot;P:System.Xml.XmlElement.NamespaceURI&quot; /&gt; property.">命名空間 URI；請參閱 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 屬性。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself (and its attributes if the node is an &lt;see langword=&quot;XmlElement&quot; /&gt;).">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身 (如果節點是 <see langword="XmlElement" /> 則還有其屬性)，則為 <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary vsli:raw="Returns the value for the attribute with the specified name.">傳回具有指定名稱之屬性的值。</summary>
      <param name="name" vsli:raw="The name of the attribute to retrieve. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">要擷取之屬性的名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <returns vsli:raw="The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.">指定的屬性值。 如果找不到相符的屬性，或屬性不具指定或預設值，則會傳回空白字串。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Returns the value for the attribute with the specified local name and namespace URI.">傳回具有指定區域名稱和命名空間 URI 之屬性的值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to retrieve.">要擷取的屬性的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute to retrieve.">要擷取的屬性的命名空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.">指定的屬性值。 如果找不到相符的屬性，或屬性不具指定或預設值，則會傳回空白字串。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;XmlAttribute&quot; /&gt; with the specified name.">傳回具有指定名稱的 <see langword="XmlAttribute" />。</summary>
      <param name="name" vsli:raw="The name of the attribute to retrieve. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">要擷取之屬性的名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <returns vsli:raw="The specified &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if a matching attribute was not found.">找不到相符的屬性時所指定的 <see langword="XmlAttribute" /> 或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; with the specified local name and namespace URI.">傳回具有指定區域名稱和命名空間 URI 的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="The specified &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if a matching attribute was not found.">找不到相符的屬性時所指定的 <see langword="XmlAttribute" /> 或 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlElement.Name&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定 <see cref="P:System.Xml.XmlElement.Name" /> 之所有子代 (Descendant) 項目的清單。</summary>
      <param name="name" vsli:raw="The name tag to match. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node. The asterisk (*) is a special value that matches all tags.">要比對的名稱標記。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。 星號 (*) 是與所有標記相符的特殊值。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. The list is empty if there are no matching nodes.">
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有符合的節點，此清單會是空的。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all descendant elements that match the specified &lt;see cref=&quot;P:System.Xml.XmlElement.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlElement.NamespaceURI&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNodeList" />，其中包含符合指定之 <see cref="P:System.Xml.XmlElement.LocalName" /> 和 <see cref="P:System.Xml.XmlElement.NamespaceURI" /> 的所有子代元素的清單。</summary>
      <param name="localName" vsli:raw="The local name to match. The asterisk (*) is a special value that matches all tags.">要相符的區域名稱。 星號 (*) 是與所有標記相符的特殊值。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI to match.">要相符的命名空間 URI。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a list of all matching nodes. The list is empty if there are no matching nodes.">
        <see cref="T:System.Xml.XmlNodeList" />，包含所有符合節點的清單。 如果沒有符合的節點，此清單會是空的。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary vsli:raw="Determines whether the current node has an attribute with the specified name.">判斷目前的節點是否具有指定名稱的屬性。</summary>
      <param name="name" vsli:raw="The name of the attribute to find. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">要尋找的屬性名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has the specified attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點有指定的屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary vsli:raw="Determines whether the current node has an attribute with the specified local name and namespace URI.">判斷目前的節點是否有具有指定區域名稱和命名空間 URI 的屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to find.">要尋找的屬性的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute to find.">要尋找的屬性的命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has the specified attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點有指定的屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary vsli:raw="Removes all specified attributes and children of the current node. Default attributes are not removed.">移除目前節點的所有指定屬性和子項。 不會移除預設屬性。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary vsli:raw="Removes all specified attributes from the element. Default attributes are not removed.">移除項目中的所有指定屬性。 不會移除預設屬性。</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary vsli:raw="Removes an attribute by name.">依名稱移除屬性。</summary>
      <param name="name" vsli:raw="The name of the attribute to remove. This is a qualified name. It is matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the matching node.">要移除的屬性名稱。 這是限定名稱。 它會與符合節點的 <see langword="Name" /> 屬性比對。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only.">節點為唯讀。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary vsli:raw="Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).">移除具有指定區域名稱和命名空間 URI 的屬性  (如果移除的屬性具有預設值，則會立即予以取代)。</summary>
      <param name="localName" vsli:raw="The local name of the attribute to remove.">要移除的屬性的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute to remove.">要移除的屬性的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only.">節點為唯讀。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary vsli:raw="Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).">從項目中移除具有指定索引的屬性節點 (如果移除的屬性具有預設值，則會立即予以取代)。</summary>
      <param name="i" vsli:raw="The index of the node to remove. The first node has index 0.">要移除之節點的索引。 第一個節點的索引為 0。</param>
      <returns vsli:raw="The attribute node removed or &lt;see langword=&quot;null&quot; /&gt; if there is no node at the given index.">移除的屬性節點；或者，如果指定的索引處沒有節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt; specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).">移除區域名稱和命名空間 URI 指定的 <see cref="T:System.Xml.XmlAttribute" /> (如果移除的屬性具有預設值，則會立即予以取代)。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">這個節點是唯讀的。</exception>
      <returns vsli:raw="The removed &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see langword=&quot;XmlElement&quot; /&gt; does not have a matching attribute node.">移除的 <see langword="XmlAttribute" />；如果 <see langword="null" /> 沒有相符的屬性節點，則為 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">移除指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="oldAttr" vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; node to remove. If the removed attribute has a default value, it is immediately replaced.">要移除的 <see langword="XmlAttribute" /> 節點。 如果移除的屬性具預設值，會立即被取代。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">這個節點是唯讀的。</exception>
      <returns vsli:raw="The removed &lt;see langword=&quot;XmlAttribute&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;oldAttr&quot; /&gt; is not an attribute node of the &lt;see langword=&quot;XmlElement&quot; /&gt;.">移除的 <see langword="XmlAttribute" />；如果 <paramref name="oldAttr" /> 不是 <see langword="null" /> 的屬性節點，則為 <see langword="XmlElement" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary vsli:raw="Sets the value of the attribute with the specified name.">設定具有指定名稱之屬性的值。</summary>
      <param name="name" vsli:raw="The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components.">要建立或變更的屬性的名稱。 這是限定名稱。 如果名稱包含冒號，將會剖析為前置詞和區域名稱元件。</param>
      <param name="value" vsli:raw="The value to set for the attribute.">要為屬性設定的值。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified name contains an invalid character.">指定的名稱包含無效的字元。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The node is read-only.">節點為唯讀。</exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Sets the value of the attribute with the specified local name and namespace URI.">設定具有指定區域名稱和命名空間 URI 之屬性的值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <param name="value" vsli:raw="The value to set for the attribute.">要為屬性設定的值。</param>
      <returns vsli:raw="The attribute value.">屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">加入指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; to add.">要加入的 <see langword="XmlAttribute" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.Xml.XmlAttribute&quot; /&gt;.">加入指定的 <see cref="T:System.Xml.XmlAttribute" />。</summary>
      <param name="newAttr" vsli:raw="The &lt;see langword=&quot;XmlAttribute&quot; /&gt; node to add to the attribute collection for this element.">要加入這個項目屬性集合中的 <see langword="XmlAttribute" /> 節點。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newAttr&quot; /&gt; was created from a different document than the one that created this node. Or this node is read-only.">
        <paramref name="newAttr" /> 由不同於建立這個節點的另一份文件所建立。 或者這個節點是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;newAttr&quot; /&gt; is already an attribute of another &lt;see langword=&quot;XmlElement&quot; /&gt; object. You must explicitly clone &lt;see langword=&quot;XmlAttribute&quot; /&gt; nodes to re-use them in other &lt;see langword=&quot;XmlElement&quot; /&gt; objects.">
        <paramref name="newAttr" /> 已經是其他 <see langword="XmlElement" /> 物件的屬性。 您必須明確複製 <see langword="XmlAttribute" /> 節點，以便在其他 <see langword="XmlElement" /> 物件中重複使用這些節點。</exception>
      <returns vsli:raw="If the attribute replaces an existing attribute with the same name, the old &lt;see langword=&quot;XmlAttribute&quot; /&gt; is returned; otherwise, &lt;see langword=&quot;null&quot; /&gt; is returned.">如果這個屬性取代相同名稱的現有屬性，會傳回舊的 <see langword="XmlAttribute" />；否則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the current node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將目前節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlAttributeCollection&quot; /&gt; containing the list of attributes for this node.">取得包含這個節點之屬性清單的 <see cref="T:System.Xml.XmlAttributeCollection" />。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlAttributeCollection&quot; /&gt; containing the list of attributes for this node.">包含這個節點之屬性清單的 <see cref="T:System.Xml.XmlAttributeCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary vsli:raw="Gets a &lt;see langword=&quot;boolean&quot; /&gt; value indicating whether the current node has any attributes.">取得 <see langword="boolean" /> 值，指出目前節點是否具有任何屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點具有屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all its children.">取得或設定節點的串連值和其所有的子節點。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children.">節點的串連值和其所有的子節點。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing just the children of this node.">取得或設定表示此節點子系的標記。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">未正確設定這個屬性之語式時所指定的 XML。</exception>
      <returns vsli:raw="The markup of the children of this node.">此節點子系的標記。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary vsli:raw="Gets or sets the tag format of the element.">取得或設定項目的標記格式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is to be serialized in the short tag format &quot;&amp;lt;item/&amp;gt;&quot;; &lt;see langword=&quot;false&quot; /&gt; for the long format &quot;&amp;lt;item&amp;gt;&amp;lt;/item&amp;gt;&quot;.  &#xA;  &#xA; When setting this property, if set to &lt;see langword=&quot;true&quot; /&gt;, the children of the element are removed and the element is serialized in the short tag format. If set to &lt;see langword=&quot;false&quot; /&gt;, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.  &#xA;  &#xA; This property is a Microsoft extension to the Document Object Model (DOM).">
        <see langword="true" />如果專案要以簡短標記格式 "item/" 進行序列化，請以 "item &lt; &gt; <see langword="false" /> &lt; &gt; &lt; /item" 的 long 格式 &gt; 進行序列化。  
  
設定這個屬性時，如果設定為 <see langword="true" />，則會移除項目的子項目，並以短標記格式序列化項目。 如果設定為 <see langword="false" />，則屬性的值會變更 (不論項目是否具有內容)；如果項目是空的，則會以長格式進行序列化。  
  
這個屬性是文件物件模型的 Microsoft 擴充功能。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">取得目前節點的區域名稱。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is book for the element &amp;lt;bk:book&amp;gt;.">目前節點名稱的前置詞被移除。 例如，為 <see langword="LocalName" /> 元素 &lt; bk： book 的 book &gt; 。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="The qualified name of the node. For &lt;see langword=&quot;XmlElement&quot; /&gt; nodes, this is the tag name of the element.">節點的限定名稱。 針對 <see langword="XmlElement" /> 節點，這是項目的標記名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI of this node.">取得這個節點的命名空間 URI。</summary>
      <returns vsli:raw="The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.">這個節點的命名空間 URI。 如果沒有命名空間 URI，則這個屬性傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; immediately following this element.">取得緊接在這個項目之後的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; immediately following this element.">緊接在這個項目之後的 <see langword="XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlElement&quot; /&gt; nodes, this value is XmlNodeType.Element.">節點類型。 對於 <see langword="XmlElement" /> 節點，這個值為 XmlNodeType.Element。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlDocument&quot; /&gt; to which this element belongs.">這個項目所屬的 <see langword="XmlDocument" />。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.">表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary vsli:raw="Gets or sets the namespace prefix of this node.">取得或設定這個節點的命名空間前置詞。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">此節點是唯讀的。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified prefix contains an invalid character.  &#xA;  &#xA; The specified prefix is malformed.  &#xA;  &#xA; The namespaceURI of this node is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace.">指定的前置詞包含無效的字元。  
  
指定的前置詞格式不正確。  
  
此節點的 namespaceURI 為 <see langword="null" />。  
  
指定的前置詞為 "xml"，且此節點的 namespaceURI 與 http://www.w3.org/XML/1998/namespace \(英文\) 的不同。</exception>
      <returns vsli:raw="The namespace prefix of this node. If there is no prefix, this property returns String.Empty.">這個節點的命名空間前置詞。 如果沒有前置詞，則這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary vsli:raw="Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.">取得後結構描述驗證資訊集，在結構描述驗證之後已將其指派給這個節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the post schema validation infoset of this node.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含這個節點的後結構描述驗證資訊集。</returns>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary vsli:raw="Represents an entity declaration, such as &amp;lt;!ENTITY... &amp;gt;.">代表實體宣告，例如 &lt;!ENTITY... &gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node. Entity nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlEntity&quot; /&gt; object throws an exception.">建立這個節點的複本。 無法複製 Entity 節點。 在 <see cref="T:System.Xml.XmlEntity" /> 物件上呼叫這個方法會擲回例外狀況。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Entity nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlEntity&quot; /&gt; object throws an exception.">無法複製 Entity 節點。 在 <see cref="T:System.Xml.XmlEntity" /> 物件上呼叫這個方法會擲回例外狀況。</exception>
      <returns vsli:raw="A copy of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; from which the method is called.">方法呼叫來源 <see cref="T:System.Xml.XmlNode" /> 的複本。</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, this method has no effect.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 對於 <see langword="XmlEntity" /> 節點，這個方法沒有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, this method has no effect.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 對於 <see langword="XmlEntity" /> 節點，這個方法沒有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary vsli:raw="Gets the base Uniform Resource Identifier (URI) of the current node.">取得目前節點的基底統一資源識別項 (URI)。</summary>
      <returns vsli:raw="The location from which the node was loaded.">節點載入的位置。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary vsli:raw="Gets the concatenated values of the entity node and all its children.">取得實體節點的串連值和其所有的子節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempting to set the property.">嘗試設定這個屬性。</exception>
      <returns vsli:raw="The concatenated values of the node and all its children.">節點的串連值和其所有的子節點。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary vsli:raw="Gets the markup representing the children of this node.">取得表示這個節點子系的標記。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempting to set the property.">嘗試設定這個屬性。</exception>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, String.Empty is returned.">對於 <see langword="XmlEntity" /> 節點，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">取得值，表示節點是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 如果節點是唯讀的，否則為 <see langword="false" /> 。  
  
因為 <see langword="XmlEntity" /> 節點是唯讀，所以這個屬性必定傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary vsli:raw="Gets the name of the node without the namespace prefix.">取得節點的名稱而無命名空間前置詞。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, this property returns the name of the entity.">對於 <see langword="XmlEntity" /> 節點，這個屬性會傳回實體的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary vsli:raw="Gets the name of the node.">取得節點的名稱。</summary>
      <returns vsli:raw="The name of the entity.">實體的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary vsli:raw="Gets the type of the node.">取得節點的類型。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, the value is XmlNodeType.Entity.">節點類型。 對於 <see langword="XmlEntity" /> 節點，其值為 XmlNodeType.Entity。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary vsli:raw="Gets the name of the optional NDATA attribute on the entity declaration.">取得實體宣告上選擇性的 NDATA 屬性的名稱。</summary>
      <returns vsli:raw="The name of the NDATA attribute. If there is no NDATA, &lt;see langword=&quot;null&quot; /&gt; is returned.">NDATA 屬性的名稱。 如果沒有 NDATA，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary vsli:raw="Gets the markup representing this node and all its children.">取得表示這個節點及其所有子系的標記。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntity&quot; /&gt; nodes, String.Empty is returned.">對於 <see langword="XmlEntity" /> 節點，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary vsli:raw="Gets the value of the public identifier on the entity declaration.">取得實體宣告的公用識別項的值。</summary>
      <returns vsli:raw="The public identifier on the entity. If there is no public identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">實體的公用識別項。 如果沒有公用識別項，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary vsli:raw="Gets the value of the system identifier on the entity declaration.">取得實體宣告的系統識別項 (System Identifier) 的值。</summary>
      <returns vsli:raw="The system identifier on the entity. If there is no system identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">實體的系統識別項。 如果沒有系統識別項，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary vsli:raw="Represents an entity reference node.">表示實體參考節點。</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlEntityReference&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlEntityReference" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The name of the entity reference; see the &lt;see cref=&quot;P:System.Xml.XmlEntityReference.Name&quot; /&gt; property.">實體參考的名稱；請參閱 <see cref="P:System.Xml.XmlEntityReference.Name" /> 屬性。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於 <see langword="XmlEntityReference" /> 節點，這個方法一定傳回沒有子節點的實體參考節點。 當節點插入父代時，就會設定替代文字。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary vsli:raw="Gets the base Uniform Resource Identifier (URI) of the current node.">取得目前節點的基底統一資源識別項 (URI)。</summary>
      <returns vsli:raw="The location from which the node was loaded.">節點載入的位置。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">取得值，表示節點是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">如果節點是唯讀，則為 <see langword="true" />，否則為 <see langword="false" />。  
  
因為 <see langword="XmlEntityReference" /> 節點是唯讀，所以這個屬性必定傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, this property returns the name of the entity referenced.">對於 <see langword="XmlEntityReference" /> 節點，這個屬性會傳回所參考的實體名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary vsli:raw="Gets the name of the node.">取得節點的名稱。</summary>
      <returns vsli:raw="The name of the entity referenced.">所參考的實體名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary vsli:raw="Gets the type of the node.">取得節點的類型。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, the value is XmlNodeType.EntityReference.">節點類型。 如果是 <see langword="XmlEntityReference" /> 節點，則這個值會是 XmlNodeType.EntityReference。</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Node is read-only.">節點是唯讀的。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting the property.">設定屬性。</exception>
      <returns vsli:raw="The value of the node. For &lt;see langword=&quot;XmlEntityReference&quot; /&gt; nodes, this property returns &lt;see langword=&quot;null&quot; /&gt;.">節點的值。 對於 <see langword="XmlEntityReference" /> 節點，這個屬性傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary vsli:raw="Returns detailed information about the last exception.">傳回有關上次例外狀況的詳細資訊。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class.">初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class using the information in the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects.">使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中的資訊，初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object containing all the properties of an &lt;see langword=&quot;XmlException&quot; /&gt;.">
        <see langword="SerializationInfo" /> 物件包含 <see langword="XmlException" /> 所有的屬性。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object containing the context information.">包含內容資訊的 <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class with a specified error message.">使用指定的錯誤訊息，初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error description.">錯誤描述。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class.">初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The description of the error condition.">錯誤條件的描述。</param>
      <param name="innerException" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that threw the &lt;see langword=&quot;XmlException&quot; /&gt;, if any. This value can be &lt;see langword=&quot;null&quot; /&gt;.">擲回 <see cref="T:System.Exception" /> 的 <see langword="XmlException" /> (如果有的話)。 這個值可以是 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlException&quot; /&gt; class with the specified message, inner exception, line number, and line position.">使用指定的訊息、內部例外狀況、行號和行位置，初始化 <see langword="XmlException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The error description.">錯誤描述。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception. This value can be &lt;see langword=&quot;null&quot; /&gt;.">做為目前例外狀況發生原因的例外狀況。 這個值可以是 <see langword="null" />。</param>
      <param name="lineNumber" vsli:raw="The line number indicating where the error occurred.">指示發生錯誤之位置的行號。</param>
      <param name="linePosition" vsli:raw="The line position indicating where the error occurred.">指示發生錯誤之位置的行位置。</param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XmlException&quot; /&gt; properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; class for the given &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">將所有 <see langword="XmlException" /> 屬性資料流至指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object.">
        <see langword="SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary vsli:raw="Gets the line number indicating where the error occurred. Line numbers start at 1.">取得行號，指出發生錯誤的位置。 行號從 1 開始。</summary>
      <returns vsli:raw="The line number indicating where the error occurred.">指示發生錯誤之位置的行號。</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary vsli:raw="Gets the line position indicating where the error occurred. Line position starts at 1.">取得行位置，指出發生錯誤的位置。 行位置從 1 開始。</summary>
      <returns vsli:raw="The line position indicating where the error occurred.">指示發生錯誤之位置的行位置。</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary vsli:raw="Gets a message describing the current exception.">取得描述目前例外狀況的訊息。</summary>
      <returns vsli:raw="The error message that explains the reason for the exception.">解釋例外狀況原因的錯誤訊息。</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary vsli:raw="Gets the location of the XML file.">取得 XML 檔案的位置。</summary>
      <returns vsli:raw="The source URI for the XML data. If there is no source URI, this property returns &lt;see langword=&quot;null&quot; /&gt;.">XML 資料的來源 URI。 如果沒有來源 URI，這個屬性會傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary vsli:raw="Defines the context for a set of &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; objects.">定義一組 <see cref="T:System.Xml.XmlDocument" /> 物件的內容。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlImplementation" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlImplementation&quot; /&gt; class with the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; specified.">使用指定的 <see cref="T:System.Xml.XmlImplementation" />，初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlNameTable" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;.">建立新的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns vsli:raw="The new &lt;see langword=&quot;XmlDocument&quot; /&gt; object.">新的 <see langword="XmlDocument" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary vsli:raw="Tests if the Document Object Model (DOM) implementation implements a specific feature.">測試文件物件模型 (DOM) 實作是否實作指定的功能。</summary>
      <param name="strFeature" vsli:raw="The package name of the feature to test. This name is not case-sensitive.">要測試的功能套件 (Package) 名稱。 這個名稱並不區分大小寫。</param>
      <param name="strVersion" vsli:raw="This is the version number of the package name to test. If the version is not specified (&lt;see langword=&quot;null&quot; /&gt;), supporting any version of the feature causes the method to return &lt;see langword=&quot;true&quot; /&gt;.">這是要測試的套件名稱的版本編號。 如果尚未指定版本 (<see langword="null" />)，則支援這個功能的任何版本都會讓這個方法傳回 <see langword="true" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the feature is implemented in the specified version; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; The following table shows the combinations that cause &lt;see langword=&quot;HasFeature&quot; /&gt; to return &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; strFeature&lt;/term&gt;&lt;description&gt; strVersion&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 1.0&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 2.0&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">如果在指定的版本實作這個功能，則為 <see langword="true" />，否則為 <see langword="false" />。  
  
下表顯示會使 <see langword="HasFeature" /> 傳回 <see langword="true" /> 的組合。  
  
 <list type="table"><listheader><term> strFeature</term><description> strVersion</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description> 2.0</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary vsli:raw="Gets the node immediately preceding or following this node.">取得這個節點的前置或後置節點。</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary vsli:raw="Gets the node immediately following this node.">取得這個節點的後置節點。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; immediately following this node or &lt;see langword=&quot;null&quot; /&gt; if one does not exist.">這個節點的後置 <see cref="T:System.Xml.XmlNode" />，如果這個節點不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary vsli:raw="Gets the node immediately preceding this node.">取得這個節點的前置節點。</summary>
      <returns vsli:raw="The preceding &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if one does not exist.">前置的 <see cref="T:System.Xml.XmlNode" />，如果這個節點不存在，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary vsli:raw="Represents a collection of nodes that can be accessed by name or index.">代表可用名稱或索引存取的節點集合。</summary>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary vsli:raw="Provides support for the &quot;foreach&quot; style iteration over the collection of nodes in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">提供 <see langword="XmlNamedNodeMap" /> 中節點集合上「foreach」樣式重複的支援。</summary>
      <returns vsli:raw="An enumerator object.">列舉程式物件。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary vsli:raw="Retrieves an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; specified by name.">依指定名稱來擷取 <see cref="T:System.Xml.XmlNode" />。</summary>
      <param name="name" vsli:raw="The qualified name of the node to retrieve. It is matched against the &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property of the matching node.">要擷取的節點的限定名稱 (Qualified Name)。 它會與符合節點的 <see cref="P:System.Xml.XmlNode.Name" /> 屬性比對。</param>
      <returns vsli:raw="An &lt;see langword=&quot;XmlNode&quot; /&gt; with the specified name or &lt;see langword=&quot;null&quot; /&gt; if a matching node is not found.">具有指定名稱的 <see langword="XmlNode" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary vsli:raw="Retrieves a node with the matching &lt;see cref=&quot;P:System.Xml.XmlNode.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">擷取具有符合的 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的節點。</summary>
      <param name="localName" vsli:raw="The local name of the node to retrieve.">要擷取的節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace Uniform Resource Identifier (URI) of the node to retrieve.">取得要擷取之節點的命名空間統一資源識別元 (URI)。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the matching local name and namespace URI or &lt;see langword=&quot;null&quot; /&gt; if a matching node was not found.">具有符合的區域名稱與命名空間 (Namespace) URI 的 <see cref="T:System.Xml.XmlNode" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary vsli:raw="Retrieves the node at the specified index in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">擷取 <see langword="XmlNamedNodeMap" /> 中位於指定索引的節點。</summary>
      <param name="index" vsli:raw="The index position of the node to retrieve from the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is &lt;see cref=&quot;P:System.Xml.XmlNamedNodeMap.Count&quot; /&gt; -1.">從 <see langword="XmlNamedNodeMap" /> 擷取的節點的索引位置。 索引是以零起始的；因此第一個節點的索引為 0，最後一個節點的索引為 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; at the specified index. If &lt;paramref name=&quot;index&quot; /&gt; is less than 0 or greater than or equal to the &lt;see cref=&quot;P:System.Xml.XmlNamedNodeMap.Count&quot; /&gt; property, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定之索引處的 <see cref="T:System.Xml.XmlNode" />。 如果 <paramref name="index" /> 小於 0 或大於等於 <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> 屬性，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary vsli:raw="Removes the node from the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">從 <see langword="XmlNamedNodeMap" /> 移除節點。</summary>
      <param name="name" vsli:raw="The qualified name of the node to remove. The name is matched against the &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property of the matching node.">要移除的節點的限定名稱。 它會與符合節點的 <see cref="P:System.Xml.XmlNode.Name" /> 屬性相符。</param>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; removed from this &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if a matching node was not found.">從這個 <see langword="XmlNode" /> 移除 <see langword="XmlNamedNodeMap" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary vsli:raw="Removes a node with the matching &lt;see cref=&quot;P:System.Xml.XmlNode.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">移除具有符合的 <see cref="P:System.Xml.XmlNode.LocalName" /> 和 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的節點。</summary>
      <param name="localName" vsli:raw="The local name of the node to remove.">要移除的節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the node to remove.">要移除的節點的命名空間 URI。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; removed or &lt;see langword=&quot;null&quot; /&gt; if a matching node was not found.">移除 <see cref="T:System.Xml.XmlNode" />；如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; using its &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt; property.">使用其 <see cref="T:System.Xml.XmlNode" /> 屬性加入 <see cref="P:System.Xml.XmlNode.Name" />。</summary>
      <param name="node" vsli:raw="An &lt;see langword=&quot;XmlNode&quot; /&gt; to store in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;. If a node with that name is already present in the map, it is replaced by the new one.">儲存在 <see langword="XmlNode" /> 中的 <see langword="XmlNamedNodeMap" />。 如果具有該名稱的節點已經在對應中，就會以新節點取代。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;node&quot; /&gt; was created from a different &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; than the one that created the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;; or the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt; is read-only.">從不同於建立 <see langword="XmlNamedNodeMap" /> 的 <see cref="T:System.Xml.XmlDocument" /> 來建立 <paramref name="node" />；否則 <see langword="XmlNamedNodeMap" /> 為唯讀。</exception>
      <returns vsli:raw="If the &lt;paramref name=&quot;node&quot; /&gt; replaces an existing node with the same name, the old node is returned; otherwise, &lt;see langword=&quot;null&quot; /&gt; is returned.">如果 <paramref name="node" /> 取代同名的現有節點，則傳回舊節點；否則傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see langword=&quot;XmlNamedNodeMap&quot; /&gt;.">取得 <see langword="XmlNamedNodeMap" /> 中的節點數目。</summary>
      <returns vsli:raw="The number of nodes.">節點的數目。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary vsli:raw="Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces.">解析、加入並移除集合的命名空間，並且為這些命名空間提供範圍管理。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlNamespaceManager" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nameTable" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; is passed to the constructor.">
        <see langword="null" /> 被傳送至建構函式。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary vsli:raw="Adds the given namespace to the collection.">將指定的命名空間加入集合中。</summary>
      <param name="prefix" vsli:raw="The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.  &#xA;  &#xA; Note If the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, refer to the &lt;see cref=&quot;M:System.Xml.XmlNode.SelectNodes(System.String)&quot; /&gt; and &lt;see cref=&quot;M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)&quot; /&gt; methods.">與要加入的命名空間關聯的前置詞。 使用 String.Empty 來加入預設命名空間。  
  
 附註：如果 <see cref="T:System.Xml.XmlNamespaceManager" /> 將用於解析 XML 路徑語言 (XPath) 運算式中的命名空間，則必須指定前置詞。 如果 XPath 運算式不包括前置詞，則會假設命名空間統一資源識別項 (URI) 為空命名空間。 如需有關 XPath 運算式以及 <see cref="T:System.Xml.XmlNamespaceManager" /> 的詳細資訊，請參考 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> 和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> 方法。</param>
      <param name="uri" vsli:raw="The namespace to add.">要加入的命名空間。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value for &lt;paramref name=&quot;prefix&quot; /&gt; is &quot;xml&quot; or &quot;xmlns&quot;.">
        <paramref name="prefix" /> 的值為 "xml" 或 "xmlns"。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value for &lt;paramref name=&quot;prefix&quot; /&gt; or &lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefix" /> 或 <paramref name="uri" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary vsli:raw="Returns an enumerator to use to iterate through the namespaces in the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">傳回用於逐一查看 <see cref="T:System.Xml.XmlNamespaceManager" /> 中命名空間的列舉值。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; containing the prefixes stored by the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" />，包含 <see cref="T:System.Xml.XmlNamespaceManager" /> 儲存的前置詞。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.">取得命名空間名稱集合，會根據前置詞索引，可用於列舉目前在範圍中的命名空間。</summary>
      <param name="scope" vsli:raw="An enumeration value that specifies the type of namespace nodes to return.">列舉值，指定要傳回之命名空間節點的類型。</param>
      <returns vsli:raw="A collection of namespace and prefix pairs currently in scope.">目前在範圍中的命名空間和前置詞配對集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary vsli:raw="Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.">取得值，表示提供的前置詞是否具有針對目前推送的範圍中定義的命名空間。</summary>
      <param name="prefix" vsli:raw="The prefix of the namespace you want to find.">您要尋找的命名空間的前置詞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a namespace defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已經定義命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary vsli:raw="Gets the namespace URI for the specified prefix.">取得指定前置詞的命名空間 URI。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty.">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送 String.Empty。</param>
      <returns vsli:raw="The namespace URI for &lt;paramref name=&quot;prefix&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if there is no mapped namespace. The returned string is atomized.  &#xA;  &#xA; For more information on atomized strings, see the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; class.">如果沒有對應的命名空間，則這會是 <paramref name="prefix" /> 或 <see langword="null" /> 的命名空間 URI。 已擷取傳回的字串。  
  
如需原子化字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" /> 類別。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary vsli:raw="Finds the prefix declared for the given namespace URI.">尋找為指定命名空間 URI 宣告的前置詞。</summary>
      <param name="uri" vsli:raw="The namespace to resolve for the prefix.">用來解析前置詞的命名空間。</param>
      <returns vsli:raw="The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then &lt;see langword=&quot;null&quot; /&gt; is returned.">符合的前置詞。 如果沒有對應的前置詞，此方法會傳回 String.Empty。 如果提供了 null 值，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary vsli:raw="Pops a namespace scope off the stack.">將命名空間範圍自堆疊取出。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are namespace scopes left on the stack; &lt;see langword=&quot;false&quot; /&gt; if there are no more namespaces to pop.">如果堆疊上留有命名空間範圍，則為 <see langword="true" />，若未取出其他命名空間，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary vsli:raw="Pushes a namespace scope onto the stack.">將命名空間範圍推送至堆疊。</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary vsli:raw="Removes the given namespace for the given prefix.">移除指定前置詞的指定命名空間。</summary>
      <param name="prefix" vsli:raw="The prefix for the namespace.">命名空間的前置詞</param>
      <param name="uri" vsli:raw="The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored.">指定的前置詞中要移除的命名空間。 命名空間由目前的命名空間範圍移除。 忽略目前範圍以外的命名空間。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of &lt;paramref name=&quot;prefix&quot; /&gt; or &lt;paramref name=&quot;uri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="prefix" /> 或 <paramref name="uri" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary vsli:raw="Gets the namespace URI for the default namespace.">取得預設命名空間的命名空間 URI。</summary>
      <returns vsli:raw="The namespace URI for the default namespace, or an empty string if there is no default namespace.">預設命名空間的命名空間 URI，如果沒有預設命名空間，則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this object.">取得與這個物件相關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used by this object.">這個物件所使用的 <see cref="T:System.Xml.XmlNameTable" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary vsli:raw="Defines the namespace scope.">定義命名空間範圍。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary vsli:raw="All namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.">在目前節點範圍中定義的所有命名空間， 包括一律以隱含方式宣告的 xmlns:xml 命名空間。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary vsli:raw="All namespaces defined in the scope of the current node, excluding the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.">目前節點範圍中定義的所有命名空間，但是 xmlns:xml 命名空間 (一律以隱含方式宣告) 除外。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary vsli:raw="All namespaces that are defined locally at the current node.">在目前節點上本機定義的所有命名空間。</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary vsli:raw="Table of atomized string objects.">原子化字串物件的資料表。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, atomizes the specified string and adds it to the &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">在衍生類別中覆寫時，原子化指定的字串，並將它加入至 <see langword="XmlNameTable" />。</summary>
      <param name="array" vsli:raw="The character array containing the name to add.">字元陣列，包含要加入的名稱。</param>
      <param name="offset" vsli:raw="Zero-based index into the array specifying the first character of the name.">陣列中以零起始的索引，指定名稱的第一個字元。</param>
      <param name="length" vsli:raw="The number of characters in the name.">名稱中字元的數目。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;offset&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;length&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;length&quot; /&gt; =0.">0 &gt; <paramref name="offset" />  
  
-或- 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
-或- 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
如果 <paramref name="length" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; &amp;lt; 0.">
        <paramref name="length" /> &lt; 0。</exception>
      <returns vsli:raw="The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.">新的原子化字串或已經存在的現有原子化字串。 如果長度為零，則傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary vsli:raw="When overridden in a derived class, atomizes the specified string and adds it to the &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">在衍生類別中覆寫時，原子化指定的字串，並將它加入至 <see langword="XmlNameTable" />。</summary>
      <param name="array" vsli:raw="The name to add.">要加入的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The new atomized string or the existing one if it already exists.">新的原子化字串或已經存在的現有原子化字串。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.">在衍生類別中覆寫時，取得包含相同字元的原子化字串做為指定陣列中的指定字元範圍。</summary>
      <param name="array" vsli:raw="The character array containing the name to look up.">字元陣列，包含要查詢的名稱。</param>
      <param name="offset" vsli:raw="The zero-based index into the array specifying the first character of the name.">陣列中以零起始的索引，指定名稱的第一個字元。</param>
      <param name="length" vsli:raw="The number of characters in the name.">名稱中字元的數目。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="0 &amp;gt; &lt;paramref name=&quot;offset&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; &amp;gt;= &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;length&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length  &#xA;  &#xA; The above conditions do not cause an exception to be thrown if &lt;paramref name=&quot;length&quot; /&gt; =0.">0 &gt; <paramref name="offset" />  
  
-或- 
 <paramref name="offset" /> &gt;= <paramref name="array" />.Length 
-或- 
 <paramref name="length" /> &gt; <paramref name="array" />.Length 
如果 <paramref name="length" /> =0，上述條件就不會造成例外狀況擲回。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; &amp;lt; 0.">
        <paramref name="length" /> &lt; 0。</exception>
      <returns vsli:raw="The atomized string or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized. If &lt;paramref name=&quot;length&quot; /&gt; is zero, String.Empty is returned.">原子化字串，如果字串尚未原子化，則為 <see langword="null" />。 如果 <paramref name="length" /> 為零，則會傳回 String.Empty。</returns>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the atomized string containing the same value as the specified string.">在衍生類別中覆寫時，取得包含相同值的原子化字串做為指定的字串。</summary>
      <param name="array" vsli:raw="The name to look up.">要查詢的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The atomized string or &lt;see langword=&quot;null&quot; /&gt; if the string has not already been atomized.">原子化字串，如果字串尚未原子化，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary vsli:raw="Represents a single node in the XML document.">表示 XML 文件中的單一節點。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the end of the list of child nodes, of this node.">將指定的節點加入這個節點之子節點清單的結尾。</summary>
      <param name="newChild" vsli:raw="The node to add. All the contents of the node to be added are moved into the specified location.">要加入的節點。 要加入之節點的所有內容會移入指定的位置。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The node added.">已加入的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of the node, when overridden in a derived class.">在衍生類別中覆寫時，建立節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling this method on a node type that cannot be cloned.">在無法複製的節點型別上，呼叫這個方法。</exception>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; for navigating this object.">建立 <see cref="T:System.Xml.XPath.XPathNavigator" /> 以瀏覽這個物件。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XPathNavigator&quot; /&gt; object used to navigate the node. The &lt;see langword=&quot;XPathNavigator&quot; /&gt; is positioned on the node from which the method was called. It is not positioned on the root of the document.">用來巡覽節點的 <see langword="XPathNavigator" /> 物件。 <see langword="XPathNavigator" /> 位於這個節點上，在此節點呼叫此方法。 它並非位於文件的根。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that iterates through the child nodes in the current node.">取得逐一查看目前節點中子節點的列舉程式。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the child nodes in the current node.">
        <see cref="T:System.Collections.IEnumerator" /> 物件，可用來逐一查看目前節點中的子節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary vsli:raw="Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.">查閱目前節點範圍內最接近指定前置詞的 xmlns 宣告，並傳回宣告中的命名空間 URI。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to find.">您要尋找其命名空間 URI 的前置詞。</param>
      <returns vsli:raw="The namespace URI of the specified prefix.">指定前置詞的命名空間 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary vsli:raw="Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.">查閱目前節點範圍內最接近指定命名空間 URI 的 xmlns 宣告，並傳回宣告中所定義的前置詞。</summary>
      <param name="namespaceURI" vsli:raw="The namespace URI whose prefix you want to find.">您要尋找其前置詞的命名空間 URI。</param>
      <returns vsli:raw="The prefix for the specified namespace URI.">指定命名空間 URI 的前置詞。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately after the specified reference node.">在指定的參考節點之後，插入指定的節點。</summary>
      <param name="newChild" vsli:raw="The node to insert.">要插入的節點。</param>
      <param name="refChild" vsli:raw="The reference node. &lt;paramref name=&quot;newChild&quot; /&gt; is placed after &lt;paramref name=&quot;refChild&quot; /&gt;.">參考節點。 <paramref name="newChild" /> 會置於 <paramref name="refChild" /> 之後。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
<paramref name="refChild" /> 不是這個節點的子節點。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The node being inserted.">要插入的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Inserts the specified node immediately before the specified reference node.">在指定的參考節點之前，插入指定的節點。</summary>
      <param name="newChild" vsli:raw="The node to insert.">要插入的節點。</param>
      <param name="refChild" vsli:raw="The reference node. &lt;paramref name=&quot;newChild&quot; /&gt; is placed before this node.">參考節點。 <paramref name="newChild" /> 會置於這個節點之前。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">目前這種型別的節點不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; The &lt;paramref name=&quot;refChild&quot; /&gt; is not a child of this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
<paramref name="refChild" /> 不是這個節點的子節點。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The node being inserted.">要插入的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary vsli:raw="Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a &quot;normal&quot; form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.">使這個 XmlNode 之下子樹狀結構的整個深度中所有 XmlText 節點成為「一般」形式，其中只用標記 (Markup) (亦即標記 (Tag)、註解、處理指示、CDATA 區段與實體參考) 來分隔 XmlText 節點，也就是說，沒有相鄰的 XmlText 節點。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary vsli:raw="Adds the specified node to the beginning of the list of child nodes for this node.">將指定的節點加入這個節點之子節點清單的開頭。</summary>
      <param name="newChild" vsli:raw="The node to add. All the contents of the node to be added are moved into the specified location.">要加入的節點。 要加入之節點的所有內容會移入指定的位置。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
這個節點是唯讀的。</exception>
      <returns vsli:raw="The node added.">已加入的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary vsli:raw="Removes all the child nodes and/or attributes of the current node.">移除目前節點的所有子節點和/或屬性。</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary vsli:raw="Removes specified child node.">移除指定的子節點。</summary>
      <param name="oldChild" vsli:raw="The node being removed.">正在移除的節點。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node. Or this node is read-only.">
        <paramref name="oldChild" /> 不是這個節點的子節點。 或者這個節點是唯讀的。</exception>
      <returns vsli:raw="The node removed.">移除的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary vsli:raw="Replaces the child node &lt;paramref name=&quot;oldChild&quot; /&gt; with &lt;paramref name=&quot;newChild&quot; /&gt; node.">將子節點 <paramref name="oldChild" /> 用 <paramref name="newChild" /> 節點取代。</summary>
      <param name="newChild" vsli:raw="The new node to put in the child list.">要放入子節點清單中的新節點。</param>
      <param name="oldChild" vsli:raw="The node being replaced in the list.">清單中要被取代的節點。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This node is of a type that does not allow child nodes of the type of the &lt;paramref name=&quot;newChild&quot; /&gt; node.  &#xA;  &#xA; The &lt;paramref name=&quot;newChild&quot; /&gt; is an ancestor of this node.">這個節點的型別不允許 <paramref name="newChild" /> 節點型別的子節點。  
  
<paramref name="newChild" /> 是這個節點的上階。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;newChild&quot; /&gt; was created from a different document than the one that created this node.  &#xA;  &#xA; This node is read-only.  &#xA;  &#xA; The &lt;paramref name=&quot;oldChild&quot; /&gt; is not a child of this node.">
        <paramref name="newChild" /> 由不同於建立這個節點的另一份文件所建立。  
  
這個節點是唯讀的。  
  
<paramref name="oldChild" /> 不是這個節點的子節點。</exception>
      <returns vsli:raw="The node replaced.">被取代的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary vsli:raw="Selects a list of nodes matching the XPath expression.">選取符合 XPath 運算式的節點清單。</summary>
      <param name="xpath" vsli:raw="The XPath expression.">XPath 運算式。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix. See XPath Examples.">XPath 運算式包含前置詞。 請參閱 XPath 範例。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a collection of nodes matching the XPath query.">
        <see cref="T:System.Xml.XmlNodeList" />，包含符合 XPath 查詢的節點集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">選取符合 XPath 運算式的節點清單。 使用提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 解析 XPath 運算式中找到的任何前置詞。</summary>
      <param name="xpath" vsli:raw="The XPath expression. See XPath Examples.">XPath 運算式。 請參閱 XPath 範例。</param>
      <param name="nsmgr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for resolving namespaces for prefixes in the XPath expression.">
        <see cref="T:System.Xml.XmlNamespaceManager" />，用來解析 XPath 運算式中前置詞的命名空間。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix which is not defined in the &lt;see langword=&quot;XmlNamespaceManager&quot; /&gt;.">XPath 運算式包含未定義於 <see langword="XmlNamespaceManager" /> 中的前置詞。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; containing a collection of nodes matching the XPath query.">
        <see cref="T:System.Xml.XmlNodeList" />，包含符合 XPath 查詢的節點集合。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary vsli:raw="Selects the first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath expression.">選取符合 XPath 運算式的第一個 <see langword="XmlNode" />。</summary>
      <param name="xpath" vsli:raw="The XPath expression. See XPath Examples.">XPath 運算式。 請參閱 XPath 範例。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix.">XPath 運算式包含前置詞。</exception>
      <returns vsli:raw="The first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath query or &lt;see langword=&quot;null&quot; /&gt; if no matching node is found.">符合 XPath 查詢的第一個 <see langword="XmlNode" />，如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="Selects the first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">選取符合 XPath 運算式的第一個 <see langword="XmlNode" />。 使用提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 解析 XPath 運算式中找到的任何前置詞。</summary>
      <param name="xpath" vsli:raw="The XPath expression. See XPath Examples.">XPath 運算式。 請參閱 XPath 範例。</param>
      <param name="nsmgr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for resolving namespaces for prefixes in the XPath expression.">
        <see cref="T:System.Xml.XmlNamespaceManager" />，用來解析 XPath 運算式中前置詞的命名空間。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression contains a prefix which is not defined in the &lt;see langword=&quot;XmlNamespaceManager&quot; /&gt;.">XPath 運算式包含未定義於 <see langword="XmlNamespaceManager" /> 中的前置詞。</exception>
      <returns vsli:raw="The first &lt;see langword=&quot;XmlNode&quot; /&gt; that matches the XPath query or &lt;see langword=&quot;null&quot; /&gt; if no matching node is found.">符合 XPath 查詢的第一個 <see langword="XmlNode" />，如果找不到符合的節點，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary vsli:raw="Tests if the DOM implementation implements a specific feature.">測試 DOM 實作 (Implementation) 是否實作特定功能。</summary>
      <param name="feature" vsli:raw="The package name of the feature to test. This name is not case-sensitive.">要測試的功能套件 (Package) 名稱。 這個名稱並不區分大小寫。</param>
      <param name="version" vsli:raw="The version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true.">要測試的封裝名稱版本編號。 如果沒有指定版本 (null)，則支援任何版本的功能，將使這個方法傳回 true。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the feature is implemented in the specified version; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The following table describes the combinations that return &lt;see langword=&quot;true&quot; /&gt;.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Feature&lt;/term&gt;&lt;description&gt; Version&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 1.0&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XML&lt;/term&gt;&lt;description&gt; 2.0&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">如果在指定的版本實作這個功能，則為 <see langword="true" />，否則為 <see langword="false" />。 下表說明傳回 <see langword="true" /> 的組合。  
  
 <list type="table"><listheader><term> 功能</term><description> 版本</description></listheader><item><term> XML</term><description> 1.0</description></item><item><term> XML</term><description> 2.0</description></item></list></returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.XmlNode.GetEnumerator&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.XmlNode.GetEnumerator" />。</summary>
      <returns vsli:raw="An enumerator for the collection.">集合的列舉值。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.XmlNode.Clone&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.XmlNode.Clone" />。</summary>
      <returns vsli:raw="A copy of the node from which it is called.">呼叫來源節點的複本。</returns>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the child nodes of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;, when overridden in a derived class.">在衍生類別中覆寫時，將節點的所有子節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the current node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;, when overridden in a derived class.">在衍生類別中覆寫時，將目前節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlAttributeCollection&quot; /&gt; containing the attributes of this node.">取得包含這個節點屬性 (Attribute) 的 <see cref="T:System.Xml.XmlAttributeCollection" />。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlAttributeCollection&quot; /&gt; containing the attributes of the node.  &#xA;  &#xA; If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="XmlAttributeCollection" />，包含這個節點的屬性。  
  
如果這個節點的類型為 XmlNodeType.Element，則傳回這個節點的屬性。 否則，這個函式會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">取得目前節點的基底 (Base) URI。</summary>
      <returns vsli:raw="The location from which the node was loaded or String.Empty if the node has no base URI.">節點載入的位置；如果節點沒有基底 URI，則為 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary vsli:raw="Gets all the child nodes of the node.">取得節點的所有子節點。</summary>
      <returns vsli:raw="An object that contains all the child nodes of the node.  &#xA;  &#xA; If there are no child nodes, this property returns an empty &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt;.">物件，包含節點的所有子節點。  
  
如果沒有子節點，這個屬性傳回空的 <see cref="T:System.Xml.XmlNodeList" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary vsli:raw="Gets the first child of the node.">取得節點的第一個子節點。</summary>
      <returns vsli:raw="The first child of the node. If there is no such node, &lt;see langword=&quot;null&quot; /&gt; is returned.">節點的第一個子節點。 如果沒有這種節點，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary vsli:raw="Gets a value indicating whether this node has any child nodes.">取得值，指出這個節點是否有子節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node has child nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果該節點有子節點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all its child nodes.">取得或設定節點和其所有子節點的串連值。</summary>
      <returns vsli:raw="The concatenated values of the node and all its child nodes.">節點和其所有子節點的串連值。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing only the child nodes of this node.">取得或設定只表示這個節點之子節點的標記。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property on a node that cannot have child nodes.">在不能有子節點的節點上，設定這個屬性。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML specified when setting this property is not well-formed.">未正確設定這個屬性之語式時所指定的 XML。</exception>
      <returns vsli:raw="The markup of the child nodes of this node, not including default attributes.">這個節點之子節點的標記。  
  
 <block subset="none" type="note"><para><see langword="InnerXml" /> 不會傳回預設的屬性。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">取得值，表示節點是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果節點是唯讀的，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary vsli:raw="Gets the first child element with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.Name&quot; /&gt;.">取得具有指定的 <see cref="P:System.Xml.XmlNode.Name" /> 的第一個子項目。</summary>
      <param name="name" vsli:raw="The qualified name of the element to retrieve.">要擷取的項目的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; that matches the specified name. It returns a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if there is no match.">符合指定名稱的第一個 <see cref="T:System.Xml.XmlElement" />。 如果沒有相符項目，則傳回 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary vsli:raw="Gets the first child element with the specified &lt;see cref=&quot;P:System.Xml.XmlNode.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlNode.NamespaceURI&quot; /&gt;.">取得具有指定的 <see cref="P:System.Xml.XmlNode.LocalName" /> 與 <see cref="P:System.Xml.XmlNode.NamespaceURI" /> 的第一個子項目。</summary>
      <param name="localname" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Xml.XmlElement&quot; /&gt; with the matching &lt;paramref name=&quot;localname&quot; /&gt; and &lt;paramref name=&quot;ns&quot; /&gt;. It returns a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if there is no match.">具有符合的 <paramref name="localname" /> 與 <paramref name="ns" /> 的第一個 <see cref="T:System.Xml.XmlElement" />。 如果沒有相符項目，則傳回 null 參考 (在 Visual Basic 中為 <see langword="Nothing" />)。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary vsli:raw="Gets the last child of the node.">取得節點的最後一個子節點。</summary>
      <returns vsli:raw="The last child of the node. If there is no such node, &lt;see langword=&quot;null&quot; /&gt; is returned.">節點的最後一個子節點。 如果沒有這種節點，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary vsli:raw="Gets the local name of the node, when overridden in a derived class.">在衍生類別中覆寫時，取得節點的區域名稱。</summary>
      <returns vsli:raw="The name of the node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is book for the element &amp;lt;bk:book&amp;gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute&lt;/term&gt;&lt;description&gt; The local name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATA&lt;/term&gt;&lt;description&gt; #cdata-section&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; #comment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Document&lt;/term&gt;&lt;description&gt; #document&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentFragment&lt;/term&gt;&lt;description&gt; #document-fragment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt; The local name of the element.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Entity&lt;/term&gt;&lt;description&gt; The name of the entity.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Notation&lt;/term&gt;&lt;description&gt; The notation name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; #text&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Whitespace&lt;/term&gt;&lt;description&gt; #whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; SignificantWhitespace&lt;/term&gt;&lt;description&gt; #significant-whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XmlDeclaration&lt;/term&gt;&lt;description&gt; #xml-declaration&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">移除前置詞的節點名稱。 例如，為 <see langword="LocalName" /> 元素 &lt; bk： book 的 book &gt; 。  
  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 
 <list type="table"><listheader><term> 類型</term><description> 名稱</description></listheader><item><term> 屬性</term><description> 屬性的本機名稱。</description></item><item><term> CDATA</term><description> #cdata-section</description></item><item><term> 註解</term><description> #comment</description></item><item><term> 文件</term><description> #document</description></item><item><term> DocumentFragment</term><description> #document-fragment</description></item><item><term> DocumentType</term><description> 文件類型名稱。</description></item><item><term> 項目</term><description> 項目的本機名稱。</description></item><item><term> 單位</term><description> 實體的名稱。</description></item><item><term> EntityReference</term><description> 所參考的實體名稱。</description></item><item><term> 表示法</term><description> 標記法名稱。</description></item><item><term> ProcessingInstruction</term><description> 處理指示的目標。</description></item><item><term> Text</term><description> #text</description></item><item><term> 空白</term><description> #whitespace</description></item><item><term> SignificantWhitespace</term><description> #significant-whitespace</description></item><item><term> XmlDeclaration</term><description> #xml-declaration</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary vsli:raw="Gets the qualified name of the node, when overridden in a derived class.">在衍生類別中覆寫時，取得節點的限定名稱。</summary>
      <returns vsli:raw="The qualified name of the node. The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute&lt;/term&gt;&lt;description&gt; The qualified name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATA&lt;/term&gt;&lt;description&gt; #cdata-section&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; #comment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Document&lt;/term&gt;&lt;description&gt; #document&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentFragment&lt;/term&gt;&lt;description&gt; #document-fragment&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt; The qualified name of the element.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Entity&lt;/term&gt;&lt;description&gt; The name of the entity.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Notation&lt;/term&gt;&lt;description&gt; The notation name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; #text&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Whitespace&lt;/term&gt;&lt;description&gt; #whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; SignificantWhitespace&lt;/term&gt;&lt;description&gt; #significant-whitespace&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XmlDeclaration&lt;/term&gt;&lt;description&gt; #xml-declaration&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">節點的限定名稱。 傳回的名稱需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 
 <list type="table"><listheader><term> 類型</term><description> 名稱</description></listheader><item><term> 屬性</term><description> 屬性的限定名稱 (Qualified Name)。</description></item><item><term> CDATA</term><description> #cdata-section</description></item><item><term> 註解</term><description> #comment</description></item><item><term> 文件</term><description> #document</description></item><item><term> DocumentFragment</term><description> #document-fragment</description></item><item><term> DocumentType</term><description> 文件類型名稱。</description></item><item><term> 項目</term><description> 項目的限定名稱。</description></item><item><term> 單位</term><description> 實體的名稱。</description></item><item><term> EntityReference</term><description> 所參考的實體名稱。</description></item><item><term> 表示法</term><description> 標記法名稱。</description></item><item><term> ProcessingInstruction</term><description> 處理指示的目標。</description></item><item><term> Text</term><description> #text</description></item><item><term> 空白</term><description> #whitespace</description></item><item><term> SignificantWhitespace</term><description> #significant-whitespace</description></item><item><term> XmlDeclaration</term><description> #xml-declaration</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI of this node.">取得這個節點的命名空間 URI。</summary>
      <returns vsli:raw="The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.">這個節點的命名空間 URI。 如果沒有命名空間 URI，則這個屬性傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary vsli:raw="Gets the node immediately following this node.">取得這個節點的後置節點。</summary>
      <returns vsli:raw="The next &lt;see langword=&quot;XmlNode&quot; /&gt;. If there is no next node, &lt;see langword=&quot;null&quot; /&gt; is returned.">下一個 <see langword="XmlNode" />。 如果沒有前置節點，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary vsli:raw="Gets the type of the current node, when overridden in a derived class.">在衍生類別中覆寫時，取得目前節點的類型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.XmlNodeType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary vsli:raw="Gets the markup containing this node and all its child nodes.">取得包含這個節點和其所有子節點的標記。</summary>
      <returns vsli:raw="The markup containing this node and all its child nodes, not including default attributes.">包含這個節點和其所有子節點的標記。  
  
 <block subset="none" type="note"><para><see langword="OuterXml" /> 不會傳回預設的屬性。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.">取得這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; to which this node belongs.  &#xA;  &#xA; If the node is an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; (NodeType equals XmlNodeType.Document), this property returns &lt;see langword=&quot;null&quot; /&gt;.">這個節點所屬的 <see cref="T:System.Xml.XmlDocument" />。  
  
如果這個節點是 <see cref="T:System.Xml.XmlDocument" /> (NodeType 等於 XmlNodeType.Document)，則這個屬性傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; NodeType&lt;/term&gt;&lt;description&gt; Return Value of ParentNode&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute, Document, DocumentFragment, Entity, Notation&lt;/term&gt;&lt;description&gt; Returns &lt;see langword=&quot;null&quot; /&gt;; these nodes do not have parents.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATA&lt;/term&gt;&lt;description&gt; Returns the element or entity reference containing the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; Returns the element, entity reference, document type, or document containing the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt; Returns the document node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt; Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt; Returns the element, attribute, or entity reference containing the entity reference.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; Returns the document, element, document type, or entity reference containing the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; Returns the parent element, attribute, or entity reference containing the text node.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。  
  
 <list type="table"><listheader><term> NodeType</term><description> ParentNode 的傳回值</description></listheader><item><term> Attribute、Document、DocumentFragment、Entity、Notation</term><description> 傳回 <see langword="null" />；這些節點沒有父代。</description></item><item><term> CDATA</term><description> 傳回包含 CDATA 區段的項目或實體參考。</description></item><item><term> 註解</term><description> 傳回項目、實體參考、文件類型或包含註解的文件。</description></item><item><term> DocumentType</term><description> 傳回文件節點。</description></item><item><term> 項目</term><description> 傳回項目的父代節點。 如果此項目是樹狀結構的根節點，則父代是文件節點。</description></item><item><term> EntityReference</term><description> 傳回項目、屬性或包含實體參考的實體參考。</description></item><item><term> ProcessingInstruction</term><description> 傳回文件、項目、文件類型或包含處理指示的實體參考。</description></item><item><term> Text</term><description> 傳回父項目、屬性或包含文字節點的實體參考。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary vsli:raw="Gets or sets the namespace prefix of this node.">取得或設定這個節點的命名空間前置詞。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="This node is read-only.">這個節點是唯讀的。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The specified prefix contains an invalid character.  &#xA;  &#xA; The specified prefix is malformed.  &#xA;  &#xA; The specified prefix is &quot;xml&quot; and the namespaceURI of this node is different from &quot;http://www.w3.org/XML/1998/namespace&quot;.  &#xA;  &#xA; This node is an attribute and the specified prefix is &quot;xmlns&quot; and the namespaceURI of this node is different from &quot;http://www.w3.org/2000/xmlns/ &quot;.  &#xA;  &#xA; This node is an attribute and the qualifiedName of this node is &quot;xmlns&quot;.">指定的前置詞包含無效的字元。  
  
 指定的前置詞格式不正確。  
  
 指定的前置詞為 "xml"，且此節點的 namespaceURI 與 "http://www.w3.org/XML/1998/namespace" \(英文\) 的不同。  
  
 此節點是一個屬性，且指定的前置詞是 "xmlns"，而且此節點的 namespaceURI 與 http://www.w3.org/2000/xmlns/ \(英文\) 的不同。  
  
 這個節點是屬性，這個節點的 qualifiedName 是「xmlns」。</exception>
      <returns vsli:raw="The namespace prefix of this node. For example, &lt;see langword=&quot;Prefix&quot; /&gt; is bk for the element &amp;lt;bk:book&amp;gt;. If there is no prefix, this property returns String.Empty.">這個節點的命名空間前置詞。 例如， <see langword="Prefix" /> bk： book 元素的 bk &lt; &gt; 。 如果沒有前置詞，則這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary vsli:raw="Gets the node immediately preceding this node.">取得這個節點的前置節點。</summary>
      <returns vsli:raw="The preceding &lt;see langword=&quot;XmlNode&quot; /&gt;. If there is no preceding node, &lt;see langword=&quot;null&quot; /&gt; is returned.">前置的 <see langword="XmlNode" />。 如果沒有前置節點，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">取得這個節點的前置文字節點。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary vsli:raw="Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.">取得後結構描述驗證資訊集，在結構描述驗證之後已將其指派給這個節點。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the post schema validation infoset of this node.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含這個節點的後結構描述驗證資訊集。</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting the value of a node that is read-only.">設定唯讀節點的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting the value of a node that is not supposed to have a value (for example, an Element node).">設定不應該有值的節點值 (例如，Element 節點)。</exception>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Attribute&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; CDATASection&lt;/term&gt;&lt;description&gt; The content of the CDATA Section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Comment&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Document&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentFragment&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DocumentType&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Element&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;. You can use the &lt;see cref=&quot;P:System.Xml.XmlElement.InnerText&quot; /&gt; or &lt;see cref=&quot;P:System.Xml.XmlElement.InnerXml&quot; /&gt; properties to access the value of the element node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Entity&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; EntityReference&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Notation&lt;/term&gt;&lt;description&gt;&lt;see langword=&quot;null&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; ProcessingInstruction&lt;/term&gt;&lt;description&gt; The entire content excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Text&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; SignificantWhitespace&lt;/term&gt;&lt;description&gt; The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Whitespace&lt;/term&gt;&lt;description&gt; The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; XmlDeclaration&lt;/term&gt;&lt;description&gt; The content of the declaration (that is, everything between &amp;lt;?xml and ?&amp;gt;).&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">傳回值需視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定： 
 <list type="table"><listheader><term> 類型</term><description> 值</description></listheader><item><term> 屬性</term><description> 屬性的值。</description></item><item><term> CDATASection</term><description> CDATA 區段的內容。</description></item><item><term> 註解</term><description> 註解的內容。</description></item><item><term> 文件</term><description><see langword="null" />.</description></item><item><term> DocumentFragment</term><description><see langword="null" />.</description></item><item><term> DocumentType</term><description><see langword="null" />.</description></item><item><term> 項目</term><description><see langword="null" />. 您可以使用 <see cref="P:System.Xml.XmlElement.InnerText" /> 或 <see cref="P:System.Xml.XmlElement.InnerXml" /> 屬性，存取項目節點的值。</description></item><item><term> 單位</term><description><see langword="null" />.</description></item><item><term> EntityReference</term><description><see langword="null" />.</description></item><item><term> 表示法</term><description><see langword="null" />.</description></item><item><term> ProcessingInstruction</term><description> 除了目標之外的完整內容。</description></item><item><term> Text</term><description> 文字節點的內容。</description></item><item><term> SignificantWhitespace</term><description> 空白字元。 空白字元可以包含一或多個空字元、歸位字元、換行字元或定位字元。</description></item><item><term> 空白</term><description> 空白字元。 空白字元可以包含一或多個空字元、歸位字元、換行字元或定位字元。</description></item><item><term> XmlDeclaration</term><description> 宣告的內容 (也就是 &lt; ？ xml 與？) 之間的所有專案 &gt; 。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary vsli:raw="Specifies the type of node change.">指定節點變更的型別。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary vsli:raw="A node value is being changed.">要變更的節點值。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary vsli:raw="A node is being inserted in the tree.">要插入樹狀結構中的節點。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary vsli:raw="A node is being removed from the tree.">要從樹狀結構移除的節點。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserted&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserting&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoved&quot; /&gt; and &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoving&quot; /&gt; events.">提供 <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNodeChangedEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> 類別的新執行個體。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">產生事件的 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldParent" vsli:raw="The old parent &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的舊父代 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="newParent" vsli:raw="The new parent &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的新父代 <see cref="T:System.Xml.XmlNode" />。</param>
      <param name="oldValue" vsli:raw="The old value of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的舊值。</param>
      <param name="newValue" vsli:raw="The new value of the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that generated the event.">產生事件之 <see cref="T:System.Xml.XmlNode" /> 的新值。</param>
      <param name="action" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeChangedAction&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNodeChangedAction" />。</param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary vsli:raw="Gets a value indicating what type of node change event is occurring.">取得指出發生哪種類型之節點變更事件的值。</summary>
      <returns vsli:raw="One of the enumeration values that describes the node change event. The &lt;see langword=&quot;Action&quot; /&gt; value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.">描述節點變更事件的其中一個列舉值。 <see langword="Action" /> 值在發生事件期間 (之前或之後) 沒有差異。 您可以建立個別事件處理常式以處理這兩個執行個體。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary vsli:raw="Gets the value of the &lt;see cref=&quot;P:System.Xml.XmlNode.ParentNode&quot; /&gt; after the operation completes.">取得作業完成之後 <see cref="P:System.Xml.XmlNode.ParentNode" /> 的值。</summary>
      <returns vsli:raw="The value of the &lt;see langword=&quot;ParentNode&quot; /&gt; after the operation completes. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node is being removed. For attribute nodes, this property returns the &lt;see cref=&quot;P:System.Xml.XmlAttribute.OwnerElement&quot; /&gt;.">完成作業之後的 <see langword="ParentNode" /> 值。 若是要移除的節點，這個屬性傳回 <see langword="null" />。  
  
 <block subset="none" type="note"><para>  
 對於屬性節點，這個屬性傳回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the node.">取得節點的新值。</summary>
      <returns vsli:raw="The new value of the node. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node is neither an attribute nor a text node, or if the node is being removed.  &#xA;  &#xA; If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt; event, &lt;see langword=&quot;NewValue&quot; /&gt; returns the value of the node if the change is successful. If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt; event, &lt;see langword=&quot;NewValue&quot; /&gt; returns the current value of the node.">節點的新值。 如果節點既不是屬性也不是文字節點，或正在移除節點，則這個屬性會傳回 <see langword="null" />。  
  
如果在 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件中呼叫屬性，則在順利變更時，<see langword="NewValue" /> 會傳回節點的值。 如果在 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件中呼叫屬性，<see langword="NewValue" /> 會傳回節點目前的值。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; that is being added, removed or changed.">取得要新增、移除或變更的 <see cref="T:System.Xml.XmlNode" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is being added, removed or changed; this property never returns &lt;see langword=&quot;null&quot; /&gt;.">要加入、移除或變更的 <see langword="XmlNode" />，這個屬性絕不會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary vsli:raw="Gets the value of the &lt;see cref=&quot;P:System.Xml.XmlNode.ParentNode&quot; /&gt; before the operation began.">取得作業開始之前 <see cref="P:System.Xml.XmlNode.ParentNode" /> 的值。</summary>
      <returns vsli:raw="The value of the &lt;see langword=&quot;ParentNode&quot; /&gt; before the operation began. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node did not have a parent. For attribute nodes, this property returns the &lt;see cref=&quot;P:System.Xml.XmlAttribute.OwnerElement&quot; /&gt;.">作業開始之前的 <see langword="ParentNode" /> 值。 如果節點沒有父代，這個屬性傳回 <see langword="null" />。  
  
 <block subset="none" type="note"><para>  
 對於屬性節點，這個屬性傳回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the original value of the node.">取得節點的原始值。</summary>
      <returns vsli:raw="The original value of the node. This property returns &lt;see langword=&quot;null&quot; /&gt; if the node is neither an attribute nor a text node, or if the node is being inserted.  &#xA;  &#xA; If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt; event, &lt;see langword=&quot;OldValue&quot; /&gt; returns the current value of the node that will be replaced if the change is successful. If called in a &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt; event, &lt;see langword=&quot;OldValue&quot; /&gt; returns the value of node prior to the change.">節點的原始值。 如果節點既不是屬性也不是文字節點，或正在插入節點，則這個屬性會傳回 <see langword="null" />。  
  
如果在 <see cref="E:System.Xml.XmlDocument.NodeChanging" /> 事件中呼叫屬性，則在順利變更時，<see langword="OldValue" /> 會傳回節點目前的值 (將取代成新值)。 如果在 <see cref="E:System.Xml.XmlDocument.NodeChanged" /> 事件中呼叫屬性，<see langword="OldValue" /> 會傳回節點變更前的值。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary vsli:raw="Represents the method that handles &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanged&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeChanging&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserted&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeInserting&quot; /&gt;, &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoved&quot; /&gt; and &lt;see cref=&quot;E:System.Xml.XmlDocument.NodeRemoving&quot; /&gt; events.">表示處理 <see cref="E:System.Xml.XmlDocument.NodeChanged" />、<see cref="E:System.Xml.XmlDocument.NodeChanging" />、<see cref="E:System.Xml.XmlDocument.NodeInserted" />、<see cref="E:System.Xml.XmlDocument.NodeInserting" />、<see cref="E:System.Xml.XmlDocument.NodeRemoved" /> 和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeChangedEventArgs&quot; /&gt; containing the event data.">
        <see cref="T:System.Xml.XmlNodeChangedEventArgs" />，包含事件資料。</param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary vsli:raw="Represents an ordered collection of nodes.">代表已排序的節點集合。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlNodeList" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that iterates through the collection of nodes.">取得逐一查看節點集合的列舉值。</summary>
      <returns vsli:raw="An enumerator used to iterate through the collection of nodes.">用來逐一查看節點集合的列舉值。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary vsli:raw="Retrieves a node at the given index.">擷取指定索引的節點。</summary>
      <param name="index" vsli:raw="The zero-based index into the list of nodes.">在節點清單中以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified index in the collection. If &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of nodes in the list, this returns &lt;see langword=&quot;null&quot; /&gt;.">在集合中具有指定的索引的 <see cref="T:System.Xml.XmlNode" />。 如果 <paramref name="index" /> 大於或等於清單中的節點數目，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.PrivateDisposeNodeList">
      <summary vsli:raw="Disposes resources in the node list privately.">私下處置節點清單中的資源。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Xml.XmlNodeList&quot; /&gt; class.">釋放 <see cref="T:System.Xml.XmlNodeList" /> 類別所使用的所有資源。</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary vsli:raw="Gets the number of nodes in the &lt;see langword=&quot;XmlNodeList&quot; /&gt;.">取得 <see langword="XmlNodeList" /> 中的節點數目。</summary>
      <returns vsli:raw="The number of nodes in the &lt;see langword=&quot;XmlNodeList&quot; /&gt;.">
        <see langword="XmlNodeList" /> 中的節點數目。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary vsli:raw="Gets a node at the given index.">取得指定之索引位置的節點。</summary>
      <param name="i" vsli:raw="The zero-based index into the list of nodes.">在節點清單中以零起始的索引。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; with the specified index in the collection. If index is greater than or equal to the number of nodes in the list, this returns &lt;see langword=&quot;null&quot; /&gt;.">在集合中具有指定的索引的 <see cref="T:System.Xml.XmlNode" />。 如果索引大於或等於清單中節點的數目，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary vsli:raw="Describes the document order of a node compared to a second node.">說明節點相較於第二個節點的文件順序。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary vsli:raw="The current node of this navigator is after the current node of the supplied navigator.">這個巡覽器的目前節點位於提供之巡覽器的目前節點之後。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary vsli:raw="The current node of this navigator is before the current node of the supplied navigator.">這個巡覽器的目前節點位於提供之巡覽器的目前節點之前。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary vsli:raw="The two navigators are positioned on the same node.">兩個巡覽器位於相同的節點上。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary vsli:raw="The node positions cannot be determined in document order, relative to each other. This could occur if the two nodes reside in different trees.">無法決定節點位置的文件順序 (兩個位置相互關聯)。 如果兩個節點位於不同的樹狀結構中，就會發生這種情況。</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary vsli:raw="Represents a reader that provides fast, non-cached forward only access to XML data in an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">表示讀取器，其提供對 <see cref="T:System.Xml.XmlNode" /> 中 XML 資料的快速且非快取順向存取。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary vsli:raw="Creates an instance of the &lt;see langword=&quot;XmlNodeReader&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlNode" /> 來建立 <see langword="XmlNodeReader" /> 類別的執行個體。</summary>
      <param name="node" vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; you want to read.">您要讀取的 <see langword="XmlNode" />。</param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary vsli:raw="Changes the &lt;see cref=&quot;P:System.Xml.XmlNodeReader.ReadState&quot; /&gt; to &lt;see langword=&quot;Closed&quot; /&gt;.">將 <see cref="P:System.Xml.XmlNodeReader.ReadState" /> 變更為 <see langword="Closed" />。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary vsli:raw="Gets the value of the attribute with the specified index.">取得具有指定索引的屬性值。</summary>
      <param name="attributeIndex" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">屬性的索引。 此索引是以零為起始。 (第一個屬性的索引為 0。)</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlNodeReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />。</exception>
      <returns vsli:raw="The value of the specified attribute.">指定的屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified name.">取得具有指定名稱的屬性值。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace URI.">取得具有指定的區域名稱和命名空間 URI 的屬性值。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary vsli:raw="Resolves a namespace prefix in the current element's scope.">解析目前項目範圍中的命名空間前置詞。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送空字串。 不必擷取這個字串。</param>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="Moves to the attribute with the specified index.">移至具有指定索引的屬性。</summary>
      <param name="attributeIndex" vsli:raw="The index of the attribute.">屬性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary vsli:raw="Moves to the attribute with the specified name.">移至具有指定名稱的屬性。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves to the attribute with the specified local name and namespace URI.">移至具有指定的區域名稱和命名空間 URI 的屬性。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary vsli:raw="Moves to the element that contains the current attribute node.">移至包含目前屬性節點的項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToFirstAttribute">
      <summary vsli:raw="Moves to the first attribute.">移至第一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToNextAttribute">
      <summary vsli:raw="Moves to the next attribute.">移至下一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Read">
      <summary vsli:raw="Reads the next node from the stream.">從資料流讀取下一個節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadAttributeValue">
      <summary vsli:raw="Parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.  &#xA;  &#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  &#xA;  &#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of String.Empty.">如果傳回的是節點，則為 <see langword="true" />。  
  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
  
空白的屬性 (例如 <c>misc=""</c>) 會對含有 String.Empty 值的單一節點傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">目前的節點不支援 <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the BinHex decoded binary bytes.">讀取內容，並傳回 BinHex 已解碼的二進位資料。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">目前的節點不支援 <see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the Base64 content.">讀取項目，並將 Base64 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the BinHex content.">讀取項目，並將 BinHex 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ReadString">
      <summary vsli:raw="Reads the contents of an element or text node as a string.">將項目或文字節點的內容當做字串讀取。</summary>
      <returns vsli:raw="The contents of the element or text-like node (This can include CDATA, Text nodes, and so on). This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  &#xA;  &#xA; &lt;see langword=&quot;Note:&quot; /&gt; The text node can be either an element or an attribute text node.">項目或類似文字的節點內容 (其中包括 CDATA、文字節點等)。 如果讀取器不在項目或文字節點上，或目前內容中沒有其他可傳回的文字內容，則可為空字串。  
  
 <see langword="Note:" /> 文字節點可為項目或屬性文字節點。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.ResolveEntity">
      <summary vsli:raw="Resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">解析 <see langword="EntityReference" /> 節點的實體參考。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;EntityReference&quot; /&gt; node.">讀取器不在 <see langword="EntityReference" /> 節點上。</exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Skip">
      <summary vsli:raw="Skips the children of the current node.">略過目前節點的子節點。</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope" vsli:raw="&lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 物件。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object that contains the namespaces that are in scope.">
        <see cref="T:System.Collections.IDictionary" /> 物件，包含範圍內的命名空間。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace prefix.">包含命名空間前置詞的 <see cref="T:System.String" />。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace name.">包含命名空間名稱的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; object that identifies the namespace.">識別命名空間的 <see cref="T:System.String" /> 物件。</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; object that contains the namespace prefix.">包含命名空間前置詞的 <see cref="T:System.String" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary vsli:raw="Gets the number of attributes on the current node.">取得目前節點的屬性數目。</summary>
      <returns vsli:raw="The number of attributes on the current node. This number includes default attributes.">目前節點的屬性數目。 這個數目包括預設屬性。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">取得目前節點的基底 (Base) URI。</summary>
      <returns vsli:raw="The base URI of the current node.">目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlNodeReader&quot; /&gt; implements the binary content read methods.">取得值，這個值表示 <see cref="T:System.Xml.XmlNodeReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlNodeReader&quot; /&gt; class always returns &lt;see langword=&quot;true&quot; /&gt;.">如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlNodeReader" /> 類別一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;. &lt;see langword=&quot;XmlNodeReader&quot; /&gt; always returns &lt;see langword=&quot;true&quot; /&gt;.">如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlNodeReader" /> 永遠傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary vsli:raw="Gets the depth of the current node in the XML document.">取得 XML 文件中目前節點的深度。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary vsli:raw="Gets a value indicating whether the reader is positioned at the end of the stream.">取得值，表示讀取器是否位於資料流結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary vsli:raw="Gets a value indicating whether the current node has any attributes.">取得值，表示目前節點是否具有任何屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點具有屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary vsli:raw="Gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlNodeReader.Value&quot; /&gt;.">取得值，表示目前節點是否具有 <see cref="P:System.Xml.XmlNodeReader.Value" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.">取得值，表示目前的節點是否為文件類型定義 (DTD)，或結構描述中定義之預設值所產生的屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; &lt;see langword=&quot;false&quot; /&gt; if the attribute value was explicitly set.">如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary vsli:raw="Gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">取得值，指出目前的節點是否為空項目 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlNodeReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) and it ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果目前節點是 (<see cref="P:System.Xml.XmlNodeReader.NodeType" /> 等於 <see langword="XmlNodeType.Element" />) 且結尾為的元素，則為 <c>/&gt;</c> ，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">取得目前節點的區域名稱。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns String.Empty.">目前節點名稱的前置詞被移除。 例如， <see langword="LocalName" /><see langword="book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Name">
      <summary vsli:raw="Gets the qualified name of the current node.">取得目前節點的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlNodeReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">目前節點的限定名稱。 例如， <see langword="Name" /><see langword="bk:book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlNodeReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 名稱</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的名稱。</description></item><item><term><see langword="DocumentType" /></term><description> 文件類型名稱。</description></item><item><term><see langword="Element" /></term><description> 標籤名稱。</description></item><item><term><see langword="EntityReference" /></term><description> 所參考的實體名稱。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 處理指示的目標。</description></item><item><term><see langword="XmlDeclaration" /></term><description><see langword="xml" /> 常值 (Literal) 字串。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.">取得讀取器所在節點的命名空間 URI (如 W3C 命名空間規格中所定義)。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the node.">
        <see langword="XmlNameTable" /> 可讓您取得節點中字串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values representing the type of the current node.">
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Prefix">
      <summary vsli:raw="Gets the namespace prefix associated with the current node.">取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.ReadState">
      <summary vsli:raw="Gets the state of the reader.">取得讀取器的狀態。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ReadState&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.ReadState" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.SchemaInfo">
      <summary vsli:raw="Gets the schema information that has been assigned to the current node.">取得已指派給目前節點的結構描述資訊。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the schema information for the current node.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含目前節點的結構描述資訊。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Value">
      <summary vsli:raw="Gets the text value of the current node.">取得目前節點的文字值。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNodeReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup in a mixed content model.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">傳回值需視節點的 <see cref="P:System.Xml.XmlNodeReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 其他所有節點類型都會傳回 String.Empty。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 值</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 區段的內容。</description></item><item><term><see langword="Comment" /></term><description> 註解的內容。</description></item><item><term><see langword="DocumentType" /></term><description> 內部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部內容 (目標除外)。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 在混合內容模型中標記間的泛空白字元。</description></item><item><term><see langword="Text" /></term><description> 文字節點的內容。</description></item><item><term><see langword="Whitespace" /></term><description> 標記之間的泛空白字元。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣告的內容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.XmlSpace">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">取得目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlNodeType">
      <summary vsli:raw="Specifies the type of node.">指定節點類型。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Attribute">
      <summary vsli:raw="An attribute (for example, &lt;c&gt;id='123'&lt;/c&gt; ).">屬性 (例如 <c>id='123'</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.CDATA">
      <summary vsli:raw="A CDATA section (for example, &lt;c&gt;&amp;lt;![CDATA[my escaped text]]&amp;gt;&lt;/c&gt; ).">CDATA 區段 (例如 <c>&lt;![CDATA[my escaped text]]&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Comment">
      <summary vsli:raw="A comment (for example, &lt;c&gt;&amp;lt;!-- my comment --&amp;gt;&lt;/c&gt; ).">註解 (例如 <c>&lt;!-- my comment --&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Document">
      <summary vsli:raw="A document object that, as the root of the document tree, provides access to the entire XML document.">文件物件 (作為文件樹狀結構的根) 可存取整個 XML 文件。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentFragment">
      <summary vsli:raw="A document fragment.">文件片段。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.DocumentType">
      <summary vsli:raw="The document type declaration, indicated by the following tag (for example, &lt;c&gt;&amp;lt;!DOCTYPE...&amp;gt;&lt;/c&gt; ).">文件類型宣告，以下列標記指示 (例如 <c>&lt;!DOCTYPE...&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Element">
      <summary vsli:raw="An element (for example, &lt;c&gt;&amp;lt;item&amp;gt;&lt;/c&gt; ).">項目 (例如 <c>&lt;item&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndElement">
      <summary vsli:raw="An end element tag (for example, &lt;c&gt;&amp;lt;/item&amp;gt;&lt;/c&gt; ).">結尾項目標記 (例如 <c>&lt;/item&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EndEntity">
      <summary vsli:raw="Returned when &lt;see langword=&quot;XmlReader&quot; /&gt; gets to the end of the entity replacement as a result of a call to &lt;see cref=&quot;M:System.Xml.XmlReader.ResolveEntity&quot; /&gt;.">在 <see langword="XmlReader" /> 到達實體取代的結尾 (由於呼叫 <see cref="M:System.Xml.XmlReader.ResolveEntity" /> 所致) 時傳回。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Entity">
      <summary vsli:raw="An entity declaration (for example, &lt;c&gt;&amp;lt;!ENTITY...&amp;gt;&lt;/c&gt; ).">實體宣告 (例如 <c>&lt;!ENTITY...&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.EntityReference">
      <summary vsli:raw="A reference to an entity (for example, &lt;c&gt;&amp;amp;num;&lt;/c&gt; ).">實體參考 (例如 <c>&amp;num;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.None">
      <summary vsli:raw="This is returned by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; if a &lt;see langword=&quot;Read&quot; /&gt; method has not been called.">如果尚未呼叫 <see langword="Read" /> 方法，則由 <see cref="T:System.Xml.XmlReader" /> 傳回此項目。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Notation">
      <summary vsli:raw="A notation in the document type declaration (for example, &lt;c&gt;&amp;lt;!NOTATION...&amp;gt;&lt;/c&gt; ).">文件類型宣告中的標記法 (例如 <c>&lt;!NOTATION...&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.ProcessingInstruction">
      <summary vsli:raw="A processing instruction (for example, &lt;c&gt;&amp;lt;?pi test?&amp;gt;&lt;/c&gt; ).">處理指示 (例如 <c>&lt;?pi test?&gt;</c> )。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.SignificantWhitespace">
      <summary vsli:raw="White space between markup in a mixed content model or white space within the &lt;c&gt;xml:space=&quot;preserve&quot;&lt;/c&gt; scope.">混合內容模型中標記之間的空白字元，或 <c>xml:space="preserve"</c> 範圍中的空白字元。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Text">
      <summary vsli:raw="&lt;para&gt;The text content of a node.&lt;/para&gt;&lt;para&gt;A &lt;see cref=&quot;F:System.Xml.XmlNodeType.Text&quot; /&gt; node cannot have any child nodes. It can appear as the child node of the &lt;see cref=&quot;F:System.Xml.XmlNodeType.Attribute&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.DocumentFragment&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.XmlNodeType.Element&quot; /&gt;, and &lt;see cref=&quot;F:System.Xml.XmlNodeType.EntityReference&quot; /&gt; nodes.&lt;/para&gt;">節點的文字內容。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.Whitespace">
      <summary vsli:raw="White space between markup.">標記之間的空白字元。</summary>
    </member>
    <member name="F:System.Xml.XmlNodeType.XmlDeclaration">
      <summary vsli:raw="&lt;para&gt;The XML declaration (for example, &lt;c&gt;&amp;lt;?xml version='1.0'?&amp;gt;&lt;/c&gt; ).&lt;/para&gt;&lt;para&gt;The &lt;see cref=&quot;F:System.Xml.XmlNodeType.XmlDeclaration&quot; /&gt; node must be the first node in the document. It cannot have children. It is a child of the &lt;see cref=&quot;F:System.Xml.XmlNodeType.Document&quot; /&gt; node. It can have attributes that provide version and encoding information.&lt;/para&gt;">XML 宣告 (例如 <c>&lt;?xml version='1.0'?&gt;</c> )。</summary>
    </member>
    <member name="T:System.Xml.XmlNotation">
      <summary vsli:raw="Represents a notation declaration, such as &amp;lt;!NOTATION... &amp;gt;.">代表標記法宣告，例如 &lt;!NOTATION... &gt;。</summary>
    </member>
    <member name="M:System.Xml.XmlNotation.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node. Notation nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlNotation&quot; /&gt; object throws an exception.">建立這個節點的複本。 標記法節點無法複製。 在 <see cref="T:System.Xml.XmlNotation" /> 物件上呼叫這個方法會擲回例外狀況。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Notation nodes cannot be cloned. Calling this method on an &lt;see cref=&quot;T:System.Xml.XmlNotation&quot; /&gt; object throws an exception.">標記法節點無法複製。 在 <see cref="T:System.Xml.XmlNotation" /> 物件上呼叫這個方法會擲回例外狀況。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; copy of the node from which the method is called.">方法呼叫來源節點的 <see cref="T:System.Xml.XmlNode" /> 複本。</returns>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. This method has no effect on &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes.">將節點的子系儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 在 <see langword="XmlNotation" /> 節點上這個方法不會有任何作用。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlNotation.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. This method has no effect on &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。 在 <see langword="XmlNotation" /> 節點上這個方法不會有任何作用。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlNotation.InnerXml">
      <summary vsli:raw="Gets the markup representing the children of this node.">取得表示這個節點子系的標記。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempting to set the property.">嘗試設定這個屬性。</exception>
      <returns vsli:raw="For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, String.Empty is returned.">對於 <see langword="XmlNotation" /> 節點，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the node is read-only.">取得值，表示節點是否為唯讀。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; Because &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes are read-only, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 如果節點是唯讀的，否則為 <see langword="false" /> 。  
  
因為 <see langword="XmlNotation" /> 節點是唯讀，所以這個屬性必定傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.LocalName">
      <summary vsli:raw="Gets the name of the current node without the namespace prefix.">取得現行節點的名稱而無命名空間前置詞。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, this property returns the name of the notation.">如果是 <see langword="XmlNotation" /> 節點，這個屬性會傳回標記法的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.Name">
      <summary vsli:raw="Gets the name of the current node.">取得目前節點的名稱。</summary>
      <returns vsli:raw="The name of the notation.">標記法的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="The node type. For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, the value is XmlNodeType.Notation.">節點類型。 如果是 <see langword="XmlNotation" /> 節點，則這個值會是 XmlNodeType.Notation。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.OuterXml">
      <summary vsli:raw="Gets the markup representing this node and all its children.">取得表示這個節點及其所有子系的標記。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlNotation&quot; /&gt; nodes, String.Empty is returned.">對於 <see langword="XmlNotation" /> 節點，會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.PublicId">
      <summary vsli:raw="Gets the value of the public identifier on the notation declaration.">取得標記法宣告的公用識別項的值。</summary>
      <returns vsli:raw="The public identifier on the notation. If there is no public identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">標記法的公用識別項。 如果沒有公用識別項，則會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlNotation.SystemId">
      <summary vsli:raw="Gets the value of the system identifier on the notation declaration.">取得標記法宣告的系統識別項的值。</summary>
      <returns vsli:raw="The system identifier on the notation. If there is no system identifier, &lt;see langword=&quot;null&quot; /&gt; is returned.">標記法的系統識別項。 如果沒有系統識別項，就會傳回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XmlOutputMethod">
      <summary vsli:raw="Specifies the method used to serialize the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; output.">指定用於序列化 <see cref="T:System.Xml.XmlWriter" /> 輸出的方法。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.AutoDetect">
      <summary vsli:raw="Use the XSLT rules to choose between the &lt;see cref=&quot;F:System.Xml.XmlOutputMethod.Xml&quot; /&gt; and &lt;see cref=&quot;F:System.Xml.XmlOutputMethod.Html&quot; /&gt; output methods at runtime.">於執行階段使用 XSLT 規則，在 <see cref="F:System.Xml.XmlOutputMethod.Xml" /> 和 <see cref="F:System.Xml.XmlOutputMethod.Html" /> 輸出方法之間進行選擇。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Html">
      <summary vsli:raw="Serialize according to the HTML rules specified by XSLT.">根據 XSLT 指定的 HTML 規則進行序列化。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Text">
      <summary vsli:raw="Serialize text blocks only.">只序列化文字區塊。</summary>
    </member>
    <member name="F:System.Xml.XmlOutputMethod.Xml">
      <summary vsli:raw="Serialize according to the XML 1.0 rules.">根據 XML 1.0 規則進行序列化。</summary>
    </member>
    <member name="T:System.Xml.XmlParserContext">
      <summary vsli:raw="Provides all the context information required by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to parse an XML fragment.">提供 <see cref="T:System.Xml.XmlReader" /> 所需的所有內容資訊以剖析 XML 片段。</summary>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, base URI, &lt;see langword=&quot;xml:lang&quot; /&gt;, &lt;see langword=&quot;xml:space&quot; /&gt;, and document type values.">使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、基底 URI、<see langword="xml:lang" />、<see langword="xml:space" /> 和文件類型的值，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information about atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="docTypeName" vsli:raw="The name of the document type declaration.">文件類型宣告的名稱。</param>
      <param name="pubId" vsli:raw="The public identifier.">公用識別碼。</param>
      <param name="sysId" vsli:raw="The system identifier.">系統識別碼。</param>
      <param name="internalSubset" vsli:raw="The internal DTD subset. The DTD subset is used for entity resolution, not for document validation.">內部 DTD 子集。 DTD 子集是用於實體解析，而非用於文件驗證。</param>
      <param name="baseURI" vsli:raw="The base URI for the XML fragment (the location from which the fragment was loaded).">XML 片段的基底 URI (載入片段的來源位置)。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, base URI, &lt;see langword=&quot;xml:lang&quot; /&gt;, &lt;see langword=&quot;xml:space&quot; /&gt;, encoding, and document type values.">使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、基底 URI、<see langword="xml:lang" />、<see langword="xml:space" />、編碼方式和文件類型的值，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information about atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="docTypeName" vsli:raw="The name of the document type declaration.">文件類型宣告的名稱。</param>
      <param name="pubId" vsli:raw="The public identifier.">公用識別碼。</param>
      <param name="sysId" vsli:raw="The system identifier.">系統識別碼。</param>
      <param name="internalSubset" vsli:raw="The internal DTD subset. The DTD is used for entity resolution, not for document validation.">內部 DTD 子集。 DTD 用於實體解析，而非用於文件驗證。</param>
      <param name="baseURI" vsli:raw="The base URI for the XML fragment (the location from which the fragment was loaded).">XML 片段的基底 URI (載入片段的來源位置)。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <param name="enc" vsli:raw="An &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object indicating the encoding setting.">指出編碼設定的 <see cref="T:System.Text.Encoding" /> 物件。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, &lt;see langword=&quot;xml:lang&quot; /&gt;, and &lt;see langword=&quot;xml:space&quot; /&gt; values.">使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="xml:lang" /> 和 <see langword="xml:space" /> 的值，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information about atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="M:System.Xml.XmlParserContext.#ctor(System.Xml.XmlNameTable,System.Xml.XmlNamespaceManager,System.String,System.Xml.XmlSpace,System.Text.Encoding)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlParserContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;, &lt;see langword=&quot;xml:lang&quot; /&gt;, &lt;see langword=&quot;xml:space&quot; /&gt;, and encoding.">使用指定的 <see cref="T:System.Xml.XmlNameTable" />、<see cref="T:System.Xml.XmlNamespaceManager" />、<see langword="xml:lang" />、<see langword="xml:space" /> 和編碼方式，初始化 <see langword="XmlParserContext" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use to atomize strings. If this is &lt;see langword=&quot;null&quot; /&gt;, the name table used to construct the &lt;paramref name=&quot;nsMgr&quot; /&gt; is used instead. For more information on atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如果這是 <see langword="null" />，則改用用來建構 <paramref name="nsMgr" /> 的名稱資料表。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</param>
      <param name="nsMgr" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; to use for looking up namespace information, or &lt;see langword=&quot;null&quot; /&gt;.">用來查詢命名空間資訊的 <see cref="T:System.Xml.XmlNamespaceManager" />，或是 <see langword="null" />。</param>
      <param name="xmlLang" vsli:raw="The &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">
        <see langword="xml:lang" /> 範圍。</param>
      <param name="xmlSpace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</param>
      <param name="enc" vsli:raw="An &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object indicating the encoding setting.">指出編碼設定的 <see cref="T:System.Text.Encoding" /> 物件。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;nt&quot; /&gt; is not the same &lt;see langword=&quot;XmlNameTable&quot; /&gt; used to construct &lt;paramref name=&quot;nsMgr&quot; /&gt;.">
        <paramref name="nt" /> 與用來建構 <paramref name="nsMgr" /> 的 <see langword="XmlNameTable" /> 不是同一個。</exception>
    </member>
    <member name="P:System.Xml.XmlParserContext.BaseURI">
      <summary vsli:raw="Gets or sets the base URI.">取得或設定基底 URI。</summary>
      <returns vsli:raw="The base URI to use to resolve the DTD file.">用來解析 DTD 檔案的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.DocTypeName">
      <summary vsli:raw="Gets or sets the name of the document type declaration.">取得或設定文件類型宣告的名稱。</summary>
      <returns vsli:raw="The name of the document type declaration.">文件類型宣告的名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.Encoding">
      <summary vsli:raw="Gets or sets the encoding type.">取得或設定編碼類型。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Text.Encoding&quot; /&gt; object indicating the encoding type.">指示編碼類型的 <see cref="T:System.Text.Encoding" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.InternalSubset">
      <summary vsli:raw="Gets or sets the internal DTD subset.">取得或設定內部 DTD 子集。</summary>
      <returns vsli:raw="The internal DTD subset. For example, this property returns everything between the square brackets &lt;c&gt;&amp;lt;!DOCTYPE doc [...]&amp;gt;&lt;/c&gt;.">內部 DTD 子集。 例如，這個屬性會傳回方括弧之間的所有內容<c> &lt; ！DOCTYPE doc [...] &gt; </c>。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NamespaceManager">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">取得或設定 <see cref="T:System.Xml.XmlNamespaceManager" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNamespaceManager&quot; /&gt;.">
        <see langword="XmlNamespaceManager" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used to atomize strings. For more information on atomized strings, see &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">取得用來儘量縮減字串的 <see cref="T:System.Xml.XmlNameTable" />。 如需已儘量縮減之字串的詳細資訊，請參閱 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt;.">
        <see langword="XmlNameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.PublicId">
      <summary vsli:raw="Gets or sets the public identifier.">取得或設定公用識別碼。</summary>
      <returns vsli:raw="The public identifier.">公用識別碼。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.SystemId">
      <summary vsli:raw="Gets or sets the system identifier.">取得或設定系統識別碼。</summary>
      <returns vsli:raw="The system identifier.">系統識別碼。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlLang">
      <summary vsli:raw="Gets or sets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">取得或設定目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope. If there is no &lt;see langword=&quot;xml:lang&quot; /&gt; in scope, &lt;see langword=&quot;String.Empty&quot; /&gt; is returned.">目前的 <see langword="xml:lang" /> 範圍。 如果範圍內沒有 <see langword="xml:lang" />，則會傳回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlParserContext.XmlSpace">
      <summary vsli:raw="Gets or sets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">取得或設定目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; value indicating the &lt;see langword=&quot;xml:space&quot; /&gt; scope.">
        <see cref="T:System.Xml.XmlSpace" /> 值，指出 <see langword="xml:space" /> 的範圍。</returns>
    </member>
    <member name="T:System.Xml.XmlProcessingInstruction">
      <summary vsli:raw="Represents a processing instruction, which XML defines to keep processor-specific information in the text of the document.">表示處理指示，其中 XML 定義將處理器特定資訊保存在文件的文字中。</summary>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.#ctor(System.String,System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlProcessingInstruction&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlProcessingInstruction" /> 類別的新執行個體。</summary>
      <param name="target" vsli:raw="The target of the processing instruction; see the &lt;see cref=&quot;P:System.Xml.XmlProcessingInstruction.Target&quot; /&gt; property.">處理指示的目標；請參閱 <see cref="P:System.Xml.XmlProcessingInstruction.Target" /> 屬性。</param>
      <param name="data" vsli:raw="The content of the instruction; see the &lt;see cref=&quot;P:System.Xml.XmlProcessingInstruction.Data&quot; /&gt; property.">指示的內容；請參閱 <see cref="P:System.Xml.XmlProcessingInstruction.Data" /> 屬性。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;code data-dev-comment-type=&quot;langword&quot;&gt;true&lt;/code&gt; to recursively clone the subtree under the specified node; &lt;code data-dev-comment-type=&quot;langword&quot;&gt;false&lt;/code&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns vsli:raw="The duplicate node.">重複的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Xml.XmlWriter&quot;&gt;&lt;/xref&gt;. Because ProcessingInstruction nodes do not have children, this method has no effect.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 因為 ProcessingInstruction 節點沒有子節點，所以這個方法不會有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;code data-dev-comment-type=&quot;langword&quot;&gt;XmlWriter&lt;/code&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;xref data-throw-if-not-resolved=&quot;true&quot; uid=&quot;System.Xml.XmlWriter&quot;&gt;&lt;/xref&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;code data-dev-comment-type=&quot;langword&quot;&gt;XmlWriter&lt;/code&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Data">
      <summary vsli:raw="Gets or sets the content of the processing instruction, excluding the target.">取得或設定處理指示的內容，目標除外。</summary>
      <returns vsli:raw="The content of the processing instruction, excluding the target.">處理指示的內容，目標除外。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.InnerText">
      <summary vsli:raw="Gets or sets the concatenated values of the node and all its children.">取得或設定節點的串連值和其所有的子節點。</summary>
      <returns vsli:raw="The concatenated values of the node and all its children.">節點的串連值和其所有的子節點。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For processing instruction nodes, this property returns the target of the processing instruction.">對於處理指示程式碼，這個屬性傳回處理指示的目標。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For processing instruction nodes, this property returns the target of the processing instruction.">對於處理指示程式碼，這個屬性傳回處理指示的目標。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For &lt;code data-dev-comment-type=&quot;langword&quot;&gt;XmlProcessingInstruction&lt;/code&gt; nodes, this value is XmlNodeType.ProcessingInstruction.">對於 <see langword="XmlProcessingInstruction" /> 節點，這個值是 XmlNodeType.ProcessingInstruction。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Target">
      <summary vsli:raw="Gets the target of the processing instruction.">取得處理指示的目標。</summary>
      <returns vsli:raw="The target of the processing instruction.">處理指示的目標。</returns>
    </member>
    <member name="P:System.Xml.XmlProcessingInstruction.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException">節點是唯讀的。</exception>
      <returns vsli:raw="The entire content of the processing instruction, excluding the target.">處理指示的完整內容，目標除外。</returns>
    </member>
    <member name="T:System.Xml.XmlQualifiedName">
      <summary vsli:raw="Represents an XML qualified name.">代表 XML 限定名稱。</summary>
    </member>
    <member name="F:System.Xml.XmlQualifiedName.Empty">
      <summary vsli:raw="Provides an empty &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">提供空白的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; class with the specified name.">使用指定的名稱，初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The local name to use as the name of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">要作為 <see cref="T:System.Xml.XmlQualifiedName" /> 物件名稱的區域名稱。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; class with the specified name and namespace.">使用指定的名稱和命名空間，來初始化 <see cref="T:System.Xml.XmlQualifiedName" /> 類別的新執行個體。</summary>
      <param name="name" vsli:raw="The local name to use as the name of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">要作為 <see cref="T:System.Xml.XmlQualifiedName" /> 物件名稱的區域名稱。</param>
      <param name="ns" vsli:raw="The namespace for the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 物件的命名空間。</param>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object is equal to the current &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object.">判斷指定的 <see cref="T:System.Xml.XmlQualifiedName" /> 物件是否等於目前的 <see cref="T:System.Xml.XmlQualifiedName" /> 物件。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two are the same instance object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這兩個是相同的執行個體物件，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.GetHashCode">
      <summary vsli:raw="Returns the hash code for the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlQualifiedName" /> 的雜湊程式碼。</summary>
      <returns vsli:raw="A hash code for this object.">這個物件的雜湊碼。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects.">比較兩個 <see cref="T:System.Xml.XmlQualifiedName" /> 物件。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two objects have the same name and namespace values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這兩個物件具有相同的名稱和命名空間值，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; objects.">比較兩個 <see cref="T:System.Xml.XmlQualifiedName" /> 物件。</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; to compare.">要比較的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name and namespace values for the two objects differ; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果這兩個物件的名稱和命名空間值不同，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString">
      <summary vsli:raw="Returns the string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值。</summary>
      <returns vsli:raw="The string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; in the format of &lt;see langword=&quot;namespace:localname&quot; /&gt;. If the object does not have a namespace defined, this method returns just the local name.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值，其格式為 <see langword="namespace:localname" />。 如果這個物件尚未定義命名空間，則此方法只會傳回區域名稱。</returns>
    </member>
    <member name="M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)">
      <summary vsli:raw="Returns the string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值。</summary>
      <param name="name" vsli:raw="The name of the object.">物件的名稱。</param>
      <param name="ns" vsli:raw="The namespace of the object.">物件的命名空間。</param>
      <returns vsli:raw="The string value of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; in the format of &lt;see langword=&quot;namespace:localname&quot; /&gt;. If the object does not have a namespace defined, this method returns just the local name.">
        <see cref="T:System.Xml.XmlQualifiedName" /> 的字串值，其格式為 <see langword="namespace:localname" />。 如果這個物件尚未定義命名空間，則此方法只會傳回區域名稱。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; is empty.">取得值，指出 <see cref="T:System.Xml.XmlQualifiedName" /> 是否為空的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if name and namespace are empty strings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果名稱和命名空間為空白字串，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Name">
      <summary vsli:raw="Gets a string representation of the qualified name of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">取得 <see cref="T:System.Xml.XmlQualifiedName" /> 限定名稱的字串表示。</summary>
      <returns vsli:raw="A string representation of the qualified name or String.Empty if a name is not defined for the object.">限定名稱的字串表示，如果物件並未定義名稱，則為 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlQualifiedName.Namespace">
      <summary vsli:raw="Gets a string representation of the namespace of the &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt;.">取得 <see cref="T:System.Xml.XmlQualifiedName" /> 命名空間的字串表示。</summary>
      <returns vsli:raw="A string representation of the namespace or String.Empty if a namespace is not defined for the object.">命名空間的字串表示，如果物件並未定義命名空間，則為 String.Empty。</returns>
    </member>
    <member name="T:System.Xml.XmlReader">
      <summary vsli:raw="Represents a reader that provides fast, noncached, forward-only access to XML data.">表示提供快速、非快取、順向 (Forward-only) 存取 XML 資料的讀取器 (Reader)。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlReader&quot; /&gt; class.">初始化 <see langword="XmlReader" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlReader.Close">
      <summary vsli:raw="When overridden in a derived class, changes the &lt;see cref=&quot;P:System.Xml.XmlReader.ReadState&quot; /&gt; to &lt;see cref=&quot;F:System.Xml.ReadState.Closed&quot; /&gt;.">在衍生類別中覆寫時，將 <see cref="P:System.Xml.XmlReader.ReadState" /> 變更為 <see cref="F:System.Xml.ReadState.Closed" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance using the specified stream with default settings.">使用指定的資料流，以預設設定建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">包含 XML 資料的資料流。  
  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; does not have sufficient permissions to access the location of the XML data.">
        <see cref="T:System.Xml.XmlReader" /> 沒有足夠的權限可以存取 XML 資料的位置。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance with the specified stream and settings.">使用指定的資料流及設定，建立新的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">包含 XML 資料的資料流。  
  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance using the specified stream, base URI, and settings.">使用指定的資料流、基底 URI 和設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">包含 XML 資料的資料流。  
  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="baseUri" vsli:raw="The base URI for the entity or document being read. This value can be &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; Security Note The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.">所讀取之實體或文件的基底 URI。 這個值可以是 <see langword="null" />。  
  
 安全性提示：系統會使用基底 URI 來解析 XML 文件的相對 URI。 請不要使用來自不受信任來源的基底 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance using the specified stream, settings, and context information for parsing.">使用剖析用的指定資料流、設定和內容資訊，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The stream that contains the XML data.&#xA;&#xA; The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.">包含 XML 資料的資料流。  
  
<see cref="T:System.Xml.XmlReader" /> 會掃描資料流的前幾個位元組，以尋找位元組順序標記或其他編碼符號。 決定編碼後，會使用該編碼繼續讀取資料流，處理流程也會繼續將輸入剖析成 (Unicode) 字元的資料流。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="inputContext" vsli:raw="The context information required to parse the XML fragment. The context information can include the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt; and &lt;c&gt;xml:space&lt;/c&gt; scope, base URI, and document type definition.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">剖析 XML 片段所需的內容資訊。 內容資訊可包含要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍、基底 URI，以及文件類型定義。  
  
這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader.">使用指定的文字讀取器，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 XML 讀取器不會使用 XML 宣告中所指定的編碼方式，來解碼資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader and settings.">使用指定的文字讀取器及設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 XML 讀取器不會使用 XML 宣告中所指定的編碼方式，來解碼資料流。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新的 <see cref="T:System.Xml.XmlReader" /> 的設定。 這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader, settings, and base URI.">使用指定的文字讀取器、設定和基底 URI，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to decode the data stream.">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 <see cref="T:System.Xml.XmlReader" /> 不會使用 XML 宣告中所指定的編碼方式將資料流解碼。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="baseUri" vsli:raw="The base URI for the entity or document being read. This value can be &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; Security Note The base URI is used to resolve the relative URI of the XML document. Do not use a base URI from an untrusted source.">所讀取之實體或文件的基底 URI。 這個值可以是 <see langword="null" />。  
  
 安全性提示：系統會使用基底 URI 來解析 XML 文件的相對 URI。 請不要使用來自不受信任來源的基底 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified text reader, settings, and context information for parsing.">使用指定的文字讀取器、設定和內容資訊進行剖析，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="input" vsli:raw="The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.">要從中讀取 XML 資料的文字閱讀器。 因為文字閱讀器會傳回 Unicode 字元的資料流，所以 XML 讀取器不會使用 XML 宣告中所指定的編碼方式，來解碼資料流。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="inputContext" vsli:raw="The context information required to parse the XML fragment. The context information can include the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt; and &lt;c&gt;xml:space&lt;/c&gt; scope, base URI, and document type definition.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">剖析 XML 片段所需的內容資訊。 內容資訊可包含要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍、基底 URI，以及文件類型定義。  
  
這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.NameTable&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlParserContext.NameTable&quot; /&gt; properties both contain values. (Only one of these &lt;see langword=&quot;NameTable&quot; /&gt; properties can be set and used.)">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 屬性都包含值。 (只能設定並使用其中一個 <see langword="NameTable" /> 屬性)。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance with specified URI.">使用指定的 URI，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="inputUri" vsli:raw="The URI for the file that contains the XML data. The &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; class is used to convert the path to a canonical data representation.">包含 XML 資料之檔案的 URI。 <see cref="T:System.Xml.XmlUrlResolver" /> 類別可用來將路徑轉換成正式的資料代表。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; does not have sufficient permissions to access the location of the XML data.">
        <see cref="T:System.Xml.XmlReader" /> 沒有足夠的權限可以存取 XML 資料的位置。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file identified by the URI does not exist.">URI 所識別的檔案不存在。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The URI format is not correct.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.FormatException&quot; /&gt;, instead.">
        <block subset="none" type="note">
          <para>  
 在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。</para>
        </block>  
  
 URI 格式不正確。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified URI and settings.">使用指定的 URI 和設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="inputUri" vsli:raw="The URI for the file containing the XML data. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object on the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object is used to convert the path to a canonical data representation. If &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.XmlResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, a new &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; object is used.">包含 XML 資料之檔案的 URI。 <see cref="T:System.Xml.XmlReaderSettings" /> 物件上的 <see cref="T:System.Xml.XmlResolver" /> 物件是用於將路徑轉換成標準資料表示。 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 為 <see langword="null" />，則會使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file specified by the URI cannot be found.">找不到由 URI 指定的檔案。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The URI format is not correct.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.FormatException&quot; /&gt;, instead.">
        <block subset="none" type="note">
          <para>  
 在適用於 Windows 市集應用程式的 .NET 或是可攜式類別庫中，改為攔截基底類別例外狀況<see cref="T:System.FormatException" />。</para>
        </block>  
  
 URI 格式不正確。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified URI, settings, and context information for parsing.">使用剖析用的指定 URI、設定和內容資訊，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="inputUri" vsli:raw="The URI for the file containing the XML data. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object on the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object is used to convert the path to a canonical data representation. If &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.XmlResolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, a new &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; object is used.">包含 XML 資料之檔案的 URI。 <see cref="T:System.Xml.XmlReaderSettings" /> 物件上的 <see cref="T:System.Xml.XmlResolver" /> 物件是用於將路徑轉換成標準資料表示。 如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> 為 <see langword="null" />，則會使用新的 <see cref="T:System.Xml.XmlUrlResolver" /> 物件。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance. This value can be &lt;see langword=&quot;null&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。 這個值可以是 <see langword="null" />。</param>
      <param name="inputContext" vsli:raw="The context information required to parse the XML fragment. The context information can include the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt; and &lt;c&gt;xml:space&lt;/c&gt; scope, base URI, and document type definition.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">剖析 XML 片段所需的內容資訊。 內容資訊可包含要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍、基底 URI，以及文件類型定義。  
  
這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see langword=&quot;inputUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="inputUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; does not have sufficient permissions to access the location of the XML data.">
        <see cref="T:System.Xml.XmlReader" /> 沒有足夠的權限可以存取 XML 資料的位置。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.NameTable&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlParserContext.NameTable&quot; /&gt; properties both contain values. (Only one of these &lt;see langword=&quot;NameTable&quot; /&gt; properties can be set and used).">
        <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> 和 <see cref="P:System.Xml.XmlParserContext.NameTable" /> 屬性都包含值。 (只能設定並使用其中一個 <see langword="NameTable" /> 屬性)。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The file specified by the URI cannot be found.">找不到由 URI 指定的檔案。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The URI format is not correct.">URI 格式不正確。</exception>
      <returns vsli:raw="An object that is used to read the XML data in the stream.">用以在資料流中讀取 XML 資料的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance by using the specified XML reader and settings.">使用指定的 XML 讀取器和設定，建立新的 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <param name="reader" vsli:raw="The object that you want to use as the underlying XML reader.">您想要當做底層 XML 讀取器使用的物件。</param>
      <param name="settings" vsli:raw="The settings for the new &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance.&#xA;&#xA; The conformance level of the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object must either match the conformance level of the underlying reader, or it must be set to &lt;see cref=&quot;F:System.Xml.ConformanceLevel.Auto&quot; /&gt;.">新 <see cref="T:System.Xml.XmlReader" /> 執行個體的設定。  
  
<see cref="T:System.Xml.XmlReaderSettings" /> 物件的一致性層級必須符合基礎讀取器的一致性層級，或是必須設定為 <see cref="F:System.Xml.ConformanceLevel.Auto" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;reader&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object specifies a conformance level that is not consistent with conformance level of the underlying reader.&#xA;&#xA; -or-&#xA;&#xA; The underlying &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is in an &lt;see cref=&quot;F:System.Xml.ReadState.Error&quot; /&gt; or &lt;see cref=&quot;F:System.Xml.ReadState.Closed&quot; /&gt; state.">如果 <see cref="T:System.Xml.XmlReaderSettings" /> 物件所指定的一致性層級與基礎讀取器的一致性層級不一致。  
  
-或- 
基礎 <see cref="T:System.Xml.XmlReader" /> 處於 <see cref="F:System.Xml.ReadState.Error" /> 或 <see cref="F:System.Xml.ReadState.Closed" /> 狀態。</exception>
      <returns vsli:raw="An object that is wrapped around the specified &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">包裝在指定 <see cref="T:System.Xml.XmlReader" /> 物件周圍的物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; class.">釋放 <see cref="T:System.Xml.XmlReader" /> 類別目前的執行個體所使用的全部資源。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.Xml.XmlReader" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.Int32)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified index.">在衍生類別中覆寫時，取得具有指定索引的屬性值。</summary>
      <param name="i" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;i&quot; /&gt; is out of range. It must be non-negative and less than the size of the attribute collection.">
        <paramref name="i" /> 超出範圍。 它必須是非負值，而且小於屬性集合的大小。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value of the specified attribute. This method does not move the reader.">指定的屬性值。 這個方法不會移動讀取器。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt;.">在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的屬性值。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found or the value is &lt;see langword=&quot;String.Empty&quot; /&gt;, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到該屬性或其值為 <see langword="String.Empty" />，則傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt;.">在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 與 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的屬性值。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found or the value is &lt;see langword=&quot;String.Empty&quot; /&gt;, &lt;see langword=&quot;null&quot; /&gt; is returned. This method does not move the reader.">指定的屬性值。 如果找不到該屬性或其值為 <see langword="String.Empty" />，則傳回 <see langword="null" />。 這個方法不會移動讀取器。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.GetValueAsync">
      <summary vsli:raw="Asynchronously gets the value of the current node.">非同步取得目前節點的值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress&quot;.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，即會擲回 <see cref="T:System.InvalidOperationException" /> 和「非同步作業已在進行中」訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The value of the current node.">目前節點的值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsName(System.String)">
      <summary vsli:raw="Returns a value indicating whether the string argument is a valid XML name.">傳回值，指出字串引數是否為有效的 XML 名稱。</summary>
      <param name="str" vsli:raw="The name to validate.">要驗證的名稱。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;str&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="str" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果名稱有效，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsNameToken(System.String)">
      <summary vsli:raw="Returns a value indicating whether or not the string argument is a valid XML name token.">傳回值，指出字串引數是否為有效的 XML 名稱語彙基元。</summary>
      <param name="str" vsli:raw="The name token to validate.">要驗證的名稱語彙基元。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;str&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="str" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if it is a valid name token; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果它是有效的名稱語彙基元，即為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement">
      <summary vsli:raw="Calls &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; and tests if the current content node is a start tag or empty element tag.">呼叫 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 並測試目前的內容節點為開頭標記或空白項目標記。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML is encountered in the input stream.">在輸入資料流中遇到錯誤的 XML。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; finds a start tag or empty element tag; &lt;see langword=&quot;false&quot; /&gt; if a node type other than &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt; was found.">如果 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 找到開頭標記或空白項目標記，即為 <see langword="true" />；如果找到的節點類型並非 <see langword="false" />，則為 <see langword="XmlNodeType.Element" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String)">
      <summary vsli:raw="Calls &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; and tests if the current content node is a start tag or empty element tag and if the &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; property of the element found matches the given argument.">呼叫 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 並測試目前的內容節點為開頭標記或空白項目標記，以及所找到項目的 <see cref="P:System.Xml.XmlReader.Name" /> 屬性是否符合指定的引數。</summary>
      <param name="name" vsli:raw="The string matched against the &lt;see langword=&quot;Name&quot; /&gt; property of the element found.">字串符合所找到項目的 <see langword="Name" /> 屬性。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML is encountered in the input stream.">在輸入資料流中遇到錯誤的 XML。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting node is an element and the &lt;see langword=&quot;Name&quot; /&gt; property matches the specified string. &lt;see langword=&quot;false&quot; /&gt; if a node type other than &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt; was found or if the element &lt;see langword=&quot;Name&quot; /&gt; property does not match the specified string.">如果產生的節點是項目，並且 <see langword="true" /> 屬性符合指定的字串，即為 <see langword="Name" />。 如果找到的節點類型並非 <see langword="XmlNodeType.Element" />，或項目 <see langword="Name" /> 屬性不符合指定字串，即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)">
      <summary vsli:raw="Calls &lt;see cref=&quot;M:System.Xml.XmlReader.MoveToContent&quot; /&gt; and tests if the current content node is a start tag or empty element tag and if the &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element found match the given strings.">呼叫 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 並測試目前的內容節點為開頭標記或空白項目標記，以及所找到項目的 <see cref="P:System.Xml.XmlReader.LocalName" /> 與 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 屬性是否符合指定的字串。</summary>
      <param name="localname" vsli:raw="The string to match against the &lt;see langword=&quot;LocalName&quot; /&gt; property of the element found.">要符合所找到項目之 <see langword="LocalName" /> 屬性的字串。</param>
      <param name="ns" vsli:raw="The string to match against the &lt;see langword=&quot;NamespaceURI&quot; /&gt; property of the element found.">要符合所找到項目之 <see langword="NamespaceURI" /> 屬性的字串。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML is encountered in the input stream.">在輸入資料流中遇到錯誤的 XML。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting node is an element. &lt;see langword=&quot;false&quot; /&gt; if a node type other than &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt; was found or if the &lt;see langword=&quot;LocalName&quot; /&gt; and &lt;see langword=&quot;NamespaceURI&quot; /&gt; properties of the element do not match the specified strings.">
        <see langword="true" />如果產生的節點是項目。 如果找到的節點類型並非 <see langword="XmlNodeType.Element" />，或項目的 <see langword="LocalName" /> 和 <see langword="NamespaceURI" /> 屬性不符合指定字串，即為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.LookupNamespace(System.String)">
      <summary vsli:raw="When overridden in a derived class, resolves a namespace prefix in the current element's scope.">在衍生類別中覆寫時，解析目前項目範圍內的命名空間前置詞。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送空字串。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="When overridden in a derived class, moves to the attribute with the specified index.">在衍生類別中覆寫時，移至具有指定索引的屬性。</summary>
      <param name="i" vsli:raw="The index of the attribute.">屬性的索引。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The parameter has a negative value.">參數的值是負數。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String)">
      <summary vsli:raw="When overridden in a derived class, moves to the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt;.">在衍生類別中覆寫時，移至具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的屬性。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">參數為空字串。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, moves to the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt;.">在衍生類別中覆寫時，移至具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 和 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的屬性。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">這兩個參數值為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContent">
      <summary vsli:raw="Checks whether the current node is a content (non-white space text, &lt;see langword=&quot;CDATA&quot; /&gt;, &lt;see langword=&quot;Element&quot; /&gt;, &lt;see langword=&quot;EndElement&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt;) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: &lt;see langword=&quot;ProcessingInstruction&quot; /&gt;, &lt;see langword=&quot;DocumentType&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, &lt;see langword=&quot;Whitespace&quot; /&gt;, or &lt;see langword=&quot;SignificantWhitespace&quot; /&gt;.">檢查目前節點是否為內容 (非空白字元文字、<see langword="CDATA" />、<see langword="Element" />、<see langword="EndElement" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" />) 節點。 如果節點並非內容節點，讀取器會先跳至下一個內容節點或檔案結尾。 它會略過下列型別的節點：<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" /> 或 <see langword="SignificantWhitespace" />。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML encountered in the input stream.">在輸入資料流中發現不正確的 XML。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the current node found by the method or &lt;see langword=&quot;XmlNodeType.None&quot; /&gt; if the reader has reached the end of the input stream.">這個方法所找到的目前節點的 <see cref="P:System.Xml.XmlReader.NodeType" />，如果讀取器已經到達輸入資料流的結尾，則為 <see langword="XmlNodeType.None" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToContentAsync">
      <summary vsli:raw="Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.">非同步檢查目前節點是否為內容節點。 如果節點並非內容節點，讀取器會先跳至下一個內容節點或檔案結尾。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the current node found by the method or &lt;see langword=&quot;XmlNodeType.None&quot; /&gt; if the reader has reached the end of the input stream.">這個方法所找到的目前節點的 <see cref="P:System.Xml.XmlReader.NodeType" />，如果讀取器已經到達輸入資料流的結尾，則為 <see langword="XmlNodeType.None" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToElement">
      <summary vsli:raw="When overridden in a derived class, moves to the element that contains the current attribute node.">在衍生類別中覆寫時，移至包含目前屬性節點的項目上。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToFirstAttribute">
      <summary vsli:raw="When overridden in a derived class, moves to the first attribute.">在衍生類別中覆寫時，移至第一個屬性。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.MoveToNextAttribute">
      <summary vsli:raw="When overridden in a derived class, moves to the next attribute.">在衍生類別中覆寫時，移至下一個屬性。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.Read">
      <summary vsli:raw="When overridden in a derived class, reads the next node from the stream.">在衍生類別中覆寫時，從資料流讀取下一個節點。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果順利讀取下一個節點，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAsync">
      <summary vsli:raw="Asynchronously reads the next node from the stream.">非同步讀取資料流中的下一個節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadAttributeValue">
      <summary vsli:raw="When overridden in a derived class, parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">在衍生類別中覆寫時，將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.&#xA;&#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.&#xA;&#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of &lt;see langword=&quot;String.Empty&quot; /&gt;.">如果傳回的是節點，則為 <see langword="true" />。  
  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
  
針對含有 <see langword="String.Empty" /> 值的單一節點，空白的屬性 (例如 <c>misc=""</c>) 會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Reads the content as an object of the type specified.">以指定型别的物件形式讀取內容。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.&#xA;&#xA; Note With the release of the .NET Framework 3.5, the value of the &lt;paramref name=&quot;returnType&quot; /&gt; parameter can now be the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; type.">要傳回的值型别。  
  
 注意：使用 .NET Framework 3.5 的版本時，<paramref name="returnType" /> 參數的值現在可以是 <see cref="T:System.DateTimeOffset" /> 類型。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an &lt;see cref=&quot;T:System.Xml.XmlQualifiedName&quot; /&gt; object to an &lt;c&gt;xs:string&lt;/c&gt;.&#xA;&#xA; This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。 例如，將 <see cref="T:System.Xml.XmlQualifiedName" /> 物件轉換為 <c>xs:string</c> 時，可以使用它。  
  
這個值可以是 <see langword="null" />。</param>
      <exception cref="T:System.FormatException" vsli:raw="The content is not in the correct format for the target type.">此內容的目標類型格式不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;returnType&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="returnType" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not a supported node type. See the table below for details.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">目前節點不是受支援的節點型別。 如需詳細資訊，請參閱下表。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="Read &lt;see langword=&quot;Decimal.MaxValue&quot; /&gt;.">讀取 <see langword="Decimal.MaxValue" />。</exception>
      <returns vsli:raw="The concatenated text content or attribute value converted to the requested type.">轉換為要求類型的串連文字內容或屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Asynchronously reads the content as an object of the type specified.">以非同步的方式讀取做為指定型别之物件的內容。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.">要傳回的值型别。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The concatenated text content or attribute value converted to the requested type.">轉換為要求類型的串連文字內容或屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">目前的節點不支援 <see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the content and returns the Base64 decoded binary bytes.">以非同步的方式讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">讀取內容，並傳回 <see langword="BinHex" /> 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">目前的節點不支援 <see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">以非同步的方式讀取內容，並傳回 <see langword="BinHex" /> 的解碼二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsBoolean">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see langword=&quot;Boolean&quot; /&gt;.">以 <see langword="Boolean" /> 的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">
        <see cref="T:System.Boolean" /> 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTime">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">以 <see cref="T:System.DateTime" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">
        <see cref="T:System.DateTime" /> 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; object.">以 <see cref="T:System.DateTimeOffset" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; object.">
        <see cref="T:System.DateTimeOffset" /> 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDecimal">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">以 <see cref="T:System.Decimal" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content at the current position as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">
        <see cref="T:System.Decimal" /> 物件形式的目前位置文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsDouble">
      <summary vsli:raw="Reads the text content at the current position as a double-precision floating-point number.">以雙精確度浮點數的形式讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a double-precision floating-point number.">雙精確度浮點數形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsFloat">
      <summary vsli:raw="Reads the text content at the current position as a single-precision floating point number.">以單精確度浮點數的形式讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content at the current position as a single-precision floating point number.">單精確度浮點數形式之目前位置的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsInt">
      <summary vsli:raw="Reads the text content at the current position as a 32-bit signed integer.">以 32 位元帶正負號之整數的形式讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a 32-bit signed integer.">32 位元帶正負號之整數形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsLong">
      <summary vsli:raw="Reads the text content at the current position as a 64-bit signed integer.">以 64 位元帶正負號之整數的形式讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a 64-bit signed integer.">64 位元帶正負號之整數形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObject">
      <summary vsli:raw="Reads the text content at the current position as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">以 <see cref="T:System.Object" /> 的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as the most appropriate common language runtime (CLR) object.">最合適之 Common Language Runtime (CLR) 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsObjectAsync">
      <summary vsli:raw="Asynchronously reads the text content at the current position as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">以非同步方式與 <see cref="T:System.Object" /> 的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The text content as the most appropriate common language runtime (CLR) object.">最合適之 Common Language Runtime (CLR) 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsString">
      <summary vsli:raw="Reads the text content at the current position as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">以 <see cref="T:System.String" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The string format is not valid.">字串格式無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadContentAsStringAsync">
      <summary vsli:raw="Asynchronously reads the text content at the current position as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">以非同步方式與 <see cref="T:System.String" /> 物件的形式，讀取目前位置的文字內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The text content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> 物件形式的文字內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Reads the element content as the requested type.">以要求之型別的形式讀取項目內容。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.&#xA;&#xA; Note With the release of the .NET Framework 3.5, the value of the &lt;paramref name=&quot;returnType&quot; /&gt; parameter can now be the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; type.">要傳回的值型别。  
  
 注意：使用 .NET Framework 3.5 的版本時，<paramref name="returnType" /> 參數的值現在可以是 <see cref="T:System.DateTimeOffset" /> 類型。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="Read &lt;see langword=&quot;Decimal.MaxValue&quot; /&gt;.">讀取 <see langword="Decimal.MaxValue" />。</exception>
      <returns vsli:raw="The element content converted to the requested typed object.">轉換為要求之類型物件的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以要求之型別的形式讀取項目內容。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.&#xA;&#xA; Note With the release of the .NET Framework 3.5, the value of the &lt;paramref name=&quot;returnType&quot; /&gt; parameter can now be the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; type.">要傳回的值型别。  
  
 注意：使用 .NET Framework 3.5 的版本時，<paramref name="returnType" /> 參數的值現在可以是 <see cref="T:System.DateTimeOffset" /> 類型。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="Read &lt;see langword=&quot;Decimal.MaxValue&quot; /&gt;.">讀取 <see langword="Decimal.MaxValue" />。</exception>
      <returns vsli:raw="The element content converted to the requested typed object.">轉換為要求之類型物件的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Asynchronously reads the element content as the requested type.">以要求之型別的形式，非同步讀取項目內容。</summary>
      <param name="returnType" vsli:raw="The type of the value to be returned.">要傳回的值型别。</param>
      <param name="namespaceResolver" vsli:raw="An &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object that is used to resolve any namespace prefixes related to type conversion.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析任何與型別轉換相關的命名空間前置詞。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The element content converted to the requested typed object.">轉換為要求之類型物件的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the &lt;see langword=&quot;Base64&quot; /&gt; content.">讀取項目，並將 <see langword="Base64" /> 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">目前的節點不是項目節點。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the element and decodes the &lt;see langword=&quot;Base64&quot; /&gt; content.">以非同步的方式讀取項目，並將 <see langword="Base64" /> 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the &lt;see langword=&quot;BinHex&quot; /&gt; content.">讀取項目，並將 <see langword="BinHex" /> 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">目前的節點不是項目節點。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads the element and decodes the &lt;see langword=&quot;BinHex&quot; /&gt; content.">以非同步的方式讀取項目，並將 <see langword="BinHex" /> 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">以 <see cref="T:System.Boolean" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">目前的項目包含子項目。  
  
-或- 
項目內容不能轉換為 <see cref="T:System.Boolean" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">
        <see cref="T:System.Boolean" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.Boolean" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; object.">
        <see cref="T:System.Boolean" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">以 <see cref="T:System.DateTime" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">目前的項目包含子項目。  
  
-或- 
項目內容不能轉換為 <see cref="T:System.DateTime" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">
        <see cref="T:System.DateTime" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.DateTime" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element contents as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; object.">
        <see cref="T:System.DateTime" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">以 <see cref="T:System.Decimal" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">目前的項目包含子項目。  
  
-或- 
項目內容不能轉換為 <see cref="T:System.Decimal" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">
        <see cref="T:System.Decimal" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.Decimal" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt;.">目前的項目包含子項目。  
  
-或- 
項目內容不能轉換為 <see cref="T:System.Decimal" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; object.">
        <see cref="T:System.Decimal" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble">
      <summary vsli:raw="Reads the current element and returns the contents as a double-precision floating-point number.">以雙精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a double-precision floating-point number.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換為雙精確度浮點數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a double-precision floating-point number.">雙精確度浮點數形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以雙精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a double-precision floating-point number.">雙精確度浮點數形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat">
      <summary vsli:raw="Reads the current element and returns the contents as single-precision floating-point number.">以單精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a single-precision floating-point number.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換為單精確度浮點數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a single-precision floating point number.">單精確度浮點數形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以單精確度浮點數的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a single-precision floating-point number.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換為單精確度浮點數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a single-precision floating point number.">單精確度浮點數形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt">
      <summary vsli:raw="Reads the current element and returns the contents as a 32-bit signed integer.">以 32 位元帶正負號之整數的形式，讀取目前的項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 32-bit signed integer.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容不能轉換為 32 位元帶正負號的整數。</exception>
      <returns vsli:raw="The element content as a 32-bit signed integer.">32 位元帶正負號之整數形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 32 位元帶正負號之整數的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 32-bit signed integer.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容不能轉換為 32 位元帶正負號的整數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a 32-bit signed integer.">32 位元帶正負號之整數形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong">
      <summary vsli:raw="Reads the current element and returns the contents as a 64-bit signed integer.">以 64 位元帶正負號之整數的形式讀取目前的元素並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 64-bit signed integer.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容不能轉換為 64 位元帶正負號的整數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a 64-bit signed integer.">64 位元帶正負號之整數形式的元素內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 64 位元帶正負號之整數的形式讀取目前的元素並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a 64-bit signed integer.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容不能轉換為 64 位元帶正負號的整數。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a 64-bit signed integer.">64 位元帶正負號之整數形式的元素內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject">
      <summary vsli:raw="Reads the current element and returns the contents as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">以 <see cref="T:System.Object" /> 的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="A boxed common language runtime (CLR) object of the most appropriate type. The &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.">最合適類型的 Boxed Common Language Runtime (CLR) 物件。 <see cref="P:System.Xml.XmlReader.ValueType" /> 屬性會判斷適當的 CLR 類型。 如果內容的類型是清單類型，則這個方法會傳回適當類型之 Boxed 物件的陣列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.Object" /> 的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to the requested type.">目前的項目包含子項目。  
  
 -或-  
  
 項目內容無法轉換成要求的類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="A boxed common language runtime (CLR) object of the most appropriate type. The &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.">最合適型別的 Boxed Common Language Runtime (CLR) 物件。 <see cref="P:System.Xml.XmlReader.ValueType" /> 屬性會判斷適當的 CLR 類型。 如果內容的類型是清單類型，則這個方法會傳回適當類型之 Boxed 物件的陣列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync">
      <summary vsli:raw="Asynchronously reads the current element and returns the contents as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">以非同步方式與 <see cref="T:System.Object" /> 的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="A boxed common language runtime (CLR) object of the most appropriate type. The &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.">最合適類型的 Boxed Common Language Runtime (CLR) 物件。 <see cref="P:System.Xml.XmlReader.ValueType" /> 屬性會判斷適當的 CLR 類型。 如果內容的類型是清單類型，則這個方法會傳回適當類型之 Boxed 物件的陣列。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString">
      <summary vsli:raw="Reads the current element and returns the contents as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">以 <see cref="T:System.String" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">目前的項目包含子項目。  
  
-或- 
項目內容不能轉換為 <see cref="T:System.String" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)">
      <summary vsli:raw="Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">檢查指定的區域名稱和命名空間 URI 是否與目前的項目相符，然後以 <see cref="T:System.String" /> 物件的形式，讀取目前的項目並傳回內容。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">
        <see cref="T:System.Xml.XmlReader" /> 並不是放置在項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current element contains child elements.&#xA;&#xA; -or-&#xA;&#xA; The element content cannot be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">目前的項目包含子項目。  
  
-或- 
項目內容不能轉換為 <see cref="T:System.String" /> 物件。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The method is called with &lt;see langword=&quot;null&quot; /&gt; arguments.">方法是以 <see langword="null" /> 引數呼叫。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified local name and namespace URI do not match that of the current element being read.">指定的區域名稱和命名空間 URI，與目前正在讀取的項目不相符。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementContentAsStringAsync">
      <summary vsli:raw="Asynchronously reads the current element and returns the contents as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">以非同步方式與 <see cref="T:System.String" /> 物件的形式，讀取目前項目並傳回內容。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The element content as a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">
        <see cref="T:System.String" /> 物件形式的項目內容。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString">
      <summary vsli:raw="Reads a text-only element. However, we recommend that you use the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadElementContentAsString&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">讀取純文字項目。 不過，我們建議您改用<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The next content node is not a start tag; or the element found does not contain a simple text value.">下一個內容節點不是開始標記。或找到的項目未包含簡單的文字值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text contained in the element that was read. An empty string if the element is empty.">讀取的項目中所含的文字。 當字串為空白時，則為空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String)">
      <summary vsli:raw="Checks that the &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; property of the element found matches the given string before reading a text-only element. However, we recommend that you use the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadElementContentAsString&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">檢查<see cref="P:System.Xml.XmlReader.Name" />屬性找到的項目之前讀取純文字的項目符合指定的字串。 不過，我們建議您改用<see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <param name="name" vsli:raw="The name to check.">要進行檢查的名稱。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="If the next content node is not a start tag; if the element &lt;see langword=&quot;Name&quot; /&gt; does not match the given argument; or if the element found does not contain a simple text value.">如果下一個內容節點不是開始標記。如果項目<see langword="Name" />不符合指定的引數; 或如果找到的項目不包含簡單的文字值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text contained in the element that was read. An empty string if the element is empty.">讀取的項目中所含的文字。 當字串為空白時，則為空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)">
      <summary vsli:raw="Checks that the &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element found matches the given strings before reading a text-only element. However, we recommend that you use the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">檢查<see cref="P:System.Xml.XmlReader.LocalName" />和<see cref="P:System.Xml.XmlReader.NamespaceURI" />項目的屬性找到符合的指定的字串之前讀取純文字的項目。 不過，我們建議您改用<see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <param name="localname" vsli:raw="The local name to check.">要進行檢查的區域名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to check.">要進行檢查的命名空間 URI。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="If the next content node is not a start tag; if the element &lt;see langword=&quot;LocalName&quot; /&gt; or &lt;see langword=&quot;NamespaceURI&quot; /&gt; do not match the given arguments; or if the element found does not contain a simple text value.">如果下一個內容節點不是開始標記。如果項目<see langword="LocalName" />或<see langword="NamespaceURI" />不符合指定的引數; 或如果找到的項目不包含簡單的文字值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The text contained in the element that was read. An empty string if the element is empty.">讀取的項目中所含的文字。 當字串為空白時，則為空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadEndElement">
      <summary vsli:raw="Checks that the current content node is an end tag and advances the reader to the next node.">檢查目前節點為結尾標記，並使讀取器前進至下一個節點。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The current node is not an end tag or if incorrect XML is encountered in the input stream.">目前的節點不是結束標記，或如果輸入資料流中遇到不正確的 XML。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXml">
      <summary vsli:raw="When overridden in a derived class, reads all the content, including markup, as a string.">在衍生類別中覆寫時，將所有的內容當做字串讀取，包括標記。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML was not well-formed, or an error occurred while parsing the XML.">XML 不是語式正確，或剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.&#xA;&#xA; If the current node is neither an element nor attribute, an empty string is returned.">目前節點中所有的 XML 內容，包括標記。 如果目前節點沒有子節點，則傳回空字串。  
  
 如果目前節點既不是項目也不是屬性，則傳回空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadInnerXmlAsync">
      <summary vsli:raw="Asynchronously reads all the content, including markup, as a string.">以字串形式非同步讀取所有內容，包括標記。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.">目前節點中所有的 XML 內容，包括標記。 如果目前節點沒有子節點，則傳回空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXml">
      <summary vsli:raw="When overridden in a derived class, reads the content, including markup, representing this node and all its children.">在衍生類別中覆寫時，讀取代表這個節點及其所有子節點的內容，包括標記。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML was not well-formed, or an error occurred while parsing the XML.">XML 不是語式正確，或剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.">如果讀取器位於項目或屬性節點上，這個方法會傳回目前節點及其所有子節點的所有 XML 內容，包括標記；否則傳回空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadOuterXmlAsync">
      <summary vsli:raw="Asynchronously reads the content, including markup, representing this node and all its children.">非同步讀取表示這個節點及其所有子系的內容，包括標記。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.">如果讀取器位於項目或屬性節點上，這個方法會傳回目前節點及其所有子節點的所有 XML 內容，包括標記；否則傳回空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement">
      <summary vsli:raw="Checks that the current node is an element and advances the reader to the next node.">檢查以確定目前節點為項目，然後使讀取器前進至下一個節點。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML was encountered in the input stream.">輸入資料流中遇到不正確的 XML。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String)">
      <summary vsli:raw="Checks that the current content node is an element with the given &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; and advances the reader to the next node.">檢查目前的內容節點是否具有的項目指定<see cref="P:System.Xml.XmlReader.Name" />並使讀取器前進至下一個節點。</summary>
      <param name="name" vsli:raw="The qualified name of the element.">項目的限定名稱。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML was encountered in the input stream.&#xA;&#xA; -or-&#xA;&#xA; The &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt; of the element does not match the given &lt;paramref name=&quot;name&quot; /&gt;.">輸入資料流中遇到不正確的 XML。  
  
-或- 
<see cref="P:System.Xml.XmlReader.Name" />的項目不符合給定<paramref name="name" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)">
      <summary vsli:raw="Checks that the current content node is an element with the given &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; and advances the reader to the next node.">檢查目前的內容節點是否具有的項目指定<see cref="P:System.Xml.XmlReader.LocalName" />和<see cref="P:System.Xml.XmlReader.NamespaceURI" />並使讀取器前進至下一個節點。</summary>
      <param name="localname" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Incorrect XML was encountered in the input stream.&#xA;&#xA; -or-&#xA;&#xA; The &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt; properties of the element found do not match the given arguments.">輸入資料流中遇到不正確的 XML。  
  
-或- 
<see cref="P:System.Xml.XmlReader.LocalName" />和<see cref="P:System.Xml.XmlReader.NamespaceURI" />屬性找到的項目不符合指定的引數。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.ReadString">
      <summary vsli:raw="When overridden in a derived class, reads the contents of an element or text node as a string. However, we recommend that you use the &lt;see cref=&quot;Overload:System.Xml.XmlReader.ReadElementContentAsString&quot; /&gt; method instead, because it provides a more straightforward way to handle this operation.">在衍生類別中覆寫時，將項目或文字節點的內容當做字串讀取。 不過，我們建議您改用<see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" />方法相反地，因為它會提供較簡單的方式來處理這項作業。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The contents of the element or an empty string.">項目的內容或空字串。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadSubtree">
      <summary vsli:raw="Returns a new &lt;see langword=&quot;XmlReader&quot; /&gt; instance that can be used to read the current node, and all its descendants.">傳回新<see langword="XmlReader" />可以用來讀取目前的節點及其所有子系的執行個體。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The XML reader isn't positioned on an element when this method is called.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">呼叫這個方法時，XML 讀取器未位於項目上。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="A new XML reader instance set to &lt;see cref=&quot;F:System.Xml.ReadState.Initial&quot; /&gt;. Calling the &lt;see cref=&quot;M:System.Xml.XmlReader.Read&quot; /&gt; method positions the new reader on the node that was current before the call to the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadSubtree&quot; /&gt; method.">新的 XML 讀取器執行個體設定為<see cref="F:System.Xml.ReadState.Initial" />。 呼叫<see cref="M:System.Xml.XmlReader.Read" />方法前呼叫的節點上放置新讀取器<see cref="M:System.Xml.XmlReader.ReadSubtree" />方法。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String)">
      <summary vsli:raw="Advances the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the next descendant element with the specified qualified name.">往前推進<see cref="T:System.Xml.XmlReader" />下一個子系的項目，具有指定限定名稱。</summary>
      <param name="name" vsli:raw="The qualified name of the element you wish to move to.">您要移至之項目的限定名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">參數為空字串。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching descendant element is found; otherwise &lt;see langword=&quot;false&quot; /&gt;. If a matching descendant element is not found, the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the element.&#xA;&#xA; If the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element when &lt;see cref=&quot;M:System.Xml.XmlReader.ReadToDescendant(System.String)&quot; /&gt; was called, this method returns &lt;see langword=&quot;false&quot; /&gt; and the position of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not changed.">
        <see langword="true" />如果找到相符的子系項目否則<see langword="false" />。 如果找不到相符的子元素，<see cref="T:System.Xml.XmlReader" />位於結束標記 (<see cref="P:System.Xml.XmlReader.NodeType" />是<see langword="XmlNodeType.EndElement" />) 的項目。  
  
如果<see cref="T:System.Xml.XmlReader" />不位於項目上時<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />呼叫，這個方法會傳回<see langword="false" />和位置<see cref="T:System.Xml.XmlReader" />則不會變更。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)">
      <summary vsli:raw="Advances the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to the next descendant element with the specified local name and namespace URI.">往前推進<see cref="T:System.Xml.XmlReader" />下一個子系的項目，使用指定的區域名稱和命名空間 URI。</summary>
      <param name="localName" vsli:raw="The local name of the element you wish to move to.">您要移至之項目的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element you wish to move to.">您要移至之項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">這兩個參數值為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching descendant element is found; otherwise &lt;see langword=&quot;false&quot; /&gt;. If a matching descendant element is not found, the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the element.&#xA;&#xA; If the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not positioned on an element when &lt;see cref=&quot;M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)&quot; /&gt; was called, this method returns &lt;see langword=&quot;false&quot; /&gt; and the position of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is not changed.">
        <see langword="true" />如果找到相符的子系項目否則<see langword="false" />。 如果找不到相符的子元素，<see cref="T:System.Xml.XmlReader" />位於結束標記 (<see cref="P:System.Xml.XmlReader.NodeType" />是<see langword="XmlNodeType.EndElement" />) 的項目。  
  
如果<see cref="T:System.Xml.XmlReader" />不位於項目上時<see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />呼叫，這個方法會傳回<see langword="false" />和位置<see cref="T:System.Xml.XmlReader" />則不會變更。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String)">
      <summary vsli:raw="Reads until an element with the specified qualified name is found.">在找到具有指定限定名稱的項目之前讀取。</summary>
      <param name="name" vsli:raw="The qualified name of the element.">項目的限定名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">參數為空字串。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching element is found; otherwise &lt;see langword=&quot;false&quot; /&gt; and the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is in an end of file state.">
        <see langword="true" />如果找到相符的項目否則<see langword="false" />和<see cref="T:System.Xml.XmlReader" />是在檔案結尾的狀態。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)">
      <summary vsli:raw="Reads until an element with the specified local name and namespace URI is found.">在找到具有指定區域名稱和命名空間 URI 的項目之前讀取。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">這兩個參數值為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching element is found; otherwise &lt;see langword=&quot;false&quot; /&gt; and the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; is in an end of file state.">
        <see langword="true" />如果找到相符的項目否則<see langword="false" />和<see cref="T:System.Xml.XmlReader" />是在檔案結尾的狀態。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String)">
      <summary vsli:raw="Advances the &lt;see langword=&quot;XmlReader&quot; /&gt; to the next sibling element with the specified qualified name.">往前推進<see langword="XmlReader" />指定限定名稱的下一個同層級項目。</summary>
      <param name="name" vsli:raw="The qualified name of the sibling element you wish to move to.">您要移至之同層級項目的限定名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The parameter is an empty string.">參數為空字串。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching sibling element is found; otherwise &lt;see langword=&quot;false&quot; /&gt;. If a matching sibling element is not found, the &lt;see langword=&quot;XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the parent element.">
        <see langword="true" />如果找到相符的同層級項目否則<see langword="false" />。 如果找不到相符的同層級項目，則 <see langword="XmlReader" /> 會置於父項目的結束標記上 (<see cref="P:System.Xml.XmlReader.NodeType" /> 為 <see langword="XmlNodeType.EndElement" />)。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)">
      <summary vsli:raw="Advances the &lt;see langword=&quot;XmlReader&quot; /&gt; to the next sibling element with the specified local name and namespace URI.">將 <see langword="XmlReader" /> 前移到下一個具有指定區域名稱和命名空間 URI 的同層級項目。</summary>
      <param name="localName" vsli:raw="The local name of the sibling element you wish to move to.">您要移至之同層級項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the sibling element you wish to move to.">您要移至之同層級項目的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Both parameter values are &lt;see langword=&quot;null&quot; /&gt;.">這兩個參數值為 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a matching sibling element is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If a matching sibling element is not found, the &lt;see langword=&quot;XmlReader&quot; /&gt; is positioned on the end tag (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; is &lt;see langword=&quot;XmlNodeType.EndElement&quot; /&gt;) of the parent element.">如果找到相符的同層級項目，則為 <see langword="true" />，否則為 <see langword="false" />。 如果找不到相符的同層級項目，則 <see langword="XmlReader" /> 會置於父項目的結束標記上 (<see cref="P:System.Xml.XmlReader.NodeType" /> 為 <see langword="XmlNodeType.EndElement" />)。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads large streams of text embedded in an XML document.">讀取 XML 文件中內嵌之大量文字資料流。</summary>
      <param name="buffer" vsli:raw="The array of characters that serves as the buffer to which the text contents are written. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">做為寫入文字內容之緩衝區的字元陣列。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset within the buffer where the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; can start to copy the results.">緩衝區位移位置<see cref="T:System.Xml.XmlReader" />可以開始複製結果。</param>
      <param name="count" vsli:raw="The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.">要複製至緩衝區中的最大字元數目。 從這個方法傳回所複製的實際字元數目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node does not have a value (&lt;see cref=&quot;P:System.Xml.XmlReader.HasValue&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">目前的節點沒有值 (<see cref="P:System.Xml.XmlReader.HasValue" /> 為 <see langword="false" />)。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer, or index + count is larger than the allocated buffer size.">緩衝區索引或索引 + count 大於配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML data is not well-formed.">XML 資料格式不正確。</exception>
      <returns vsli:raw="The number of characters read into the buffer. The value zero is returned when there is no more text content.">讀入緩衝區的字元數目。 當不再有文字內容時，會傳回零的值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously reads large streams of text embedded in an XML document.">以非同步的方式讀取 XML 文件中內嵌之大量文字資料流。</summary>
      <param name="buffer" vsli:raw="The array of characters that serves as the buffer to which the text contents are written. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">做為寫入文字內容之緩衝區的字元陣列。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset within the buffer where the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; can start to copy the results.">緩衝區位移位置<see cref="T:System.Xml.XmlReader" />可以開始複製結果。</param>
      <param name="count" vsli:raw="The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.">要複製至緩衝區中的最大字元數目。 從這個方法傳回所複製的實際字元數目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。
-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The number of characters read into the buffer. The value zero is returned when there is no more text content.">讀入緩衝區的字元數目。 當不再有文字內容時，會傳回零的值。</returns>
    </member>
    <member name="M:System.Xml.XmlReader.ResolveEntity">
      <summary vsli:raw="When overridden in a derived class, resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">當在衍生類別中覆寫時，會解析實體參考<see langword="EntityReference" />節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;EntityReference&quot; /&gt; node; this implementation of the reader cannot resolve entities (&lt;see cref=&quot;P:System.Xml.XmlReader.CanResolveEntity&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;).&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">讀取器並非位於 <see langword="EntityReference" /> 節點上；這個讀取器實作無法解析實體 (<see cref="P:System.Xml.XmlReader.CanResolveEntity" /> 傳回 <see langword="false" />)。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.Skip">
      <summary vsli:raw="Skips the children of the current node.">略過目前節點的子節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlReader.SkipAsync">
      <summary vsli:raw="Asynchronously skips the children of the current node.">以非同步的方式略過目前節點的子節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlReaderSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlReaderSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlReaderSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlReader" /> 非同步方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「如果您想要使用非同步方法，請將 XmlReaderSettings.Async 設為 true」的訊息。</exception>
      <returns vsli:raw="The current node.">目前節點。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.AttributeCount">
      <summary vsli:raw="When overridden in a derived class, gets the number of attributes on the current node.">在衍生類別中覆寫時，取得目前節點上的屬性數目。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The number of attributes on the current node.">目前節點的屬性數目。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.BaseURI">
      <summary vsli:raw="When overridden in a derived class, gets the base URI of the current node.">在衍生類別中覆寫時，取得目前節點的基底 URI。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The base URI of the current node.">目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implements the binary content read methods.">取得值，這個值表示 <see cref="T:System.Xml.XmlReader" /> 是否會實作二進位內容讀取方法。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanReadValueChunk">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method.">取得值，表示 <see cref="T:System.Xml.XmlReader" /> 是否會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.XmlReader" /> 會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Depth">
      <summary vsli:raw="When overridden in a derived class, gets the depth of the current node in the XML document.">在衍生類別中覆寫時，取得 XML 文件中目前節點的深度。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The depth of the current node in the XML document.">XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.EOF">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.">在衍生類別中覆寫時，取得指出讀取器是否在資料流結尾的值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasAttributes">
      <summary vsli:raw="Gets a value indicating whether the current node has any attributes.">取得值，表示目前節點是否具有任何屬性。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點具有屬性，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.HasValue">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlReader.Value&quot; /&gt;.">在衍生類別中覆寫時，取得指出目前節點是否具有 <see cref="P:System.Xml.XmlReader.Value" /> 的值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the node has a value of &lt;see langword=&quot;String.Empty&quot; /&gt;.">如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則節點的值為 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsDefault">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.">在衍生類別中覆寫時，取得值，指出目前節點是否為從 DTD 或結構描述中定義的預設值產生的屬性。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; &lt;see langword=&quot;false&quot; /&gt; if the attribute value was explicitly set.">如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.IsEmptyElement">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">在衍生類別中覆寫時，取得指出目前節點是否為空項目的值 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) that ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果目前節點是元素 (<see cref="P:System.Xml.XmlReader.NodeType" /> 等於結尾的 <see langword="XmlNodeType.Element" />) ，則為 <c>/&gt;</c> ，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.Int32)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified index.">在衍生類別中覆寫時，取得具有指定索引的屬性值。</summary>
      <param name="i" vsli:raw="The index of the attribute.">屬性的索引。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value of the specified attribute.">指定的屬性值。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.Name&quot; /&gt;.">在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.Name" /> 的屬性值。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Item(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, gets the value of the attribute with the specified &lt;see cref=&quot;P:System.Xml.XmlReader.LocalName&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.XmlReader.NamespaceURI&quot; /&gt;.">在衍生類別中覆寫時，取得具有指定 <see cref="P:System.Xml.XmlReader.LocalName" /> 與 <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 的屬性值。</summary>
      <param name="name" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.LocalName">
      <summary vsli:raw="When overridden in a derived class, gets the local name of the current node.">在衍生類別中覆寫時，取得目前節點的區域名稱。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.&#xA;&#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns &lt;see langword=&quot;String.Empty&quot; /&gt;.">目前節點名稱的前置詞被移除。 例如， <see langword="LocalName" /><see langword="book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Name">
      <summary vsli:raw="When overridden in a derived class, gets the qualified name of the current node.">在衍生類別中覆寫時，取得目前節點的限定名稱。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.&#xA;&#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.&#xA;&#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">目前節點的限定名稱。 例如， <see langword="Name" /><see langword="bk:book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  
 <list type="table"><listheader><term> 節點類型</term><description> [屬性]</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的名稱。</description></item><item><term><see langword="DocumentType" /></term><description> 文件類型名稱。</description></item><item><term><see langword="Element" /></term><description> 標記名稱。</description></item><item><term><see langword="EntityReference" /></term><description> 所參考的實體名稱。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 處理指示的目標。</description></item><item><term><see langword="XmlDeclaration" /></term><description><see langword="xml" /> 常值 (Literal) 字串。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlReader.NamespaceURI">
      <summary vsli:raw="When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.">在衍生類別中覆寫時，取得讀取器所在節點的命名空間 URI (如 W3C 命名空間規格中所定義)。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NameTable">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">在衍生類別中覆寫時，取得與這個實作相關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the node.">
        <see langword="XmlNameTable" /> 可讓您取得節點中字串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.NodeType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the current node.">在衍生類別中覆寫時，取得目前節點的類型。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="One of the enumeration values that specify the type of the current node.">其中一個列舉值，指定目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Prefix">
      <summary vsli:raw="When overridden in a derived class, gets the namespace prefix associated with the current node.">在衍生類別中覆寫時，取得與目前節點相關聯的命名空間前置詞。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The namespace prefix associated with the current node.">與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.QuoteChar">
      <summary vsli:raw="When overridden in a derived class, gets the quotation mark character used to enclose the value of an attribute node.">在衍生類別中覆寫時，取得用來括住屬性節點值的引號字元。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The quotation mark character (&quot; or ') used to enclose the value of an attribute node.">用來括住屬性節點值的引號字元 (" 或 ')。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.ReadState">
      <summary vsli:raw="When overridden in a derived class, gets the state of the reader.">在衍生類別中覆寫時，取得讀取器的狀態。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="One of the enumeration values that specifies the state of the reader.">其中一個列舉值，這個值指定讀取器的狀態。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.SchemaInfo">
      <summary vsli:raw="Gets the schema information that has been assigned to the current node as a result of schema validation.">取得在結構描述驗證之後已指派給目前節點的結構描述資訊。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object containing the schema information for the current node. Schema information can be set on elements, attributes, or on text nodes with a non-null &lt;see cref=&quot;P:System.Xml.XmlReader.ValueType&quot; /&gt; (typed values).&#xA;&#xA; If the current node is not one of the above node types, or if the &lt;see langword=&quot;XmlReader&quot; /&gt; instance does not report schema information, this property returns &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; If this property is called from an &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; or an &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; object, this property always returns &lt;see langword=&quot;null&quot; /&gt;. These &lt;see langword=&quot;XmlReader&quot; /&gt; implementations do not expose schema information through the &lt;see langword=&quot;SchemaInfo&quot; /&gt; property.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含目前節點的結構描述資訊。 可以在項目、屬性或具有非 null <see cref="P:System.Xml.XmlReader.ValueType" /> (具型別值) 之文字節點上設定結構描述資訊。  
  
如果目前節點不屬於上述其中一個節點型別，或 <see langword="XmlReader" /> 執行個體不會報告結構描述資訊，則這個屬性會傳回 <see langword="null" />。  
  
如果這個屬性是從 <see cref="T:System.Xml.XmlTextReader" /> 或 <see cref="T:System.Xml.XmlValidatingReader" /> 物件呼叫的，則這個屬性一定會傳回 <see langword="null" />。 這些 <see langword="XmlReader" /> 實作不會透過 <see langword="SchemaInfo" /> 屬性公開結構描述資訊。  
  
 <block subset="none" type="note"><para>  
 如果您需要取得項目的後結構描述驗證資訊集 (PSVI)，請將讀取器置於項目的結束標記，而非開始標記。 您可以透過讀取器的 <see langword="SchemaInfo" /> 屬性取得 PSVI。 如果驗證讀取器是透過將 <see cref="Overload:System.Xml.XmlReader.Create" /> 並將 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 屬性設定為 <see cref="F:System.Xml.ValidationType.Schema" /> 所建立，則該讀取器必須置於項目的結束標記，才會具有項目的完整 PSVI。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlReader.Settings">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object used to create this &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance.">取得 <see cref="T:System.Xml.XmlReaderSettings" /> 物件，用於建立這個 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object used to create this reader instance. If this reader was not created using the &lt;see cref=&quot;Overload:System.Xml.XmlReader.Create&quot; /&gt; method, this property returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReaderSettings" /> 物件，用於建立這個讀取器執行個體。 如果未使用 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法建立這個讀取器，則這個屬性會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.Value">
      <summary vsli:raw="When overridden in a derived class, gets the text value of the current node.">在衍生類別中覆寫時，取得目前節點的文字值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return &lt;see langword=&quot;String.Empty&quot; /&gt;.&#xA;&#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup in a mixed content model.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">傳回值需視節點的 <see cref="P:System.Xml.XmlReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 有其他節點類型都會傳回 <see langword="String.Empty" />。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 值</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 區段的內容。</description></item><item><term><see langword="Comment" /></term><description> 註解的內容。</description></item><item><term><see langword="DocumentType" /></term><description> 內部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部內容 (目標除外)。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 在混合內容模型中標記間的泛空白字元。</description></item><item><term><see langword="Text" /></term><description> 文字節點的內容。</description></item><item><term><see langword="Whitespace" /></term><description> 標記之間的泛空白字元。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣告的內容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlReader.ValueType">
      <summary vsli:raw="Gets The Common Language Runtime (CLR) type for the current node.">取得目前節點的 Common Language Runtime (CLR) 型別。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The CLR type that corresponds to the typed value of the node. The default is &lt;see langword=&quot;System.String&quot; /&gt;.">CLR 型別，其對應至節點的具型別值。 預設為 <see langword="System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlLang">
      <summary vsli:raw="When overridden in a derived class, gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">當在衍生類別中覆寫時，取得目前<see langword="xml:lang" />範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlReader.XmlSpace">
      <summary vsli:raw="When overridden in a derived class, gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">當在衍生類別中覆寫時，取得目前<see langword="xml:space" />範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlReader" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlReaderSettings">
      <summary vsli:raw="Specifies a set of features to support on the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object created by the &lt;see cref=&quot;Overload:System.Xml.XmlReader.Create&quot; /&gt; method.">指定要在由 <see cref="T:System.Xml.XmlReader" /> 方法建立的 <see cref="Overload:System.Xml.XmlReader.Create" /> 物件上支援的一組功能。</summary>
    </member>
    <member name="E:System.Xml.XmlReaderSettings.ValidationEventHandler">
      <summary vsli:raw="Occurs when the reader encounters validation errors.">發生於讀取器遇到驗證錯誤時。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlReaderSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Clone">
      <summary vsli:raw="Creates a copy of the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; instance.">建立 <see cref="T:System.Xml.XmlReaderSettings" /> 執行個體的複本。</summary>
      <returns vsli:raw="The cloned &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object.">複製的 <see cref="T:System.Xml.XmlReaderSettings" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlReaderSettings.Reset">
      <summary vsli:raw="Resets the members of the settings class to their default values.">將設定類別的成員重設為其預設值。</summary>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Async">
      <summary vsli:raw="Gets or sets whether asynchronous &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; methods can be used on a particular &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance.">取得或設定非同步 <see cref="T:System.Xml.XmlReader" /> 方法是否可以用於特定 <see cref="T:System.Xml.XmlReader" /> 執行個體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if asynchronous methods can be used; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以使用非同步方法，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CheckCharacters">
      <summary vsli:raw="Gets or sets a value indicating whether to do character checking.">取得或設定值，綁表示是否要執行字元檢查。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do character checking; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 表示執行字元檢查，否則為 <see langword="false" />。 預設為 <see langword="true" />。  
  
 <block subset="none" type="note"><para>  
 如果 <see cref="T:System.Xml.XmlReader" /> 正在處理文字資料，則它會始終檢查 XML 名稱和文字內容是否有效，而不論屬性設定。 將 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> 設為 <see langword="false" /> 會關閉字元實體參考的字元檢查。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.CloseInput">
      <summary vsli:raw="Gets or sets a value indicating whether the underlying stream or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; should be closed when the reader is closed.">取得或設定值，指出是否應該在關閉讀取器時關閉基礎資料流或 <see cref="T:System.IO.TextReader" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to close the underlying stream or &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; when the reader is closed; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示關閉讀取器時關閉基礎資料流或 <see cref="T:System.IO.TextReader" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ConformanceLevel">
      <summary vsli:raw="Gets or sets the level of conformance which the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; will comply.">取得或設定 <see cref="T:System.Xml.XmlReader" /> 要遵循的一致性層級。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the level of conformance that the XML reader will enforce. The default is &lt;see cref=&quot;F:System.Xml.ConformanceLevel.Document&quot; /&gt;.">其中一個列舉值，指定 XML 讀取器將強制執行的一致性層級。 預設為 <see cref="F:System.Xml.ConformanceLevel.Document" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.DtdProcessing">
      <summary vsli:raw="Gets or sets a value that determines the processing of DTDs.">取得或設定決定 DTD 處理的值。</summary>
      <returns vsli:raw="One of the enumeration values that determines the processing of DTDs. The default is &lt;see cref=&quot;F:System.Xml.DtdProcessing.Prohibit&quot; /&gt;.">其中一個列舉值，決定 DTD 處理方式。 預設為 <see cref="F:System.Xml.DtdProcessing.Prohibit" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreComments">
      <summary vsli:raw="Gets or sets a value indicating whether to ignore comments.">取得或設定值，指出是否忽略註解。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore comments; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示忽略註解，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions">
      <summary vsli:raw="Gets or sets a value indicating whether to ignore processing instructions.">取得或設定值，指出是否忽略處理指示。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore processing instructions; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示忽略處理指示，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.IgnoreWhitespace">
      <summary vsli:raw="Gets or sets a value indicating whether to ignore insignificant white space.">取得或設定值，指出是否忽略不重要的空白字元。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore white space; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示忽略泛空白字元，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LineNumberOffset">
      <summary vsli:raw="Gets or sets line number offset of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">取得或設定 <see cref="T:System.Xml.XmlReader" /> 物件的行號位移。</summary>
      <returns vsli:raw="The line number offset. The default is 0.">行號位移。 預設值是 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.LinePositionOffset">
      <summary vsli:raw="Gets or sets line position offset of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object.">取得或設定 <see cref="T:System.Xml.XmlReader" /> 物件的行位置位移。</summary>
      <returns vsli:raw="The line position offset. The default is 0.">行位置位移。 預設值是 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities">
      <summary vsli:raw="Gets or sets a value indicating the maximum allowable number of characters in a document that result from expanding entities.">取得或設定值，指出文件中產生自展開實體的最大可允許字元數。</summary>
      <returns vsli:raw="The maximum allowable number of characters from expanded entities. The default is 0.">來自展開實體的最大可允許字元數。 預設值是 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument">
      <summary vsli:raw="Gets or sets a value indicating the maximum allowable number of characters in an XML document. A zero (0) value means no limits on the size of the XML document. A non-zero value specifies the maximum size, in characters.">取得或設定值，指出 XML 文件中最大可允許字元數。 零 (0) 的值表示對 XML 文件大小沒有限制。 非零值指定大小上限，以字元為單位。</summary>
      <returns vsli:raw="The maximum allowable number of characters in an XML document. The default is 0.">XML 文件的最大可允許字元數。 預設值是 0。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.NameTable">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; used for atomized string comparisons.">取得或設定用來比較已擷取字串的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; that stores all the atomized strings used by all &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instances created using this &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; object.  &#xA;  &#xA; The default is &lt;see langword=&quot;null&quot; /&gt;. The created &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; instance will use a new empty &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt; if this value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlNameTable" />，儲存使用這個 <see cref="T:System.Xml.XmlReader" /> 物件建立之所有 <see cref="T:System.Xml.XmlReaderSettings" /> 執行個體所使用的所有原子化字串。  
  
預設為 <see langword="null" />。 如果這個值為 <see langword="null" />，則建立的 <see cref="T:System.Xml.XmlReader" /> 執行個體會使用新的空 <see cref="T:System.Xml.NameTable" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ProhibitDtd">
      <summary vsli:raw="Gets or sets a value indicating whether to prohibit document type definition (DTD) processing. This property is obsolete. Use &lt;see cref=&quot;P:System.Xml.XmlTextReader.DtdProcessing&quot; /&gt; instead.">取得或設定值，表示是否禁止物件類型定義 (DTD) 處理。 這個屬性已經過時。 請改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prohibit DTD processing; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 表示禁止 DTD 處理，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.Schemas">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to use when performing schema validation.">取得或設定要在執行結構描述驗證時使用的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; to use when performing schema validation. The default is an empty &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; object.">執行結構描述驗證時使用的<see cref="T:System.Xml.Schema.XmlSchemaSet" />。 預設為空的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationFlags">
      <summary vsli:raw="Gets or sets a value indicating the schema validation settings. This setting applies to &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; objects that validate schemas (&lt;see cref=&quot;P:System.Xml.XmlReaderSettings.ValidationType&quot; /&gt; property set to &lt;see langword=&quot;ValidationType.Schema&quot; /&gt;).">取得或設定值，表示結構描述驗證設定。 這個設定會套用至可驗證結構描述的 <see cref="T:System.Xml.XmlReader" /> 物件 (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> 屬性設為 <see langword="ValidationType.Schema" />)。</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify validation options. &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints&quot; /&gt; and &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes&quot; /&gt; are enabled by default. &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema&quot; /&gt;, &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation&quot; /&gt;, and &lt;see cref=&quot;F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings&quot; /&gt; are disabled by default.">列舉值的位元組合，指定驗證選項。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> 預設為啟用。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" /> 和 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> 預設為停用。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.ValidationType">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; will perform validation or type assignment when reading.">取得或設定值，指出 <see cref="T:System.Xml.XmlReader" /> 是否會在讀取時執行驗證或類型指派。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ValidationType&quot; /&gt; values that indicates whether XmlReader will perform validation or type assignment when reading. The default is &lt;see langword=&quot;ValidationType.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.ValidationType" /> 值，指出 XmlReader 在讀取時是否執行驗證或型別指派。 預設為 <see langword="ValidationType.None" />。</returns>
    </member>
    <member name="P:System.Xml.XmlReaderSettings.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to access external documents.">設定用來存取外部文件的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to access external documents. If set to &lt;see langword=&quot;null&quot; /&gt;, an &lt;see cref=&quot;T:System.Xml.XmlException&quot; /&gt; is thrown when the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; tries to access an external resource. The default is a new &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; with no credentials.  Starting with the .NET Framework 4.5.2, this setting has a default value of &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlResolver" />，用於存取外部文件。 如果設為 <see langword="null" />，則在 <see cref="T:System.Xml.XmlException" /> 嘗試存取外部資源時會擲回 <see cref="T:System.Xml.XmlReader" />。 預設為沒有認證的新 <see cref="T:System.Xml.XmlUrlResolver" />。  從 .NET Framework 4.5.2 開始，此設定的預設值為 <see langword="null" /> 。</returns>
    </member>
    <member name="T:System.Xml.XmlResolver">
      <summary vsli:raw="Resolves external XML resources named by a Uniform Resource Identifier (URI).">解析由統一資源識別項 (URI) 所命名的外部 XML 資源。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="When overridden in a derived class, maps a URI to an object that contains the actual resource.">在衍生類別中覆寫時，對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="Currently not used.">目前未使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns System.IO.Stream objects.">要傳回的物件類型。 目前的版本只傳回 System.IO.Stream 物件。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is not a &lt;see langword=&quot;Stream&quot; /&gt; type.">
        <paramref name="ofObjectToReturn" /> 不是 <see langword="Stream" /> 型別。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The specified URI is not an absolute URI.">指定的 URI 並非絕對 URI。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Exception" vsli:raw="There is a runtime error (for example, an interrupted server connection).">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">以非同步的方式對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="Currently not used.">目前未使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="When overridden in a derived class, resolves the absolute URI from the base and relative URIs.">在衍生類別中覆寫時，從基底和相對 URI 來解析絕對 URI。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;relativeUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="relativeUri" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The absolute URI or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved.">絕對 URI，如果相對 URI 不能解析，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)">
      <summary vsli:raw="Enables the resolver to return types other than &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">讓解析程式傳回 <see cref="T:System.IO.Stream" /> 以外的類型。</summary>
      <param name="absoluteUri" vsli:raw="The URI.">URI。</param>
      <param name="type" vsli:raw="The type to return.">要傳回的類型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;type&quot; /&gt; is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果支援 <paramref name="type" /> 則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlResolver.Credentials">
      <summary vsli:raw="When overridden in a derived class, sets the credentials used to authenticate web requests.">在衍生類別中覆寫時，設定用來驗證 Web 要求的認證資訊。</summary>
      <returns vsli:raw="The credentials to be used to authenticate web requests. If this property is not set, the value defaults to &lt;see langword=&quot;null&quot; /&gt;; that is, the &lt;see langword=&quot;XmlResolver&quot; /&gt; has no user credentials.">用以驗證 Web 要求的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see langword="XmlResolver" /> 沒有使用者認證。</returns>
    </member>
    <member name="T:System.Xml.XmlSecureResolver">
      <summary vsli:raw="Helps to secure another implementation of &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; by wrapping the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; object and restricting the resources that the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; has access to.">以包裝 <see cref="T:System.Xml.XmlResolver" /> 物件，並限制基礎 <see cref="T:System.Xml.XmlResolver" /> 所能存取的資源，來協助保護其他 <see cref="T:System.Xml.XmlResolver" /> 實作的安全性。</summary>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; class with the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; and URL provided.">使用提供的 <see cref="T:System.Xml.XmlResolver" /> 和 URL，初始化 <see cref="T:System.Xml.XmlSecureResolver" /> 類別的新執行個體。</summary>
      <param name="resolver" vsli:raw="The XML resolver that is wrapped by the &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt;.">
        <see cref="T:System.Xml.XmlSecureResolver" /> 所包裝的 XML 解析程式。</param>
      <param name="securityUrl" vsli:raw="The URL used to create the &lt;see cref=&quot;T:System.Security.PermissionSet&quot; /&gt; that will be applied to the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; calls &lt;see cref=&quot;M:System.Security.PermissionSet.PermitOnly&quot; /&gt; on the created &lt;see cref=&quot;T:System.Security.PermissionSet&quot; /&gt; before calling &lt;see cref=&quot;M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;.">用來建立將套用至基礎 <see cref="T:System.Xml.XmlResolver" /> 的 <see cref="T:System.Security.PermissionSet" /> 之 URL。 <see cref="T:System.Xml.XmlSecureResolver" /> 會先呼叫已建立之 <see cref="T:System.Security.PermissionSet" /> 上的 <see cref="M:System.Security.PermissionSet.PermitOnly" />，然後才呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />。</param>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Maps a URI to an object that contains the actual resource. This method temporarily sets the &lt;see cref=&quot;T:System.Security.PermissionSet&quot; /&gt; created in the constructor by calling &lt;see cref=&quot;M:System.Security.PermissionSet.PermitOnly&quot; /&gt; before calling &lt;see langword=&quot;GetEntity&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to open the resource.">對應 URI 至包含實際資源的物件。 這個方法會呼叫基礎 <see cref="M:System.Security.PermissionSet.PermitOnly" /> 來暫時設定建立在建構函式上的 <see cref="T:System.Security.PermissionSet" />，然後才呼叫基礎 <see cref="T:System.Xml.XmlResolver" />上的 <see langword="GetEntity" /> 以開啟資源。</summary>
      <param name="absoluteUri" vsli:raw="The URI that is returned from &lt;see cref=&quot;M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="Currently not used.">目前未使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is neither &lt;see langword=&quot;null&quot; /&gt; nor a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; type.&#xA;&#xA;-or-&#xA;&#xA;.NET 7 and later versions: In all cases.">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see cref="T:System.IO.Stream" /> 型別。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The specified URI is not an absolute URI.">指定的 URI 並非絕對 URI。</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Exception" vsli:raw="There is a run-time error (for example, an interrupted server connection).">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
      <returns vsli:raw="The stream returned by calling &lt;see langword=&quot;GetEntity&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. If a type other than &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; is specified, the method returns &lt;see langword=&quot;null&quot; /&gt;.">透過呼叫底層 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="GetEntity" /> 來傳回的資料流。 若指定了非 <see cref="T:System.IO.Stream" /> 的類型，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">以非同步的方式對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="Currently not used.">目前未使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current version only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">要傳回的物件類型。 目前的版本只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns vsli:raw="The stream returned by calling &lt;see langword=&quot;GetEntity&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. If a type other than &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; is specified, the method returns &lt;see langword=&quot;null&quot; /&gt;.">透過呼叫底層 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="GetEntity" /> 來傳回的資料流。 若指定了非 <see cref="T:System.IO.Stream" /> 的類型，則方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="Resolves the absolute URI from the base and relative URIs by calling &lt;see langword=&quot;ResolveUri&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;.">藉由呼叫基礎 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="ResolveUri" />，從基底和相對 URI 中解析絕對 URI。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;relativeUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="relativeUri" /> 為 <see langword="null" />。</exception>
      <returns vsli:raw="The absolute URI or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved (returned by calling &lt;see langword=&quot;ResolveUri&quot; /&gt; on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;).">如果不能解析相對 URI (透過呼叫底層 <see cref="T:System.Xml.XmlResolver" /> 上的 <see langword="ResolveUri" /> 傳回)，則為絕對 URI 或 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSecureResolver.Credentials">
      <summary vsli:raw="Sets credentials used to authenticate web requests.">設定用以驗證 Web 要求的認證資訊。</summary>
      <returns vsli:raw="The credentials to be used to authenticate web requests. The &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; sets the given credentials on the underlying &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt;. If this property is not set, the value defaults to &lt;see langword=&quot;null&quot; /&gt;; that is, the &lt;see cref=&quot;T:System.Xml.XmlSecureResolver&quot; /&gt; has no user credentials.">用以驗證 Web 要求的認證。 <see cref="T:System.Xml.XmlSecureResolver" /> 會在基礎 <see cref="T:System.Xml.XmlResolver" /> 上設定指定的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see cref="T:System.Xml.XmlSecureResolver" /> 沒有使用者認證。</returns>
    </member>
    <member name="T:System.Xml.XmlSignificantWhitespace">
      <summary vsli:raw="Represents white space between markup in a mixed content node or white space within an xml:space= 'preserve' scope. This is also referred to as significant white space.">表示混合內容節點中標記間的空白區，或 xml:space= 'preserve' 範圍內的空白區。 這個也可以稱為顯著的空白。</summary>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlSignificantWhitespace&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlSignificantWhitespace" /> 類別的新執行個體。</summary>
      <param name="strData" vsli:raw="The white space characters of the node.">節點的空白字元。</param>
      <param name="doc" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlDocument" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For significant white space nodes, the cloned node always includes the data value, regardless of the parameter setting.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於顯著的空白節點，不論參數設定為何，複製的節點永遠會包含資料值。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlSignificantWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#significant-whitespace&quot; /&gt;.">對於 <see langword="XmlSignificantWhitespace" /> 節點，這個屬性傳回 <see langword="#significant-whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#significant-whitespace&quot; /&gt;.">對於 <see langword="XmlSignificantWhitespace" /> 節點，這個屬性傳回 <see langword="#significant-whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlSignificantWhitespace&quot; /&gt; nodes, this value is XmlNodeType.SignificantWhitespace.">對於 <see langword="XmlSignificantWhitespace" /> 節點，這個值為 XmlNodeType.SignificantWhitespace。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.ParentNode">
      <summary vsli:raw="Gets the parent of the current node.">取得目前節點的父節點。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; parent node of the current node.">目前節點的 <see cref="T:System.Xml.XmlNode" /> 父節點。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">取得這個節點的前置文字節點。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlSignificantWhitespace.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting &lt;see langword=&quot;Value&quot; /&gt; to invalid white space characters.">將 <see langword="Value" /> 設定為無效的空白字元。</exception>
      <returns vsli:raw="The white space characters found in the node.">節點中找到的空白字元。</returns>
    </member>
    <member name="T:System.Xml.XmlSpace">
      <summary vsli:raw="Specifies the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">取得目前的 <see langword="xml:space" /> 範圍。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Default">
      <summary vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; scope equals &lt;see langword=&quot;default&quot; /&gt;.">
        <see langword="xml:space" /> 範圍等於 <see langword="default" />。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.None">
      <summary vsli:raw="No &lt;see langword=&quot;xml:space&quot; /&gt; scope.">無 <see langword="xml:space" /> 範圍。</summary>
    </member>
    <member name="F:System.Xml.XmlSpace.Preserve">
      <summary vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; scope equals &lt;see langword=&quot;preserve&quot; /&gt;.">
        <see langword="xml:space" /> 範圍等於 <see langword="preserve" />。</summary>
    </member>
    <member name="T:System.Xml.XmlText">
      <summary vsli:raw="Represents the text content of an element or attribute.">表示項目或屬性的文字內容。</summary>
    </member>
    <member name="M:System.Xml.XmlText.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlText&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlText" /> 類別的新執行個體。</summary>
      <param name="strData" vsli:raw="The content of the node; see the &lt;see cref=&quot;P:System.Xml.XmlText.Value&quot; /&gt; property.">節點的內容；請參閱 <see cref="P:System.Xml.XmlText.Value" /> 屬性。</param>
      <param name="doc" vsli:raw="The parent XML document.">父代 XML 文件。</param>
    </member>
    <member name="M:System.Xml.XmlText.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlText.SplitText(System.Int32)">
      <summary vsli:raw="Splits the node into two nodes at the specified offset, keeping both in the tree as siblings.">在指定的位移將這個節點分隔成兩個節點，使這兩個節點在樹狀中都保持同層級 (Sibling)。</summary>
      <param name="offset" vsli:raw="The offset at which to split the node.">分隔節點的位移。</param>
      <returns vsli:raw="The new node.">新節點。</returns>
    </member>
    <member name="M:System.Xml.XmlText.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. &lt;see langword=&quot;XmlText&quot; /&gt; nodes do not have children, so this method has no effect.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。 <see langword="XmlText" /> 節點沒有子系，所以這個方法不會有任何效果。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlText.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see langword="XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlText.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For text nodes, this property returns &lt;see langword=&quot;#text&quot; /&gt;.">對於文字節點，這個屬性傳回 <see langword="#text" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For text nodes, this property returns &lt;see langword=&quot;#text&quot; /&gt;.">對於文字節點，這個屬性傳回 <see langword="#text" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="For text nodes, this value is XmlNodeType.Text.">對於文字節點，這個值為 XmlNodeType.Text。</returns>
    </member>
    <member name="P:System.Xml.XmlText.ParentNode">
      <summary vsli:raw="Gets the parent of this node (for nodes that can have parents).">取得這個節點的父代 (對於具有父代的節點而言)。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNode&quot; /&gt; that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is &lt;see langword=&quot;null&quot; /&gt;. For all other nodes, the value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlNode.NodeType&quot; /&gt; of the node. The following table describes the possible return values for the &lt;see langword=&quot;ParentNode&quot; /&gt; property.">表示目前節點父代的 <see langword="XmlNode" />。 如果剛剛建立節點而尚未加入樹狀中，或者已經從樹狀中移除，則父代為 <see langword="null" />。 對於其他所有節點，傳回的值視節點的 <see cref="P:System.Xml.XmlNode.NodeType" /> 而定。 下表描述 <see langword="ParentNode" /> 屬性的可能傳回值。</returns>
    </member>
    <member name="P:System.Xml.XmlText.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">取得這個節點的前置文字節點。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlText.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <returns vsli:raw="The content of the text node.">文字節點的內容。</returns>
    </member>
    <member name="T:System.Xml.XmlTextReader">
      <summary vsli:raw="Represents a reader that provides fast, non-cached, forward-only access to XML data.  &#xA;  &#xA; Starting with the .NET Framework 2.0, we recommend that you use the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; class instead.">表示提供快速、非快取、順向 (Forward-only) 存取 XML 資料的讀取器 (Reader)。  
  
從 .NET Framework 2.0 開始，建議您改用 <see cref="T:System.Xml.XmlReader" /> 類別。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlTextReader&quot; /&gt;.">初始化 <see langword="XmlTextReader" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified stream.">使用指定的資料流初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="input" vsli:raw="The stream containing the XML data to read.">包含要讀取之 XML 資料的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;input&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified stream and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的資料流和 <see cref="T:System.Xml.XmlNameTable" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="input" vsli:raw="The stream containing the XML data to read.">包含要讀取之 XML 資料的資料流。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="nt" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified stream, &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt;.">使用指定的資料流、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment" vsli:raw="The stream containing the XML fragment to parse.">包含要剖析之 XML 片段的資料流。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This also determines what the fragment can contain. (See table below.)">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這也會決定片段可包含的內容。 (請參閱下表。)</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the &lt;paramref name=&quot;xmlFragment&quot; /&gt; is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt;, and the &lt;c&gt;xml:space&lt;/c&gt; scope.">要剖析的 <paramref name="xmlFragment" /> 所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not an Element, Attribute, or Document &lt;see langword=&quot;XmlNodeType&quot; /&gt;.">
        <paramref name="fragType" /> 不是 Element、Attribute 或 Document <see langword="XmlNodeType" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlFragment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlFragment" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.IO.TextReader" /> 類別的新執行個體。</summary>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" />，初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="nt" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified file.">使用指定的檔案，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url" vsli:raw="The URL for the file containing the XML data. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value.">包含 XML 資料之檔案的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。</param>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The specified file cannot be found.">找不到指定的檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="Part of the filename or directory cannot be found.">找不到部分檔名或目錄。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is an empty string.">
        <paramref name="url" /> 為空字串。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The remote filename cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法解析遠端檔名。  
  
 -或-  
  
 處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is not a valid URI.">
        <paramref name="url" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL and stream.">使用指定的 URL 和資料流，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value.">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。</param>
      <param name="input" vsli:raw="The stream containing the XML data to read.">包含要讀取之 XML 資料的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;input&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL, stream and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 URL、資料流和 <see cref="T:System.Xml.XmlNameTable" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value. If &lt;paramref name=&quot;url&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;BaseURI&quot; /&gt; is set to &lt;see langword=&quot;String.Empty&quot; /&gt;.">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。 如果 <paramref name="url" /> 為 <see langword="null" />，則會將 <see langword="BaseURI" /> 設為 <see langword="String.Empty" />。</param>
      <param name="input" vsli:raw="The stream containing the XML data to read.">包含要讀取之 XML 資料的資料流。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="nt" /> 的值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL and &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt;.">使用指定的 URL 和 <see cref="T:System.IO.TextReader" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value.">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。</param>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified URL, &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 URL、<see cref="T:System.Xml.XmlTextReader" /> 和 <see cref="T:System.IO.TextReader" />，初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="url" vsli:raw="The URL to use for resolving external resources. The &lt;see cref=&quot;P:System.Xml.XmlTextReader.BaseURI&quot; /&gt; is set to this value. If &lt;paramref name=&quot;url&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;BaseURI&quot; /&gt; is set to &lt;see langword=&quot;String.Empty&quot; /&gt;.">用來解析外部資源的 URL。 <see cref="P:System.Xml.XmlTextReader.BaseURI" /> 設為這個值。 如果 <paramref name="url" /> 為 <see langword="null" />，則會將 <see langword="BaseURI" /> 設為 <see langword="String.Empty" />。</param>
      <param name="input" vsli:raw="The &lt;see langword=&quot;TextReader&quot; /&gt; containing the XML data to read.">
        <see langword="TextReader" />，包含要讀取的 XML 資料。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="nt" /> 值為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified file and &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的檔案和 <see cref="T:System.Xml.XmlNameTable" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="url" vsli:raw="The URL for the file containing the XML data to read.">包含要讀取之 XML 資料的檔案的 URL。</param>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
      <exception cref="T:System.NullReferenceException" vsli:raw="The &lt;paramref name=&quot;nt&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="nt" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The specified file cannot be found.">找不到指定的檔案。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="Part of the filename or directory cannot be found.">找不到部分檔名或目錄。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is an empty string.">
        <paramref name="url" /> 為空字串。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The remote filename cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法解析遠端檔名。  
  
 -或-  
  
 處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;url&quot; /&gt; is not a valid URI.">
        <paramref name="url" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified string, &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt;, and &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt;.">使用指定的字串、<see cref="T:System.Xml.XmlNodeType" /> 和 <see cref="T:System.Xml.XmlParserContext" />，初始化 <see cref="T:System.Xml.XmlTextReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment" vsli:raw="The string containing the XML fragment to parse.">包含要剖析之 XML 片段的字串。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This also determines what the fragment string can contain. (See table below.)">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這也會決定片段字串可包含的內容。 (請參閱下表。)</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the &lt;paramref name=&quot;xmlFragment&quot; /&gt; is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, the current &lt;c&gt;xml:lang&lt;/c&gt;, and the &lt;c&gt;xml:space&lt;/c&gt; scope.">要剖析的 <paramref name="xmlFragment" /> 所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <c>xml:lang</c> 和 <c>xml:space</c> 範圍。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not an &lt;see langword=&quot;Element&quot; /&gt;, &lt;see langword=&quot;Attribute&quot; /&gt;, or &lt;see langword=&quot;Document&quot; /&gt;&lt;see langword=&quot;XmlNodeType&quot; /&gt;.">
        <paramref name="fragType" /> 不是 <see langword="Element" />、<see langword="Attribute" /> 或 <see langword="Document" /><see langword="XmlNodeType" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;xmlFragment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="xmlFragment" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlTextReader" /> 初始化 <see cref="T:System.Xml.XmlNameTable" /> 類別的新執行個體。</summary>
      <param name="nt" vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; to use.">要使用的 <see langword="XmlNameTable" />。</param>
    </member>
    <member name="M:System.Xml.XmlTextReader.Close">
      <summary vsli:raw="Changes the &lt;see cref=&quot;P:System.Xml.XmlReader.ReadState&quot; /&gt; to &lt;see langword=&quot;Closed&quot; /&gt;.">將 <see cref="P:System.Xml.XmlReader.ReadState" /> 變更為 <see langword="Closed" />。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)">
      <summary vsli:raw="Gets the value of the attribute with the specified index.">取得具有指定索引的屬性值。</summary>
      <param name="i" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlTextReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />。</exception>
      <returns vsli:raw="The value of the specified attribute.">指定的屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified name.">取得具有指定名稱的屬性值。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace URI.">取得具有指定的區域名稱和命名空間 URI 的屬性值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned. This method does not move the reader.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。 這個方法不會移動讀取器。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Gets a collection that contains all namespaces currently in-scope.">取得集合，包含目前範圍內的所有命名空間。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value that specifies the type of namespace nodes to return.">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回之命名空間節點的類型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object that contains all the current in-scope namespaces. If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.">
        <see cref="T:System.Collections.IDictionary" /> 物件，包含目前範圍內的所有命名空間。 如果讀取器不位於項目上，則會傳回空的字典 (沒有命名空間)。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.GetRemainder">
      <summary vsli:raw="Gets the remainder of the buffered XML.">取得已緩衝之 XML 的其他部分。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; containing the remainder of the buffered XML.">包含已緩衝的 XML 的其他部分的 <see cref="T:System.IO.TextReader" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.HasLineInfo">
      <summary vsli:raw="Gets a value indicating whether the class can return line information.">取得值，這個值指出類別是否可以傳回行資訊。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class can return line information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果類別可以傳回行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.LookupNamespace(System.String)">
      <summary vsli:raw="Resolves a namespace prefix in the current element's scope.">解析目前項目範圍中的命名空間前置詞。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized.">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳送空字串。 不必擷取這個字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextReader.Namespaces&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt; and the &lt;paramref name=&quot;prefix&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextReader.Namespaces" /> 屬性是設定為 <see langword="true" />，而且 <paramref name="prefix" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="Moves to the attribute with the specified index.">移至具有指定索引的屬性。</summary>
      <param name="i" vsli:raw="The index of the attribute.">屬性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)">
      <summary vsli:raw="Moves to the attribute with the specified name.">移至具有指定名稱的屬性。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves to the attribute with the specified local name and namespace URI.">移至具有指定的區域名稱和命名空間 URI 的屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the reader's position does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果為 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToElement">
      <summary vsli:raw="Moves to the element that contains the current attribute node.">移至包含目前屬性節點的項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToFirstAttribute">
      <summary vsli:raw="Moves to the first attribute.">移至第一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.MoveToNextAttribute">
      <summary vsli:raw="Moves to the next attribute.">移至下一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.Read">
      <summary vsli:raw="Reads the next node from the stream.">從資料流讀取下一個節點。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">剖析 XML 時發生錯誤。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadAttributeValue">
      <summary vsli:raw="Parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.  &#xA;  &#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  &#xA;  &#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of &lt;see langword=&quot;String.Empty&quot; /&gt;.">如果傳回的是節點，則為 <see langword="true" />。  
  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
  
針對含有 <see langword="String.Empty" /> 值的單一節點，空白的屬性 (例如 <c>misc=""</c>) 會傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Decodes Base64 and returns the decoded binary bytes.">解碼 Base64 並傳回已解碼的二進位位元組。</summary>
      <param name="array" vsli:raw="The array of characters that serves as the buffer to which the text contents are written.">做為寫入文字內容之緩衝區的字元陣列。</param>
      <param name="offset" vsli:raw="The zero-based index into the array specifying where the method can begin to write to the buffer.">對這個陣列進行以零為起始的索引，這個陣列指定這個方法可由何處開始寫入緩衝區。</param>
      <param name="len" vsli:raw="The number of bytes to write into the buffer.">要寫入緩衝區的位元組數目。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The Base64 sequence is not valid.">Base64 序列無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 的值是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length- &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0，或 <paramref name="len" /> &lt; 0，或 <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Decodes &lt;see langword=&quot;BinHex&quot; /&gt; and returns the decoded binary bytes.">解碼 <see langword="BinHex" /> 並傳回已解碼的二進位位元組。</summary>
      <param name="array" vsli:raw="The byte array that serves as the buffer to which the decoded binary bytes are written.">位元組陣列，做為寫入已解碼之二進位位元組的緩衝區。</param>
      <param name="offset" vsli:raw="The zero-based index into the array specifying where the method can begin to write to the buffer.">對這個陣列進行以零為起始的索引，這個陣列指定這個方法可由何處開始寫入緩衝區。</param>
      <param name="len" vsli:raw="The number of bytes to write into the buffer.">要寫入緩衝區的位元組數目。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The &lt;see langword=&quot;BinHex&quot; /&gt; sequence is not valid.">
        <see langword="BinHex" /> 序列無效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value of &lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> 的值是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;lt; 0, or &lt;paramref name=&quot;len&quot; /&gt; &amp;gt; &lt;paramref name=&quot;array&quot; /&gt;.Length- &lt;paramref name=&quot;offset&quot; /&gt;.">
        <paramref name="offset" /> &lt; 0，或 <paramref name="len" /> &lt; 0，或 <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</exception>
      <returns vsli:raw="The number of bytes written to your buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the text contents of an element into a character buffer. This method is designed to read large streams of embedded text by calling it successively.">將項目的文字內容讀入字元緩衝區中。 這個方法設計可藉由連續呼叫來讀取內嵌文字的大量資料流。</summary>
      <param name="buffer" vsli:raw="The array of characters that serves as the buffer to which the text contents are written.">做為寫入文字內容之緩衝區的字元陣列。</param>
      <param name="index" vsli:raw="The position within &lt;paramref name=&quot;buffer&quot; /&gt; where the method can begin writing text contents.">
        <paramref name="buffer" /> 中這個方法可以開始寫入文字內容的位置。</param>
      <param name="count" vsli:raw="The number of characters to write into &lt;paramref name=&quot;buffer&quot; /&gt;.">要寫入 <paramref name="buffer" /> 的字元數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is greater than the space specified in the &lt;paramref name=&quot;buffer&quot; /&gt; (buffer size - &lt;paramref name=&quot;index&quot; /&gt;).">
        <paramref name="count" /> 大於 <paramref name="buffer" /> 中指定的空間 (緩衝區大小 - <paramref name="index" />)。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt;&lt;see langword=&quot;&amp;lt; 0&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt;&lt;see langword=&quot;&amp;lt; 0&quot; /&gt;.">
        <paramref name="index" />
        <see langword="&lt; 0" /> 或 <paramref name="count" /><see langword="&lt; 0" />。</exception>
      <returns vsli:raw="The number of characters read. This can be &lt;see langword=&quot;0&quot; /&gt; if the reader is not positioned on an element or if there is no more text content to return in the current context.">已讀取的字元數。 如果讀取器不在項目上，或者目前內容中沒有其他可傳回的文字內容，則這個數目可為 <see langword="0" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;Base64&quot; /&gt; decoded binary bytes.">讀取內容，並傳回 <see langword="Base64" /> 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported in the current node.">目前的節點不支援 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the &lt;see langword=&quot;BinHex&quot; /&gt; decoded binary bytes.">讀取內容，並傳回 <see langword="BinHex" /> 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">目前的節點不支援 <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlTextReader" /> 實作不支援這個方法。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the Base64 content.">讀取項目，並將 Base64 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlTextReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the &lt;see langword=&quot;BinHex&quot; /&gt; content.">讀取項目，並將 <see langword="BinHex" /> 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ReadString">
      <summary vsli:raw="Reads the contents of an element or a text node as a string.">將項目或文字節點的內容當做字串讀取。</summary>
      <exception cref="T:System.Xml.XmlException" vsli:raw="An error occurred while parsing the XML.">剖析 XML 時發生錯誤。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An invalid operation was attempted.">嘗試了無效的作業。</exception>
      <returns vsli:raw="The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.  &#xA;  &#xA; &lt;see langword=&quot;Note:&quot; /&gt; The text node can be either an element or an attribute text node.">項目或文字節點的內容。 如果讀取器不在項目或文字節點上，或目前內容中沒有其他可傳回的文字內容，則可為空字串。  
  
 <see langword="Note:" /> 文字節點可為項目或屬性文字節點。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResetState">
      <summary vsli:raw="Resets the state of the reader to ReadState.Initial.">將讀取器的狀態重設為 ReadState.Initial。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Calling &lt;see langword=&quot;ResetState&quot; /&gt; if the reader was constructed using an &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt;.">如果使用 <see cref="T:System.Xml.XmlParserContext" /> 來建構讀取器，則呼叫 <see langword="ResetState" />。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="Documents in a single stream do not share the same encoding.">單一資料流中的文件不會共用同一種編碼方式。</exception>
    </member>
    <member name="M:System.Xml.XmlTextReader.ResolveEntity">
      <summary vsli:raw="Resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">解析 <see langword="EntityReference" /> 節點的實體參考。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.Skip">
      <summary vsli:raw="Skips the children of the current node.">略過目前節點的子節點。</summary>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value that specifies the type of namespace nodes to return.">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回之命名空間節點的類型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that contains the current in-scope namespaces.">
        <see cref="T:System.Collections.IDictionary" />，包含目前範圍內的命名空間。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you wish to find.">您要尋找其命名空間 URI 的前置詞。</param>
      <returns vsli:raw="The namespace URI that is mapped to the prefix; &lt;see langword=&quot;null&quot; /&gt; if the prefix is not mapped to a namespace URI.">對應至前置詞的命名空間 URI，如果前置詞未對應至命名空間 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName" vsli:raw="The namespace URI whose prefix you wish to find.">您要尋找其前置詞的命名空間 URI。</param>
      <returns vsli:raw="The prefix that is mapped to the namespace URI; &lt;see langword=&quot;null&quot; /&gt; if the namespace URI is not mapped to a prefix.">對應至命名空間 URI 的前置詞，如果命名空間 URI 未對應至前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.AttributeCount">
      <summary vsli:raw="Gets the number of attributes on the current node.">取得目前節點的屬性數目。</summary>
      <returns vsli:raw="The number of attributes on the current node.">目前節點的屬性數目。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">取得目前節點的基底 (Base) URI。</summary>
      <returns vsli:raw="The base URI of the current node.">目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implements the binary content read methods.">取得值，這個值表示 <see cref="T:System.Xml.XmlTextReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class always returns &lt;see langword=&quot;true&quot; /&gt;.">如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> 類別一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanReadValueChunk">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method.">取得值，表示 <see cref="T:System.Xml.XmlTextReader" /> 是否會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; implements the &lt;see cref=&quot;M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)&quot; /&gt; method; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; class always returns &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.XmlTextReader" /> 會實作 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> 方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlTextReader" /> 類別一律會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The &lt;see langword=&quot;XmlTextReader&quot; /&gt; class always returns &lt;see langword=&quot;true&quot; /&gt;.">如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlTextReader" /> 類別一律會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Depth">
      <summary vsli:raw="Gets the depth of the current node in the XML document.">取得 XML 文件中目前節點的深度。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.DtdProcessing">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Xml.DtdProcessing&quot; /&gt; enumeration.">取得或設定 <see cref="T:System.Xml.DtdProcessing" /> 列舉。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.DtdProcessing&quot; /&gt; enumeration.">
        <see cref="T:System.Xml.DtdProcessing" /> 列舉。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Encoding">
      <summary vsli:raw="Gets the encoding of the document.">取得文件的編碼方式。</summary>
      <returns vsli:raw="The encoding value. If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.">編碼值。 如果編碼屬性不存在，而且沒有位元組順序標記，則此值預設為 UTF-8。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EntityHandling">
      <summary vsli:raw="Gets or sets a value that specifies how the reader handles entities.">取得或設定值，表示讀取器如何處理實體。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.EntityHandling&quot; /&gt; values. If no &lt;see langword=&quot;EntityHandling&quot; /&gt; is specified, it defaults to &lt;see langword=&quot;EntityHandling.ExpandCharEntities&quot; /&gt;.">其中一個 <see cref="T:System.Xml.EntityHandling" /> 值。 如果未指定 <see langword="EntityHandling" />，則會預設為 <see langword="EntityHandling.ExpandCharEntities" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.EOF">
      <summary vsli:raw="Gets a value indicating whether the reader is positioned at the end of the stream.">取得值，表示讀取器是否位於資料流結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.HasValue">
      <summary vsli:raw="Gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlTextReader.Value&quot; /&gt; other than &lt;see langword=&quot;String.Empty&quot; /&gt;.">取得值，表示目前的節點是否可以具有 <see langword="String.Empty" /> 之外的其他 <see cref="P:System.Xml.XmlTextReader.Value" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.">取得值，表示目前節點是否是產生自 DTD 或結構描述中定義之預設值的屬性。</summary>
      <returns vsli:raw="This property always returns &lt;see langword=&quot;false&quot; /&gt;. (&lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt; does not expand default attributes.)">這個屬性永遠會傳回 <see langword="false" />。 (<see cref="T:System.Xml.XmlTextReader" /> 不會展開預設屬性)。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.IsEmptyElement">
      <summary vsli:raw="Gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">取得值，指出目前的節點是否為空項目 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlTextReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) that ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果目前節點是元素 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> 等於結尾的 <see langword="XmlNodeType.Element" />) ，則為 <c>/&gt;</c> ，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LineNumber">
      <summary vsli:raw="Gets the current line number.">取得目前的行號。</summary>
      <returns vsli:raw="The current line number.">目前的行號。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LinePosition">
      <summary vsli:raw="Gets the current line position.">取得目前的行位置。</summary>
      <returns vsli:raw="The current line position.">目前的行位置。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">取得目前節點的區域名稱。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns &lt;see langword=&quot;String.Empty&quot; /&gt;.">目前節點名稱的前置詞被移除。 例如， <see langword="LocalName" /><see langword="book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 <see langword="String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Name">
      <summary vsli:raw="Gets the qualified name of the current node.">取得目前節點的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlTextReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">目前節點的限定名稱。 例如， <see langword="Name" /><see langword="bk:book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlTextReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 名稱</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的名稱。</description></item><item><term><see langword="DocumentType" /></term><description> 文件類型名稱。</description></item><item><term><see langword="Element" /></term><description> 標記名稱。</description></item><item><term><see langword="EntityReference" /></term><description> 所參考的實體名稱。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 處理指示的目標。</description></item><item><term><see langword="XmlDeclaration" /></term><description><see langword="xml" /> 常值 (Literal) 字串。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Namespaces">
      <summary vsli:raw="Gets or sets a value indicating whether to do namespace support.">取得或設定值，指出是否支援命名空間。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property after a read operation has occurred (&lt;see cref=&quot;P:System.Xml.XmlTextReader.ReadState&quot; /&gt; is not &lt;see langword=&quot;ReadState.Initial&quot; /&gt;).">在已發生讀取作業之後設定這個屬性 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 不是 <see langword="ReadState.Initial" />)。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do namespace support; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NamespaceURI">
      <summary vsli:raw="Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.">取得讀取器所在節點的命名空間 URI (如 W3C 命名空間規格中所定義)。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlNameTable&quot; /&gt; enabling you to get the atomized version of a string within the node.">
        <see langword="XmlNameTable" /> 可讓您取得節點中字串的原子化版本。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values representing the type of the current node.">
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Normalization">
      <summary vsli:raw="Gets or sets a value indicating whether to normalize white space and attribute values.">取得或設定值，指示是否將空白字元與屬性值正常化。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property when the reader is closed (&lt;see cref=&quot;P:System.Xml.XmlTextReader.ReadState&quot; /&gt; is &lt;see langword=&quot;ReadState.Closed&quot; /&gt;).">在讀取器關閉時設定這個屬性 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 為 <see langword="ReadState.Closed" />)。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to normalize; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">若要正常化，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Prefix">
      <summary vsli:raw="Gets the namespace prefix associated with the current node.">取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ProhibitDtd">
      <summary vsli:raw="Gets or sets a value indicating whether to allow DTD processing. This property is obsolete. Use &lt;see cref=&quot;P:System.Xml.XmlTextReader.DtdProcessing&quot; /&gt; instead.">取得或設定值，指出是否允許 DTD 處理。 這個屬性已經過時。 請改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to disallow DTD processing; otherwise &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示不允許 DTD 處理，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.QuoteChar">
      <summary vsli:raw="Gets the quotation mark character used to enclose the value of an attribute node.">取得用來括住屬性節點值的引號字元。</summary>
      <returns vsli:raw="The quotation mark character (&quot; or ') used to enclose the value of an attribute node.">用來括住屬性節點值的引號字元 (" 或 ')。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.ReadState">
      <summary vsli:raw="Gets the state of the reader.">取得讀取器的狀態。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ReadState&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.ReadState" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.Value">
      <summary vsli:raw="Gets the text value of the current node.">取得目前節點的文字值。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlTextReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space within an &lt;see langword=&quot;xml:space&quot; /&gt;= 'preserve' scope.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">傳回值需視節點的 <see cref="P:System.Xml.XmlTextReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 有其他節點類型都會傳回 <see langword="String.Empty" />。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 值</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 區段的內容。</description></item><item><term><see langword="Comment" /></term><description> 註解的內容。</description></item><item><term><see langword="DocumentType" /></term><description> 內部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部內容 (目標除外)。</description></item><item><term><see langword="SignificantWhitespace" /></term><description><see langword="xml:space" />= 'preserve' 範圍內的空白字元。</description></item><item><term><see langword="Text" /></term><description> 文字節點的內容。</description></item><item><term><see langword="Whitespace" /></term><description> 標記之間的泛空白字元。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣告的內容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.WhitespaceHandling">
      <summary vsli:raw="Gets or sets a value that specifies how white space is handled.">取得或設定值，指定如何處理空白字元。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Invalid value specified.">指定的值無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting this property when the reader is closed (&lt;see cref=&quot;P:System.Xml.XmlTextReader.ReadState&quot; /&gt; is &lt;see langword=&quot;ReadState.Closed&quot; /&gt;).">在讀取器關閉時設定這個屬性 (<see cref="P:System.Xml.XmlTextReader.ReadState" /> 為 <see langword="ReadState.Closed" />)。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.WhitespaceHandling&quot; /&gt; values. The default is &lt;see langword=&quot;WhitespaceHandling.All&quot; /&gt; (returns &lt;see langword=&quot;Whitespace&quot; /&gt; and &lt;see langword=&quot;SignificantWhitespace&quot; /&gt; nodes).">其中一個 <see cref="T:System.Xml.WhitespaceHandling" /> 值。 預設值為 <see langword="WhitespaceHandling.All" /> (傳回 <see langword="Whitespace" /> 與 <see langword="SignificantWhitespace" /> 節點)。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used for resolving DTD references.">設定用來解析 DTD 參考的 <see cref="T:System.Xml.XmlResolver" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; to use. If set to &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; In version 1.1 of the .NET Framework, the caller must be fully trusted in order to specify an &lt;see langword=&quot;XmlResolver&quot; /&gt;.">要使用的 <see langword="XmlResolver" />。 如果設定為 <see langword="null" />，就不會解析外部資源。  
  
在 .NET Framework 的 1.1 版中，必須完全信任呼叫端才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextReader.XmlSpace">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">取得目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlTextWriter">
      <summary vsli:raw="Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.  &#xA;  &#xA; Starting with the .NET Framework 2.0, we recommend that you use the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; class instead.">表示提供產生資料流或檔案的快速、非快取、順向方法的寫入器，這些資料流或檔案中包含符合 W3C Extensible Markup Language (XML) 1.0 與 XML Recommendation 中命名空間的 XML 資料。  
  
從 .NET Framework 2.0 開始，建議您改用 <see cref="T:System.Xml.XmlWriter" /> 類別。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
      <summary vsli:raw="Creates an instance of the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; class using the specified stream and encoding.">使用指定的資料流和編碼方式，建立 <see langword="XmlTextWriter" /> 類別的執行個體。</summary>
      <param name="w" vsli:raw="The stream to which you want to write.">要寫入其中的資料流。</param>
      <param name="encoding" vsli:raw="The encoding to generate. If encoding is &lt;see langword=&quot;null&quot; /&gt; it writes out the stream as UTF-8 and omits the encoding attribute from the &lt;see langword=&quot;ProcessingInstruction&quot; /&gt;.">要產生的編碼方式。 如果編碼方式為 <see langword="null" />，它會以 UTF-8 格式寫出資料流，並忽略來自 <see langword="ProcessingInstruction" /> 的編碼方式屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The encoding is not supported or the stream cannot be written to.">不支援該編碼方式，或無法寫入至資料流。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="w" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
      <summary vsli:raw="Creates an instance of the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; class using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用指定的 <see cref="T:System.IO.TextWriter" /> 來建立 <see langword="XmlTextWriter" /> 類別的執行個體。</summary>
      <param name="w" vsli:raw="The &lt;see langword=&quot;TextWriter&quot; /&gt; to write to. It is assumed that the &lt;see langword=&quot;TextWriter&quot; /&gt; is already set to the correct encoding.">要寫入的目標 <see langword="TextWriter" />。 它假設已將 <see langword="TextWriter" /> 設定為正確的編碼方式。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
      <summary vsli:raw="Creates an instance of the &lt;see cref=&quot;T:System.Xml.XmlTextWriter&quot; /&gt; class using the specified file.">使用指定的檔案建立 <see cref="T:System.Xml.XmlTextWriter" /> 類別的執行個體。</summary>
      <param name="filename" vsli:raw="The filename to write to. If the file exists, it truncates it and overwrites it with the new content.">要寫入至的檔名。 如果這個檔案存在，就會將它截斷並以新內容將其覆寫。</param>
      <param name="encoding" vsli:raw="The encoding to generate. If encoding is &lt;see langword=&quot;null&quot; /&gt; it writes the file out as UTF-8, and omits the encoding attribute from the &lt;see langword=&quot;ProcessingInstruction&quot; /&gt;.">要產生的編碼方式。 如果編碼方式為 <see langword="null" />，它會以 UTF-8 格式寫出檔案，並忽略來自 <see langword="ProcessingInstruction" /> 的編碼方式屬性。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.">編碼方式不受支援、檔案名稱是空的、只含有泛空白字元 (White Space)，或含有一個或多個無效字元。</exception>
      <exception cref="T:System.UnauthorizedAccessException" vsli:raw="Access is denied.">存取遭到拒絕。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The filename is &lt;see langword=&quot;null&quot; /&gt;.">檔案名稱為 <see langword="null" />。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The directory to write to is not found.">找不到要寫入的目錄。</exception>
      <exception cref="T:System.IO.IOException" vsli:raw="The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.">檔案名稱包含關於檔案名稱、目錄名稱或磁碟標籤語法的不正確或無效語法。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼叫端沒有必要的權限。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Close">
      <summary vsli:raw="Closes this stream and the underlying stream.">關閉這個資料流與基礎資料流。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.Flush">
      <summary vsli:raw="Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.">將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
      <summary vsli:raw="Returns the closest prefix defined in the current namespace scope for the namespace URI.">傳回最接近命名空間 URI 在目前命名空間範圍中定義的前置詞。</summary>
      <param name="ns" vsli:raw="Namespace URI whose prefix you want to find.">想要尋找其前置詞的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ns&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="ns" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <returns vsli:raw="The matching prefix. Or &lt;see langword=&quot;null&quot; /&gt; if no matching namespace URI is found in the current scope.">符合的前置詞。 如果在目前範圍中找不到符合的命名空間 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Encodes the specified binary bytes as base64 and writes out the resulting text.">以 base64 編碼指定的二進位位元組並寫出產生的文字。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要編碼的位元組陣列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the bytes to write.">緩衝區中的位置，指示要寫入的位元組開頭。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Encodes the specified binary bytes as binhex and writes out the resulting text.">以 Binhex 編碼指定的二進位位元組，並寫出產生的文字。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要編碼的位元組陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is Closed.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 已經關閉。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
      <summary vsli:raw="Writes out a &amp;lt;![CDATA[...]]&amp;gt; block containing the specified text.">寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
      <param name="text" vsli:raw="Text to place inside the CDATA block.">要放在 CDATA 區塊中的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.">此文字會導致非語式正確的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
      <summary vsli:raw="Forces the generation of a character entity for the specified Unicode character value.">強制產生指定的 Unicode 字元值的字元實體。</summary>
      <param name="ch" vsli:raw="Unicode character for which to generate a character entity.">要產生字元實體的 Unicode 字元。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The character is in the surrogate pair character range, &lt;see langword=&quot;0xd800&quot; /&gt; - &lt;see langword=&quot;0xdfff&quot; /&gt;; or the text would result in a non-well formed XML document.">字元是位在 Surrogate 字組字元範圍 <see langword="0xd800" /> - <see langword="0xdfff" /> 中；否則文字會產生非正確格式的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes text one buffer at a time.">一次將文字寫入一個緩衝區。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">包含要寫入之文字的字元陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the text to write.">緩衝區中的位置指示要寫入的文字開頭。</param>
      <param name="count" vsli:raw="The number of characters to write.">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;; the call results in surrogate pair characters being split or an invalid surrogate pair being written.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />；這個呼叫會導致 Surrogate 字組字元被分隔或寫入無效的 Surrogate 字組。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is Closed.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 已經關閉。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
      <summary vsli:raw="Writes out a comment &amp;lt;!--...--&amp;gt; containing the specified text.">寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
      <param name="text" vsli:raw="Text to place inside the comment.">要放入註解中的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.">此文字會導致非語式正確的 XML 文件</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XmlTextWriter.WriteState&quot; /&gt; is &lt;see langword=&quot;Closed&quot; /&gt;.">
        <see cref="P:System.Xml.XmlTextWriter.WriteState" /> 為 <see langword="Closed" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Writes the DOCTYPE declaration with the specified name and optional attributes.">寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
      <param name="name" vsli:raw="The name of the DOCTYPE. This must be non-empty.">DOCTYPE 名稱。 這必須不是空白的。</param>
      <param name="pubid" vsli:raw="If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where &lt;paramref name=&quot;pubid&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; are replaced with the value of the given arguments.">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <paramref name="pubid" /> 與 <paramref name="sysid" /> 會替換為指定之引數的值。</param>
      <param name="sysid" vsli:raw="If &lt;paramref name=&quot;pubid&quot; /&gt; is null and &lt;paramref name=&quot;sysid&quot; /&gt; is non-null it writes SYSTEM &quot;sysid&quot; where &lt;paramref name=&quot;sysid&quot; /&gt; is replaced with the value of this argument.">如果 <paramref name="pubid" /> 是 null，而 <paramref name="sysid" /> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <paramref name="sysid" /> 會由這個引數的值所取代。</param>
      <param name="subset" vsli:raw="If non-null it writes [subset] where subset is replaced with the value of this argument.">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called outside the prolog (after the root element).">從初構的外部 (在根項目之後) 呼叫這個方法。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; the value for &lt;paramref name=&quot;name&quot; /&gt; would result in invalid XML.">
        <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />  
  
-或- 
<paramref name="name" /> 的值將導致無效的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndAttribute">
      <summary vsli:raw="Closes the previous &lt;see cref=&quot;M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)&quot; /&gt; call.">關閉先前的 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 呼叫。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndDocument">
      <summary vsli:raw="Closes any open elements or attributes and puts the writer back in the Start state.">關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The XML document is invalid.">XML 文件無效。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEndElement">
      <summary vsli:raw="Closes one element and pops the corresponding namespace scope.">關閉一個項目並快顯對應的命名空間範圍。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
      <summary vsli:raw="Writes out an entity reference as &lt;see langword=&quot;&amp;amp;name;&quot; /&gt;.">寫出如 <see langword="&amp;name;" /> 的實體參考。</summary>
      <param name="name" vsli:raw="Name of the entity reference.">實體參考的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">此文字將產生非語式正確的 XML 文件，或是 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteFullEndElement">
      <summary vsli:raw="Closes one element and pops the corresponding namespace scope.">關閉一個項目並快顯對應的命名空間範圍。</summary>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteName(System.String)">
      <summary vsli:raw="Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation.">寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議的有效名稱。</summary>
      <param name="name" vsli:raw="Name to write.">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid XML name; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> 不是有效的 XML 名稱，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
      <summary vsli:raw="Writes out the specified name, ensuring it is a valid &lt;see langword=&quot;NmToken&quot; /&gt; according to the W3C XML 1.0 recommendation.">寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議的有效 <see langword="NmToken" />。</summary>
      <param name="name" vsli:raw="Name to write.">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid &lt;see langword=&quot;NmToken&quot; /&gt;; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> 不是有效的 <see langword="NmToken" />，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary vsli:raw="Writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.">寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name" vsli:raw="Name of the processing instruction.">處理指示的名稱。</param>
      <param name="text" vsli:raw="Text to include in the processing instruction.">要包含在處理指示中的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.  &#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; This method is being used to create an XML declaration after &lt;see cref=&quot;M:System.Xml.XmlTextWriter.WriteStartDocument&quot; /&gt; has already been called.">此文字會導致非語式正確的 XML 文件。  
  
 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
在呼叫 <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> 之後，使用這個方法來建立 XML 宣告。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
      <summary vsli:raw="Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
      <param name="localName" vsli:raw="The local name to write.">要寫入的區域名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the name.">與這個名稱關聯的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;localName&quot; /&gt; is not a valid name according to the W3C Namespaces spec.">
        <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
 根據 W3C 命名空間規格，<paramref name="localName" /> 不是有效的名稱。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes raw markup manually from a character buffer.">從字元緩衝區手動寫入未經處理的標記。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">包含要寫入之文字的字元陣列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the text to write.">緩衝區中指示要寫入的文字開頭的位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
      <summary vsli:raw="Writes raw markup manually from a string.">從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
      <param name="data" vsli:raw="String containing the text to write.">包含要寫入之文字的字串。</param>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="Writes the start of an attribute.">寫入屬性的開頭。</summary>
      <param name="prefix" vsli:raw="&lt;see langword=&quot;Namespace&quot; /&gt; prefix of the attribute.">屬性的 <see langword="Namespace" /> 前置詞。</param>
      <param name="localName" vsli:raw="&lt;see langword=&quot;LocalName&quot; /&gt; of the attribute.">屬性的 <see langword="LocalName" />。</param>
      <param name="ns" vsli:raw="&lt;see langword=&quot;NamespaceURI&quot; /&gt; of the attribute.">屬性的 <see langword="NamespaceURI" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument">
      <summary vsli:raw="Writes the XML declaration with the version &quot;1.0&quot;.">使用版本「1.0」寫入 XML 宣告。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.">這不是在建構函式之後呼叫的第一個寫入方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
      <summary vsli:raw="Writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.">使用版本「1.0」寫入 XML 宣告與獨立屬性。</summary>
      <param name="standalone" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, it writes &quot;standalone=yes&quot;; if &lt;see langword=&quot;false&quot; /&gt;, it writes &quot;standalone=no&quot;.">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.">這不是在建構函式之後呼叫的第一個寫入方法。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary vsli:raw="Writes the specified start tag and associates it with the given namespace and prefix.">寫入指定的開頭標記，並使它與指定的命名空間及前置詞產生關聯。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the element.">項目的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.">與項目相關聯的命名空間 URI。 如果這個命名空間已經在範圍中並具有相關聯的前置詞，則寫入器也會自動寫入該前置詞。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.">寫入器已關閉。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteString(System.String)">
      <summary vsli:raw="Writes the given text content.">寫入指定的文字內容。</summary>
      <param name="text" vsli:raw="Text to write.">要寫入的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text string contains an invalid surrogate pair.">文字字串包含無效的 Surrogate 字組。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary vsli:raw="Generates and writes the surrogate character entity for the surrogate character pair.">產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
      <param name="lowChar" vsli:raw="The low surrogate. This must be a value between &lt;see langword=&quot;0xDC00&quot; /&gt; and &lt;see langword=&quot;0xDFFF&quot; /&gt;.">低 Surrogate。 這必須是一個介於 <see langword="0xDC00" /> 和 <see langword="0xDFFF" /> 之間的值。</param>
      <param name="highChar" vsli:raw="The high surrogate. This must be a value between &lt;see langword=&quot;0xD800&quot; /&gt; and &lt;see langword=&quot;0xDBFF&quot; /&gt;.">高 Surrogate。 這必須是一個介於 <see langword="0xD800" /> 和 <see langword="0xDBFF" /> 之間的值。</param>
      <exception cref="T:System.Exception" vsli:raw="An invalid surrogate character pair was passed.">傳送無效的 Surrogate 字元字組。</exception>
    </member>
    <member name="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
      <summary vsli:raw="Writes out the given white space.">寫出指定的空白字元。</summary>
      <param name="ws" vsli:raw="The string of white space characters.">空白字元的字串。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The string contains non-white space characters.">字串包含非泛空白字元。</exception>
    </member>
    <member name="P:System.Xml.XmlTextWriter.BaseStream">
      <summary vsli:raw="Gets the underlying stream object.">取得基礎資料流物件。</summary>
      <returns vsli:raw="The stream to which the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; is writing or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see langword=&quot;XmlTextWriter&quot; /&gt; was constructed using a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; that does not inherit from the &lt;see cref=&quot;T:System.IO.StreamWriter&quot; /&gt; class.">
        <see langword="XmlTextWriter" /> 正在寫入的資料流，如果使用不是從 <see cref="T:System.IO.TextWriter" /> 的 <see cref="T:System.IO.StreamWriter" /> 類別來建構 <see langword="null" />，則為 <see langword="XmlTextWriter" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Formatting">
      <summary vsli:raw="Indicates how the output is formatted.">表示格式化輸出的方式。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.Formatting&quot; /&gt; values. The default is &lt;see langword=&quot;Formatting.None&quot; /&gt; (no special formatting).">其中一個 <see cref="T:System.Xml.Formatting" /> 值。 預設值為 <see langword="Formatting.None" /> (無特殊格式)。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Indentation">
      <summary vsli:raw="Gets or sets how many IndentChars to write for each level in the hierarchy when &lt;see cref=&quot;P:System.Xml.XmlTextWriter.Formatting&quot; /&gt; is set to &lt;see langword=&quot;Formatting.Indented&quot; /&gt;.">取得或設定當 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 設定為 <see langword="Formatting.Indented" /> 時，每一層級要寫入多少縮排字元。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting this property to a negative value.">設定這個屬性為負數值。</exception>
      <returns vsli:raw="Number of &lt;see langword=&quot;IndentChars&quot; /&gt; for each level. The default is 2.">每一層級的 <see langword="IndentChars" /> 數目。 預設值為 2。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.IndentChar">
      <summary vsli:raw="Gets or sets which character to use for indenting when &lt;see cref=&quot;P:System.Xml.XmlTextWriter.Formatting&quot; /&gt; is set to &lt;see langword=&quot;Formatting.Indented&quot; /&gt;.">取得或設定當 <see cref="P:System.Xml.XmlTextWriter.Formatting" /> 設為 <see langword="Formatting.Indented" /> 時用於縮排的字元。</summary>
      <returns vsli:raw="The character to use for indenting. The default is space.">用來縮排的字元。 預設值是空白。  
  
 <block subset="none" type="note"><para><see langword="XmlTextWriter" /> 可讓您將這個屬性設定為任何字元。 若要確保有效的 XML，您必須指定有效的空白字元、0x9、0x10、0x13 或 0x20。</para></block></returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.Namespaces">
      <summary vsli:raw="Gets or sets a value indicating whether to do namespace support.">取得或設定值，指出是否支援命名空間。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="You can only change this property when in the &lt;see langword=&quot;WriteState.Start&quot; /&gt; state.">在 <see langword="WriteState.Start" /> 狀態時才能變更這個屬性。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to support namespaces; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; The default is &lt;see langword=&quot;true&quot; /&gt;.">若要支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。  
  
預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.QuoteChar">
      <summary vsli:raw="Gets or sets which character to use to quote attribute values.">取得或設定用來括住屬性值的字元。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting this property to something other than either a single or double quote.">設定這個屬性為單引號或雙引號以外的值。</exception>
      <returns vsli:raw="The character to use to quote attribute values. This must be a single quote (&amp;amp;#39;) or a double quote (&amp;amp;#34;). The default is a double quote.">用來括住屬性值的字元。 這必須是單一引號 (&amp; #39; ) 或雙引號 (&amp; #34; ) 。 預設為雙引號。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.WriteState">
      <summary vsli:raw="Gets the state of the writer.">取得寫入器的狀態。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.WriteState&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.WriteState" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see langword=&quot;xml:lang&quot; /&gt; in the current scope.">目前的 <see langword="xml:lang" />；如果目前的範圍中沒有 <see langword="null" /> 則為 <see langword="xml:lang" />。</returns>
    </member>
    <member name="P:System.Xml.XmlTextWriter.XmlSpace">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">取得 <see cref="T:System.Xml.XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns vsli:raw="An &lt;see langword=&quot;XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; None&lt;/term&gt;&lt;description&gt; This is the default if no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Default&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;default&quot;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Preserve&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;preserve&quot;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">
        <see langword="XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。  
  
 <list type="table"><listheader><term> 值</term><description> 意義</description></listheader><item><term> None</term><description> 如果 <see langword="xml:space" /> 範圍不存在，這是預設值。</description></item><item><term> 預設</term><description> 目前的範圍為 <see langword="xml:space" />="default"。</description></item><item><term> Preserve</term><description> 目前的範圍為 <see langword="xml:space" />="preserve"。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlTokenizedType">
      <summary vsli:raw="Represents the XML type for the string. This allows the string to be read as a particular XML type, for example a CDATA section type.">表示字串的 XML 型別。 這可允許將字串當做特殊 XML 型別來讀取，例如 CDATA 區段型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.CDATA">
      <summary vsli:raw="CDATA type.">CDATA 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITIES">
      <summary vsli:raw="ENTITIES type.">ENTITIES 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENTITY">
      <summary vsli:raw="ENTITY type.">ENTITY 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ENUMERATION">
      <summary vsli:raw="ENUMERATION type.">ENUMERATION 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.ID">
      <summary vsli:raw="ID type.">ID 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREF">
      <summary vsli:raw="IDREF type.">IDREF 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.IDREFS">
      <summary vsli:raw="IDREFS type.">IDREFS 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NCName">
      <summary vsli:raw="NCName type.">NCName 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKEN">
      <summary vsli:raw="NMTOKEN type.">NMTOKEN 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NMTOKENS">
      <summary vsli:raw="NMTOKENS type.">NMTOKENS 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.None">
      <summary vsli:raw="No type.">No 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.NOTATION">
      <summary vsli:raw="NOTATION type.">NOTATION 型別。</summary>
    </member>
    <member name="F:System.Xml.XmlTokenizedType.QName">
      <summary vsli:raw="QName type.">QName 型別。</summary>
    </member>
    <member name="T:System.Xml.XmlUrlResolver">
      <summary vsli:raw="Resolves external XML resources named by a Uniform Resource Identifier (URI).">解析由統一資源識別項 (URI) 所命名的外部 XML 資源。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlUrlResolver" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Maps a URI to an object that contains the actual resource.">對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="Currently not used.">目前未使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current implementation only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">要傳回的物件類型。 目前的實作只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;ofObjectToReturn&quot; /&gt; is neither &lt;see langword=&quot;null&quot; /&gt; nor a &lt;see langword=&quot;Stream&quot; /&gt; type.">
        <paramref name="ofObjectToReturn" /> 既不是 <see langword="null" /> 也不是 <see langword="Stream" /> 型別。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="The specified URI is not an absolute URI.">指定的 URI 並非絕對 URI。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;absoluteUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="absoluteUri" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Exception" vsli:raw="There is a runtime error (for example, an interrupted server connection).">發生執行階段錯誤 (例如中斷的伺服器連線)。</exception>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)">
      <summary vsli:raw="Asynchronously maps a URI to an object that contains the actual resource.">以非同步的方式對應 URI 至包含實際資源的物件。</summary>
      <param name="absoluteUri" vsli:raw="The URI returned from &lt;see cref=&quot;M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)&quot; /&gt;.">自 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" /> 傳回的 URI。</param>
      <param name="role" vsli:raw="Currently not used.">目前未使用。</param>
      <param name="ofObjectToReturn" vsli:raw="The type of object to return. The current implementation only returns &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; objects.">要傳回的物件類型。 目前的實作只傳回 <see cref="T:System.IO.Stream" /> 物件。</param>
      <returns vsli:raw="A stream object or &lt;see langword=&quot;null&quot; /&gt; if a type other than stream is specified.">如果指定的類型並非資料流，則為資料流物件或為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)">
      <summary vsli:raw="Resolves the absolute URI from the base and relative URIs.">從基底和相對 URI 解析絕對 URI。</summary>
      <param name="baseUri" vsli:raw="The base URI used to resolve the relative URI.">用來解析相對 URI 的基底 URI。</param>
      <param name="relativeUri" vsli:raw="The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the &lt;paramref name=&quot;baseUri&quot; /&gt; value. If relative, it combines with the &lt;paramref name=&quot;baseUri&quot; /&gt; to make an absolute URI.">要解析的 URI。 這個 URI 可為絕對或相對的。 若是絕對的，這個值實際上取代 <paramref name="baseUri" /> 值。 若是相對的，它會結合 <paramref name="baseUri" /> 而成為絕對 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;baseUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or &lt;paramref name=&quot;relativeUri&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="baseUri" /> 是 <see langword="null" />，或 <paramref name="relativeUri" /> 是 <see langword="null" />。</exception>
      <returns vsli:raw="The absolute URI, or &lt;see langword=&quot;null&quot; /&gt; if the relative URI cannot be resolved.">絕對 URI；如果相對 URI 不能解析，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.CachePolicy">
      <summary vsli:raw="Gets or sets the cache policy for the underlying &lt;see cref=&quot;T:System.Net.WebRequest&quot; /&gt; object.">取得或設定基礎 <see cref="T:System.Net.WebRequest" /> 物件的快取原則。</summary>
      <returns vsli:raw="The cache policy for the underlying web request.">基礎 Web 要求的快取原則。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Credentials">
      <summary vsli:raw="Sets credentials used to authenticate web requests.">設定用以驗證 Web 要求的認證資訊。</summary>
      <returns vsli:raw="The credentials to be used to authenticate web requests. If this property is not set, the value defaults to &lt;see langword=&quot;null&quot; /&gt;; that is, the &lt;see langword=&quot;XmlUrlResolver&quot; /&gt; has no user credentials.">用以驗證 Web 要求的認證。 如果未設定這個屬性，其值會預設為 <see langword="null" />；也就是說，<see langword="XmlUrlResolver" /> 沒有使用者認證。</returns>
    </member>
    <member name="P:System.Xml.XmlUrlResolver.Proxy">
      <summary vsli:raw="Gets or sets the network proxy for the underlying &lt;see cref=&quot;T:System.Net.WebRequest&quot; /&gt; object.">取得或設定基礎 <see cref="T:System.Net.WebRequest" /> 物件的網路 Proxy。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Net.IWebProxy&quot; /&gt; to use to access the Internet resource.">用以存取網際網路資源的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="T:System.Xml.XmlValidatingReader">
      <summary vsli:raw="Represents a reader that provides document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) validation.  &#xA;  &#xA; This class is obsolete. Starting with the .NET Framework 2.0, we recommend that you use the &lt;see cref=&quot;T:System.Xml.XmlReaderSettings&quot; /&gt; class and the &lt;see cref=&quot;Overload:System.Xml.XmlReader.Create&quot; /&gt; method to create a validating XML reader.">表示讀取器，其提供文件類型定義 (DTD)、XML-Data Reduced (XDR) 結構描述，以及 XML 結構描述定義語言 (XSD) 驗證。  
  
這個類別已經過時。 從 .NET Framework 2.0 開始，我們建議使用 <see cref="T:System.Xml.XmlReaderSettings" /> 類別及 <see cref="Overload:System.Xml.XmlReader.Create" /> 方法，來建立驗證 XML 讀取器。</summary>
    </member>
    <member name="E:System.Xml.XmlValidatingReader.ValidationEventHandler">
      <summary vsli:raw="Sets an event handler for receiving information about document type definition (DTD), XML-Data Reduced (XDR) schema, and XML Schema definition language (XSD) schema validation errors.">設定事件處理常式，用於接收文件類型定義 (DTD)、XML-Data Reduced (XDR) 結構描述和 XML 結構描述定義語言 (XSD) 結構描述驗證錯誤的相關資訊。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; class with the specified values.">使用指定的值，初始化 <see langword="XmlValidatingReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment" vsli:raw="The stream containing the XML fragment to parse.">包含要剖析之 XML 片段的資料流。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This determines what the fragment can contain (see table below).">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這可以決定 XML 片段會包含哪些內容 (請參閱下表)。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the XML fragment is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; to use, encoding, namespace scope, current &lt;see langword=&quot;xml:lang&quot; /&gt;, and &lt;see langword=&quot;xml:space&quot; /&gt; scope.">要剖析的 XML 片段位置所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.XmlNameTable" />、編碼方式、命名空間範圍、目前的 <see langword="xml:lang" /> 和 <see langword="xml:space" /> 範圍。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not one of the node types listed in the table below.">
        <paramref name="fragType" /> 不是下表所列的其中一個節點型別。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; class with the specified values.">使用指定的值，初始化 <see langword="XmlValidatingReader" /> 類別的新執行個體。</summary>
      <param name="xmlFragment" vsli:raw="The string containing the XML fragment to parse.">包含要剖析之 XML 片段的字串。</param>
      <param name="fragType" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; of the XML fragment. This also determines what the fragment string can contain (see table below).">XML 片段的 <see cref="T:System.Xml.XmlNodeType" />。 這也可以決定 XML 片段字串將會包含哪些內容 (請參閱下表)。</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlParserContext&quot; /&gt; in which the XML fragment is to be parsed. This includes the &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt; to use, encoding, namespace scope, current xml:lang, and xml:space scope.">要剖析的 XML 片段位置所在的 <see cref="T:System.Xml.XmlParserContext" />。 它包括要使用的 <see cref="T:System.Xml.NameTable" />、編碼方式、命名空間範圍、目前的 xml:lang 和 xml:space 範圍。</param>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;fragType&quot; /&gt; is not one of the node types listed in the table below.">
        <paramref name="fragType" /> 不是下表所列的其中一個節點型別。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; class that validates the content returned from the given &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">初始化驗證從指定的 <see cref="T:System.Xml.XmlReader" /> 傳回之內容的 <see langword="XmlValidatingReader" /> 類別的新執行個體。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; to read from while validating. The current implementation supports only &lt;see cref=&quot;T:System.Xml.XmlTextReader&quot; /&gt;.">在驗證時要自其讀取的 <see langword="XmlReader" />。 目前的實作只支援 <see cref="T:System.Xml.XmlTextReader" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The reader specified is not an &lt;see langword=&quot;XmlTextReader&quot; /&gt;.">指定的讀取器不是 <see langword="XmlTextReader" />。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Close">
      <summary vsli:raw="Changes the &lt;see cref=&quot;P:System.Xml.XmlReader.ReadState&quot; /&gt; to Closed.">將 <see cref="P:System.Xml.XmlReader.ReadState" /> 變更為 Closed。</summary>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)">
      <summary vsli:raw="Gets the value of the attribute with the specified index.">取得具有指定索引的屬性值。</summary>
      <param name="i" vsli:raw="The index of the attribute. The index is zero-based. (The first attribute has index 0.)">屬性的索引。 索引以零為起始。 (第一個屬性的索引為 0。)</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />。</exception>
      <returns vsli:raw="The value of the specified attribute.">指定的屬性值。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified name.">取得具有指定名稱的屬性值。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace Uniform Resource Identifier (URI).">針對具有指定的區域名稱和命名空間「統一資源識別元 (URI)」的屬性，取得其值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="The value of the specified attribute. If the attribute is not found, &lt;see langword=&quot;null&quot; /&gt; is returned. This method does not move the reader.">指定的屬性值。 如果找不到屬性，會傳回 <see langword="null" />。 這個方法不會移動讀取器。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.HasLineInfo">
      <summary vsli:raw="Gets a value indicating whether the class can return line information.">取得值，這個值指出類別是否可以傳回行資訊。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class can return line information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果類別可以傳回行資訊，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)">
      <summary vsli:raw="Resolves a namespace prefix in the current element's scope.">解析目前項目範圍中的命名空間前置詞。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace Uniform Resource Identifier (URI) you want to resolve. To match the default namespace, pass an empty string.">前置詞，您要解析其命名空間「統一資源識別元 (URI)」。 若要符合預設命名空間，請傳送空字串。</param>
      <returns vsli:raw="The namespace URI to which the prefix maps or &lt;see langword=&quot;null&quot; /&gt; if no matching prefix is found.">前置詞對應的命名空間 URI，如果找不到符合的前置詞，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)">
      <summary vsli:raw="Moves to the attribute with the specified index.">移至具有指定索引的屬性。</summary>
      <param name="i" vsli:raw="The index of the attribute.">屬性的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;i&quot; /&gt; parameter is less than 0 or greater than or equal to &lt;see cref=&quot;P:System.Xml.XmlReader.AttributeCount&quot; /&gt;.">
        <paramref name="i" /> 參數小於 0，或大於或等於 <see cref="P:System.Xml.XmlReader.AttributeCount" />。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)">
      <summary vsli:raw="Moves to the attribute with the specified name.">移至具有指定名稱的屬性。</summary>
      <param name="name" vsli:raw="The qualified name of the attribute.">屬性的限定名稱 (Qualified Name)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the reader does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves to the attribute with the specified local name and namespace Uniform Resource Identifier (URI).">移至具有指定區域名稱和命名空間「統一資源識別元 (URI)」的屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is found; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the reader does not change.">如果找到屬性，則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <see langword="false" />，則不會變更讀取器的位置。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToElement">
      <summary vsli:raw="Moves to the element that contains the current attribute node.">移至包含目前屬性節點的項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute (the position of the reader does not change).">如果讀取器位於屬性 (讀取器移至擁有該屬性的項目) 上，則為 <see langword="true" />，如果讀取器不在屬性 (不會變更讀取器的位置)，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute">
      <summary vsli:raw="Moves to the first attribute.">移至第一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an attribute exists (the reader moves to the first attribute); otherwise, &lt;see langword=&quot;false&quot; /&gt; (the position of the reader does not change).">如果屬性存在 (讀取器移至第一個屬性)，則為 <see langword="true" />，否則為 <see langword="false" /> (不會變更讀取器的位置)。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.MoveToNextAttribute">
      <summary vsli:raw="Moves to the next attribute.">移至下一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is a next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes.">如果有下一個屬性，則為 <see langword="true" />，如果沒有其他屬性，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.Read">
      <summary vsli:raw="Reads the next node from the stream.">從資料流讀取下一個節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the next node was read successfully; &lt;see langword=&quot;false&quot; /&gt; if there are no more nodes to read.">如果成功讀取下一個節點，則為 <see langword="true" />，如果沒有其他節點可讀取，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadAttributeValue">
      <summary vsli:raw="Parses the attribute value into one or more &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;EntityReference&quot; /&gt;, or &lt;see langword=&quot;EndEntity&quot; /&gt; nodes.">將屬性值剖析成一或多個 <see langword="Text" />、<see langword="EntityReference" /> 或 <see langword="EndEntity" /> 節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are nodes to return.  &#xA;  &#xA; &lt;see langword=&quot;false&quot; /&gt; if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.  &#xA;  &#xA; An empty attribute, such as, &lt;c&gt;misc=&quot;&quot;&lt;/c&gt;, returns &lt;see langword=&quot;true&quot; /&gt; with a single node with a value of String.Empty.">如果傳回的是節點，則為 <see langword="true" />。  
  
 如果在初次呼叫時讀取器不位於屬性節點上，或已讀取所有屬性值，則為 <see langword="false" />。  
  
空白的屬性 (例如 <c>misc=""</c>) 會對含有 String.Empty 值的單一節點傳回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the Base64 decoded binary bytes.">讀取內容，並傳回 Base64 已解碼的二進位位元組。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">目前的節點不支援 <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the content and returns the BinHex decoded binary bytes.">讀取內容，並傳回 BinHex 已解碼的二進位資料。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)&quot; /&gt; is not supported on the current node.">目前的節點不支援 <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlValidatingReader" /> 實作不支援這個方法。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the Base64 content.">讀取項目，並將 Base64 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlValidatingReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads the element and decodes the BinHex content.">讀取項目，並將 BinHex 內容解碼。</summary>
      <param name="buffer" vsli:raw="The buffer into which to copy the resulting text. This value cannot be &lt;see langword=&quot;null&quot; /&gt;.">將產生的文字複製到其中的緩衝區。 這個值不能是 <see langword="null" />。</param>
      <param name="index" vsli:raw="The offset into the buffer where to start copying the result.">緩衝區中開始複製結果的位移。</param>
      <param name="count" vsli:raw="The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.">要複製至緩衝區中的最大位元組數目。 從這個方法傳回所複製的實際位元組數目。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node is not an element node.">目前的節點不是項目節點。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index into the buffer or index + count is larger than the allocated buffer size.">緩衝區的索引或是索引 + 計數大於所配置的緩衝區大小。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implementation does not support this method.">
        <see cref="T:System.Xml.XmlValidatingReader" /> 實作不支援這個方法。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The element contains mixed-content.">項目包含混合內容。</exception>
      <exception cref="T:System.FormatException" vsli:raw="The content cannot be converted to the requested type.">內容無法轉換成要求的類型。</exception>
      <returns vsli:raw="The number of bytes written to the buffer.">寫入緩衝區的位元組數目。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadString">
      <summary vsli:raw="Reads the contents of an element or text node as a string.">將項目或文字節點的內容當做字串讀取。</summary>
      <returns vsli:raw="The contents of the element or text node. This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.">項目或文字節點的內容。 如果讀取器不在項目或文字節點上，或目前內容中沒有其他可傳回的文字內容，則可為空字串。  
  
 <block subset="none" type="note"><para>  
 文字節點可為項目或屬性文字節點。</para></block></returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ReadTypedValue">
      <summary vsli:raw="Gets the common language runtime type for the specified XML Schema definition language (XSD) type.">取得指定的 XML 結構描述定義語言 (XSD) 類型的 Common Language Runtime 類型。</summary>
      <returns vsli:raw="The common language runtime type for the specified XML Schema type.">指定 XML 結構描述類型的 Common Language Runtime 類型。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.ResolveEntity">
      <summary vsli:raw="Resolves the entity reference for &lt;see langword=&quot;EntityReference&quot; /&gt; nodes.">解析 <see langword="EntityReference" /> 節點的實體參考。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;EntityReference&quot; /&gt; node.">讀取器不在 <see langword="EntityReference" /> 節點上。</exception>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; object that identifies the scope of the reader.">識別讀取器之範圍的 <see cref="T:System.Xml.XmlNamespaceScope" /> 物件。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; object that identifies the namespaces in scope.">識別範圍內命名空間的 <see cref="T:System.Collections.IDictionary" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />。</summary>
      <param name="prefix" vsli:raw="The namespace prefix.">命名空間前置詞。</param>
      <returns vsli:raw="A string value that contains the namespace Uri that is associated with the prefix.">字串值，包含與前置詞相關聯的命名空間 URI。</returns>
    </member>
    <member name="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)&quot; /&gt;.">如需這個成員的說明，請參閱 <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />。</summary>
      <param name="namespaceName" vsli:raw="The namespace that is associated with the prefix.">與前置詞相關聯的命名空間。</param>
      <returns vsli:raw="A string value that contains the namespace prefix that is associated with the &lt;paramref name=&quot;namespaceName&quot; /&gt;.">字串值，包含與 <paramref name="namespaceName" /> 相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.AttributeCount">
      <summary vsli:raw="Gets the number of attributes on the current node.">取得目前節點的屬性數目。</summary>
      <returns vsli:raw="The number of attributes on the current node. This number includes default attributes.">目前節點的屬性數目。 這個數目包括預設屬性。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.BaseURI">
      <summary vsli:raw="Gets the base URI of the current node.">取得目前節點的基底 (Base) URI。</summary>
      <returns vsli:raw="The base URI of the current node.">目前節點的基底 URI。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanReadBinaryContent">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; implements the binary content read methods.">取得值，這個值表示 <see cref="T:System.Xml.XmlValidatingReader" /> 是否會實作二進位內容讀取方法。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the binary content read methods are implemented; otherwise &lt;see langword=&quot;false&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlValidatingReader&quot; /&gt; class returns &lt;see langword=&quot;true&quot; /&gt;.">如果實作二進位內容讀取方法，則為 <see langword="true" />，否則為 <see langword="false" />。 <see cref="T:System.Xml.XmlValidatingReader" /> 類別會傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.CanResolveEntity">
      <summary vsli:raw="Gets a value indicating whether this reader can parse and resolve entities.">取得值，指出這個讀取器是否可以剖析和解析實體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader can parse and resolve entities; otherwise, &lt;see langword=&quot;false&quot; /&gt;. &lt;see langword=&quot;XmlValidatingReader&quot; /&gt; always returns &lt;see langword=&quot;true&quot; /&gt;.">如果讀取器可以剖析和解析實體，則為 <see langword="true" />，否則為 <see langword="false" />。 <see langword="XmlValidatingReader" /> 永遠傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Depth">
      <summary vsli:raw="Gets the depth of the current node in the XML document.">取得 XML 文件中目前節點的深度。</summary>
      <returns vsli:raw="The depth of the current node in the XML document.">XML 文件中目前節點的深度。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Encoding">
      <summary vsli:raw="Gets the encoding attribute for the document.">取得文件的編碼屬性。</summary>
      <returns vsli:raw="The encoding value. If no encoding attribute exists, and there is not byte-order mark, this defaults to UTF-8.">編碼值。 如果編碼屬性不存在，而且沒有位元組順序標記，則會預設為 UTF-8。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EntityHandling">
      <summary vsli:raw="Gets or sets a value that specifies how the reader handles entities.">取得或設定值，表示讀取器如何處理實體。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Invalid value was specified.">指定無效的值。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.EntityHandling&quot; /&gt; values. If no &lt;see langword=&quot;EntityHandling&quot; /&gt; is specified, it defaults to EntityHandling.ExpandEntities.">其中一個 <see cref="T:System.Xml.EntityHandling" /> 值。 若未指定 <see langword="EntityHandling" />，則會預設為 EntityHandling.ExpandEntities。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.EOF">
      <summary vsli:raw="Gets a value indicating whether the reader is positioned at the end of the stream.">取得值，表示讀取器是否位於資料流結尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reader is positioned at the end of the stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器定位於資料流結尾，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.HasValue">
      <summary vsli:raw="Gets a value indicating whether the current node can have a &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.Value&quot; /&gt; other than String.Empty.">取得值，表示目前的節點是否可以具有 String.Empty 之外的其他 <see cref="P:System.Xml.XmlValidatingReader.Value" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the node on which the reader is currently positioned can have a &lt;see langword=&quot;Value&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果讀取器目前所在節點具有 <see langword="Value" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.">取得值，表示目前的節點是否為文件類型定義 (DTD)，或結構描述中定義之預設值所產生的屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; &lt;see langword=&quot;false&quot; /&gt; if the attribute value was explicitly set.">如果目前節點是 DTD 或結構描述中定義的預設值所產生的屬性，則為 <see langword="true" />，如果已經明確設定屬性值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.IsEmptyElement">
      <summary vsli:raw="Gets a value indicating whether the current node is an empty element (for example, &lt;c&gt;&amp;lt;MyElement/&amp;gt;&lt;/c&gt;).">取得值，指出目前的節點是否為空項目 (例如 <c>&lt;MyElement/&gt;</c>)。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an element (&lt;see cref=&quot;P:System.Xml.XmlValidatingReader.NodeType&quot; /&gt; equals &lt;see langword=&quot;XmlNodeType.Element&quot; /&gt;) that ends with &lt;c&gt;/&amp;gt;&lt;/c&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果目前節點是元素 (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 等於結尾的 <see langword="XmlNodeType.Element" />) ，則為 <c>/&gt;</c> ，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LineNumber">
      <summary vsli:raw="Gets the current line number.">取得目前的行號。</summary>
      <returns vsli:raw="The current line number. The starting value for this property is 1.">目前的行號。 這個屬性的起始值為 1。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LinePosition">
      <summary vsli:raw="Gets the current line position.">取得目前的行位置。</summary>
      <returns vsli:raw="The current line position. The starting value for this property is 1.">目前的行位置。 這個屬性的起始值為 1。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.LocalName">
      <summary vsli:raw="Gets the local name of the current node.">取得目前節點的區域名稱。</summary>
      <returns vsli:raw="The name of the current node with the prefix removed. For example, &lt;see langword=&quot;LocalName&quot; /&gt; is &lt;see langword=&quot;book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; For node types that do not have a name (like &lt;see langword=&quot;Text&quot; /&gt;, &lt;see langword=&quot;Comment&quot; /&gt;, and so on), this property returns String.Empty.">目前節點名稱的前置詞被移除。 例如， <see langword="LocalName" /><see langword="book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
對於沒有名稱的節點類型 (如 <see langword="Text" />、<see langword="Comment" /> 等)，這個屬性會傳回 String.Empty。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Name">
      <summary vsli:raw="Gets the qualified name of the current node.">取得目前節點的限定名稱 (Qualified Name)。</summary>
      <returns vsli:raw="The qualified name of the current node. For example, &lt;see langword=&quot;Name&quot; /&gt; is &lt;see langword=&quot;bk:book&quot; /&gt; for the element &lt;c&gt;&amp;lt;bk:book&amp;gt;&lt;/c&gt;.  &#xA;  &#xA; The name returned is dependent on the &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.NodeType&quot; /&gt; of the node. The following node types return the listed values. All other node types return an empty string.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Name&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The document type name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Element&quot; /&gt;&lt;/term&gt;&lt;description&gt; The tag name.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;EntityReference&quot; /&gt;&lt;/term&gt;&lt;description&gt; The name of the entity referenced.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The target of the processing instruction.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The literal string &lt;see langword=&quot;xml&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">目前節點的限定名稱。 例如， <see langword="Name" /><see langword="bk:book" /> 適用于元素<c> &lt; &gt; bk： book</c>。  
  
傳回的名稱需視節點的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 而定： 下列節點類型會傳回所列的值。 其他所有節點類型都會傳回空字串。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 名稱</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的名稱。</description></item><item><term><see langword="DocumentType" /></term><description> 文件類型名稱。</description></item><item><term><see langword="Element" /></term><description> 標記名稱。</description></item><item><term><see langword="EntityReference" /></term><description> 所參考的實體名稱。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 處理指示的目標。</description></item><item><term><see langword="XmlDeclaration" /></term><description><see langword="xml" /> 常值 (Literal) 字串。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Namespaces">
      <summary vsli:raw="Gets or sets a value indicating whether to do namespace support.">取得或設定值，指出是否支援命名空間。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do namespace support; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果支援命名空間，則為 <see langword="true" />，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NamespaceURI">
      <summary vsli:raw="Gets the namespace Uniform Resource Identifier (URI) (as defined in the World Wide Web Consortium (W3C) Namespace specification) of the node on which the reader is positioned.">取得讀取器所在之節點的命名空間「統一資源識別元 (URI)」(如全球資訊網協會 (W3C) 命名空間規格所定義)。</summary>
      <returns vsli:raw="The namespace URI of the current node; otherwise an empty string.">目前節點的命名空間 URI，否則為空字串。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NameTable">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; associated with this implementation.">取得與這個實作關聯的 <see cref="T:System.Xml.XmlNameTable" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;XmlNameTable&quot; /&gt; that enables you to get the atomized version of a string within the node.">
        <see langword="XmlNameTable" />，可讓您取得節點內字串的擷取版本。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.NodeType">
      <summary vsli:raw="Gets the type of the current node.">取得目前節點的類型。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlNodeType&quot; /&gt; values representing the type of the current node.">
        <see cref="T:System.Xml.XmlNodeType" /> 值之一，代表目前節點的類型。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Prefix">
      <summary vsli:raw="Gets the namespace prefix associated with the current node.">取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns vsli:raw="The namespace prefix associated with the current node.">與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.QuoteChar">
      <summary vsli:raw="Gets the quotation mark character used to enclose the value of an attribute node.">取得用來括住屬性節點值的引號字元。</summary>
      <returns vsli:raw="The quotation mark character (&quot; or ') used to enclose the value of an attribute node.">用來括住屬性節點值的引號字元 (" 或 ')。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Reader">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; used to construct this &lt;see langword=&quot;XmlValidatingReader&quot; /&gt;.">取得用來建構這個 <see langword="XmlValidatingReader" /> 的 <see cref="T:System.Xml.XmlReader" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; specified in the constructor.">建構函式中指定的 <see langword="XmlReader" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ReadState">
      <summary vsli:raw="Gets the state of the reader.">取得讀取器的狀態。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ReadState&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.ReadState" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Schemas">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaCollection&quot; /&gt; to use for validation.">取得用來驗證的 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlSchemaCollection&quot; /&gt; to use for validation.">用來驗證的 <see langword="XmlSchemaCollection" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.SchemaType">
      <summary vsli:raw="Gets a schema type object.">取得結構描述類型物件。</summary>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaDatatype&quot; /&gt;, &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSimpleType&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaComplexType&quot; /&gt; depending whether the node value is a built in XML Schema definition language (XSD) type or a user defined simpleType or complexType; &lt;see langword=&quot;null&quot; /&gt; if the current node has no schema type.">
        <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> 或 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />，視節點值為內建的 XML 結構描述定義語言 (XSD) 類型或使用者自訂的 simpleType 或 complexType 而定，如果目前節點沒有結構描述類型，則為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.ValidationType">
      <summary vsli:raw="Gets or sets a value indicating the type of validation to perform.">取得或設定數值，表示要執行的驗證類型。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Setting the property after a Read has been called.">在呼叫 Read 之後設定這個屬性。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.ValidationType&quot; /&gt; values. If this property is not set, it defaults to ValidationType.Auto.">其中一個 <see cref="T:System.Xml.ValidationType" /> 值。 若未設定這個屬性，則預設為 ValidationType.Auto。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.Value">
      <summary vsli:raw="Gets the text value of the current node.">取得目前節點的文字值。</summary>
      <returns vsli:raw="The value returned depends on the &lt;see cref=&quot;P:System.Xml.XmlValidatingReader.NodeType&quot; /&gt; of the node. The following table lists node types that have a value to return. All other node types return String.Empty.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Node Type&lt;/term&gt;&lt;description&gt; Value&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Attribute&quot; /&gt;&lt;/term&gt;&lt;description&gt; The value of the attribute.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;CDATA&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the CDATA section.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Comment&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the comment.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;DocumentType&quot; /&gt;&lt;/term&gt;&lt;description&gt; The internal subset.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;ProcessingInstruction&quot; /&gt;&lt;/term&gt;&lt;description&gt; The entire content, excluding the target.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;SignificantWhitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup in a mixed content model.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Text&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the text node.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Whitespace&quot; /&gt;&lt;/term&gt;&lt;description&gt; The white space between markup.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;XmlDeclaration&quot; /&gt;&lt;/term&gt;&lt;description&gt; The content of the declaration.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">傳回值需視節點的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> 而定。 下表列出具有傳回值的節點類型。 其他所有節點類型都會傳回 String.Empty。  
  
 <list type="table"><listheader><term> 節點類型</term><description> 值</description></listheader><item><term><see langword="Attribute" /></term><description> 屬性的值。</description></item><item><term><see langword="CDATA" /></term><description> CDATA 區段的內容。</description></item><item><term><see langword="Comment" /></term><description> 註解的內容。</description></item><item><term><see langword="DocumentType" /></term><description> 內部子集。</description></item><item><term><see langword="ProcessingInstruction" /></term><description> 全部內容 (目標除外)。</description></item><item><term><see langword="SignificantWhitespace" /></term><description> 在混合內容模型中標記間的泛空白字元。</description></item><item><term><see langword="Text" /></term><description> 文字節點的內容。</description></item><item><term><see langword="Whitespace" /></term><description> 標記之間的泛空白字元。</description></item><item><term><see langword="XmlDeclaration" /></term><description> 宣告的內容。</description></item></list></returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlLang">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">取得目前的 <see langword="xml:lang" /> 範圍。</summary>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used for resolving external document type definition (DTD) and schema location references. The &lt;see langword=&quot;XmlResolver&quot; /&gt; is also used to handle any import or include elements found in XML Schema definition language (XSD) schemas.">設定 <see cref="T:System.Xml.XmlResolver" />，用於解析外部文件類型定義 (DTD) 和結構描述位置參考。 <see langword="XmlResolver" /> 也可用來處理在 XML 結構描述定義語言 (XSD) 結構描述中找到的任何 Import 或 Include 項目。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;XmlResolver&quot; /&gt; to use. If set to &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; In version 1.1 of the .NET Framework, the caller must be fully trusted to specify an &lt;see langword=&quot;XmlResolver&quot; /&gt;.">要使用的 <see langword="XmlResolver" />。 如果設定為 <see langword="null" />，就不會解析外部資源。  
  
在 .NET Framework 的 1.1 版中，必須完全信任呼叫端才能指定 <see langword="XmlResolver" />。</returns>
    </member>
    <member name="P:System.Xml.XmlValidatingReader.XmlSpace">
      <summary vsli:raw="Gets the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">取得目前的 <see langword="xml:space" /> 範圍。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; values. If no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists, this property defaults to &lt;see langword=&quot;XmlSpace.None&quot; /&gt;.">其中一個 <see cref="T:System.Xml.XmlSpace" /> 值。 如果 <see langword="xml:space" /> 範圍不存在，這個屬性預設值為 <see langword="XmlSpace.None" />。</returns>
    </member>
    <member name="T:System.Xml.XmlWhitespace">
      <summary vsli:raw="Represents white space in element content.">表示項目內容中的空白。</summary>
    </member>
    <member name="M:System.Xml.XmlWhitespace.#ctor(System.String,System.Xml.XmlDocument)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlWhitespace&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlWhitespace" /> 類別的新執行個體。</summary>
      <param name="strData" vsli:raw="The white space characters of the node.">節點的空白字元。</param>
      <param name="doc" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlDocument" /> 物件。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.CloneNode(System.Boolean)">
      <summary vsli:raw="Creates a duplicate of this node.">建立這個節點的複本。</summary>
      <param name="deep" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to recursively clone the subtree under the specified node; &lt;see langword=&quot;false&quot; /&gt; to clone only the node itself. For white space nodes, the cloned node always includes the data value, regardless of the parameter setting.">若要在指定的節點下遞迴地複製子樹狀結構，則為 <see langword="true" />；若只要複製節點本身，則為 <see langword="false" />。 對於空白節點，不論參數設定為何，複製的節點永遠會包含資料值。</param>
      <returns vsli:raw="The cloned node.">複製的節點。</returns>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteContentTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves all the children of the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將此節點的所有子系儲存到指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="M:System.Xml.XmlWhitespace.WriteTo(System.Xml.XmlWriter)">
      <summary vsli:raw="Saves the node to the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">將節點儲存至指定的 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to save.">要儲存的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
    </member>
    <member name="P:System.Xml.XmlWhitespace.LocalName">
      <summary vsli:raw="Gets the local name of the node.">取得節點的區域名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#whitespace&quot; /&gt;.">對於 <see langword="XmlWhitespace" /> 節點，這個屬性傳回 <see langword="#whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Name">
      <summary vsli:raw="Gets the qualified name of the node.">取得節點的限定名稱。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlWhitespace&quot; /&gt; nodes, this property returns &lt;see langword=&quot;#whitespace&quot; /&gt;.">對於 <see langword="XmlWhitespace" /> 節點，這個屬性傳回 <see langword="#whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.NodeType">
      <summary vsli:raw="Gets the type of the node.">取得節點的類型。</summary>
      <returns vsli:raw="For &lt;see langword=&quot;XmlWhitespace&quot; /&gt; nodes, the value is &lt;see cref=&quot;F:System.Xml.XmlNodeType.Whitespace&quot; /&gt;.">對於 <see langword="XmlWhitespace" /> 節點，值為 <see cref="F:System.Xml.XmlNodeType.Whitespace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.ParentNode">
      <summary vsli:raw="Gets the parent of the current node.">取得目前節點的父節點。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; parent node of the current node.">目前節點的 <see cref="T:System.Xml.XmlNode" /> 父節點。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.PreviousText">
      <summary vsli:raw="Gets the text node that immediately precedes this node.">取得這個節點的前置文字節點。</summary>
      <returns vsli:raw="Returns &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt;.">傳回 <see cref="T:System.Xml.XmlNode" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWhitespace.Value">
      <summary vsli:raw="Gets or sets the value of the node.">取得或設定節點的值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Setting &lt;see cref=&quot;P:System.Xml.XmlWhitespace.Value&quot; /&gt; to invalid white space characters.">將 <see cref="P:System.Xml.XmlWhitespace.Value" /> 設定為無效的空白字元。</exception>
      <returns vsli:raw="The white space characters found in the node.">節點中找到的空白字元。</returns>
    </member>
    <member name="T:System.Xml.XmlWriter">
      <summary vsli:raw="Represents a writer that provides a fast, non-cached, forward-only way to generate streams or files that contain XML data.">表示寫入器，其可提供快速、非快取的順向方法來產生含有 XML 資料之資料流或檔案。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlWriter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlWriter.Close">
      <summary vsli:raw="When overridden in a derived class, closes this stream and the underlying stream.">在衍生類別中覆寫時，關閉這個資料流和基礎資料流。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A call is made to write more output after &lt;see langword=&quot;Close&quot; /&gt; has been called or the result of this call is an invalid XML document.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在呼叫 <see langword="Close" /> 之後再進行呼叫以寫入更多輸出，或者這次呼叫的結果是無效的 XML 文件。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified stream.">使用指定的資料流，建立新的 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <param name="output" vsli:raw="The stream to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified stream.">要寫入其中的資料流。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stream&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the stream and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object.">使用資料流和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output" vsli:raw="The stream to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified stream.">要寫入其中的資料流。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的資料流。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stream&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlWriter" />，建立新 <see cref="T:System.IO.TextWriter" /> 執行個體。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">要寫入至其中的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;text&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; objects.">使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.IO.TextWriter" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; writes XML 1.0 text syntax and appends it to the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">要寫入至其中的 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.XmlWriter" /> 會寫入 XML 1.0 文字語法，並將其附加至指定的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;text&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="text" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified filename.">使用指定的檔名，建立新 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <param name="outputFileName" vsli:raw="The file to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; creates a file at the specified path and writes to it in XML 1.0 text syntax. The &lt;paramref name=&quot;outputFileName&quot; /&gt; must be a file system path.">要寫入其中的檔案。 <see cref="T:System.Xml.XmlWriter" /> 會於指定路徑建立檔案，並在 XML 1.0 文字語法中寫入它。 <paramref name="outputFileName" /> 必須是檔案系統路徑。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;url&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="url" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the filename and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object.">使用檔名和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="outputFileName" vsli:raw="The file to which you want to write. The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; creates a file at the specified path and writes to it in XML 1.0 text syntax. The &lt;paramref name=&quot;outputFileName&quot; /&gt; must be a file system path.">要寫入其中的檔案。 <see cref="T:System.Xml.XmlWriter" /> 會於指定路徑建立檔案，並在 XML 1.0 文字語法中寫入它。 <paramref name="outputFileName" /> 必須是檔案系統路徑。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;url&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="url" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XmlWriter" />，建立新 <see cref="T:System.Text.StringBuilder" /> 執行個體。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt; to which to write to. Content written by the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is appended to the &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt;.">要寫入至其中的 <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> 寫入的內容會附加至 <see cref="T:System.Text.StringBuilder" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;builder&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="builder" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; objects.">使用 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Text.StringBuilder" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt; to which to write to. Content written by the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is appended to the &lt;see cref=&quot;T:System.Text.StringBuilder&quot; /&gt;.">要寫入至其中的 <see cref="T:System.Text.StringBuilder" />。 <see cref="T:System.Xml.XmlWriter" /> 寫入的內容會附加至 <see cref="T:System.Text.StringBuilder" />。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;builder&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="builder" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">使用指定的 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that you want to use as the underlying writer.">您想要當做基礎寫入器使用的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that is wrapped around the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件，包裝於指定的 <see cref="T:System.Xml.XmlWriter" /> 物件附近。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance using the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; and &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; objects.">使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Xml.XmlWriter" /> 物件，建立新的 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體。</summary>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that you want to use as the underlying writer.">您想要當做基礎寫入器使用的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to configure the new &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance. If this is &lt;see langword=&quot;null&quot; /&gt;, a &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; with default settings is used.  &#xA;  &#xA; If the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; is being used with the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)&quot; /&gt; method, you should use the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property to obtain an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object with the correct settings. This ensures that the created &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object has the correct output settings.">用於設定新 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的 <see cref="T:System.Xml.XmlWriter" /> 物件。 如果是 <see langword="null" />，則會使用有預設值的 <see cref="T:System.Xml.XmlWriterSettings" />。  
  
如果 <see cref="T:System.Xml.XmlWriter" /> 正配合 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> 方法使用，您應該使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性，以取得有正確設定的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如此可確保所建立的 <see cref="T:System.Xml.XmlWriter" /> 物件具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;writer&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="writer" /> 值為 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object that is wrapped around the specified &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object.">
        <see cref="T:System.Xml.XmlWriter" /> 物件，包裝於指定的 <see cref="T:System.Xml.XmlWriter" /> 物件附近。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; class.">釋放 <see cref="T:System.Xml.XmlWriter" /> 類別目前的執行個體所使用的全部資源。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; and optionally releases the managed resources.">釋放 <see cref="T:System.Xml.XmlWriter" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.DisposeAsync">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously.">非同步執行與釋放 (Free)、釋放 (Release) 或重設 Unmanaged 資源相關聯之由應用程式定義的工作。</summary>
      <returns vsli:raw="A task that represents the asynchronous dispose operation.">代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.DisposeAsyncCore">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting managed resources asynchronously.">以非同步方式執行與釋放 (Free)、釋放 (Release) 或重設受控資源相關聯的應用程式定義工作。</summary>
      <returns vsli:raw="A task that represents the asynchronous dispose operation.">代表非同步處署作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.Flush">
      <summary vsli:raw="When overridden in a derived class, flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.">在衍生類別中覆寫時，將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.FlushAsync">
      <summary vsli:raw="Asynchronously flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.">以非同步的方式將緩衝區的所有內容清空至基礎資料流，然後清空基礎資料流。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;Flush&quot; /&gt; operation.">表示非同步 <see langword="Flush" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.LookupPrefix(System.String)">
      <summary vsli:raw="When overridden in a derived class, returns the closest prefix defined in the current namespace scope for the namespace URI.">在衍生類別中覆寫時，傳回最接近命名空間 URI 在目前命名空間範圍中定義的前置詞。</summary>
      <param name="ns" vsli:raw="The namespace URI whose prefix you want to find.">您要尋找其前置詞的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ns&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="ns" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The matching prefix or &lt;see langword=&quot;null&quot; /&gt; if no matching namespace URI is found in the current scope.">命名空間前置詞；如果在目前範圍中找不到符合的命名空間 URI，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, writes out all the attributes found at the current position in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">在衍生類別中覆寫時，寫出在 <see cref="T:System.Xml.XmlReader" /> 的目前位置找到的所有屬性。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; from which to copy the attributes.">要複製屬性的 <see langword="XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The reader is not positioned on an &lt;see langword=&quot;element&quot; /&gt;, &lt;see langword=&quot;attribute&quot; /&gt; or &lt;see langword=&quot;XmlDeclaration&quot; /&gt; node.">讀取器不在 <see langword="element" />、<see langword="attribute" /> 或 <see langword="XmlDeclaration" /> 節點上。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Asynchronously writes out all the attributes found at the current position in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">非同步寫出在 <see cref="T:System.Xml.XmlReader" /> 中的目前位置找到的所有屬性。</summary>
      <param name="reader" vsli:raw="The &lt;see langword=&quot;XmlReader&quot; /&gt; from which to copy the attributes.">要複製屬性的 <see langword="XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteAttributes&quot; /&gt; operation.">表示非同步 <see langword="WriteAttributes" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the attribute with the specified local name and value.">在衍生類別中覆寫時，寫出具有指定的區域名稱與數值的屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="value" vsli:raw="The value of the attribute.">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The state of writer is not &lt;see langword=&quot;WriteState.Element&quot; /&gt; or writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器的狀態不是 <see langword="WriteState.Element" />，或寫入器已關閉。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; or &lt;see langword=&quot;xml:lang&quot; /&gt; attribute value is invalid.">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes an attribute with the specified local name, namespace URI, and value.">在衍生類別中覆寫時，寫入具有指定區域名稱、命名空間 URI 和值的屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the attribute.">與屬性相關聯的命名空間 URI。</param>
      <param name="value" vsli:raw="The value of the attribute.">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The state of writer is not &lt;see langword=&quot;WriteState.Element&quot; /&gt; or writer is closed.&#xA;&#xA;-or-&#xA;        &#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器的狀態不是 <see langword="WriteState.Element" />，或寫入器已關閉。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; or &lt;see langword=&quot;xml:lang&quot; /&gt; attribute value is invalid.">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the attribute with the specified prefix, local name, namespace URI, and value.">在衍生類別中覆寫時，寫出具有指定的前置詞、區域名稱、命名空間 URI 及其值的屬性。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">屬性的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <param name="value" vsli:raw="The value of the attribute.">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The state of writer is not &lt;see langword=&quot;WriteState.Element&quot; /&gt; or writer is closed.&#xA;&#xA;-or-&#xA;        &#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器的狀態不是 <see langword="WriteState.Element" />，或寫入器已關閉。

-或- 
在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see langword=&quot;xml:space&quot; /&gt; or &lt;see langword=&quot;xml:lang&quot; /&gt; attribute value is invalid.">
        <see langword="xml:space" /> 或 <see langword="xml:lang" /> 屬性值無效。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; or &lt;paramref name=&quot;ns&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="localName" /> 或 <paramref name="ns" /> 為 <see langword="null" /></exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes out the attribute with the specified prefix, local name, namespace URI, and value.">以非同步的方式寫出具有指定之前置詞、區域名稱、命名空間 URI 和值的屬性。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">屬性的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <param name="value" vsli:raw="The value of the attribute.">屬性的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;    &#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或- 
在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteAttributeString&quot; /&gt; operation.">表示非同步 <see langword="WriteAttributeString" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, encodes the specified binary bytes as Base64 and writes out the resulting text.">在衍生類別中覆寫時，以 Base64 格式編碼指定的二進位位元組，並寫出產生的文字。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要編碼的位元組陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously encodes the specified binary bytes as Base64 and writes out the resulting text.">以非同步的方式將指定的二進位位元組編碼為 base64 並寫出產生的文字。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要編碼的位元組陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要寫入的位元組數。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteBase64&quot; /&gt; operation.">表示非同步 <see langword="WriteBase64" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, encodes the specified binary bytes as &lt;see langword=&quot;BinHex&quot; /&gt; and writes out the resulting text.">在衍生類別中覆寫時，以 <see langword="BinHex" /> 格式編碼指定的二進位位元組，並寫出產生的文字。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要編碼的位元組陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要寫入的位元組數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed or in error state.&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器的狀態為關閉或錯誤。
-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously encodes the specified binary bytes as &lt;see langword=&quot;BinHex&quot; /&gt; and writes out the resulting text.">以非同步的方式將指定的二進位位元組編碼為 <see langword="BinHex" /> 並寫出產生的文字。</summary>
      <param name="buffer" vsli:raw="Byte array to encode.">要編碼的位元組陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the bytes to write.">緩衝區中的位置指示要寫入的位元組開頭。</param>
      <param name="count" vsli:raw="The number of bytes to write.">要寫入的位元組數。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteBinHex&quot; /&gt; operation.">表示非同步 <see langword="WriteBinHex" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCData(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a &amp;lt;![CDATA[...]]&amp;gt; block containing the specified text.">在衍生類別中覆寫時，寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
      <param name="text" vsli:raw="The text to place inside the CDATA block.">要放在 CDATA 區塊中的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.">此文字會導致非語式正確的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out a &amp;lt;![CDATA[...]]&amp;gt; block containing the specified text.">以非同步的方式寫出包含指定文字的 &lt;![CDATA[...]]&gt; 區塊。</summary>
      <param name="text" vsli:raw="The text to place inside the CDATA block.">要放在 CDATA 區塊中的文字。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteCData&quot; /&gt; operation.">表示非同步 <see langword="WriteCData" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)">
      <summary vsli:raw="When overridden in a derived class, forces the generation of a character entity for the specified Unicode character value.">在衍生類別中覆寫時，強制產生指定之 Unicode 字元值的字元實體。</summary>
      <param name="ch" vsli:raw="The Unicode character for which to generate a character entity.">要產生字元實體的 Unicode 字元。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The character is in the surrogate pair character range, &lt;see langword=&quot;0xd800&quot; /&gt; - &lt;see langword=&quot;0xdfff&quot; /&gt;.">字元位在 Surrogate 字組字元範圍 <see langword="0xd800" /> - <see langword="0xdfff" /> 中。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)">
      <summary vsli:raw="Asynchronously forces the generation of a character entity for the specified Unicode character value.">以非同步的方式強制產生指定的 Unicode 字元值的字元實體。</summary>
      <param name="ch" vsli:raw="The Unicode character for which to generate a character entity.">要產生字元實體的 Unicode 字元。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteCharEntity&quot; /&gt; operation.">表示非同步 <see langword="WriteCharEntity" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, writes text one buffer at a time.">在衍生類別中覆寫時，一次將文字寫入一個緩衝區。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">包含要寫入之文字的字元陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the text to write.">緩衝區中的位置指示要寫入的文字開頭。</param>
      <param name="count" vsli:raw="The number of characters to write.">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;; the call results in surrogate pair characters being split or an invalid surrogate pair being written.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
緩衝區長度減去 <paramref name="index" /> 小於 <paramref name="count" />；這個呼叫會導致 Surrogate 字組字元被分隔或寫入無效的 Surrogate 字組。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;buffer&quot; /&gt; parameter value is not valid.">
        <paramref name="buffer" /> 參數值無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously writes text one buffer at a time.">以非同步的方式一次將文字寫入一個緩衝區。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">包含要寫入之文字的字元陣列。</param>
      <param name="index" vsli:raw="The position in the buffer indicating the start of the text to write.">緩衝區中的位置指示要寫入的文字開頭。</param>
      <param name="count" vsli:raw="The number of characters to write.">要寫入的字元數。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteChars&quot; /&gt; operation.">表示非同步 <see langword="WriteChars" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteComment(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a comment &amp;lt;!--...--&amp;gt; containing the specified text.">在衍生類別中覆寫時，寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
      <param name="text" vsli:raw="Text to place inside the comment.">要放入註解中的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well-formed XML document.">此文字會導致非語式正確的 XML 文件。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out a comment &amp;lt;!--...--&amp;gt; containing the specified text.">以非同步的方式寫出包含指定文字的註解 &lt;!--...--&gt;。</summary>
      <param name="text" vsli:raw="Text to place inside the comment.">要放入註解中的文字。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteComment&quot; /&gt; operation.">表示非同步 <see langword="WriteComment" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the DOCTYPE declaration with the specified name and optional attributes.">在衍生類別中覆寫時，寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
      <param name="name" vsli:raw="The name of the DOCTYPE. This must be non-empty.">DOCTYPE 名稱。 這必須不是空白的。</param>
      <param name="pubid" vsli:raw="If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where &lt;paramref name=&quot;pubid&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; are replaced with the value of the given arguments.">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <paramref name="pubid" /> 與 <paramref name="sysid" /> 會替換為指定之引數的值。</param>
      <param name="sysid" vsli:raw="If &lt;paramref name=&quot;pubid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; is non-null it writes SYSTEM &quot;sysid&quot; where &lt;paramref name=&quot;sysid&quot; /&gt; is replaced with the value of this argument.">如果 <paramref name="pubid" /> 是 <see langword="null" />，而 <paramref name="sysid" /> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <paramref name="sysid" /> 會由這個引數的值所取代。</param>
      <param name="subset" vsli:raw="If non-null it writes [subset] where subset is replaced with the value of this argument.">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called outside the prolog (after the root element).&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">從初構的外部 (在根項目之後) 呼叫這個方法。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The value for &lt;paramref name=&quot;name&quot; /&gt; would result in invalid XML.">
        <paramref name="name" /> 的值將導致無效的 XML。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes the DOCTYPE declaration with the specified name and optional attributes.">以非同步的方式寫入具有指定名稱與選擇性屬性的 DOCTYPE 宣告。</summary>
      <param name="name" vsli:raw="The name of the DOCTYPE. This must be non-empty.">DOCTYPE 名稱。 這必須不是空白的。</param>
      <param name="pubid" vsli:raw="If non-null it also writes PUBLIC &quot;pubid&quot; &quot;sysid&quot; where &lt;paramref name=&quot;pubid&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; are replaced with the value of the given arguments.">如果為非 null，它也會寫入 PUBLIC "pubid" "sysid"，其中 <paramref name="pubid" /> 與 <paramref name="sysid" /> 會替換為指定之引數的值。</param>
      <param name="sysid" vsli:raw="If &lt;paramref name=&quot;pubid&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; and &lt;paramref name=&quot;sysid&quot; /&gt; is non-null it writes SYSTEM &quot;sysid&quot; where &lt;paramref name=&quot;sysid&quot; /&gt; is replaced with the value of this argument.">如果 <paramref name="pubid" /> 是 <see langword="null" />，而 <paramref name="sysid" /> 為非 null，則它會寫入 SYSTEM "sysid"，其中 <paramref name="sysid" /> 會由這個引數的值所取代。</param>
      <param name="subset" vsli:raw="If non-null it writes [subset] where subset is replaced with the value of this argument.">如果非 Null，它會寫入 [subset]，其中 subset 由這個引數的值來替代。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteDocType&quot; /&gt; operation.">表示非同步 <see langword="WriteDocType" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)">
      <summary vsli:raw="Writes an element with the specified local name and value.">寫入具有指定之區域名稱和值的項目。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="value" vsli:raw="The value of the element.">項目的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter values are not valid.">
        <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
  
-或- 
參數值無效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)">
      <summary vsli:raw="Writes an element with the specified local name, namespace URI, and value.">寫入具有指定之區域名稱、命名空間 URI 和值的項目。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element.">與項目相關聯的命名空間 URI。</param>
      <param name="value" vsli:raw="The value of the element.">項目的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter values are not valid.">
        <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
  
-或- 
參數值無效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Writes an element with the specified prefix, local name, namespace URI, and value.">寫入具有指定的前置詞、區域名稱、命名空間 URI 和值的項目。</summary>
      <param name="prefix" vsli:raw="The prefix of the element.">項目的前置詞。</param>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <param name="value" vsli:raw="The value of the element.">項目的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;localName&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parameter values are not valid.">
        <paramref name="localName" /> 值為 <see langword="null" /> 或空字串。  
  
-或- 
參數值無效。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes an element with the specified prefix, local name, namespace URI, and value.">以非同步的方式寫入具有指定之前置詞、區域名稱、命名空間 URI 和值的項目。</summary>
      <param name="prefix" vsli:raw="The prefix of the element.">項目的前置詞。</param>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <param name="value" vsli:raw="The value of the element.">項目的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteElementString&quot; /&gt; operation.">表示非同步 <see langword="WriteElementString" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttribute">
      <summary vsli:raw="When overridden in a derived class, closes the previous &lt;see cref=&quot;M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)&quot; /&gt; call.">在衍生類別中覆寫時，會關閉先前的 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼叫。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndAttributeAsync">
      <summary vsli:raw="Asynchronously closes the previous &lt;see cref=&quot;M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)&quot; /&gt; call.">非同步關閉上一個 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼叫。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEndAttribute&quot; /&gt; operation.">表示非同步 <see langword="WriteEndAttribute" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocument">
      <summary vsli:raw="When overridden in a derived class, closes any open elements or attributes and puts the writer back in the Start state.">在衍生類別中覆寫時，關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The XML document is invalid.">XML 文件無效。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndDocumentAsync">
      <summary vsli:raw="Asynchronously closes any open elements or attributes and puts the writer back in the Start state.">以非同步的方式關閉任何開啟的項目或屬性，並將寫入器回復開始狀態。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEndDocument&quot; /&gt; operation.">表示非同步 <see langword="WriteEndDocument" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElement">
      <summary vsli:raw="When overridden in a derived class, closes one element and pops the corresponding namespace scope.">在衍生類別中覆寫時，關閉一個項目並取出對應的命名空間範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This results in an invalid XML document.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">這會導致無效的 XML 文件。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEndElementAsync">
      <summary vsli:raw="Asynchronously closes one element and pops the corresponding namespace scope.">以非同步的方式關閉一個項目並取出對應的命名空間範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEndElement&quot; /&gt; operation.">表示非同步 <see langword="WriteEndElement" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRef(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out an entity reference as &lt;see langword=&quot;&amp;amp;name;&quot; /&gt;.">在衍生類別中覆寫時，寫出如 <see langword="&amp;name;" /> 的實體參考。</summary>
      <param name="name" vsli:raw="The name of the entity reference.">實體參考的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out an entity reference as &lt;see langword=&quot;&amp;amp;name;&quot; /&gt;.">以非同步的方式將實體參考寫出為 <see langword="&amp;name;" />。</summary>
      <param name="name" vsli:raw="The name of the entity reference.">實體參考的名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteEntityRef&quot; /&gt; operation.">表示非同步 <see langword="WriteEntityRef" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElement">
      <summary vsli:raw="When overridden in a derived class, closes one element and pops the corresponding namespace scope.">在衍生類別中覆寫時，關閉一個項目並取出對應的命名空間範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteFullEndElementAsync">
      <summary vsli:raw="Asynchronously closes one element and pops the corresponding namespace scope.">以非同步的方式關閉一個項目並取出對應的命名空間範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteFullEndElement&quot; /&gt; operation.">表示非同步 <see langword="WriteFullEndElement" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteName(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">當覆寫衍生類別時，請寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效名稱。</summary>
      <param name="name" vsli:raw="The name to write.">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid XML name; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> 不是有效的 XML 名稱，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNameAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">非同步地寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效名稱。</summary>
      <param name="name" vsli:raw="The name to write.">要寫入的名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteName&quot; /&gt; operation.">表示非同步 <see langword="WriteName" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmToken(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">當覆寫衍生類別時，請寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效 NmToken。</summary>
      <param name="name" vsli:raw="The name to write.">要寫入的名稱。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not a valid NmToken; or &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="name" /> 不是有效的 NmToken，或者 <paramref name="name" /> 是 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out the specified name, ensuring it is a valid NmToken according to the W3C XML 1.0 recommendation (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).">非同步地寫出指定的名稱，以確保它是符合 W3C XML 1.0 建議 (https://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) \(英文\) 的有效 NmToken。</summary>
      <param name="name" vsli:raw="The name to write.">要寫入的名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteNmToken&quot; /&gt; operation.">表示非同步 <see langword="WriteNmToken" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, copies everything from the reader to the writer and moves the reader to the start of the next sibling.">在衍生類別中覆寫時，從讀取器複製所有內容至寫入器，並將讀取器移至下一個同層級 (Sibling) 的開頭。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to read from.">要從其中讀取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reader" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;reader&quot; /&gt; contains invalid characters.">
        <paramref name="reader" /> 包含無效的字元。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary vsli:raw="Copies everything from the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object to the writer. The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; remains unchanged.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的所有項目複製到寫入器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不變。</summary>
      <param name="navigator" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to copy from.">要複製的來源 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示複製預設屬性，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;navigator&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="navigator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)">
      <summary vsli:raw="Asynchronously copies everything from the reader to the writer and moves the reader to the start of the next sibling.">以非同步的方式從讀取器複製所有內容至寫入器，並將讀取器移至下一個同層級 (Sibling) 的開頭。</summary>
      <param name="reader" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; to read from.">要從其中讀取的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes from the &lt;see langword=&quot;XmlReader&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要從 <see langword="true" /> 複製預設屬性，則為 <see langword="XmlReader" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteNode&quot; /&gt; operation.">表示非同步 <see langword="WriteNode" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)">
      <summary vsli:raw="Asynchronously copies everything from the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object to the writer. The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; remains unchanged.">以非同步方式將所有項目從 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件複製到寫入器。 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置保持不變。</summary>
      <param name="navigator" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to copy from.">要複製的來源 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="defattr" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to copy the default attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示複製預設屬性，否則為 <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteNode&quot; /&gt; operation.">表示非同步 <see langword="WriteNode" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.">在衍生類別中覆寫時，寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name" vsli:raw="The name of the processing instruction.">處理指示的名稱。</param>
      <param name="text" vsli:raw="The text to include in the processing instruction.">要包含在處理指示中的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text would result in a non-well formed XML document.  &#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; This method is being used to create an XML declaration after &lt;see cref=&quot;M:System.Xml.XmlWriter.WriteStartDocument&quot; /&gt; has already been called.">此文字會導致非語式正確的 XML 文件。  
  
 <paramref name="name" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
在呼叫 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> 之後，使用這個方法來建立 XML 宣告。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)">
      <summary vsli:raw="Asynchronously writes out a processing instruction with a space between the name and text as follows: &amp;lt;?name text?&amp;gt;.">以非同步方式寫出名稱與文字之間有空白的處理指示，如下所示：&lt;?name text?&gt;。</summary>
      <param name="name" vsli:raw="The name of the processing instruction.">處理指示的名稱。</param>
      <param name="text" vsli:raw="The text to include in the processing instruction.">要包含在處理指示中的文字。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteProcessingInstruction&quot; /&gt; operation.">表示非同步 <see langword="WriteProcessingInstruction" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">在衍生類別中覆寫時，寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
      <param name="localName" vsli:raw="The local name to write.">要寫入的區域名稱。</param>
      <param name="ns" vsli:raw="The namespace URI for the name.">這個名稱的命名空間 URI。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;localName&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;localName&quot; /&gt; is not a valid name.">
        <paramref name="localName" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。  
  
 <paramref name="localName" /> 不是有效的名稱。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)">
      <summary vsli:raw="Asynchronously writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.">以非同步的方式寫出命名空間限定名稱。 這個方法會查詢在指定之命名空間範圍中的前置詞。</summary>
      <param name="localName" vsli:raw="The local name to write.">要寫入的區域名稱。</param>
      <param name="ns" vsli:raw="The namespace URI for the name.">這個名稱的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteQualifiedName&quot; /&gt; operation.">表示非同步 <see langword="WriteQualifiedName" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="When overridden in a derived class, writes raw markup manually from a character buffer.">在衍生類別中覆寫時，從字元緩衝區手動寫入未經處理的標記。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">包含要寫入之文字的字元陣列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the text to write.">緩衝區中指示要寫入的文字開頭的位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">要寫入的字元數。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The buffer length minus &lt;paramref name=&quot;index&quot; /&gt; is less than &lt;paramref name=&quot;count&quot; /&gt;.">
        <paramref name="index" /> 或 <paramref name="count" /> 小於零。  
  
-或- 
緩衝區長度減去 <paramref name="index" /> 會小於 <paramref name="count" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRaw(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes raw markup manually from a string.">在衍生類別中覆寫時，從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
      <param name="data" vsli:raw="String containing the text to write.">包含要寫入之文字的字串。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;data&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or &lt;see langword=&quot;String.Empty&quot; /&gt;.">
        <paramref name="data" /> 為 <see langword="null" /> 或 <see langword="String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Asynchronously writes raw markup manually from a character buffer.">以非同步的方式從字元緩衝區手動寫入未經處理的標記。</summary>
      <param name="buffer" vsli:raw="Character array containing the text to write.">包含要寫入之文字的字元陣列。</param>
      <param name="index" vsli:raw="The position within the buffer indicating the start of the text to write.">緩衝區中指示要寫入的文字開頭的位置。</param>
      <param name="count" vsli:raw="The number of characters to write.">要寫入的字元數。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteRaw&quot; /&gt; operation.">表示非同步 <see langword="WriteRaw" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteRawAsync(System.String)">
      <summary vsli:raw="Asynchronously writes raw markup manually from a string.">以非同步的方式從字串手動寫入未經處理的標記 (Raw Markup)。</summary>
      <param name="data" vsli:raw="String containing the text to write.">包含要寫入之文字的字串。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteRaw&quot; /&gt; operation.">表示非同步 <see langword="WriteRaw" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)">
      <summary vsli:raw="Writes the start of an attribute with the specified local name.">寫入具有指定之區域名稱的屬性開頭。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器已關閉。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)">
      <summary vsli:raw="Writes the start of an attribute with the specified local name and namespace URI.">寫入具有指定之區域名稱和命名空間 URI 之屬性的開頭。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the start of an attribute with the specified prefix, local name, and namespace URI.">在衍生類別中覆寫時，寫入具有指定的前置詞、區域名稱和命名空間 URI 之屬性的開頭。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">屬性的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI for the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes the start of an attribute with the specified prefix, local name, and namespace URI.">以非同步的方式寫入具有指定之前置詞、本機名稱和命名空間 URI 之屬性的開頭。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the attribute.">屬性的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI for the attribute.">屬性的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartAttribute&quot; /&gt; operation.">表示非同步 <see langword="WriteStartAttribute" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument">
      <summary vsli:raw="When overridden in a derived class, writes the XML declaration with the version &quot;1.0&quot;.">在衍生類別中覆寫時，使用「1.0」版寫入 XML 宣告。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">這不是在建構函式之後呼叫的第一個寫入方法。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.">在衍生類別中覆寫時，使用「1.0」版寫入 XML 宣告與獨立屬性。</summary>
      <param name="standalone" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, it writes &quot;standalone=yes&quot;; if &lt;see langword=&quot;false&quot; /&gt;, it writes &quot;standalone=no&quot;.">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This is not the first write method called after the constructor.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">這不是在建構函式之後呼叫的第一個寫入方法。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync">
      <summary vsli:raw="Asynchronously writes the XML declaration with the version &quot;1.0&quot;.">以非同步的方式使用「1.0」版寫入 XML 宣告。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartDocument&quot; /&gt; operation.">表示非同步 <see langword="WriteStartDocument" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)">
      <summary vsli:raw="Asynchronously writes the XML declaration with the version &quot;1.0&quot; and the standalone attribute.">以非同步的方式使用「1.0」版寫入 XML 宣告與獨立屬性。</summary>
      <param name="standalone" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, it writes &quot;standalone=yes&quot;; if &lt;see langword=&quot;false&quot; /&gt;, it writes &quot;standalone=no&quot;.">如果 <see langword="true" />，它會寫入「standalone=yes」；如果 <see langword="false" />，它會寫入「standalone=no」。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartDocument&quot; /&gt; operation.">表示非同步 <see langword="WriteStartDocument" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out a start tag with the specified local name.">在衍生類別中覆寫時，寫出具有指定之區域名稱的開頭標記。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器已關閉。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the specified start tag and associates it with the given namespace.">在衍生類別中覆寫時，寫入指定的開頭標記並與指定的命名空間產生關聯。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element. If this namespace is already in scope and has an associated prefix, the writer automatically writes that prefix also.">與項目相關聯的命名空間 URI。 如果這個命名空間已經在範圍中並具有相關聯的前置詞，則寫入器也會自動寫入前置詞。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器已關閉。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the specified start tag and associates it with the given namespace and prefix.">在衍生類別中覆寫時，寫入指定的開頭標記，並與指定的命名空間與前置詞產生關聯。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the element.">項目的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element.">與項目相關聯的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器已關閉。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <exception cref="T:System.Text.EncoderFallbackException" vsli:raw="There is a character in the buffer that is a valid XML character but is not valid for the output encoding. For example, if the output encoding is ASCII, you should only use characters from the range of 0 to 127 for element and attribute names. The invalid character might be in the argument of this method or in an argument of previous methods that were writing to the buffer. Such characters are escaped by character entity references when possible (for example, in text nodes or attribute values). However, the character entity reference is not allowed in element and attribute names, comments, processing instructions, or CDATA sections.">緩衝區中有一個字元，其為有效的 XML 字元，但對輸出編碼而言無效。 比方說如果輸出的編碼方式為 ASCII，您應該在項目與屬性名稱中只使用範圍從 0 至 127 的字元。 無效的字元可能是在這個方法的引數中，或在先前已寫入至緩衝區的方法的引數中。 字元實體參考會盡可能逸出這類字元 (比方說在文字節點或屬性值中)。 不過，在項目與屬性名稱、註解、處理指示或 CDATA 區段中不允許字元實體參考。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)">
      <summary vsli:raw="Asynchronously writes the specified start tag and associates it with the given namespace and prefix.">以非同步的方式寫入指定的開頭標記，並將它與指定的命名空間與前置詞產生關聯。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the element.">項目的命名空間前置詞。</param>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="ns" vsli:raw="The namespace URI to associate with the element.">與項目相關聯的命名空間 URI。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteStartElement&quot; /&gt; operation.">表示非同步 <see langword="WriteStartElement" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteString(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes the given text content.">在衍生類別中覆寫時，寫入指定的文字內容。</summary>
      <param name="text" vsli:raw="The text to write.">要寫入的文字。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The text string contains an invalid surrogate pair.">文字字串包含無效的 Surrogate 字組。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteStringAsync(System.String)">
      <summary vsli:raw="Asynchronously writes the given text content.">以非同步的方式寫入指定的文字內容。</summary>
      <param name="text" vsli:raw="The text to write.">要寫入的文字。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteString&quot; /&gt; operation.">表示非同步 <see langword="WriteString" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
      <summary vsli:raw="When overridden in a derived class, generates and writes the surrogate character entity for the surrogate character pair.">在衍生類別中覆寫時，產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
      <param name="lowChar" vsli:raw="The low surrogate. This must be a value between 0xDC00 and 0xDFFF.">低 Surrogate。 這必須是一個介於 0xDC00 和 0xDFFF 之間的值。</param>
      <param name="highChar" vsli:raw="The high surrogate. This must be a value between 0xD800 and 0xDBFF.">高 Surrogate。 這必須一個是介於 0xD800 和 0xDBFF 之間的值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid surrogate character pair was passed.">傳送無效的 Surrogate 字元字組。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)">
      <summary vsli:raw="Asynchronously generates and writes the surrogate character entity for the surrogate character pair.">以非同步的方式產生和寫入 Surrogate 字元字組的 Surrogate 字元實體。</summary>
      <param name="lowChar" vsli:raw="The low surrogate. This must be a value between 0xDC00 and 0xDFFF.">低 Surrogate。 這必須是一個介於 0xDC00 和 0xDFFF 之間的值。</param>
      <param name="highChar" vsli:raw="The high surrogate. This must be a value between 0xD800 and 0xDBFF.">高 Surrogate。 這必須一個是介於 0xD800 和 0xDBFF 之間的值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteSurrogateCharEntity&quot; /&gt; operation.">表示非同步 <see langword="WriteSurrogateCharEntity" /> 作業的工作。</returns>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Boolean)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value.">寫入 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value to write.">要寫入的 <see cref="T:System.Boolean" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTime)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value.">寫入 <see cref="T:System.DateTime" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTime&quot; /&gt; value to write.">要寫入的 <see cref="T:System.DateTime" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value.">寫入 <see cref="T:System.DateTimeOffset" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; value to write.">要寫入的 <see cref="T:System.DateTimeOffset" /> 值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Decimal)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value.">寫入 <see cref="T:System.Decimal" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Decimal&quot; /&gt; value to write.">要寫入的 <see cref="T:System.Decimal" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value.">寫入 <see cref="T:System.Double" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Double&quot; /&gt; value to write.">要寫入的 <see cref="T:System.Double" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int32)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Int32&quot; /&gt; value.">寫入 <see cref="T:System.Int32" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Int32&quot; /&gt; value to write.">要寫入的 <see cref="T:System.Int32" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Int64)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Int64&quot; /&gt; value.">寫入 <see cref="T:System.Int64" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Int64&quot; /&gt; value to write.">要寫入的 <see cref="T:System.Int64" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Object)">
      <summary vsli:raw="Writes the object value.">寫入物件值。</summary>
      <param name="value" vsli:raw="The object value to write.  &#xA;  &#xA; Note With the release of the .NET Framework 3.5, this method accepts &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; as a parameter.">要寫入的物件值。  
  
 附註：使用 .NET Framework 3.5 的版本時，這個方法會接受 <see cref="T:System.DateTimeOffset" /> 作為參數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The writer is closed or in error state.&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">寫入器的狀態為關閉或錯誤。

-或-

在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.Single)">
      <summary vsli:raw="Writes a single-precision floating-point number.">寫入單精確度浮點數。</summary>
      <param name="value" vsli:raw="The single-precision floating-point number to write.">要寫入的單精確度浮點數。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteValue(System.String)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.String&quot; /&gt; value.">寫入 <see cref="T:System.String" /> 值。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to write.">要寫入的 <see cref="T:System.String" /> 值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An invalid value was specified.">指定了無效的值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespace(System.String)">
      <summary vsli:raw="When overridden in a derived class, writes out the given white space.">在衍生類別中覆寫時，寫出指定的空白字元。</summary>
      <param name="ws" vsli:raw="The string of white space characters.">空白字元的字串。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The string contains non-white space characters.">字串包含非泛空白字元。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
    </member>
    <member name="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)">
      <summary vsli:raw="Asynchronously writes out the given white space.">以非同步的方式寫出指定的空白字元。</summary>
      <param name="ws" vsli:raw="The string of white space characters.">空白字元的字串。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;&#xA;&#xA;-or-&#xA;&#xA;An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; asynchronous method was called without setting the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Async&quot; /&gt; flag to &lt;see langword=&quot;true&quot; /&gt;. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;Set XmlWriterSettings.Async to true if you want to use Async Methods.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。

-或-

在未將 <see cref="P:System.Xml.XmlWriterSettings.Async" /> 旗標設為 <see langword="true" />的情況下呼叫了 <see cref="T:System.Xml.XmlWriter" /> 非同步方法。 在此情況下，就會擲回 <see cref="T:System.InvalidOperationException" /> 並顯示訊息「如果您要使用非同步方法，請將 XmlWriterSettings.Async 設為 true」。</exception>
      <returns vsli:raw="The task that represents the asynchronous &lt;see langword=&quot;WriteWhitespace&quot; /&gt; operation.">表示非同步 <see langword="WriteWhitespace" /> 作業的工作。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.Settings">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to create this &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance.">取得 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，用於建立這個 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object used to create this writer instance. If this writer was not created using the &lt;see cref=&quot;Overload:System.Xml.XmlWriter.Create&quot; /&gt; method, this property returns &lt;see langword=&quot;null&quot; /&gt;.">用於建立這個寫入器執行個體的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。 如果未使用 <see cref="Overload:System.Xml.XmlWriter.Create" /> 方法建立這個寫入器，則這個屬性會傳回 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.WriteState">
      <summary vsli:raw="When overridden in a derived class, gets the state of the writer.">在衍生類別中覆寫時，取得寫入器的狀態。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.WriteState&quot; /&gt; values.">其中一個 <see cref="T:System.Xml.WriteState" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlLang">
      <summary vsli:raw="When overridden in a derived class, gets the current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">當在衍生類別中覆寫時，取得目前<see langword="xml:lang" />範圍。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="The current &lt;see langword=&quot;xml:lang&quot; /&gt; scope.">目前的 <see langword="xml:lang" /> 範圍。</returns>
    </member>
    <member name="P:System.Xml.XmlWriter.XmlSpace">
      <summary vsli:raw="When overridden in a derived class, gets an &lt;see cref=&quot;T:System.Xml.XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.">在衍生類別中覆寫時，取得表示目前 <see langword="xml:space" /> 範圍的 <see cref="T:System.Xml.XmlSpace" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; method was called before a previous asynchronous operation finished. In this case, &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown with the message &quot;An asynchronous operation is already in progress.&quot;">在先前的非同步作業完成前呼叫了 <see cref="T:System.Xml.XmlWriter" /> 方法。 在此情況下，會擲回 <see cref="T:System.InvalidOperationException" /> 與「非同步作業已經在進行中」的訊息。</exception>
      <returns vsli:raw="An &lt;see langword=&quot;XmlSpace&quot; /&gt; representing the current &lt;see langword=&quot;xml:space&quot; /&gt; scope.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;None&quot; /&gt;&lt;/term&gt;&lt;description&gt; This is the default if no &lt;see langword=&quot;xml:space&quot; /&gt; scope exists.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Default&quot; /&gt;&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;default&quot;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt;&lt;see langword=&quot;Preserve&quot; /&gt;&lt;/term&gt;&lt;description&gt; The current scope is &lt;see langword=&quot;xml:space&quot; /&gt;=&quot;preserve&quot;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">
        <see langword="XmlSpace" />，表示目前的 <see langword="xml:space" /> 範圍。  
  
 <list type="table"><listheader><term> 值</term><description> 意義</description></listheader><item><term><see langword="None" /></term><description> 如果 <see langword="xml:space" /> 範圍不存在，這是預設值。</description></item><item><term><see langword="Default" /></term><description> 目前的範圍為 <see langword="xml:space" />="default"。</description></item><item><term><see langword="Preserve" /></term><description> 目前的範圍為 <see langword="xml:space" />="preserve"。</description></item></list></returns>
    </member>
    <member name="T:System.Xml.XmlWriterSettings">
      <summary vsli:raw="Specifies a set of features to support on the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object created by the &lt;see cref=&quot;Overload:System.Xml.XmlWriter.Create&quot; /&gt; method.">指定要在由 <see cref="T:System.Xml.XmlWriter" /> 方法建立的 <see cref="Overload:System.Xml.XmlWriter.Create" /> 物件上支援的一組功能。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XmlWriterSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Clone">
      <summary vsli:raw="Creates a copy of the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; instance.">建立 <see cref="T:System.Xml.XmlWriterSettings" /> 執行個體的複本。</summary>
      <returns vsli:raw="The cloned &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object.">複製的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XmlWriterSettings.Reset">
      <summary vsli:raw="Resets the members of the settings class to their default values.">將設定類別的成員重設為其預設值。</summary>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Async">
      <summary vsli:raw="Gets or sets a value that indicates whether asynchronous &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; methods can be used on a particular &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; instance.">取得或設定值，指出非同步 <see cref="T:System.Xml.XmlWriter" /> 方法是否可以用於特定 <see cref="T:System.Xml.XmlWriter" /> 執行個體。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if asynchronous methods can be used; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以使用非同步方法，則為 <see langword="true" />，否則為<see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CheckCharacters">
      <summary vsli:raw="Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the &quot;2.2 Characters&quot; section of the W3C XML 1.0 Recommendation.">取得或設定值，這個值表示 XML 寫入器是否應該檢查以確定文件中的所有字元都符合 W3C XML 1.0 Recommendation 中的 "2.2 Characters" 一節。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to do character checking; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 表示執行字元檢查，否則為 <see langword="false" />。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.CloseOutput">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; should also close the underlying stream or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; when the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method is called.">取得或設定值，指出呼叫 <see cref="T:System.Xml.XmlWriter" /> 方法時，<see cref="T:System.IO.TextWriter" /> 是否也應該關閉基礎資料流或 <see cref="M:System.Xml.XmlWriter.Close" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to also close the underlying stream or &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示也關閉基礎資料流或 <see cref="T:System.IO.TextWriter" />，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.ConformanceLevel">
      <summary vsli:raw="Gets or sets the level of conformance that the XML writer checks the XML output for.">取得或設定 XML 寫入器檢查 XML 輸出的一致性層級。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the level of conformance (document, fragment, or automatic detection). The default is &lt;see cref=&quot;F:System.Xml.ConformanceLevel.Document&quot; /&gt;.">其中一個指定一致性層級 (文件、片段或自動偵測) 的列舉值。 預設為 <see cref="F:System.Xml.ConformanceLevel.Document" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; does not escape URI attributes.">取得或設定值，這個值會指出 <see cref="T:System.Xml.XmlWriter" /> 是否不會逸出 URI 屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; does not escape URI attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果未 <see cref="T:System.Xml.XmlWriter" /> ESCAPE URI 屬性，則為，否則為 <see langword="false" /> 。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Encoding">
      <summary vsli:raw="Gets or sets the type of text encoding to use.">取得或設定要使用的文字編碼方式類型。</summary>
      <returns vsli:raw="The text encoding to use. The default is &lt;see langword=&quot;Encoding.UTF8&quot; /&gt;.">要使用的文字編碼方式。 預設為 <see langword="Encoding.UTF8" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.Indent">
      <summary vsli:raw="Gets or sets a value indicating whether to indent elements.">取得或設定值，指出是否要縮排項目。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write individual elements on new lines and indent; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示在新行和縮排上寫入個別項目，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.IndentChars">
      <summary vsli:raw="Gets or sets the character string to use when indenting. This setting is used when the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.Indent&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt;.">取得或設定縮排時使用的字元字串。 當 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 屬性設為 <see langword="true" /> 時會使用這項設定。</summary>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value assigned to the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.IndentChars&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">指派至 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> 的值為 <see langword="null" />。</exception>
      <returns vsli:raw="The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.">縮排時使用的字元字串。 它可以設為任何字串值。 不過，若要確保有效的 XML，您應該只指定有效的空白字元 (例如，空格字元、定位字元、歸位字元或換行符號)。 預設值為兩個空格。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NamespaceHandling">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.">取得或設定值，這個值表示 <see cref="T:System.Xml.XmlWriter" /> 是否應該在寫入 XML 內容時移除重複的命名空間宣告。 預設行為是讓寫入器輸出寫入器命名空間解析程式中出現的所有命名空間宣告。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.NamespaceHandling&quot; /&gt; enumeration used to specify whether to remove duplicate namespace declarations in the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">
        <see cref="T:System.Xml.NamespaceHandling" /> 列舉型別，用來指定是否要移除 <see cref="T:System.Xml.XmlWriter" /> 中的重複命名空間宣告。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineChars">
      <summary vsli:raw="Gets or sets the character string to use for line breaks.">取得或設定用於分行符號的字元字串。</summary>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value assigned to the &lt;see cref=&quot;P:System.Xml.XmlWriterSettings.NewLineChars&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">指派至 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> 的值為 <see langword="null" />。</exception>
      <returns vsli:raw="The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is &lt;c&gt;\r\n&lt;/c&gt; (carriage return, new line) for non-Unix platforms, and &lt;c&gt;\n&lt;/c&gt; (new line) for Unix platforms.">用於分行符號的字元字串。 它可以設為任何字串值。 不過，若要確保有效的 XML，您應該只指定有效的空白字元 (例如，空格字元、定位字元、歸位字元或換行符號)。 預設值為 <c>\r\n</c> (換行字元、換行) 。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineHandling">
      <summary vsli:raw="Gets or sets a value indicating whether to normalize line breaks in the output.">取得或設定值，指出是否要將輸出中的分行符號標準化。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.NewLineHandling&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.NewLineHandling.Replace&quot; /&gt;.">其中一個 <see cref="T:System.Xml.NewLineHandling" /> 值。 預設為 <see cref="F:System.Xml.NewLineHandling.Replace" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.NewLineOnAttributes">
      <summary vsli:raw="Gets or sets a value indicating whether to write attributes on a new line.">取得或設定值，指出是否將屬性寫在新行上。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to write attributes on individual lines; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示將屬性寫在獨立的行上，否則為 <see langword="false" />。 預設為 <see langword="false" />。  
  
 <block subset="none" type="note"><para>  
 當 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> 屬性值為 <see langword="false" /> 時，這項設定沒有影響。</para></block>  
  
 當 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> 設為 <see langword="true" /> 時，會在每個屬性之前加上新行和一個額外的縮排層級。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration">
      <summary vsli:raw="Gets or sets a value indicating whether to omit an XML declaration.">取得或設定值，指出是否省略 XML 宣告。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to omit the XML declaration; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;, an XML declaration is written.">
        <see langword="true" /> 表示省略 XML 宣告，否則為 <see langword="false" />。 預設值為 <see langword="false" />，表示會寫入 XML 宣告。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.OutputMethod">
      <summary vsli:raw="Gets the method used to serialize the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; output.">取得用於序列化 <see cref="T:System.Xml.XmlWriter" /> 輸出的方法。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XmlOutputMethod&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.Xml.XmlOutputMethod.Xml&quot; /&gt;.">其中一個 <see cref="T:System.Xml.XmlOutputMethod" /> 值。 預設為 <see cref="F:System.Xml.XmlOutputMethod.Xml" />。</returns>
    </member>
    <member name="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; will add closing tags to all unclosed element tags when the &lt;see cref=&quot;M:System.Xml.XmlWriter.Close&quot; /&gt; method is called.">取得或設定值，指出 <see cref="T:System.Xml.XmlWriter" /> 是否會在呼叫 <see cref="M:System.Xml.XmlWriter.Close" /> 方法時，將結尾標記加入至所有未封閉的項目標記。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all unclosed element tags will be closed out; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">如果將關閉所有未封閉的項目標記，則為 <see langword="true" />，否則為 <see langword="false" />。 預設值是 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.IXPathNavigable">
      <summary vsli:raw="Provides an accessor to the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">提供 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別的存取子。</summary>
    </member>
    <member name="M:System.Xml.XPath.IXPathNavigable.CreateNavigator">
      <summary vsli:raw="Returns a new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">傳回新的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</returns>
    </member>
    <member name="T:System.Xml.XPath.XmlCaseOrder">
      <summary vsli:raw="Specifies the sort order for uppercase and lowercase letters.">指定大寫和小寫字母的排序順序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.LowerFirst">
      <summary vsli:raw="Lowercase letters are sorted before uppercase letters.">小寫字母排序在大寫字母之前。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.None">
      <summary vsli:raw="Ignore the case.">忽略大小寫。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlCaseOrder.UpperFirst">
      <summary vsli:raw="Uppercase letters are sorted before lowercase letters.">大寫字母排序在小寫字母之前。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlDataType">
      <summary vsli:raw="Specifies the data type used to determine sort order.">指定用來判斷排序順序的資料型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Number">
      <summary vsli:raw="Values are sorted numerically.">數值是依數字大小來排序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlDataType.Text">
      <summary vsli:raw="Values are sorted alphabetically.">數值是依字母順序來排序。</summary>
    </member>
    <member name="T:System.Xml.XPath.XmlSortOrder">
      <summary vsli:raw="Specifies the sort order.">指定排序順序。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Ascending">
      <summary vsli:raw="Nodes are sorted in ascending order. For example, if the numbers 1,2,3, and 4 are sorted in ascending order, they appear as 1,2,3,4.">節點是依遞增順序來排序。 例如，如果數字 1、2、3 和 4 依遞增順序排序，則它們會顯示為 1,2,3,4。</summary>
    </member>
    <member name="F:System.Xml.XPath.XmlSortOrder.Descending">
      <summary vsli:raw="Nodes are sorted in descending order. For example, if the numbers 1,2,3, and 4 are sorted in descending order, they appear as, 4,3,2,1.">節點是依遞減順序來排序。 例如，如果數字 1、2、3 和 4 依遞減順序排序，則它們會顯示為 4,3,2,1。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathExpression">
      <summary vsli:raw="Provides a typed class that represents a compiled XPath expression.">提供代表已編譯 XPath 運算式的具類型類別。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Collections.IComparer)">
      <summary vsli:raw="When overridden in a derived class, sorts the nodes selected by the XPath expression according to the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; object.">在衍生類別中覆寫時，根據指定的 <see cref="T:System.Collections.IComparer" /> 物件，對 XPath 運算式所選取的節點進行排序。</summary>
      <param name="expr" vsli:raw="An object representing the sort key. This can be the &lt;see langword=&quot;string&quot; /&gt; value of the node or an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object with a compiled XPath expression.">表示排序鍵的物件。 這可以是節點的 <see langword="string" /> 值或具有已編譯 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; object that provides the specific data type comparisons for comparing two objects for equivalence.">
        <see cref="T:System.Collections.IComparer" /> 物件，提供特定資料型別比較，以比較兩個物件是否等價。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; or sort key includes a prefix and either an &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; is not provided, or the prefix cannot be found in the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序鍵包含前置詞，而且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找不到前置詞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.AddSort(System.Object,System.Xml.XPath.XmlSortOrder,System.Xml.XPath.XmlCaseOrder,System.String,System.Xml.XPath.XmlDataType)">
      <summary vsli:raw="When overridden in a derived class, sorts the nodes selected by the XPath expression according to the supplied parameters.">在衍生類別中進行覆寫時，根據提供的參數來排序 XPath 運算式所選取的節點。</summary>
      <param name="expr" vsli:raw="An object representing the sort key. This can be the &lt;see langword=&quot;string&quot; /&gt; value of the node or an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object with a compiled XPath expression.">表示排序鍵的物件。 這可以是節點的 <see langword="string" /> 值或具有已編譯 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <param name="order" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XmlSortOrder&quot; /&gt; value indicating the sort order.">
        <see cref="T:System.Xml.XPath.XmlSortOrder" /> 值會表示排序順序。</param>
      <param name="caseOrder" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XmlCaseOrder&quot; /&gt; value indicating how to sort uppercase and lowercase letters.">
        <see cref="T:System.Xml.XPath.XmlCaseOrder" /> 值會表示如何排序大寫和小寫字母。</param>
      <param name="lang" vsli:raw="The language to use for comparison. Uses the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; class that can be passed to the &lt;see cref=&quot;Overload:System.String.Compare&quot; /&gt; method for the language types, for example, &quot;us-en&quot; for U.S. English. If an empty string is specified, the system environment is used to determine the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">要用於比較的語言。 使用可傳遞至 <see cref="T:System.Globalization.CultureInfo" /> 方法的 <see cref="Overload:System.String.Compare" /> 類別表示語言類型，例如 "us-en" 表示「英文 (美國)」。 如果指定空字串，則此系統環境會用來判斷 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="dataType" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XmlDataType&quot; /&gt; value indicating the sort order for the data type.">
        <see cref="T:System.Xml.XPath.XmlDataType" /> 值會表示資料類型的排序次序。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; or sort key includes a prefix and either an &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; is not provided, or the prefix cannot be found in the supplied &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 或排序鍵包含前置詞，而且未提供 <see cref="T:System.Xml.XmlNamespaceManager" /> 或所提供的 <see cref="T:System.Xml.XmlNamespaceManager" /> 中找不到前置詞。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Clone">
      <summary vsli:raw="When overridden in a derived class, returns a clone of this &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">在衍生類別中覆寫時，傳回這個 <see cref="T:System.Xml.XPath.XPathExpression" /> 的複製。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">新的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String)">
      <summary vsli:raw="Compiles the XPath expression specified and returns an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object representing the XPath expression.">編譯指定的 XPath 運算式，並傳回代表 XPath運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</summary>
      <param name="xpath" vsli:raw="An XPath expression.">XPath 運算式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression parameter is not a valid XPath expression.">XPath 運算式參數不是有效的 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.Compile(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Compiles the specified XPath expression, with the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified for namespace resolution, and returns an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object that represents the XPath expression.">以為命名空間解析指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，編譯指定的 XPath 運算式，並傳回表示 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</summary>
      <param name="xpath" vsli:raw="An XPath expression.">XPath 運算式。</param>
      <param name="nsResolver" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; interface for namespace resolution.">物件，實作命名空間解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 介面。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression parameter is not a valid XPath expression.">XPath 運算式參數不是有效的 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="When overridden in a derived class, specifies the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object to use for namespace resolution.">在衍生類別中覆寫時，指定 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件用於命名空間解析。</summary>
      <param name="nsResolver" vsli:raw="An object that implements the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; interface to use for namespace resolution.">實作 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 介面的物件，用於命名空間解析。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object parameter is not derived from &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt;.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件參數並非衍生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)">
      <summary vsli:raw="When overridden in a derived class, specifies the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; object to use for namespace resolution.">在衍生類別中覆寫時，指定 <see cref="T:System.Xml.XmlNamespaceManager" /> 物件用於命名空間解析。</summary>
      <param name="nsManager" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; object to use for namespace resolution.">要用於命名空間解析的 <see cref="T:System.Xml.XmlNamespaceManager" /> 物件。</param>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; object parameter is not derived from the &lt;see cref=&quot;T:System.Xml.XmlNamespaceManager&quot; /&gt; class.">
        <see cref="T:System.Xml.XmlNamespaceManager" /> 物件參數並非衍生自 <see cref="T:System.Xml.XmlNamespaceManager" /> 類別。</exception>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.Expression">
      <summary vsli:raw="When overridden in a derived class, gets a &lt;see langword=&quot;string&quot; /&gt; representation of the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">在衍生類別中覆寫時，取得 <see cref="T:System.Xml.XPath.XPathExpression" /> 的 <see langword="string" /> 表示。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; representation of the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">
        <see langword="string" /> 的 <see cref="T:System.Xml.XPath.XPathExpression" /> 表示。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathExpression.ReturnType">
      <summary vsli:raw="When overridden in a derived class, gets the result type of the XPath expression.">在衍生類別中覆寫時，取得 XPath 運算式的結果類型。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; value representing the result type of the XPath expression.">
        <see cref="T:System.Xml.XPath.XPathResultType" /> 值，代表 XPath 運算式的結果類型。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathItem">
      <summary vsli:raw="Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.">表示 XQuery 1.0 和 XPath 2.0 資料模型中的項目。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XPath.XPathItem&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XPath.XPathItem" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type)">
      <summary vsli:raw="Returns the item's value as the specified type.">傳回項目的值，做為指定型別。</summary>
      <param name="returnType" vsli:raw="The type to return the item value as.">傳回項目值所做為的型別。</param>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the target type.">項目值的格式對於目標型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The value of the item as the type requested.">項目值，做為要求的型別。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="When overridden in a derived class, returns the item's value as the type specified using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">在衍生類別中覆寫時，使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件傳回項目值，做為指定的型別，以解析命名空間前置詞。</summary>
      <param name="returnType" vsli:raw="The type to return the item's value as.">傳回項目值所做為的型別。</param>
      <param name="nsResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the target type.">項目值的格式對於目標型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The value of the item as the type requested.">項目值，做為要求的型別。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.IsNode">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.">在衍生類別中覆寫時取得值，表示項目是表示 XPath 節點還是原子值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item represents an XPath node; &lt;see langword=&quot;false&quot; /&gt; if the item represents an atomic value.">如果項目表示 XPath 節點，則為 <see langword="true" />，如果項目表示原子值，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.TypedValue">
      <summary vsli:raw="When overridden in a derived class, gets the current item as a boxed object of the most appropriate .NET Framework 2.0 type according to its schema type.">在衍生類別中覆寫時，根據其結構描述型別取得目前項目，做為最適當的 .NET Framework 2.0型別之 Boxed 物件。</summary>
      <returns vsli:raw="The current item as a boxed object of the most appropriate .NET Framework type.">目前項目，做為最適當的 .NET Framework 型別之 boxed 物件。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.Value">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see langword=&quot;string&quot; /&gt; value of the item.">在衍生類別中覆寫時，取得項目的 <see langword="string" /> 值。</summary>
      <returns vsli:raw="The &lt;see langword=&quot;string&quot; /&gt; value of the item.">項目的 <see langword="string" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsBoolean">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Boolean" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Boolean&quot; /&gt; type.">項目值的格式對於 <see cref="T:System.Boolean" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Boolean&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Boolean" /> 無效。</exception>
      <returns vsli:raw="The item's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">項目的值，做為 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDateTime">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.DateTime" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.DateTime&quot; /&gt; type.">項目值的格式對於 <see cref="T:System.DateTime" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.DateTime" /> 無效。</exception>
      <returns vsli:raw="The item's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">項目的值，做為 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsDouble">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Double" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Double&quot; /&gt; type.">項目值的格式對於 <see cref="T:System.Double" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Double&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Double" /> 無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The item's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">項目的值，做為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsInt">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Int32" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">項目值的格式對於 <see cref="T:System.Int32" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int32&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Int32" /> 無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The item's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">項目的值，做為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueAsLong">
      <summary vsli:raw="When overridden in a derived class, gets the item's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">在衍生類別中覆寫時，取得項目的值，做為 <see cref="T:System.Int64" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The item's value is not in the correct format for the &lt;see cref=&quot;T:System.Int64&quot; /&gt; type.">項目值的格式對於 <see cref="T:System.Int64" /> 型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int64&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Int64" /> 無效。</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The attempted cast resulted in an overflow.">嘗試的轉換導致溢位。</exception>
      <returns vsli:raw="The item's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">項目的值，做為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.ValueType">
      <summary vsli:raw="When overridden in a derived class, gets the .NET Framework 2.0 type of the item.">在衍生類別中覆寫時，取得項目的 .NET Framework 2.0型別。</summary>
      <returns vsli:raw="The .NET Framework type of the item. The default value is &lt;see cref=&quot;T:System.String&quot; /&gt;.">項目的 .NET Framework 型別。 預設值是 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathItem.XmlType">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the item.">在衍生類別中覆寫時，取得項目的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; for the item.">項目的 <see cref="T:System.Xml.Schema.XmlSchemaType" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNamespaceScope">
      <summary vsli:raw="Defines the namespace scope.">定義命名空間範圍。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.All">
      <summary vsli:raw="Returns all namespaces defined in the scope of the current node. This includes the &lt;c&gt;xmlns:xml&lt;/c&gt; namespace which is always declared implicitly. The order of the namespaces returned is not defined.">傳回目前節點範圍中定義的所有命名空間。 包括一律以隱含方式宣告的 <c>xmlns:xml</c> 命名空間。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.ExcludeXml">
      <summary vsli:raw="Returns all namespaces defined in the scope of the current node, excluding the &lt;c&gt;xmlns:xml&lt;/c&gt; namespace. The &lt;c&gt;xmlns:xml&lt;/c&gt; namespace is always declared implicitly. The order of the namespaces returned is not defined.">傳回目前節點範圍中定義的所有命名空間，但不包括 <c>xmlns:xml</c> 命名空間。 <c>xmlns:xml</c> 命名空間永遠隱含宣告。 命名空間傳回的順序並無定義。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNamespaceScope.Local">
      <summary vsli:raw="Returns all namespaces that are defined locally at the current node.">傳回目前節點上區域定義的所有命名空間。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathNavigator">
      <summary vsli:raw="Provides a cursor model for navigating and editing XML data.">提供游標模型來巡覽及編輯 XML 資料。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create one or more new child nodes at the end of the list of child nodes of the current node.">傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，該物件可用來在目前節點的子節點清單結尾建立一或多個新的子節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create new child nodes at the end of the list of child nodes of the current node.">
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前節點的子節點清單結尾建立新的子節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.String)">
      <summary vsli:raw="Creates a new child node at the end of the list of child nodes of the current node using the XML data string specified.">使用指定的 XML 資料字串，在目前節點的子節點清單結尾建立新的子節點。</summary>
      <param name="newChild" vsli:raw="The XML data string for the new child node.">新的子節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML data string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 資料字串參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML data string parameter is not well-formed.">XML 資料字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new child node at the end of the list of child nodes of the current node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">使用指定 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前節點的子節點清單結尾建立新的子節點。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new child node.">位於新的子節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChild(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new child node at the end of the list of child nodes of the current node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified.">使用 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中指定的節點，在目前節點的子節點清單結尾建立新的子節點。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new child node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於要以新的子節點形式加入的節點上。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.AppendChildElement(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new child element node at the end of the list of child nodes of the current node using the namespace prefix, local name and namespace URI specified with the value specified.">使用命名空間前置詞、區域名稱以及有指定值的指定命名空間 URI，在目前節點的子節點清單結尾建立新的子項目節點。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element node (if any).">新的子項目節點的命名空間前置詞 (如有此項)。</param>
      <param name="localName" vsli:raw="The local name of the new child element node (if any).">新的子項目節點的區域名稱 (如有此項)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element node (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新的子項目節點的命名空間 URI (如有此項)。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 相等。</param>
      <param name="value" vsli:raw="The value of the new child element node. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新的子項目節點的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空白項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on is not the root node or an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不是根節點或項目節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary vsli:raw="Verifies that the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; conforms to the XML Schema definition language (XSD) schema provided.">請驗證 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料確實有符合所提供的 XML 結構描述定義語言 (XSD) 結構描述。</summary>
      <param name="schemas" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; containing the schemas used to validate the XML data contained in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />，包含用來驗證 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中所含的 XML 資料之結構描述。</param>
      <param name="validationEventHandler" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; that receives information about schema validation warnings and errors.">
        <see cref="T:System.Xml.Schema.ValidationEventHandler" />，可接收與結構描述驗證的警告和錯誤有關的資訊。</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException" vsli:raw="A schema validation error occurred, and no &lt;see cref=&quot;T:System.Xml.Schema.ValidationEventHandler&quot; /&gt; was specified to handle validation errors.">已發生結構描述驗證錯誤，而且未指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" /> 來處理驗證錯誤。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on a node that is not an element, attribute, or the root node or there is not type information to perform validation.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的節點並不是項目、屬性或根節點，或是沒有任何型別資訊可執行驗證。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)&quot; /&gt; method was called with an &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaSet&quot; /&gt; parameter when the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; was not positioned on the root node of the XML data.">當 <see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" /> 不在 XML 資料的根節點上時，使用了 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 參數呼叫 <see cref="T:System.Xml.XPath.XPathNavigator" /> 方法。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if no schema validation errors occurred; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果未發生任何結構描述驗證錯誤，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Clone">
      <summary vsli:raw="When overridden in a derived class, creates a new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned at the same node as this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">在衍生類別中覆寫時，請在與這個 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的節點上建立新的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned at the same node as this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">與這個 <see cref="T:System.Xml.XPath.XPathNavigator" /> 位於相同節點的新 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ComparePosition(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Compares the position of the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; with the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified.">比較目前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置與指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置。</summary>
      <param name="nav" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to compare against.">要比較的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNodeOrder&quot; /&gt; value representing the comparative position of the two &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects.">
        <see cref="T:System.Xml.XmlNodeOrder" /> 值，表示兩個 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的比較位置。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Compile(System.String)">
      <summary vsli:raw="Compiles a string representing an XPath expression and returns an &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">編譯表示 XPath 運算式的字串，並傳回 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</summary>
      <param name="xpath" vsli:raw="A string representing an XPath expression.">表示 XPath 運算式的字串。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;xpath&quot; /&gt; parameter contains an XPath expression that is not valid.">
        <paramref name="xpath" /> 參數包含無效的 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object representing the XPath expression.">表示 XPath 運算式的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttribute(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates an attribute node on the current element node using the namespace prefix, local name and namespace URI specified with the value specified.">使用命名空間前置詞、區域名稱以及有指定值的指定命名空間 URI，在目前的項目節點上建立屬性節點。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new attribute node (if any).">新屬性節點的命名空間前置詞 (如有此項)。</param>
      <param name="localName" vsli:raw="The local name of the new attribute node which cannot &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt;.">不能為 <see cref="F:System.String.Empty" /> 或 <see langword="null" /> 的新屬性節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI for the new attribute node (if any).">新屬性節點的命名空間 URI (如有此項)。</param>
      <param name="value" vsli:raw="The value of the new attribute node. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty attribute node is created.">新屬性節點的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空的屬性節點。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目節點上。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateAttributes">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create new attributes on the current element.">傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件是用來在目前的項目上建立新的屬性。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目節點上。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create new attributes on the current element.">
        <see cref="T:System.Xml.XmlWriter" /> 物件，此物件是用來在目前的項目上建立新的屬性。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.CreateNavigator">
      <summary vsli:raw="Returns a copy of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">傳回 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的複本。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; copy of this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 複本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteRange(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Deletes a range of sibling nodes from the current node to the node specified.">刪除從目前節點到指定節點的某範圍之同層級節點。</summary>
      <param name="lastSiblingToDelete" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned on the last sibling node in the range to delete.">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，位於要刪除的範圍內的最後一個同層級節點上。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified is &lt;see langword=&quot;null&quot; /&gt;.">指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The last node to delete specified is not a valid sibling node of the current node.">所指定要刪除的最後一個節點不是目前節點的有效同層級節點。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.DeleteSelf">
      <summary vsli:raw="Deletes the current node and its child nodes.">刪除目前的節點和它的子節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on a node that cannot be deleted such as the root node or a namespace node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 位於無法刪除的節點上，例如根節點或命名空間節點等。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String)">
      <summary vsli:raw="Evaluates the specified XPath expression and returns the typed result.">評估指定的 XPath 運算式，並傳回具類型的結果。</summary>
      <param name="xpath" vsli:raw="A string representing an XPath expression that can be evaluated.">字串，表示能接受評估的 XPath 運算式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 運算式的傳回型別是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Evaluates the specified XPath expression and returns the typed result, using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes in the XPath expression.">評估指定的 XPath 運算式，並傳回具類型的結果，透過的方式是使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件來解析 XPath 運算式中的命名空間前置詞。</summary>
      <param name="xpath" vsli:raw="A string representing an XPath expression that can be evaluated.">字串，表示能接受評估的 XPath 運算式。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes in the XPath expression.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析 XPath 運算式中的命名空間前置詞。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 運算式的傳回型別是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Evaluates the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; and returns the typed result.">評估 <see cref="T:System.Xml.XPath.XPathExpression" />，並傳回具類型的結果。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; that can be evaluated.">可以接受評估的 <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 運算式的傳回型別是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Evaluate(System.Xml.XPath.XPathExpression,System.Xml.XPath.XPathNodeIterator)">
      <summary vsli:raw="Uses the supplied context to evaluate the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;, and returns the typed result.">使用提供的內容來評估 <see cref="T:System.Xml.XPath.XPathExpression" />，並傳回具類型的結果。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; that can be evaluated.">可以接受評估的 <see cref="T:System.Xml.XPath.XPathExpression" />。</param>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that points to the selected node set that the evaluation is to be performed on.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，指向要執行評估的選定節點集。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The return type of the XPath expression is a node set.">XPath 運算式的傳回型別是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="The result of the expression (Boolean, number, string, or node set). This maps to &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, &lt;see cref=&quot;T:System.Double&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; objects respectively.">運算式的結果 (布林值、數字、字串或節點集)。 這會分別對應至 <see cref="T:System.Boolean" />、<see cref="T:System.Double" />、<see cref="T:System.String" /> 或 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 等物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetAttribute(System.String,System.String)">
      <summary vsli:raw="Gets the value of the attribute with the specified local name and namespace URI.">取得具有指定的區域名稱和命名空間 URI 的屬性值。</summary>
      <param name="localName" vsli:raw="The local name of the attribute. &lt;paramref name=&quot;localName&quot; /&gt; is case-sensitive.">屬性的本機名稱。 <paramref name="localName" /> 會區分大小寫。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute.">屬性的命名空間 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the value of the specified attribute; &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if a matching attribute is not found, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see cref="T:System.String" />，包含指定屬性的值；如果找不到符合的屬性，或 <see cref="F:System.String.Empty" /> 不在項目節點上，則為 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespace(System.String)">
      <summary vsli:raw="Returns the value of the namespace node corresponding to the specified local name.">傳回對應至指定區域名稱之命名空間節點的值。</summary>
      <param name="name" vsli:raw="The local name of the namespace node.">命名空間節點的區域名稱。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the value of the namespace node; &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if a matching namespace node is not found, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see cref="T:System.String" />，包含命名空間節點的值；如果找不到符合的命名空間節點，或 <see cref="F:System.String.Empty" /> 不在項目節點上，則為 <see cref="T:System.Xml.XPath.XPathNavigator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary vsli:raw="Returns the in-scope namespaces of the current node.">傳回目前節點範圍中的命名空間。</summary>
      <param name="scope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNamespaceScope&quot; /&gt; value specifying the namespaces to return.">
        <see cref="T:System.Xml.XmlNamespaceScope" /> 值，指定要傳回的命名空間。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; collection of namespace names keyed by prefix.">以前置詞當做索引鍵的命名空間名稱之 <see cref="T:System.Collections.Generic.IDictionary`2" /> 集合。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node after the currently selected node.">傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件用來在目前選取的節點之後建立新的同層級節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點後插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node after the currently selected node.">
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前選取的節點之後建立新的同層級節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.String)">
      <summary vsli:raw="Creates a new sibling node after the currently selected node using the XML string specified.">使用指定的 XML 字串，在目前選取的節點之後建立新的同層級節點。</summary>
      <param name="newSibling" vsli:raw="The XML data string for the new sibling node.">新的同層級節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 字串參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點後插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new sibling node after the currently selected node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">使用指定之 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前選取的節點之後建立新的同層級節點。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new sibling node.">
        <see cref="T:System.Xml.XmlReader" /> 物件位於新同層級節點的 XML 資料上。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點後插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertAfter(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new sibling node after the currently selected node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object specified.">使用所指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的節點，在目前選取的節點之後建立新的同層級節點。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new sibling node.">位在要做為新同層級節點加入之節點上的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點後插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node before the currently selected node.">傳回 <see cref="T:System.Xml.XmlWriter" /> 物件，此物件用來在目前選取的節點之前，建立新的同層級節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點之前插入的新同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new sibling node before the currently selected node.">
        <see cref="T:System.Xml.XmlWriter" /> 物件，用來在目前選取的節點之前，建立新的同層級節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.String)">
      <summary vsli:raw="Creates a new sibling node before the currently selected node using the XML string specified.">使用指定的 XML 字串，在目前選取的節點之前建立新的同層級節點。</summary>
      <param name="newSibling" vsli:raw="The XML data string for the new sibling node.">新的同層級節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 字串參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點之前插入的新同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new sibling node before the currently selected node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">使用指定之 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前選取的節點之前建立新的同層級節點。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new sibling node.">
        <see cref="T:System.Xml.XmlReader" /> 物件位於新同層級節點的 XML 資料上。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點之前插入的新同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertBefore(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new sibling node before the currently selected node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified.">使用所指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的節點，在目前所選節點之前建立新的同層級節點。</summary>
      <param name="newSibling" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new sibling node.">位在要做為新同層級節點加入之節點上的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點之前插入的新同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementAfter(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new sibling element after the current node using the namespace prefix, local name and namespace URI specified, with the value specified.">使用命名空間前置詞、區域名稱以及有指定值的指定命名空間 URI，在目前的節點之後建立新的同層級項目。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element (if any).">新的子項目的命名空間前置詞 (如有此項)。</param>
      <param name="localName" vsli:raw="The local name of the new child element (if any).">新的子項目的本機名稱 (如有此項)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新的子項目的命名空間 URI (如有此項)。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 相等。</param>
      <param name="value" vsli:raw="The value of the new child element. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新的子項目的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空白項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted after the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點後插入新的同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.InsertElementBefore(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new sibling element before the current node using the namespace prefix, local name, and namespace URI specified, with the value specified.">使用命名空間前置詞、區域名稱以及有指定值的指定命名空間 URI，在目前的節點之前建立新的同層級項目。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element (if any).">新的子項目的命名空間前置詞 (如有此項)。</param>
      <param name="localName" vsli:raw="The local name of the new child element (if any).">新的子項目的本機名稱 (如有此項)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新的子項目的命名空間 URI (如有此項)。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 相等。</param>
      <param name="value" vsli:raw="The value of the new child element. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新的子項目的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空白項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not allow a new sibling node to be inserted before the current node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不允許在目前節點之前插入的新同層級節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsDescendant(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is a descendant of the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">判斷指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否為目前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的子代 (Descendant)。</summary>
      <param name="nav" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to compare to this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">要和此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 比較的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is a descendant of the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是目前 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的子代，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.IsSamePosition(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="When overridden in a derived class, determines whether the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is at the same position as the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">在衍生類別中覆寫時，請判斷目前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否和指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 位在相同的位置。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to compare to this &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">要和此 <see cref="T:System.Xml.XPath.XPathNavigator" /> 比較的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects have the same position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果兩個 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的位置相同，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupNamespace(System.String)">
      <summary vsli:raw="Gets the namespace URI for the specified prefix.">取得指定前置詞的命名空間 URI。</summary>
      <param name="prefix" vsli:raw="The prefix whose namespace URI you want to resolve. To match the default namespace, pass &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">您要解析其命名空間 URI 的前置詞。 若要符合預設命名空間，請傳遞 <see cref="F:System.String.Empty" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace URI assigned to the namespace prefix specified; &lt;see langword=&quot;null&quot; /&gt; if no namespace URI is assigned to the prefix specified. The &lt;see cref=&quot;T:System.String&quot; /&gt; returned is atomized.">
        <see cref="T:System.String" />，包含指派給指定命名空間前置詞的命名空間 URI；如果沒有命名空間 URI 指派給指定的前置詞，則為 <see langword="null" />。 傳回的 <see cref="T:System.String" /> 已原子化。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.LookupPrefix(System.String)">
      <summary vsli:raw="Gets the prefix declared for the specified namespace URI.">取得為指定命名空間 URI 宣告的前置詞。</summary>
      <param name="namespaceURI" vsli:raw="The namespace URI to resolve for the prefix.">用來解析前置詞的命名空間 URI。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace prefix assigned to the namespace URI specified; otherwise, &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if no prefix is assigned to the namespace URI specified. The &lt;see cref=&quot;T:System.String&quot; /&gt; returned is atomized.">
        <see cref="T:System.String" />，包含指派給指定之命名空間 URI 的命名空間前置詞；如果沒有指派前置詞給指定的命名空間 URI，則為 <see cref="F:System.String.Empty" />。 傳回的 <see cref="T:System.String" /> 已原子化。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.String)">
      <summary vsli:raw="Determines whether the current node matches the specified XPath expression.">判斷目前的節點是否符合指定的 XPath 運算式。</summary>
      <param name="xpath" vsli:raw="The XPath expression.">XPath 運算式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression cannot be evaluated.">無法評估 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node matches the specified XPath expression; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的節點符合指定的 XPath 運算式，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Matches(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Determines whether the current node matches the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">判斷目前的節點是否符合指定的 <see cref="T:System.Xml.XPath.XPathExpression" />。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object containing the compiled XPath expression.">
        <see cref="T:System.Xml.XPath.XPathExpression" /> 物件，包含已編譯的 XPath 運算式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression cannot be evaluated.">無法評估 XPath 運算式。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node matches the &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前節點符合 <see cref="T:System.Xml.XPath.XPathExpression" />，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveTo(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the same position as the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至與指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置上。</summary>
      <param name="other" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned on the node that you want to move to.">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，位於要移至的節點上。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the same position as the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移到與指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 相同的位置上，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToAttribute(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the attribute with the matching local name and namespace URI.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至具有相符的區域名稱和命名空間 URI 的屬性。</summary>
      <param name="localName" vsli:raw="The local name of the attribute.">屬性的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the attribute; &lt;see langword=&quot;null&quot; /&gt; for an empty namespace.">此屬性的命名空間 URI；空的命名空間則為 <see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至該屬性，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the child node with the local name and namespace URI specified.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到具有指定區域名稱和命名空間 URI 的子節點。</summary>
      <param name="localName" vsli:raw="The local name of the child node to move to.">要移向的子節點之區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the child node to move to.">要移向的子節點之命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the child node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至此子節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToChild(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the child node of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子節點。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the child node to move to.">要移向的子節點之 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the child node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至此子節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirst">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first sibling node of the current node.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個同層級節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first sibling node of the current node; &lt;see langword=&quot;false&quot; /&gt; if there is no first sibling, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is already positioned on the first sibling, &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; will return &lt;see langword=&quot;true&quot; /&gt; and will not move its position.  &#xA;  &#xA; If &lt;see cref=&quot;M:System.Xml.XPath.XPathNavigator.MoveToFirst&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt; because there is no first sibling, or if &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的第一個同層級節點，則為 <see langword="true" />；如果沒有第一個同層級節點，或是 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 已經在第一個同層級位置，<see cref="T:System.Xml.XPath.XPathNavigator" /> 將會傳回 <see langword="true" />，且不會移動其位置。  
  
如果因為沒有第一個同層級而使 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" /> 傳回 <see langword="false" />，或是 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性上，則 <see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstAttribute">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first attribute of the current node.">在衍生類別中覆寫時，移動 <see cref="T:System.Xml.XPath.XPathNavigator" /> 至目前節點的第一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first attribute of the current node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的第一個屬性，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstChild">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first child node of the current node.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個子節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first child node of the current node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的第一個子節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to first namespace node of the current node.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的第一個命名空間節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至第一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFirstNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the first namespace node that matches the &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; specified.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至符合指定 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 的第一個命名空間節點。</summary>
      <param name="namespaceScope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; value describing the namespace scope.">
        <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值，說明命名空間的範圍。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the first namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至第一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the element with the local name and namespace URI specified in document order.">會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到具有指定區域名稱和命名空間 URI 的項目。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.String,System.String,System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the element with the local name and namespace URI specified, to the boundary specified, in document order.">會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到指定界限之區域名稱和指定命名空間 URI 的項目。</summary>
      <param name="localName" vsli:raw="The local name of the element.">項目的本機名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the element.">項目的命名空間 URI。</param>
      <param name="end" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the element boundary which the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; will not move past while searching for the following element.">目前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 在搜尋下列項目時不會超出的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件所在項目界限。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the following element of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified in document order.">會根據文件順序，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下列指定的 <see cref="T:System.Xml.XPath.XPathNodeType" /> 項目。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the element. The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; cannot be &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Namespace&quot; /&gt;.">項目的 <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToFollowing(System.Xml.XPath.XPathNodeType,System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the following element of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified, to the boundary specified, in document order.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至所指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的下列項目，依文件順序到指定的界限。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the element. The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; cannot be &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Attribute&quot; /&gt; or &lt;see cref=&quot;F:System.Xml.XPath.XPathNodeType.Namespace&quot; /&gt;.">項目的 <see cref="T:System.Xml.XPath.XPathNodeType" />。 <see cref="T:System.Xml.XPath.XPathNodeType" /> 不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" /> 或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />。</param>
      <param name="end" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the element boundary which the current &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; will not move past while searching for the following element.">目前的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 在搜尋下列項目時不會超出的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件所在項目界限。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; moved successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToId(System.String)">
      <summary vsli:raw="When overridden in a derived class, moves to the node that has an attribute of type &lt;c&gt;ID&lt;/c&gt; whose value matches the specified &lt;see cref=&quot;T:System.String&quot; /&gt;.">在衍生類別中覆寫時，移至具有類型 <c>ID</c> 的屬性之節點 (此類型的值符合指定的 <see cref="T:System.String" />)。</summary>
      <param name="id" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing the &lt;c&gt;ID&lt;/c&gt; value of the node to which you want to move.">
        <see cref="T:System.String" /> 表示要移向之節點的 <c>ID</c> 值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the navigator is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移動，則為 <see langword="true" />，否則為 <see langword="false" />。 如果 <see langword="false" />，則不會變更巡覽器的位置。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNamespace(System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the namespace node with the specified namespace prefix.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至具有指定命名空間前置詞的命名空間節點。</summary>
      <param name="name" vsli:raw="The namespace prefix of the namespace node.">命名空間節點的命名空間前置詞。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the specified namespace; &lt;see langword=&quot;false&quot; /&gt; if a matching namespace node was not found, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至指定的命名空間，則為 <see langword="true" />；如果找不到相符的命名空間節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next sibling node of the current node.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的下一個同層級節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next sibling node; otherwise, &lt;see langword=&quot;false&quot; /&gt; if there are no more siblings or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個同層級節點，則為 <see langword="true" />；如果沒有其他的同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.String,System.String)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next sibling node with the local name and namespace URI specified.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移到具有指定區域名稱和命名空間 URI 的下一個同層級節點。</summary>
      <param name="localName" vsli:raw="The local name of the next sibling node to move to.">要移向的下一個同層級節點之區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the next sibling node to move to.">要移向的下一個同層級節點之命名空間 URI。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next sibling node; &lt;see langword=&quot;false&quot; /&gt; if there are no more siblings, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個同層級節點，則為 <see langword="true" />；如果沒有其他的同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNext(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next sibling node of the current node that matches the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; specified.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點中符合指定 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的下一個同層級節點。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the sibling node to move to.">要移向的同層級節點之 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next sibling node; otherwise, &lt;see langword=&quot;false&quot; /&gt; if there are no more siblings or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個同層級節點，則為 <see langword="true" />；如果沒有其他的同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextAttribute">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next attribute.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下一個屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next attribute; &lt;see langword=&quot;false&quot; /&gt; if there are no more attributes. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個屬性，則為 <see langword="true" />；如果沒有其他屬性，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next namespace node.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至下一個命名空間節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToNextNamespace(System.Xml.XPath.XPathNamespaceScope)">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the next namespace node matching the &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; specified.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至符合指定 <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 的下一個命名空間節點。</summary>
      <param name="namespaceScope" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNamespaceScope&quot; /&gt; value describing the namespace scope.">
        <see cref="T:System.Xml.XPath.XPathNamespaceScope" /> 值，說明命名空間的範圍。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the next namespace node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至下一個命名空間節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToParent">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the parent node of the current node.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的父節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the parent node of the current node; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至目前節點的父節點，則為 <see langword="true" />；否則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToPrevious">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the previous sibling node of the current node.">在衍生類別中覆寫時，將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點的上一個同層級節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is successful moving to the previous sibling node; otherwise, &lt;see langword=&quot;false&quot; /&gt; if there is no previous sibling node or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is currently positioned on an attribute node. If &lt;see langword=&quot;false&quot; /&gt;, the position of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is unchanged.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 成功移至上一個同層級節點，則為 <see langword="true" />；如果沒有上一個同層級節點，或 <see cref="T:System.Xml.XPath.XPathNavigator" /> 目前位在屬性節點上，則為 <see langword="false" />。 如果為 <see langword="false" />，<see cref="T:System.Xml.XPath.XPathNavigator" /> 的位置就不會變更。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.MoveToRoot">
      <summary vsli:raw="Moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; to the root node that the current node belongs to.">將 <see cref="T:System.Xml.XPath.XPathNavigator" /> 移至目前節點所屬的根節點。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new child node at the beginning of the list of child nodes of the current node.">傳回用以在目前節點的子節點清單開頭建立新子節點的 <see cref="T:System.Xml.XmlWriter" /> 物件。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不允許在前面加上新的子節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to create a new child node at the beginning of the list of child nodes of the current node.">用以在目前節點的子節點清單開頭建立新子節點的 <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.String)">
      <summary vsli:raw="Creates a new child node at the beginning of the list of child nodes of the current node using the XML string specified.">使用指定的 XML 字串，在目前節點的子節點清單開頭建立新的子節點。</summary>
      <param name="newChild" vsli:raw="The XML data string for the new child node.">新的子節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 字串參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不允許在前面加上新的子節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XmlReader)">
      <summary vsli:raw="Creates a new child node at the beginning of the list of child nodes of the current node using the XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">使用指定之 <see cref="T:System.Xml.XmlReader" /> 物件的 XML 內容，在目前節點的子節點清單開頭建立新的子節點。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new child node.">位於新的子節點之 XML 資料上的 <see cref="T:System.Xml.XmlReader" /> 物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不允許在前面加上新的子節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChild(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Creates a new child node at the beginning of the list of child nodes of the current node using the nodes in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object specified.">使用指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中的節點，在目前節點的子節點清單開頭建立新的子節點。</summary>
      <param name="newChild" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the node to add as the new child node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於要以新的子節點形式加入的節點上。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不允許在前面加上新的子節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.PrependChildElement(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Creates a new child element at the beginning of the list of child nodes of the current node using the namespace prefix, local name, and namespace URI specified with the value specified.">使用命名空間前置詞、區域名稱以及有指定值的指定命名空間 URI，在目前節點的子節點清單開頭建立新的子項目。</summary>
      <param name="prefix" vsli:raw="The namespace prefix of the new child element (if any).">新的子項目的命名空間前置詞 (如有此項)。</param>
      <param name="localName" vsli:raw="The local name of the new child element (if any).">新的子項目的本機名稱 (如有此項)。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the new child element (if any). &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; and &lt;see langword=&quot;null&quot; /&gt; are equivalent.">新的子項目的命名空間 URI (如有此項)。 <see cref="F:System.String.Empty" /> 和 <see langword="null" /> 相等。</param>
      <param name="value" vsli:raw="The value of the new child element. If &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; or &lt;see langword=&quot;null&quot; /&gt; are passed, an empty element is created.">新的子項目的值。 如果已傳遞 <see cref="F:System.String.Empty" /> 或 <see langword="null" />，則會建立空白項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current node the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on does not allow a new child node to be prepended.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 所在的目前節點不允許在前面加上新的子節點。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReadSubtree">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the current node and its child nodes.">傳回 <see cref="T:System.Xml.XmlReader" /> 物件，此物件包含目前的節點和它的子節點。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node or the root node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 未置於項目節點或根節點。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the current node and its child nodes.">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含目前的節點和它的子節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceRange(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Replaces a range of sibling nodes from the current node to the node specified.">取代從目前節點到指定節點的某範圍之同層級節點。</summary>
      <param name="lastSiblingToReplace" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; positioned on the last sibling node in the range to replace.">
        <see cref="T:System.Xml.XPath.XPathNavigator" />，位於要取代的範圍內的最後一個同層級節點上。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; specified is &lt;see langword=&quot;null&quot; /&gt;.">指定的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The last node to replace specified is not a valid sibling node of the current node.">所指定要取代的最後一個節點不是目前節點的有效同層級節點。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object used to specify the replacement range.">用來指定取代範圍的 <see cref="T:System.Xml.XmlWriter" /> 物件。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.String)">
      <summary vsli:raw="Replaces the current node with the content of the string specified.">將目前的節點取代為指定字串的內容。</summary>
      <param name="newNode" vsli:raw="The XML data string for the new node.">新的節點之 XML 資料字串。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The XML string parameter is &lt;see langword=&quot;null&quot; /&gt;.">XML 字串參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element, text, processing instruction, or comment node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目、文字、處理指示或註解節點上。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML string parameter is not well-formed.">XML 字串參數的語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XmlReader)">
      <summary vsli:raw="Replaces the current node with the contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object specified.">將目前的節點取代為指定 <see cref="T:System.Xml.XmlReader" /> 物件的內容。</summary>
      <param name="newNode" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object positioned on the XML data for the new node.">
        <see cref="T:System.Xml.XmlReader" /> 物件，位於新節點的 XML 資料上。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object is in an error state or closed.">
        <see cref="T:System.Xml.XmlReader" /> 物件處於錯誤狀態或已關閉。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element, text, processing instruction, or comment node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目、文字、處理指示或註解節點上。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XmlReader" /> 物件參數的 XML 內容語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ReplaceSelf(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Replaces the current node with the contents of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object specified.">將目前的節點取代為指定 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的內容。</summary>
      <param name="newNode" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the new node.">位於新節點上的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element, text, processing instruction, or comment node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目、文字、處理指示或註解節點上。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="The XML contents of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object parameter is not well-formed.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件參數的 XML 內容語式不正確。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String)">
      <summary vsli:raw="Selects a node set, using the specified XPath expression.">使用指定的 XPath 運算式來選取節點集。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">
        <see cref="T:System.String" /> 表示 XPath 運算式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression contains an error or its return type is not a node set.">XPath 運算式包含錯誤或其傳回類型不是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; pointing to the selected node set.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 指向選定節點集。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Selects a node set using the specified XPath expression with the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">使用指定的 XPath 運算式並搭配指定用來解析命名空間前置詞的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，以選取節點集。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">
        <see cref="T:System.String" /> 表示 XPath 運算式。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression contains an error or its return type is not a node set.">XPath 運算式包含錯誤或其傳回類型不是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that points to the selected node set.">指向選定節點集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.Select(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Selects a node set using the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 來選取節點集。</summary>
      <param name="expr" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object containing the compiled XPath query.">包含已編譯之 XPath 查詢的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The XPath expression contains an error or its return type is not a node set.">XPath 運算式包含錯誤或其傳回類型不是節點集。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath expression is not valid.">XPath 運算式無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that points to the selected node set.">指向選定節點集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Selects all the ancestor nodes of the current node that have the specified local name and namespace URI.">選取目前節點中，所有具有指定區域名稱和命名空間 URI 的祖系節點。</summary>
      <param name="name" vsli:raw="The local name of the ancestor nodes.">祖系節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the ancestor nodes.">祖系節點的命名空間 URI。</param>
      <param name="matchSelf" vsli:raw="To include the context node in the selection, &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; cannot be passed as a parameter.">
        <see langword="null" /> 不能做為參數傳遞。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes. The returned nodes are in reverse document order.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。 傳回的節點是以相反的文件順序排列。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectAncestors(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary vsli:raw="Selects all the ancestor nodes of the current node that have a matching &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt;.">選取目前節點中，所有具有相符 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的祖系節點。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the ancestor nodes.">祖系節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf" vsli:raw="To include the context node in the selection, &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes. The returned nodes are in reverse document order.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。 傳回的節點是以相反的文件順序排列。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.String,System.String)">
      <summary vsli:raw="Selects all the child nodes of the current node that have the local name and namespace URI specified.">選取目前節點中，所有具有指定區域名稱和命名空間 URI 的子節點。</summary>
      <param name="name" vsli:raw="The local name of the child nodes.">子節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the child nodes.">子節點的命名空間 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; cannot be passed as a parameter.">
        <see langword="null" /> 不能做為參數傳遞。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectChildren(System.Xml.XPath.XPathNodeType)">
      <summary vsli:raw="Selects all the child nodes of the current node that have the matching &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt;.">選取目前節點中，所有具有相符之 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子節點。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the child nodes.">子節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Selects all the descendant nodes of the current node with the local name and namespace URI specified.">選取目前節點中，所有具有指定區域名稱和命名空間 URI 的子系節點。</summary>
      <param name="name" vsli:raw="The local name of the descendant nodes.">子代節點的區域名稱。</param>
      <param name="namespaceURI" vsli:raw="The namespace URI of the descendant nodes.">子代節點的命名空間 URI。</param>
      <param name="matchSelf" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include the context node in the selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;see langword=&quot;null&quot; /&gt; cannot be passed as a parameter.">
        <see langword="null" /> 不能做為參數傳遞。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectDescendants(System.Xml.XPath.XPathNodeType,System.Boolean)">
      <summary vsli:raw="Selects all the descendant nodes of the current node that have a matching &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt;.">選取目前節點中，所有具有相符 <see cref="T:System.Xml.XPath.XPathNodeType" /> 的子代節點。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the descendant nodes.">子代節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</param>
      <param name="matchSelf" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include the context node in the selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">若要將內容節點包含在選取項目中，則為 <see langword="true" />，否則為 <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; that contains the selected nodes.">
        <see cref="T:System.Xml.XPath.XPathNodeIterator" />，包含選取的節點。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String)">
      <summary vsli:raw="Selects a single node in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified XPath query.">使用指定的 XPath 查詢，於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中選取單一節點。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">
        <see cref="T:System.String" /> 表示 XPath 運算式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An error was encountered in the XPath query or the return type of the XPath expression is not a node.">在 XPath 查詢中發生錯誤或 XPath 運算式的傳回類型不是節點。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath query is not valid.">XPath 查詢無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the first matching node for the XPath query specified; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there are no query results.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含指定 XPath 查詢的第一個相符節點；如果沒有查詢結果，則為 <see langword="null" /></returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.String,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Selects a single node in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object using the specified XPath query with the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">使用指定的 XPath 查詢並搭配指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，在 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件中選取單一節點，以解析命名空間前置詞。</summary>
      <param name="xpath" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representing an XPath expression.">
        <see cref="T:System.String" /> 表示 XPath 運算式。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes in the XPath query.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用來解析 XPath 查詢中的命名空間前置詞。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An error was encountered in the XPath query or the return type of the XPath expression is not a node.">在 XPath 查詢中發生錯誤或 XPath 運算式的傳回類型不是節點。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath query is not valid.">XPath 查詢無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the first matching node for the XPath query specified; otherwise &lt;see langword=&quot;null&quot; /&gt; if there are no query results.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含指定 XPath 查詢的第一個相符節點；如果沒有查詢結果，則為 <see langword="null" /></returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SelectSingleNode(System.Xml.XPath.XPathExpression)">
      <summary vsli:raw="Selects a single node in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object.">使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件，於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中選取單一節點。</summary>
      <param name="expression" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathExpression&quot; /&gt; object containing the compiled XPath query.">包含已編譯之 XPath 查詢的 <see cref="T:System.Xml.XPath.XPathExpression" /> 物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="An error was encountered in the XPath query or the return type of the XPath expression is not a node.">在 XPath 查詢中發生錯誤或 XPath 運算式的傳回類型不是節點。</exception>
      <exception cref="T:System.Xml.XPath.XPathException" vsli:raw="The XPath query is not valid.">XPath 查詢無效。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the first matching node for the XPath query specified; otherwise &lt;see langword=&quot;null&quot; /&gt; if there are no query results.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含指定 XPath 查詢的第一個相符節點；如果沒有查詢結果，則為 <see langword="null" /></returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetTypedValue(System.Object)">
      <summary vsli:raw="Sets the typed value of the current node.">設定目前節點的類型值。</summary>
      <param name="typedValue" vsli:raw="The new typed value of the node.">節點的新類型值。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support the type of the object specified.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援指定的物件類型。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value specified cannot be &lt;see langword=&quot;null&quot; /&gt;.">指定的值不可為 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element or attribute node.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不在項目或屬性節點上。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.SetValue(System.String)">
      <summary vsli:raw="Sets the value of the current node.">設定目前節點的值。</summary>
      <param name="value" vsli:raw="The new value of the node.">節點的新值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The value parameter is &lt;see langword=&quot;null&quot; /&gt;.">這個值參數是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is positioned on the root node, a namespace node, or the specified value is invalid.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 位於根節點、命名空間節點，或指定值無效。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; does not support editing.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 不支援編輯。</exception>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.System#ICloneable#Clone">
      <summary vsli:raw="Creates a new copy of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">建立 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的新複本。</summary>
      <returns vsli:raw="A new copy of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的新複本。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ToString">
      <summary vsli:raw="Gets the text value of the current node.">取得目前節點的文字值。</summary>
      <returns vsli:raw="A &lt;see langword=&quot;string&quot; /&gt; that contains the text value of the current node.">
        <see langword="string" />，包含目前節點的文字值。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary vsli:raw="Gets the current node's value as the &lt;see cref=&quot;T:System.Type&quot; /&gt; specified, using the &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object specified to resolve namespace prefixes.">取得目前節點的值做為指定的 <see cref="T:System.Type" />，透過的方式是使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件來解析命名空間前置詞。</summary>
      <param name="returnType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to return the current node's value as.">
        <see cref="T:System.Type" />，將目前節點的值以這個形式傳回。</param>
      <param name="nsResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.IXmlNamespaceResolver&quot; /&gt; object used to resolve namespace prefixes.">
        <see cref="T:System.Xml.IXmlNamespaceResolver" /> 物件，用於解析命名空間前置詞。</param>
      <exception cref="T:System.FormatException" vsli:raw="The current node's value is not in the correct format for the target type.">目前節點的值的格式對於目標型別不正確。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast is not valid.">嘗試的轉換無效。</exception>
      <returns vsli:raw="The value of the current node as the &lt;see cref=&quot;T:System.Type&quot; /&gt; requested.">如所要求的 <see cref="T:System.Type" /> 的目前節點的值。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNavigator.WriteSubtree(System.Xml.XmlWriter)">
      <summary vsli:raw="Streams the current node and its child nodes to the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object specified.">將目前節點和其子節點的資料流導向指定的 <see cref="T:System.Xml.XmlWriter" /> 物件。</summary>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; object to stream to.">要將資料流導向其中的 <see cref="T:System.Xml.XmlWriter" /> 物件。</param>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.BaseURI">
      <summary vsli:raw="When overridden in a derived class, gets the base URI for the current node.">在衍生類別中覆寫時，取得目前節點的基底 (Base) URI。</summary>
      <returns vsli:raw="The location from which the node was loaded, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if there is no value.">節點載入的來源位置，如果沒有任何值，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.CanEdit">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; can edit the underlying XML data.">取得值，指出 <see cref="T:System.Xml.XPath.XPathNavigator" /> 是否可以編輯底層 XML 資料。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; can edit the underlying XML data; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 可以編輯基礎 XML 資料，則為，否則為 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasAttributes">
      <summary vsli:raw="Gets a value that indicates whether the current node has any attributes.">取得值，指出目前節點是否具有任何屬性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has attributes; returns &lt;see langword=&quot;false&quot; /&gt; if the current node has no attributes, or if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; is not positioned on an element node.">
        <see langword="true" /> 如果目前節點具有屬性， <see langword="false" /> 如果目前節點沒有屬性，或不在專案節點上，則傳回 <see cref="T:System.Xml.XPath.XPathNavigator" /> 。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.HasChildren">
      <summary vsli:raw="Gets a value that indicates whether the current node has any child nodes.">取得值，指出目前節點是否具有任何子節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node has any child nodes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的節點有任何子節點，則為 <see langword="true" />，否則會傳回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.InnerXml">
      <summary vsli:raw="Gets or sets the markup representing the child nodes of the current node.">取得或設定表示目前節點之子節點的標記。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Xml.XPath.XPathNavigator.InnerXml&quot; /&gt; property cannot be set.">無法設定 <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" /> 屬性。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the markup of the child nodes of the current node.">
        <see cref="T:System.String" />，包含目前節點之子節點的標記。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsEmptyElement">
      <summary vsli:raw="When overridden in a derived class, gets a value that indicates whether the current node is an empty element without an end element tag.">在衍生類別中覆寫時，取得值，指出目前的節點是否為空元素，且沒有結尾元素標記。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current node is an empty element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果目前的節點為空項目，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.IsNode">
      <summary vsli:raw="Gets a value that indicates if the current node represents an XPath node.">取得值，指出目前的節點是否表示 XPath 節點。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">一律傳回 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.LocalName">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;P:System.Xml.XPath.XPathNavigator.Name&quot; /&gt; of the current node without any namespace prefix.">在衍生類別中覆寫時，取得目前節點的 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />，而不含任何命名空間前置詞。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the local name of the current node, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node does not have a name (for example, text or comment nodes).">
        <see cref="T:System.String" />，包含目前節點的區域名稱；如果目前節點沒有名稱 (例如文字或註解節點)，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Name">
      <summary vsli:raw="When overridden in a derived class, gets the qualified name of the current node.">在衍生類別中覆寫時，取得目前節點的限定名稱。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the qualified &lt;see cref=&quot;P:System.Xml.XPath.XPathNavigator.Name&quot; /&gt; of the current node, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node does not have a name (for example, text or comment nodes).">
        <see cref="T:System.String" /> 包含目前節點的限定 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />；如果目前節點沒有名稱 (例如文字或註解節點)，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NamespaceURI">
      <summary vsli:raw="When overridden in a derived class, gets the namespace URI of the current node.">在衍生類別中覆寫時，取得目前節點的命名空間 URI。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace URI of the current node, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node has no namespace URI.">
        <see cref="T:System.String" />，包含目前節點的命名空間 URI；如果目前節點沒有命名空間 URI，則為 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NameTable">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">在衍生類別中覆寫時，取得 <see cref="T:System.Xml.XmlNameTable" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlNameTable&quot; /&gt; object enabling you to get the atomized version of a &lt;see cref=&quot;T:System.String&quot; /&gt; within the XML document.">
        <see cref="T:System.Xml.XmlNameTable" /> 物件，可讓您取得 XML 文件中的原子化版本的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NavigatorComparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; used for equality comparison of &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects.">取得 <see cref="T:System.Collections.IEqualityComparer" />，其用於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的相等比較。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; used for equality comparison of &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; objects.">
        <see cref="T:System.Collections.IEqualityComparer" /> 用於 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件的相等比較。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.NodeType">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; of the current node.">在衍生類別中覆寫時，取得目前節點的 <see cref="T:System.Xml.XPath.XPathNodeType" />。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; values representing the current node.">代表目前節點的其中一個 <see cref="T:System.Xml.XPath.XPathNodeType" /> 值。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.OuterXml">
      <summary vsli:raw="Gets or sets the markup representing the opening and closing tags of the current node and its child nodes.">取得或設定標記，表示目前節點和其子節點的開頭和結尾標記。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the markup representing the opening and closing tags of the current node and its child nodes.">包含標記的 <see cref="T:System.String" />，表示目前節點和其子節點的開頭和結尾標記。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.Prefix">
      <summary vsli:raw="When overridden in a derived class, gets the namespace prefix associated with the current node.">在衍生類別中覆寫時，取得與目前節點相關聯的命名空間前置詞。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the namespace prefix associated with the current node.">
        <see cref="T:System.String" />，包含與目前節點相關聯的命名空間前置詞。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.SchemaInfo">
      <summary vsli:raw="Gets the schema information that has been assigned to the current node as a result of schema validation.">取得在結構描述驗證之後已指派給目前節點的結構描述資訊。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.IXmlSchemaInfo&quot; /&gt; object that contains the schema information for the current node.">
        <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 物件，包含目前節點的結構描述資訊。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.TypedValue">
      <summary vsli:raw="Gets the current node as a boxed object of the most appropriate .NET type.">取得目前的節點，做為最適當的 .NET Framework 類型的 Boxed 物件。</summary>
      <returns vsli:raw="The current node as a boxed object of the most appropriate .NET type.">目前的節點，做為最適當的 .NET Framework 類型的 Boxed 物件。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.UnderlyingObject">
      <summary vsli:raw="Used by &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; implementations which provide a &quot;virtualized&quot; XML view over a store, to provide access to underlying objects.">由 <see cref="T:System.Xml.XPath.XPathNavigator" /> 實作所使用，此實作可以提供存放區上的「虛擬化」XML 檢視，或是提供基礎物件的存取。</summary>
      <returns vsli:raw="The default is &lt;see langword=&quot;null&quot; /&gt;.">預設為 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsBoolean">
      <summary vsli:raw="Gets the current node's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">取得目前的節點值做為 <see cref="T:System.Boolean" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">目前節點的字串值不能轉換為 <see cref="T:System.Boolean" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Boolean&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Boolean" /> 無效。</exception>
      <returns vsli:raw="The current node's value as a &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">目前節點的值，為 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDateTime">
      <summary vsli:raw="Gets the current node's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">取得目前的節點值做為 <see cref="T:System.DateTime" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">目前節點的字串值不能轉換為 <see cref="T:System.DateTime" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.DateTime&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.DateTime" /> 無效。</exception>
      <returns vsli:raw="The current node's value as a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">目前節點的值，為 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsDouble">
      <summary vsli:raw="Gets the current node's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">取得目前的節點值做為 <see cref="T:System.Double" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">目前節點的字串值不能轉換為 <see cref="T:System.Double" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Double&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Double" /> 無效。</exception>
      <returns vsli:raw="The current node's value as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">目前節點的值，為 <see cref="T:System.Double" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsInt">
      <summary vsli:raw="Gets the current node's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">取得目前的節點值做為 <see cref="T:System.Int32" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">目前節點的字串值不能轉換為 <see cref="T:System.Int32" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int32&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Int32" /> 無效。</exception>
      <returns vsli:raw="The current node's value as an &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">目前節點的值，做為 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueAsLong">
      <summary vsli:raw="Gets the current node's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">取得目前的節點值做為 <see cref="T:System.Int64" />。</summary>
      <exception cref="T:System.FormatException" vsli:raw="The current node's string value cannot be converted to a &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">目前節點的字串值不能轉換為 <see cref="T:System.Int64" />。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The attempted cast to &lt;see cref=&quot;T:System.Int64&quot; /&gt; is not valid.">嘗試轉換成 <see cref="T:System.Int64" /> 無效。</exception>
      <returns vsli:raw="The current node's value as an &lt;see cref=&quot;T:System.Int64&quot; /&gt;.">目前節點的值，做為 <see cref="T:System.Int64" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.ValueType">
      <summary vsli:raw="Gets the .NET &lt;see cref=&quot;T:System.Type&quot; /&gt; of the current node.">取得目前節點的 .NET Framework <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The .NET &lt;see cref=&quot;T:System.Type&quot; /&gt; of the current node. The default value is &lt;see cref=&quot;T:System.String&quot; /&gt;.">目前節點的 .NET Framework <see cref="T:System.Type" />。 預設值是 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlLang">
      <summary vsli:raw="Gets the &lt;c&gt;xml:lang&lt;/c&gt; scope for the current node.">取得目前節點的 <c>xml:lang</c> 範圍。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the value of the &lt;c&gt;xml:lang&lt;/c&gt; scope, or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; if the current node has no &lt;c&gt;xml:lang&lt;/c&gt; scope value to return.">
        <see cref="T:System.String" />，其中包含<c>xml： lang</c>範圍的值，或者， <see cref="F:System.String.Empty" /> 如果目前節點沒有要傳回的<c>xml： lang</c>範圍值，則為。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNavigator.XmlType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; information for the current node.">取得目前節點的 <see cref="T:System.Xml.Schema.XmlSchemaType" /> 資訊。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Schema.XmlSchemaType&quot; /&gt; object; default is &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Schema.XmlSchemaType" /> 物件；預設值為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeIterator">
      <summary vsli:raw="Provides an iterator over a selected set of nodes.">提供一組選取節點的迭代器</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; class.">初始化 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.Clone">
      <summary vsli:raw="When overridden in a derived class, returns a clone of this &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; object.">在衍生類別中覆寫時，傳回這個 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件的複製。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; object clone of this &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; object.">這個 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件的新 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 物件複製。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object to iterate through the selected node set.">傳回 <see cref="T:System.Collections.IEnumerator" /> 物件，逐一查看選取的節點集。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object to iterate through the selected node set.">
        <see cref="T:System.Collections.IEnumerator" /> 物件，逐一查看選取的節點集。</returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.MoveNext">
      <summary vsli:raw="When overridden in a derived class, moves the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object returned by the &lt;see cref=&quot;P:System.Xml.XPath.XPathNodeIterator.Current&quot; /&gt; property to the next node in the selected node set.">在衍生類別中覆寫時，將 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" /> 屬性所傳回的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件移至選取節點集內的下一個節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object moved to the next node; &lt;see langword=&quot;false&quot; /&gt; if there are no more selected nodes.">如果 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件移至下一個節點，則為 <see langword="true" />；如果沒有其他選取的節點，則為 <see langword="false" /></returns>
    </member>
    <member name="M:System.Xml.XPath.XPathNodeIterator.System#ICloneable#Clone">
      <summary vsli:raw="Creates a new object that is a copy of the current instance.">建立目前執行個體複本的新物件。</summary>
      <returns vsli:raw="A new object that is a copy of this instance.">這個執行個體複本的新物件。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Count">
      <summary vsli:raw="Gets the index of the last node in the selected set of nodes.">取得選取節點集中最後一個節點的索引。</summary>
      <returns vsli:raw="The index of the last node in the selected set of nodes, or 0 if there are no selected nodes.">所選取節點集中最後一個節點的索引，如果沒有選取的節點，則為 0。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.Current">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object for this &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt;, positioned on the current context node.">在衍生類別中覆寫時，取得這個 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，該物件位於目前的內容節點上。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object positioned on the context node from which the node set was selected. The &lt;see cref=&quot;M:System.Xml.XPath.XPathNodeIterator.MoveNext&quot; /&gt; method must be called to move the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeIterator&quot; /&gt; to the first node in the selected set.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，位於所選取節點集的內容節點上。 您必須呼叫 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" /> 方法，將 <see cref="T:System.Xml.XPath.XPathNodeIterator" /> 移至所選取節點集的第一個節點上。</returns>
    </member>
    <member name="P:System.Xml.XPath.XPathNodeIterator.CurrentPosition">
      <summary vsli:raw="When overridden in a derived class, gets the index of the current position in the selected set of nodes.">在衍生類別中覆寫時，取得選取節點集中目前位置的索引。</summary>
      <returns vsli:raw="The index of the current position.">目前位置的索引。</returns>
    </member>
    <member name="T:System.Xml.XPath.XPathNodeType">
      <summary vsli:raw="Defines the XPath node types that can be returned from the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">定義 XPath 節點型別，該型別可從 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別傳回。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.All">
      <summary vsli:raw="Any of the &lt;see cref=&quot;T:System.Xml.XPath.XPathNodeType&quot; /&gt; node types.">任何 <see cref="T:System.Xml.XPath.XPathNodeType" /> 節點型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Attribute">
      <summary vsli:raw="An attribute, such as &lt;c&gt;id='123'&lt;/c&gt;.">屬性，例如 <c>id='123'</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Comment">
      <summary vsli:raw="A comment, such as &lt;c&gt;&amp;lt;!-- my comment --&amp;gt;&lt;/c&gt;.">註解，例如 <c>&lt;!-- my comment --&gt;</c></summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Element">
      <summary vsli:raw="An element, such as &lt;c&gt;&amp;lt;element&amp;gt;&lt;/c&gt;.">元素，例如 <c>&lt;element&gt;</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Namespace">
      <summary vsli:raw="A namespace, such as &lt;c&gt;xmlns=&quot;namespace&quot;&lt;/c&gt;.">命名空間，例如 <c>xmlns="namespace"</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.ProcessingInstruction">
      <summary vsli:raw="A processing instruction, such as &lt;c&gt;&amp;lt;?pi test?&amp;gt;&lt;/c&gt;. This does not include XML declarations, which are not visible to the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; class.">處理表示，例如 <c>&lt;?pi test?&gt;</c>。 它不包括 XML 宣告，其對 <see cref="T:System.Xml.XPath.XPathNavigator" /> 類別不可見。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Root">
      <summary vsli:raw="The root node of the XML document or node tree.">XML 文件或節點樹狀目錄的根節點。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.SignificantWhitespace">
      <summary vsli:raw="A node with white space characters and &lt;c&gt;xml:space&lt;/c&gt; set to &lt;c&gt;preserve&lt;/c&gt;.">有空白字元的節點，且節點的 <c>xml:space</c> 設為 <c>preserve</c>。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Text">
      <summary vsli:raw="The text content of a node. Equivalent to the Document Object Model (DOM) Text and CDATA node types. Contains at least one character.">節點的文字內容。 文件物件模型 (DOM) 文字和 CDATA 節點型別的相同對應項。 包含至少一個字元。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathNodeType.Whitespace">
      <summary vsli:raw="A node with only white space characters and no significant white space. White space characters are &lt;c&gt;#x20&lt;/c&gt;, &lt;c&gt;#x9&lt;/c&gt;, &lt;c&gt;#xD&lt;/c&gt;, or &lt;c&gt;#xA&lt;/c&gt;.">只具有泛空白字元，但沒有顯著性泛空白字元的節點。 空白字元為 <c>#x20</c>、<c>#x9</c>、<c>#xD</c> 或 <c>#xA</c>。</summary>
    </member>
    <member name="T:System.Xml.XPath.XPathResultType">
      <summary vsli:raw="Specifies the return type of the XPath expression.">指定 XPath 運算式的傳回型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Any">
      <summary vsli:raw="Any of the XPath node types.">任何 XPath 節點型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Boolean">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt; value.">
        <see cref="T:System.Boolean" />
        <see langword="true" /> 或 <see langword="false" /> 值。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Error">
      <summary vsli:raw="The expression does not evaluate to the correct XPath type.">這個運算式不會判定為正確的 XPath 型別。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Navigator">
      <summary vsli:raw="A tree fragment.">樹狀結構片段。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.NodeSet">
      <summary vsli:raw="A node collection.">節點集合。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.Number">
      <summary vsli:raw="A numeric value.">數值。</summary>
    </member>
    <member name="F:System.Xml.XPath.XPathResultType.String">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; value.">
        <see cref="T:System.String" /> 值。</summary>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextFunction">
      <summary vsli:raw="Provides an interface to a given function defined in the Extensible Stylesheet Language for Transformations (XSLT) style sheet during runtime execution.">將介面提供給指定的函式，該函式於 Run Time 時在可延伸樣式表語言轉換 (XSLT) 樣式表中定義。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextFunction.Invoke(System.Xml.Xsl.XsltContext,System.Object[],System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Provides the method to invoke the function with the given arguments in the given context.">提供以指定內容中的指定引數來叫用函式的方法。</summary>
      <param name="xsltContext" vsli:raw="The XSLT context for the function call.">函式呼叫的 XSLT 內容。</param>
      <param name="args" vsli:raw="The arguments of the function call. Each argument is an element in the array.">函式呼叫的引數。 每個引數都是陣列中的元素。</param>
      <param name="docContext" vsli:raw="The context node for the function call.">函式呼叫的內容節點。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the return value of the function.">
        <see cref="T:System.Object" />，表示函式的傳回值。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ArgTypes">
      <summary vsli:raw="Gets the supplied XML Path Language (XPath) types for the function's argument list. This information can be used to discover the signature of the function which allows you to differentiate between overloaded functions.">取得已提供給函式引數清單的 XML 路徑語言 (XPath) 型別。 這個資訊可用來探索函式簽章 (Signature)，讓您辨別多載函式 (Overloaded Function) 間的差異。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the types for the function's argument list.">
        <see cref="T:System.Xml.XPath.XPathResultType" /> 的陣列，表示函式引數清單的型別。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Maxargs">
      <summary vsli:raw="Gets the maximum number of arguments for the function. This enables the user to differentiate between overloaded functions.">取得函式引數的最大數目。 這能讓使用者辨別多載函式間的差異。</summary>
      <returns vsli:raw="The maximum number of arguments for the function.">函式引數的最大數目。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.Minargs">
      <summary vsli:raw="Gets the minimum number of arguments for the function. This enables the user to differentiate between overloaded functions.">取得函式引數的最小數目。 這能讓使用者辨別多載函式間的差異。</summary>
      <returns vsli:raw="The minimum number of arguments for the function.">函式引數的最小數目。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextFunction.ReturnType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XPath type returned by the function.">取得 <see cref="T:System.Xml.XPath.XPathResultType" />，表示由函式傳回的 XPath 型別。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XPath type returned by the function.">
        <see cref="T:System.Xml.XPath.XPathResultType" />，表示由函式傳回的 XPath 型別。</returns>
    </member>
    <member name="T:System.Xml.Xsl.IXsltContextVariable">
      <summary vsli:raw="Provides an interface to a given variable that is defined in the style sheet during runtime execution.">將介面提供給指定的變數，該變數於 Run Time 時在樣式表中定義。</summary>
    </member>
    <member name="M:System.Xml.Xsl.IXsltContextVariable.Evaluate(System.Xml.Xsl.XsltContext)">
      <summary vsli:raw="Evaluates the variable at runtime and returns an object that represents the value of the variable.">在執行階段評估變數並傳回表示變數值的物件。</summary>
      <param name="xsltContext" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltContext&quot; /&gt; representing the execution context of the variable.">
        <see cref="T:System.Xml.Xsl.XsltContext" />，表示變數的執行內容。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the value of the variable. Possible return types include number, string, Boolean, document fragment, or node set.">
        <see cref="T:System.Object" />，表示變數值。 可能的傳回型別包括數字、字串、布林值、文件片段或節點集。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsLocal">
      <summary vsli:raw="Gets a value indicating whether the variable is local.">取得值，表示這個變數是否為區域變數。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the variable is a local variable in the current context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果變數是目前內容中的區域變數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.IsParam">
      <summary vsli:raw="Gets a value indicating whether the variable is an Extensible Stylesheet Language Transformations (XSLT) parameter. This can be a parameter to a style sheet or a template.">取得值，表示變數是否為可延伸樣式表語言轉換 (XSLT) 參數。 它可以是樣式表或樣板的參數。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the variable is an XSLT parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果變數是 XSLT 參數，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.IXsltContextVariable.VariableType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XML Path Language (XPath) type of the variable.">取得 <see cref="T:System.Xml.XPath.XPathResultType" />，表示變數的 XML 路徑語言 (XPath) 型別。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XPath.XPathResultType&quot; /&gt; representing the XPath type of the variable.">
        <see cref="T:System.Xml.XPath.XPathResultType" />，表示變數的 XPath 型別。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XslCompiledTransform">
      <summary vsli:raw="Transforms XML data using an XSLT style sheet.">使用 XSLT 樣式表轉換 XML 資料。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XslCompiledTransform&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XslCompiledTransform&quot; /&gt; class with the specified debug setting.">使用指定的偵錯設定，初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 類別的新執行個體。</summary>
      <param name="enableDebug" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate debug information; otherwise &lt;see langword=&quot;false&quot; /&gt;. Setting this to &lt;see langword=&quot;true&quot; /&gt; enables you to debug the style sheet with the Microsoft Visual Studio Debugger.">
        <see langword="true" /> 表示產生偵錯資訊，否則為 <see langword="false" />。 將它設為 <see langword="true" />，可讓您用 Microsoft Visual Studio 偵錯工具對樣式表進行偵錯。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])">
      <summary vsli:raw="Loads a method from a style sheet compiled using the &lt;see langword=&quot;XSLTC.exe&quot; /&gt; utility.">從使用 <see langword="XSLTC.exe" /> 公用程式編譯的樣式表中載入方法。</summary>
      <param name="executeMethod" vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the compiler-generated &lt;c&gt;execute&lt;/c&gt; method of the compiled style sheet.">
        <see cref="T:System.Reflection.MethodInfo" /> 物件，表示已編譯樣式表之編譯器產生的 <c>execute</c> 方法。</param>
      <param name="queryData" vsli:raw="A byte array of serialized data structures in the &lt;c&gt;staticData&lt;/c&gt; field of the compiled style sheet as generated by the &lt;see cref=&quot;M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)&quot; /&gt; method.">
        <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 方法產生的已編譯樣式表中，<c>staticData</c> 欄位中序列化資料結構的位元組陣列。</param>
      <param name="earlyBoundTypes" vsli:raw="An array of types stored in the compiler-generated &lt;c&gt;ebTypes&lt;/c&gt; field of the compiled style sheet.">類型陣列，儲存在已編譯樣式表之編譯器產生的 <c>ebTypes</c> 欄位中。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)">
      <summary vsli:raw="Loads and compiles the style sheet located at the specified URI.">載入並編譯位於指定之 URI 的樣式表。</summary>
      <param name="stylesheetUri" vsli:raw="The URI of the style sheet.">樣式表的 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheetUri" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">此樣式表包含錯誤。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The style sheet cannot be found.">找不到樣式表。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value includes a filename or directory that cannot be found.">
        <paramref name="stylesheetUri" /> 值包含找不到的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法保留 <paramref name="stylesheetUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;stylesheetUri&quot; /&gt; is not a valid URI.">
        <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the style sheet.">載入樣式表時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads and compiles the XSLT style sheet specified by the URI. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves any XSLT &lt;c&gt;import&lt;/c&gt; or &lt;c&gt;include&lt;/c&gt; elements and the XSLT settings determine the permissions for the style sheet.">載入並編譯 URI 所指定的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
      <param name="stylesheetUri" vsli:raw="The URI of the style sheet.">樣式表的 URI。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; to apply to the style sheet. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.Default&quot; /&gt; setting is applied.">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
      <param name="stylesheetResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the style sheet URI and any style sheets referenced in XSLT &lt;c&gt;import&lt;/c&gt; and &lt;c&gt;include&lt;/c&gt; elements.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析樣式表 URI 和 XSLT <c>import</c> 與 <c>include</c> 元素中參考的任何樣式表。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; or &lt;paramref name=&quot;stylesheetResolver&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheetUri" /> 或 <paramref name="stylesheetResolver" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">此樣式表包含錯誤。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The style sheet cannot be found.">找不到樣式表。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value includes a filename or directory that cannot be found.">
        <paramref name="stylesheetUri" /> 值包含找不到的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;stylesheetUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法保留 <paramref name="stylesheetUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;stylesheetUri&quot; /&gt; is not a valid URI.">
        <paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the style sheet.">載入樣式表時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)">
      <summary vsli:raw="Loads the compiled style sheet that was created using the XSLT Compiler (xsltc.exe).">載入已編譯的樣式表，此樣式表是使用 XSLT 編譯器 (xsltc.exe)所建立的。</summary>
      <param name="compiledStylesheet" vsli:raw="The name of the class that contains the compiled style sheet.  &#xA;  &#xA; This is usually the name of the style sheet. Unless otherwise specified, the xsltc.exe tool uses the name of the style sheet for the class and assembly names.">包含已編譯樣式表的類別名稱。  
  
 這通常是樣式表名稱。 除非另有指定，否則 xsltc.exe 工具會將樣式表名稱使用於類別和組件名稱。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Compiles the style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">編譯包含在 <see cref="T:System.Xml.XmlReader" /> 中的樣式表。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the style sheet.">包含樣式表的 <see cref="T:System.Xml.XmlReader" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary vsli:raw="Compiles the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves any XSLT &lt;c&gt;import&lt;/c&gt; or &lt;c&gt;include&lt;/c&gt; elements and the XSLT settings determine the permissions for the style sheet.">編譯包含在 <see cref="T:System.Xml.XmlReader" /> 中的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
      <param name="stylesheet" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the style sheet.">包含樣式表的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; to apply to the style sheet. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.Default&quot; /&gt; setting is applied.">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
      <param name="stylesheetResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve any style sheets referenced in XSLT &lt;c&gt;import&lt;/c&gt; and &lt;c&gt;include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>import</c> 和 <c>include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary vsli:raw="Compiles the style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object.">編譯包含在 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件中的樣式表。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the style sheet.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或包含樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)">
      <summary vsli:raw="Compiles the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves any XSLT &lt;c&gt;import&lt;/c&gt; or &lt;c&gt;include&lt;/c&gt; elements and the XSLT settings determine the permissions for the style sheet.">編譯包含在 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XSLT 樣式表。 <see cref="T:System.Xml.XmlResolver" /> 會解析所有 XSLT <c>import</c> 或 <c>include</c> 元素，且 XSLT 設定會決定樣式表的權限。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the style sheet.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或包含樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="settings" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; to apply to the style sheet. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.Default&quot; /&gt; setting is applied.">套用至樣式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果這是 <see langword="null" />，則會套用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 設定。</param>
      <param name="stylesheetResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve any style sheets referenced in XSLT &lt;c&gt;import&lt;/c&gt; and &lt;c&gt;include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>import</c> 和 <c>include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;stylesheet&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stylesheet" /> 值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="The style sheet contains an error.">此樣式表包含錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to a file.">使用 URI 所指定的輸入文件執行轉換，並將結果輸出至檔案。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">輸入文件的 URI。</param>
      <param name="resultsFile" vsli:raw="The URI of the output file.">輸出檔案的 URI。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The input document cannot be found.">找不到輸入文件。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; value includes a filename or directory cannot be found.">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值包含找不到的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法解析 <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值。  
  
-或- 
處理要求時發生錯誤</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;resultsFile&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">輸入文件的 URI。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value includes a filename or directory cannot be found.">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to stream. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 URI 所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">輸入文件的 URI。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value includes a filename or directory cannot be found.">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理要求時發生錯誤</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">輸入文件的 URI。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value includes a filename or directory cannot be found.">找不到 <paramref name="inputUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理要求時發生錯誤</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the URI and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 URI 所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="inputUri" vsli:raw="The URI of the input document.">輸入文件的 URI。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="inputUri" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
      <exception cref="T:System.IO.DirectoryNotFoundException" vsli:raw="The &lt;paramref name=&quot;inputtUri&quot; /&gt; value includes a filename or directory cannot be found.">找不到 <paramref name="inputtUri" /> 值所包含的檔案名稱或目錄。</exception>
      <exception cref="T:System.Net.WebException" vsli:raw="The &lt;paramref name=&quot;inputUri&quot; /&gt; value cannot be resolved.  &#xA;  &#xA; -or-  &#xA;  &#xA; An error occurred while processing the request.">無法保留 <paramref name="inputUri" /> 值。  
  
-或- 
處理這個要求時發生錯誤。</exception>
      <exception cref="T:System.UriFormatException" vsli:raw="&lt;paramref name=&quot;inputUri&quot; /&gt; is not a valid URI.">
        <paramref name="inputUri" /> 不是有效的 URI。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="There was a parsing error loading the input document.">載入輸入文件時，發生剖析錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to a stream. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments and the XmlResolver resolves the XSLT &lt;c&gt;document()&lt;/c&gt; function.">使用 <see cref="T:System.Xml.XmlReader" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數，且 XmlResolver 會解析 XSLT <c>document()</c> 函式。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the input document.">包含輸入文件的 <see cref="T:System.Xml.XmlReader" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <param name="documentResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to a stream. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional runtime arguments.">使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至資料流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Executes the transform using the input document specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments.">使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the Microsoft .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 Microsoft .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或是包含要轉換的資料的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="arguments" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transform. This value can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用來當做轉換輸入之符合命名空間的引數。 這個值可以是 <see langword="null" />。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;c&gt;xsl:output&lt;/c&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <c>xsl:output</c> 元素，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" />物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; or &lt;paramref name=&quot;results&quot; /&gt; value is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> 或 <paramref name="results" /> 的值為 <see langword="null" />。</exception>
      <exception cref="T:System.Xml.Xsl.XsltException" vsli:raw="There was an error executing the XSLT transform.">執行 XSLT 轉換時發生錯誤。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Executes the transform by using the input document that is specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object and outputs the results to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;. The &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; provides additional run-time arguments and the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; resolves the XSLT &lt;see langword=&quot;document()&quot; /&gt; function.">使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件所指定的輸入文件執行轉換，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 會提供額外的執行階段引數，且 <see cref="T:System.Xml.XmlResolver" /> 會解析 XSLT <see langword="document()" /> 函式。</summary>
      <param name="input" vsli:raw="The document to transform that is specified by the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; object.">
        <see cref="T:System.Xml.XPath.IXPathNavigable" /> 物件指定要轉換的文件。</param>
      <param name="arguments" vsli:raw="Argument list as &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">做為 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 的引數清單。</param>
      <param name="results" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.  &#xA;  &#xA; If the style sheet contains an &lt;see langword=&quot;xsl:output&quot; /&gt; element, you should create the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; by using the &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object that is returned from the &lt;see cref=&quot;P:System.Xml.Xsl.XslCompiledTransform.OutputSettings&quot; /&gt; property. This ensures that the &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; has the correct output settings.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。  
  
如果樣式表包含 <see langword="xsl:output" /> 項目，您應該使用從 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 屬性傳回的 <see cref="T:System.Xml.XmlWriterSettings" /> 物件建立 <see cref="T:System.Xml.XmlWriter" />。 如此可確保 <see cref="T:System.Xml.XmlWriter" /> 具有正確的輸出設定。</param>
      <param name="documentResolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;see langword=&quot;document()&quot; /&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;document()&quot; /&gt; function is not resolved.">
        <see cref="T:System.Xml.XmlResolver" />，用於解析 XSLT <see langword="document()" /> 函式。 如果值為 <see langword="null" />，則不會解析 <see langword="document()" /> 函式。</param>
    </member>
    <member name="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object that contains the output information derived from the &lt;c&gt;xsl:output&lt;/c&gt; element of the style sheet.">取得 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，其中包含衍生自樣式表之 <c>xsl:output</c> 元素的輸出資訊。</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Xml.XmlWriterSettings&quot; /&gt; object that contains the output information derived from the &lt;c&gt;xsl:output&lt;/c&gt; element of the style sheet. This value can be &lt;see langword=&quot;null&quot; /&gt;.">唯讀 <see cref="T:System.Xml.XmlWriterSettings" /> 物件，包含衍生自樣式表單之 <c>xsl： output</c> 元素的輸出資訊。 這個值可以是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltArgumentList">
      <summary vsli:raw="Contains a variable number of arguments which are either XSLT parameters or extension objects.">包含引數的變數，引數為 XSLT 參數或延伸物件 (Extension Object)。</summary>
    </member>
    <member name="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered">
      <summary vsli:raw="Occurs when a message is specified in the style sheet by the &lt;c&gt;xsl:message&lt;/c&gt; element.">發生於 <c>xsl:message</c> 元素在樣式表中指定訊息時。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.#ctor">
      <summary vsli:raw="Implements a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">實作 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)">
      <summary vsli:raw="Adds a new object to the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; and associates it with the namespace URI.">將新物件加入至 <see cref="T:System.Xml.Xsl.XsltArgumentList" />，並將其與命名空間 URI 相關聯。</summary>
      <param name="namespaceUri" vsli:raw="The namespace URI to associate with the object. To use the default namespace, specify an empty string.">與物件關聯的命名空間 URI。 若要使用預設的命名空間，請指定空字串。</param>
      <param name="extension" vsli:raw="The object to add to the list.">要加入至清單的物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;namespaceUri&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or http://www.w3.org/1999/XSL/Transform  &#xA;  &#xA; The &lt;paramref name=&quot;namespaceUri&quot; /&gt; already has an extension object associated with it.">
        <paramref name="namespaceUri" /> 為 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform 
<paramref name="namespaceUri" /> 已經有與其相關的擴充物件。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have sufficient permissions to call this method.">呼叫端沒有足夠的使用權限呼叫這個方法。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.AddParam(System.String,System.String,System.Object)">
      <summary vsli:raw="Adds a parameter to the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; and associates it with the namespace qualified name.">將參數加入至 <see cref="T:System.Xml.Xsl.XsltArgumentList" />，並將其與命名空間限定名稱相關聯。</summary>
      <param name="name" vsli:raw="The name to associate with the parameter.">與參數關聯的名稱。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI to associate with the parameter. To use the default namespace, specify an empty string.">與參數關聯的命名空間 URI。 若要使用預設的命名空間，請指定空字串。</param>
      <param name="parameter" vsli:raw="The parameter value or object to add to the list.">要加入至清單的參數值或物件。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;namespaceUri&quot; /&gt; is either &lt;see langword=&quot;null&quot; /&gt; or http://www.w3.org/1999/XSL/Transform.  &#xA;  &#xA; The &lt;paramref name=&quot;name&quot; /&gt; is not a valid name according to the W3C XML specification.  &#xA;  &#xA; The &lt;paramref name=&quot;namespaceUri&quot; /&gt; already has a parameter associated with it.">
        <paramref name="namespaceUri" /> 為 <see langword="null" /> 或 http://www.w3.org/1999/XSL/Transform。  
  
根據 W3C XML 規格，<paramref name="name" /> 不是有效的名稱。  
  
<paramref name="namespaceUri" /> 已經有與其相關的參數。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.Clear">
      <summary vsli:raw="Removes all parameters and extension objects from the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">從 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除所有的參數和擴充物件。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetExtensionObject(System.String)">
      <summary vsli:raw="Gets the object associated with the given namespace.">取得與指定命名空間關聯的物件。</summary>
      <param name="namespaceUri" vsli:raw="The namespace URI of the object.">物件的命名空間 URI。</param>
      <returns vsli:raw="The namespace URI object or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">命名空間 URI 物件；如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.GetParam(System.String,System.String)">
      <summary vsli:raw="Gets the parameter associated with the namespace qualified name.">取得與名命空間限定名稱關聯的參數。</summary>
      <param name="name" vsli:raw="The name of the parameter. &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; does not check to ensure the name passed is a valid local name; however, the name cannot be &lt;see langword=&quot;null&quot; /&gt;.">參數名稱。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 不會檢查傳遞的名稱是否為有效的本機名稱，但不能為 <see langword="null" />。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI associated with the parameter.">與參數關聯的命名空間 URI。</param>
      <returns vsli:raw="The parameter object or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">參數物件，如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveExtensionObject(System.String)">
      <summary vsli:raw="Removes the object with the namespace URI from the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">從 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除有命名空間 URI 的物件。</summary>
      <param name="namespaceUri" vsli:raw="The namespace URI associated with the object to remove.">命名空間 URI，與要移除的物件相關聯。</param>
      <returns vsli:raw="The object with the namespace URI or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">具有命名空間 URI 的物件；如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltArgumentList.RemoveParam(System.String,System.String)">
      <summary vsli:raw="Removes the parameter from the &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt;.">從 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 移除參數。</summary>
      <param name="name" vsli:raw="The name of the parameter to remove. &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; does not check to ensure the name passed is a valid local name; however, the name cannot be &lt;see langword=&quot;null&quot; /&gt;.">要移除的參數名稱。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 不會檢查傳遞的名稱是否為有效的本機名稱，但不能為 <see langword="null" />。</param>
      <param name="namespaceUri" vsli:raw="The namespace URI of the parameter to remove.">命名空間 URI，屬於要移除的參數。</param>
      <returns vsli:raw="The parameter object or &lt;see langword=&quot;null&quot; /&gt; if one was not found.">參數物件，如果沒有找到物件，則為 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltCompileException">
      <summary vsli:raw="The exception that is thrown by the Load method when an error is found in the XSLT style sheet.">在 XSLT 樣式表中發現錯誤時，由 Load 方法擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltCompileException&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Exception,System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltCompileException&quot; /&gt; class.">初始化 <see langword="XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="inner" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that threw the &lt;see langword=&quot;XsltCompileException&quot; /&gt;.">擲回 <see langword="XsltCompileException" /> 的 <see cref="T:System.Exception" />。</param>
      <param name="sourceUri" vsli:raw="The location path of the style sheet.">樣式表的位置路徑。</param>
      <param name="lineNumber" vsli:raw="The line number indicating where the error occurred in the style sheet.">表示樣式表中發生錯誤的行號。</param>
      <param name="linePosition" vsli:raw="The line position indicating where the error occurred in the style sheet.">表示樣式表中發生錯誤的行位置。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltCompileException&quot; /&gt; class using the information in the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects.">使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中的資訊，初始化 <see langword="XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object containing all the properties of an &lt;see langword=&quot;XsltCompileException&quot; /&gt;.">
        <see langword="SerializationInfo" /> 物件包含 <see langword="XsltCompileException" /> 所有的屬性。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object containing the context information.">包含內容資訊的 <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltCompileException&quot; /&gt; class with a specified error message.">使用指定的錯誤訊息，初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the error.">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltCompileException&quot; /&gt; class specified error message and a reference to the inner exception that is the cause of this exception.">使用指定的錯誤訊息和導致這個例外狀況原因的內部例外狀況參考，初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the error.">描述錯誤的訊息。</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current exception, or &lt;see langword=&quot;null&quot; /&gt; if no inner exception is specified.">導致目前例外狀況發生的例外狀況；如果沒有指定任何的內部例外狀況，則為 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltCompileException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XsltCompileException&quot; /&gt; properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; class for the given &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">將所有 <see langword="XsltCompileException" /> 屬性資料流至指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object.">
        <see langword="SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="T:System.Xml.Xsl.XsltContext">
      <summary vsli:raw="Encapsulates the current execution context of the Extensible Stylesheet Language for Transformations (XSLT) processor allowing XML Path Language (XPath) to resolve functions, parameters, and namespaces within XPath expressions.">封裝可延伸樣式表語言轉換 (XSLT) 處理器的目前執行內容，可讓 XML 路徑語言 (XPath) 解析函式、參數和 XPath 運算式中的命名空間。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltContext&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Xsl.XsltContext" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.#ctor(System.Xml.NameTable)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltContext&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt;.">使用指定的 <see cref="T:System.Xml.Xsl.XsltContext" /> 初始化 <see cref="T:System.Xml.NameTable" /> 類別的新執行個體。</summary>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Xml.NameTable&quot; /&gt; to use.">要使用的 <see cref="T:System.Xml.NameTable" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.CompareDocument(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, compares the base Uniform Resource Identifiers (URIs) of two documents based upon the order the documents were loaded by the XSLT processor (that is, the &lt;see cref=&quot;T:System.Xml.Xsl.XslTransform&quot; /&gt; class).">在衍生類別中覆寫時，根據 XSLT 處理器 (即 <see cref="T:System.Xml.Xsl.XslTransform" /> 類別) 載入兩個文件的順序，比較它們的基底統一資源識別元 (URI)。</summary>
      <param name="baseUri" vsli:raw="The base URI of the first document to compare.">第一份要比較之文件的基底 URI。</param>
      <param name="nextbaseUri" vsli:raw="The base URI of the second document to compare.">第二份要比較之文件的基底 URI。</param>
      <returns vsli:raw="An integer value describing the relative order of the two base URIs: -1 if &lt;paramref name=&quot;baseUri&quot; /&gt; occurs before &lt;paramref name=&quot;nextbaseUri&quot; /&gt;; 0 if the two base URIs are identical; and 1 if &lt;paramref name=&quot;baseUri&quot; /&gt; occurs after &lt;paramref name=&quot;nextbaseUri&quot; /&gt;.">整數值，描述兩個基底 URI 的相對順序。如果 <paramref name="baseUri" /> 發生在 <paramref name="nextbaseUri" /> 之前，則為 -1；如果兩個基底 URI 相同，則為 0；如果 <paramref name="baseUri" /> 發生在 <paramref name="nextbaseUri" /> 之後，則為 1。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.PreserveWhitespace(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="When overridden in a derived class, evaluates whether to preserve white space nodes or strip them for the given context.">在衍生類別中覆寫時，會針對指定的內容來評估是否保留或刪除空白區節點。</summary>
      <param name="node" vsli:raw="The white space node that is to be preserved or stripped in the current context.">目前內容中要保留或刪除的空白區節點。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the white space is to be preserved; &lt;see langword=&quot;false&quot; /&gt; if the white space is to be stripped.">如果要保留空白區，則為 <see langword="true" />；如果要刪除空白區，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveFunction(System.String,System.String,System.Xml.XPath.XPathResultType[])">
      <summary vsli:raw="When overridden in a derived class, resolves a function reference and returns an &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextFunction&quot; /&gt; representing the function. The &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextFunction&quot; /&gt; is used at execution time to get the return value of the function.">在衍生類別中覆寫時，會解析函式參考並傳回表示函式的 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。 <see cref="T:System.Xml.Xsl.IXsltContextFunction" /> 用於在執行時間取得函式的傳回值。</summary>
      <param name="prefix" vsli:raw="The prefix of the function as it appears in the XPath expression.">函式出現在 XPath 運算式時所具有的前置詞。</param>
      <param name="name" vsli:raw="The name of the function.">函式的名稱。</param>
      <param name="ArgTypes" vsli:raw="An array of argument types for the function being resolved. This allows you to select between methods with the same name (for example, overloaded methods).">要加以解析之函式的引數型別陣列。 這讓您可以選取具有相同名稱的方法 (例如，多載方法)。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextFunction&quot; /&gt; representing the function.">表示函式的 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XsltContext.ResolveVariable(System.String,System.String)">
      <summary vsli:raw="When overridden in a derived class, resolves a variable reference and returns an &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextVariable&quot; /&gt; representing the variable.">在衍生類別中覆寫時，會解析變數參考並傳回表示變數的 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />。</summary>
      <param name="prefix" vsli:raw="The prefix of the variable as it appears in the XPath expression.">變數出現在 XPath 運算式時所具有的前置詞。</param>
      <param name="name" vsli:raw="The name of the variable.">變數的名稱。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.IXsltContextVariable&quot; /&gt; representing the variable at runtime.">
        <see cref="T:System.Xml.Xsl.IXsltContextVariable" />，表示在執行階段的變數。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltContext.Whitespace">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether to include white space nodes in the output.">在衍生類別中覆寫時，取得值，表示是否要在輸出中包含空白區 (White Space) 節點。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to check white space nodes in the source document for inclusion in the output; &lt;see langword=&quot;false&quot; /&gt; to not evaluate white space nodes. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />，表示要檢查來源文件中的空白區節點，以包含在輸出中。<see langword="false" />，表示不評估空白區節點。 預設為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltException">
      <summary vsli:raw="The exception that is thrown when an error occurs while processing an XSLT transformation.">在處理 XSLT 轉換時發生錯誤所擲回的例外狀況。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltException&quot; /&gt; class using the information in the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; objects.">使用 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 物件中的資訊，初始化 <see langword="XsltException" /> 類別的新執行個體。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object containing all the properties of an &lt;see langword=&quot;XsltException&quot; /&gt;.">
        <see langword="SerializationInfo" /> 物件包含 <see langword="XsltException" /> 所有的屬性。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; class with a specified error message.">使用指定的錯誤訊息，初始化 <see cref="T:System.Xml.Xsl.XsltException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The message that describes the error.">描述錯誤的訊息。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;XsltException&quot; /&gt; class.">初始化 <see langword="XsltException" /> 類別的新執行個體。</summary>
      <param name="message" vsli:raw="The description of the error condition.">錯誤條件的描述。</param>
      <param name="innerException" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; which threw the &lt;see langword=&quot;XsltException&quot; /&gt;, if any. This value can be &lt;see langword=&quot;null&quot; /&gt;.">擲回 <see langword="XsltException" /> 的 <see cref="T:System.Exception" /> (如果有的話)。 這個值可以是 <see langword="null" />。</param>
    </member>
    <member name="M:System.Xml.Xsl.XsltException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Streams all the &lt;see langword=&quot;XsltException&quot; /&gt; properties into the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; class for the given &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">將所有 <see langword="XsltException" /> 屬性資料流至指定之 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 類別。</summary>
      <param name="info" vsli:raw="The &lt;see langword=&quot;SerializationInfo&quot; /&gt; object.">
        <see langword="SerializationInfo" /> 物件。</param>
      <param name="context" vsli:raw="The &lt;see langword=&quot;StreamingContext&quot; /&gt; object.">
        <see langword="StreamingContext" /> 物件。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LineNumber">
      <summary vsli:raw="Gets the line number indicating where the error occurred in the style sheet.">取得表示樣式表中發生錯誤的行號。</summary>
      <returns vsli:raw="The line number indicating where the error occurred in the style sheet.">表示樣式表中發生錯誤的行號。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.LinePosition">
      <summary vsli:raw="Gets the line position indicating where the error occurred in the style sheet.">取得表示樣式表中發生錯誤的行位置。</summary>
      <returns vsli:raw="The line position indicating where the error occurred in the style sheet.">表示樣式表中發生錯誤的行位置。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.Message">
      <summary vsli:raw="Gets the formatted error message describing the current exception.">取得說明目前例外狀況的格式化錯誤訊息。</summary>
      <returns vsli:raw="The formatted error message describing the current exception.">說明目前例外狀況的格式化錯誤訊息。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltException.SourceUri">
      <summary vsli:raw="Gets the location path of the style sheet.">取得樣式表的位置路徑。</summary>
      <returns vsli:raw="The location path of the style sheet.">樣式表的位置路徑。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered&quot; /&gt; event.">提供 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件的資料。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltMessageEncounteredEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" /> 類別的新執行個體。</summary>
    </member>
    <member name="P:System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message">
      <summary vsli:raw="Gets the contents of the &lt;c&gt;xsl:message&lt;/c&gt; element.">取得 <c>xsl:message</c> 元素的內容。</summary>
      <returns vsli:raw="The contents of the &lt;c&gt;xsl:message&lt;/c&gt; element.">
        <c>Xsl： message</c>元素的內容。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltMessageEncounteredEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered&quot; /&gt; event.">表示處理 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件的來源。</param>
      <param name="e" vsli:raw="The &lt;see cref=&quot;T:System.Xml.Xsl.XsltMessageEncounteredEventArgs&quot; /&gt; containing the event data.">包含事件資料的 <see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />。</param>
    </member>
    <member name="T:System.Xml.Xsl.XslTransform">
      <summary vsli:raw="Transforms XML data using an Extensible Stylesheet Language for Transformations (XSLT) style sheet.">使用可延伸樣式表語言轉換 (XSLT) 樣式表，轉換 XML 資料。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XslTransform&quot; /&gt; class.">初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String)">
      <summary vsli:raw="Loads the XSLT style sheet specified by a URL.">載入 URL 指定的 XSLT 樣式表。</summary>
      <param name="url" vsli:raw="The URL that specifies the XSLT style sheet to load.">URL，指定要載入的 XSLT 樣式表。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded script, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet specified by a URL.">載入 URL 指定的 XSLT 樣式表。</summary>
      <param name="url" vsli:raw="The URL that specifies the XSLT style sheet to load.">URL，指定要載入的 XSLT 樣式表。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to use to load the style sheet and any style sheet(s) referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements.  &#xA;  &#xA; If this is &lt;see langword=&quot;null&quot; /&gt;, a default &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; with no user credentials is used to open the style sheet. The default &lt;see cref=&quot;T:System.Xml.XmlUrlResolver&quot; /&gt; is not used to resolve any external resources in the style sheet, so &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入樣式表和 <c>xsl:import</c> 與 <c>xsl:include</c> 元素中參考的任何樣式表。  
  
如果值為 <see langword="null" />，則會使用不具有使用者認證的預設 <see cref="T:System.Xml.XmlUrlResolver" />，開啟樣式表。 因為沒有使用預設的 <see cref="T:System.Xml.XmlUrlResolver" /> 解析樣式表中的任何外部資源，所以不會解析 <c>xsl:import</c> 和 <c>xsl:include</c> 元素。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded script, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the XSLT style sheet.">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含 XSLT 樣式表。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">載入 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; object that contains the XSLT style sheet.">
        <see cref="T:System.Xml.XmlReader" /> 物件，包含 XSLT 樣式表。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to load any style sheets referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt;.">載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the XSLT style sheet.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt;.">載入 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the XSLT style sheet.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />) 或包含 XSLT 樣式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to load any style sheets referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Load&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The loaded resource is not a valid style sheet.">載入的資源不是有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the XSLT style sheet.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含 XSLT 樣式表。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)">
      <summary vsli:raw="Loads the XSLT style sheet contained in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt;.">載入 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 樣式表。</summary>
      <param name="stylesheet" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; object that contains the XSLT style sheet.">
        <see cref="T:System.Xml.XPath.XPathNavigator" /> 物件，包含 XSLT 樣式表。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to load any style sheets referenced in &lt;c&gt;xsl:import&lt;/c&gt; and &lt;c&gt;xsl:include&lt;/c&gt; elements. If this is &lt;see langword=&quot;null&quot; /&gt;, external resources are not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Load&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來載入 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中參考的任何樣式表。 如果這個值是 <see langword="null" />，就不會對外部資源進行解析。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.Xml.Xsl.XsltCompileException" vsli:raw="The current node does not conform to a valid style sheet.">目前的節點不符合有效的樣式表。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The style sheet contains embedded scripts, and the caller does not have &lt;see langword=&quot;UnmanagedCode&quot; /&gt; permission.">樣式表包含內嵌指令碼，但呼叫端沒有 <see langword="UnmanagedCode" /> 使用權限。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)">
      <summary vsli:raw="Transforms the XML data in the input file and outputs the result to an output file.">在輸入檔案中轉換 XML 資料，並將結果輸出至輸出檔案。</summary>
      <param name="inputfile" vsli:raw="The URL of the source document to be transformed.">要轉換之來源文件的 URL。</param>
      <param name="outputfile" vsli:raw="The URL of the output file.">輸出檔案的 URL。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the input file and outputs the result to an output file.">在輸入檔案中轉換 XML 資料，並將結果輸出至輸出檔案。</summary>
      <param name="inputfile" vsli:raw="The URL of the source document to be transformed.">要轉換之來源文件的 URL。</param>
      <param name="outputfile" vsli:raw="The URL of the output file.">輸出檔案的 URL。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Transform&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成後不會加以快取。</param>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Transform&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input" vsli:raw="An object implementing the &lt;see cref=&quot;T:System.Xml.XPath.IXPathNavigable&quot; /&gt; interface. In the .NET Framework, this can be either an &lt;see cref=&quot;T:System.Xml.XmlNode&quot; /&gt; (typically an &lt;see cref=&quot;T:System.Xml.XmlDocument&quot; /&gt;), or an &lt;see cref=&quot;T:System.Xml.XPath.XPathDocument&quot; /&gt; containing the data to be transformed.">實作 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 介面的物件。 在 .NET Framework 中，這可以是 <see cref="T:System.Xml.XmlNode" /> (一般為 <see cref="T:System.Xml.XmlDocument" />)，或 <see cref="T:System.Xml.XPath.XPathDocument" />，其中包含要轉換的資料。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.Stream" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The stream to which you want to output.">要輸出至的資料流。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to a &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.IO.TextWriter" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified &lt;paramref name=&quot;args&quot; /&gt; and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt;.">使用指定的 <paramref name="args" /> 來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlReader" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.XmlReader&quot; /&gt; containing the results of the transformation.">包含轉換結果的 <see cref="T:System.Xml.XmlReader" />。</returns>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified args and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的引數來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)">
      <summary vsli:raw="Transforms the XML data in the &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; using the specified args and outputs the result to an &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt;.">使用指定的引數來轉換 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 資料，並將結果輸出至 <see cref="T:System.Xml.XmlWriter" />。</summary>
      <param name="input" vsli:raw="An &lt;see cref=&quot;T:System.Xml.XPath.XPathNavigator&quot; /&gt; containing the data to be transformed.">包含要轉換資料的 <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltArgumentList&quot; /&gt; containing the namespace-qualified arguments used as input to the transformation.">
        <see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用做轉換輸入之符合命名空間的引數。</param>
      <param name="output" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlWriter&quot; /&gt; to which you want to output.">您要輸出的目標 <see cref="T:System.Xml.XmlWriter" />。</param>
      <param name="resolver" vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve the XSLT &lt;c&gt;document()&lt;/c&gt; function. If this is &lt;see langword=&quot;null&quot; /&gt;, the &lt;c&gt;document()&lt;/c&gt; function is not resolved.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; is not cached after the &lt;see cref=&quot;M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)&quot; /&gt; method completes.">
        <see cref="T:System.Xml.XmlResolver" /> 用來解析 XSLT <c>document()</c> 函式。 如果值為 <see langword="null" />，則不會解析 <c>document()</c> 函式。  
  
<see cref="T:System.Xml.XmlResolver" /> 在 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" /> 方法完成後不會加以快取。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="There was an error processing the XSLT transformation.  &#xA;  &#xA; Note: This is a change in behavior from earlier versions. An &lt;see cref=&quot;T:System.Xml.Xsl.XsltException&quot; /&gt; is thrown if you are using Microsoft .NET Framework version 1.1 or earlier.">處理 XSLT 轉換時發生錯誤。  
  
注意：這是先前版本的行為變更之一。 如果您使用的是 Microsoft .NET Framework 1.1 版 (含) 以前的版本，則會擲回 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
    </member>
    <member name="P:System.Xml.Xsl.XslTransform.XmlResolver">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; used to resolve external resources when the &lt;see cref=&quot;Overload:System.Xml.Xsl.XslTransform.Transform&quot; /&gt; method is called.">呼叫 <see cref="T:System.Xml.XmlResolver" /> 方法時，設定用來解析外部資源的 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Xml.XmlResolver&quot; /&gt; to use during transformation. If set to &lt;see langword=&quot;null&quot; /&gt;, the XSLT &lt;c&gt;document()&lt;/c&gt; function is not resolved.">轉換期間所使用的 <see cref="T:System.Xml.XmlResolver" />。 如果設定為 <see langword="null" /> ，則不會解析 XSLT <c>檔 ( # B1 </c> 函數。</returns>
    </member>
    <member name="T:System.Xml.Xsl.XsltSettings">
      <summary vsli:raw="Specifies the XSLT features to support during execution of the XSLT style sheet.">指定 XSLT 功能，以在執行 XSLT 樣式表期間提供支援。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; class with default settings.">初始化具有預設設定之 <see cref="T:System.Xml.Xsl.XsltSettings" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Xml.Xsl.XsltSettings.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; class with the specified settings.">使用指定的設定，初始化 <see cref="T:System.Xml.Xsl.XsltSettings" /> 類別的新執行個體。</summary>
      <param name="enableDocumentFunction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable support for the XSLT &lt;c&gt;document()&lt;/c&gt; function; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示啟用 XSLT <c>document()</c> 函式的支援，否則為 <see langword="false" />。</param>
      <param name="enableScript" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable support for embedded scripts blocks; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示啟用內嵌指令碼區塊的支援，否則為 <see langword="false" />。</param>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.Default">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object with default settings. Support for the XSLT &lt;c&gt;document()&lt;/c&gt; function and embedded script blocks is disabled.">取得具有預設值的 <see cref="T:System.Xml.Xsl.XsltSettings" /> 物件。 XSLT <c>document()</c> 函式和內嵌指令碼區塊的支援已停用。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object with the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableScript&quot; /&gt; properties set to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 屬性設為 <see langword="false" /> 的 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 物件。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction">
      <summary vsli:raw="Gets or sets a value indicating whether to enable support for the XSLT &lt;c&gt;document()&lt;/c&gt; function.">取得或設定值，指出是否啟用 XSLT <c>document()</c> 函式支援。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to support the XSLT &lt;c&gt;document()&lt;/c&gt; function; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 若要支援 XSLT <c>檔 ( # B1 </c> 函數;否則為 <see langword="false" /> 。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.EnableScript">
      <summary vsli:raw="Gets or sets a value indicating whether to enable support for embedded script blocks.">取得或設定值，指出是否啟用內嵌指令碼區塊支援。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to support script blocks in XSLT style sheets; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 表示支援 XSLT 樣式表的指令碼區塊，否則為 <see langword="false" />。 預設為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Xml.Xsl.XsltSettings.TrustedXslt">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object that enables support for the XSLT &lt;c&gt;document()&lt;/c&gt; function and embedded script blocks.">取得 <see cref="T:System.Xml.Xsl.XsltSettings" /> 物件，此物件會啟用 XSLT <c>document()</c> 函式和內嵌指令碼區塊的支援。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Xml.Xsl.XsltSettings&quot; /&gt; object with the &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction&quot; /&gt; and &lt;see cref=&quot;P:System.Xml.Xsl.XsltSettings.EnableScript&quot; /&gt; properties set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Xml.Xsl.XsltSettings" /> 和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" /> 屬性設為 <see langword="true" /> 的 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" /> 物件。</returns>
    </member>
  </members>
</doc>
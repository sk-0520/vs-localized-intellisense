<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary>描述指令如何變更控制流程。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary>分支指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary>中斷指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary>呼叫指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary>條件分支指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary>提供後續指令的相關資訊。 例如，<see langword="Unaligned" /> 的 <see langword="Reflection.Emit.Opcodes" /> 指令具有 <see langword="FlowControl.Meta" />，並指定後續指標指令可能未配置。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary>一般控制流程。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary>這個列舉值已保留並且不應該使用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary>返回指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary>例外狀況 (Exception) 擲回指令。</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary>描述中繼語言 (IL) 指令。</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary>測試指定物件是否等於這個 <see langword="Opcode" />。</summary>
      <param name="obj">要與這個物件比較的物件。</param>
      <returns>如果 <see langword="Opcode" /> 是 <paramref name="obj" /> 的執行個體，並且與這個物件相等，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary>指出目前的執行個體和指定的 <see cref="T:System.Reflection.Emit.OpCode" /> 是否相等。</summary>
      <param name="obj">要與目前執行個體相比較的 <see cref="T:System.Reflection.Emit.OpCode" />。</param>
      <returns>如果 <paramref name="obj" /> 的值和目前執行個體的值相等則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary>傳回這個 <see langword="Opcode" /> 的已產生雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>指出兩個 <see cref="T:System.Reflection.Emit.OpCode" /> 結構是否相等。</summary>
      <param name="a">要和 <paramref name="b" /> 比較的 <see cref="T:System.Reflection.Emit.OpCode" />。</param>
      <param name="b">要和 <paramref name="a" /> 比較的 <see cref="T:System.Reflection.Emit.OpCode" />。</param>
      <returns>如果 <see langword="true" /> 等於 <paramref name="a" />，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary>指出兩個 <see cref="T:System.Reflection.Emit.OpCode" /> 結構是否不相等。</summary>
      <param name="a">要和 <paramref name="b" /> 比較的 <see cref="T:System.Reflection.Emit.OpCode" />。</param>
      <param name="b">要和 <paramref name="a" /> 比較的 <see cref="T:System.Reflection.Emit.OpCode" />。</param>
      <returns>如果 <see langword="true" /> 不等於 <paramref name="a" />，則為 <paramref name="b" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary>傳回這個 <see langword="Opcode" /> 做為 <see cref="T:System.String" />。</summary>
      <returns>字串，包含這個 <see langword="Opcode" />的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary>中繼語言 (IL) 指令的流量控制特性。</summary>
      <returns>唯讀。 流程控制的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary>中繼語言 (IL) 指令的名稱。</summary>
      <returns>唯讀。 IL 指令的名稱。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary>中繼語言 (IL) 指令的類型。</summary>
      <returns>唯讀。 中繼語言 (IL) 指令的類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary>中繼語言 (IL) 指令的運算元類型。</summary>
      <returns>唯讀。 IL 指令的運算元類型。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary>中繼語言 (IL) 指令的大小。</summary>
      <returns>唯讀。 IL 指令的大小。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary>中繼語言 (IL) 指令如何從堆疊中取出。</summary>
      <returns>唯讀。 IL 指令從堆疊中取出的方式。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary>中繼語言 (IL) 指令如何將運算元推送至堆疊。</summary>
      <returns>唯讀。 IL 指令將運算元推送至堆疊的方式。</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary>取得中繼語言 (IL) 指令的數值。</summary>
      <returns>唯讀。 IL 指令的數值。</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary>提供 Microsoft Intermediate Language (MSIL) 指令的欄位表示，以用於 <see cref="T:System.Reflection.Emit.ILGenerator" /> 類別成員 (例如 <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />) 的發出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary>相加兩個值，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary>相加兩個整數、執行溢位檢查，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary>相加兩個不帶正負號的整數 (Unsigned Integer) 值、執行溢位檢查，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary>計算兩個值的位元 AND 運算，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary>將 Unmanaged 指標傳回目前方法的引數清單。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary>如果兩個值相等，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary>如果兩個值相等，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary>如果第一個值大於或等於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary>如果第一個值大於或等於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值大於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值大於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary>如果第一個值大於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary>如果第一個值大於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值大於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值大於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary>如果第一個值小於或等於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary>如果第一個值小於或等於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值小於或等於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值小於或等於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary>如果第一個值小於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary>如果第一個值小於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值小於第二個值，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary>當比較不帶正負號的整數值或未按順序的浮點值時，如果第一個值小於第二個值，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary>當兩個不帶正負號的整數值或未按順序的浮點值不相等時，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary>當兩個不帶正負號的整數值或未按順序的浮點值不相等時，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary>將實值型別 (Value Type) 轉換成物件參考 (型別 <see langword="O" />)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary>無條件地將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary>無條件地將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary>以訊號指示 Common Language Infrastructure (CLI) 向偵錯工具告知已經過中斷點。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary>如果 <paramref name="value" /> 為 <see langword="false" />、Null 參考 (在 Visual Basic 中為 <see langword="Nothing" />) 或零，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary>如果 <paramref name="value" /> 為 <see langword="false" />、Null 參考或零，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary>如果 <paramref name="value" /> 為 <see langword="true" />、非 Null 或非零，則將控制權傳輸至目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary>如果 <paramref name="value" /> 為 <see langword="true" />、非 Null 或非零，則將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary>呼叫傳遞的方法描述項所指示的方法。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary>以呼叫慣例所描述的引數，呼叫在評估堆疊上指示的方法 (做為進入點的指標)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary>在物件上呼叫晚期繫結方法，將傳回值推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary>嘗試將參考所傳遞的物件轉型為指定的類別。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary>比較兩個值。 如果相等，則將整數值 1 (<see langword="(int32" />) 推入至評估堆疊，否則將 0 (<see langword="int32" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary>比較兩個值。 如果第一個值大於第二個值，則將整數值 1 (<see langword="(int32" />) 推入至評估堆疊，否則，將 0 (<see langword="int32" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary>比較兩個沒有正負號或未排序的值。 如果第一個值大於第二個值，則將整數值 1 (<see langword="(int32" />) 推入至評估堆疊，否則，將 0 (<see langword="int32" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary>如果值非有限數值，則擲回 <see cref="T:System.ArithmeticException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary>比較兩個值。 如果第一個值小於第二個值，則將整數值 1 (<see langword="(int32" />) 推入至評估堆疊，否則，將 0 (<see langword="int32" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary>比較不帶正負號或未按順序的值 <paramref name="value1" /> 和 <paramref name="value2" />。 如果 <paramref name="value1" /> 小於 <paramref name="value2" />，則將整數值 1 (<see langword="(int32" />) 推入至評估堆疊，否則將 0 (<see langword="int32" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary>限制其上可進行虛擬方法呼叫的類型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary>將評估堆疊頂端的值轉換成 <see langword="native int" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary>將評估堆疊頂端的值轉換成 <see langword="int8" />，然後將它擴充 (填補) 到 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary>將評估堆疊頂端的值轉換成 <see langword="int16" />，然後將它擴充 (填補) 到 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary>將評估堆疊頂端的值轉換成 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary>將評估堆疊頂端的值轉換成 <see langword="int64" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 <see langword="native int" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 <see langword="native int" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號 <see langword="int8" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 <see langword="int8" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 <see langword="int16" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 <see langword="int16" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary>將評估堆疊頂端帶正負號的值轉換成帶正負號的 <see langword="int64" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成帶正負號的 <see langword="int64" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary>將評估堆疊頂端帶正負號的值轉換成 <see langword="unsigned native int" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 <see langword="unsigned native int" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary>將評估堆疊頂端帶正負號的值轉換成 <see langword="unsigned int8" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 <see langword="unsigned int8" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary>將評估堆疊頂端帶正負號的值轉換成 <see langword="unsigned int16" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 <see langword="unsigned int16" />，將它擴充到 <see langword="int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary>將評估堆疊頂端帶正負號的值轉換成 <see langword="unsigned int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 <see langword="unsigned int32" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary>將評估堆疊頂端帶正負號的值轉換成 <see langword="unsigned int64" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary>將評估堆疊頂端不帶正負號的值轉換成 <see langword="unsigned int64" />，並在溢位上擲回 <see cref="T:System.OverflowException" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary>將評估堆疊頂端不帶正負號的整數 (Unsigned Integer) 值轉換成 <see langword="float32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary>將評估堆疊頂端的值轉換成 <see langword="float32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary>將評估堆疊頂端的值轉換成 <see langword="float64" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary>將評估堆疊頂端的值轉換成 <see langword="unsigned native int" />，並將它擴充到 <see langword="native int" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary>將評估堆疊頂端的值轉換成 <see langword="unsigned int8" />，並將它擴充到 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary>將評估堆疊頂端的值轉換成 <see langword="unsigned int16" />，並將它擴充到 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary>將評估堆疊頂端的值轉換成 <see langword="unsigned int32" />，並將它擴充到 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary>將評估堆疊頂端的值轉換成 <see langword="unsigned int64" />，並將它擴充到 <see langword="int64" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary>將指定的數值位元組數從來源位址複製到目的位址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary>將位於物件位址上的實值型別 (型別 <see langword="&amp;" />、<see langword="*" /> 或 <see langword="native int" />) 複製到目的物件的位址 (型別 <see langword="&amp;" />、<see langword="*" /> 或 <see langword="native int" />)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary>除兩個值，並將做為浮點 (型別 <see langword="F" />) 或商 (型別 <see langword="int32" />) 的結果推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary>除以兩個不帶正負號的整數值，並將結果 (<see langword="int32" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary>複製評估堆疊上目前最頂端的值，然後將複製推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary>將控制權從例外狀況的 <see langword="filter" /> 子句傳回 Common Language Infrastructure (CLI) 例外處理常式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary>將控制權從例外狀況區塊的 <see langword="fault" /> 或 <see langword="finally" /> 子句傳回 Common Language Infrastructure (CLI) 例外處理常式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary>將指定位址上的指定記憶體區塊初始化為指定的大小和初始值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary>將位於指定位址之值類型的各個欄位，初始化為適當之基本類型的 null 參考或 0。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary>測試物件參考 (型別 <see langword="O" />) 是否為特定類別的執行個體。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary>結束目前方法，並跳至指定的方法。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary>載入引數 (為指定的索引值所參考) 至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary>載入位於索引 0 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary>載入位於索引 1 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary>載入位於索引 2 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary>載入位於索引 3 的引數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary>載入引數 (為指定的簡短形式索引所參考) 至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary>載入引數位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary>以簡短形式，載入引數位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary>推入型別 <see langword="int32" /> 的提供值至評估堆疊做為 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary>將整數值 0 推入至評估堆疊做為 <see langword="int32" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary>將整數值 1 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary>將整數值 2 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary>將整數值 3 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary>將整數值 4 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary>將整數值 5 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary>將整數值 6 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary>將整數值 7 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary>將整數值 8 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary>將整數值 -1 以 <see langword="int32" /> 推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary>推入提供的 <see langword="int8" /> 值至評估堆疊做為 <see langword="int32" /> (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary>推入型別 <see langword="int64" /> 的提供值至評估堆疊做為 <see langword="int64" />。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary>推入型別 <see langword="float32" /> 的提供值至評估堆疊做為型別 <see langword="F" /> (浮點數)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary>推入型別 <see langword="float64" /> 的提供值至評估堆疊做為型別 <see langword="F" /> (浮點數)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary>將位於指定之陣列索引處的項目當做指令中指定的類型載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary>將位於指定陣列索引處型別為 <see langword="native int" /> 的元素當做 <see langword="native int" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary>將位於指定陣列索引處型別為 <see langword="int8" /> 的元素當做 <see langword="int32" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary>將位於指定陣列索引處型別為 <see langword="int16" /> 的元素當做 <see langword="int32" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary>將位於指定陣列索引處型別為 <see langword="int32" /> 的元素當做 <see langword="int32" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary>將位於指定陣列索引處型別為 <see langword="int64" /> 的元素當做 <see langword="int64" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary>將位於指定陣列索引處型別為 <see langword="float32" /> 的元素當做型別 <see langword="F" /> (浮點數) 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary>將位於指定陣列索引處型別為 <see langword="float64" /> 的元素當做型別 <see langword="F" /> (浮點數) 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary>載入包含位於指定的陣列索引中的物件參考元素至評估堆疊的頂端，做為型別 <see langword="O" /> (物件參考)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary>將位於指定陣列索引處型別為 <see langword="unsigned int8" /> 的元素當做 <see langword="int32" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary>將位於指定陣列索引處型別為 <see langword="unsigned int16" /> 的元素當做 <see langword="int32" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary>將位於指定陣列索引處型別為 <see langword="unsigned int32" /> 的元素當做 <see langword="int32" /> 載入至評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary>載入位於指定陣列索引中的陣列元素位址至評估堆疊的頂端，做為型別 <see langword="&amp;" /> (Managed 指標)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary>尋找物件中的欄位值，該值的參考目前位於評估堆疊中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary>尋找物件中的欄位位址，該位址的參考目前位於評估堆疊中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary>推入實作特定方法之機器碼的 Unmanaged 指標 (型別 <see langword="native int" />) 至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary>將型別 <see langword="native int" /> 的值做為 <see langword="native int" />，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary>將 <see langword="int8" /> 型別的值做為 <see langword="int32" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary>將 <see langword="int16" /> 型別的值做為 <see langword="int32" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary>將 <see langword="int32" /> 型別的值做為 <see langword="int32" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary>將 <see langword="int64" /> 型別的值做為 <see langword="int64" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary>將型別 <see langword="float32" /> 的值做為型別 <see langword="F" /> (浮點數)，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary>將型別 <see langword="float64" /> 的值做為型別 <see langword="F" /> (浮點數)，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary>將物件參考做為型別 <see langword="O" /> (物件參考)，間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary>將 <see langword="unsigned int8" /> 型別的值做為 <see langword="int32" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary>將 <see langword="unsigned int16" /> 型別的值做為 <see langword="int32" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary>將 <see langword="unsigned int32" /> 型別的值做為 <see langword="int32" /> 間接載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary>推送以零為起始的一維陣列的項目數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary>載入位於指定索引的區域變數至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary>將位於索引 0 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary>將位於索引 1 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary>將位於索引 2 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary>將位於索引 3 的區域變數載入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary>載入位於指定索引的區域變數至評估堆疊 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary>載入位於指定索引的區域變數位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary>載入位於指定索引的區域變數位址至評估堆疊 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary>推入 Null 參考 (型別 <see langword="O" />) 至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary>複製位址所指向的實值類型物件到評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary>推送靜態欄位的值至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary>推送靜態欄位的位址至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary>推送新的物件參考至儲存於中繼資料的字串常值 (String Literal)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary>將中繼資料語彙基元轉換成它的執行階段表示，並將它推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary>推入實作與指定的物件相關聯的特定虛擬方法之機器碼的 Unmanaged 指標 (型別 <see langword="native int" />) 至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary>結束程式碼的保護區，無條件地將控制權傳輸至特定的目標指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary>結束程式碼的保護區，無條件地將控制權傳輸至目標指令 (簡短形式)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary>從區域動態記憶體集區中配置某些數量的位元組，並將第一個配置的位元組的位址 (暫時性指標，型別 <see langword="*" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary>將特定類型的執行個體之類型參考推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary>將兩個值相乘，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary>將兩個整數值相乘、執行溢位檢查，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary>將兩個不帶正負號的整數值相乘、執行溢位檢查，再將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary>將值變成相反值，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary>將新的以零為起始一維陣列 (其項目屬於特定類型) 的物件參考推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary>建立實值型別的新物件或新執行個體，將物件參考 (型別 <see langword="O" />) 推入至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary>如果已完成修補作業碼，則填滿空間。 雖然會耗用處理循環，卻不會執行任何有意義的運算。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary>計算堆疊頂端的整數值的位元補數 (Complement)，並將結果當做相同類型來推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary>計算堆疊頂端兩個整數值的位元補數，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary>目前在評估堆疊頂端移除值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary>這是保留的指示。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary>指定後續陣列位址作業在執行階段不執行任何類型檢查，且會傳回限制其變動性的 Managed 指標。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary>擷取內嵌於類型參考中的類型語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary>擷取內嵌於型別參考中的位址 (型別 <see langword="&amp;" />)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary>將兩個值相除，並將餘數推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary>將兩個不帶正負號的值相除，並將餘數推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary>從目前方法傳回，將被呼叫端評估堆疊的傳回值 (如果有) 推送至呼叫端的評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary>重新擲回目前的例外狀況。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary>將整數值向左移 (使用零) 指定的位元數，將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary>將整數值 (使用正負號) 向右移指定的位元數，將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary>將不帶正負號的整數值 (使用零) 向右移指定的位元數，將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary>將所提供實值類型的大小推送至評估堆疊 (以位元組為單位)。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary>在指定索引的引數槽中將值存放在評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary>在指定索引 (簡短形式) 的引數位置中將值儲存於評估堆疊的頂端。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary>使用評估堆疊上的值 (其類型在指令中指定)，取代在指定之索引處的陣列項目。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary>以在評估堆疊上的 <see langword="native int" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary>以在評估堆疊上的 <see langword="int8" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary>以在評估堆疊上的 <see langword="int16" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary>以在評估堆疊上的 <see langword="int32" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary>以在評估堆疊上的 <see langword="int64" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary>以在評估堆疊上的 <see langword="float32" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary>以在評估堆疊上的 <see langword="float64" /> 值來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary>以在評估堆疊上的物件參考值 (型別 <see langword="O" />) 來取代在指定索引的陣列元素。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary>以新值取代儲存在物件參考或指標的欄位中的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary>於所提供的位址儲存 <see langword="native int" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary>於所提供的位址儲存 <see langword="int8" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary>於所提供的位址儲存 <see langword="int16" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary>於所提供的位址儲存 <see langword="int32" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary>於所提供的位址儲存 <see langword="int64" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary>於所提供的位址儲存 <see langword="float32" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary>於所提供的位址儲存 <see langword="float64" /> 型別的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary>在所提供的位址儲存物件參考值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在指定索引的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 0 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 1 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 2 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在索引 3 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary>從評估堆疊的頂端取出目前值，並將它存放在 <paramref name="index" /> (簡短形式) 的區域變數清單中。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary>從評估堆疊複製指定類型的值到所提供的記憶體位址。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary>以來自評估堆疊的值取代靜態欄位的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary>將另一個值減去某一個值，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary>將另一個值減去某一個值、執行溢位檢查，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary>將另一個不帶正負號的值減去某一個不帶正負號的值、執行溢位檢查，並將結果推送至評估堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary>Implements a jump table.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary>執行後置的方法呼叫指令 (例如目前方法的堆疊框架) 會在執行實際的呼叫指令之前移除。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary>擲回目前位於評估堆疊的例外狀況物件。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary>表示目前位於評估堆疊頂端的位置可能未對齊緊接 <see langword="ldind" />、<see langword="stind" />、<see langword="ldfld" />、<see langword="stfld" />、<see langword="ldobj" />、<see langword="stobj" />、<see langword="initblk" /> 或 <see langword="cpblk" /> 指令的正常大小。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary>將實值類型的 boxed 表示轉換成它的 unboxed 形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary>將指令中指定之類型的 boxed 表示轉換成其 unboxed 形式。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary>指定目前在評估堆疊頂端的位址可能是 volatile，並且無法快取讀取該位置的結果，或者無法隱藏存放該位置的多個存放區。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary>計算評估堆疊頂端兩個值的位元 XOR，將結果推送至評估堆疊。</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary>如果提供的 Opcode 採用單一位元組引數，則傳回 True 或 False。</summary>
      <param name="inst">Opcode 物件的執行個體。</param>
      <returns>
        <see langword="true" /> 或 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary>描述此 Microsoft Intermediate Language (MSIL) 指令的類型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary>這個列舉值已保留並且不應該使用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary>這些是 Microsoft Intermediate Language (MSIL) 指令，做為其他 MSIL 指令的同義字。 例如，<see langword="ldarg.0" /> 表示 <see langword="ldarg" /> 指令具有值為 0 的引數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary>描述保留的 Microsoft Intermediate Language (MSIL) 指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary>描述 Microsoft Intermediate Language (MSIL) 指令，應用於物件。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary>描述會修改下列指令行為的前置詞指令。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary>描述內建指令。</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary>描述此 Microsoft Intermediate Language (MSIL) 指令的運算元類型。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary>運算元為 32 位元的整數分支目標。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary>運算元為 32 位元中繼資料語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary>運算元為 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary>運算元為 64 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary>運算元為 32 位元中繼資料語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary>沒有運算元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary>運算元是保留字，不應該使用。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary>運算元為 64 位元 IEEE 浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary>運算元為 32 位元中繼資料簽章語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary>運算元為 32 位元中繼資料字串語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary>運算元為切換指令的 32 位元整數引數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary>運算元為 <see langword="FieldRef" />、<see langword="MethodRef" /> 或 <see langword="TypeRef" /> 語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary>運算元為 32 位元中繼資料語彙基元。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary>運算元為包含區域變數或引數順序的 16 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary>運算元為 8 位元的整數分支目標。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary>運算元為 8 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary>運算元為 32 位元 IEEE 浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary>運算元為包含區域變數或引數順序的 8 位元整數。</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary>指定兩個因數其中之一，在將類型封送處理時，該因數決定欄位的記憶體對齊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary>封裝大小為 1 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary>封裝大小為 128 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary>封裝大小為 16 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary>封裝大小為 2 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary>封裝大小為 32 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary>封裝大小為 4 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary>封裝大小為 64 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary>封裝大小為 8 位元組。</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary>封裝大小未指定。</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary>描述如何將值推送至堆疊或從堆疊推出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary>沒有值從堆疊取出。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary>從堆疊取出一個值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary>從第一個運算元的堆疊取出一個值，並從第二個運算元的堆疊取出一個值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary>從堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary>從第一個運算元堆疊取出 32 位元整數，並從第二個運算元堆疊取出值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary>從第一個運算元堆疊取出 32 位元整數，並從第二個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary>從第一個運算元堆疊取出 32 位元整數，從第二個運算元堆疊取出 32 位元整數，並從第三運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary>從第一個運算元堆疊取出 32 位元整數，並從第二個運算元堆疊取出 64 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary>從第一個運算元堆疊取出 32 位元整數，並從第二個運算元堆疊取出 32 位元浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary>從第一個運算元堆疊取出 32 位元整數，並從第二個運算元堆疊取出 64 位元浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary>從堆疊取出參考。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary>從第一個運算元堆疊取出參考，並從第二個運算元堆疊取出值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary>從第一個運算元堆疊取出參考，並從第二個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary>從第一個運算元堆疊取出參考，從第二個運算元堆疊取出值，並從第三個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary>從第一個運算元堆疊取出參考，從第二個運算元堆疊取出值，並從第三個運算元堆疊取出值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary>從第一個運算元堆疊取出參考，從第二個運算元堆疊取出值，並從第三個運算元堆疊取出 64 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary>從第一個運算元堆疊取出參考，從第二個運算元堆疊取出值，並從第三個運算元堆疊取出 32 位元整數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary>從第一個運算元堆疊取出參考，從第二個運算元堆疊取出值，並從第三個運算元堆疊取出 64 位元浮點數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary>從第一個運算元堆疊取出參考，從第二個運算元堆疊取出值，並從第三個運算元堆疊取出參考。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary>沒有推入至堆疊的值。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary>推入一個值至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary>推入一個值至第一個運算元堆疊，並推入一個值至第二個運算元堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary>推入 32 位元整數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary>推入 64 位元整數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary>推入 32 位元浮點數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary>推入 64 位元浮點數至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary>推入參考至堆疊。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary>從堆疊取出變數。</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary>推入變數至堆疊。</summary>
    </member>
  </members>
</doc>
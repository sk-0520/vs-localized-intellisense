<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.Emit.Lightweight</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.DynamicILInfo">
      <summary>Fornisce supporto per utilizzare metodi alternativi per generare codice MSIL (Microsoft Intermediate Language) e metadati per un metodo dinamico, inclusi metodi per la creazione di token e per l'inserimento di codice, gestione delle eccezioni e blob di firma per le variabili locali.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta la firma per il metodo dinamico associato.</summary>
      <param name="signature">Matrice che contiene la firma.</param>
      <returns>Un token può essere incorporato nei metadati e nel flusso MSIL per il metodo dinamico associato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta un metodo dinamico da chiamare dal metodo associato.</summary>
      <param name="method">Metodo dinamico da chiamare.</param>
      <returns>Un token può essere incorporato nel flusso MSIL per il metodo dinamico associato, come destinazione di un'istruzione MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta un campo a cui accedere dal metodo dinamico associato.</summary>
      <param name="field">Campo al quale accedere.</param>
      <returns>Token che può essere utilizzato come operando di un'istruzione MSIL che accede ai campi nell'ambito dell'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta un campo a cui accedere dal metodo dinamico associato; il campo si trova sul tipo generico specificato.</summary>
      <param name="field">Campo al quale accedere.</param>
      <param name="contextType">Tipo generico a cui appartiene il campo.</param>
      <returns>Token che può essere utilizzato come operando di un'istruzione MSIL che accede ai campi nell'ambito dell'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta un metodo dinamico a cui accedere dal metodo dinamico associato.</summary>
      <param name="method">Metodo al quale accedere.</param>
      <returns>Token che può essere utilizzato come operando di un'istruzione MSIL che accede ai metodi, ad esempio <see cref="F:System.Reflection.Emit.OpCodes.Call" /> o <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, nell'ambito dell'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta un metodo in un tipo generico.</summary>
      <param name="method">Metodo.</param>
      <param name="contextType">Il tipo generico a cui appartiene il metodo.</param>
      <returns>Token che può essere utilizzato come operando di un'istruzione MSIL che accede ai metodi, ad esempio <see cref="F:System.Reflection.Emit.OpCodes.Call" /> o <see cref="F:System.Reflection.Emit.OpCodes.Ldtoken" />, nell'ambito dell'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta un tipo da utilizzare nel metodo dinamico associato.</summary>
      <param name="type">Tipo da utilizzare.</param>
      <returns>Token che può essere utilizzato come operando di un'istruzione MSIL che richiede un tipo nell'ambito dell'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)">
      <summary>Ottiene un token, valido nell'ambito della classe <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente, che rappresenta una stringa letterale da utilizzare nel metodo dinamico associato.</summary>
      <param name="literal">Stringa da utilizzare.</param>
      <returns>Token che può essere utilizzato come operando di un'istruzione MSIL che richiede una stringa nell'ambito dell'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)">
      <summary>Imposta il corpo del codice del metodo dinamico associato.</summary>
      <param name="code">Puntatore a una matrice di byte contenente il flusso MSIL.</param>
      <param name="codeSize">Numero di byte nel flusso MSIL.</param>
      <param name="maxStackSize">Numero massimo di elementi nello stack di operandi durante l'esecuzione del metodo.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> è <see langword="null" /> e <paramref name="codeSize" /> è maggiore di 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="codeSize" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)">
      <summary>Imposta il corpo del codice del metodo dinamico associato.</summary>
      <param name="code">Matrice contenente il flusso MSIL.</param>
      <param name="maxStackSize">Numero massimo di elementi nello stack di operandi durante l'esecuzione del metodo.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)">
      <summary>Imposta i metadati delle eccezioni del metodo dinamico associato.</summary>
      <param name="exceptions">Puntatore a una matrice di byte contenente i metadati delle eccezioni.</param>
      <param name="exceptionsSize">Numero di byte dei metadati delle eccezioni.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exceptions" /> è <see langword="null" /> e <paramref name="exceptionSize" /> è maggiore di 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="exceptionSize" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])">
      <summary>Imposta i metadati delle eccezioni del metodo dinamico associato.</summary>
      <param name="exceptions">Matrice contenente i metadati delle eccezioni.</param>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)">
      <summary>Imposta la firma delle variabili locali che descrive il layout delle variabili locali per il metodo dinamico associato.</summary>
      <param name="localSignature">Matrice contenente il layout delle variabili locali per l'oggetto <see cref="T:System.Reflection.Emit.DynamicMethod" /> associato.</param>
      <param name="signatureSize">Il numero di byte nella firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localSignature" /> è <see langword="null" /> e <paramref name="signatureSize" /> è maggiore di 0.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureSize" /> è minore di 0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])">
      <summary>Imposta la firma delle variabili locali che descrive il layout delle variabili locali per il metodo dinamico associato.</summary>
      <param name="localSignature">Matrice contenente il layout delle variabili locali per l'oggetto <see cref="T:System.Reflection.Emit.DynamicMethod" /> associato.</param>
    </member>
    <member name="P:System.Reflection.Emit.DynamicILInfo.DynamicMethod">
      <summary>Ottiene il metodo dinamico il cui corpo viene generato dall'istanza corrente.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.DynamicMethod" /> che rappresenta il metodo dinamico per il quale l'oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> corrente genera il codice.</returns>
    </member>
    <member name="T:System.Reflection.Emit.DynamicMethod">
      <summary>Definisce e rappresenta un metodo dinamico che può essere compilato, eseguito e annullato. I metodi annullati possono essere sottoposti a Garbage Collection.</summary>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Crea un metodo dinamico globale per un metodo, specificando il nome del metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametro, il modulo e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="attributes">Combinazione bit per bit di valori di <see cref="T:System.Reflection.MethodAttributes" /> che specifica gli attributi del metodo dinamico. L'unica combinazione consentita è <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convenzione di chiamata per il metodo dinamico. Deve essere <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="m">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato in modo logico.</param>
      <param name="skipVisibility">
        <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.  
  
-oppure- 
 <paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="m" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> è una combinazione di flag diversa da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
-oppure- 
 <paramref name="callingConvention" /> non è <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
-oppure- 
 <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Crea un metodo dinamico, specificando il nome del metodo, gli attributi, la convenzione di chiamata, il tipo restituito, i tipi di parametro, il tipo a cui il metodo dinamico è associato in modo logico e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="attributes">Combinazione bit per bit di valori di <see cref="T:System.Reflection.MethodAttributes" /> che specifica gli attributi del metodo dinamico. L'unica combinazione consentita è <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.</param>
      <param name="callingConvention">Convenzione di chiamata per il metodo dinamico. Deve essere <see cref="F:System.Reflection.CallingConventions.Standard" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="owner">Oggetto <see cref="T:System.Type" /> a cui il metodo dinamico è associato in modo logico. Il metodo dinamico ha accesso a tutti i membri del tipo.</param>
      <param name="skipVisibility">
        <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.  
  
-oppure- 
 <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o un metodo generico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="owner" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="attributes" /> è una combinazione di flag diversa da <see cref="F:System.Reflection.MethodAttributes.Public" /> e <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
-oppure- 
 <paramref name="callingConvention" /> non è <see cref="F:System.Reflection.CallingConventions.Standard" />.  
  
-oppure- 
 <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])">
      <summary>Inizializza un metodo dinamico ospitato anonimamente, specificando il nome del metodo, il tipo restituito e i tipi di parametro.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)">
      <summary>Inizializza un metodo dinamico ospitato anonimamente, specificando il nome del metodo, il tipo restituito, i tipi di parametro e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="restrictedSkipVisibility">
        <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri a cui accede il linguaggio MSIL del metodo dinamico, con questa restrizione: il livello di attendibilità degli assembly che contengono questi tipi e membri deve essere uguale o minore di quello dello stack di chiamata che genera il metodo dinamico; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)">
      <summary>Crea un metodo dinamico che è globale per un modulo, specificando il nome del metodo, il tipo restituito, i tipi di parametro e il modulo.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="m">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato in modo logico.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.  
  
-oppure- 
 <paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="m" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)">
      <summary>Crea un metodo dinamico globale per un modulo, specificando il nome del metodo, il tipo restituito, i tipi di parametri e il modulo e indicando se deve essere ignorato il controllo di visibilità JIT per i tipi e i membri del metodo dinamico a cui accede MSIL (Microsoft Intermediate Language).</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="m">Oggetto <see cref="T:System.Reflection.Module" /> che rappresenta il modulo a cui il metodo dinamico deve essere associato in modo logico.</param>
      <param name="skipVisibility">
        <see langword="true" /> per ignorare i controlli di visibilità JIT su tipi e membri a cui accede il linguaggio MSIL del metodo dinamico.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.  
  
-oppure- 
 <paramref name="m" /> è un modulo che fornisce hosting anonimo per i metodi dinamici.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="m" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)">
      <summary>Crea un metodo dinamico, specificando il nome del metodo, il tipo restituito, i parametri di tipo e il tipo a cui il metodo dinamico è associato dal punto di vista logico.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="owner">Oggetto <see cref="T:System.Type" /> a cui il metodo dinamico è associato in modo logico. Il metodo dinamico ha accesso a tutti i membri del tipo.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.  
  
-oppure- 
 <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o un metodo generico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="owner" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è <see langword="null" /> o è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)">
      <summary>Crea un metodo dinamico, specificando il nome del metodo, il tipo restituito, i tipi di parametro, il tipo a cui il metodo dinamico è associato in modo logico e se i controlli di visibilità JIT possono essere ignorati per i tipi e i membri cui accede il linguaggio MSIL (Microsoft Intermediate Language) del metodo dinamico.</summary>
      <param name="name">Nome del metodo dinamico. Può essere una stringa di lunghezza zero, ma non può essere <see langword="null" />.</param>
      <param name="returnType">Oggetto <see cref="T:System.Type" /> che specifica il tipo restituito del metodo dinamico oppure <see langword="null" /> se per il metodo non esiste alcun tipo restituito.</param>
      <param name="parameterTypes">Matrice di oggetti <see cref="T:System.Type" /> che specifica i tipi dei parametri del metodo dinamico oppure <see langword="null" /> se per il metodo non esistono parametri.</param>
      <param name="owner">Oggetto <see cref="T:System.Type" /> a cui il metodo dinamico è associato in modo logico. Il metodo dinamico ha accesso a tutti i membri del tipo.</param>
      <param name="skipVisibility">
        <see langword="true" /> per ignorare i controlli di visibilità JIT sui tipi e i membri cui accede il linguaggio MSIL del metodo dinamico; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">Un elemento di <paramref name="parameterTypes" /> è <see langword="null" /> o <see cref="T:System.Void" />.  
  
-oppure- 
 <paramref name="owner" /> è un'interfaccia, una matrice, un tipo generico aperto o un parametro di tipo di un tipo o un metodo generico.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="owner" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> è <see langword="null" /> o è un tipo per cui <see cref="P:System.Type.IsByRef" /> restituisce <see langword="true" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)">
      <summary>Completa il metodo dinamico e crea un delegato che può essere usato per eseguirlo.</summary>
      <param name="delegateType">Tipo delegato la cui firma corrisponde a quella del metodo dinamico.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non contiene alcun corpo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> contiene un numero errato di parametri o tipi di parametro non validi.</exception>
      <returns>Delegato del tipo specificato, che può essere usato per eseguire il metodo dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)">
      <summary>Completa il metodo dinamico e crea un delegato che può essere usato per eseguirlo, specificando il tipo di delegato e l'oggetto a cui il delegato è associato.</summary>
      <param name="delegateType">Tipo delegato la cui firma corrisponde a quella del metodo dinamico, meno il primo parametro.</param>
      <param name="target">Oggetto a cui il delegato è associato. Deve essere dello stesso tipo del primo parametro del metodo dinamico.</param>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non contiene alcun corpo.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> non è dello stesso tipo del primo parametro del metodo dinamico e non è assegnabile al tipo.  
  
-oppure- 
 <paramref name="delegateType" /> contiene un numero errato di parametri o tipi di parametro non validi.</exception>
      <returns>Delegato del tipo specificato, che si può usare per eseguire il metodo dinamico con l'oggetto di destinazione specificato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary>Definisce un parametro del metodo dinamico.</summary>
      <param name="position">Posizione del parametro nell'elenco dei parametri. I parametri sono indicizzati a partire da 1 per il primo parametro.</param>
      <param name="attributes">Combinazione bit per bit di valori di <see cref="T:System.Reflection.ParameterAttributes" /> che specifica gli attributi del parametro.</param>
      <param name="parameterName">Nome del parametro. Il nome può essere una stringa di lunghezza zero.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il metodo non ha parametri.  
  
-oppure- 
 <paramref name="position" /> è minore di 0.  
  
-oppure- 
 <paramref name="position" /> è maggiore del numero dei parametri del metodo.</exception>
      <returns>Restituisce sempre <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetBaseDefinition">
      <summary>Restituisce l'implementazione di base per il metodo.</summary>
      <returns>Implementazione di base del metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Boolean)">
      <summary>Restituisce tutti gli attributi personalizzati definiti per il metodo.</summary>
      <param name="inherit">
        <see langword="true" /> per cercare gli attributi personalizzati nella catena di ereditarietà del metodo; <see langword="false" /> per eseguire la ricerca solo nel metodo corrente.</param>
      <returns>Matrice di oggetti che rappresentano tutti gli attributi personalizzati del metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>Restituisce gli attributi personalizzati del tipo specificato che sono stati applicati al metodo.</summary>
      <param name="attributeType">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di attributo personalizzato da restituire.</param>
      <param name="inherit">
        <see langword="true" /> per cercare gli attributi personalizzati nella catena di ereditarietà del metodo; <see langword="false" /> per eseguire la ricerca solo nel metodo corrente.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> è <see langword="null" />.</exception>
      <returns>Matrice di oggetti che rappresentano gli attributi del metodo di tipo <paramref name="attributeType" /> o derivati dal tipo <paramref name="attributeType" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetDynamicILInfo">
      <summary>Restituisce un oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> che può essere usato per generare un corpo del metodo dai token di metadati, ambiti e flussi MSIL (Microsoft Intermediate Language).</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.DynamicILInfo" /> che può essere usato per generare un corpo del metodo dai token di metadati, ambiti e flussi MSIL.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator">
      <summary>Restituisce un generatore di Microsoft Intermediate Language (MSIL) per il metodo con una dimensione di flusso MSIL predefinita di 64 byte.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per il metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)">
      <summary>Restituisce un generatore di Microsoft Intermediate Language (MSIL) per il metodo con le dimensioni del flusso MSIL specificate.</summary>
      <param name="streamSize">Dimensioni del flusso MSIL in byte.</param>
      <returns>Oggetto <see cref="T:System.Reflection.Emit.ILGenerator" /> per il metodo, con le dimensioni del flusso MSIL specificate.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetMethodImplementationFlags">
      <summary>Restituisce i flag di implementazione per il metodo.</summary>
      <returns>Combinazione bit per bit dei valori <see cref="T:System.Reflection.MethodImplAttributes" /> che rappresentano i flag di implementazione relativi al metodo.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.GetParameters">
      <summary>Restituisce i parametri del metodo dinamico.</summary>
      <returns>Matrice di oggetti <see cref="T:System.Reflection.ParameterInfo" /> che rappresentano i parametri del metodo dinamico.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary>Richiama il metodo dinamico usando i parametri specificati, con i vincoli del binder specificato e le informazioni sulle impostazioni cultura specificate.</summary>
      <param name="obj">Questo parametro viene ignorato per i metodi dinamici, in quanto sono statici. Specificare <see langword="null" />.</param>
      <param name="invokeAttr">Combinazione bit per bit dei valori di <see cref="T:System.Reflection.BindingFlags" />.</param>
      <param name="binder">Oggetto <see cref="T:System.Reflection.Binder" /> che consente il binding, la coercizione di tipi di argomento, la chiamata di membri e il recupero di oggetti <see cref="T:System.Reflection.MemberInfo" /> tramite la reflection. Se <paramref name="binder" /> è <see langword="null" />, verrà usato il binder predefinito. Per altri dettagli, vedere <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters">Elenco di argomenti. Matrice di argomenti con lo stesso numero, ordine e tipo dei parametri del metodo da richiamare. In assenza di parametri, questo parametro deve essere <see langword="null" />.</param>
      <param name="culture">Istanza di <see cref="T:System.Globalization.CultureInfo" /> usata per regolare la coercizione dei tipi. Se è <see langword="null" />, per il thread corrente verrà usato l'oggetto <see cref="T:System.Globalization.CultureInfo" />. Queste informazioni sono necessarie, ad esempio, per convertire in modo corretto un valore <see cref="T:System.String" /> che rappresenta 1000 in un valore <see cref="T:System.Double" />, perché 1000 viene rappresentato in modo diverso nelle diverse impostazioni cultura.</param>
      <exception cref="T:System.NotSupportedException">La convenzione di chiamata <see cref="F:System.Reflection.CallingConventions.VarArgs" /> non è supportata.</exception>
      <exception cref="T:System.Reflection.TargetParameterCountException">Il numero di elementi in <paramref name="parameters" /> non corrisponde al numero dei parametri nel metodo dinamico.</exception>
      <exception cref="T:System.ArgumentException">Il tipo di uno o più elementi di <paramref name="parameters" /> non corrisponde al tipo del parametro corrispondente del metodo dinamico.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Il metodo dinamico è associato a un modulo, non è ospitato in modo anonimo ed è costruito con <paramref name="skipVisibility" /> impostato su <see langword="false" />, ma accede a membri che non sono <see langword="public" /> o <see langword="internal" /> (<see langword="Friend" /> in Visual Basic).  
  
-oppure- 
Il metodo dinamico è ospitato in modo anonimo ed è costruito con <paramref name="skipVisibility" /> impostato su <see langword="false" />, ma accede a membri che non sono <see langword="public" />.  
  
-oppure- 
Il metodo dinamico contiene codice non verificabile. Vedere la sezione "Verifica" nelle note per <see cref="T:System.Reflection.Emit.DynamicMethod" />.</exception>
      <returns>Oggetto <see cref="T:System.Object" /> che contiene il valore restituito del metodo richiamato.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.IsDefined(System.Type,System.Boolean)">
      <summary>Indica se il tipo di attributo personalizzato specificato è definito.</summary>
      <param name="attributeType">Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di attributo personalizzato da cercare.</param>
      <param name="inherit">
        <see langword="true" /> per cercare gli attributi personalizzati nella catena di ereditarietà del metodo; <see langword="false" /> per eseguire la ricerca solo nel metodo corrente.</param>
      <returns>
        <see langword="true" /> se il tipo degli attributi personalizzati specificato è definito; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.DynamicMethod.ToString">
      <summary>Restituisce la firma del metodo, rappresentata come stringa.</summary>
      <returns>Stringa che rappresenta la firma del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Attributes">
      <summary>Ottiene gli attributi specificati quando il metodo dinamico è stato creato.</summary>
      <returns>Combinazione bit per bit dei valori <see cref="T:System.Reflection.MethodAttributes" /> che rappresentano gli attributi relativi al metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.CallingConvention">
      <summary>Ottiene la convenzione di chiamata specificata durante la creazione del metodo dinamico.</summary>
      <returns>Uno dei valori di <see cref="T:System.Reflection.CallingConventions" /> che indica la convenzione di chiamata del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.DeclaringType">
      <summary>Ottiene il tipo che dichiara il metodo, che è sempre <see langword="null" /> per i metodi dinamici.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.InitLocals">
      <summary>Ottiene o imposta un valore che indica se le variabili locali nel metodo sono inizializzate su zero.</summary>
      <returns>
        <see langword="true" /> se le variabili locali nel metodo vengono inizializzate su zero; in caso contrario, <see langword="false" />. Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityCritical">
      <summary>Ottiene un valore che indica se il metodo dinamico corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente e può pertanto eseguire operazioni critiche.</summary>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non dispone di un corpo del metodo.</exception>
      <returns>
        <see langword="true" /> se il metodo dinamico corrente è critico per la sicurezza o critico per la sicurezza e richiamabile da codice trasparente; <see langword="false" /> se è trasparente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecuritySafeCritical">
      <summary>Ottiene un valore che indica se il metodo dinamico corrente è critico per la sicurezza al livello di attendibilità corrente, vale a dire se può eseguire operazioni critiche e se è possibile accedervi tramite codice trasparente.</summary>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non dispone di un corpo del metodo.</exception>
      <returns>
        <see langword="true" /> se il metodo dinamico è critico per la sicurezza al livello di attendibilità corrente; <see langword="false" /> se è critico per la sicurezza o trasparente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.IsSecurityTransparent">
      <summary>Ottiene un valore che indica se il metodo dinamico corrente è trasparente al livello di attendibilità corrente e pertanto non può eseguire operazioni critiche.</summary>
      <exception cref="T:System.InvalidOperationException">Il metodo dinamico non dispone di un corpo del metodo.</exception>
      <returns>
        <see langword="true" /> se il metodo dinamico è trasparente per la sicurezza a livello di attendibilità corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.MethodHandle">
      <summary>Non supportato per metodi dinamici.</summary>
      <exception cref="T:System.InvalidOperationException">Non consentito per metodi dinamici.</exception>
      <returns>Non supportato per metodi dinamici.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Module">
      <summary>Ottiene il modulo a cui il metodo dinamico è associato in modo logico.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.Module" /> a cui è associato il metodo dinamico corrente.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.Name">
      <summary>Ottiene il nome del metodo dinamico.</summary>
      <returns>Nome semplice del metodo.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReflectedType">
      <summary>Ottiene la classe usata nella reflection per ottenere il metodo.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnParameter">
      <summary>Ottiene il parametro restituito del metodo dinamico.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnType">
      <summary>Ottiene il tipo di valore restituito per il metodo dinamico.</summary>
      <returns>Oggetto <see cref="T:System.Type" /> che rappresenta il tipo di valore restituito del metodo corrente; <see cref="T:System.Void" /> se il metodo non contiene tipi restituiti.</returns>
    </member>
    <member name="P:System.Reflection.Emit.DynamicMethod.ReturnTypeCustomAttributes">
      <summary>Ottiene gli attributi personalizzati del tipo restituito per il metodo dinamico.</summary>
      <returns>Oggetto <see cref="T:System.Reflection.ICustomAttributeProvider" /> che rappresenta gli attributi personalizzati del tipo restituito per il metodo dinamico.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>Rappresenta la classe base astratta dalla quale devono ereditare tutte le implementazioni di Advanced Encryption Standard (AES).</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Aes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>Crea un oggetto di crittografia usato per eseguire l'algoritmo simmetrico.</summary>
      <returns>Oggetto di crittografia usato per eseguire l'algoritmo simmetrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>Crea un oggetto di crittografia che specifica l'implementazione di AES da usare per eseguire l'algoritmo simmetrico.</summary>
      <param name="algorithmName">Nome dell'implementazione specifica di AES da usare.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="algorithmName" /> è <see langword="null" />.</exception>
      <returns>Oggetto di crittografia usato per eseguire l'algoritmo simmetrico.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>Rappresenta una chiave AES (Advanced Encryption Standard) da usare con il contatore con la modalità operativa CBC-MAC (CCM).</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.AesCcm" /> con la chiave specificata.</summary>
      <param name="key">Chiave privata da usare per questa istanza.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La lunghezza del parametro <paramref name="key" /> è diversa da 16, 24 o 32 byte (128, 192 o 256 bit).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.AesCcm" /> con la chiave specificata.</summary>
      <param name="key">Chiave privata da usare per questa istanza.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La lunghezza del parametro <paramref name="key" /> è diversa da 16, 24 o 32 byte (128, 192 o 256 bit).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Decrittografa il testo crittografato nel buffer di destinazione specificato se il tag di autenticazione può essere convalidato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve corrispondere al valore fornito durante la crittografia.</param>
      <param name="ciphertext">Contenuto crittografato da decrittografare.</param>
      <param name="tag">Tag di autenticazione prodotto per questo messaggio durante la crittografia.</param>
      <param name="plaintext">Matrice di byte per la ricezione del contenuto decrittografato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono corrispondere al valore fornito durante la crittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> o <paramref name="plaintext" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile verificare il valore del tag oppure l'operazione di decrittografia non è riuscita per altri motivi.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Decrittografa il testo crittografato nel buffer di destinazione specificato se il tag di autenticazione può essere convalidato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve corrispondere al valore fornito durante la crittografia.</param>
      <param name="ciphertext">Contenuto crittografato da decrittografare.</param>
      <param name="tag">Tag di autenticazione prodotto per questo messaggio durante la crittografia.</param>
      <param name="plaintext">Intervallo di byte per la ricezione del contenuto decrittografato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono corrispondere al valore fornito durante la crittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile verificare il valore del tag oppure l'operazione di decrittografia non è riuscita per altri motivi.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Security.Cryptography.AesCcm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Crittografa il testo non crittografato nel buffer di destinazione del testo crittografato e genera il tag di autenticazione in un buffer separato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve essere un valore univoco per ogni operazione con la stessa chiave.</param>
      <param name="plaintext">Contenuto da crittografare.</param>
      <param name="ciphertext">Matrice di byte per la ricezione del contenuto crittografato.</param>
      <param name="tag">Matrice di byte per la ricezione del tag di autenticazione generato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono essere forniti anche durante la decrittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> o <paramref name="plaintext" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Operazione di crittografia non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Crittografa il testo non crittografato nel buffer di destinazione del testo crittografato e genera il tag di autenticazione in un buffer separato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve essere un valore univoco per ogni operazione con la stessa chiave.</param>
      <param name="plaintext">Contenuto da crittografare.</param>
      <param name="ciphertext">Intervallo di byte per la ricezione del contenuto crittografato.</param>
      <param name="tag">Intervallo di byte per la ricezione del tag di autenticazione generato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono essere forniti anche durante la decrittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Operazione di crittografia non riuscita.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>Ottiene le dimensioni del nonce, in byte, supportate da questa istanza.</summary>
      <returns>Dimensioni nonce supportate da questa istanza: 7, 8, 9, 10, 11, 12 o 13 byte (56, 64, 72, 80, 88, 96 o 104 bit).</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>Ottiene le dimensioni del tag, in byte, supportate da questa istanza.</summary>
      <returns>Dimensioni dei tag supportate da questa istanza: 4, 6, 8, 10, 12, 14 o 16 byte (32, 48, 64, 80, 96, 112 o 128 bit).</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>Rappresenta una chiave AES (Advanced Encryption Standard) da usare con la modalità operativa GCM (Galois/Counter Mode).</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.AesGcm" /> con la chiave specificata.</summary>
      <param name="key">Chiave privata da usare per questa istanza.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La lunghezza del parametro <paramref name="key" /> è diversa da 16, 24 o 32 byte (128, 192 o 256 bit).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.AesGcm" /> con la chiave specificata.</summary>
      <param name="key">Chiave privata da usare per questa istanza.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La lunghezza del parametro <paramref name="key" /> è diversa da 16, 24 o 32 byte (128, 192 o 256 bit).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Decrittografa il testo crittografato nel buffer di destinazione specificato se il tag di autenticazione può essere convalidato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve corrispondere al valore fornito durante la crittografia.</param>
      <param name="ciphertext">Contenuto crittografato da decrittografare.</param>
      <param name="tag">Tag di autenticazione prodotto per questo messaggio durante la crittografia.</param>
      <param name="plaintext">Matrice di byte per la ricezione del contenuto decrittografato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono corrispondere al valore fornito durante la crittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> o <paramref name="plaintext" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile verificare il valore del tag oppure l'operazione di decrittografia non è riuscita per altri motivi.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Decrittografa il testo crittografato nel buffer di destinazione specificato se il tag di autenticazione può essere convalidato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve corrispondere al valore fornito durante la crittografia.</param>
      <param name="ciphertext">Contenuto crittografato da decrittografare.</param>
      <param name="tag">Tag di autenticazione prodotto per questo messaggio durante la crittografia.</param>
      <param name="plaintext">Intervallo di byte per la ricezione del contenuto decrittografato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono corrispondere al valore fornito durante la crittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile verificare il valore del tag oppure l'operazione di decrittografia non è riuscita per altri motivi.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Security.Cryptography.AesGcm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Crittografa il testo non crittografato nel buffer di destinazione del testo crittografato e genera il tag di autenticazione in un buffer separato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve essere un valore univoco per ogni operazione con la stessa chiave.</param>
      <param name="plaintext">Contenuto da crittografare.</param>
      <param name="ciphertext">Matrice di byte per la ricezione del contenuto crittografato.</param>
      <param name="tag">Matrice di byte per la ricezione del tag di autenticazione generato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono essere forniti anche durante la decrittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> o <paramref name="plaintext" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Operazione di crittografia non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Crittografa il testo non crittografato nel buffer di destinazione del testo crittografato e genera il tag di autenticazione in un buffer separato.</summary>
      <param name="nonce">Nonce associato a questo messaggio, che deve essere un valore univoco per ogni operazione con la stessa chiave.</param>
      <param name="plaintext">Contenuto da crittografare.</param>
      <param name="ciphertext">Matrice di byte per la ricezione del contenuto crittografato.</param>
      <param name="tag">Matrice di byte per la ricezione del tag di autenticazione generato.</param>
      <param name="associatedData">Dati aggiuntivi associati a questo messaggio, che devono essere forniti anche durante la decrittografia.</param>
      <exception cref="T:System.ArgumentException">Il parametro <paramref name="plaintext" /> e <paramref name="ciphertext" /> non hanno la stessa lunghezza.

-oppure-

La lunghezza del parametro <paramref name="nonce" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-oppure-

La lunghezza del parametro <paramref name="tag" /> non è consentita da <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Operazione di crittografia non riuscita.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>Ottiene le dimensioni del nonce, in byte, supportate da questa istanza.</summary>
      <returns>Dimensioni del parametro nonce supportate da questa istanza: 12 byte (96 bit).</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>Ottiene le dimensioni del tag, in byte, supportate da questa istanza.</summary>
      <returns>Dimensioni dei tag supportate da questa istanza: 12, 13, 14, 15 o 16 byte (96, 104, 112, 120 o 128 bit).</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Fornisce un'implementazione gestita dell'algoritmo simmetrico AES (Advanced Encryption Standard).</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.AesManaged" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">L'impostazione dei criteri di sicurezza di Windows per FIPS è attivata.</exception>
      <exception cref="T:System.InvalidOperationException">Questa implementazione non fa parte degli algoritmi di crittografia con convalida Windows Platform FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Consente di creare un oggetto di decrittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) correnti.</summary>
      <returns>Oggetto di decrittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Consente di creare un oggetto di decrittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) specificati.</summary>
      <param name="rgbKey">Chiave privata da usare per l'algoritmo simmetrico.</param>
      <param name="rgbIV">Vettore di inizializzazione da usare per l'algoritmo simmetrico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> o <paramref name="iv" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> non è valido.</exception>
      <returns>Oggetto di decrittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Consente di creare un oggetto di crittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) correnti.</summary>
      <returns>Oggetto di crittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Consente di creare un oggetto di crittografia simmetrica utilizzando la chiave e il vettore di inizializzazione (IV) specificati.</summary>
      <param name="rgbKey">Chiave privata da usare per l'algoritmo simmetrico.</param>
      <param name="rgbIV">Vettore di inizializzazione da usare per l'algoritmo simmetrico.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> o <paramref name="iv" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> non è valido.</exception>
      <returns>Oggetto di crittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Genera un vettore di inizializzazione (IV) casuale da utilizzare per l'algoritmo simmetrico.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Genera una chiave casuale da utilizzare per l'algoritmo simmetrico.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>Ottiene o imposta la dimensione in bit del blocco dell'operazione di crittografia.</summary>
      <returns>Dimensioni in bit del blocco dell'operazione di crittografia. Il valore predefinito è 128 bit.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Ottiene o imposta il numero di bit da utilizzare come feedback.</summary>
      <returns>Dimensione del feedback, in bit.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Ottiene o imposta il vettore di inizializzazione (IV) da utilizzare per l'algoritmo simmetrico.</summary>
      <returns>Vettore di inizializzazione da utilizzare per l'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Ottiene o imposta la chiave privata utilizzata per l'algoritmo simmetrico.</summary>
      <returns>Chiave per l'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Ottiene o imposta la dimensione in bit della chiave privata utilizzata per l'algoritmo simmetrico.</summary>
      <returns>Dimensione in bit della chiave utilizzata dall'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>Ottiene le dimensioni in bit dei blocchi supportate dall'algoritmo simmetrico.</summary>
      <returns>Dimensioni in bit dei blocchi supportate dall'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>Ottiene le dimensioni in bit delle chiavi supportate dall'algoritmo simmetrico.</summary>
      <returns>Dimensioni in bit delle chiavi supportate dall'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Ottiene o imposta la modalità di funzionamento dell'algoritmo simmetrico.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> è impostato su <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> o <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
      <returns>Uno dei valori di enumerazione che specifica la modalità di crittografia a blocchi da utilizzare per la crittografia. Il valore predefinito è <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Ottiene o imposta la modalità di riempimento usata nell'algoritmo simmetrico.</summary>
      <returns>Uno dei valori di enumerazione che specifica il tipo di riempimento da applicare. Il valore predefinito è <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>Rappresenta la classe base da cui derivano tutti i deformattatori di scambio delle chiavi asimmetriche.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>In caso di override in una classe derivata, estrae le informazioni segrete dai dati crittografati di scambio delle chiavi.</summary>
      <param name="rgb">Dati di scambio delle chiavi in cui sono occultate le informazioni segrete.</param>
      <returns>Informazioni segrete derivate dai dati di scambio delle chiavi.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>In caso di override in una classe derivata, imposta la chiave privata da usare per decrittografare le informazioni segrete.</summary>
      <param name="key">Istanza dell'implementazione di <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> che contiene la chiave privata.</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>In caso di override in una classe derivata, ottiene o imposta i parametri per lo scambio delle chiavi asimmetriche.</summary>
      <returns>Stringa in formato XML contenente i parametri dell'operazione di scambio delle chiavi asimmetriche.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>Rappresenta la classe base da cui derivano tutti i formattatori di scambio delle chiavi asimmetriche.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>In caso di override in una classe derivata, crea i dati crittografati di scambio delle chiavi dai dati di input specificati.</summary>
      <param name="data">Informazioni segrete da passare nello scambio delle chiavi.</param>
      <returns>Dati crittografati di scambio delle chiavi da inviare al destinatario prescelto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>In caso di override in una classe derivata, crea i dati crittografati di scambio delle chiavi dai dati di input specificati.</summary>
      <param name="data">Informazioni segrete da passare nello scambio delle chiavi.</param>
      <param name="symAlgType">Questo parametro non viene usato nella versione corrente.</param>
      <returns>Dati crittografati di scambio delle chiavi da inviare al destinatario prescelto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>In caso di override in una classe derivata, imposta la chiave pubblica da usare per crittografare le informazioni segrete.</summary>
      <param name="key">Istanza dell'implementazione di <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> che contiene la chiave pubblica.</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>In caso di override in una classe derivata, ottiene i parametri per lo scambio delle chiavi asimmetriche.</summary>
      <returns>Stringa in formato XML contenente i parametri dell'operazione di scambio delle chiavi asimmetriche.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>Rappresenta la classe base astratta da cui derivano tutte le implementazioni dei deformattatori asimmetrici della firma.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>In caso di override in una classe derivata, imposta l'algoritmo hash da usare per la verifica della firma.</summary>
      <param name="strName">Nome dell'algoritmo hash da usare per verificare la firma.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>In caso di override in una classe derivata, imposta la chiave pubblica da usare per verificare la firma.</summary>
      <param name="key">Istanza di un'implementazione di <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> che contiene la chiave pubblica.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>In caso di override in una classe derivata, verifica la firma per i dati specificati.</summary>
      <param name="rgbHash">Dati firmati con <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Firma da verificare per <paramref name="rgbHash" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="rgbSignature" /> corrisponde alla firma calcolata con l'algoritmo hash specificato e la chiave in <paramref name="rgbHash" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>Verifica la firma dal valore hash specificato.</summary>
      <param name="hash">Algoritmo hash da usare per verificare la firma.</param>
      <param name="rgbSignature">Firma da verificare.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="hash" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se la firma è valida per l'hash. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>Rappresenta la classe base da cui derivano tutte le implementazioni di formattatori asimmetrici della firma.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>In caso di override in una classe derivata, crea la firma per i dati specificati.</summary>
      <param name="rgbHash">Dati da firmare.</param>
      <returns>Firma digitale per il parametro <paramref name="rgbHash" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>Crea la firma dal valore hash specificato.</summary>
      <param name="hash">Algoritmo hash da usare per creare la firma.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="hash" /> è <see langword="null" />.</exception>
      <returns>Firma per il valore hash specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>In caso di override in una classe derivata, imposta l'algoritmo hash da usare per la creazione della firma.</summary>
      <param name="strName">Nome dell'algoritmo hash da usare per creare la firma.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>In caso di override in una classe derivata, imposta l'algoritmo asimmetrico da usare per la creazione della firma.</summary>
      <param name="key">Istanza dell'implementazione di <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> da usare per la creazione della firma.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>Consente di accedere alle informazioni di configurazione della crittografia.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.CryptoConfig" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>Aggiunge un set di nomi ai mapping degli algoritmi da utilizzare per il dominio di applicazione corrente.</summary>
      <param name="algorithm">Algoritmo a cui eseguire il mapping.</param>
      <param name="names">Matrice dei nomi di cui eseguire il mapping all'algoritmo.</param>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="algorithm" /> o il parametro <paramref name="names" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Non è possibile accedere a <paramref name="algorithm" /> dall'esterno dell'assembly.  
  
-oppure- 
Una delle voci nel parametro <paramref name="names" /> è vuota o <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>Aggiunge un set di nomi ai mapping degli identificatori di oggetto (OID, Object ID) da utilizzare per il dominio di applicazione corrente.</summary>
      <param name="oid">Identificatore di oggetto (OID, Object ID) a cui eseguire il mapping.</param>
      <param name="names">Matrice dei nomi di cui eseguire il mapping all'OID.</param>
      <exception cref="T:System.ArgumentNullException">Il parametro <paramref name="oid" /> o il parametro <paramref name="names" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Una delle voci nel parametro <paramref name="names" /> è vuota o <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>Consente di creare una nuova istanza dell'oggetto di crittografia specificato.</summary>
      <param name="name">Nome semplice dell'oggetto di crittografia di cui creare un'istanza.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="name" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza dell'oggetto di crittografia specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>Consente di creare una nuova istanza dell'oggetto di crittografia specificato con gli argomenti indicati.</summary>
      <param name="name">Nome semplice dell'oggetto di crittografia di cui creare un'istanza.</param>
      <param name="args">Argomenti utilizzati per creare l'oggetto di crittografia specificato.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="name" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza dell'oggetto di crittografia specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>Consente di codificare l'identificatore di oggetto (OID) specificato.</summary>
      <param name="str">OID da codificare.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="str" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Si è verificato un errore durante la codifica dell'OID.</exception>
      <returns>Matrice di byte che contiene l'OID codificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>Ottiene l'identificatore di oggetto (OID) dell'algoritmo che corrisponde al nome semplice specificato.</summary>
      <param name="name">Nome semplice dell'algoritmo per il quale ottenere l'OID.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="name" /> è <see langword="null" />.</exception>
      <returns>OID dell'algoritmo specificato.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>Indica se il runtime deve applicare i criteri per creare soltanto algoritmi certificati da FIPS (Federal Information Processing Standard).</summary>
      <returns>
        <see langword="true" /> per applicare i criteri. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>Rappresenta la classe base astratta da cui ereditano tutte le classi che derivano sequenze di byte di una lunghezza specificata.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DeriveBytes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>Quando ne viene eseguito l'override in una classe derivata, rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Security.Cryptography.DeriveBytes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, rilascia le risorse non gestite usate dalla classe <see cref="T:System.Security.Cryptography.DeriveBytes" /> ed eventualmente rilascia le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, restituisce byte chiave pseudo-casuali.</summary>
      <param name="cb">Numero di byte chiave pseudo-casuali da generare.</param>
      <returns>Matrice di byte riempita con byte chiave pseudo-casuali.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>Quando ne viene eseguito l'override in una classe derivata, reimposta lo stato dell'operazione.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>Rappresenta la classe base per l'algoritmo DES (Data Encryption Standard) da cui devono derivare tutte le implementazioni di <see cref="T:System.Security.Cryptography.DES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>Crea un'istanza di un oggetto di crittografia per eseguire l'algoritmo Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />).</summary>
      <returns>Oggetto di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>Consente di creare un'istanza di un oggetto di crittografia per eseguire l'implementazione specificata dell'algoritmo <see cref="T:System.Security.Cryptography.DES" /> (Data Encryption Standard).</summary>
      <param name="algName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.DES" /> da utilizzare.</param>
      <returns>Oggetto di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>Determina se la chiave specificata è semidebole.</summary>
      <param name="rgbKey">Chiave segreta di cui verificare la semidebolezza.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La dimensione del parametro <paramref name="rgbKey" /> non è valida.</exception>
      <returns>
        <see langword="true" /> se la chiave è semidebole. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>Determina se la chiave specificata è debole.</summary>
      <param name="rgbKey">Chiave segreta di cui verificare la debolezza.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La dimensione del parametro <paramref name="rgbKey" /> non è valida.</exception>
      <returns>
        <see langword="true" /> se la chiave è debole. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>Ottiene o imposta la chiave privata per l'algoritmo Data Encryption Standard (<see cref="T:System.Security.Cryptography.DES" />).</summary>
      <exception cref="T:System.ArgumentNullException">Si è tentato di impostare la chiave su <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Si è tentato di impostare una chiave la cui lunghezza non è uguale a <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è tentato di impostare una chiave debole (vedere <see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />) o una chiave semidebole (vedere <see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />).</exception>
      <returns>Chiave privata per l'algoritmo <see cref="T:System.Security.Cryptography.DES" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>Rappresenta la classe base astratta da cui devono ereditare tutte le implementazioni dell'algoritmo di firma digitale (<see cref="T:System.Security.Cryptography.DSA" />).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>Consente di creare l'oggetto di crittografia predefinito utilizzato per eseguire l'algoritmo asimmetrico.</summary>
      <returns>Oggetto di crittografia utilizzato per eseguire l'algoritmo asimmetrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>Crea una nuova chiave DSA temporanea con le dimensioni della chiave specificate.</summary>
      <param name="keySizeInBits">Dimensioni della chiave in bit.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> non è consentito da <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" />.</exception>
      <returns>Nuova chiave DSA temporanea con le dimensioni della chiave specificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>Crea una nuova chiave DSA temporanea con i parametri di chiave DSA specificati.</summary>
      <param name="parameters">Parametri per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <returns>Nuova chiave DSA temporanea.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>Consente di creare l'oggetto di crittografia specificato utilizzato per eseguire l'algoritmo asimmetrico.</summary>
      <param name="algName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.DSA" /> da utilizzare.</param>
      <returns>Oggetto di crittografia utilizzato per eseguire l'algoritmo asimmetrico.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>In caso di override in una classe derivata, crea la firma <see cref="T:System.Security.Cryptography.DSA" /> per il valore hash specificato.</summary>
      <param name="rgbHash">Valore hash da firmare.</param>
      <returns>Firma digitale per il valore hash specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Crea la firma DSA del valore hash specificato nel formato indicato.</summary>
      <param name="rgbHash">Valore hash da firmare.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Crea la firma DSA del valore hash specificato nel formato indicato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>Quando è sottoposto a override in una classe derivata, esporta <see cref="T:System.Security.Cryptography.DSAParameters" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <returns>Parametri per <see cref="T:System.Security.Cryptography.DSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>Consente di ricostruire un oggetto <see cref="T:System.Security.Cryptography.DSA" /> da una stringa XML.</summary>
      <param name="xmlString">Stringa XML da usare per ricostruire l'oggetto <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="xmlString" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il formato del parametro <paramref name="xmlString" /> non è valido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>Ottiene le dimensioni massime, in byte, per una firma prodotta da questa chiave nel formato indicato.</summary>
      <param name="signatureFormat">Formato di codifica per una firma.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <returns>Dimensioni massime, in byte, per una firma prodotta da questa chiave nel formato indicato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando sottoposto a override in una classe derivata, calcola il valore hash di una parte specificata di una matrice di byte usando un algoritmo hash specificato.</summary>
      <param name="data">Dati per i quali si desidera generare un hash.</param>
      <param name="offset">Indice del primo byte in <paramref name="data" /> per cui si deve calcolare il codice hash.</param>
      <param name="count">Numero di byte per cui calcolare il codice hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare per la codifica hash dei dati.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Dati con hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando sottoposto a override in una classe derivata, calcola il valore hash di un flusso binario specificato usando un algoritmo hash specificato.</summary>
      <param name="data">Flusso binario per la codifica hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare per la codifica hash dei dati.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Dati con hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su byte, sostituendo le chiavi per questo oggetto.</summary>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> indica che la funzione di derivazione della chiave (KDF) da applicare è la funzione PKCS#12 legacy, che richiede password basate su <see cref="T:System.Char" />.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su caratteri, sostituendo le chiavi per questo oggetto.</summary>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

            <paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

            <paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave con codifica PEM 7468 RFC, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave da importare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

            <paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.

-oppure-

            <paramref name="input" /> contiene una chiave crittografata con codifica PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>Quando è sottoposto a override in una classe derivata, importa l'oggetto <see cref="T:System.Security.Cryptography.DSAParameters" /> specificato.</summary>
      <param name="parameters">Parametri per <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <exception cref="T:System.ArgumentException">In <paramref name="parameters" /> mancano campi obbligatori.

-oppure-

<paramref name="parameters" /> contiene campi con lunghezze incoerenti per una chiave valida.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> non rappresenta un set di parametri di chiave DSA valido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 PrivateKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura PKCS#8 PrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 PrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la chiave pubblica da una struttura X.509 SubjectPublicKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura X.509 SubjectPublicKeyInfo nella codifica ASN.1-DER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura X.509 SubjectPublicKeyInfo con codifica ASN.1-DER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcola il valore hash di una parte della matrice di byte specificata usando l'algoritmo hash specificato e firma il valore hash risultante.</summary>
      <param name="data">Dati di input per cui calcolare il valore hash.</param>
      <param name="offset">Offset nella matrice dal quale iniziare a usare i dati.</param>
      <param name="count">Numero di byte nella matrice da usare come dati.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> è minore di zero.  
  
-oppure- 
 <paramref name="count" /> è minore di zero.  
  
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="offset">Offset in <paramref name="data" /> da cui iniziare l'hashing.</param>
      <param name="count">Numero di byte da leggere da <paramref name="data" />.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.
 
oppure <paramref name="offset" /> è minore di zero.
 
oppure <paramref name="count" /> è minore di zero.
 
oppure <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcola il valore hash della matrice di byte specificata usando l'algoritmo hash specificato e firma il valore hash risultante.</summary>
      <param name="data">Dati di input per cui calcolare il valore hash.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcola il valore hash del flusso specificato usando l'algoritmo hash specificato e firma il valore hash risultante.</summary>
      <param name="data">Flusso di input per cui calcolare il valore hash.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma DSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>Consente di creare e restituire una rappresentazione in forma di stringa XML dell'oggetto <see cref="T:System.Security.Cryptography.DSA" /> corrente.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <returns>Codifica in forma di stringa XML dell'oggetto <see cref="T:System.Security.Cryptography.DSA" /> corrente.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di creare la firma DSA per l'hash specificato nel buffer fornito.</summary>
      <param name="hash">Hash usato per la firma.</param>
      <param name="destination">Intervallo di byte per la ricezione della firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e <paramref name="hash" /> non è un valore di 20 byte.

-oppure-

Creazione della firma non riuscita per altri motivi.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere il risultato. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Prova a creare la firma DSA per il valore hash specificato nel formato indicato e la inserisce nel buffer specificato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Prova a creare la firma DSA per il valore hash specificato nel formato indicato e la inserisce nel buffer specificato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su byte.</summary>
      <param name="passwordBytes">Byte da usare come password per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.

-oppure-

<paramref name="pbeParameters" /> indica che è necessario usare <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />, che richiede password basate su <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su caratteri.</summary>
      <param name="password">Password da usare per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 PrivateKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato X.509 SubjectPublicKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per ricevere i dati X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta di calcolare il valore hash dei dati specificati in un buffer specificato.</summary>
      <param name="data">Dati per i quali si desidera generare un hash.</param>
      <param name="destination">Intervallo di byte per la ricezione del valore hash.</param>
      <param name="hashAlgorithm">Nome dell'algoritmo hash da utilizzare.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere il risultato. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta di creare la firma DSA per i dati specificati nel buffer fornito.</summary>
      <param name="data">Dati per hash e firma.</param>
      <param name="destination">Intervallo di byte per la ricezione della firma.</param>
      <param name="hashAlgorithm">Nome dell'algoritmo hash da utilizzare.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere il risultato. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Prova a creare la firma DSA per i dati specificati nel formato indicato e la inserisce nel buffer specificato.</summary>
      <param name="data">Dati per hash e firma.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Prova a creare la firma DSA per i dati specificati nel formato indicato e la inserisce nel buffer specificato.</summary>
      <param name="data">Dati per hash e firma.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se le dimensioni di <paramref name="destination" /> sono sufficienti per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash dei dati specificati usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e l'algoritmo hash non è SHA-1.

-oppure-

Verifica della firma non riuscita per altri motivi.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash dei dati in una parte di matrice di byte usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="offset">Indice iniziale dal quale calcolare il codice hash.</param>
      <param name="count">Numero di byte per cui calcolare il codice hash.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> è minore di zero.  
  
-oppure- 
 <paramref name="count" /> è minore di zero.  
  
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e l'algoritmo hash non è SHA-1.

-oppure-

Verifica della firma non riuscita per altri motivi.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Matrice contenente i dati firmati.</param>
      <param name="offset">Indice iniziale della parte firmata di <paramref name="data" />.</param>
      <param name="count">Numero di byte in <paramref name="data" /> che sono stati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.
 
oppure <paramref name="offset" /> è minore di zero.
 
oppure <paramref name="count" /> è minore di zero.
 
oppure <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash del flusso specificato usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e l'algoritmo hash non è SHA-1.

-oppure-

Verifica della firma non riuscita per altri motivi.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash dei dati in un intervallo di byte usando l'algoritmo hash specificato e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e l'algoritmo hash non è SHA-1.

-oppure-

Verifica della firma non riuscita per altri motivi.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Quando è sottoposto a override in una classe derivata, verifica la firma <see cref="T:System.Security.Cryptography.DSA" /> per i dati specificati.</summary>
      <param name="rgbHash">Hash dei dati firmati con <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Firma da verificare per <c>rgbData</c>.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e il valore hash non ha una lunghezza di 20 byte.

-oppure-

Verifica della firma non riuscita per altri motivi.</exception>
      <returns>
        <see langword="true" /> se <paramref name="rgbSignature" /> corrisponde alla firma calcolata con l'algoritmo hash specificato e la chiave in <paramref name="rgbHash" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per l'hash specificato.</summary>
      <param name="rgbHash">Hash firmato.</param>
      <param name="rgbSignature">Firma da verificare.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="rgbSignature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> o <paramref name="rgbSignature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifica che una firma digitale sia valida per un hash di dati specificato.</summary>
      <param name="hash">Hash di dati da verificare.</param>
      <param name="signature">Firma da verificare.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il tipo di implementazione supporta solo DSA legacy (FIPS 186-2) e il valore hash non ha una lunghezza di 20 byte.

-oppure-

Verifica della firma non riuscita per altri motivi.</exception>
      <returns>
        <see langword="true" /> se la firma è valida per l'hash. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per l'hash specificato.</summary>
      <param name="hash">Hash firmato.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per l'hash specificato.</summary>
      <param name="hash">Hash firmato.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>Contiene i parametri tipici per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>Consente di specificare il contatore per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>Consente di specificare il parametro <see langword="G" /> per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>Consente di specificare il parametro <see langword="J" /> per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>Consente di specificare il parametro <see langword="P" /> per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>Consente di specificare il parametro <see langword="Q" /> per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>Consente di specificare il valore di inizializzazione per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>Consente di specificare il parametro <see langword="X" /> per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>Consente di specificare il parametro <see langword="Y" /> per l'algoritmo <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>Consente di verificare una firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm) PKCS#1 v1.5.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza della classe <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm) che conserva la chiave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Consente di specificare l'algoritmo hash per il deformattatore della chiave <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm).</summary>
      <param name="strName">Nome dell'algoritmo hash da utilizzare per il deformattatore della firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Il parametro <paramref name="strName" /> non è associato all'algoritmo hash <see cref="T:System.Security.Cryptography.SHA1" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Consente di specificare la chiave da utilizzare per il deformattatore della firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm).</summary>
      <param name="key">Istanza della classe <see cref="T:System.Security.Cryptography.DSA" /> che conserva la chiave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Consente di verificare la firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm) sui dati.</summary>
      <param name="rgbHash">Dati firmati con <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Firma da verificare per <paramref name="rgbHash" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="rgbSignature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave DSA è mancante.</exception>
      <returns>
        <see langword="true" /> se la firma è valida per i dati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormat">
      <summary>Specifica il formato dei dati per le firme con la famiglia di algoritmi DSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.IeeeP1363FixedFieldConcatenation">
      <summary>Formato della firma di IEEE P1363, che produce una firma di dimensioni fisse per una chiave specificata.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.Rfc3279DerSequence">
      <summary>Formato della firma di IETF RFC 3279, che produce una firma di dimensioni variabili.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>Crea una firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DSASignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza della classe <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm) che conserva la chiave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Consente di creare la firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm) PKCS #1 per i dati specificati.</summary>
      <param name="rgbHash">Dati da firmare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">L'OID è <see langword="null" />.  
  
-oppure- 
La chiave DSA è <see langword="null" />.</exception>
      <returns>Firma digitale per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Consente di specificare l'algoritmo hash per il formattatore della firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm).</summary>
      <param name="strName">Nome dell'algoritmo hash da utilizzare per il formattatore della firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Il parametro <paramref name="strName" /> non è associato all'algoritmo hash <see cref="T:System.Security.Cryptography.SHA1" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Consente di specificare la chiave da utilizzare per il formattatore della firma <see cref="T:System.Security.Cryptography.DSA" /> (Digital Signature Algorithm).</summary>
      <param name="key">Istanza della classe <see cref="T:System.Security.Cryptography.DSA" /> che conserva la chiave.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>Rappresenta una curva ellittica.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>Primo coefficiente per una curva esplicita. <c>A</c> per le curve brevi di Weierstrass, Montgomery e Twisted Edwards.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>Secondo coefficiente per una curva esplicita. <c>B</c> per le curve brevi di Weierstrass e <c>d</c> per le curve brevi di Twisted Edwards.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>Cofattore della curva.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>Identifica la composizione dell'oggetto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>Generatore, o punto di base, per le operazioni sulla curva.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>Nome dell'algoritmo hash usato per generare i coefficienti della curva (<see cref="F:System.Security.Cryptography.ECCurve.A" /> e <see cref="F:System.Security.Cryptography.ECCurve.B" />) da <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> con l'algoritmo di generazione ANSI X9.62. Si applica solo alle curve esplicite.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>Ordine della curva. Si applica solo alle curve esplicite.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>Polinomio della curva. Si applica solo alle curve di caratteristica 2.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>Numero primo che specifica il campo base. Si applica solo alle curve dei numeri primi.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>Valore di inizializzazione per la generazione del coefficiente con l'algoritmo di generazione ANSI X9.62. Si applica solo alle curve esplicite.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>Crea una curva denominata con il nome descrittivo dell'identificatore specificato.</summary>
      <param name="oidFriendlyName">Nome descrittivo dell'identificatore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> è <see langword="null" />.</exception>
      <returns>Oggetto che rappresenta la curva denominata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>Crea una curva denominata con l'oggetto <see cref="T:System.Security.Cryptography.Oid" /> specificato.</summary>
      <param name="curveOid">Identificatore di oggetto da usare.</param>
      <returns>Oggetto che rappresenta la curva denominata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>Crea una curva denominata usando la rappresentazione decimale puntata specificata dell'identificatore.</summary>
      <param name="oidValue">Numero con punto dell'identificatore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> è <see langword="null" />.</exception>
      <returns>Oggetto che rappresenta la curva denominata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>Convalida l'integrità della curva corrente. Genera un'eccezione <see cref="T:System.Security.Cryptography.CryptographicException" /> se la struttura non è valida.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">I parametri della curva non sono validi per il tipo di curva corrente.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>Ottiene un valore che indica se il tipo di curva specifica una curva esplicita di caratteristica 2.</summary>
      <returns>
        <see langword="true" /> se la curva è una curva esplicita di caratteristica 2; <see langword="false" /> se la curva è una curva denominata di caratteristica 2, una curva dei numeri primi o una curva implicita.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>Ottiene un valore che indica se il tipo di curva specifica una curva esplicita (numeri primi o caratteristica 2).</summary>
      <returns>
        <see langword="true" /> se la curva è una curva esplicita (numeri primi o caratteristica 2); <see langword="false" /> se la curva è una curva denominata o una curva implicita.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>Ottiene un valore che indica se il tipo di curva specifica una curva denominata.</summary>
      <returns>
        <see langword="true" /> Se la curva è una curva denominata; <see langword="false" /> se la curva è una curva implicita o esplicita (primo o caratteristica 2).</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>Ottiene un valore che indica se il tipo di curva specifica una curva esplicita dei numeri primi.</summary>
      <returns>
        <see langword="true" /> se la curva è una curva esplicita dei numeri primi; <see langword="false" /> se la curva è una curva denominata dei numeri primi, una curva di caratteristica 2 o una curva implicita.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>Ottiene l'identificatore di una curva denominata.</summary>
      <returns>Identificatore di una curva denominata.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>Indica come interpretare i dati contenuti in un oggetto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>I parametri della curva rappresentano una curva di caratteristica 2.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>Non vengono interpretati i dati della curva. Si presuppone che il chiamante conosca la curva.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>I parametri della curva rappresentano una curva denominata.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>I parametri della curva rappresentano una curva dei numeri primi con la formula B*y^2 = x^3 + A*x^2 + x.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>I parametri della curva rappresentano una curva dei numeri primi con la formula y^2 = x^3 + A*x + B nel campo P dei numeri primi.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>I parametri della curva rappresentano una curva dei numeri primi con la formula A*x^2 + y^2 = 1 + B*x^2*y^2 nel campo P dei numeri primi.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>Rappresenta una classe factory per la creazione di curve denominate.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>Ottiene una curva denominata brainpoolP160r1.</summary>
      <returns>Curva denominata brainpoolP160r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>Ottiene una curva denominata brainpoolP160t1.</summary>
      <returns>Curva denominata brainpoolP160t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>Ottiene una curva denominata brainpoolP192r1.</summary>
      <returns>Curva denominata brainpoolP192r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>Ottiene una curva denominata brainpoolP192t1.</summary>
      <returns>Curva denominata brainpoolP192t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>Ottiene una curva denominata brainpoolP224r1.</summary>
      <returns>Curva denominata brainpoolP224r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>Ottiene una curva denominata brainpoolP224t1.</summary>
      <returns>Curva denominata brainpoolP224t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>Ottiene una curva denominata brainpoolP256r1.</summary>
      <returns>Curva denominata brainpoolP256r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>Ottiene una curva denominata brainpoolP256t1.</summary>
      <returns>Curva denominata brainpoolP256t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>Ottiene una curva denominata brainpoolP320r1.</summary>
      <returns>Curva denominata brainpoolP320r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>Ottiene una curva denominata brainpoolP320t1.</summary>
      <returns>Curva denominata brainpoolP320t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>Ottiene una curva denominata brainpoolP384r1.</summary>
      <returns>Curva denominata brainpoolP384r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>Ottiene una curva denominata brainpoolP384t1.</summary>
      <returns>Curva denominata brainpoolP384t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>Ottiene una curva denominata brainpoolP512r1.</summary>
      <returns>Curva denominata brainpoolP512r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>Ottiene una curva denominata brainpoolP512t1.</summary>
      <returns>Curva denominata brainpoolP512t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>Ottiene una curva denominata nistP256.</summary>
      <returns>Curva denominata nistP256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>Ottiene una curva denominata nistP384.</summary>
      <returns>Curva denominata nistP384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>Ottiene una curva denominata nistP521.</summary>
      <returns>Curva denominata nistP521.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Fornisce una classe di base astratta dalla quale possono derivare le implementazioni dell'algoritmo ECDH (Diffie-Hellman a curva ellittica). Questa classe fornisce l'insieme di operazioni di base che tutte le implementazioni ECDH devono supportare.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDH (Diffie-Hellman a curva ellittica).</summary>
      <returns>Nuova istanza dell'implementazione predefinita di questa classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDH (Elliptic Curve Diffie-Hellman) con una nuova coppia di chiavi pubblica/privata generata sulla curva specificata.</summary>
      <param name="curve">Curva da usare per generare una nuova coppia di chiavi pubblica/privata.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> non viene convalidato.</exception>
      <returns>Nuova istanza dell'implementazione predefinita dell'algoritmo ECDH (Elliptic Curve Diffie-Hellman).</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDH (Elliptic Curve Diffie-Hellman) con la chiave descritta dall'oggetto <see cref="T:System.Security.Cryptography.ECParameters" /> specificato.</summary>
      <param name="parameters">Parametri per l'algoritmo di crittografia a curva ellittica (ECC).</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> non viene convalidato.</exception>
      <returns>Nuova istanza dell'implementazione predefinita dell'algoritmo ECDH (Elliptic Curve Diffie-Hellman).</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Crea una nuova istanza dell'implementazione specificata dell'algoritmo Diffie-Hellman a curva ellittica (ECDH).</summary>
      <param name="algorithm">Nome di un'implementazione dell'algoritmo ECDH.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="algorithm" /> è <see langword="null" />.</exception>
      <returns>Nuova istanza dell'implementazione specificata di questa classe. Se il nome dell'algoritmo specificato non corrisponde a un'implementazione ECDH, questo metodo restituisce <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Esegue la derivazione della chiave usando un algoritmo hash specificato.</summary>
      <param name="otherPartyPublicKey">Chiave pubblica dell'altra parte.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare il materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">La curva usata da <paramref name="otherPartyPublicKey" /> ha dimensioni diverse rispetto alla curva da questa chiave.

-oppure-

Il parametro <paramref name="hashAlgorithm" /> non specifica un hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La curva usata da <paramref name="otherPartyPublicKey" /> è diversa dalla curva da questa chiave.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.</exception>
      <returns>Hash del segreto condiviso.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>Dopo l'implementazione in una classe derivata, esegue la derivazione della chiave usando un algoritmo hash specificato con dati facoltativi anteposti o accodati.</summary>
      <param name="otherPartyPublicKey">Chiave pubblica dell'altra parte.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare il materiale della chiave.</param>
      <param name="secretPrepend">Valore da anteporre al segreto derivato prima dell'hashing.</param>
      <param name="secretAppend">Valore da aggiungere al segreto derivato prima dell'hashing.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.ArgumentException">La curva usata da <paramref name="otherPartyPublicKey" /> ha dimensioni diverse rispetto alla curva da questa chiave.

-oppure-

Il parametro <paramref name="hashAlgorithm" /> non specifica un hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La curva usata da <paramref name="otherPartyPublicKey" /> è diversa dalla curva da questa chiave.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.</exception>
      <returns>Hash del segreto condiviso dopo aver anteposto o accodato i dati come richiesto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Esegue la derivazione della chiave usando un algoritmo HMAC (Hash-based Message Authentication Code) specificato.</summary>
      <param name="otherPartyPublicKey">Chiave pubblica dell'altra parte.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare il materiale della chiave.</param>
      <param name="hmacKey">Chiave del valore HMAC.</param>
      <exception cref="T:System.ArgumentException">La curva usata da <paramref name="otherPartyPublicKey" /> ha dimensioni diverse rispetto alla curva da questa chiave.

-oppure-

Il parametro <paramref name="hashAlgorithm" /> non specifica un hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La curva usata da <paramref name="otherPartyPublicKey" /> è diversa dalla curva da questa chiave.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.</exception>
      <returns>HMAC del segreto condiviso.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>Dopo l'implementazione in una classe derivata, esegue la derivazione della chiave usando un algoritmo HMAC (Hash-based Message Authentication Code) specificato con dati facoltativi anteposti o accodati.</summary>
      <param name="otherPartyPublicKey">Chiave pubblica dell'altra parte.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare il materiale della chiave.</param>
      <param name="hmacKey">Chiave del valore HMAC.</param>
      <param name="secretPrepend">Valore da anteporre al segreto derivato prima dell'hashing.</param>
      <param name="secretAppend">Valore da aggiungere al segreto derivato prima dell'hashing.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.ArgumentException">La curva usata da <paramref name="otherPartyPublicKey" /> ha dimensioni diverse rispetto alla curva da questa chiave.

-oppure-

Il parametro <paramref name="hashAlgorithm" /> non specifica un hash.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La curva usata da <paramref name="otherPartyPublicKey" /> è diversa dalla curva da questa chiave.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.</exception>
      <returns>HMAC del segreto condiviso dopo aver anteposto o accodato i dati come richiesto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>Dopo l'implementazione in una classe derivata, esegue una derivazione della chiave sul segreto condiviso.</summary>
      <param name="otherPartyPublicKey">Chiave pubblica dell'altra parte.</param>
      <exception cref="T:System.ArgumentException">La curva usata da <paramref name="otherPartyPublicKey" /> ha dimensioni diverse rispetto alla curva da questa chiave.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La curva usata da <paramref name="otherPartyPublicKey" /> è diversa dalla curva da questa chiave.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.</exception>
      <returns>Risultato della funzione di derivazione della chiave, usando il segreto condiviso come input.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>Dopo l'implementazione in una classe derivata, esegue la derivazione della chiave usando la PRF (Pseudo-Random Function) TLS (Transport Layer Security) 1.1.</summary>
      <param name="otherPartyPublicKey">Chiave pubblica dell'altra parte.</param>
      <param name="prfLabel">Etichetta PRF con codifica ASCII.</param>
      <param name="prfSeed">Valore di inizializzazione PRF a 64 byte.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.ArgumentException">La curva usata da <paramref name="otherPartyPublicKey" /> ha dimensioni diverse rispetto alla curva da questa chiave.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> o <paramref name="prfSeed" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> non ha esattamente una lunghezza di 64 byte.

-oppure-

La curva usata da <paramref name="otherPartyPublicKey" /> è diversa dalla curva da questa chiave.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.</exception>
      <returns>Primi 48 byte dalla PRF TLS 1,1, usando il segreto condiviso come chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>Esporta la chiave corrente nel formato ECPrivateKey.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>Matrice di byte contenente la rappresentazione ECPrivateKey della chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, esporta le informazioni sulla chiave pubblica o sulla chiave pubblica e privata usando il form della curva esplicita da una chiave <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> funzionante in una struttura <see cref="T:System.Security.Cryptography.ECParameters" /> in modo che possano essere passate al metodo <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Oggetto che rappresenta il punto sulla curva per questa chiave, usando il formato della curva esplicita.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, esporta le informazioni sulla chiave pubblica o sulla chiave pubblica e privata da una chiave <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> funzionante in una struttura <see cref="T:System.Security.Cryptography.ECParameters" /> in modo che possano essere passate al metodo <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" /> per includere solo i parametri pubblici.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Oggetto che rappresenta il punto sulla curva per questa chiave. Può essere passato al metodo <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>Questo metodo genera in tutti i casi.</summary>
      <param name="xmlString">Stringa XML da usare per ricostruire l'oggetto <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
      <exception cref="T:System.NotImplementedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, genera una nuova coppia di chiavi pubblica/privata temporanea per la curva specificata.</summary>
      <param name="curve">Curva usata per generare una coppia di chiavi pubblica/privata temporanea.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> non viene convalidato.</exception>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura ECPrivateKey, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura ECPrivateKey nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 ECPrivateKey con codifica ASN.1-BER.

-oppure-

Importazione della chiave non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su byte, sostituendo le chiavi per questo oggetto.</summary>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> indica che la funzione di derivazione della chiave (KDF) da applicare è la funzione PKCS#12 legacy, che richiede password basate su <see cref="T:System.Char" />.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su caratteri, sostituendo le chiavi per questo oggetto.</summary>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave con codifica PEM 7468 RFC, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave da importare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene una chiave crittografata con codifica PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, importa i parametri specificati per un oggetto <see cref="T:System.Security.Cryptography.ECCurve" /> come chiave temporanea nell'oggetto <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> corrente.</summary>
      <param name="parameters">Parametri della curva da importare.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> non viene convalidato.</exception>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 PrivateKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura PKCS#8 PrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 PrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la chiave pubblica da una struttura X.509 SubjectPublicKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura X.509 SubjectPublicKeyInfo nella codifica ASN.1-DER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura X.509 SubjectPublicKeyInfo con codifica ASN.1-DER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>Questo metodo genera in tutti i casi.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.NotImplementedException">In tutti i casi.</exception>
      <returns>Questo metodo non restituisce valori.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Prova a esportare la chiave corrente nel formato <see langword="ECPrivateKey" /> in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati <see langword="ECPrivateKey" />.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su byte.</summary>
      <param name="passwordBytes">Byte da usare come password per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.

-oppure-

<paramref name="pbeParameters" /> indica che è necessario usare <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />, che richiede password basate su <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su caratteri.</summary>
      <param name="password">Password da usare per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 PrivateKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato X.509 SubjectPublicKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per ricevere i dati X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Ottiene il nome dell'algoritmo di scambio delle chiavi.</summary>
      <returns>Nome dell'algoritmo di scambio delle chiavi.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Ottiene la chiave pubblica utilizzata dall'istanza ECDH (Diffie-Hellman a curva ellittica) corrente.</summary>
      <returns>Parte pubblica della coppia di chiavi ECDH utilizzata da questa istanza <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Ottiene il nome dell'algoritmo di firma.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Fornisce una classe di base astratta dalla quale ereditare tutte le implementazioni di <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
      <param name="keyBlob">Matrice di byte che rappresenta un oggetto <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Rilascia le risorse non gestite usate dalla classe <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> e facoltativamente le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>Quando ne viene eseguito l'override in una classe derivata, esporta l'oggetto <see cref="T:System.Security.Cryptography.ECParameters" /> esplicito per un oggetto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
      <exception cref="T:System.NotSupportedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Oggetto che rappresenta il punto sulla curva per questa chiave, usando il formato della curva esplicita.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>Quando ne viene eseguito l'override in una classe derivata, esporta l'oggetto <see cref="T:System.Security.Cryptography.ECParameters" /> denominato o esplicito per un oggetto <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
      <exception cref="T:System.NotSupportedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Oggetto che rappresenta il punto sulla curva per questa chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Serializza il BLOB della chiave <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> in una matrice di byte.</summary>
      <returns>Matrice di byte contenente la chiave pubblica ECDH (Diffie-Hellman a curva ellittica) serializzata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Serializza la chiave pubblica <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> in una stringa XML.</summary>
      <returns>Stringa XML contenente la chiave pubblica ECDH (Diffie-Hellman a curva ellittica) serializzata.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Fornisce una classe base astratta che incapsula l'algoritmo ECDSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.ECDsa" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm).</summary>
      <returns>Nuova istanza dell'implementazione predefinita (<see cref="T:System.Security.Cryptography.ECDsaCng" />) di questa classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm) con una chiave appena generata sulla curva specificata.</summary>
      <param name="curve">Curva da usare per la generazione delle chiavi.</param>
      <returns>Nuova istanza dell'implementazione predefinita (<see cref="T:System.Security.Cryptography.ECDsaCng" />) di questa classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>Crea una nuova istanza dell'implementazione predefinita dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm) usando i parametri specificati come chiave.</summary>
      <param name="parameters">Parametri che rappresentano la chiave da usare.</param>
      <returns>Nuova istanza dell'implementazione predefinita (<see cref="T:System.Security.Cryptography.ECDsaCng" />) di questa classe.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Crea una nuova istanza dell'implementazione specificata dell'algoritmo ECDSA (Elliptic Curve Digital Signature Algorithm).</summary>
      <param name="algorithm">Nome di un'implementazione ECDSA. Le seguenti stringhe fanno tutte riferimento alla stessa implementazione, ovvero l'unica implementazione attualmente supportata in .NET Framework: 
- "ECDsa" 
- "ECDsaCng" 
- "System.Security.Cryptography.ECDsaCng" 
È inoltre possibile fornire il nome di un'implementazione ECDSA personalizzata.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="algorithm" /> è <see langword="null" />.</exception>
      <returns>Nuova istanza dell'implementazione specificata di questa classe. Se il nome dell'algoritmo specificato non esegue il mapping a un'implementazione ECDSA, questo metodo restituisce <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>Esporta la chiave corrente nel formato ECPrivateKey.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>Matrice di byte contenente la rappresentazione ECPrivateKey della chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, esporta i parametri espliciti per una curva ellittica.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Parametri che rappresentano il punto sulla curva per questa chiave, usando il formato della curva esplicita.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, esporta i parametri denominati o espliciti per una curva ellittica. Se la curva ha un nome, il campo <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> contiene i parametri della curva denominata. In caso contrario, contiene i parametri espliciti.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Parametri che rappresentano il punto sulla curva per questa chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>Questo metodo genera in tutti i casi.</summary>
      <param name="xmlString">Stringa XML da usare per ricostruire l'oggetto <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
      <exception cref="T:System.NotImplementedException">In tutti i casi.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, genera una nuova coppia di chiavi pubblica/privata temporanea per la curva specificata, sostituendo la chiave corrente.</summary>
      <param name="curve">Curva da usare per generare la chiave.</param>
      <exception cref="T:System.NotSupportedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>Ottiene le dimensioni massime, in byte, per una firma prodotta da questa chiave nel formato indicato.</summary>
      <param name="signatureFormat">Formato di codifica per una firma.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <returns>Dimensioni massime, in byte, per una firma prodotta da questa chiave nel formato indicato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando sottoposto a override in una classe derivata, calcola il valore hash della parte specificata di una matrice di byte usando l'algoritmo hash specificato.</summary>
      <param name="data">Dati per i quali si desidera generare un hash.</param>
      <param name="offset">Indice del primo byte in <paramref name="data" /> per cui si deve calcolare il codice hash.</param>
      <param name="count">Numero di byte per cui calcolare il codice hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare per la codifica hash dei dati.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Dati con hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando sottoposto a override in una classe derivata, calcola il valore hash del flusso binario specificato usando l'algoritmo hash specificato.</summary>
      <param name="data">Flusso binario per la codifica hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare per la codifica hash dei dati.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Dati con hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura ECPrivateKey, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura ECPrivateKey nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 ECPrivateKey con codifica ASN.1-BER.

-oppure-

Importazione della chiave non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su byte, sostituendo le chiavi per questo oggetto.</summary>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> indica che la funzione di derivazione della chiave (KDF) da applicare è la funzione PKCS#12 legacy, che richiede password basate su <see cref="T:System.Char" />.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su caratteri, sostituendo le chiavi per questo oggetto.</summary>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure- 
Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave con codifica PEM 7468 RFC, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave da importare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene una chiave crittografata con codifica PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, importa i parametri specificati.</summary>
      <param name="parameters">Parametri della curva.</param>
      <exception cref="T:System.NotSupportedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 PrivateKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura PKCS#8 PrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 PrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la chiave pubblica da una struttura X.509 SubjectPublicKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura X.509 SubjectPublicKeyInfo nella codifica ASN.1-DER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura X.509 SubjectPublicKeyInfo con codifica ASN.1-DER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcola il valore hash di una parte della matrice di byte specificata usando l'algoritmo hash specificato e firma il valore hash risultante.</summary>
      <param name="data">Dati di input per cui calcolare il valore hash.</param>
      <param name="offset">Offset nella matrice dal quale iniziare a usare i dati.</param>
      <param name="count">Numero di byte nella matrice da usare come dati.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> è minore di zero.  
  
-oppure- 
 <paramref name="count" /> è minore di zero.  
  
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="offset">Offset in <paramref name="data" /> da cui iniziare l'hashing.</param>
      <param name="count">Numero di byte da leggere da <paramref name="data" />.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.
 
-oppure- 
 <paramref name="offset" /> è minore di zero.
 
-oppure- 
 <paramref name="count" /> è minore di zero.
 
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcola il valore hash della matrice di byte specificata usando l'algoritmo hash specificato e firma il valore hash risultante.</summary>
      <param name="data">Dati di input per cui calcolare il valore hash.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Calcola il valore hash del flusso specificato usando l'algoritmo hash specificato e firma il valore hash risultante.</summary>
      <param name="data">Flusso di input per cui calcolare il valore hash.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola il valore hash dei dati specificati e li firma usando il formato di firma specificato.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Genera una firma digitale per il valore hash specificato.</summary>
      <param name="hash">Valore hash dei dati da firmare.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="hash" /> è <see langword="null" />.</exception>
      <returns>Firma digitale per il valore hash specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola la firma ECDSA del valore hash specificato nel formato indicato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHashCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Calcola la firma ECDSA del valore hash specificato nel formato indicato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>Firma ECDSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>Questo metodo genera in tutti i casi.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.NotImplementedException">In tutti i casi.</exception>
      <returns>Questo metodo non restituisce valori.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato ECPrivateKey in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati ECPrivateKey.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su byte.</summary>
      <param name="passwordBytes">Byte da usare come password per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.

-oppure-

<paramref name="pbeParameters" /> indica che è necessario usare <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />, che richiede password basate su <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su caratteri.</summary>
      <param name="password">Password da usare per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 PrivateKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato X.509 SubjectPublicKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per ricevere i dati X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta di calcolare il valore hash dell'intervallo di sola lettura specificato di byte nella destinazione specificata usando l'algoritmo hash specificato.</summary>
      <param name="data">Dati per i quali si desidera generare un hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare per la codifica hash dei dati.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="false" /> se la lunghezza di <paramref name="destination" /> non è sufficiente per ricevere il valore hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Tenta di calcolare la firma digitale ECDSA per l'intervallo di sola lettura specificato di byte nella destinazione specificata usando l'algoritmo hash specificato e la chiave corrente.</summary>
      <param name="data">Dati da firmare.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="hashAlgorithm">Algoritmo da usare per la codifica hash dei dati per la firma.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="false" /> se la lunghezza di <paramref name="destination" /> non è sufficiente per ricevere la firma.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Cerca di creare la firma ECDSA per i dati specificati nel formato indicato nel buffer specificato.</summary>
      <param name="data">Dati per hash e firma.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Cerca di creare la firma ECDSA per i dati specificati nel formato indicato nel buffer specificato.</summary>
      <param name="data">Dati per hash e firma.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di calcolare la firma digitale ECDSA per l'intervallo di sola lettura specificato di byte che rappresenta un hash di dati nella destinazione specificata usando la chiave corrente.</summary>
      <param name="hash">Valore hash dei dati da firmare.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="false" /> se la lunghezza di <paramref name="destination" /> non è sufficiente per ricevere la firma.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Cerca di creare la firma ECDSA per il valore hash specificato nel formato indicato nel buffer specificato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHashCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Cerca di creare la firma ECDSA per il valore hash specificato nel formato indicato nel buffer specificato.</summary>
      <param name="hash">Valore hash da firmare.</param>
      <param name="destination">Buffer per la ricezione della firma.</param>
      <param name="signatureFormat">Formato di codifica da usare per la firma.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di firma.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere la firma; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia appropriata per la chiave corrente e i dati specificati con un algoritmo hash specificato.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia appropriata per la chiave corrente e la parte di dati specificata con un algoritmo hash specificato.</summary>
      <param name="data">Dati firmati.</param>
      <param name="offset">Indice iniziale dal quale calcolare il codice hash.</param>
      <param name="count">Numero di byte per cui calcolare il codice hash.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> è minore di zero.  
  
-oppure- 
 <paramref name="count" /> è minore di zero.  
  
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Matrice contenente i dati firmati.</param>
      <param name="offset">Indice iniziale della parte firmata di <paramref name="data" />.</param>
      <param name="count">Numero di byte in <paramref name="data" /> che sono stati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.
 
-oppure- 
 <paramref name="offset" /> è minore di zero.
 
-oppure- 
 <paramref name="count" /> è minore di zero.
 
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia appropriata per la chiave corrente e i dati specificati con un algoritmo hash specificato.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> ha un valore <see langword="null" /> o un valore <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> vuoto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>Verifica che una firma digitale sia appropriata per la chiave corrente e i dati specificati con un algoritmo hash specificato.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per i dati specificati.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per eseguire l'hashing dei dati per il processo di verifica.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di hashing o di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Verifica che una firma digitale sia appropriata per la chiave corrente e l'hash dei dati specificato.</summary>
      <param name="hash">Valore hash dei dati da verificare.</param>
      <param name="signature">Firma digitale dei dati da confrontare con il valore hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per l'hash specificato.</summary>
      <param name="hash">Hash firmato.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> o <paramref name="signature" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Verifica che una firma digitale sia appropriata per la chiave corrente e l'hash dei dati specificato.</summary>
      <param name="hash">Valore hash dei dati da verificare.</param>
      <param name="signature">Firma digitale dei dati da confrontare con il valore hash.</param>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per l'hash specificato.</summary>
      <param name="hash">Hash firmato.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> non è un formato noto.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Verifica che una firma digitale sia valida per l'hash specificato.</summary>
      <param name="hash">Hash firmato.</param>
      <param name="signature">Firma da verificare.</param>
      <param name="signatureFormat">Formato di codifica per <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è verificato un errore durante l'operazione di verifica.</exception>
      <returns>
        <see langword="true" /> se la firma digitale è valida per i dati specificati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Ottiene il nome dell'algoritmo di scambio delle chiavi.</summary>
      <returns>Sempre <see langword="null" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Ottiene il nome dell'algoritmo di firma.</summary>
      <returns>Stringa "ECDsa".</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>Rappresenta i parametri standard per l'algoritmo ECC (Elliptic Curve Cryptography).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>Rappresenta la curva associata alla chiave pubblica (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) e alla chiave privata facoltativa (<see cref="F:System.Security.Cryptography.ECParameters.D" />).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>Rappresenta la chiave privata <see langword="D" /> per l'algoritmo ECC (Elliptic Curve Cryptography) archiviata in formato big endian.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>Rappresenta la chiave pubblica <see langword="Q" /> per l'algoritmo ECC (Elliptic Curve Cryptography).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>Convalida l'oggetto corrente.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La chiave o i parametri della curva non sono validi per il tipo di curva corrente.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>Rappresenta le coordinate X e Y per le strutture della crittografia a curva ellittica (ECC, Elliptic Curve Cryptography).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>Rappresenta la coordinata X.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>Rappresenta la coordinata Y.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HKDF">
      <summary>RFC5869 - Funzione di derivazione della chiave con estrazione ed espansione basata su HMAC (HKDF)</summary>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>Esegue le funzioni di derivazione della chiave HKDF con espansione ed estrazione.</summary>
      <param name="hashAlgorithmName">Algoritmo hash usato per le operazioni HMAC.</param>
      <param name="ikm">Materiale per le chiavi di input.</param>
      <param name="outputLength">Lunghezza del materiale per le chiavi di output.</param>
      <param name="salt">Valore di salt facoltativo (valore casuale non segreto). Se non viene specificato, il valore predefinito è una matrice di byte della stessa lunghezza dell'output dell'algoritmo hash specificato.</param>
      <param name="info">Informazioni facoltative specifiche del contesto e dell'applicazione.</param>
      <returns>Materiale per le chiavi di output.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Esegue le funzioni di derivazione della chiave HKDF con espansione ed estrazione.</summary>
      <param name="hashAlgorithmName">Algoritmo hash usato per le operazioni HMAC.</param>
      <param name="ikm">Materiale per le chiavi di input.</param>
      <param name="output">Buffer di output che rappresenta il materiale per le chiavi di output.</param>
      <param name="salt">Valore di salt (valore casuale non segreto).</param>
      <param name="info">Informazioni specifiche del contesto e dell'applicazione (possono essere un intervallo vuoto).</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[])">
      <summary>Esegue la funzione HKDF-Expand. Vedere la sezione 2.3 di RFC5869.</summary>
      <param name="hashAlgorithmName">Algoritmo hash usato per le operazioni HMAC.</param>
      <param name="prk">Chiave pseudocasuale lunga almeno quanto la matrice di byte di output dell'algoritmo hash specificato (in genere l'output della fase di espansione).</param>
      <param name="outputLength">Lunghezza del materiale per le chiavi di output.</param>
      <param name="info">Informazioni facoltative specifiche del contesto e dell'applicazione.</param>
      <returns>Materiale per le chiavi di output.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Esegue la funzione HKDF-Expand. Vedere la sezione 2.3 di RFC5869.</summary>
      <param name="hashAlgorithmName">Algoritmo hash usato per le operazioni HMAC.</param>
      <param name="prk">Chiave pseudocasuale lunga almeno quanto la matrice di byte di output dell'algoritmo hash specificato (in genere l'output della fase di espansione).</param>
      <param name="output">Buffer di destinazione in cui ricevere il materiale per le chiavi di output.</param>
      <param name="info">Informazioni specifiche del contesto e dell'applicazione (possono essere un intervallo vuoto).</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>Esegue la funzione HKDF-Extract.
Vedere la sezione 2.2 di RFC5869.</summary>
      <param name="hashAlgorithmName">Algoritmo hash usato per le operazioni HMAC.</param>
      <param name="ikm">Materiale per le chiavi di input.</param>
      <param name="salt">Valore di salt facoltativo (valore casuale non segreto). Se non viene specificato, il valore predefinito è una matrice di byte della stessa lunghezza dell'output dell'algoritmo hash specificato.</param>
      <returns>Chiave pseudocasuale (PRK).</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Esegue la funzione HKDF-Extract.
Vedere la sezione 2.2 di RFC5869.</summary>
      <param name="hashAlgorithmName">Algoritmo hash usato per le operazioni HMAC.</param>
      <param name="ikm">Materiale per le chiavi di input.</param>
      <param name="salt">Valore di salt (valore casuale non segreto).</param>
      <param name="prk">Buffer di destinazione in cui ricevere la chiave pseudocasuale (PRK).</param>
      <returns>Numero di byte scritti nel buffer <paramref name="prk" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACMD5" /> utilizzando una chiave generata in modo casuale.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACMD5" /> tramite la chiave specificata.</summary>
      <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACMD5" />. La chiave può avere qualsiasi lunghezza, ma se supera i 64 byte viene generato per essa un hash (con SHA-1) per derivare una chiave a 64 byte. Pertanto, la dimensione consigliata per la chiave segreta è 64 byte.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Security.Cryptography.HMACMD5" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="rgb">Input per il quale calcolare il valore HMAC.</param>
      <param name="ib">Offset nella matrice di byte dal quale iniziare a usare i dati.</param>
      <param name="cb">Numero di byte nella matrice di byte da utilizzare come dati.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="source">Input per il quale calcolare il valore HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal">
      <summary>Finalizza il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo.</summary>
      <returns>Valore HMAC calcolato in una matrice di byte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize">
      <summary>Reimposta lo stato iniziale dell'algoritmo hash.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di finalizzare il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo HMAC.</summary>
      <param name="destination">Buffer per la ricezione del valore HMAC.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.Key">
      <summary>Ottiene o imposta la chiave da usare nel calcolo del valore HMAC.</summary>
      <returns>Chiave da utilizzare nel calcolo HMAC.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA1" /> con una chiave generata in modo casuale.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA1" /> con i dati della chiave specificata.</summary>
      <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACSHA1" />. La chiave può avere qualsiasi lunghezza, ma se supera i 64 byte viene generato per essa un hash (con SHA-1) per derivare una chiave a 64 byte. Pertanto, la dimensione consigliata per la chiave segreta è 64 byte.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA1" /> con i dati della chiave specificata e un valore che indica se utilizzare la versione gestita dell'algoritmo SHA1.</summary>
      <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACSHA1" />. La chiave può avere qualsiasi lunghezza, ma se supera i 64 byte viene generato per essa un hash (con SHA-1) per derivare una chiave a 64 byte. Pertanto, la dimensione consigliata per la chiave segreta è 64 byte.</param>
      <param name="useManagedSha1">
        <see langword="true" /> per utilizzare l'implementazione gestita dell'algoritmo SHA1 (classe <see cref="T:System.Security.Cryptography.SHA1Managed" />); <see langword="false" /> per utilizzare l'implementazione non gestita (classe <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />).</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>Questo membro esegue l'override di <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />. L'argomento corrispondente può contenere documentazione più completa.

Rilascia le risorse non gestite usate da <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia le risorse non gestite; false per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Indirizza i dati scritti nell'oggetto verso l'algoritmo di crittografia SHA1 per il calcolo del codice HMAC (Hash-based Message Authentication Code).</summary>
      <param name="rgb">Dati di input.</param>
      <param name="ib">Offset nella matrice di byte dal quale iniziare a usare i dati.</param>
      <param name="cb">Numero di byte nella matrice da usare come dati.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="source">Input per il quale calcolare il valore HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <summary>Finalizza il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo.</summary>
      <returns>Valore HMAC calcolato in una matrice di byte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>Reimposta lo stato iniziale dell'algoritmo hash.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di finalizzare il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo HMAC.</summary>
      <param name="destination">Buffer per la ricezione del valore HMAC.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>Ottiene o imposta la chiave da usare nell'algoritmo hash.</summary>
      <returns>Chiave da usare nell'algoritmo hash.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA256" /> con una chiave generata in modo casuale.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA256" /> con i dati della chiave specificata.</summary>
      <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACSHA256" />. La chiave può essere di qualsiasi lunghezza. Tuttavia, la dimensione consigliata è di 64 byte. Se la chiave supera i 64 byte, viene generato per essa un hash (con SHA-256) per derivare una chiave a 64 byte. Se ha una lunghezza inferiore a 64 byte, la chiave viene completata fino a raggiungere i 64 byte.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Security.Cryptography.HMACSHA256" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="rgb">Input per il quale calcolare il valore HMAC.</param>
      <param name="ib">Offset nella matrice di byte dal quale iniziare a usare i dati.</param>
      <param name="cb">Numero di byte nella matrice di byte da utilizzare come dati.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="source">Input per il quale calcolare il valore HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal">
      <summary>Finalizza il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo.</summary>
      <returns>Valore HMAC calcolato in una matrice di byte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize">
      <summary>Reimposta lo stato iniziale dell'algoritmo hash.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di finalizzare il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo HMAC.</summary>
      <param name="destination">Buffer per la ricezione del valore HMAC.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.Key">
      <summary>Ottiene o imposta la chiave da usare nel calcolo del valore HMAC.</summary>
      <returns>Chiave da utilizzare nel calcolo HMAC.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA384" /> utilizzando una chiave generata in modo casuale.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA384" /> tramite i dati della chiave specificati.</summary>
      <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACSHA384" />. La chiave può essere di qualsiasi lunghezza. Tuttavia, la dimensione consigliata è di 128 byte. Se la chiave supera i 128 byte, viene generato per essa un hash (con SHA-384) per derivare una chiave a 128 byte. Se ha una lunghezza inferiore a 128 byte, la chiave viene completata fino a raggiungere i 128 byte.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Security.Cryptography.HMACSHA384" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="rgb">Input per il quale calcolare il valore HMAC.</param>
      <param name="ib">Offset nella matrice di byte dal quale iniziare a usare i dati.</param>
      <param name="cb">Numero di byte nella matrice di byte da utilizzare come dati.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="source">Input per il quale calcolare il valore HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal">
      <summary>Finalizza il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo.</summary>
      <returns>Valore HMAC calcolato in una matrice di byte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize">
      <summary>Reimposta lo stato iniziale dell'algoritmo hash.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di finalizzare il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo HMAC.</summary>
      <param name="destination">Buffer per la ricezione del valore HMAC.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.Key">
      <summary>Ottiene o imposta la chiave da usare nel calcolo del valore HMAC.</summary>
      <returns>Chiave da utilizzare nel calcolo HMAC.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>Fornisce una soluzione alternativa per l'implementazione di .NET Framework 2.0 dell'algoritmo <see cref="T:System.Security.Cryptography.HMACSHA384" />, che non è coerente con l'implementazione di .NET Framework 2.0 Service Pack 1 dell'algoritmo.</summary>
      <returns>
        <see langword="true" /> per consentire alle applicazioni di .NET Framework 2.0 Service Pack 1 di interagire con le applicazioni di .NET Framework 2.0; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>Consente di calcolare un codice HMAC (Hash-based Message Authentication Code) utilizzando la funzione hash <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA512" /> con una chiave generata in modo casuale.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.HMACSHA512" /> con i dati della chiave specificata.</summary>
      <param name="key">Chiave privata per la crittografia <see cref="T:System.Security.Cryptography.HMACSHA512" />. La chiave può essere di qualsiasi lunghezza. Tuttavia, la dimensione consigliata è di 128 byte. Se la chiave supera i 128 byte, viene generato un hash (con SHA-512) per derivare una chiave a 128 byte. Se ha una lunghezza inferiore a 128 byte, la chiave viene completata fino a raggiungere i 128 byte.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <summary>Rilascia le risorse non gestite usate da <see cref="T:System.Security.Cryptography.HMACSHA512" /> e, facoltativamente, le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="rgb">Input per il quale calcolare il valore HMAC.</param>
      <param name="ib">Offset nella matrice di byte dal quale iniziare a usare i dati.</param>
      <param name="cb">Numero di byte nella matrice di byte da utilizzare come dati.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Consente di indirizzare i dati scritti nell'oggetto nell'HMAC per il calcolo del valore HMAC.</summary>
      <param name="source">Input per il quale calcolare il valore HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal">
      <summary>Finalizza il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo.</summary>
      <returns>Valore HMAC calcolato in una matrice di byte.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize">
      <summary>Reimposta lo stato iniziale dell'algoritmo hash.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di finalizzare il calcolo del valore HMAC dopo l'elaborazione degli ultimi dati da parte dell'algoritmo HMAC.</summary>
      <param name="destination">Buffer per la ricezione del valore HMAC.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.Key">
      <summary>Ottiene o imposta la chiave da usare nel calcolo del valore HMAC.</summary>
      <returns>Chiave da utilizzare nel calcolo HMAC.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>Fornisce una soluzione alternativa per l'implementazione di .NET Framework 2.0 dell'algoritmo <see cref="T:System.Security.Cryptography.HMACSHA512" />, che non è coerente con l'implementazione di .NET Framework 2.0 Service Pack 1.</summary>
      <returns>
        <see langword="true" /> per consentire alle applicazioni di .NET Framework 2.0 Service Pack 1 di interagire con le applicazioni di .NET Framework 2.0; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>Offre il supporto per il calcolo di un hash o di un codice HMAC (Hash-based Message Authentication Code) in modo incrementale su più segmenti.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>Aggiunge i dati specificati ai dati già elaborati nell'hash o in HMAC.</summary>
      <param name="data">I dati da elaborare.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Security.Cryptography.IncrementalHash" /> è già stato eliminato.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>Aggiunge il numero di byte specificato dai dati specificati (a partire dall'offset specificato) ai dati già elaborati nell'hash o nel codice HMAC (Hash-based Message Authentication Code).</summary>
      <param name="data">I dati da elaborare.</param>
      <param name="offset">Offset nella matrice di byte dal quale iniziare a usare i dati.</param>
      <param name="count">Numero di byte da usare da <paramref name="data" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> o <paramref name="offset" /> è negativo.  
  
-oppure- 
 <paramref name="count" /> è maggiore della lunghezza di <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">La somma di <paramref name="offset" /> e <paramref name="count" /> è maggiore della lunghezza dei dati.</exception>
      <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Security.Cryptography.IncrementalHash" /> è già stato eliminato.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <summary>Aggiunge i dati specificati ai dati già elaborati nell'hash o nel codice HMAC (Hash-based Message Authentication Code).</summary>
      <param name="data">I dati da elaborare.</param>
      <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Security.Cryptography.IncrementalHash" /> è già stato eliminato.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Crea <see cref="T:System.Security.Cryptography.IncrementalHash" /> per l'algoritmo specificato.</summary>
      <param name="hashAlgorithm">Il nome dell'algoritmo hash da eseguire.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o una stringa vuota.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> non è un algoritmo hash noto.</exception>
      <returns>Un'istanza <see cref="T:System.Security.Cryptography.IncrementalHash" /> pronta per il calcolo dell'algoritmo hash specificato da <paramref name="hashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Crea un <see cref="T:System.Security.Cryptography.IncrementalHash" /> per l'algoritmo HMAC (Hash-based Message Authentication Code) usando l'algoritmo hash e la chiave specificati.</summary>
      <param name="hashAlgorithm">Il nome dell'algoritmo hash da eseguire in HMAC.</param>
      <param name="key">Chiave privata per HMAC. Sebbene la chiave possa essere di qualsiasi lunghezza, per una chiave più lunga della dimensione di output dell'algoritmo hash verrà calcolato il codice hash per derivare una chiave della dimensione corretta. Per questa ragione, la dimensione consigliata della chiave privata corrisponde alla dimensione di output dell'algoritmo hash specificato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o una stringa vuota.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> non è un algoritmo hash noto.</exception>
      <returns>Un'istanza della classe <see cref="T:System.Security.Cryptography.IncrementalHash" /> pronta per il calcolo dell'algoritmo hash specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte})">
      <summary>Creare un oggetto <see cref="T:System.Security.Cryptography.IncrementalHash" /> per l'algoritmo HMAC (Hash-based Message Authentication Code) usando l'algoritmo hash specificato da <paramref name="hashAlgorithm" /> e una chiave specificata da <paramref name="key" />.</summary>
      <param name="hashAlgorithm">Il nome dell'algoritmo hash da eseguire in HMAC.</param>
      <param name="key">Chiave privata per HMAC. La chiave può avere qualsiasi lunghezza, ma per una chiave più lunga della dimensione di output dell'algoritmo hash specificato da <paramref name="hashAlgorithm" /> verrà calcolato il codice hash (usando l'algoritmo specificato da <paramref name="hashAlgorithm" />) per derivare una chiave della dimensione corretta. Di conseguenza, la dimensione consigliata della chiave privata è la dimensione di output del codice hash specificato da <paramref name="hashAlgorithm" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> oppure la stringa vuota.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> non è un algoritmo hash noto.</exception>
      <returns>Un'istanza hash per il calcolo dell'algoritmo hash specificato da <paramref name="hashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>Rilascia le risorse usate dall'istanza corrente della classe <see cref="T:System.Security.Cryptography.IncrementalHash" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash">
      <summary>Recupera l'hash o il codice HMAC (Hash-based Message Authentication Code) per i dati accumulati da chiamate precedenti ai metodi <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> senza reimpostare l'oggetto per riportarlo allo stato iniziale.</summary>
      <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      <returns>L'hash o HMAC calcolato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash(System.Span{System.Byte})">
      <summary>Recupera l'hash o il codice HMAC (Hash-based Message Authentication Code) per i dati accumulati da chiamate precedenti ai metodi <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> senza reimpostare l'oggetto per riportarlo allo stato iniziale.</summary>
      <param name="destination">Buffer per la ricezione del valore hash o HMAC.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> ha un valore <see cref="P:System.Span`1.Length" /> minore di <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      <returns>Numero di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>Recupera l'hash o il codice HMAC (Hash-based Message Authentication Code) per i dati accumulati da chiamate precedenti ai metodi <see cref="Overload:System.Security.Cryptography.IncrementalHash.AppendData" /> e reimposta l'oggetto allo stato iniziale.</summary>
      <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Security.Cryptography.IncrementalHash" /> è già stato eliminato.</exception>
      <returns>L'hash o HMAC calcolato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset(System.Span{System.Byte})">
      <summary>Recupera l'hash o il codice HMAC (Hash-based Message Authentication Code) per i dati accumulati da chiamate precedenti ai metodi <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> e reimposta l'oggetto per riportarlo allo stato iniziale.</summary>
      <param name="destination">Buffer per la ricezione del valore hash o HMAC.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> ha un valore <see cref="P:System.Span`1.Length" /> minore di <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" />.</exception>
      <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      <returns>Numero di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetCurrentHash(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di recuperare l'hash o il codice HMAC (Hash-based Message Authentication Code) per i dati accumulati da chiamate precedenti ai metodi <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> senza reimpostare l'oggetto per riportarlo allo stato iniziale.</summary>
      <param name="destination">Buffer per la ricezione del valore hash o HMAC.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.
Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ObjectDisposedException">L'oggetto è già stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore hash o HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di finalizzare il calcolo hash dopo l'elaborazione degli ultimi dati da parte dell'algoritmo hash.</summary>
      <param name="destination">Buffer per la ricezione del valore hash o HMAC (Hash-Based Message Authentication Code).</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ObjectDisposedException">L'oggetto <see cref="T:System.Security.Cryptography.IncrementalHash" /> è già stato eliminato.</exception>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore hash o HMAC. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>Ottiene il nome dell'algoritmo in corso di esecuzione. Agli algoritmi HMAC viene anteposto "HMAC" per distinguerli da un digest senza chiave.</summary>
      <returns>Nome dell'algoritmo in corso di esecuzione.</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes">
      <summary>Ottiene le dimensioni di output di questo algoritmo hash o HMAC, in byte.</summary>
      <returns>Dimensioni di output di questo algoritmo hash o HMAC, in byte.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>Rappresenta la classe astratta da cui devono derivare tutti gli algoritmi di generazione delle maschere.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.MaskGenerationMethod" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>In caso di override in una classe derivata, genera una maschera con la lunghezza specificata usando il seed casuale specificato.</summary>
      <param name="rgbSeed">Seed casuale da usare per calcolare la maschera.</param>
      <param name="cbReturn">Lunghezza in byte della maschera generata.</param>
      <returns>Maschera generata in modo casuale la cui lunghezza è uguale al parametro <paramref name="cbReturn" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>Rappresenta la classe astratta dalla quale ereditano tutte le implementazioni dell'algoritmo hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>Consente di creare un'istanza dell'implementazione predefinita dell'algoritmo hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo è stato usato con la modalità FIPS (Federal Information Processing Standards) abilitata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza dell'algoritmo hash <see cref="T:System.Security.Cryptography.MD5" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>Consente di creare un'istanza dell'implementazione specificata dell'algoritmo hash <see cref="T:System.Security.Cryptography.MD5" />.</summary>
      <param name="algName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.MD5" /> da utilizzare.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="algName" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza dell'implementazione specificata di <see cref="T:System.Security.Cryptography.MD5" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.Byte[])">
      <summary>Calcola l'hash dei dati usando l'algoritmo MD5.</summary>
      <param name="source">Dati per l'hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo MD5.</summary>
      <param name="source">Dati per l'hash.</param>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo MD5.</summary>
      <param name="source">Dati per l'hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <exception cref="T:System.ArgumentException">Il buffer in <paramref name="destination" /> è troppo piccolo per mantenere le dimensioni hash calcolate. L'algoritmo MD5 genera sempre un hash a 128 bit o 16 byte.</exception>
      <returns>Numero totale di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di calcolare l'hash dei dati usando l'algoritmo MD5.</summary>
      <param name="source">Dati per l'hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> è troppo piccolo per mantenere l'hash calcolato, in caso contrario <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>Calcola le maschere usate dagli algoritmi di scambio delle chiavi in base alla specifica PKCS #1.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>Genera e restituisce una maschera dal valore di inizializzazione casuale specificato della lunghezza indicata.</summary>
      <param name="rgbSeed">Valore di inizializzazione casuale da usare per il calcolo della maschera.</param>
      <param name="cbReturn">Lunghezza in byte della maschera generata.</param>
      <returns>Maschera generata in modo casuale la cui lunghezza è uguale al parametro <paramref name="cbReturn" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>Ottiene o imposta il nome del tipo di algoritmo hash da usare per la generazione della maschera.</summary>
      <returns>Nome del tipo che implementa l'algoritmo hash da usare per il calcolo della maschera.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>Rappresenta la classe astratta dalla quale derivano tutte le implementazioni dei generatori di numeri casuali di crittografia.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>Crea un'istanza dell'implementazione predefinita di un generatore di numeri casuali di crittografia utilizzabile per generare dati casuali.</summary>
      <returns>Nuova istanza di un generatore di numeri casuali di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>Crea un'istanza dell'implementazione specificata di un generatore di numeri casuali di crittografia.</summary>
      <param name="rngName">Nome dell'implementazione di un generatore di numeri casuali da usare.</param>
      <returns>Nuova istanza di un generatore di numeri casuali di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>Quando ne viene eseguito l'override in una classe derivata, rilascia tutte le risorse usate dall'istanza corrente della classe <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>Quando ne viene eseguito l'override in una classe derivata, libera le risorse non gestite usate da <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> ed eventualmente di liberare le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>Riempie un intervallo con byte casuali crittograficamente avanzati.</summary>
      <param name="data">Intervallo da riempire con byte casuali crittograficamente avanzati.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>Quando ne viene eseguito l'override in una classe derivata, consente di riempire una matrice di byte con una sequenza di valori casuali resistenti da un punto di vista crittografico.</summary>
      <param name="data">Matrice da riempire con byte casuali resistenti da un punto di vista crittografico.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Riempie la matrice di byte specificata con una sequenza di valori casuale e resistente dal punto di vista crittografico.</summary>
      <param name="data">Matrice da riempire con byte casuali resistenti da un punto di vista crittografico.</param>
      <param name="offset">Indice della matrice per avviare l'operazione di riempimento.</param>
      <param name="count">Numero di byte da riempire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> o <paramref name="count" /> è minore di 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> più <paramref name="data" /> supera la lunghezza di <paramref name="count" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>Riempie un intervallo con byte casuali crittograficamente avanzati.</summary>
      <param name="data">Intervallo da riempire con byte casuali crittograficamente avanzati.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>Genera un intero casuale compreso tra 0 (inclusi) e un limite superiore esclusivo specificato usando un generatore di numeri casuali crittograficamente avanzati.</summary>
      <param name="toExclusive">Limite superiore esclusivo dell'intervallo casuale.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="toExclusive" /> è minore o uguale a 0.</exception>
      <returns>Intero casuale compreso tra 0 (inclusi) e <paramref name="toExclusive" /> (esclusivo).</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>Genera un intero casuale compreso tra un limite inferiore inclusivo specificato e un limite superiore esclusivo specificato usando un generatore di numeri casuali crittograficamente avanzati.</summary>
      <param name="fromInclusive">Limite inferiore inclusivo dell'intervallo casuale.</param>
      <param name="toExclusive">Limite superiore esclusivo dell'intervallo casuale.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il parametro <paramref name="toExclusive" /> è minore o uguale al parametro <paramref name="fromInclusive" />.</exception>
      <returns>Intero casuale compreso tra <paramref name="fromInclusive" /> (inclusivo) e <paramref name="toExclusive" /> (esclusivo).</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>Quando ne viene eseguito l'override in una classe derivata, riempie una matrice di byte con una sequenza di valori casuali diversi da zero resistenti da un punto di vista crittografico.</summary>
      <param name="data">Matrice da riempire con byte casuali diversi da zero resistenti da un punto di vista crittografico.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>Riempie un intervallo di byte con una sequenza casuale crittograficamente avanzata di valori diversi da zero.</summary>
      <param name="data">Intervallo da riempire con byte casuali diversi da zero crittograficamente avanzati.</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>Rappresenta la classe base dalla quale devono derivare tutte le implementazioni dell'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>Rappresenta la dimensione effettiva in bit della chiave segreta utilizzata dall'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>Crea un'istanza di un oggetto di crittografia per eseguire l'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo è stato usato con la modalità FIPS (Federal Information Processing Standards) abilitata, ma non è compatibile con FIPS.</exception>
      <returns>Istanza di un oggetto di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>Consente di creare un'istanza di un oggetto di crittografia per eseguire l'implementazione specificata dell'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <param name="AlgName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.RC2" /> da utilizzare.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="algName" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Istanza di un oggetto di crittografia.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>Ottiene o imposta la dimensione in bit effettiva della chiave privata usata dall'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La dimensione effettiva della chiave non è valida.</exception>
      <returns>Dimensione effettiva della chiave usata dall'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>Ottiene o imposta la dimensione in bit della chiave privata usata dall'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il valore per la dimensione della chiave RC2 è minore del valore effettivo della dimensione della chiave.</exception>
      <returns>Dimensione della chiave privata usata dall'algoritmo <see cref="T:System.Security.Cryptography.RC2" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>Implementa la funzionalità di derivazione della chiave basata su password, PBKDF2, usando un generatore di numeri pseudo-casuali basato su <see cref="T:System.Security.Cryptography.HMACSHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando una password, il salt e il numero di iterazioni per derivare la chiave.</summary>
      <param name="password">Password usata per derivare la chiave.</param>
      <param name="salt">Salt della chiave usato per derivare la chiave.</param>
      <param name="iterations">Numero di iterazioni per l'operazione.</param>
      <exception cref="T:System.ArgumentException">La dimensione del salt specificato è inferiore a 8 byte o il conteggio delle iterazioni è inferiore a 1.</exception>
      <exception cref="T:System.ArgumentNullException">La password o il salt è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando la password, il salt e il numero di iterazioni specificati e il nome dell'algoritmo hash per derivare la chiave.</summary>
      <param name="password">Password da usare per derivare la chiave.</param>
      <param name="salt">Salt della chiave da usare per derivare la chiave.</param>
      <param name="iterations">Numero di iterazioni per l'operazione.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare la chiave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> è minore di zero.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> di <paramref name="hashAlgorithm" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il nome dell'algoritmo hash non è valido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando una password e un salt per derivare la chiave.</summary>
      <param name="password">Password usata per derivare la chiave.</param>
      <param name="salt">Salt della chiave usato per derivare la chiave.</param>
      <exception cref="T:System.ArgumentException">La dimensione del salt specificato è inferiore a 8 byte o il conteggio delle iterazioni è inferiore a 1.</exception>
      <exception cref="T:System.ArgumentNullException">La password o il salt è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando una password, il salt e il numero di iterazioni per derivare la chiave.</summary>
      <param name="password">Password usata per derivare la chiave.</param>
      <param name="salt">Salt della chiave usato per derivare la chiave.</param>
      <param name="iterations">Numero di iterazioni per l'operazione.</param>
      <exception cref="T:System.ArgumentException">La dimensione del salt specificato è inferiore a 8 byte o il conteggio delle iterazioni è inferiore a 1.</exception>
      <exception cref="T:System.ArgumentNullException">La password o il salt è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando la password, il salt e il numero di iterazioni specificati e il nome dell'algoritmo hash per derivare la chiave.</summary>
      <param name="password">Password da usare per derivare la chiave.</param>
      <param name="salt">Salt della chiave da usare per derivare la chiave.</param>
      <param name="iterations">Numero di iterazioni per l'operazione.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare la chiave.</param>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> di <paramref name="hashAlgorithm" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il nome dell'algoritmo hash non è valido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando la password e la dimensione del salt per derivare la chiave.</summary>
      <param name="password">Password usata per derivare la chiave.</param>
      <param name="saltSize">Dimensione del salt casuale che la classe deve generare.</param>
      <exception cref="T:System.ArgumentException">La dimensione del salt specificato è inferiore a 8 byte.</exception>
      <exception cref="T:System.ArgumentNullException">La password o il salt è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando una password, la dimensione del salt e il numero di iterazioni per derivare la chiave.</summary>
      <param name="password">Password usata per derivare la chiave.</param>
      <param name="saltSize">Dimensione del salt casuale che la classe deve generare.</param>
      <param name="iterations">Numero di iterazioni per l'operazione.</param>
      <exception cref="T:System.ArgumentException">La dimensione del salt specificato è inferiore a 8 byte o il conteggio delle iterazioni è inferiore a 1.</exception>
      <exception cref="T:System.ArgumentNullException">La password o il salt è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" /> non è compreso nell'intervallo consentito. Per questo parametro è richiesto un numero non negativo.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> usando la password, la dimensione del salt e il numero di iterazioni specificati e il nome dell'algoritmo hash per derivare la chiave.</summary>
      <param name="password">Password da usare per derivare la chiave.</param>
      <param name="saltSize">Dimensione del salt casuale che la classe deve generare.</param>
      <param name="iterations">Numero di iterazioni per l'operazione.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per derivare la chiave.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> è minore di zero.</exception>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> di <paramref name="hashAlgorithm" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il nome dell'algoritmo hash non è valido.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>Deriva una chiave di crittografia dall'oggetto <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />.</summary>
      <param name="algname">Nome dell'algoritmo per il quale derivare la chiave.</param>
      <param name="alghashname">Nome dell'algoritmo hash da usare per derivare la chiave.</param>
      <param name="keySize">Dimensione in bit della chiave da derivare.</param>
      <param name="rgbIV">Vettore di inizializzazione da usare per derivare la chiave.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il parametro <paramref name="keySize" /> non è corretto.  
  
-oppure- 
Non è possibile acquisire il provider del servizio di crittografia (CSP).  
  
-oppure- 
Il parametro <paramref name="algname" /> non corrisponde a un nome di algoritmo valido.  
  
-oppure- 
Il parametro <paramref name="alghashname" /> non corrisponde a un nome di algoritmo hash valido.</exception>
      <returns>Chiave derivata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>Rilascia le risorse non gestite usate dalla classe <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> e facoltativamente le risorse gestite.</summary>
      <param name="disposing">
        <see langword="true" /> per rilasciare sia le risorse gestite sia quelle non gestite; <see langword="false" /> per rilasciare solo le risorse non gestite.</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>Restituisce la chiave pseudocasuale per questo oggetto.</summary>
      <param name="cb">Numero di byte chiave pseudo-casuali da generare.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" /> non è compreso nell'intervallo consentito. Per questo parametro è richiesto un numero non negativo.</exception>
      <returns>Matrice di byte riempita con byte chiave pseudo-casuali.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>Reimposta lo stato dell'operazione.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>Ottiene o imposta il numero di iterazioni per l'operazione.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Il numero di iterazioni è inferiore a 1.</exception>
      <returns>Numero di iterazioni per l'operazione.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>Ottiene o imposta il valore del salt della chiave per l'operazione.</summary>
      <exception cref="T:System.ArgumentException">La dimensione del salt specificato è inferiore a 8 byte.</exception>
      <exception cref="T:System.ArgumentNullException">Il salt è <see langword="null" />.</exception>
      <returns>Valore del salt della chiave per l'operazione.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>Rappresenta la classe base dalla quale devono ereditare tutte le implementazioni dell'algoritmo di crittografia simmetrica <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>Consente di creare un oggetto di crittografia per eseguire l'algoritmo <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo è stato usato con la modalità FIPS (Federal Information Processing Standards) abilitata, ma non è compatibile con FIPS.</exception>
      <returns>Oggetto di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>Consente di creare un oggetto di crittografia per eseguire l'implementazione specificata dell'algoritmo <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
      <param name="algName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.Rijndael" /> da creare.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="algName" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Oggetto di crittografia.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>Consente di accedere alla versione gestita dell'algoritmo <see cref="T:System.Security.Cryptography.Rijndael" />. La classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RijndaelManaged" />.</summary>
      <exception cref="T:System.InvalidOperationException">Questa classe non è conforme all'algoritmo FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>Crea un oggetto di decrittografia simmetrica con la proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> corrente e il vettore di inizializzazione <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />.</summary>
      <returns>Oggetto di decrittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Consente di creare un oggetto di decrittografia <see cref="T:System.Security.Cryptography.Rijndael" /> simmetrica con la proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> e il vettore di inizializzazione specificati (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <param name="rgbKey">Chiave segreta da utilizzare per l'algoritmo simmetrico. La dimensione della chiave deve essere 128, 192 o 256 bit.</param>
      <param name="rgbIV">Vettore di inizializzazione da utilizzare per l'algoritmo simmetrico.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="rgbKey" /> è <see langword="null" />.  
  
-oppure- 
Il valore del parametro <paramref name="rgbIV" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Valore della proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> non è <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> o <see cref="F:System.Security.Cryptography.CipherMode.CFB" />.</exception>
      <returns>Oggetto di decrittografia <see cref="T:System.Security.Cryptography.Rijndael" /> simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>Crea un oggetto di crittografia simmetrica con la proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> corrente e il vettore di inizializzazione <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />.</summary>
      <returns>Oggetto di crittografia simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Consente di creare un oggetto di crittografia <see cref="T:System.Security.Cryptography.Rijndael" /> simmetrica con la proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> e il vettore di inizializzazione specificati (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <param name="rgbKey">Chiave segreta da utilizzare per l'algoritmo simmetrico. La dimensione della chiave deve essere 128, 192 o 256 bit.</param>
      <param name="rgbIV">Vettore di inizializzazione da utilizzare per l'algoritmo simmetrico.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="rgbKey" /> è <see langword="null" />.  
  
-oppure- 
Il valore del parametro <paramref name="rgbIV" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Valore della proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> non è <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> o <see cref="F:System.Security.Cryptography.CipherMode.CFB" />.</exception>
      <returns>Oggetto di crittografia <see cref="T:System.Security.Cryptography.Rijndael" /> simmetrica.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>Consente di generare un vettore di inizializzazione casuale (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) da utilizzare per l'algoritmo.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>Consente di generare una proprietà <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> casuale da utilizzare per l'algoritmo.</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>Ottiene o imposta la dimensione in bit del blocco dell'operazione di crittografia.</summary>
      <returns>Dimensioni in bit del blocco dell'operazione di crittografia. Il valore predefinito è 128 bit.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>Ottiene o imposta il vettore di inizializzazione (IV) da utilizzare per l'algoritmo simmetrico.</summary>
      <returns>Vettore di inizializzazione (IV) da utilizzare per l'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>Ottiene o imposta la chiave privata utilizzata per l'algoritmo simmetrico.</summary>
      <returns>Chiave privata utilizzata per l'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>Ottiene o imposta la dimensione in bit della chiave privata utilizzata per l'algoritmo simmetrico.</summary>
      <returns>Dimensione, in bit, della chiave privata utilizzata per l'algoritmo simmetrico. Il valore predefinito è 256 bit.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>Ottiene le dimensioni in bit delle chiavi supportate dall'algoritmo simmetrico.</summary>
      <returns>Dimensioni in bit delle chiavi supportate dall'algoritmo simmetrico.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>Ottiene o imposta la modalità di funzionamento dell'algoritmo simmetrico.</summary>
      <returns>Modalità di funzionamento dell'algoritmo simmetrico. Il valore predefinito è <see cref="F:System.Security.Cryptography.CipherMode.CBC" /></returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>Ottiene o imposta la modalità di riempimento usata nell'algoritmo simmetrico.</summary>
      <returns>Modalità di riempimento usata nell'algoritmo simmetrico. Il valore predefinito è <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>Rappresenta la classe di base dalla quale ereditano tutte le implementazioni dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>Crea un'istanza dell'implementazione predefinita dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Nuova istanza dell'implementazione predefinita di <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>Crea una nuova chiave RSA temporanea con le dimensioni della chiave specificate.</summary>
      <param name="keySizeInBits">Dimensioni della chiave in bit.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> non è supportato dall'implementazione predefinita.</exception>
      <returns>Nuova chiave RSA temporanea con le dimensioni della chiave specificate.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>Crea una nuova chiave RSA temporanea con i parametri di chiave RSA specificati.</summary>
      <param name="parameters">Parametri per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> non rappresenta una chiave RSA valida.</exception>
      <returns>Nuova chiave RSA temporanea.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>Crea un'istanza dell'implementazione specificata di <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <param name="algName">Nome dell'implementazione di <see cref="T:System.Security.Cryptography.RSA" /> da usare.</param>
      <returns>Nuova istanza dell'implementazione specificata di <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Quando è sottoposto a override in una classe derivata, decrittografa i dati di input usando la modalità di riempimento specificata.</summary>
      <param name="data">Dati da decrittografare.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="padding" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

La lunghezza di <paramref name="data" /> non è uguale al numero di byte per <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" />.

-oppure-

Questa istanza rappresenta solo una chiave pubblica. 

-oppure-

Operazione di decrittografia non riuscita.</exception>
      <returns>Dati decrittografati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>Quando è sottoposto a override in una classe derivata, decrittografa i dati di input usando la chiave privata.</summary>
      <param name="rgb">Testo crittografato da decrittografare.</param>
      <exception cref="T:System.NotSupportedException">Questa chiamata di metodo non è supportata. Questa eccezione viene generata a partire da .NET framework 4.6.</exception>
      <returns>Risultato della decrittografia del parametro <paramref name="rgb" /> sotto forma di testo normale.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Quando è sottoposto a override in una classe derivata, crittografa i dati di input usando la modalità di riempimento specificata.</summary>
      <param name="data">Dati da crittografare.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="padding" /> è <see langword="null" />.</exception>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

La lunghezza di <paramref name="data" /> è eccessiva per la combinazione di <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> e del riempimento selezionato.

-oppure-

Operazione di crittografia non riuscita.</exception>
      <returns>Dati crittografati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>Quando è sottoposto a override in una classe derivata, decrittografa i dati di input usando la chiave pubblica.</summary>
      <param name="rgb">Testo normale da crittografare.</param>
      <exception cref="T:System.NotSupportedException">Questa chiamata di metodo non è supportata. Questa eccezione viene generata a partire da .NET framework 4.6.</exception>
      <returns>Risultato della crittografia del parametro <paramref name="rgb" /> sotto forma di testo crittografato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>Quando è sottoposto a override in una classe derivata, esporta <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere i parametri privati; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare i parametri.</exception>
      <returns>Parametri per <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>Esporta la chiave corrente nel formato PKCS#1 RSAPrivateKey.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>Matrice di byte contenente la rappresentazione PKCS#1 RSAPrivateKey della chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>Esporta la parte della chiave pubblica della chiave corrente nel formato PKCS#1 RSAPublicKey.</summary>
      <returns>Matrice di byte contenente la rappresentazione PKCS#1 RSAPublicKey della chiave.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>Inizializza un oggetto <see cref="T:System.Security.Cryptography.RSA" /> dalle informazioni sulla chiave di una stringa XML.</summary>
      <param name="xmlString">Stringa XML che contiene le informazioni chiave <see cref="T:System.Security.Cryptography.RSA" />.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="xmlString" /> è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il formato del parametro <paramref name="xmlString" /> non è valido.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Solo .NET Core: questo membro non è supportato.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando sottoposto a override in una classe derivata, calcola il valore hash di una parte specificata di una matrice di byte usando un algoritmo hash specificato.</summary>
      <param name="data">Dati per i quali si desidera generare un hash.</param>
      <param name="offset">Indice del primo byte in <paramref name="data" /> per cui si deve calcolare il codice hash.</param>
      <param name="count">Numero di byte per cui calcolare il codice hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare nella codifica hash dei dati.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Dati con hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Quando sottoposto a override in una classe derivata, calcola il valore hash di un flusso binario specificato usando un algoritmo hash specificato.</summary>
      <param name="data">Flusso binario per la codifica hash.</param>
      <param name="hashAlgorithm">Algoritmo hash.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <returns>Dati con hash.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su byte, sostituendo le chiavi per questo oggetto.</summary>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> indica che la funzione di derivazione della chiave (KDF) da applicare è la funzione PKCS#12 legacy, che richiede password basate su <see cref="T:System.Char" />.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 EncryptedPrivateKeyInfo dopo la decrittografia con una password basata su caratteri, sostituendo le chiavi per questo oggetto.</summary>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <param name="source">Byte di una struttura PKCS#8 EncryptedPrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="passwordBytes">Byte da usare come password per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave privata crittografata RFC 7468 con codifica PEM, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave crittografata da importare.</param>
      <param name="password">Password da usare per la decrittografia del materiale della chiave.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La password non è corretta.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> non rappresenta una struttura PKCS#8 EncryptedPrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto decodificato in base 64 del testo con codifica PEM da <paramref name="input" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Importa una chiave con codifica PEM 7468 RFC, sostituendo le chiavi per questo oggetto.</summary>
      <param name="input">Testo con codifica PEM della chiave da importare.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> non contiene una chiave con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene più chiavi con codifica PEM con un'etichetta riconosciuta.

-oppure-

<paramref name="input" /> contiene una chiave crittografata con codifica PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>Quando è sottoposto a override in una classe derivata, importa l'oggetto <see cref="T:System.Security.Cryptography.RSAParameters" /> specificato.</summary>
      <param name="parameters">Parametri per <see cref="T:System.Security.Cryptography.RSA" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#8 PrivateKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura PKCS#8 PrivateKeyInfo nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#8 PrivateKeyInfo con codifica ASN.1-BER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la coppia di chiavi pubblica/privata da una struttura PKCS#1 RSAPrivateKey dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura PKCS#1 RSAPrivateKey nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#1 RSAPrivateKey con codifica ASN.1-BER.

-oppure-

Importazione della chiave non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la chiave pubblica da una struttura PKCS#1 RSAPublicKey dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura PKCS#1 RSAPublicKey nella codifica ASN.1-BER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura PKCS#1 RSAPublicKey con codifica ASN.1-BER.

-oppure-

Importazione della chiave non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Importa la chiave pubblica da una struttura X.509 SubjectPublicKeyInfo dopo la decrittografia, sostituendo le chiavi per questo oggetto.</summary>
      <param name="source">Byte di una struttura X.509 SubjectPublicKeyInfo nella codifica ASN.1-DER.</param>
      <param name="bytesRead">Quando termina, questo metodo contiene un valore che indica il numero di byte letti da <paramref name="source" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Il contenuto di <paramref name="source" /> non rappresenta una struttura X.509 SubjectPublicKeyInfo con codifica ASN.1-DER.

-oppure-

Il contenuto di <paramref name="source" /> indica che la chiave è per un algoritmo diverso dall'algoritmo rappresentato da questa istanza.

-oppure-

Il contenuto di <paramref name="source" /> rappresenta la chiave in un formato non supportato.

-oppure-

Importazione della chiave specifica dell'algoritmo non riuscita.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Calcola il valore hash di una parte della matrice di byte specificata usando l'algoritmo hash e la modalità di riempimento specificati e firma il valore hash risultante.</summary>
      <param name="data">Dati di input per hash e firma.</param>
      <param name="offset">Offset nella matrice dal quale iniziare a usare i dati.</param>
      <param name="count">Numero di byte nella matrice da usare come dati.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> è minore di zero.  
  
-oppure- 
 <paramref name="count" /> è minore di zero.  
  
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Errore durante la creazione della firma.</exception>
      <returns>Firma RSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Calcola il valore hash della matrice di byte specificata usando l'algoritmo hash e la modalità di spaziatura interna specificati e firma il valore hash risultante.</summary>
      <param name="data">Dati di input per hash e firma.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Errore durante la creazione della firma.</exception>
      <returns>Firma RSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Calcola il valore hash del flusso specificato usando l'algoritmo hash e la modalità di spaziatura interna specificati e firma il valore hash risultante.</summary>
      <param name="data">Flusso di input per hash e firma.</param>
      <param name="hashAlgorithm">Algoritmo hash da usare per creare il valore hash.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Errore durante la creazione della firma.</exception>
      <returns>Firma RSA per i dati specificati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Quando è sottoposto a override in una classe derivata, calcola la firma per il valore hash specificato usando il riempimento specificato.</summary>
      <param name="hash">Valore hash dei dati da firmare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Riempimento.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> o <paramref name="padding" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Errore durante la creazione della firma.</exception>
      <returns>Firma RSA per il valore hash specificato.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>Crea e restituisce una stringa XML contenente la chiave dell'oggetto <see cref="T:System.Security.Cryptography.RSA" /> corrente.</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> per includere una chiave RSA pubblica e privata; <see langword="false" /> per includere solo la chiave pubblica.</param>
      <exception cref="T:System.PlatformNotSupportedException">Solo .NET Core: questo membro non è supportato.</exception>
      <returns>Stringa XML contenente la chiave dell'oggetto <see cref="T:System.Security.Cryptography.RSA" /> corrente.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>Prova a decrittografare i dati di input usando la modalità di riempimento specificata e scrivendo il risultato in un buffer specificato.</summary>
      <param name="data">Dati da decrittografare.</param>
      <param name="destination">Buffer per la ricezione dei dati decrittografati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

La lunghezza di <paramref name="data" /> non è uguale al numero di byte per <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" />.

-oppure-

Questa istanza rappresenta solo una chiave pubblica. 

-oppure-

Operazione di decrittografia non riuscita.</exception>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere i dati decrittografati. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>Prova a crittografare i dati di input con una modalità di riempimento specificata in un buffer specificato.</summary>
      <param name="data">Dati da crittografare.</param>
      <param name="destination">Buffer per la ricezione dei dati crittografati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

La lunghezza di <paramref name="data" /> è eccessiva per la combinazione di <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> e del riempimento selezionato.

-oppure-

Operazione di crittografia non riuscita.</exception>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere i dati crittografati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su byte.</summary>
      <param name="passwordBytes">Byte da usare come password per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.

-oppure-

<paramref name="pbeParameters" /> indica che è necessario usare <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />, che richiede password basate su <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 EncryptedPrivateKeyInfo in un buffer specificato, usando una password basata su caratteri.</summary>
      <param name="password">Password da usare per la crittografia del materiale della chiave.</param>
      <param name="pbeParameters">Parametri della crittografia basata su password (PBE) da usare per la crittografia del materiale della chiave.</param>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#8 PrivateKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#1 RSAPrivateKey in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#1 RSAPrivateKey.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato PKCS#1 RSAPublicKey in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per la ricezione dei dati PKCS#1 RSAPublicKey.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di esportare la chiave corrente nel formato X.509 SubjectPublicKeyInfo in un buffer specificato.</summary>
      <param name="destination">Intervallo di byte per ricevere i dati X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">Quando termina, questo metodo contiene un valore che indica il numero di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Non è stato possibile esportare la chiave.</exception>
      <returns>
        <see langword="true" /> se <paramref name="destination" /> è sufficientemente grande per ricevere l'output. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Prova a calcolare l'hash dei dati specificati usando l'algoritmo specificato e scrivendo i risultati in un buffer specificato.</summary>
      <param name="data">Dati per i quali si desidera generare un hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="hashAlgorithm">Algoritmo da usare nella codifica hash dei dati.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere il valore hash. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>Prova a eseguire l'hashing dei dati specificati con l'algoritmo specificato e di firmare l'hash con la chiave corrente, scrivendo la firma in un buffer specificato.</summary>
      <param name="data">Dati di input per hash e firma.</param>
      <param name="destination">Buffer per la ricezione della firma RSA.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Errore durante la creazione della firma.</exception>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere la firma RSA. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>Prova a firmare l'hash con la chiave corrente, scrivendo la firma in un buffer specificato.</summary>
      <param name="hash">Valore hash dei dati da firmare.</param>
      <param name="destination" />
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Riempimento.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />. Questo parametro viene trattato come non inizializzato.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.

-oppure-

Questa istanza rappresenta solo una chiave pubblica.

-oppure-

Errore durante la creazione della firma.</exception>
      <returns>
        <see langword="true" /> se la lunghezza di <paramref name="destination" /> è sufficiente per ricevere la firma RSA. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash dei dati indicati usando l'algoritmo hash e la spaziatura interna specificati e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash dei dati in una parte di matrice di byte usando l'algoritmo hash e la spaziatura interna specificati e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="offset">Indice iniziale dal quale calcolare il codice hash.</param>
      <param name="count">Numero di byte per cui calcolare il codice hash.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> è minore di zero.  
  
-oppure- 
 <paramref name="count" /> è minore di zero.  
  
-oppure- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 restituisce un indice che eccede il limite superiore di <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash del flusso specificato usando l'algoritmo hash e la spaziatura interna specificati e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="signature" /> costruito in modo predefinito è <see langword="null" />.  
  
-oppure- 
 <paramref name="padding" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica che una firma digitale sia valida calcolando il valore hash dei dati indicati usando l'algoritmo hash e la spaziatura interna specificati e confrontandolo con la firma fornita.</summary>
      <param name="data">Dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash dei dati.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica che una firma digitale sia valida determinando il valore hash nella firma tramite l'algoritmo hash e la spaziatura interna specificati e confrontandolo con il valore hash indicato.</summary>
      <param name="hash">Valore hash dei dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.NotImplementedException">Una classe derivata deve eseguire l'override di questo metodo.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> o <paramref name="padding" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Verifica che una firma digitale sia valida determinando il valore hash nella firma tramite l'algoritmo hash e la spaziatura interna specificati e confrontandolo con il valore hash indicato.</summary>
      <param name="hash">Valore hash dei dati firmati.</param>
      <param name="signature">Dati della firma da verificare.</param>
      <param name="hashAlgorithm">Algoritmo hash usato per creare il valore hash.</param>
      <param name="padding">Modalità di riempimento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> o <paramref name="padding" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> è sconosciuto o non è supportato da questa implementazione.</exception>
      <returns>
        <see langword="true" /> se la firma è valida; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>Ottiene il nome dell'algoritmo di scambio delle chiavi disponibile con l'implementazione di <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Restituisce "RSA".</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>Ottiene il nome dell'algoritmo di firma disponibile con l'implementazione di <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Restituisce "RSA".</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>Specifica la modalità di riempimento e i parametri da usare con le operazioni di crittografia o decrittografia RSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Crea una nuova istanza <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> il cui oggetto <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> è <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> con l'algoritmo hash specificato.</summary>
      <param name="hashAlgorithm">Algoritmo hash.</param>
      <exception cref="T:System.ArgumentException">La proprietà <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> di <paramref name="hashAlgorithm" /> è <see langword="null" /> o <see cref="F:System.String.Empty" />.</exception>
      <returns>Oggetto con <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /><see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> con l'algoritmo hash specificato da <paramref name="hashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>Determina se l'istanza corrente equivale all'oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="obj" /> è uguale all'istanza corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Determina se l'istanza corrente equivale all'oggetto <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> specificato.</summary>
      <param name="other">Oggetto da confrontare.</param>
      <returns>
        <see langword="true" /> se <paramref name="other" /> è uguale all'istanza corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>Restituisce il codice hash di questo oggetto <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Codice hash di questa istanza.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Indica se i due oggetti <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> specificati sono uguali.</summary>
      <param name="left">Primo oggetto da confrontare.</param>
      <param name="right">Secondo oggetto da confrontare.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Indica se i due oggetti <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> specificati sono diversi.</summary>
      <param name="left">Primo oggetto da confrontare.</param>
      <param name="right">Secondo oggetto da confrontare.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>Restituisce la rappresentazione di stringa dell'istanza di <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> corrente.</summary>
      <returns>Rappresentazione della stringa dell'oggetto corrente.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>Ottiene la modalità di riempimento rappresentata da questa istanza di <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Modalità di riempimento.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>Ottiene l'algoritmo hash usato in combinazione con la modalità di riempimento <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />.</summary>
      <returns>Algoritmo hash.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>Ottiene un oggetto che rappresenta lo standard di crittografia OAEP (Optimal Asymmetric Encryption Padding) con un algoritmo hash SHA1.</summary>
      <returns>Oggetto che rappresenta lo standard di crittografia OAEP con un algoritmo hash SHA1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>Ottiene un oggetto che rappresenta lo standard di crittografia OAEP (Optimal Asymmetric Encryption Padding) con un algoritmo hash SHA256.</summary>
      <returns>Oggetto che rappresenta lo standard di crittografia OAEP con un algoritmo hash SHA256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>Ottiene un oggetto che rappresenta lo standard di crittografia OAEP (Optimal Asymmetric Encryption Padding) con un algoritmo hash SHA384.</summary>
      <returns>Oggetto che rappresenta lo standard di crittografia OAEP con un algoritmo hash SHA384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>Ottiene un oggetto che rappresenta lo standard di crittografia OAEP (Optimal Asymmetric Encryption Padding) con un algoritmo hash SHA512.</summary>
      <returns>Oggetto che rappresenta lo standard di crittografia OAEP con un algoritmo hash SHA512.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>Ottiene un oggetto che rappresenta lo standard di crittografia PKCS #1.</summary>
      <returns>Oggetto che rappresenta lo standard di crittografia PKCS #1.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>Specifica la modalità di riempimento da usare con le operazioni di crittografia o decrittografia RSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>Optimal Asymmetric Encryption Padding. È consigliabile per le nuove applicazioni.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5. È supportata per compatibilità con le applicazioni esistenti.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>Decrittografa i dati di scambio di chiave OAEP (Optimal Asymmetric Encryption Padding).</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave privata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Estrae le informazioni segrete dai dati crittografati di scambio delle chiavi.</summary>
      <param name="rgbData">Dati di scambio delle chiavi in cui sono occultate le informazioni segrete.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La verifica dei dati di scambio delle chiavi non è riuscita.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave è mancante.</exception>
      <returns>Informazioni segrete derivate dai dati di scambio delle chiavi.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Imposta la chiave privata da usare per decrittografare le informazioni segrete.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave privata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>Ottiene i parametri per lo scambio di chiave OAEP (Optimal Asymmetric Encryption Padding).</summary>
      <returns>Stringa XML che contiene i parametri dell'operazione di scambio delle chiavi OAEP.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>Crea i dati di scambio di chiave OAEP (Optimal Asymmetric Encryption Padding) con <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave pubblica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Crea i dati crittografati di scambio delle chiavi dai dati di input specificati.</summary>
      <param name="rgbData">Informazioni segrete da passare nello scambio delle chiavi.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave è mancante.</exception>
      <returns>Dati crittografati di scambio delle chiavi da inviare al destinatario prescelto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Crea i dati crittografati di scambio delle chiavi dai dati di input specificati.</summary>
      <param name="rgbData">Informazioni segrete da passare nello scambio delle chiavi.</param>
      <param name="symAlgType">Questo parametro non viene usato nella versione corrente.</param>
      <returns>Dati crittografati di scambio delle chiavi da inviare al destinatario prescelto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Imposta la chiave pubblica da usare per la crittografia dei dati di scambio delle chiavi.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave pubblica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>Ottiene o imposta il parametro usato per creare la spaziatura interna nel processo di creazione dello scambio di chiave.</summary>
      <returns>Valore del parametro.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>Ottiene i parametri per lo scambio di chiave OAEP (Optimal Asymmetric Encryption Padding).</summary>
      <returns>Stringa XML che contiene i parametri dell'operazione di scambio delle chiavi OAEP.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>Ottiene o imposta l'algoritmo di generazione di numeri casuali da usare per la creazione dello scambio di chiave.</summary>
      <returns>Istanza di un algoritmo di generazione di numeri casuali da usare.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>Rappresenta i parametri standard per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>Rappresenta il parametro <see langword="D" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>Rappresenta il parametro <see langword="DP" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>Rappresenta il parametro <see langword="DQ" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>Rappresenta il parametro <see langword="Exponent" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>Rappresenta il parametro <see langword="InverseQ" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>Rappresenta il parametro <see langword="Modulus" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>Rappresenta il parametro <see langword="P" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>Rappresenta il parametro <see langword="Q" /> per l'algoritmo <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>Decrittografa i dati per lo scambio di chiave PKCS #1.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave privata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Estrae le informazioni segrete dai dati crittografati di scambio delle chiavi.</summary>
      <param name="rgbIn">Dati di scambio delle chiavi in cui sono occultate le informazioni segrete.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave è mancante.</exception>
      <returns>Informazioni segrete derivate dai dati di scambio delle chiavi.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Imposta la chiave privata da usare per decrittografare le informazioni segrete.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave privata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>Ottiene i parametri per lo scambio di chiave PKCS #1.</summary>
      <returns>Stringa XML contenente i parametri dell'operazione di scambio di chiave PKCS #1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>Ottiene o imposta l'algoritmo di generazione di numeri casuali da usare per la creazione dello scambio di chiave.</summary>
      <returns>Istanza di un algoritmo di generazione di numeri casuali da usare.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>Crea i dati per lo scambio di chiave PKCS #1 usando <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave pubblica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Crea i dati crittografati di scambio delle chiavi dai dati di input specificati.</summary>
      <param name="rgbData">Informazioni segrete da passare nello scambio delle chiavi.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData" /> è troppo grande.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave è <see langword="null" />.</exception>
      <returns>Dati crittografati di scambio delle chiavi da inviare al destinatario prescelto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Crea i dati crittografati di scambio delle chiavi dai dati di input specificati.</summary>
      <param name="rgbData">Informazioni segrete da passare nello scambio delle chiavi.</param>
      <param name="symAlgType">Questo parametro non viene usato nella versione corrente.</param>
      <returns>Dati crittografati di scambio delle chiavi da inviare al destinatario prescelto.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Imposta la chiave pubblica da usare per la crittografia dei dati di scambio delle chiavi.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave pubblica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>Ottiene i parametri per lo scambio di chiave PKCS #1.</summary>
      <returns>Stringa XML contenente i parametri dell'operazione di scambio di chiave PKCS #1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>Ottiene o imposta l'algoritmo di generazione di numeri casuali da usare per la creazione dello scambio di chiave.</summary>
      <returns>Istanza di un algoritmo di generazione di numeri casuali da usare.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>Verifica una firma PKCS #1 versione 1.5 <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza di <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave pubblica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Imposta il nome dell'algoritmo hash da usare per verificare la firma.</summary>
      <param name="strName">Nome dell'algoritmo hash da usare per verificare la firma.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Imposta la chiave pubblica da usare per la verifica della firma.</summary>
      <param name="key">Istanza di <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave pubblica.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Verifica la firma PKCS #1 <see cref="T:System.Security.Cryptography.RSA" /> per i dati specificati.</summary>
      <param name="rgbHash">Dati firmati con <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Firma da verificare per <paramref name="rgbHash" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave è <see langword="null" />.  
  
-oppure- 
L'algoritmo hash è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="rgbHash" /> è <see langword="null" />.  
  
-oppure- 
Il valore del parametro <paramref name="rgbSignature" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se <paramref name="rgbSignature" /> corrisponde alla firma calcolata con l'algoritmo hash specificato e la chiave in <paramref name="rgbHash" />. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>Crea una firma <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 versione 1.5.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> con la chiave specificata.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave privata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Crea la firma PKCS #1 <see cref="T:System.Security.Cryptography.RSA" /> per i dati specificati.</summary>
      <param name="rgbHash">Dati da firmare.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">La chiave è <see langword="null" />.  
  
-oppure- 
L'algoritmo hash è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="rgbHash" /> è <see langword="null" />.</exception>
      <returns>Firma digitale per <paramref name="rgbHash" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Imposta il nome dell'algoritmo hash da usare per creare la firma.</summary>
      <param name="strName">Nome dell'algoritmo hash da usare per creare la firma.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Imposta la chiave privata da usare per la creazione della firma.</summary>
      <param name="key">Istanza dell'algoritmo <see cref="T:System.Security.Cryptography.RSA" /> che contiene la chiave privata.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> è <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>Specifica la modalità di spaziatura interna e i parametri da usare con le operazioni di creazione o verifica della firma RSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>Restituisce un valore che indica se questa istanza è uguale a un oggetto specificato.</summary>
      <param name="obj">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'oggetto specificato è uguale all'oggetto corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>Restituisce un valore che indica se l'istanza è uguale a un oggetto <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> specificato.</summary>
      <param name="other">Oggetto da confrontare con l'istanza corrente.</param>
      <returns>
        <see langword="true" /> se l'oggetto specificato è uguale all'oggetto corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>Restituisce il codice hash per questa istanza di <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>Codice hash per l'istanza <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Indica se i due oggetti <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> specificati sono uguali.</summary>
      <param name="left">Primo oggetto da confrontare.</param>
      <param name="right">Secondo oggetto da confrontare.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Indica se i due oggetti <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> specificati sono diversi.</summary>
      <param name="left">Primo oggetto da confrontare.</param>
      <param name="right">Secondo oggetto da confrontare.</param>
      <returns>
        <see langword="true" /> se <see langword="left" /> e <see langword="right" /> sono diversi; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>Restituisce la rappresentazione di stringa dell'istanza di <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> corrente.</summary>
      <returns>Rappresentazione della stringa dell'oggetto corrente.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>Ottiene la modalità di spaziatura interna dell’istanza <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>La modalità di spaziatura interna (<see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> o <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />) di questa istanza.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>Ottiene un oggetto che usa la modalità di spaziatura interna PKCS #1 v1.5.</summary>
      <returns>Oggetto che utilizza la modalità di riempimento <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>Ottiene un oggetto che usa la modalità di spaziatura interna PSS.</summary>
      <returns>Oggetto che usa la modalità di riempimento <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> con il numero di byte salt uguale alla dimensione dell'hash.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>Specifica la modalità di spaziatura interna da usare con le operazioni di creazione o verifica della firma RSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>Schema di firma probabilistico.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA1" /> per i dati di input.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <exception cref="T:System.InvalidOperationException">I criteri impostati su questo oggetto non sono conformi all'algoritmo FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>Consente di creare un'istanza dell'implementazione predefinita di <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA1" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>Crea un'istanza dell'implementazione specificata di <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <param name="hashName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.SHA1" /> da utilizzare.</param>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA1" /> basata sull'implementazione specificata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.Byte[])">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA1.</summary>
      <param name="source">Dati per hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA1.</summary>
      <param name="source">Dati per hash.</param>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA1.</summary>
      <param name="source">Dati per l'hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <exception cref="T:System.ArgumentException">Il buffer in <paramref name="destination" /> è troppo piccolo per mantenere le dimensioni hash calcolate. L'algoritmo SHA1 genera sempre un hash a 160 bit o 20 byte.</exception>
      <returns>Numero totale di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di calcolare l'hash dei dati usando l'algoritmo SHA1.</summary>
      <param name="source">Dati per hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> è troppo piccolo per mantenere l'hash calcolato; in caso contrario <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA1" /> per i dati di input utilizzando la libreria gestita.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.SHA1Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">Questa classe non è conforme all'algoritmo FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>Inizializza un'istanza di <see cref="T:System.Security.Cryptography.SHA1Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA256" /> per i dati di input.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>Consente di creare un'istanza dell'implementazione predefinita di <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Solo in .NET Framework 4.6.1 e versioni precedenti l'algoritmo è stato usato con la modalità FIPS (Federal Information Processing Standards) abilitata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA256" />. In .NET Framework, questo metodo crea un'istanza della classe <see cref="T:System.Security.Cryptography.SHA256Managed" /> se non è attiva la modalità FIPS. Se la modalità FIPS è attiva, crea un'istanza della classe <see cref="T:System.Security.Cryptography.SHA256Cng" />. In .NET Core, restituisce un'istanza di una classe privata derivata da <see cref="T:System.Security.Cryptography.SHA256" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>Consente di creare un'istanza di un'implementazione specificata di <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
      <param name="hashName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.SHA256" /> da utilizzare.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Solo in .NET Framework: la modalità FIPS è abilitata, ma <paramref name="hashName" /> richiede <see cref="T:System.Security.Cryptography.SHA256Managed" />, che non è compatibile con FIPS.</exception>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA256" /> basata sull'implementazione specificata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.Byte[])">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA256.</summary>
      <param name="source">Dati per hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA256.</summary>
      <param name="source">Dati per hash.</param>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA256.</summary>
      <param name="source">Dati per l'hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <exception cref="T:System.ArgumentException">Il buffer in <paramref name="destination" /> è troppo piccolo per mantenere le dimensioni hash calcolate. L'algoritmo SHA256 genera sempre un hash a 256 bit o 32 byte.</exception>
      <returns>Numero totale di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di calcolare l'hash dei dati usando l'algoritmo SHA256.</summary>
      <param name="source">Dati per hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> è troppo piccolo per mantenere l'hash calcolato; in caso contrario <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA256" /> per i dati di input utilizzando la libreria gestita.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.SHA256Managed" /> utilizzando la libreria gestita.</summary>
      <exception cref="T:System.InvalidOperationException">L'impostazione di sicurezza FIPS (Federal Information Processing Standards) è attivata. Questa implementazione non fa parte degli algoritmi di crittografia con convalida Windows Platform FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>Inizializza un'istanza di <see cref="T:System.Security.Cryptography.SHA256Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA384" /> per i dati di input.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>Consente di creare un'istanza dell'implementazione predefinita di <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo è stato usato con la modalità FIPS (Federal Information Processing Standards) abilitata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA384" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>Consente di creare un'istanza di un'implementazione specificata di <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
      <param name="hashName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.SHA384" /> da utilizzare.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="hashName" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA384" /> basata sull'implementazione specificata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.Byte[])">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA384.</summary>
      <param name="source">Dati per hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA384.</summary>
      <param name="source">Dati per hash.</param>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA384.</summary>
      <param name="source">Dati per l'hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <exception cref="T:System.ArgumentException">Il buffer in <paramref name="destination" /> è troppo piccolo per mantenere le dimensioni hash calcolate. L'algoritmo SHA384 genera sempre un hash a 384 bit o 48 byte.</exception>
      <returns>Numero totale di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di calcolare l'hash dei dati usando l'algoritmo SHA384.</summary>
      <param name="source">Dati per hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> è troppo piccolo per mantenere l'hash calcolato; in caso contrario <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA384" /> per i dati di input utilizzando la libreria gestita.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.SHA384Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">L'impostazione di sicurezza FIPS (Federal Information Processing Standards) è attivata. Questa implementazione non fa parte degli algoritmi di crittografia con convalida Windows Platform FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>Inizializza un'istanza di <see cref="T:System.Security.Cryptography.SHA384Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>Consente di calcolare l'hash <see cref="T:System.Security.Cryptography.SHA512" /> per i dati di input.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>Consente di creare un'istanza dell'implementazione predefinita di <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo è stato usato con la modalità FIPS (Federal Information Processing Standards) abilitata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA512" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>Consente di creare un'istanza di un'implementazione specificata di <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
      <param name="hashName">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.SHA512" /> da utilizzare.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">L'algoritmo descritto dal parametro <paramref name="hashName" /> è stato utilizzato con la modalità FIPS (Federal Information Processing Standards) attivata, ma non è compatibile con FIPS.</exception>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.SHA512" /> basata sull'implementazione specificata.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.Byte[])">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA512.</summary>
      <param name="source">Dati per hash.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA512.</summary>
      <param name="source">Dati per hash.</param>
      <returns>Hash dei dati.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Calcola l'hash dei dati usando l'algoritmo SHA512.</summary>
      <param name="source">Dati per l'hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <exception cref="T:System.ArgumentException">Il buffer in <paramref name="destination" /> è troppo piccolo per mantenere le dimensioni hash calcolate. L'algoritmo SHA1 genera sempre un hash a 512 bit o 64 byte.</exception>
      <returns>Numero totale di byte scritti in <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Tenta di calcolare l'hash dei dati usando l'algoritmo SHA512.</summary>
      <param name="source">Dati per hash.</param>
      <param name="destination">Buffer per la ricezione del valore hash.</param>
      <param name="bytesWritten">Al termine di questo metodo, il numero totale di byte scritti in <paramref name="destination" />.</param>
      <returns>
        <see langword="false" /> se <paramref name="destination" /> è troppo piccolo per mantenere l'hash calcolato; in caso contrario <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>Calcola l'algoritmo hash <see cref="T:System.Security.Cryptography.SHA512" /> per i dati di input utilizzando la libreria gestita.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.SHA512Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">L'impostazione di sicurezza FIPS (Federal Information Processing Standards) è attivata. Questa implementazione non fa parte degli algoritmi di crittografia con convalida Windows Platform FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>Inizializza un'istanza della classe <see cref="T:System.Security.Cryptography.SHA512Managed" /> utilizzando la libreria gestita.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>Contiene informazioni relative alle proprietà di una firma digitale.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.SignatureDescription" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.SignatureDescription" /> dall'oggetto <see cref="T:System.Security.SecurityElement" /> specificato.</summary>
      <param name="el">Oggetto <see cref="T:System.Security.SecurityElement" /> dal quale ottenere gli algoritmi per la descrizione della firma.</param>
      <exception cref="T:System.ArgumentNullException">Il valore del parametro <paramref name="el" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Consente di creare un'istanza di <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> con la chiave specificata utilizzando la proprietà <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" />.</summary>
      <param name="key">Chiave da utilizzare nell'oggetto <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</param>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>Consente di creare un'istanza di <see cref="T:System.Security.Cryptography.HashAlgorithm" /> utilizzando la proprietà <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" />.</summary>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Consente di creare un'istanza di <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> con la chiave specificata utilizzando la proprietà <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" />.</summary>
      <param name="key">Chiave da utilizzare nell'oggetto <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</param>
      <returns>Nuova istanza di <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>Ottiene o imposta l'algoritmo del deformattatore per la descrizione della firma.</summary>
      <returns>Algoritmo del deformattatore per la descrizione della firma.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>Ottiene o imposta l'algoritmo digest per la descrizione della firma.</summary>
      <returns>Algoritmo digest per la descrizione della firma.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>Ottiene o imposta l'algoritmo del formattatore per la descrizione della firma.</summary>
      <returns>Algoritmo del formattatore per la descrizione della firma.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>Ottiene o imposta l'algoritmo della chiave per la descrizione della firma.</summary>
      <returns>Algoritmo della chiave per la descrizione della firma.</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>Rappresenta la classe base per gli algoritmi 3DES (Triple Data Encryption Standard) da cui devono derivare tutte le implementazioni di <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>Crea un'istanza di un oggetto di crittografia per eseguire l'algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <returns>Istanza di un oggetto di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>Consente di creare un'istanza di un oggetto di crittografia per eseguire l'implementazione specificata dell'algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <param name="str">Nome dell'implementazione specifica di <see cref="T:System.Security.Cryptography.TripleDES" /> da utilizzare.</param>
      <returns>Istanza di un oggetto di crittografia.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>Determina se la chiave specificata è debole.</summary>
      <param name="rgbKey">Chiave segreta di cui verificare la debolezza.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">La dimensione del parametro <paramref name="rgbKey" /> non è valida.</exception>
      <returns>
        <see langword="true" /> se la chiave è debole. In caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>Ottiene o imposta la chiave privata per l'algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <exception cref="T:System.ArgumentNullException">Si è tentato di impostare la chiave su <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Si è tentato di impostare una chiave la cui lunghezza non è valida  
  
-oppure- 
Si è tentato di impostare una chiave debole (vedere <see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" />).</exception>
      <returns>Chiave privata per l'algoritmo <see cref="T:System.Security.Cryptography.TripleDES" />.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.FlowControl">
      <summary vsli:raw="Describes how an instruction alters the flow of control.">Descrive in che modo un'istruzione modifica il flusso di controllo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Branch">
      <summary vsli:raw="Branch instruction.">Istruzione branch.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Break">
      <summary vsli:raw="Break instruction.">Istruzione break.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Call">
      <summary vsli:raw="Call instruction.">Istruzione call.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Cond_Branch">
      <summary vsli:raw="Conditional branch instruction.">Istruzione branch condizionale.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Meta">
      <summary vsli:raw="Provides information about a subsequent instruction. For example, the &lt;see langword=&quot;Unaligned&quot; /&gt; instruction of &lt;see langword=&quot;Reflection.Emit.Opcodes&quot; /&gt; has &lt;see langword=&quot;FlowControl.Meta&quot; /&gt; and specifies that the subsequent pointer instruction might be unaligned.">Fornisce informazioni su un'istruzione successiva. L'istruzione <see langword="Unaligned" /> di <see langword="Reflection.Emit.Opcodes" />, ad esempio, contiene <see langword="FlowControl.Meta" /> e specifica che l'istruzione di puntatore successiva potrebbe non essere allineata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Next">
      <summary vsli:raw="Normal flow of control.">Indica il flusso di controllo normale.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Phi">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">Questo valore di enumeratore è riservato e non deve essere utilizzato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Return">
      <summary vsli:raw="Return instruction.">Istruzione return.</summary>
    </member>
    <member name="F:System.Reflection.Emit.FlowControl.Throw">
      <summary vsli:raw="Exception throw instruction.">Istruzione throw relativa alle eccezioni</summary>
    </member>
    <member name="T:System.Reflection.Emit.OpCode">
      <summary vsli:raw="Describes an intermediate language (IL) instruction.">Descrive un'istruzione del linguaggio intermedio (IL).</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is equal to this &lt;see langword=&quot;Opcode&quot; /&gt;.">Verifica se l'oggetto indicato è uguale all'oggetto <see langword="Opcode" />.</summary>
      <param name="obj" vsli:raw="The object to compare to this object.">Oggetto da confrontare con questo oggetto.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;Opcode&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="obj" /> è un'istanza di <see langword="Opcode" /> ed è uguale a questo oggetto; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether the current instance is equal to the specified &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt;.">Indica se l'istanza corrente è uguale all'oggetto <see cref="T:System.Reflection.Emit.OpCode" /> specificato.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to the current instance.">Oggetto <see cref="T:System.Reflection.Emit.OpCode" /> da confrontare con l'istanza corrente.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;obj&quot; /&gt; is equal to the value of the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se il valore di <paramref name="obj" /> è uguale al valore dell'istanza corrente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.GetHashCode">
      <summary vsli:raw="Returns the generated hash code for this &lt;see langword=&quot;Opcode&quot; /&gt;.">Restituisce il codice hash generato per l'oggetto <see langword="Opcode" />.</summary>
      <returns vsli:raw="The hash code for this instance.">Codice hash per l'istanza.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are equal.">Indica se due strutture <see cref="T:System.Reflection.Emit.OpCode" /> sono uguali.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.OpCode" /> da confrontare con <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.OpCode" /> da confrontare con <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="a" /> è uguale a <paramref name="b" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode,System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Indicates whether two &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; structures are not equal.">Indica se due strutture <see cref="T:System.Reflection.Emit.OpCode" /> non sono uguali.</summary>
      <param name="a" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;b&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.OpCode" /> da confrontare con <paramref name="b" />.</param>
      <param name="b" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Emit.OpCode&quot; /&gt; to compare to &lt;paramref name=&quot;a&quot; /&gt;.">Oggetto <see cref="T:System.Reflection.Emit.OpCode" /> da confrontare con <paramref name="a" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; is not equal to &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se <paramref name="a" /> non è uguale a <paramref name="b" />; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.OpCode.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;Opcode&quot; /&gt; as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Restituisce l'oggetto <see langword="Opcode" /> come <see cref="T:System.String" />.</summary>
      <returns vsli:raw="A string containing the name of this &lt;see langword=&quot;Opcode&quot; /&gt;.">Stringa contenente il nome di questo <see langword="Opcode" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.FlowControl">
      <summary vsli:raw="The flow control characteristics of the intermediate language (IL) instruction.">Caratteristiche del controllo di flusso dell'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The type of flow control.">Di sola lettura. Tipo di controllo di flusso.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Name">
      <summary vsli:raw="The name of the intermediate language (IL) instruction.">Nome dell'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The name of the IL instruction.">Di sola lettura. Nome dell'istruzione IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OpCodeType">
      <summary vsli:raw="The type of intermediate language (IL) instruction.">Tipo di istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The type of intermediate language (IL) instruction.">Di sola lettura. Tipo di istruzione del linguaggio intermedio (IL).</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.OperandType">
      <summary vsli:raw="The operand type of an intermediate language (IL) instruction.">Tipo di operando di un'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The operand type of an IL instruction.">Di sola lettura. Tipo di operando di un'istruzione IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Size">
      <summary vsli:raw="The size of the intermediate language (IL) instruction.">Dimensione dell'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The size of the IL instruction.">Di sola lettura. Dimensione dell'istruzione IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPop">
      <summary vsli:raw="How the intermediate language (IL) instruction pops the stack.">Modalità di estrazione dallo stack da parte dell'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pops the stack.">Di sola lettura. Modalità di estrazione dallo stack da parte dell'istruzione IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.StackBehaviourPush">
      <summary vsli:raw="How the intermediate language (IL) instruction pushes operand onto the stack.">Modalità di inserimento dell'operando nello stack da parte dell'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The way the IL instruction pushes operand onto the stack.">Di sola lettura. Modalità di inserimento dell'operando nello stack da parte dell'istruzione IL.</returns>
    </member>
    <member name="P:System.Reflection.Emit.OpCode.Value">
      <summary vsli:raw="Gets the numeric value of the intermediate language (IL) instruction.">Ottiene il valore numerico dell'istruzione del linguaggio intermedio (IL).</summary>
      <returns vsli:raw="Read-only. The numeric value of the IL instruction.">Di sola lettura. Valore numerico dell'istruzione IL.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodes">
      <summary vsli:raw="Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; class members (such as &lt;see cref=&quot;M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)&quot; /&gt;).">Fornisce le rappresentazioni dei campi delle istruzioni MSIL (Microsoft Intermediate Language) per la creazione da parte dei membri della classe <see cref="T:System.Reflection.Emit.ILGenerator" />, ad esempio il metodo <see cref="M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add">
      <summary vsli:raw="Adds two values and pushes the result onto the evaluation stack.">Somma due valori e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf">
      <summary vsli:raw="Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.">Somma due valori interi, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Add_Ovf_Un">
      <summary vsli:raw="Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Somma due valori interi senza segno, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.And">
      <summary vsli:raw="Computes the bitwise AND of two values and pushes the result onto the evaluation stack.">Calcola l'operatore AND bit per bit di due valori e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Arglist">
      <summary vsli:raw="Returns an unmanaged pointer to the argument list of the current method.">Restituisce un puntatore non gestito all'elenco di argomenti del metodo corrente.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq">
      <summary vsli:raw="Transfers control to a target instruction if two values are equal.">Trasferisce il controllo a un'istruzione di destinazione se due valori sono uguali.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Beq_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if two values are equal.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se due valori sono uguali.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than or equal to the second value.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore o uguale al secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore o uguale al secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bge_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore del secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore del secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bgt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è maggiore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore o uguale al secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore o uguale al secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore o uguale al secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ble_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore o uguale al secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore del secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore del secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un">
      <summary vsli:raw="Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione se il primo valore è minore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Blt_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) se il primo valore è minore del secondo, durante il confronto di valori interi senza segno o valori float non ordinati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un">
      <summary vsli:raw="Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.">Trasferisce il controllo a un'istruzione di destinazione quando due valori interi senza segno o valori float non ordinati non sono uguali.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Bne_Un_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.">Trasferisce il controllo a un'istruzione di destinazione (forma breve) quando due valori interi senza segno o valori float non ordinati non sono uguali.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Box">
      <summary vsli:raw="Converts a value type to an object reference (type &lt;see langword=&quot;O&quot; /&gt;).">Converte un tipo di valore in un riferimento a un oggetto di tipo <see langword="O" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br">
      <summary vsli:raw="Unconditionally transfers control to a target instruction.">Trasferisce il controllo a un'istruzione di destinazione in modo incondizionato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Br_S">
      <summary vsli:raw="Unconditionally transfers control to a target instruction (short form).">Trasferisce il controllo a un'istruzione di destinazione in modo incondizionato (forma breve).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Break">
      <summary vsli:raw="Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.">Segnala a Common Language Infrastructure (CLI) di indicare al debugger che è stato raggiunto un punto di interruzione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic), or zero.">Trasferisce il controllo a un'istruzione di destinazione se <paramref name="value" /> è <see langword="false" />, un riferimento null (<see langword="Nothing" /> in Visual Basic) oppure zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brfalse_S">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, a null reference, or zero.">Trasferisce il controllo a un'istruzione di destinazione se <paramref name="value" /> è <see langword="false" />, un riferimento null oppure zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue">
      <summary vsli:raw="Transfers control to a target instruction if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">Trasferisce il controllo a un'istruzione di destinazione se <paramref name="value" /> è <see langword="true" />, diverso da null o da zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Brtrue_S">
      <summary vsli:raw="Transfers control to a target instruction (short form) if &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, not null, or non-zero.">Trasferisce il controllo a un'istruzione di destinazione (forma breve), se <paramref name="value" /> è <see langword="true" />, diverso da null oppure diverso da zero.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Call">
      <summary vsli:raw="Calls the method indicated by the passed method descriptor.">Chiama il metodo indicato dal descrittore di metodo passato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Calli">
      <summary vsli:raw="Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.">Chiama il metodo indicato nello stack di valutazione, come un puntatore a un punto di ingresso, con gli argomenti descritti da una convenzione di chiamata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Callvirt">
      <summary vsli:raw="Calls a late-bound method on an object, pushing the return value onto the evaluation stack.">Chiama un metodo ad associazione tardiva su un oggetto, inserendo il valore restituito nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Castclass">
      <summary vsli:raw="Attempts to cast an object passed by reference to the specified class.">Tenta di eseguire il cast di un oggetto passato per riferimento alla classe specificata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ceq">
      <summary vsli:raw="Compares two values. If they are equal, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Confronta due valori. Se tali valori sono uguali, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt">
      <summary vsli:raw="Compares two values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Confronta due valori. Se il primo valore è maggiore del secondo, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cgt_Un">
      <summary vsli:raw="Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Confronta due valori senza segno o non ordinati. Se il primo valore è maggiore del secondo, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ckfinite">
      <summary vsli:raw="Throws &lt;see cref=&quot;T:System.ArithmeticException&quot; /&gt; if value is not a finite number.">Genera un'eccezione <see cref="T:System.ArithmeticException" /> se il valore non è un numero finito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt">
      <summary vsli:raw="Compares two values. If the first value is less than the second, the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Confronta due valori. Se il primo valore è inferiore al secondo, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Clt_Un">
      <summary vsli:raw="Compares the unsigned or unordered values &lt;paramref name=&quot;value1&quot; /&gt; and &lt;paramref name=&quot;value2&quot; /&gt;. If &lt;paramref name=&quot;value1&quot; /&gt; is less than &lt;paramref name=&quot;value2&quot; /&gt;, then the integer value 1 &lt;see langword=&quot;(int32&quot; /&gt;) is pushed onto the evaluation stack; otherwise 0 (&lt;see langword=&quot;int32&quot; /&gt;) is pushed onto the evaluation stack.">Confronta i due valori senza segno o non ordinati <paramref name="value1" /> e <paramref name="value2" />. Se <paramref name="value1" /> è minore di <paramref name="value2" />, nello stack di valutazione viene inserito il valore intero 1 <see langword="(int32" />); in caso contrario, viene inserito 0 (<see langword="int32" />).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Constrained">
      <summary vsli:raw="Constrains the type on which a virtual method call is made.">Vincola il tipo su cui viene eseguita una chiamata al metodo virtuale.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;native int&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int8&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="int8" />, quindi lo estende, aggiungendo spazi, a <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int16&quot; /&gt;, then extends (pads) it to &lt;see langword=&quot;int32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="int16" />, quindi lo estende, aggiungendo spazi, a <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_I8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;int64&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="native int" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="native int" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int8" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int8" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extending it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int16" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int16" /> con segno e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int32" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="int64" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to signed &lt;see langword=&quot;int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="int64" /> con segno, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned native int" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned native int" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int8" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int8" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int16" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt; and extends it to &lt;see langword=&quot;int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int16" /> e lo estende a <see langword="int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int32" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8">
      <summary vsli:raw="Converts the signed value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore con segno all'inizio dello stack di valutazione in <see langword="unsigned int64" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un">
      <summary vsli:raw="Converts the unsigned value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, throwing &lt;see cref=&quot;T:System.OverflowException&quot; /&gt; on overflow.">Converte il valore senza segno all'inizio dello stack di valutazione in <see langword="unsigned int64" />, generando un'eccezione <see cref="T:System.OverflowException" /> in caso di overflow.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R_Un">
      <summary vsli:raw="Converts the unsigned integer value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">Converte il valore intero senza segno all'inizio dello stack di valutazione in <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="float32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_R8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;float64&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="float64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned native int&quot; /&gt;, and extends it to &lt;see langword=&quot;native int&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned native int" /> e lo estende a <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U1">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int8&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int8" /> e lo estende a <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U2">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int16&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int16" /> e lo estende a <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U4">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int32&quot; /&gt;, and extends it to &lt;see langword=&quot;int32&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int32" /> e lo estende a <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Conv_U8">
      <summary vsli:raw="Converts the value on top of the evaluation stack to &lt;see langword=&quot;unsigned int64&quot; /&gt;, and extends it to &lt;see langword=&quot;int64&quot; /&gt;.">Converte il valore all'inizio dello stack di valutazione in <see langword="unsigned int64" /> e lo estende a <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpblk">
      <summary vsli:raw="Copies a specified number bytes from a source address to a destination address.">Copia un numero specificato di byte da un indirizzo di origine a un indirizzo di destinazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Cpobj">
      <summary vsli:raw="Copies the value type located at the address of an object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;) to the address of the destination object (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;, &lt;see langword=&quot;*&quot; /&gt; or &lt;see langword=&quot;native int&quot; /&gt;).">Copia il tipo di valore individuato in corrispondenza dell'indirizzo di un oggetto di tipo <see langword="&amp;" />, <see langword="*" /> o <see langword="native int" /> nell'indirizzo dell'oggetto di destinazione, di tipo <see langword="&amp;" />, <see langword="*" /> o <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div">
      <summary vsli:raw="Divides two values and pushes the result as a floating-point (type &lt;see langword=&quot;F&quot; /&gt;) or quotient (type &lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">Divide due valori e inserisce il risultato come valore in virgola mobile (di tipo <see langword="F" />) o quoziente (di tipo <see langword="int32" />) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Div_Un">
      <summary vsli:raw="Divides two unsigned integer values and pushes the result (&lt;see langword=&quot;int32&quot; /&gt;) onto the evaluation stack.">Divide due valori interi senza segno e inserisce il risultato (<see langword="int32" />) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Dup">
      <summary vsli:raw="Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.">Copia il valore corrente più in alto nello stack di valutazione e inserisce la copia nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfilter">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;filter&quot; /&gt; clause of an exception back to the Common Language Infrastructure (CLI) exception handler.">Trasferisce il controllo dalla clausola <see langword="filter" /> di un'eccezione nuovamente al gestore di eccezioni di Common Language Infrastructure (CLI).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Endfinally">
      <summary vsli:raw="Transfers control from the &lt;see langword=&quot;fault&quot; /&gt; or &lt;see langword=&quot;finally&quot; /&gt; clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.">Trasferisce il controllo dalla clausola <see langword="fault" /> o <see langword="finally" /> di un blocco di eccezioni al gestore di eccezioni di Common Language Infrastructure (CLI).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initblk">
      <summary vsli:raw="Initializes a specified block of memory at a specific address to a given size and initial value.">Inizializza un blocco specificato di memoria in corrispondenza di un indirizzo specifico su una dimensione e un valore iniziale dati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Initobj">
      <summary vsli:raw="Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.">Inizializza ciascun campo del tipo di valore in corrispondenza di un indirizzo specifico su un riferimento Null o uno 0 di tipo primitivo appropriato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Isinst">
      <summary vsli:raw="Tests whether an object reference (type &lt;see langword=&quot;O&quot; /&gt;) is an instance of a particular class.">Verifica se un riferimento a un oggetto di tipo <see langword="O" /> è un'istanza di una classe particolare.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Jmp">
      <summary vsli:raw="Exits current method and jumps to specified method.">Esce dal metodo corrente e passa a quello specificato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg">
      <summary vsli:raw="Loads an argument (referenced by a specified index value) onto the stack.">Carica un argomento (a cui fa riferimento un valore di indice specificato) nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_0">
      <summary vsli:raw="Loads the argument at index 0 onto the evaluation stack.">Carica l'argomento in corrispondenza dell'indice 0 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_1">
      <summary vsli:raw="Loads the argument at index 1 onto the evaluation stack.">Carica l'argomento in corrispondenza dell'indice 1 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_2">
      <summary vsli:raw="Loads the argument at index 2 onto the evaluation stack.">Carica l'argomento in corrispondenza dell'indice 2 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_3">
      <summary vsli:raw="Loads the argument at index 3 onto the evaluation stack.">Carica l'argomento in corrispondenza dell'indice 3 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarg_S">
      <summary vsli:raw="Loads the argument (referenced by a specified short form index) onto the evaluation stack.">Carica l'argomento (a cui fa riferimento un indice specificato in forma breve) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga">
      <summary vsli:raw="Load an argument address onto the evaluation stack.">Carica l'indirizzo di un argomento nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldarga_S">
      <summary vsli:raw="Load an argument address, in short form, onto the evaluation stack.">Carica l'indirizzo di un argomento, in forma breve, nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce un valore fornito di tipo <see langword="int32" /> nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_0">
      <summary vsli:raw="Pushes the integer value of 0 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 0 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_1">
      <summary vsli:raw="Pushes the integer value of 1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 1 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_2">
      <summary vsli:raw="Pushes the integer value of 2 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 2 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_3">
      <summary vsli:raw="Pushes the integer value of 3 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 3 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_4">
      <summary vsli:raw="Pushes the integer value of 4 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 4 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_5">
      <summary vsli:raw="Pushes the integer value of 5 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 5 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_6">
      <summary vsli:raw="Pushes the integer value of 6 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 6 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_7">
      <summary vsli:raw="Pushes the integer value of 7 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 7 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_8">
      <summary vsli:raw="Pushes the integer value of 8 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero 8 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_M1">
      <summary vsli:raw="Pushes the integer value of -1 onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Inserisce il valore intero -1 nello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I4_S">
      <summary vsli:raw="Pushes the supplied &lt;see langword=&quot;int8&quot; /&gt; value onto the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;, short form.">Inserisce il valore fornito <see langword="int8" /> nello stack di valutazione come <see langword="int32" /> (forma breve).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_I8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">Inserisce un valore fornito di tipo <see langword="int64" /> nello stack di valutazione come <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R4">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float32&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Inserisce un valore fornito di tipo <see langword="float32" /> nello stack di valutazione come tipo <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldc_R8">
      <summary vsli:raw="Pushes a supplied value of type &lt;see langword=&quot;float64&quot; /&gt; onto the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Inserisce un valore fornito di tipo <see langword="float64" /> nello stack di valutazione come tipo <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem">
      <summary vsli:raw="Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.">Carica l'elemento in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo specificato nell'istruzione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;native int&quot; /&gt; at a specified array index onto the top of the evaluation stack as a &lt;see langword=&quot;native int&quot; /&gt;.">Carica l'elemento con tipo <see langword="native int" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="native int" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Carica l'elemento con tipo <see langword="int8" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Carica l'elemento con tipo <see langword="int16" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Carica l'elemento con tipo <see langword="int32" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_I8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;int64&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int64&quot; /&gt;.">Carica l'elemento con tipo <see langword="int64" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int64" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float32&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Carica l'elemento con tipo <see langword="float32" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_R8">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;float64&quot; /&gt; at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;F&quot; /&gt; (float).">Carica l'elemento con tipo <see langword="float64" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="F" /> (float).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_Ref">
      <summary vsli:raw="Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;O&quot; /&gt; (object reference).">Carica l'elemento contenente un riferimento a un oggetto in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="O" /> (riferimento a un oggetto).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U1">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int8&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Carica l'elemento con tipo <see langword="unsigned int8" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U2">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int16&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Carica l'elemento con tipo <see langword="unsigned int16" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelem_U4">
      <summary vsli:raw="Loads the element with type &lt;see langword=&quot;unsigned int32&quot; /&gt; at a specified array index onto the top of the evaluation stack as an &lt;see langword=&quot;int32&quot; /&gt;.">Carica l'elemento con tipo <see langword="unsigned int32" /> in corrispondenza dell'indice di matrice specificato all'inizio dello stack di valutazione come <see langword="int32" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldelema">
      <summary vsli:raw="Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &lt;see langword=&quot;&amp;amp;&quot; /&gt; (managed pointer).">Carica l'indirizzo dell'elemento di matrice in corrispondenza di un indice di matrice specificato all'inizio dello stack di valutazione come tipo <see langword="&amp;" /> (puntatore gestito).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldfld">
      <summary vsli:raw="Finds the value of a field in the object whose reference is currently on the evaluation stack.">Trova il valore di un campo nell'oggetto il cui riferimento si trova attualmente nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldflda">
      <summary vsli:raw="Finds the address of a field in the object whose reference is currently on the evaluation stack.">Trova l'indirizzo di un campo nell'oggetto il cui riferimento si trova attualmente nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a specific method onto the evaluation stack.">Inserisce un puntatore non gestito di tipo <see langword="native int" /> al codice nativo che implementa un metodo specifico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;native int&quot; /&gt; as a &lt;see langword=&quot;native int&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="native int" /> come <see langword="native int" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="int8" /> come <see langword="int32" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="int16" /> come <see langword="int32" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="int32" /> come <see langword="int32" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_I8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;int64&quot; /&gt; as an &lt;see langword=&quot;int64&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="int64" /> come <see langword="int64" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float32&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="float32" /> come un tipo <see langword="F" /> (float) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_R8">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;float64&quot; /&gt; as a type &lt;see langword=&quot;F&quot; /&gt; (float) onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="float64" /> come un tipo <see langword="F" /> (float) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_Ref">
      <summary vsli:raw="Loads an object reference as a type &lt;see langword=&quot;O&quot; /&gt; (object reference) onto the evaluation stack indirectly.">Carica indirettamente un riferimento a un oggetto come un tipo <see langword="O" /> (riferimento a un oggetto) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U1">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int8&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="unsigned int8" /> come <see langword="int32" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U2">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int16&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="unsigned int16" /> come <see langword="int32" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldind_U4">
      <summary vsli:raw="Loads a value of type &lt;see langword=&quot;unsigned int32&quot; /&gt; as an &lt;see langword=&quot;int32&quot; /&gt; onto the evaluation stack indirectly.">Carica indirettamente un valore di tipo <see langword="unsigned int32" /> come <see langword="int32" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldlen">
      <summary vsli:raw="Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.">Inserisce il numero di elementi di una matrice unidimensionale in base zero nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack.">Carica la variabile locale in corrispondenza di un indice specifico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_0">
      <summary vsli:raw="Loads the local variable at index 0 onto the evaluation stack.">Carica la variabile locale in corrispondenza dell'indice 0 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_1">
      <summary vsli:raw="Loads the local variable at index 1 onto the evaluation stack.">Carica la variabile locale in corrispondenza dell'indice 1 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_2">
      <summary vsli:raw="Loads the local variable at index 2 onto the evaluation stack.">Carica la variabile locale in corrispondenza dell'indice 2 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_3">
      <summary vsli:raw="Loads the local variable at index 3 onto the evaluation stack.">Carica la variabile locale in corrispondenza dell'indice 3 nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloc_S">
      <summary vsli:raw="Loads the local variable at a specific index onto the evaluation stack, short form.">Carica la variabile locale in corrispondenza di un indice specifico nello stack di valutazione, forma breve.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack.">Carica l'indirizzo della variabile locale in corrispondenza di un indice specifico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldloca_S">
      <summary vsli:raw="Loads the address of the local variable at a specific index onto the evaluation stack, short form.">Carica l'indirizzo della variabile locale in corrispondenza di un indice specifico nello stack di valutazione, forma breve.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldnull">
      <summary vsli:raw="Pushes a null reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">Inserisce un riferimento null di tipo <see langword="O" /> nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldobj">
      <summary vsli:raw="Copies the value type object pointed to by an address to the top of the evaluation stack.">Copia l'oggetto tipo di valore a cui punta un indirizzo all'inizio dello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsfld">
      <summary vsli:raw="Pushes the value of a static field onto the evaluation stack.">Inserisce il valore di un campo statico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldsflda">
      <summary vsli:raw="Pushes the address of a static field onto the evaluation stack.">Inserisce l'indirizzo di un campo statico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldstr">
      <summary vsli:raw="Pushes a new object reference to a string literal stored in the metadata.">Inserisce un nuovo riferimento a un oggetto in un valore letterale stringa archiviato nei metadati.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldtoken">
      <summary vsli:raw="Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.">Converte un token di metadati nella relativa rappresentazione di runtime, inserendolo nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ldvirtftn">
      <summary vsli:raw="Pushes an unmanaged pointer (type &lt;see langword=&quot;native int&quot; /&gt;) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.">Inserisce un puntatore non gestito di tipo (<see langword="native int" />) al codice nativo che implementa un particolare metodo virtual con un oggetto specificato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a specific target instruction.">Esce da un'area protetta di codice, trasferendo il controllo in modo incondizionato a un'istruzione di destinazione specifica.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Leave_S">
      <summary vsli:raw="Exits a protected region of code, unconditionally transferring control to a target instruction (short form).">Esce da un'area protetta di codice, trasferendo il controllo in modo incondizionato a un'istruzione di destinazione (forma breve).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Localloc">
      <summary vsli:raw="Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type &lt;see langword=&quot;*&quot; /&gt;) of the first allocated byte onto the evaluation stack.">Esegue l'allocazione di un numero di byte dal pool di memoria dinamica locale e inserisce l'indirizzo (un puntatore transitorio di tipo <see langword="*" />) del primo byte allocato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mkrefany">
      <summary vsli:raw="Pushes a typed reference to an instance of a specific type onto the evaluation stack.">Inserisce un riferimento tipizzato a un'istanza di un tipo specifico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul">
      <summary vsli:raw="Multiplies two values and pushes the result on the evaluation stack.">Moltiplica due valori e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf">
      <summary vsli:raw="Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Moltiplica due valori interi, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un">
      <summary vsli:raw="Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.">Moltiplica due valori interi senza segno, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Neg">
      <summary vsli:raw="Negates a value and pushes the result onto the evaluation stack.">Nega un valore e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newarr">
      <summary vsli:raw="Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.">Inserisce un riferimento a un oggetto in una matrice unidimensionale in base zero i cui elementi sono di un tipo specifico nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Newobj">
      <summary vsli:raw="Creates a new object or a new instance of a value type, pushing an object reference (type &lt;see langword=&quot;O&quot; /&gt;) onto the evaluation stack.">Crea un nuovo oggetto o una nuova istanza di un tipo di valore, inserendo un riferimento a un oggetto (di tipo <see langword="O" />) nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Nop">
      <summary vsli:raw="Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.">Riempie lo spazio se i codici operativi sono corretti. Non viene eseguita alcuna operazione significativa sebbene possa essere usato un ciclo di elaborazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Not">
      <summary vsli:raw="Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.">Calcola il complemento bit per bit del valore intero all'inizio dello stack e inserisce il risultato nello stack di valutazione come lo stesso tipo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Or">
      <summary vsli:raw="Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.">Calcola il complemento bit per bit dei due valori interi all'inizio dello stack e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Pop">
      <summary vsli:raw="Removes the value currently on top of the evaluation stack.">Rimuove il valore attualmente all'inizio dello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix1">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix2">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix3">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix4">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix5">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix6">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefix7">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Prefixref">
      <summary vsli:raw="This is a reserved instruction.">Si tratta di un'istruzione riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Readonly">
      <summary vsli:raw="Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.">Specifica che la successiva operazione sull'indirizzo di matrice non comporta l'esecuzione di alcun controllo del tipo in fase di esecuzione e che viene restituito un puntatore gestito la cui modificabilità è limitata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanytype">
      <summary vsli:raw="Retrieves the type token embedded in a typed reference.">Recupera il token di tipo incorporato in un riferimento tipizzato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Refanyval">
      <summary vsli:raw="Retrieves the address (type &lt;see langword=&quot;&amp;amp;&quot; /&gt;) embedded in a typed reference.">Recupera l'indirizzo (di tipo <see langword="&amp;" />) incorporato in un riferimento tipizzato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem">
      <summary vsli:raw="Divides two values and pushes the remainder onto the evaluation stack.">Divide due valori e inserisce il resto nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rem_Un">
      <summary vsli:raw="Divides two unsigned values and pushes the remainder onto the evaluation stack.">Divide due valori senza segno e inserisce il resto nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Ret">
      <summary vsli:raw="Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.">Restituisce il risultato del metodo corrente, inserendo il valore restituito (se presente) dallo stack di valutazione del chiamato nello stack di valutazione del chiamante.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Rethrow">
      <summary vsli:raw="Rethrows the current exception.">Genera nuovamente l'eccezione corrente.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shl">
      <summary vsli:raw="Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.">Sposta un valore intero verso sinistra (spostando gli zeri) di un numero specificato di bit, inserendo il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr">
      <summary vsli:raw="Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.">Sposta un valore intero verso destra (spostando il segno) di un numero specificato di bit, inserendo il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Shr_Un">
      <summary vsli:raw="Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.">Sposta un valore intero senza segno verso destra (spostando gli zeri) di un numero specificato di bit, inserendo il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sizeof">
      <summary vsli:raw="Pushes the size, in bytes, of a supplied value type onto the evaluation stack.">Inserisce la dimensione in byte del tipo di valore fornito nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index.">Archivia il valore all'inizio dello stack di valutazione nello slot di argomento in corrispondenza di un indice specificato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Starg_S">
      <summary vsli:raw="Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.">Archivia il valore all'inizio dello stack di valutazione nello slot di argomento in corrispondenza di un indice specificato, forma breve.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem">
      <summary vsli:raw="Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore presente nello stack di valutazione, il cui tipo è specificato nell'istruzione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;native int&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="native int" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I1">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int8&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int8" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I2">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int16&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int16" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int32&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int32" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_I8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;int64&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="int64" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R4">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float32&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="float32" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_R8">
      <summary vsli:raw="Replaces the array element at a given index with the &lt;see langword=&quot;float64&quot; /&gt; value on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore <see langword="float64" /> sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stelem_Ref">
      <summary vsli:raw="Replaces the array element at a given index with the object ref value (type &lt;see langword=&quot;O&quot; /&gt;) on the evaluation stack.">Sostituisce l'elemento di matrice in corrispondenza di un indice specificato con il valore di un riferimento a un oggetto (di tipo <see langword="O" />) sullo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stfld">
      <summary vsli:raw="Replaces the value stored in the field of an object reference or pointer with a new value.">Sostituisce il valore archiviato nel campo di un riferimento a un oggetto o puntatore con un nuovo valore.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;native int&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="native int" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I1">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int8&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="int8" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I2">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int16&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="int16" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int32&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="int32" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_I8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;int64&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="int64" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R4">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float32&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="float32" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_R8">
      <summary vsli:raw="Stores a value of type &lt;see langword=&quot;float64&quot; /&gt; at a supplied address.">Memorizza un valore di tipo <see langword="float64" /> in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stind_Ref">
      <summary vsli:raw="Stores a object reference value at a supplied address.">Archivia il valore di un riferimento a un oggetto in corrispondenza di un indirizzo fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at a specified index.">Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza di un indice specificato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_0">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 0.">Estrae il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza dell'indice 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_1">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 1.">Preleva il valore corrente dall'inizio dello stack di valutazione e lo memorizza nell'elenco delle variabili locali in corrispondenza dell'indice 1.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_2">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 2.">Preleva il valore corrente dall'inizio dello stack di valutazione e lo archivia nell'elenco delle variabili locali in corrispondenza dell'indice 2.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_3">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at index 3.">Preleva il valore corrente dall'inizio dello stack di valutazione e lo memorizza nell'elenco delle variabili locali in corrispondenza dell'indice 3.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stloc_S">
      <summary vsli:raw="Pops the current value from the top of the evaluation stack and stores it in the local variable list at &lt;paramref name=&quot;index&quot; /&gt; (short form).">Estrae il valore corrente dall'inizio dello stack di valutazione e lo memorizza nell'elenco delle variabili in corrispondenza di <paramref name="index" /> (forma breve).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stobj">
      <summary vsli:raw="Copies a value of a specified type from the evaluation stack into a supplied memory address.">Copia un valore di un tipo specificato dallo stack di valutazione in un indirizzo di memoria fornito.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Stsfld">
      <summary vsli:raw="Replaces the value of a static field with a value from the evaluation stack.">Sostituisce il valore di un campo statico con un valore dallo stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub">
      <summary vsli:raw="Subtracts one value from another and pushes the result onto the evaluation stack.">Sottrae un valore da un altro e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf">
      <summary vsli:raw="Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">Sottrae un valore intero da un altro, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un">
      <summary vsli:raw="Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.">Sottrae un valore intero senza segno da un altro, esegue un controllo dell'overflow e inserisce il risultato nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Switch">
      <summary vsli:raw="Implements a jump table.">Implementa una tabella di collegamento.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Tailcall">
      <summary vsli:raw="Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.">Esegue un'istruzione di chiamata al metodo con suffisso tale da rimuovere lo stack frame del metodo corrente prima dell'esecuzione dell'istruzione di chiamata effettiva.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Throw">
      <summary vsli:raw="Throws the exception object currently on the evaluation stack.">Genera l'oggetto eccezione attualmente nello stack di valutazione.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unaligned">
      <summary vsli:raw="Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following &lt;see langword=&quot;ldind&quot; /&gt;, &lt;see langword=&quot;stind&quot; /&gt;, &lt;see langword=&quot;ldfld&quot; /&gt;, &lt;see langword=&quot;stfld&quot; /&gt;, &lt;see langword=&quot;ldobj&quot; /&gt;, &lt;see langword=&quot;stobj&quot; /&gt;, &lt;see langword=&quot;initblk&quot; /&gt;, or &lt;see langword=&quot;cpblk&quot; /&gt; instruction.">Indica che un indirizzo attualmente all'inizio dello stack di valutazione potrebbe non essere allineato rispetto alla dimensione standard dell'istruzione <see langword="ldind" />, <see langword="stind" />, <see langword="ldfld" />, <see langword="stfld" />, <see langword="ldobj" />, <see langword="stobj" />, <see langword="initblk" /> o <see langword="cpblk" /> immediatamente successiva.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox">
      <summary vsli:raw="Converts the boxed representation of a value type to its unboxed form.">Converte la rappresentazione boxed di un tipo di valore nel relativo formato unboxed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Unbox_Any">
      <summary vsli:raw="Converts the boxed representation of a type specified in the instruction to its unboxed form.">Converte la rappresentazione boxed di un tipo specificato nell'istruzione nel relativo formato unboxed.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Volatile">
      <summary vsli:raw="Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.">Specifica che un indirizzo attualmente all'inizio dello stack di valutazione potrebbe essere volatile e che i risultati della lettura del percorso non possono essere memorizzati nella cache o che non è possibile eliminare archivi multipli in tale percorso.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodes.Xor">
      <summary vsli:raw="Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.">Calcola l'operazione XOR bit per bit dei primi due valori dello stack di valutazione, inserendo il risultato nello stack di valutazione.</summary>
    </member>
    <member name="M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)">
      <summary vsli:raw="Returns true or false if the supplied opcode takes a single byte argument.">Restituisce true o false se il codice operativo fornito accetta un argomento a byte singolo.</summary>
      <param name="inst" vsli:raw="An instance of an Opcode object.">Istanza di un oggetto Opcode.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> o <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.OpCodeType">
      <summary vsli:raw="Describes the types of the Microsoft intermediate language (MSIL) instructions.">Descrive i tipi delle istruzioni MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Annotation">
      <summary vsli:raw="This enumerator value is reserved and should not be used.">Questo valore di enumeratore è riservato e non deve essere utilizzato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Macro">
      <summary vsli:raw="These are Microsoft intermediate language (MSIL) instructions that are used as a synonym for other MSIL instructions. For example, &lt;see langword=&quot;ldarg.0&quot; /&gt; represents the &lt;see langword=&quot;ldarg&quot; /&gt; instruction with an argument of 0.">Si tratta di istruzioni MSIL utilizzate come sinonimi di altre istruzioni MSIL. Ad esempio, <see langword="ldarg.0" /> rappresenta l'istruzione <see langword="ldarg" /> con un argomento corrispondente a 0.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Nternal">
      <summary vsli:raw="Describes a reserved Microsoft intermediate language (MSIL) instruction.">Descrive un'istruzione MSIL riservata.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Objmodel">
      <summary vsli:raw="Describes a Microsoft intermediate language (MSIL) instruction that applies to objects.">Descrive un'istruzione MSIL che si applica agli oggetti.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Prefix">
      <summary vsli:raw="Describes a prefix instruction that modifies the behavior of the following instruction.">Descrive un'istruzione di prefisso che consente di modificare il comportamento dell'istruzione che segue.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OpCodeType.Primitive">
      <summary vsli:raw="Describes a built-in instruction.">Descrive un'istruzione incorporata.</summary>
    </member>
    <member name="T:System.Reflection.Emit.OperandType">
      <summary vsli:raw="Describes the operand type of Microsoft intermediate language (MSIL) instruction.">Descrive il tipo di operando dell'istruzione MSIL (Microsoft Intermediate Language).</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineBrTarget">
      <summary vsli:raw="The operand is a 32-bit integer branch target.">L'operando è una destinazione di creazione di un ramo di tipo integer a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineField">
      <summary vsli:raw="The operand is a 32-bit metadata token.">L'operando è un token di metadati a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI">
      <summary vsli:raw="The operand is a 32-bit integer.">L'operando è un Integer a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineI8">
      <summary vsli:raw="The operand is a 64-bit integer.">L'operando è un Integer a 64 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineMethod">
      <summary vsli:raw="The operand is a 32-bit metadata token.">L'operando è un token di metadati a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineNone">
      <summary vsli:raw="No operand.">Nessun operando.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlinePhi">
      <summary vsli:raw="The operand is reserved and should not be used.">L'operando è riservato e non deve essere utilizzato.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineR">
      <summary vsli:raw="The operand is a 64-bit IEEE floating point number.">L'operando è un numero a virgola mobile IEEE a 64 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSig">
      <summary vsli:raw="The operand is a 32-bit metadata signature token.">L'operando è un token di firme di metadati a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineString">
      <summary vsli:raw="The operand is a 32-bit metadata string token.">L'operando è un token di stringa di metadati a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineSwitch">
      <summary vsli:raw="The operand is the 32-bit integer argument to a switch instruction.">L'operando è un argomento integer a 32 bit di un'istruzione switch.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineTok">
      <summary vsli:raw="The operand is a &lt;see langword=&quot;FieldRef&quot; /&gt;, &lt;see langword=&quot;MethodRef&quot; /&gt;, or &lt;see langword=&quot;TypeRef&quot; /&gt; token.">L'operando è un token <see langword="FieldRef" />, <see langword="MethodRef" /> oppure <see langword="TypeRef" />.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineType">
      <summary vsli:raw="The operand is a 32-bit metadata token.">L'operando è un token di metadati a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.InlineVar">
      <summary vsli:raw="The operand is 16-bit integer containing the ordinal of a local variable or an argument.">L'operando è un Integer a 16 bit contenente l'ordinale di un argomento o una variabile locale.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineBrTarget">
      <summary vsli:raw="The operand is an 8-bit integer branch target.">L'operando è una destinazione di creazione di un ramo di tipo integer a 8 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineI">
      <summary vsli:raw="The operand is an 8-bit integer.">L'operando è un Integer a 8 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineR">
      <summary vsli:raw="The operand is a 32-bit IEEE floating point number.">L'operando è un numero a virgola mobile IEEE a 32 bit.</summary>
    </member>
    <member name="F:System.Reflection.Emit.OperandType.ShortInlineVar">
      <summary vsli:raw="The operand is an 8-bit integer containing the ordinal of a local variable or an argumenta.">L'operando è un Integer a 8 bit contenente l'ordinale di un argomento o una variabile locale.</summary>
    </member>
    <member name="T:System.Reflection.Emit.PackingSize">
      <summary vsli:raw="Specifies one of two factors that determine the memory alignment of fields when a type is marshaled.">Specifica uno dei due fattori che determinano l'allineamento della memoria dei campi quando viene effettuato il marshalling di un tipo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size1">
      <summary vsli:raw="The packing size is 1 byte.">La dimensione di compressione è di 1 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size128">
      <summary vsli:raw="The packing size is 128 bytes.">La dimensione di compressione è di 128 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size16">
      <summary vsli:raw="The packing size is 16 bytes.">La dimensione di compressione è di 16 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size2">
      <summary vsli:raw="The packing size is 2 bytes.">La dimensione di compressione è di 2 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size32">
      <summary vsli:raw="The packing size is 32 bytes.">La dimensione di compressione è di 32 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size4">
      <summary vsli:raw="The packing size is 4 bytes.">La dimensione di compressione è di 4 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size64">
      <summary vsli:raw="The packing size is 64 bytes.">La dimensione di compressione è di 64 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Size8">
      <summary vsli:raw="The packing size is 8 bytes.">La dimensione di compressione è di 8 byte.</summary>
    </member>
    <member name="F:System.Reflection.Emit.PackingSize.Unspecified">
      <summary vsli:raw="The packing size is not specified.">La dimensione di compressione non è specificata.</summary>
    </member>
    <member name="T:System.Reflection.Emit.StackBehaviour">
      <summary vsli:raw="Describes how values are pushed onto a stack or popped off a stack.">Descrive l'inserimento e l'estrazione di valori in uno stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop0">
      <summary vsli:raw="No values are popped off the stack.">Nessun valore estratto dallo stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1">
      <summary vsli:raw="Pops one value off the stack.">Estrae un valore dallo stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pop1_pop1">
      <summary vsli:raw="Pops 1 value off the stack for the first operand, and 1 value of the stack for the second operand.">Estrae un valore dallo stack per il primo operando e un valore per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack.">Estrae un Integer a 32 bit dallo stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_pop1">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a value off the stack for the second operand.">Estrae dallo stack un Integer a 32 bit per il primo operando e un valore per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">Estrae dallo stack un Integer a 32 bit per il primo operando e un Integer a 32 bit per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi_popi">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, a 32-bit integer off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Estrae dallo stack un Integer a 32 bit per il primo, per il secondo e per il terzo operando.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popi8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit integer off the stack for the second operand.">Estrae dallo stack un Integer a 32 bit per il primo operando e un Integer a 64 bit per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr4">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 32-bit floating point number off the stack for the second operand.">Estrae dallo stack un Integer a 32 bit per il primo operando e un numero a virgola mobile a 32 bit per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popi_popr8">
      <summary vsli:raw="Pops a 32-bit integer off the stack for the first operand, and a 64-bit floating point number off the stack for the second operand.">Estrae dallo stack un Integer a 32 bit per il primo operando e un numero a virgola mobile a 64 bit per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref">
      <summary vsli:raw="Pops a reference off the stack.">Estrae un riferimento dallo stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a value off the stack for the second operand.">Estrae dallo stack un riferimento per il primo operando e un valore per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, and a 32-bit integer off the stack for the second operand.">Estrae dallo stack un riferimento per il primo operando e un Integer a 32 bit per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_pop1">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Estrae dallo stack un riferimento per il primo operando, un valore per il secondo e un Integer a 32 bit per il terzo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a value off the stack for the third operand.">Estrae dallo stack un riferimento per il primo operando, un valore per il secondo e un valore per il terzo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popi8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit integer off the stack for the third operand.">Estrae dallo stack un riferimento per il primo operando, un valore per il secondo e un Integer a 64 bit per il terzo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr4">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 32-bit integer off the stack for the third operand.">Estrae dallo stack un riferimento per il primo operando, un valore per il secondo e un Integer a 32 bit per il terzo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popr8">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a 64-bit floating point number off the stack for the third operand.">Estrae dallo stack un riferimento per il primo operando, un valore per il secondo e un numero a virgola mobile a 64 bit per il terzo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Popref_popi_popref">
      <summary vsli:raw="Pops a reference off the stack for the first operand, a value off the stack for the second operand, and a reference off the stack for the third operand.">Estrae dallo stack un riferimento per il primo operando, un valore per il secondo e un riferimento per il terzo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push0">
      <summary vsli:raw="No values are pushed onto the stack.">Nessun valore inserito nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1">
      <summary vsli:raw="Pushes one value onto the stack.">Inserisce un valore nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Push1_push1">
      <summary vsli:raw="Pushes 1 value onto the stack for the first operand, and 1 value onto the stack for the second operand.">Inserisce nello stack un valore per il primo operando e un valore per il secondo.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi">
      <summary vsli:raw="Pushes a 32-bit integer onto the stack.">Inserisce un Integer a 32 bit nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushi8">
      <summary vsli:raw="Pushes a 64-bit integer onto the stack.">Inserisce un Integer a 64 bit nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr4">
      <summary vsli:raw="Pushes a 32-bit floating point number onto the stack.">Inserisce un numero a virgola mobile a 32 bit nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushr8">
      <summary vsli:raw="Pushes a 64-bit floating point number onto the stack.">Inserisce un numero a virgola mobile a 64 bit nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Pushref">
      <summary vsli:raw="Pushes a reference onto the stack.">Inserisce un riferimento nello stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpop">
      <summary vsli:raw="Pops a variable off the stack.">Estrae una variabile dallo stack.</summary>
    </member>
    <member name="F:System.Reflection.Emit.StackBehaviour.Varpush">
      <summary vsli:raw="Pushes a variable onto the stack.">Inserisce una variabile nello stack.</summary>
    </member>
  </members>
</doc>
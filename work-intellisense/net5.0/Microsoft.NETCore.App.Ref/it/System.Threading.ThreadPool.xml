<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary vsli:raw="Represents a work item that can be executed by the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">Rappresenta un elemento di lavoro che può essere eseguito da <see cref="T:System.Threading.ThreadPool" />.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary vsli:raw="Executes the work item on the thread pool.">Esegue l'elemento di lavoro nel pool di thread.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary vsli:raw="Represents a handle that has been registered when calling &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt;. This class cannot be inherited.">Rappresenta un handle registrato durante la chiamata a <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />. La classe non può essere ereditata.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary vsli:raw="Cancels a registered wait operation issued by the &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt; method.">Consente di annullare un'operazione di attesa registrata attivata dal metodo <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to be signaled.">
        <see cref="T:System.Threading.WaitHandle" /> da segnalare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the function succeeds; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Viene restituito <see langword="true" /> se la funzione viene eseguita correttamente; in caso contrario <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary vsli:raw="Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.">Fornisce un pool di thread che può essere usato per eseguire attività, inviare elementi di lavoro, elaborare operazioni di I/O asincrone, attendere per conto di altri thread ed elaborare timer.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.">
        <see cref="T:System.IntPtr" /> che contiene l'handle. È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'handle è associato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">Associa un handle del sistema operativo al <see cref="T:System.Threading.ThreadPool" />.</summary>
      <param name="osHandle" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeHandle&quot; /&gt; that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.">Oggetto <see cref="T:System.Runtime.InteropServices.SafeHandle" /> che contiene l'handle del sistema operativo. È necessario che l'handle sia stato aperto per operazioni di I/O sovrapposte nella parte non gestita.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;osHandle&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="osHandle" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'handle è associato; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the difference between the maximum number of thread pool threads returned by the &lt;see cref=&quot;M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)&quot; /&gt; method, and the number currently active.">Recupera la differenza tra il numero massimo di thread del pool di thread restituito dal metodo <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> e il numero attualmente attivo.</summary>
      <param name="workerThreads" vsli:raw="The number of available worker threads.">Numero di thread di lavoro disponibili.</param>
      <param name="completionPortThreads" vsli:raw="The number of available asynchronous I/O threads.">Numero di thread I/O asincroni disponibili.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">Recupera il numero di richieste al pool di thread che possono essere attive contemporaneamente. Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">Numero massimo di thread di lavoro nel pool di thread.</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">Numero massimo di thread I/O asincroni nel pool di thread.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">Recupera il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</summary>
      <param name="workerThreads" vsli:raw="When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.">Quando il metodo viene restituito, contiene il numero minimo di thread di lavoro che il pool di thread crea su richiesta.</param>
      <param name="completionPortThreads" vsli:raw="When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.">Quando il metodo viene restituito, contiene il numero minimo di thread I/O asincroni che il pool di thread crea su richiesta.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary vsli:raw="Queues a method for execution. The method executes when a thread pool thread becomes available.">Accoda un metodo da eseguire. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the method to be executed.">Oggetto <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">Accoda un metodo da eseguire e specifica un oggetto che contiene i dati che dovranno essere usati dal metodo. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; representing the method to execute.">
        <see cref="T:System.Threading.WaitCallback" /> che rappresenta il metodo da eseguire.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">Oggetto contenente i dati che devono essere usati dal metodo.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">Common Language Runtime (CLR) è ospitato e l'host non supporta questa azione.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and provides data to be used by the method. The method executes when a thread pool thread becomes available.">Accoda un metodo specificato da un delegato <see cref="T:System.Action`1" /> per l'esecuzione e fornisce i dati che devono essere usati dal metodo. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack" vsli:raw="An &lt;see cref=&quot;T:System.Action`1&quot; /&gt; representing the method to execute.">
        <see cref="T:System.Action`1" /> che rappresenta il metodo da eseguire.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">Oggetto contenente i dati che devono essere usati dal metodo.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> per preferire l'accodamento dell'elemento di lavoro in una coda vicino al thread corrente; <see langword="false" /> per preferire l'accodamento dell'elemento di lavoro nella coda condivisa del pool di thread.</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">Tipo degli elementi di <paramref name="state" />.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 32 bit per il timeout in millisecondi.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 64 bit per il timeout in millisecondi.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore <see cref="T:System.TimeSpan" /> per il timeout.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">Il timeout rappresentato da un valore <see cref="T:System.TimeSpan" />. Se <paramref name="timeout" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="timeout" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="timeout" /> è minore di -1.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Il parametro <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">
        <see cref="T:System.Threading.RegisteredWaitHandle" /> che incapsula l'handle nativo.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un intero senza segno a 32 bit per il timeout in millisecondi.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato <see cref="T:System.Threading.WaitOrTimerCallback" /> da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that can be used to cancel the registered wait operation.">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">Imposta il numero di richieste al pool di thread che possono essere attivate contemporaneamente. Tutte le richieste al di fuori di tale numero rimangono in coda fino a quando non diventano disponibili thread di pool di thread.</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">Numero massimo di thread di lavoro nel pool di thread.</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">Numero massimo di thread I/O asincroni nel pool di thread.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la modifica ha esito positivo; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">Imposta il numero minimo di thread che il pool di thread crea, man mano che vengono effettuate nuove richieste, prima di passare a un algoritmo per la gestione della creazione e dell'eliminazione del thread.</summary>
      <param name="workerThreads" vsli:raw="The minimum number of worker threads that the thread pool creates on demand.">Il numero minimo di thread di lavoro che vengono creati su richiesta dal pool di thread.</param>
      <param name="completionPortThreads" vsli:raw="The minimum number of asynchronous I/O threads that the thread pool creates on demand.">Il numero minimo di thread I/O asincroni che vengono creati su richiesta dal pool di thread.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se la modifica ha esito positivo; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary vsli:raw="Queues an overlapped I/O operation for execution.">Accoda un'operazione di I/O sovrapposta per l'esecuzione.</summary>
      <param name="overlapped" vsli:raw="The &lt;see cref=&quot;T:System.Threading.NativeOverlapped&quot; /&gt; structure to queue.">Struttura <see cref="T:System.Threading.NativeOverlapped" /> da accodare.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation was successfully queued to an I/O completion port; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se l'accodamento dell'operazione a una porta di completamento di I/O è stato eseguito correttamente; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary vsli:raw="Queues the specified work item object to the thread pool.">Accoda l'oggetto elemento di lavoro specificato nel pool di thread.</summary>
      <param name="callBack" vsli:raw="The work item to invoke when a thread in the thread pool picks up the work item.">Elemento di lavoro da richiamare quando un thread nel pool di thread preleva l'elemento di lavoro.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> per preferire l'accodamento dell'elemento di lavoro in una coda vicino al thread corrente; <see langword="false" /> per preferire l'accodamento dell'elemento di lavoro nella coda condivisa del pool di thread.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The work item is a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt;.">L'elemento di lavoro è un <see cref="T:System.Threading.Tasks.Task" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">Non è stato possibile accodare l'elemento di lavoro.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> se il metodo viene eseguito correttamente. Viene generata l'eccezione <see cref="T:System.OutOfMemoryException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.">Accoda il delegato specificato al pool di thread, ma non propaga lo stack di chiamata nel thread di lavoro.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the delegate to invoke when a thread in the thread pool picks up the work item.">Oggetto <see cref="T:System.Threading.WaitCallback" /> che rappresenta il delegato da richiamare quando un thread nel pool di thread sceglie l'elemento di lavoro.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate when serviced from the thread pool.">Oggetto passato al delegato quando viene servito dal pool di thread.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <exception cref="T:System.ApplicationException" vsli:raw="An out-of-memory condition was encountered.">È stata rilevata una condizione di memoria insufficiente.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">Non è stato possibile accodare l'elemento di lavoro.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> se il metodo viene eseguito correttamente. Viene generata l'eccezione <see cref="T:System.OutOfMemoryException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">Accoda un metodo specificato da un delegato <see cref="T:System.Action`1" /> per l'esecuzione e specifica un oggetto che contiene i dati che dovranno essere usati dal metodo. Il metodo viene eseguito quando un thread del pool di thread diventa disponibile.</summary>
      <param name="callBack" vsli:raw="A delegate representing the method to execute.">Delegato che rappresenta il metodo da eseguire.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">Oggetto contenente i dati che devono essere usati dal metodo.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">
        <see langword="true" /> per preferire l'accodamento dell'elemento di lavoro in una coda vicino al thread corrente; <see langword="false" /> per preferire l'accodamento dell'elemento di lavoro nella coda condivisa del pool di thread.</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">Tipo degli elementi di <paramref name="state" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> costruito in modo predefinito è <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The work item could not be queued.">Non è stato possibile accodare l'elemento di lavoro.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">
        <see langword="true" /> se il metodo viene accodato correttamente. Viene generata l'eccezione <see cref="T:System.NotSupportedException" /> se non è stato possibile accodare l'elemento di lavoro.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, using a 32-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">Registra un delegato per l'attesa di un <see cref="T:System.Threading.WaitHandle" />, specificando un intero con segno a 32 bit per il timeout in millisecondi. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore intero con segno a 64 bit per il timeout in millisecondi. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="millisecondsTimeOutInterval" /> è minore di -1.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out. This method does not propagate the calling stack to the worker thread.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un valore <see cref="T:System.TimeSpan" /> per il timeout. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">Il timeout rappresentato da un valore <see cref="T:System.TimeSpan" />. Se <paramref name="timeout" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="timeout" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">Il parametro <paramref name="timeout" /> è minore di -1.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">Il parametro <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">Registra un delegato per l'attesa di un oggetto <see cref="T:System.Threading.WaitHandle" />, specificando un intero senza segno a 32 bit per il timeout in millisecondi. Questo metodo non propaga lo stack di chiamate al thread di lavoro.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">
        <see cref="T:System.Threading.WaitHandle" /> da registrare. Usare una classe <see cref="T:System.Threading.WaitHandle" /> diversa da <see cref="T:System.Threading.Mutex" />.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">Delegato da chiamare quando il parametro <paramref name="waitObject" /> riceve un segnale.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">Oggetto passato al delegato.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">Timeout in millisecondi. Se il parametro <paramref name="millisecondsTimeOutInterval" /> è pari a 0 (zero), la funzione verifica lo stato dell'oggetto e restituisce immediatamente un valore. Se <paramref name="millisecondsTimeOutInterval" /> è -1, l'intervallo di timeout della funzione non termina mai.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">Viene restituito <see langword="true" /> per indicare che il thread non attenderà più in base al parametro <paramref name="waitObject" /> dopo la chiamata al delegato; <see langword="false" /> per indicare che il timer viene reimpostato ogni volta che l'operazione di attesa viene completata fino all'annullamento della registrazione dell'attesa.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Il chiamante non dispone dell'autorizzazione richiesta.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">Oggetto <see cref="T:System.Threading.RegisteredWaitHandle" /> che può essere usato per annullare l'operazione di attesa registrata.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary vsli:raw="Gets the number of work items that have been processed so far.">Ottiene il numero di elementi di lavoro che sono stati elaborati fino a questo momento.</summary>
      <returns vsli:raw="The number of work items that have been processed so far.">Numero di elementi di lavoro elaborati fino a questo momento.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary vsli:raw="Gets the number of work items that are currently queued to be processed.">Ottiene il numero di elementi di lavoro attualmente in attesa di elaborazione.</summary>
      <returns vsli:raw="The number of work items that are currently queued to be processed.">Numero di elementi di lavoro attualmente in coda per l'elaborazione.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary vsli:raw="Gets the number of thread pool threads that currently exist.">Ottiene il numero di thread del pool di thread attualmente esistenti.</summary>
      <returns vsli:raw="The number of thread pool threads that currently exist.">Numero di thread del pool di thread attualmente esistenti.</returns>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary vsli:raw="Represents a callback method to be executed by a thread pool thread.">Rappresenta un metodo di callback che deve essere eseguito da un thread del pool di thread.</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method.">Oggetto contenente informazioni che devono essere usate dal metodo di callback.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary vsli:raw="Represents a method to be called when a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; is signaled or times out.">Rappresenta un metodo da chiamare quando <see cref="T:System.Threading.WaitHandle" /> riceve un segnale o esegue il timeout.</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method each time it executes.">Oggetto contenente informazioni che devono essere utilizzate dal metodo di callback ogni volta che viene eseguito.</param>
      <param name="timedOut" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; timed out; &lt;see langword=&quot;false&quot; /&gt; if it was signaled.">Il valore è <see langword="true" /> se <see cref="T:System.Threading.WaitHandle" /> ha eseguito il timeout; è <see langword="false" /> se ha ricevuto un segnale.</param>
    </member>
  </members>
</doc>
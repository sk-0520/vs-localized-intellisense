<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary>Fornisce un blocco del flusso di dati che richiama un delegato fornito da <see cref="T:System.Action`1" /> per ogni elemento dati ricevuto.</summary>
      <typeparam name="TInput">Tipo di dati su cui opera questo oggetto <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con l'azione specificata.</summary>
      <param name="action">L'azione da richiamare con ogni elemento dati ricevuto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con l'azione e le azioni di configurazione specificate.</summary>
      <param name="action">L'azione da richiamare con ogni elemento dati ricevuto.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con l'azione specificata.</summary>
      <param name="action">L'azione da richiamare con ogni elemento dati ricevuto.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inizializza una nuova istanza della classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> con l'azione e le azioni di configurazione specificate.</summary>
      <param name="action">L'azione da richiamare con ogni elemento dati ricevuto.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary>Segnala al blocco del flusso di dati che non deve accettare o produrre altri messaggi e non deve usare altri messaggi posposti.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary>Inserisce un elemento nel blocco di flusso di dati di destinazione.</summary>
      <param name="item">L'elemento che viene offerto alla destinazione.</param>
      <returns>
        <see langword="true" /> se l'elemento è inserito nel blocco del flusso di dati; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina che il blocco del flusso di dati venga completato in uno stato di errore.</summary>
      <param name="exception">Eccezione che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al blocco di flusso di dati e fornisce la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Intestazione del messaggio offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">Il blocco del flusso di dati che sta offrendo il messaggio. Può assumere il valore <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> per indicare alla destinazione di chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio; in caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere <see langword="true" /> solo se specificato con un parametro <paramref name="source" /> non Null.</exception>
      <returns>Stato del messaggio offerto.  Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione non ha potuto posticipare il messaggio perché l'origine era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary>Ottiene un oggetto <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività completata.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary>Ottiene il numero di elementi di input in attesa di essere elaborati da questo blocco.</summary>
      <returns>Numero di elementi di input in attesa di essere elaborati da questo blocco.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary>Fornisce un blocco del flusso di dati che raggruppa in matrici gli input.</summary>
      <typeparam name="T">Specifica il tipo di dati inseriti in batch.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> con le dimensione del batch specificate.</summary>
      <param name="batchSize">Il numero di elementi da raggruppare in un batch.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore <paramref name="batchSize" /> deve essere positivo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inizializza una nuova classe <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> con le dimensioni del batch, l'opzione di rifiuto e le opzioni di blocco specificate.</summary>
      <param name="batchSize">Il numero di elementi da raggruppare in un batch.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore <paramref name="batchSize" /> deve essere positivo.  
  
-oppure- 
<paramref name="batchSize" /> deve essere minore del valore dell'opzione <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> se un valore non predefinito è stato impostato.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a cui connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" />che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary>Chiamato da un elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e usare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> offerto in precedenza da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve utilizzare il valore restituito al posto del valore passato come messageValue fino a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
se il messaggio richiesto non è disponibile, il valore restituito sarà <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per conservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere valore Null.</param>
      <param name="consumeToAccept">Impostare su <see langword="true" /> per indicare alla destinazione di chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere true solo se viene specificato con un elemento <paramref name="source" /> diverso da Null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione avesse posticipato il messaggio ma <paramref name="source" /> era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary>Attiva <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> per avviare un'operazione di suddivisione in batch anche se il numero di elementi attualmente in coda o posticipati è minore di <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il predicato che un valore che passare correttamente affinché venga ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary>Ottiene la dimensione dei batch generati da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
      <returns>Dimensione del batch.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary>Fornisce un blocco di flusso di dati che raggruppa in batch un numero specificato di input di tipi potenzialmente diversi forniti a una o più destinazioni.</summary>
      <typeparam name="T1">Specifica il tipo di dati accettati dalla prima destinazione del blocco.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati accettati dalla seconda destinazione del blocco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> con la configurazione specificata.</summary>
      <param name="batchSize">Il numero di elementi da raggruppare in un batch.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore <paramref name="batchSize" /> deve essere positivo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> con la configurazione specificata.</summary>
      <param name="batchSize">Il numero di elementi da raggruppare in un batch.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="batchSize" /> è minore di 1.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> nel quale connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" />(Nothing in Visual Basic) o <paramref name="linkOptions" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" />che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <summary>Passa la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da utilizzare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere utilizzato il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato utilizzato correttamente. In caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a questo metodo. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve usare il valore restituito al posto del valore passato come <paramref name="messageValue" /> a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />. Se il messaggio richiesto non è disponibile, il valore restituito è <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary>Rilascia il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che attualmente contiene la prenotazione.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary>Riserva il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da prenotare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere prenotato il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il predicato che un valore che passare correttamente affinché venga ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary>Ottiene la dimensione dei batch generati da questo <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</summary>
      <returns>Dimensione del batch.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del primo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del secondo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary>Fornisce un blocco di flusso di dati che raggruppa in batch un numero specificato di input di tipi potenzialmente diversi forniti a una o più destinazioni.</summary>
      <typeparam name="T1">Specifica il tipo di dati accettati dalla prima destinazione del blocco.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati accettati dalla seconda destinazione del blocco.</typeparam>
      <typeparam name="T3">Specifica il tipo di dati accettati dalla terza destinazione del blocco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> con la configurazione specificata.</summary>
      <param name="batchSize">Il numero di elementi da raggruppare in un batch.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore <paramref name="batchSize" /> deve essere positivo.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> con la configurazione specificata.</summary>
      <param name="batchSize">Il numero di elementi da raggruppare in un batch.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questo elemento <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Il valore <paramref name="batchSize" /> deve essere positivo.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a cui connettere questa origine.</param>
      <param name="linkOptions">
        <see langword="true" /> se l'origine deve essere scollegata dalla destinazione dopo la corretta propagazione di un singolo messaggio; <see langword="false" /> per mantenere la connessione anche dopo la propagazione di un singolo messaggio.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" />(Nothing in Visual Basic) o <paramref name="linkOptions" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" />che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <summary>Passa la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da utilizzare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere utilizzato il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato utilizzato correttamente. In caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a questo metodo. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve usare il valore restituito al posto del valore passato come <paramref name="messageValue" /> a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />. Se il messaggio richiesto non è disponibile, il valore restituito è <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary>Rilascia il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che attualmente contiene la prenotazione.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary>Riserva il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da prenotare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere prenotato il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il predicato che un valore che passare correttamente affinché venga ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary>Ottiene la dimensione dei batch generati da questo <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />.</summary>
      <returns>Dimensione del batch.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del primo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del secondo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del terzo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary>Fornisce un buffer per l'archiviazione di al massimo un elemento per volta, sovrascrivendo ogni messaggio all'arrivo del successivo.</summary>
      <typeparam name="T">Specifica il tipo di dati memorizzati nel buffer da questo blocco del flusso di dati.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Inizializza l'oggetto <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> con la funzione di duplicazione specificata.</summary>
      <param name="cloningFunction">La funzione da utilizzare per duplicare i dati quando vengono offerti ad altri blocchi.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Inizializza l'elemento <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> con la funzione di duplicazione specificata e <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
      <param name="cloningFunction">La funzione da utilizzare per duplicare i dati quando vengono offerti ad altri blocchi.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questo elemento <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> nel quale connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> in uno stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> .</summary>
      <param name="exception">L'oggetto <see cref="T:System.Exception" /> che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e utilizzare <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve utilizzare il valore restituito al posto del valore passato come <paramref name="messageValue" /> con <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
se il messaggio richiesto non è disponibile, il valore restituito sarà <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per conservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere valore Null.</param>
      <param name="consumeToAccept">Impostare su <see langword="true" /> per indicare alla destinazione di chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere true solo se viene specificato con un elemento <paramref name="source" /> diverso da Null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione avesse posticipato il messaggio ma <paramref name="source" /> era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il predicato che un valore che passare correttamente affinché venga ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary>Fornisce un buffer per l'archiviazione dei dati per un Dataflow.</summary>
      <typeparam name="T">Specifica il tipo di dati memorizzati nel buffer da questo blocco del flusso di dati.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Inizializza un nuovo elemento <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> con l'elemento <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> specificato.</summary>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questo elemento <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> nel quale connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento dell'elemento <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">L'oggetto <see cref="T:System.Exception" /> che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e utilizzare <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve utilizzare il valore restituito al posto del valore passato come <paramref name="messageValue" /> con <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
se il messaggio richiesto non è disponibile, il valore restituito sarà <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per conservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere il valore <see langword="null" />.</param>
      <param name="consumeToAccept">Impostare su true per indicare alla destinazione di chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere true solo se viene specificato con un elemento <paramref name="source" /> diverso da Null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione avesse posticipato il messaggio ma <paramref name="source" /> era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto. <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary>Ottiene il numero di elementi attualmente memorizzati nel buffer.</summary>
      <returns>Numero di elementi.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary>Fornisce un set di metodi statici (Shared in Visual Basic) per l'utilizzo di blocchi di flusso di dati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Crea una nuova astrazione <see cref="T:System.IObservable`1" /> rispetto a <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">Origine di cui eseguire il wrapping.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source" /> è <see langword="null" />.</exception>
      <returns>
        <see cref="T:System.IObservable`1" /> che consente agli osservatori di essere sottoscritti all'origine.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Crea una nuova astrazione <see cref="T:System.IObserver`1" /> rispetto a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">Destinazione su cui eseguire il wrapping.</param>
      <typeparam name="TInput">Specifica il tipo di input accettato dal blocco di destinazione.</typeparam>
      <returns>Un osservatore che esegue l'incapsulamento del blocco di destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary>Controlla due origini del flusso di dati, richiamando il gestore fornito per qualsiasi origine che per prima rende disponibili i dati.</summary>
      <param name="source1">Prima origine.</param>
      <param name="action1">Il gestore da eseguire sui dati dalla prima origine.</param>
      <param name="source2">Seconda origine.</param>
      <param name="action2">Il gestore da eseguire sui dati dalla seconda origine.</param>
      <typeparam name="T1">Specifica il tipo di dati contenuti nella prima origine.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati contenuti nella seconda origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="source2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action2" /> è <see langword="null" />.</exception>
      <returns>Elemento <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta la scelta asincrona. Se entrambe le origini vengono completate prima del completamento della scelta, l'attività risultante verrà annullata. Quando una delle origini dispone di dati disponibili e li propaga correttamente, l'attività risultante verrà completata al momento del completamento del gestore, se questo genera un'eccezione, l'attività termina nello stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterrà un'eccezione non gestita. In caso contrario, l'attività termina con la proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> impostata su 0 o 1 per rappresentare la prima o la seconda origine, rispettivamente.  
  
Questo metodo utilizzerà sempre solo un elemento da una delle due origini dati.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Controlla due origini del flusso di dati, richiamando il gestore fornito per qualsiasi origine che per prima rende disponibili i dati.</summary>
      <param name="source1">Prima origine.</param>
      <param name="action1">Il gestore da eseguire sui dati dalla prima origine.</param>
      <param name="source2">Seconda origine.</param>
      <param name="action2">Il gestore da eseguire sui dati dalla seconda origine.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa scelta.</param>
      <typeparam name="T1">Specifica il tipo di dati contenuti nella prima origine.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati contenuti nella seconda origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="source2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
      <returns>Elemento <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta la scelta asincrona. Se entrambe le origini vengono completate prima del completamento della scelta, o se <see cref="T:System.Threading.CancellationToken" /> fornito come parte di <paramref name="dataflowBlockOptions" /> viene annullato prima del completamento della scelta, l'attività risultante verrà annullata. Quando una delle origini dispone di dati disponibili e li propaga correttamente, l'attività risultante verrà completata al momento del completamento del gestore, se questo genera un'eccezione, l'attività termina nello stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterrà un'eccezione non gestita. In caso contrario, l'attività termina con la proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> impostata su 0 o 1 per rappresentare la prima o la seconda origine, rispettivamente.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary>Controlla tre origini del flusso di dati, richiamando il gestore fornito per qualsiasi origine che per prima rende disponibili i dati.</summary>
      <param name="source1">Prima origine.</param>
      <param name="action1">Il gestore da eseguire sui dati dalla prima origine.</param>
      <param name="source2">Seconda origine.</param>
      <param name="action2">Il gestore da eseguire sui dati dalla seconda origine.</param>
      <param name="source3">Terza origine.</param>
      <param name="action3">Il gestore da eseguire sui dati dalla terza origine.</param>
      <typeparam name="T1">Specifica il tipo di dati contenuti nella prima origine.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati contenuti nella seconda origine.</typeparam>
      <typeparam name="T3">Specifica il tipo di dati contenuti nella terza origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="source2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="source3" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action3" /> è <see langword="null" />.</exception>
      <returns>Elemento <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta la scelta asincrona. Se tutte le origini vengono completate prima del completamento della scelta, l'attività risultante verrà annullata. Quando una delle origini dispone di dati disponibili e li propaga correttamente, l'attività risultante verrà completata al momento del completamento del gestore, se questo genera un'eccezione, l'attività termina nello stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterrà un'eccezione non gestita. In caso contrario, l'attività termina con la proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> impostata sull'indice in base 0 dell'origine.  
  
Questo metodo utilizzerà sempre solo un elemento da una delle origini dati.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Controlla tre origini del flusso di dati, richiamando il gestore fornito per qualsiasi origine che per prima rende disponibili i dati.</summary>
      <param name="source1">Prima origine.</param>
      <param name="action1">Il gestore da eseguire sui dati dalla prima origine.</param>
      <param name="source2">Seconda origine.</param>
      <param name="action2">Il gestore da eseguire sui dati dalla seconda origine.</param>
      <param name="source3">Terza origine.</param>
      <param name="action3">Il gestore da eseguire sui dati dalla terza origine.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa scelta.</param>
      <typeparam name="T1">Specifica il tipo di dati contenuti nella prima origine.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati contenuti nella seconda origine.</typeparam>
      <typeparam name="T3">Specifica il tipo di dati contenuti nella terza origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action1" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="source2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action2" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="source3" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="action3" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
      <returns>Elemento <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta la scelta asincrona. Se tutte le origini vengono completate prima del completamento della scelta, o se <see cref="T:System.Threading.CancellationToken" /> fornito come parte di <paramref name="dataflowBlockOptions" /> viene annullato prima del completamento della scelta, l'attività risultante verrà annullata. Quando una delle origini dispone di dati disponibili e li propaga correttamente, l'attività risultante verrà completata al momento del completamento del gestore, se questo genera un'eccezione, l'attività termina nello stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> e conterrà un'eccezione non gestita. In caso contrario, l'attività termina con la proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> impostata sull'indice in base 0 dell'origine.  
  
Questo metodo utilizzerà sempre solo un elemento da una delle origini dati. Se viene richiesto l'annullamento dopo che un elemento è stato ricevuto, la richiesta di annullamento viene ignorata e il gestore può procedere con l'esecuzione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary>Incapsula una destinazione e un'origine in un unico propagatore.</summary>
      <param name="target">Destinazione da incapsulare.</param>
      <param name="source">Origine da incapsulare.</param>
      <typeparam name="TInput">Specifica il tipo di input previsto dal blocco di destinazione.</typeparam>
      <typeparam name="TOutput">Specifica il tipo di output prodotto dall'origine.</typeparam>
      <returns>Destinazione e origine incapsulate.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="source">Origine da cui effettuare il collegamento.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> nel quale connettere l'origine.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see cref="T:System.IDisposable" /> che, quando viene chiamato <see langword="Dispose" />, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato usando il filtro impostato.</summary>
      <param name="source">Origine da cui effettuare il collegamento.</param>
      <param name="target">Elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> al quale connettere l'origine.</param>
      <param name="predicate">Il filtro che un messaggio deve passare per propagarlo dall'origine alla destinazione.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="target" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="predicate" /> è <see langword="null" />.</exception>
      <returns>
        <see cref="T:System.IDisposable" /> che, quando viene chiamato <see langword="Dispose" />, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato usando il filtro impostato.</summary>
      <param name="source">Origine da cui effettuare il collegamento.</param>
      <param name="target">Elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> al quale connettere l'origine.</param>
      <param name="linkOptions">Uno dei valori di enumerazione che specifica come configurare un collegamento tra blocchi di flusso di dati.</param>
      <param name="predicate">Il filtro che un messaggio deve passare per propagarlo dall'origine alla destinazione.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è null (Nothing in Visual Basic).  
  
-oppure- 
<paramref name="target" /> è null (Nothing in Visual Basic).  
  
-oppure- 
<paramref name="linkOptions" /> è null (Nothing in Visual Basic).  
  
-oppure- 
<paramref name="predicate" /> è null (Nothing in Visual Basic).</exception>
      <returns>
        <see cref="T:System.IDisposable" /> che, quando viene chiamato <see langword="Dispose" />, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary>Ottiene un blocco di destinazione che accetta in modo sincrono tutti i messaggi offerti e li rilascia.</summary>
      <typeparam name="TInput">Tipo di messaggi che questo blocco può accettare.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che accetta e successivamente rilascia tutti i messaggi presenti.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Fornisce un oggetto <see cref="T:System.Threading.Tasks.Task`1" /> che monitora in modo asincrono l'origine per l'output disponibile.</summary>
      <param name="source">Origine da monitorare.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che informa se e quando è disponibile altro output. Se al completamento dell'attività la relativa proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> è <see langword="true" />, è disponibile più output nell'origine (anche se un altro utente dell'origine può recuperare i dati).  
  
Se restituisce <see langword="false" />, non è e non sarà mai disponibile più output, in quanto l'attività sull'origine è stata completata prima che l'output fosse disponibile.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Specifica un elemento <see cref="T:System.Threading.Tasks.Task`1" /> che monitora in modo asincrono l'origine per l'output disponibile.</summary>
      <param name="source">Origine da monitorare.</param>
      <param name="cancellationToken">Il token di annullamento con cui annullare l'operazione asincrona.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" /> che informa se e quando è disponibile altro output. Se al completamento dell'attività la relativa proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> è <see langword="true" />, è disponibile più output nell'origine (anche se un altro utente dell'origine può recuperare i dati). Se restituisce <see langword="false" />, non è e non sarà mai disponibile più output, in quanto l'attività sull'origine è stata completata prima che l'output fosse disponibile.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>Inserisce un elemento nell'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="target">Blocco di destinazione.</param>
      <param name="item">L'elemento che viene offerto alla destinazione.</param>
      <typeparam name="TInput">Specifica il tipo di dati accettati dal blocco di destinazione.</typeparam>
      <returns>
        <see langword="true" /> se l'elemento è stato accettato dal blocco di destinazione; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Riceve un valore in modo sincrono da un'origine specificata.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento può essere ricevuto dall'origine.</exception>
      <returns>Valore ricevuto.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Riceve in modo sincrono un valore da un'origine specificata e fornisce un token per annullare l'operazione.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <param name="cancellationToken">Token da utilizzare per annullare l'operazione di ricezione.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento può essere ricevuto dall'origine.</exception>
      <exception cref="T:System.OperationCanceledException">L'operazione è stata annullata prima che un elemento sia stato ricevuto dall'origine.</exception>
      <returns>Valore ricevuto.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Riceve in modo sincrono un valore da un'origine specificata, osservando un periodo di timeout facoltativo.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <param name="timeout">Intervallo di tempo massimo, in millisecondi, in cui attendere il completamento dell'operazione sincrona, o un intervallo che rappresenta -1 millisecondi di attesa indefinita.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito.  
  
-oppure- 
 <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento può essere ricevuto dall'origine.</exception>
      <exception cref="T:System.TimeoutException">Il timeout specificato è scaduto prima che un elemento venga ricevuto dall'origine.</exception>
      <returns>Valore ricevuto.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Riceve in modo sincrono un valore da un'origine specificata, fornendo un token per annullare l'operazione e osservando un intervallo di timeout facoltativo.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <param name="timeout">Intervallo di tempo massimo, in millisecondi, in cui attendere il completamento dell'operazione sincrona, o un intervallo che rappresenta -1 millisecondi di attesa indefinita.</param>
      <param name="cancellationToken">Token da utilizzare per annullare l'operazione di ricezione.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito.  
  
-oppure- 
 <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException">Nessun elemento può essere ricevuto dall'origine.</exception>
      <exception cref="T:System.TimeoutException">Il timeout specificato è scaduto prima che un elemento venga ricevuto dall'origine.</exception>
      <exception cref="T:System.OperationCanceledException">L'operazione è stata annullata prima che un elemento sia stato ricevuto dall'origine.</exception>
      <returns>Valore ricevuto.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary>Riceve un valore in modo asincrono da un'origine specificata.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <returns>Attività che rappresenta l'operazione di ricezione asincrona. Quando il valore di un elemento viene ricevuto correttamente dal database di origine, l'attività restituita viene completata e la relativa <see cref="P:System.Threading.Tasks.Task`1.Result" /> restituisce il valore ricevuto. Se un valore di elemento non può essere recuperato perché l'origine è vuota o completata, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> nell'attività restituita.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary>Riceve in modo asincrono un valore da un'origine specificata e fornisce un token per annullare l'operazione.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <param name="cancellationToken">Token da utilizzare per annullare l'operazione di ricezione.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <returns>Attività che rappresenta l'operazione di ricezione asincrona. Quando un valore viene ricevuto correttamente dal database di origine, l'attività restituita viene completata e la relativa <see cref="P:System.Threading.Tasks.Task`1.Result" /> restituisce il valore. Se un valore non può essere recuperato perché è stato richiesto l'annullamento, l'attività restituita viene annullata. Se il valore non può essere recuperato perché l'origine è vuota e completata, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> nell'attività restituita.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary>Riceve in modo asincrono un valore da un'origine specificata, osservando un periodo di timeout facoltativo.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <param name="timeout">Intervallo di tempo massimo, in millisecondi, in cui attendere il completamento dell'operazione sincrona, o un intervallo che rappresenta -1 millisecondi di attesa indefinita.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito.  
  
-oppure- 
 <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Attività che rappresenta l'operazione di ricezione asincrona. Quando un valore viene ricevuto correttamente dal database di origine, l'attività restituita viene completata e la relativa <see cref="P:System.Threading.Tasks.Task`1.Result" /> restituisce il valore. Se un valore non può essere recuperato perché il timeout è scaduto, l'attività restituita viene annullata. Se il valore non può essere recuperato perché l'origine è vuota e completata, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> nell'attività restituita.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary>Riceve in modo asincrono un valore da un'origine specificata, fornendo un token per annullare l'operazione e osservando un intervallo di timeout facoltativo.</summary>
      <param name="source">Origine dalla quale ricevere il valore.</param>
      <param name="timeout">Intervallo di tempo massimo, in millisecondi, in cui attendere il completamento dell'operazione sincrona, o un intervallo che rappresenta -1 millisecondi di attesa indefinita.</param>
      <param name="cancellationToken">Token che può essere utilizzato per annullare l'operazione di ricezione.</param>
      <typeparam name="TOutput">Tipo di dati contenuto nell’origine dati.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> è <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> è un numero negativo diverso da -1 millisecondi che rappresenta un timeout infinito.  
  
-oppure- 
 <paramref name="timeout" /> è maggiore di <see cref="F:System.Int32.MaxValue" />.</exception>
      <returns>Attività che rappresenta l'operazione di ricezione asincrona. Quando un valore viene ricevuto correttamente dal database di origine, l'attività restituita viene completata e la relativa <see cref="P:System.Threading.Tasks.Task`1.Result" /> restituisce il valore. Se un valore non può essere recuperato perché è scaduto il timeout o è stato richiesto l'annullamento, l'attività restituita viene annullata. Se il valore non può essere recuperato perché l'origine è vuota o completata, viene generata un'eccezione <see cref="T:System.InvalidOperationException" /> nell'attività restituita.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary>In modo asincrono offre un messaggio al blocco di messaggi di destinazione, consentendo il rinvio.</summary>
      <param name="target">Destinazione in cui inserire i dati.</param>
      <param name="item">L'elemento che viene offerto alla destinazione.</param>
      <typeparam name="TInput">Specifica il tipo di dati da inviare alla destinazione.</typeparam>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Oggetto <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta l'invio asincrono. Se la destinazione accetta e utilizza l'elemento fornito durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, in risposta alla chiamata l'oggetto <see cref="T:System.Threading.Tasks.Task`1" /> risultante viene completato e la relativa proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> restituisce <see langword="true" />. Se la destinazione rifiuta l'elemento fornito durante la chiamata, in risposta alla chiamata l'oggetto <see cref="T:System.Threading.Tasks.Task`1" /> risultante viene completato e la relativa proprietà <see cref="P:System.Threading.Tasks.Task`1.Result" /> restituisce <see langword="false" />. Se la destinazione posticipa l'elemento fornito, l'elemento verrà memorizzato nel buffer fino a quando la destinazione lo utilizzerà o lo rilascerà. A quel punto l'attività sarà completata e il relativo oggetto <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicherà che il messaggio è stato utilizzato. Se la destinazione non tenta di utilizzare o rilasciare il messaggio, l'attività restituita non sarà mai completata.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary>In modo asincrono offre un messaggio al blocco di messaggi di destinazione, consentendo il rinvio.</summary>
      <param name="target">Destinazione in cui inserire i dati.</param>
      <param name="item">L'elemento che viene offerto alla destinazione.</param>
      <param name="cancellationToken">Il token di annullamento con cui richiedere l'annullamento dell'operazione di invio.</param>
      <typeparam name="TInput">Specifica il tipo di dati da inviare alla destinazione.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è null (Nothing in Visual Basic).</exception>
      <returns>Oggetto <see cref="T:System.Threading.Tasks.Task`1" /> che rappresenta l'invio asincrono.  Se la destinazione accetta e usa l'elemento specificato durante la chiamata a SendAsync, in risposta alla chiamata l'oggetto <see cref="T:System.Threading.Tasks.Task`1" /> risultante viene completato e la relativa proprietà <c>Result</c> restituisce true.  Se la destinazione rifiuta l'elemento specificato durante la chiamata, in risposta alla chiamata l'elemento <see cref="T:System.Threading.Tasks.Task`1" /> risultante viene completato e la relativa proprietà <c>Result</c> restituisce false. Se la destinazione posticipa l'elemento specificato, l'elemento verrà memorizzato nel buffer fino a quando la destinazione lo userà o lo rilascerà. A quel punto l'attività sarà completata e il relativo elemento <c>Result</c> indicherà che il messaggio è stato usato. Se la destinazione non tenta di utilizzare o rilasciare il messaggio, l'attività restituita non sarà mai completata.  
  
Se viene richiesto l'annullamento prima che la destinazione abbia finito di utilizzare i dati inviati, l'attività restituita viene completata nello stato di annullamento e i dati e non sono più disponibili alla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary>Tenta di ricevere in modo sincrono un elemento da <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="source">Origine dalla quale ricevere.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <typeparam name="TOutput">Specifica il tipo di dati contenuti nell'origine.</typeparam>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary>Fornisce opzioni utilizzate per configurare l'elaborazione eseguita da blocchi del flusso di dati.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary>Costante usata per specificare una quantità illimitata per i membri <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> che definiscono un limite superiore. Questo campo è costante.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary>Ottiene o imposta il numero massimo di messaggi che possono essere memorizzati nel buffer dal blocco.</summary>
      <returns>Numero massimo di messaggi. L'impostazione predefinita è -1, che indica un numero illimitato di messaggi.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary>Ottiene o imposta l'elemento <see cref="T:System.Threading.CancellationToken" /> da monitorare per le richieste di annullamento.</summary>
      <returns>Il token.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary>Ottiene o imposta un valore che indica se l'elaborazione ordinata deve essere applicata alla gestione dei messaggi di un blocco.</summary>
      <returns>
        <see langword="true" /> Se è necessario applicare l'elaborazione ordinata; in caso contrario, <see langword="false" /> . Il valore predefinito è <see langword="true" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary>Ottiene o imposta il numero massimo di messaggi che è possibile elaborare per ogni attività.</summary>
      <returns>Numero massimo di messaggi. L'impostazione predefinita è -1, che indica un numero illimitato di messaggi.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary>Ottiene o imposta la stringa di formato da utilizzare quando sul blocco viene eseguita una query per il relativo nome.</summary>
      <returns>La stringa di formato da utilizzare quando sul blocco viene eseguita una query per il relativo nome.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary>Ottiene o imposta l’oggetto <see cref="T:System.Threading.Tasks.TaskScheduler" /> per le attività di pianificazione.</summary>
      <returns>Utilità di pianificazione.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary>Fornisce opzioni utilizzate per configurare un collegamento tra blocchi del flusso di dati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary>Inizializza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary>Ottiene o imposta se il collegamento deve essere accodato o anteposto nell'elenco di collegamenti dell'origine.</summary>
      <returns>Restituisce <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary>Ottiene o imposta il numero massimo di messaggi che è possibile utilizzare attraverso il collegamento.</summary>
      <returns>Restituisce <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary>Ottiene o imposta se la destinazione collegata riceverà automaticamente notifiche di completamento e di errore.</summary>
      <returns>Restituisce <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary>Fornisce un contenitore di attributi di dati per il passaggio tra blocchi del flusso di dati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary>Inizializza una nuova istanza di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> con gli attributi specificati.</summary>
      <param name="id">ID del messaggio. Deve essere univoco all'interno del blocco di origine da cui ha origine. Non deve necessariamente essere globalmente univoco.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary>Verifica le istanze <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> boxed per uguaglianza tramite ID.</summary>
      <param name="obj">Istanza con boxing <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>È <see langword="true" /> se le istanze sono uguali. In caso contrario è <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Verifica due istanze <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> per l'uguaglianza tramite ID senza eseguire il boxing.</summary>
      <param name="other">Un'altra istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>È <see langword="true" /> se le istanze sono uguali. In caso contrario è <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary>Genera un codice hash per l'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</summary>
      <returns>Codice hash.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Verifica due istanze <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> per l'uguaglianza tramite ID.</summary>
      <param name="left">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>È <see langword="true" /> se le istanze sono uguali. In caso contrario è <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary>Verifica due istanze <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> per la disuguaglianza tramite ID.</summary>
      <param name="left">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <param name="right">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />.</param>
      <returns>
        <see langword="true" /> se le istanze non sono uguali; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary>Ottiene l'ID del messaggio all'interno dell'origine.</summary>
      <returns>ID contenuto nell'istanza di  <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> .</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary>Ottiene la validità del messaggio.</summary>
      <returns>
        <see langword="true" /> se l'ID del messaggio è diverso da 0. <see langword="false" /> se l'ID del messaggio è 0.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary>Rappresenta lo stato di un oggetto <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> quando viene passato tra blocchi del flusso di dati.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary>Indica che l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ha accettato il messaggio. Quando un messaggio viene accettato da una destinazione, è interamente di proprietà della destinazione.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary>Indica che l'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ha rifiutato il messaggio. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> è ancora proprietario del messaggio.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary>Indica che l'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ha rifiutato il messaggio. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> è ancora proprietario del messaggio.  
  
Inoltre, <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> rifiuterà tutti i messaggi futuri inviati dall'origine.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary>Indica che l'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ha tentato di accettare il messaggio da <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />, ma il messaggio non era più disponibile.</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary>Indica che l'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> ha posticipato il messaggio e potenzialmente lo utilizzerà in un secondo momento.  
  
L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> è ancora proprietario del messaggio.</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary>Fornisce opzioni usate per configurare l'elaborazione eseguita da blocchi del flusso di dati che elaborano ogni messaggio tramite la chiamata di un delegato fornito dall'utente. Si tratta di blocchi di flussi di dati come <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> e <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary>Ottiene il numero massimo di messaggi che può essere elaborato simultaneamente dal blocco.</summary>
      <returns>Numero massimo di messaggi.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary>Indica se il codice che utilizza il blocco di flusso di dati è vincolato a un producer alla volta.</summary>
      <returns>Restituisce <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary>Fornisce opzioni usate per configurare l'elaborazione eseguita da blocchi del flusso di dati che raggruppano più messaggi. Si tratta di blocchi di flussi di dati come <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> e <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />.</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary>Ottiene o imposta il valore booleano da utilizzare per determinare se usare in modo greedy i messaggi offerti.</summary>
      <returns>
        <see langword="true" /> per utilizzare i messaggi offerti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary>Ottiene o imposta il numero massimo di gruppi che devono essere generati dal blocco.</summary>
      <returns>Numero massimo di gruppi.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary>Rappresenta un blocco del flusso di dati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">L'oggetto <see cref="T:System.Exception" /> che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary>Ottiene un oggetto <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary>Rappresenta un blocco del flusso di dati che rappresenta sia la destinazione sia l'origine dei dati.</summary>
      <typeparam name="TInput">Specifica il tipo di dati accettati da  <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" /> .</typeparam>
      <typeparam name="TOutput">Specifica il tipo di dati forniti da  <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" /> .</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary>Rappresenta un blocco del flusso di dati che supporta la ricezione di messaggi senza collegamento.</summary>
      <typeparam name="TOutput">Specifica il tipo di dati forniti da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary>Rappresenta un blocco del flusso di dati che è un'origine dati.</summary>
      <typeparam name="TOutput">Specifica il tipo di dati forniti da  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> .</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e utilizzare <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'oggetto messageHeader non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">La destinazione è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve utilizzare il valore restituito al posto del valore passato come <paramref name="messageValue" /> con <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
Se il messaggio richiesto non è disponibile, il valore restituito sarà Null.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a cui connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per conservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary>Rappresenta un blocco del flusso di dati che è una destinazione per i dati.</summary>
      <typeparam name="TInput">Specifica il tipo di dati accettati da <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere valore Null.</param>
      <param name="consumeToAccept">Impostare su <see langword="true" /> per indicare alla destinazione di chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere true solo se viene specificato con un elemento <paramref name="source" /> diverso da Null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione ha posticipato il messaggio in un altro modo, ma l'origine era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary>Specifica un blocco del flusso di dati che esegue il join in più origini del flusso di dati, non necessariamente dello stesso tipo, in attesa dell'arrivo di un elemento per ogni tipo, prima che tutti vengano rilasciati insieme come una tupla costituita da un elemento per tipo.</summary>
      <typeparam name="T1">Specifica il tipo di dati accettati dalla prima destinazione del blocco.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati accettati dalla seconda destinazione del blocco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</summary>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" />(Nothing in Visual Basic) o <paramref name="linkOptions" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> in uno stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> .</summary>
      <param name="exception">L'oggetto <see cref="T:System.Exception" /> che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <summary>Passa la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da utilizzare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere utilizzato il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato utilizzato correttamente. In caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a questo metodo. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve usare il valore restituito al posto del valore passato come <paramref name="messageValue" /> a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />. Se il messaggio richiesto non è disponibile, il valore restituito è <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary>Rilascia il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che attualmente contiene la prenotazione.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary>Riserva il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da prenotare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere prenotato il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del primo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del secondo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary>Specifica un blocco del flusso di dati che esegue il join in più origini del flusso di dati, non necessariamente dello stesso tipo, in attesa dell'arrivo di un elemento per ogni tipo, prima che tutti vengano rilasciati insieme come una tupla che contiene un elemento per tipo.</summary>
      <typeparam name="T1">Specifica il tipo di dati accettati dalla prima destinazione del blocco.</typeparam>
      <typeparam name="T2">Specifica il tipo di dati accettati dalla seconda destinazione del blocco.</typeparam>
      <typeparam name="T3">Specifica il tipo di dati accettati dalla terza destinazione del blocco.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />.</summary>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega il blocco di origine al blocco di destinazione specificato.</summary>
      <param name="target">Blocco di destinazione a cui connettere questa origine.</param>
      <param name="linkOptions">Oggetto che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" />.  
  
-oppure- 
 <paramref name="linkOptions" /> è <see langword="null" />.</exception>
      <returns>Oggetto Disposable che consente di scollegare l'origine dalla destinazione quando viene chiamato il relativo metodo <see cref="M:System.IDisposable.Dispose" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">L'oggetto <see cref="T:System.Exception" /> che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <summary>Passa la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da utilizzare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere utilizzato il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato utilizzato correttamente. In caso contrario, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a questo metodo. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve usare il valore restituito al posto del valore passato come <paramref name="messageValue" /> a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />. Se il messaggio richiesto non è disponibile, il valore restituito è <see langword="null" /> (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary>Rilascia il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che attualmente contiene la prenotazione.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary>Riserva il diritto di passare la proprietà del messaggio identificato da <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> da questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio da prenotare.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> per cui deve essere prenotato il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è <see langword="null" /> (Nothing in Visual Basic).</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del primo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del secondo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary>Ottiene una destinazione che può essere utilizzata per offrire messaggi del terzo tipo.</summary>
      <returns>Destinazione.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary>Fornisce un blocco del flusso di dati che richiama un delegato fornito da <see cref="T:System.Func`2" /> per ogni elemento dati ricevuto.</summary>
      <typeparam name="TInput">Specifica il tipo di dati ricevuti ed elaborati da <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</typeparam>
      <typeparam name="TOutput">Specifica il tipo di output di dati di questo oggetto  <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> .</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary>Inizializza un nuovo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> con l'elemento <see cref="T:System.Func`2" /> specificato.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inizializza un nuovo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> con gli elementi <see cref="T:System.Func`2" /> e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> specificati.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> con il <see cref="T:System.Func`2" /> specificato.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inizializza un nuovo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> con gli elementi <see cref="T:System.Func`2" /> e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> specificati.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a cui connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" />che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e utilizzare <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve utilizzare il valore restituito al posto del valore passato come <paramref name="messageValue" /> con <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
se il messaggio richiesto non è disponibile, il valore restituito sarà <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chiamato da un elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chiamato da un elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per riservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> offerto in precedenza da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere il valore <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> se la destinazione deve chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere true solo se viene specificato con un elemento <paramref name="source" /> diverso da Null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione avesse posticipato diversamente l'elemento ma l'origine era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary>Ottiene il numero di elementi di input in attesa di essere elaborati da questo blocco.</summary>
      <returns>Numero di elementi di input.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary>Fornisce un blocco del flusso di dati che richiama un delegato fornito da <see cref="T:System.Func`2" /> per ogni elemento dati ricevuto.</summary>
      <typeparam name="TInput">Specifica il tipo di dati ricevuti ed elaborati da <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
      <typeparam name="TOutput">Specifica il tipo di output di dati generato da <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> con la funzione specificata.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto. Tutti i dati dal <see cref="T:System.Collections.Generic.IEnumerable`1" /> restituito verranno resi disponibili come output da questo <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> con la funzione e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> specificati.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto. Tutti i dati restituiti in <see cref="T:System.Collections.Generic.IEnumerable`1" /> verranno resi disponibili come output da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> con la funzione specificata.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto. Tutti i dati restituiti in modo asincrono in <see cref="T:System.Collections.Generic.IEnumerable`1" /> verranno resi disponibili come output da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> con la funzione e <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> specificati.</summary>
      <param name="transform">La funzione da richiamare con ogni elemento dati ricevuto. Tutti i dati restituiti in modo asincrono in <see cref="T:System.Collections.Generic.IEnumerable`1" /> verranno resi disponibili come output da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="transform" /> è <see langword="null" />.  
  
-oppure- 
L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a cui connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> nello stato <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" />.</summary>
      <param name="exception">
        <see cref="T:System.Exception" />che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e utilizzare <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> di consumo deve utilizzare il valore restituito anziché il valore passato come <paramref name="messageValue" /> attraverso OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />  
  
se il messaggio richiesto non è disponibile, il valore restituito sarà <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary>Chiamato da un elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per riservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> offerto in precedenza da questo elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere il valore <see langword="null" />.</param>
      <param name="consumeToAccept">
        <see langword="true" /> se la destinazione deve chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
-oppure- 
 <paramref name="consumeToAccept" /> può essere true se viene fornito con un <paramref name="source" /> parametro diverso da null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio inviato, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione avesse posticipato diversamente l'elemento ma l'origine era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary>Ottiene il numero di elementi di input in attesa di essere elaborati da questo blocco.</summary>
      <returns>Numero di elementi di input.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary>Ottiene il numero di elemento di output disponibili alla ricezione da questo blocco.</summary>
      <returns>Numero di elementi di output.</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary>Fornisce un buffer per la ricezione e l'archiviazione di al massimo un elemento in una rete di blocchi del flusso di dati.</summary>
      <typeparam name="T">Specifica il tipo di dati memorizzati nel buffer da questo blocco del flusso di dati.</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary>Inizializza un nuovo oggetto <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</summary>
      <param name="cloningFunction">La funzione da utilizzare per duplicare i dati quando vengono offerti ad altri blocchi.</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary>Inizializza un nuovo elemento <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" /> con l'elemento <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> specificato.</summary>
      <param name="cloningFunction">La funzione da utilizzare per duplicare i dati quando vengono offerti ad altri blocchi.</param>
      <param name="dataflowBlockOptions">Opzioni con cui configurare questa classe <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="dataflowBlockOptions" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary>Segnala al <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> che non deve accettare o produrre altri messaggi e non deve utilizzare altri messaggi posticipati.</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary>Collega l'elemento <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> all'elemento <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> specificato.</summary>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> a cui connettere questa origine.</param>
      <param name="linkOptions">Istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> che configura il collegamento.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> è Null (Nothing in Visual Basic) o <paramref name="linkOptions" /> è Null (Nothing in Visual Basic).</exception>
      <returns>IDisposable, che quando viene chiamato Dispose, scollegherà l'origine dalla destinazione.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary>Determina il completamento di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> in uno stato di <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> .</summary>
      <param name="exception">L'oggetto <see cref="T:System.Exception" /> che ha causato l'errore.</param>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="exception" /> è <see langword="null" />.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary>Tenta di ricevere in modo sincrono tutti gli elementi disponibili dal <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="items">Elementi ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se uno o più elementi possono essere ricevuti; in caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per accettare e utilizzare <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio utilizzato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che consuma il messaggio.</param>
      <param name="messageConsumed">
        <see langword="true" /> se il messaggio è stato consumato con esito positivo, <see langword="false" /> in caso contrario.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>Valore del messaggio utilizzato. Questo valore può corrispondere a un'istanza diversa di <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> in precedenza riservata e passata come <paramref name="messageHeader" /> a <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />. L'oggetto <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che usa le risorse deve utilizzare il valore restituito al posto del valore passato come <paramref name="messageValue" /> con <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />.  
  
se il messaggio richiesto non è disponibile, il valore restituito sarà <see langword="null" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per rilasciare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente riservato da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato riservato che viene rilasciato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che genera il messaggio prenotato in precedenza.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Il <paramref name="target" /> non dispone del messaggio riservato.</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary>Chiamato da un <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> collegato per conservare un <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> precedentemente offerto da questo <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</summary>
      <param name="messageHeader">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> del messaggio prenotato.</param>
      <param name="target">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> che riserva il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.</exception>
      <exception cref="T:System.ArgumentNullException">L'elemento <paramref name="target" /> è <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> se il messaggio è stato riservato, <see langword="false" /> in caso contrario.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary>Offre un messaggio al <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> e fornisce alla destinazione la possibilità di utilizzare o posticipare il messaggio.</summary>
      <param name="messageHeader">Un'istanza <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> che rappresenta l'intestazione del messaggio che viene offerto.</param>
      <param name="messageValue">Valore del messaggio offerto.</param>
      <param name="source">
        <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> che offre il messaggio. Può assumere il valore <see langword="null" />.</param>
      <param name="consumeToAccept">Impostare su <see langword="true" /> per indicare alla destinazione di chiamare <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> in modo sincrono durante la chiamata a <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" />, prima di restituire <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> per eseguire il messaggio.</param>
      <exception cref="T:System.ArgumentException">L'elemento <paramref name="messageHeader" /> non è valido.  
  
- oppure - <paramref name="consumeToAccept" /> può essere true solo se viene specificato con un elemento <paramref name="source" /> diverso da Null.</exception>
      <returns>Stato del messaggio offerto. Se il messaggio è stato accettato dalla destinazione, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> e l'origine non deve più utilizzare il messaggio offerto, in quanto è ora di proprietà della destinazione. Se il messaggio è stato posticipato dal database di destinazione, <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" /> viene restituito come notifica relativa alla destinazione che potrebbe successivamente tentare di utilizzare o prenotare il messaggio. Allo stesso tempo, l'origine ancora possiede ancora il messaggio e potrebbe offrirlo ad altri blocchi.  
  
Se la destinazione avesse posticipato il messaggio ma <paramref name="source" /> era <see langword="null" />, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />.  
  
Se la destinazione ha provato ad accettare il messaggio ma non ci è riuscito a causa della consegna di origine del messaggio a un'altra destinazione o semplicemente perché è stato eliminato, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />.  
  
Se il database di destinazione ha scelto di non accettare il messaggio, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />. Se la destinazione ha scelto di non accettare il messaggio e non accetterà un altro messaggio da questa origine, viene restituito <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary>Restituisce una stringa che rappresenta il nome formattato di questa istanza <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</summary>
      <returns>Stringa che rappresenta il nome formattato di questa istanza di <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />.</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary>Tenta di ricevere in modo sincrono un elemento di output disponibile da <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" />.</summary>
      <param name="filter">Il valore del predicato deve passare in modo corretto in modo da poter essere ricevuto.  <paramref name="filter" /> può essere <see langword="null" />, nel qual caso tutti gli elementi passeranno.</param>
      <param name="item">Elemento ricevuto dall'origine.</param>
      <returns>
        <see langword="true" /> se un elemento può essere ricevuto; altrimenti, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary>Ottiene un <see cref="T:System.Threading.Tasks.Task" /> che rappresenta l'operazione asincrona e il completamento del blocco di flussi di dati.</summary>
      <returns>Attività.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.RegularExpressions</name>
  </assembly>
  <members>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>正常にマッチした単一部分式キャプチャの結果を表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>
        <see cref="P:System.Text.RegularExpressions.Capture.Value" /> プロパティを呼び出して、入力文字列からキャプチャされた部分文字列を取得します。</summary>
      <returns>検索によってキャプチャされた部分文字列。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>キャプチャした部分文字列の最初の文字が見つかる元の文字列内の位置。</summary>
      <returns>キャプチャした部分文字列が見つかった元の文字列内の開始位置を示す 0 から始まる数値。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>キャプチャした部分文字列の長さを取得します。</summary>
      <returns>キャプチャした部分文字列の長さ。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>入力文字列からキャプチャした部分文字列を取得します。</summary>
      <returns>検索によってキャプチャされた部分文字列。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>単一キャプチャ グループによるキャプチャのセットを表します。 コレクションは変更不可 (読み取り専用) であり、パブリック コンストラクターがありません。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="arrayIndex">コピー先の配列内のコピー開始位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。  
  
- または - 
 <paramref name="arrayIndex" /> に <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> を加えた値が <paramref name="array" /> の境界の外側にあります。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Text.RegularExpressions.Capture[],System.Int32)">
      <summary>コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException">コピー元のコレクションの要素数が、コピー先の <paramref name="arrayIndex" /> の <paramref name="array" /> から最後までの領域を超えています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を提供します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Capture" /> 内にあるすべての <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> オブジェクトを格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Add(System.Text.RegularExpressions.Capture)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="item">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Clear">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Contains(System.Text.RegularExpressions.Capture)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">コレクション内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションに存在する場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Capture}#Remove(System.Text.RegularExpressions.Capture)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <returns>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Capture}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#IndexOf(System.Text.RegularExpressions.Capture)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="item">コレクション内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Insert(System.Int32,System.Text.RegularExpressions.Capture)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#RemoveAt(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Add(System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="value">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <returns>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Clear">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Contains(System.Object)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">コレクション内で検索するオブジェクト。</param>
      <returns>
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="value">コレクション内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Remove(System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="value">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>グループによってキャプチャされた部分文字列の数を取得します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 内の項目数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>コレクションの個別のメンバーを取得します。</summary>
      <param name="i">キャプチャ コレクション内のインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> が 0 未満であるか、または <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> を超えています。</exception>
      <returns>コレクション内の <paramref name="i" /> の位置にあるキャプチャされた部分文字列。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Capture}#Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />コレクションが固定サイズであるためです。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>単一キャプチャ グループによるキャプチャの結果を表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>指定されたオブジェクトと等価の、複数のスレッド間で安全に共有できる <see langword="Group" /> オブジェクトを返します。</summary>
      <param name="inner">入力 <see cref="T:System.Text.RegularExpressions.Group" /> オブジェクトです。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> が <see langword="null" />です。</exception>
      <returns>正規表現 <see langword="Group" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>内側と左側が先の順序で、キャプチャ グループに一致したすべてのキャプチャ結果のコレクションを取得します。または、正規表現が <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションを使用して変更されている場合は、内側と右端が先の順序で取得します。 このコレクションには 0 個以上の項目が格納されています。</summary>
      <returns>グループに一致した部分文字列のコレクション。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Name">
      <summary>現在のインスタンスで表されるキャプチャ グループの名前を返します。</summary>
      <returns>現在のインスタンスで表されるキャプチャ グループの名前。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>一致した対象が見つかったかどうかを示す値を取得します。</summary>
      <returns>一致した対象が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>1 回の検索一致でキャプチャされたグループのセットを返します。 コレクションは変更不可 (読み取り専用) であり、パブリック コンストラクターがありません。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.ContainsKey(System.String)">
      <summary>指定された名前で識別されるキャプチャ グループがグループ コレクションに含まれているかどうかを判断します。</summary>
      <param name="key">検索するキャプチャ グループの名前を含む文字列。</param>
      <returns>
        <paramref name="key" /> で識別されるキャプチャ グループがグループ コレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="arrayIndex">コピーの開始位置を示す、コピー先の配列内の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。

- または -

<paramref name="arrayIndex" /> に <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> を加えた値が <paramref name="array" /> の境界の外側にあります。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Text.RegularExpressions.Group[],System.Int32)">
      <summary>特定の配列インデックスを開始位置として、<see cref="T:System.Text.RegularExpressions.Group" /> 配列にグループ コレクションの要素をコピーします。</summary>
      <param name="array">グループ コレクションからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> が 0 未満です。

- または -

<paramref name="arrayIndex" /> が <paramref name="array" /> の長さを超えています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> - <paramref name="arrayIndex" /> の長さがグループ コレクションの数を下回っています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を提供します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Group" /> 内のすべての <see cref="T:System.Text.RegularExpressions.GroupCollection" /> オブジェクトを含む列挙子。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Add(System.Text.RegularExpressions.Group)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="item">コレクションに追加するグループ。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Clear">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Contains(System.Text.RegularExpressions.Group)">
      <summary>グループ コレクションに特定のグループ項目が含まれているかどうかを判断します。</summary>
      <param name="item">グループ コレクションで検索するグループ。</param>
      <returns>グループ項目がグループ コレクションで見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Group}#Remove(System.Text.RegularExpressions.Group)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="item">削除するグループ。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
      <returns>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Text#RegularExpressions#Group}}#GetEnumerator">
      <summary>グループ コレクションを反復処理する列挙子を提供します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Group" /> コレクション内のすべての名前とオブジェクトを含む列挙子。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Group}#GetEnumerator">
      <summary>グループ コレクションを反復処理する列挙子を提供します。</summary>
      <returns>グループ コレクション内のすべての <see cref="T:System.Text.RegularExpressions.Group" /> オブジェクトを含む列挙子。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#IndexOf(System.Text.RegularExpressions.Group)">
      <summary>グループ コレクション内の特定グループのインデックスを確認します。</summary>
      <param name="item">グループ コレクションで検索するグループ。</param>
      <returns>
        <paramref name="item" /> が見つかった場合はそのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Insert(System.Int32,System.Text.RegularExpressions.Group)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">グループを挿入する位置。</param>
      <param name="item">挿入するグループ。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#RemoveAt(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">削除するグループの 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Add(System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="value">グループ コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
      <returns>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Clear">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Contains(System.Object)">
      <summary>グループ コレクションに特定のグループ項目が含まれているかどうかを判断します。</summary>
      <param name="value">グループ コレクションで検索するグループ。</param>
      <returns>グループ項目がグループ コレクションで見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>グループ コレクション内の特定グループのインデックスを確認します。</summary>
      <param name="value">グループ コレクションで検索するグループ。</param>
      <returns>
        <paramref name="item" /> が見つかった場合はそのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">グループを挿入する位置。</param>
      <param name="value">挿入するグループ。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Remove(System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="value">削除するグループ。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">削除するグループの 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">このメソッドはサポートされていません。 これは読み取り専用のコレクションです。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.TryGetValue(System.String,System.Text.RegularExpressions.Group@)">
      <summary>指定された名前キー (グループ コレクションに存在する場合) で識別されるグループの取得を試みます。</summary>
      <param name="key">検索するグループ名キーを含む文字列。</param>
      <param name="value">メソッドが返されるときに <paramref name="key" /> が見つかった場合はグループ名。見つからなかった場合は <see langword="null" />。</param>
      <returns>指定された名前キーで識別されるグループが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>コレクション内のグループの数を返します。</summary>
      <returns>コレクション内のグループの数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>整数インデックスによってコレクションのメンバーにアクセスできるようにします。</summary>
      <param name="groupnum">取得するコレクション メンバーの 0 から始まるインデックス。</param>
      <returns>
        <paramref name="groupnum" /> で指定されたコレクションのメンバー。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>文字列インデックスによってコレクションのメンバーにアクセスできるようにします。</summary>
      <param name="groupname">キャプチャ グループの名前。</param>
      <returns>
        <paramref name="groupname" /> で指定されたコレクションのメンバー。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Keys">
      <summary>グループ コレクションの名前キーを含む文字列列挙体を取得します。</summary>
      <returns>グループコレクションの名前キー。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>
        <see cref="T:System.Text.RegularExpressions.GroupCollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>同期する <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコピー。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Group}#Item(System.Int32)">
      <summary>コレクション内の指定した位置のグループを取得します。</summary>
      <param name="index">グループ コレクションのグループの 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">項目を設定できません。 これは読み取り専用のコレクションです。</exception>
      <returns>目的の位置にあるグループ。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#IsFixedSize">
      <summary>グループ コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.System#Collections#IList#Item(System.Int32)">
      <summary>目的の位置にあるグループを取得します。</summary>
      <param name="index">グループ コレクションのグループの 0 から始まるインデックスの位置。</param>
      <exception cref="T:System.NotSupportedException">項目を設定できません。 これは読み取り専用のコレクションです。</exception>
      <returns>目的の位置にあるグループ。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Values">
      <summary>グループ コレクション内のすべてのグループを含むグループ列挙体を取得します。</summary>
      <returns>グループ列挙体。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>1 回の正規表現検索に一致した結果を表します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>一致する対象が最後に見つかった位置の終了位置 (最後に一致した文字の後の文字) から開始して、次に一致する対象を検索した結果の新しい <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトを返します。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
      <returns>次の正規表現一致。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>指定された置換パターンを展開して返します。</summary>
      <param name="replacement">使用する置換パターン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">このパターンは展開できません。</exception>
      <returns>
        <paramref name="replacement" /> パラメーターの展開形式。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>指定されたオブジェクトと等価であり、かつ複数のスレッド間での共有に適した <see cref="T:System.Text.RegularExpressions.Match" /> インスタンスを返します。</summary>
      <param name="inner">要求する一致と等価の正規表現一致。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> が <see langword="null" />です。</exception>
      <returns>複数のスレッド間での共有に適した正規表現一致。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>空のグループを取得します。 一致する対象が見つからなかった検索は、この空一致を返します。</summary>
      <returns>空一致。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>正規表現に一致したグループのコレクションを取得します。</summary>
      <returns>パターンに一致した文字グループ。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>正規表現パターンを入力文字列に繰り返し適用したときに、パターンに一致した一連の対象を表します。  コレクションは変更不可 (読み取り専用) であり、パブリック コンストラクターがありません。 <see cref="T:System.Text.RegularExpressions.Regex.Matches(System.String)" /> メソッドが <see cref="T:System.Text.RegularExpressions.MatchCollection" /> オブジェクトを返します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定したインデックスを開始位置として、指定した配列にコレクションのすべての要素をコピーします。</summary>
      <param name="array">コレクションのコピー先の配列。</param>
      <param name="arrayIndex">コピーの開始位置を示す、配列内の位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> は、多次元配列です。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> が <paramref name="array" /> の境界の外側にあります。  
  
- または - 
 <paramref name="arrayIndex" /> に <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> を加えた値が <paramref name="array" /> の境界の外側にあります。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Text.RegularExpressions.Match[],System.Int32)">
      <summary>コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を提供します。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
      <returns>
        <see cref="T:System.Text.RegularExpressions.Match" /> 内にあるすべての <see cref="T:System.Text.RegularExpressions.MatchCollection" /> オブジェクトを格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Add(System.Text.RegularExpressions.Match)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="item">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Clear">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Contains(System.Text.RegularExpressions.Match)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">コレクション内で検索するオブジェクト。</param>
      <returns>
        <paramref name="item" /> がコレクションに存在する場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#ICollection{System#Text#RegularExpressions#Match}#Remove(System.Text.RegularExpressions.Match)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <returns>
        <paramref name="item" /> がコレクションから正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="item" /> が元のコレクションに見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IEnumerable{System#Text#RegularExpressions#Match}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#IndexOf(System.Text.RegularExpressions.Match)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="item">コレクション内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Insert(System.Int32,System.Text.RegularExpressions.Match)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#RemoveAt(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Add(System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="value">コレクションに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
      <returns>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Clear">
      <summary>コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Contains(System.Object)">
      <summary>コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value">コレクション内で検索するオブジェクト。</param>
      <returns>
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="value">コレクション内で検索するオブジェクト。</param>
      <returns>リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value">コレクションに挿入するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Remove(System.Object)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="value">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>このメソッドを呼び出すと、必ず <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="index">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException">コレクションは読み取り専用です。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>一致の数を取得します。</summary>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
      <returns>一致の数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns>常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>コレクションの個別のメンバーを取得します。</summary>
      <param name="i">
        <see cref="T:System.Text.RegularExpressions.Match" /> コレクション内のインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> が 0 未満、または <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 以上です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
      <returns>コレクション内の <paramref name="i" /> の位置にあるキャプチャされた部分文字列。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>コレクションへのアクセスの同期に使用できるオブジェクトです。 このプロパティは常にオブジェクト自体を返します。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#Generic#IList{System#Text#RegularExpressions#Match}#Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#IsFixedSize">
      <summary>コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see langword="true" />.</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.System#Collections#IList#Item(System.Int32)">
      <summary>指定したインデックス位置にある要素を取得します。</summary>
      <param name="index">取得する要素の 0 から始まるインデックス。</param>
      <returns>指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> メソッドの操作中に、正規表現との一致が見つかるたびに呼び出されるメソッドを表します。</summary>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> メソッドの操作中に、1 つの正規表現で見つかった一致を表す <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> オブジェクト。</param>
      <returns>
        <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートが表すメソッドによって返された文字列。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>変更不可の正規表現を表します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>パターン一致の操作がタイムアウトしないことを指定します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>操作がタイムアウトになる前に、パターン一致操作で経過できる最大時間。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたパターンと <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 情報を保持するオブジェクト。</param>
      <param name="context">このシリアル化のシリアル化先。 (このパラメーターは使用されません。<see langword="null" /> を指定してください。)</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> に含まれているパターンが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> に無効な <see cref="T:System.Text.RegularExpressions.RegexOptions" /> フラグが含まれています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">一致させる正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>パターンを変更するオプションを使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> に無効なフラグが含まれています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>パターンを変更するオプションと、パターン マッチ メソッドがタイムアウトするまでに一致を試みる時間を指定する値を使用して、指定した正規表現の <see cref="T:System.Text.RegularExpressions.Regex" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">正規表現を変更する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は正しい <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>1 つ以上の指定した <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、名前付きアセンブリに保存します。</summary>
      <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
      <param name="assemblyname">アセンブリのファイル名。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
- または - 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</summary>
      <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
      <param name="assemblyname">アセンブリのファイル名。</param>
      <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
- または - 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>指定した 1 つ以上の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトと、指定した 1 つのリソース ファイルをコンパイルして、指定した属性を持つ名前付きアセンブリに保存します。</summary>
      <param name="regexinfos">コンパイルする正規表現を記述する配列。</param>
      <param name="assemblyname">アセンブリのファイル名。</param>
      <param name="attributes">アセンブリに適用する属性を定義する配列。</param>
      <param name="resourceFile">アセンブリに含める Win32 リソース ファイルの名前。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyname" /> パラメーターの <see cref="P:System.Reflection.AssemblyName.Name" /> プロパティの値が空または null 文字列です。  
  
- または - 
<paramref name="regexinfos" /> の 1 つ以上のオブジェクトの正規表現パターンに、無効な構文が含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> または <paramref name="regexinfos" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="resourceFile" /> パラメーターは無効な Win32 リソース ファイルを指定します。</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="resourceFile" /> パラメーターで指定されているファイルが見つかりません。</exception>
      <exception cref="T:System.PlatformNotSupportedException">.NET Core のみ: コンパイルされた正規表現のアセンブリの作成はサポートされていません。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>文字 (\、*、+、?、|、{、[、(、)、^、$、.、#、および空白) をエスケープ コードに置き換えることにより、このような文字をエスケープします。 これにより、正規表現エンジンではこのような文字がメタ文字ではなくリテラルとして解釈されます。</summary>
      <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> が <see langword="null" />です。</exception>
      <returns>メタ文字がエスケープされた形式に変換された文字列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>正規表現で使用されるキャプチャ グループ名の配列を返します。</summary>
      <returns>グループ名の文字列配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>配列内のグループ名に対応したキャプチャ グループ番号の配列を返します。</summary>
      <returns>グループ番号の整数配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>指定したグループ番号に対応するグループ名を取得します。</summary>
      <param name="i">対応するグループ名に変換するグループ番号。</param>
      <returns>指定したグループ番号に関連付けられたグループ名を含んでいる文字列。 <paramref name="i" /> に対応するグループ名がない場合、このメソッドは <see cref="F:System.String.Empty" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>指定したグループ名に対応するグループ番号を返します。</summary>
      <param name="name">対応するグループ番号に変換するグループ名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> が <see langword="null" />です。</exception>
      <returns>指定したグループ名に対応するグループ番号。<paramref name="name" /> が有効なグループ名でない場合は -1。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <exception cref="T:System.NotSupportedException">参照は既に初期化されています。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>入力文字列内の指定した位置から検索を開始して、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="startat">検索を開始する文字の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した一致オプションを使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は正しい <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した正規表現に一致する箇所が、指定した入力文字列内に見つかるかどうかを示します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は正しい <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値ではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。</exception>
      <returns>正規表現と一致する箇所が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>指定した入力文字列内で、<see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現と最初に一致する対象を 1 つ検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致に関する情報を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>入力文字列内の指定した開始位置から開始して、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="startat">検索を開始する 0 から始まる文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致に関する情報を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>入力文字列内の指定した開始位置から開始し、指定した文字数だけを検索対象として、その入力文字列内で正規表現に最初に一致する箇所を検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="beginning">検索対象の左端の位置を定義する、入力文字列内の 0 から始まる文字位置。</param>
      <param name="length">検索に含める部分文字列の文字数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> が 0 未満か、<paramref name="input" /> の長さを超えています。  
  
- または - 
 <paramref name="length" /> が 0 未満か、<paramref name="input" /> の長さを超えています。  
  
- または - 
 <paramref name="beginning" /><see langword="+" /><paramref name="length" /><see langword="-1" /> が <paramref name="input" /> の範囲外の位置を識別しています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致に関する情報を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>指定した入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致に関する情報を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した一致オプションを使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致に関する情報を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した一致オプションとタイムアウト間隔を使用して、入力文字列内で、指定した正規表現に最初に一致する箇所を検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致に関する情報を格納しているオブジェクト。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>指定した入力文字列内で、正規表現と一致する対象をすべて検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>入力文字列内の指定した開始位置から検索を開始した場合に、その指定入力文字列内で正規表現と一致する対象をすべて検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="startat">入力文字列内の検索を開始する文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した一致オプションを使用して、指定した入力文字列内で、指定した正規表現に一致する箇所をすべて検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した一致オプションとタイムアウト間隔を使用して、指定した入力文字列内で、指定した正規表現に一致するすべての箇所を検索します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
      <returns>検索によって見つかった <see cref="T:System.Text.RegularExpressions.Match" /> オブジェクトのコレクション。 一致が見つからない場合は、空のコレクション オブジェクトが返されます。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>指定した入力文字列内で正規表現パターンに一致するすべての文字列を、指定した置換文字列に置換します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="replacement">置換文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="replacement">置換文字列。</param>
      <param name="count">置換を行う最大回数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、指定した置換文字列に置換します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="replacement">置換文字列。</param>
      <param name="count">置換を実行する最大回数。</param>
      <param name="startat">入力文字列中で検索を開始する文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="replacement">置換文字列。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 指定したオプションで、一致操作を変更します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="replacement">置換文字列。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した入力文字列内で指定した正規表現に一致するすべての文字列を、指定した置換文字列に置換します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="replacement">置換文字列。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="replacement" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。 指定したオプションで、一致操作を変更します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定した入力文字列内で、指定した正規表現に一致するすべての部分文字列を、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" />、または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 <paramref name="pattern" /> が現在のインスタンス内で一致しない場合、メソッドは現在のインスタンスを変更せずに返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>指定した入力文字列内で、指定した正規表現に一致するすべての文字列を <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>指定した入力文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
      <param name="count">置換を実行する最大回数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>指定した入力部分文字列内で正規表現パターンに一致する文字列を、指定した最大回数だけ、<see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> デリゲートによって返される文字列に置き換えます。</summary>
      <param name="input">一致する対象を検索する文字列。</param>
      <param name="evaluator">各一致文字列を調べ、元の一致文字列または置換文字列のどちらかを返すカスタム メソッド。</param>
      <param name="count">置換を実行する最大回数。</param>
      <param name="startat">入力文字列中で検索を開始する文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="evaluator" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>一致する各文字列が置換文字列に置き換えられる以外は入力文字列と同じである新しい文字列。 正規表現パターンが現在のインスタンスで一致しない場合、このメソッドは現在のインスタンスをそのまま返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現パターンによって定義されている位置で入力文字列を分割し、部分文字列の配列に格納します。</summary>
      <param name="input">分割する文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>文字列の配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。</summary>
      <param name="input">分割対象の文字列。</param>
      <param name="count">分割を実行する最大回数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>文字列の配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターで指定された正規表現で定義されている位置で、入力文字列を指定されている最大回数だけ分割し、部分文字列の配列に格納します。 正規表現パターンの検索は、入力文字列の指定した文字位置から開始します。</summary>
      <param name="input">分割対象の文字列。</param>
      <param name="count">分割を実行する最大回数。</param>
      <param name="startat">入力文字列中で検索を開始する文字位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> が 0 未満か、<paramref name="input" /> の長さを超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>文字列の配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。</summary>
      <param name="input">分割する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>文字列の配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 指定したオプションで、一致操作を変更します。</summary>
      <param name="input">分割する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>文字列の配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指定された正規表現パターンによって定義されている位置で、入力文字列を部分文字列の配列に分割します。 追加のパラメーターでは、一致が見つからない場合に一致操作とタイムアウト間隔を変更するオプションを指定します。</summary>
      <param name="input">分割する文字列。</param>
      <param name="pattern">一致させる正規表現パターン。</param>
      <param name="options">一致オプションを指定する列挙値のビットごとの組み合わせ。</param>
      <param name="matchTimeout">タイムアウト期間、またはメソッドがタイムアウトしないことを示す <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <exception cref="T:System.ArgumentException">正規表現の解析エラーが発生しました。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="pattern" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> は、<see cref="T:System.Text.RegularExpressions.RegexOptions" /> 値のビットごとの正しい組み合わせではありません。  
  
- または - 
 <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">タイムアウトが発生しました。 タイムアウトの詳細については、「解説」をご覧ください。</exception>
      <returns>文字列配列。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、現在の <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトの逆シリアル化に必要なデータを入力します。</summary>
      <param name="si">シリアル化情報が設定されるオブジェクト。</param>
      <param name="context">シリアル化データを格納および取得する場所。 このパラメーターは将来使用するために予約されています。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>
        <see langword="Regex" /> コンストラクターに渡された正規表現パターンを返します。</summary>
      <returns>
        <see langword="Regex" /> コンストラクターに渡された <paramref name="pattern" /> パラメーター。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>入力文字列内に含まれるエスケープされた文字を変換します。</summary>
      <param name="str">変換対象のテキストを含んでいる入力文字列。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> には、認識されないエスケープ シーケンスが含まれています。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> が <see langword="null" />です。</exception>
      <returns>エスケープされた文字を含む文字列を、エスケープされていない形式に変換したもの。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <returns>
        <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <returns>
        <see cref="P:System.Text.RegularExpressions.Regex.Options" /> プロパティに <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> オプションが含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>タイムアウト間隔が許容範囲内にあるかどうかを確認します。</summary>
      <param name="matchTimeout">チェックするタイムアウト間隔。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定のタイムアウトが有効範囲内にありません。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>コンパイルされた正規表現の現在の静的キャッシュ内の最大エントリ数を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">設定操作の値が 0 より小さい値です。</exception>
      <returns>静的キャッシュの最大エントリ数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CapNames">
      <summary>名前付きキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.CapNames" /> プロパティに割り当てられた値は、<see langword="null" /> です。</exception>
      <returns>名前付きキャプチャ対象グループをインデックス値にマップする辞書。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Caps">
      <summary>番号付きのキャプチャ対象グループをインデックス値にマップする辞書を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">セット操作で <see cref="P:System.Text.RegularExpressions.Regex.Caps" /> プロパティに割り当てられた値は、<see langword="null" /> です。</exception>
      <returns>番号付きのキャプチャ対象グループをインデックス値にマップする辞書。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>現在のインスタンスのタイムアウト間隔を取得します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前に、パターン一致操作で経過できる最大時間間隔。タイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>
        <see cref="T:System.Text.RegularExpressions.Regex" /> コンストラクターに渡されたオプションを取得します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexOptions" /> のコンストラクターに渡されたオプションを表す <see cref="T:System.Text.RegularExpressions.Regex" /> の列挙体の 1 つ以上のメンバー</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>正規表現が右から左の方向に検索するかどうかを示す値を取得します。</summary>
      <returns>正規表現が右から左の方向に検索する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>正規表現をコンパイルしてスタンドアロン アセンブリを作成するために使用する正規表現についての情報を提供します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>アセンブリに含める正規表現についての情報を格納する <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">コンパイルする正規表現。</param>
      <param name="options">正規表現をコンパイルするときに使用する正規表現オプション。</param>
      <param name="name">コンパイル済みの正規表現を表す型の名前。</param>
      <param name="fullnamespace">新しい型の所属先となる名前空間。</param>
      <param name="ispublic">コンパイルされた正規表現をパブリックに参照できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が <see cref="F:System.String.Empty" />です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="name" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="fullnamespace" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>アセンブリに含めるタイムアウト値を指定した正規表現についての情報を格納する <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="pattern">コンパイルする正規表現。</param>
      <param name="options">正規表現をコンパイルするときに使用する正規表現オプション。</param>
      <param name="name">コンパイル済みの正規表現を表す型の名前。</param>
      <param name="fullnamespace">新しい型の所属先となる名前空間。</param>
      <param name="ispublic">コンパイルされた正規表現をパブリックに参照できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="matchTimeout">正規表現の既定のタイムアウト間隔。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> が <see cref="F:System.String.Empty" />です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="name" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="fullnamespace" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" /> が負の値か、0 か、または約 24 日を超えています。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>コンパイルされた正規表現をパブリックに参照できるかどうかを示す値を取得または設定します。</summary>
      <returns>正規表現をパブリックに参照できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>正規表現の既定のタイムアウト間隔を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> がスローされる前にパターン一致操作で経過できる既定の最大時間間隔、またはタイムアウトが無効な場合は <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>コンパイル済みの正規表現を表す型の名前を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">このプロパティの値は空の文字列です。</exception>
      <returns>新しい型の名前。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>新しい型の所属先となる名前空間を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" /> です。</exception>
      <returns>新しい型の名前空間。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>正規表現をコンパイルするときに使用するオプションを取得または設定します。</summary>
      <returns>列挙値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>コンパイルする正規表現を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException">このプロパティの値は <see langword="null" /> です。</exception>
      <returns>コンパイルする正規表現。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>正規表現パターン マッチング メソッドの実行時間が、タイムアウト間隔を超えた場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>システム提供のメッセージを使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化したデータを使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたデータを格納するオブジェクト。</param>
      <param name="context">シリアル化されたデータを格納するストリーム。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>指定したメッセージの文字列を使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明する文字列。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージおよびこの例外の原因となった内部例外への参照を使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明する文字列。</param>
      <param name="inner">現在の例外の原因となった例外。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>正規表現パターン、入力テキスト、およびタイムアウト間隔に関する情報を使用して、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="regexInput">タイムアウトが発生したときに正規表現エンジンが処理していた入力テキスト。</param>
      <param name="regexPattern">タイムアウトが発生したときに正規表現エンジンによって使用されるパターン。</param>
      <param name="matchTimeout">タイムアウト間隔。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトに、<see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> オブジェクトをシリアル化するために必要なデータを設定します。</summary>
      <param name="info">データを格納するシリアル化情報オブジェクト。</param>
      <param name="context">このシリアル化のシリアル化先。</param>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>タイムアウトが発生したときに正規表現エンジンが処理していた入力テキストを取得します。</summary>
      <returns>正規表現入力テキスト。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>正規表現検索のタイムアウト間隔を取得します。</summary>
      <returns>タイムアウト間隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>タイムアウトが発生したときに一致操作で使用されていた正規表現パターンを取得します。</summary>
      <returns>正規表現パターン。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>正規表現オプションを設定するために使用する列挙値を提供します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>正規表現をコンパイルしてアセンブリを作成することを指定します。 これにより実行速度は速くなりますが、起動にかかる時間は長くなります。 この値は、<see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> メソッドを呼び出すときには <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> プロパティに割り当てないでください。 詳細については、「 正規表現のオプション 」の「コンパイルされた正規表現」セクションを参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>言語の違いが無視されるように指定します。 詳細については、「 正規表現のオプション 」の「インバリアントカルチャを使用した比較」を参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>式の ECMAScript 準拠の動作を有効にします。 この値は、必ず <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />、<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />、<see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> の各値と組み合わせて使用します。 この値を他の値と組み合わせて使用すると、例外が発生します。  
  
オプションの詳細については、「 <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" />正規表現のオプション 」の「ECMAScript 一致の動作」セクションを参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>明示的に名前または番号が付けられた (?) 形式のグループだけが有効なキャプチャであることを指定します。 &lt;名前 &gt; ...)。これにより、式 (?:...) の構文ぎこちなさを使用せずに、名前のないかっこを非キャプチャグループとして動作させることができます。詳細については、「 正規表現のオプション 」の「明示的なキャプチャのみ」を参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>検索時に大文字と小文字を区別しないことを指定します。 詳細については、「 正規表現のオプション 」の「大文字と小文字を区別しない一致」を参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>パターンからエスケープが解除された空白を削除し、# でマークされたコメントを有効にします。 ただしこの値は、個々の正規表現の言語要素の開始を示す文字クラス、数値の量指定子、またはトークンに影響を与えることも、これらの中の空白を削除することもありません。 詳細については、「正規表現のオプション」の記事の「空白を無視」を参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>複数行モードを指定します。 ^ と $ の意味を変更して、文字列全体の先頭と末尾だけでなく、任意の行の先頭と末尾にもそれぞれが一致するようにします。 詳細については、「 正規表現のオプション 」の「複数行モード」を参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>オプションが何も設定されないことを指定します。 正規表現エンジンの既定の動作の詳細については、「 正規表現のオプション 」の「既定のオプション」を参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>検索が左から右ではなく右から左になされるように指定します。 詳細については、「 正規表現のオプション 」の「右から左モード」のセクションを参照してください。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>単一行モードを指定します。 \n 以外の任意の文字ではなく、すべての文字と一致するようにピリオド (.) の意味を変更します。 詳細については、「 正規表現のオプション 」の「単一行モード」を参照してください。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexParseError">
      <summary>正規表現に解析エラーが含まれている場合に <see cref="T:System.Text.RegularExpressions.RegexParseException" /> がスローされる根本的な理由を詳細に示します。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasComment">
      <summary>正規表現内の代替構成体に、コメントが含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasMalformedCondition">
      <summary>正規表現内の代替に誤った形式の条件が含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasMalformedReference">
      <summary>正規表現内の代替構成体に、誤った形式の参照が含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasNamedCapture">
      <summary>正規表現内の代替構成体で、名前付きキャプチャが使用されています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasTooManyConditions">
      <summary>正規表現内の代替にある条件が多すぎます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.AlternationHasUndefinedReference">
      <summary>正規表現内の代替構成体に未定義の参照が含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.CaptureGroupNameInvalid">
      <summary>正規表現内のキャプチャされたグループのグループ名が無効です。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.CaptureGroupOfZero">
      <summary>正規表現で、zero という名前の番号付き部分式が定義されています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ExclusionGroupNotLast">
      <summary>除外グループを含む正規表現内の文字クラスが、文字クラスの最後の部分ではありません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientClosingParentheses">
      <summary>正規表現に、エスケープされていない左かっこがあるか、または閉じ右かっこが欠落しています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientOpeningParentheses">
      <summary>正規表現に、エスケープされていない右かっこがあるか、または開き左かっこが欠落しています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InsufficientOrInvalidHexDigits">
      <summary>正規表現内の 16 進数のエスケープ シーケンスに、十分な桁数がないか、または無効な数字が含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InvalidGroupingConstruct">
      <summary>正規表現内のグループ化構成体が無効であるか、または形式が正しくありません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.InvalidUnicodePropertyEscape">
      <summary>正規表現内の Unicode プロパティ エスケープが無効または不明です。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MalformedNamedReference">
      <summary>正規表現内の名前付き参照の形式が正しくありません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MalformedUnicodePropertyEscape">
      <summary>Unicode プロパティ エスケープの形式が正しくありません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.MissingControlCharacter">
      <summary>正規表現内の制御文字が欠落しています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.NestedQuantifiersNotParenthesized">
      <summary>正規表現内の量指定子上で繰り返される別の量指定子が、かっこでグループ化されていません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.QuantifierAfterNothing">
      <summary>正規表現内の量指定子が、何も定量化できない位置 (正規表現の先頭やグループ内など) にあります。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.QuantifierOrCaptureGroupOutOfRange">
      <summary>正規表現内のキャプチャされたグループまたは量指定子が範囲内にありません。つまり、それらが <see cref="F:System.Int32.MaxValue" /> よりも大きくなっています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ReversedCharacterRange">
      <summary>正規表現内の文字クラスに、a から z ではなく z から a といったような逆の文字範囲が含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ReversedQuantifierRange">
      <summary>正規表現内の量指定子の範囲が逆になっています <code>{10,1}</code> ( ではなく ) <code>(1,10}</code>.</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.ShorthandClassInCharacterRange">
      <summary>正規表現内の文字クラスに、文字クラス内で許可されていない短縮形クラスが含まれています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UndefinedNamedReference">
      <summary>正規表現内で使用されている名前付き参照が定義されていません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UndefinedNumberedReference">
      <summary>正規表現内で使用されている番号付き参照が定義されていません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnescapedEndingBackslash">
      <summary>正規表現が、エスケープされていない終了円記号で終わっています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.Unknown">
      <summary>不明な正規表現解析エラーです。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedControlCharacter">
      <summary>正規表現内の制御文字が認識されません。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedEscape">
      <summary>正規表現内のエスケープ文字またはシーケンスが無効です。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnrecognizedUnicodeProperty">
      <summary>正規表現内の unicode プロパティが認識されないか、または無効です。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnterminatedBracket">
      <summary>正規表現にエスケープされていない左角かっこが含まれているか、または閉じ右角かっこが欠落しています。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexParseError.UnterminatedComment">
      <summary>正規表現内のコメントが終了していません。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexParseException">
      <summary>正規表現での解析エラーの結果としての例外であり、<see cref="P:System.Text.RegularExpressions.RegexParseException.Error" /> および <see cref="P:System.Text.RegularExpressions.RegexParseException.Offset" /> プロパティに詳細情報が含まれています。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>パラメーター名と追加の例外情報を使用して <paramref name="info" /> オブジェクトを設定します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexParseException.Error">
      <summary>解析中に発生したエラーを取得します。</summary>
      <returns>解析中に発生したエラー。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexParseException.Offset">
      <summary>解析エラーが発生した正規表現パターン内の 0 から始まる文字オフセットを取得します。</summary>
      <returns>解析エラーが発生する位置のオフセット。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> クラスは、コンパイル済みの正規表現の基本クラスです。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="capnum">キャプチャの数。</param>
      <param name="start">キャプチャの開始位置。</param>
      <param name="end">キャプチャの終了位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。 文字が文字クラスに属しているかどうかを判断します。</summary>
      <param name="ch">テスト対象の文字。</param>
      <param name="charClass">文字クラスの内部名。</param>
      <returns>
        <paramref name="ch" /> パラメーターが、<paramref name="charClass" /> パラメーターで指定した文字クラスに属している場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="ch">単一の文字。</param>
      <param name="set">文字セット。</param>
      <param name="category">文字カテゴリ。</param>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="i">保存する数。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <returns>
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="index">潜在的な境界の位置。</param>
      <param name="startpos">開始位置。</param>
      <param name="endpos">終了位置。</param>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="index">潜在的な ECMA 境界の位置。</param>
      <param name="startpos">開始位置。</param>
      <param name="endpos">終了位置。</param>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="cap">キャプチャの数。</param>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="cap">キャプチャの数。</param>
      <returns>
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="cap">キャプチャの数。</param>
      <returns>
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <returns>
        <see cref="T:System.Int32" /> を返します。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="regex">正規表現エンジンのインスタンス。</param>
      <param name="text">パターン マッチをスキャンするテキスト。</param>
      <param name="textbeg">正規表現エンジンが一致をスキャンする <paramref name="text" /> 内の 0 から始まる開始位置。</param>
      <param name="textend">正規表現エンジンが一致をスキャンする <paramref name="text" /> 内の 0 から始まる終了位置。</param>
      <param name="textstart">この一致をスキャンする 0 から始まる開始位置。</param>
      <param name="prevlen">前の一致の文字数。</param>
      <param name="quick">クイック モードで一致を検索するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>一致。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="regex">正規表現エンジンのインスタンス。</param>
      <param name="text">パターン マッチをスキャンするテキスト。</param>
      <param name="textbeg">正規表現エンジンが一致をスキャンする <paramref name="text" /> 内の 0 から始まる開始位置。</param>
      <param name="textend">正規表現エンジンが一致をスキャンする <paramref name="text" /> 内の 0 から始まる終了位置。</param>
      <param name="textstart">この一致をスキャンする 0 から始まる開始位置。</param>
      <param name="prevlen">前の一致の文字数。</param>
      <param name="quick">クイック モードで一致を検索するには <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="timeout">タイムアウトの間隔。</param>
      <returns>一致。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
      <param name="capnum">キャプチャの数。</param>
      <param name="uncapnum">保存されたキャプチャの数。</param>
      <param name="start">開始位置。</param>
      <param name="end">終了位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>
        <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> メソッドで生成される <see cref="T:System.Text.RegularExpressions.Regex" /> オブジェクトによって使用されます。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>コンパイルされた正規表現用の <see cref="T:System.Text.RegularExpressions.RegexRunner" /> クラスを作成します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>派生クラスでオーバーライドされた場合は、特定のコンパイルされた正規表現に対する <see cref="T:System.Text.RegularExpressions.RegexRunner" /> オブジェクトを作成します。</summary>
      <returns>特定のコンパイルされた正規表現を実行することを目的とした <see cref="T:System.Text.RegularExpressions.RegexRunner" /> オブジェクト。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体によるコメントの処理方法を定義します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>JSON 入力内のコメントを許可し、有効なトークンとして扱います。 読み取り中に、呼び出し元はコメント値にアクセスすることができます。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>JSON 入力内のコメントを許可しません。 コメントが見つかった場合、それは無効な JSON として扱われ、<see cref="T:System.Text.Json.JsonException" /> がスローされます。 これが既定値です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>JSON 入力内のコメントを許可し、それを無視します。 <see cref="T:System.Text.Json.Utf8JsonReader" /> は、コメントが存在しないかのように動作します。</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>データ値を自動的にインスタンス化せずに JSON 値の構造的な内容を調べるためのメカニズムを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>この <see cref="T:System.Text.Json.JsonDocument" /> インスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>単一の JSON バイト値を表す UTF-8 エンコード テキストとしてシーケンスを JsonDocument に解析します。</summary>
      <param name="utf8Json">解析対象の JSON テキスト。</param>
      <param name="options">解析中にリーダーの動作を制御するオプション。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> に、サポート対象外のオプションが含まれています。</exception>
      <returns>JSON 値の JsonDocument 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>単一の JSON 値を表す UTF-8 エンコード データとして <see cref="T:System.IO.Stream" /> を JsonDocument に解析します。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json">解析対象の JSON データ。</param>
      <param name="options">解析中にリーダーの動作を制御するオプション。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> に、サポート対象外のオプションが含まれています。</exception>
      <returns>JSON 値の JsonDocument 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>単一の JSON バイト値を表す UTF-8 エンコード テキストとしてメモリを JsonDocument に解析します。</summary>
      <param name="utf8Json">解析対象の JSON テキスト。</param>
      <param name="options">解析中にリーダーの動作を制御するオプション。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> に、サポート対象外のオプションが含まれています。</exception>
      <returns>JSON 値の JsonDocument 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>単一の JSON 文字値を表すテキストを JsonDocument に解析します。</summary>
      <param name="json">解析対象の JSON テキスト。</param>
      <param name="options">解析中にリーダーの動作を制御するオプション。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> に、サポート対象外のオプションが含まれています。</exception>
      <returns>JSON 値の JsonDocument 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>単一の JSON 文字列値を表すテキストを JsonDocument に解析します。</summary>
      <param name="json">解析対象の JSON テキスト。</param>
      <param name="options">解析中にリーダーの動作を制御するオプション。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> に、サポート対象外のオプションが含まれています。</exception>
      <returns>JSON 値の JsonDocument 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>単一の JSON 値を表す UTF-8 エンコード データとして <see cref="T:System.IO.Stream" /> を JsonDocument に解析します。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json">解析対象の JSON データ。</param>
      <param name="options">解析中にリーダーの動作を制御するオプション。</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> では、有効な単一の JSON 値が表現されていません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> に、サポート対象外のオプションが含まれています。</exception>
      <returns>JSON 値の JsonDocument 表現を作成するタスク。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>指定されたリーダーからの 1 つの JSON 値 (オブジェクトまたは配列を含む) を解析します。</summary>
      <param name="reader">読み取りを行うリーダー。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> に、サポート対象外のオプションが含まれています。

- または -

現在の <paramref name="reader" /> トークンは値を開始または表現していません。</exception>
      <exception cref="T:System.Text.Json.JsonException">リーダーから値を読み取ることができませんでした。</exception>
      <returns>リーダーから読み取られた値 (およびネストされた値) を表す JsonDocument。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>指定されたリーダーからの 1 つの JSON 値 (オブジェクトまたは配列を含む) の解析を試みます。</summary>
      <param name="reader">読み取りを行うリーダー。</param>
      <param name="document">このメソッドから戻るときに、解析されたドキュメントが格納されます。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> に、サポート対象外のオプションが含まれています。

- または -

現在の <paramref name="reader" /> トークンは値を開始または表現していません。</exception>
      <exception cref="T:System.Text.Json.JsonException">リーダーから値を読み取ることができませんでした。</exception>
      <returns>値が読み取られ、JsonDocument に解析された場合は <see langword="true" />。解析中にリーダーでデータが不足した場合は <see langword="false" />。 他のすべての状況では、例外がスローされます。</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>指定されたライターにドキュメントを JSON 値として書き込みます。</summary>
      <param name="writer">ドキュメントの書き込み先のライター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">この <see cref="P:System.Text.Json.JsonDocument.RootElement" /> の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は無効な JSON となることがあります。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>この JSON ドキュメントのルート要素を取得します。</summary>
      <returns>
        <see cref="T:System.Text.Json.JsonElement" />ドキュメントの値を表す。</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>JSON を解析して <see cref="T:System.Text.Json.JsonDocument" /> を作成するときにカスタム動作を定義する機能をユーザーに提供します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>読み取られる JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを示す値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> オブジェクトまたは配列内の JSON 値の一覧の末尾に余分なコンマがある場合は。それ以外の場合は <see langword="false" /> 。 既定値は <see langword="false" /> です</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>JSON データを読み取るときに <see cref="T:System.Text.Json.JsonDocument" /> がコメントを処理する方法を決定する値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">コメント処理列挙型が、サポートされていない (または <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙型の範囲内ではない) 値に設定されています。</exception>
      <returns>コメントの処理方法を示す列挙値の1つ。</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>JSON データを解析するときに許可される最大深度を取得または設定します。既定値 (つまり 0) は、最大深度が 64 であることを示します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">最大深度が負の値に設定されています。</exception>
      <returns>JSON データを解析するときに許容される最大の深さ。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>
        <see cref="T:System.Text.Json.JsonDocument" /> 内の特定の JSON 値を表します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>元の <see cref="T:System.Text.Json.JsonDocument" /> の有効期間を超えて安全に格納できる JsonElement を取得します。</summary>
      <returns>元の <see cref="T:System.Text.Json.JsonDocument" /> の有効期間を超えて安全に格納できる JsonElement。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>この JsonElement によって表される JSON 配列内の値を列挙する列挙子を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Array" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>この JsonElement によって表される JSON 配列内の値を列挙する列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>この JsonElement によって表される JSON オブジェクト内のプロパティを列挙する列挙子を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>この JsonElement によって表される JSON オブジェクト内のプロパティを列挙する列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>現在の配列値に含まれる値の数を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Array" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>現在の配列値に含まれる値の数。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>要素の値を <see cref="T:System.Boolean" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> が <see cref="F:System.Text.Json.JsonValueKind.True" /> または <see cref="F:System.Text.Json.JsonValueKind.False" /> のいずれでもありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Boolean" /> としての要素の値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>現在の JSON 数値を <see cref="T:System.Byte" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Byte" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Byte" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>バイト配列として要素の値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値は Base64 テキストとしてエンコードされていないため、バイトにデコードできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>バイト配列としてデコードされた値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>要素の値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.DateTime" /> として読み取ることはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.DateTime" /> としての要素の値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>要素の値を <see cref="T:System.DateTimeOffset" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.DateTimeOffset" /> として読み取ることはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.DateTimeOffset" /> としての要素の値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>現在の JSON 数値を <see cref="T:System.Decimal" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Decimal" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Decimal" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>現在の JSON 数値を <see cref="T:System.Double" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Double" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Double" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>要素の値を <see cref="T:System.Guid" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Guid" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Guid" /> としての要素の値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>現在の JSON 数値を <see cref="T:System.Int16" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Int16" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Int16" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>現在の JSON 数値を <see cref="T:System.Int32" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Int32" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Int32" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>現在の JSON 数値を <see cref="T:System.Int64" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Int64" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Int64" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>
        <paramref name="utf8PropertyName" /> によって識別される必須プロパティの値を表す <see cref="T:System.Text.Json.JsonElement" /> を取得します。</summary>
      <param name="utf8PropertyName">返されるプロパティの名前の UTF-8 表現 (バイト オーダー マーク (BOM) なし)。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">要求された名前のプロパティは見つかりませんでした。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>要求されたプロパティの値を表す <see cref="T:System.Text.Json.JsonElement" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>
        <paramref name="propertyName" /> によって識別される必須プロパティの値を表す <see cref="T:System.Text.Json.JsonElement" /> を取得します。</summary>
      <param name="propertyName">値が返されるプロパティの名前。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">要求された名前のプロパティは見つかりませんでした。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>要求されたプロパティの値を表す <see cref="T:System.Text.Json.JsonElement" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>
        <paramref name="propertyName" /> によって識別される必須プロパティの値を表す <see cref="T:System.Text.Json.JsonElement" /> を取得します。</summary>
      <param name="propertyName">値が返されるプロパティの名前。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">要求された名前のプロパティは見つかりませんでした。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>要求されたプロパティの値を表す <see cref="T:System.Text.Json.JsonElement" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>この値を裏付ける元の入力データを表す文字列を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>この値を裏付ける元の入力データ。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>現在の JSON 数値を <see cref="T:System.SByte" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.SByte" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.SByte" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>現在の JSON 数値を <see cref="T:System.Single" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.Single" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.Single" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>要素の値を <see cref="T:System.String" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> が <see cref="F:System.Text.Json.JsonValueKind.String" /> または <see cref="F:System.Text.Json.JsonValueKind.Null" /> のいずれでもありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.String" /> としての要素の値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>現在の JSON 数値を <see cref="T:System.UInt16" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.UInt16" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.UInt16" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>現在の JSON 数値を <see cref="T:System.UInt32" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.UInt32" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.UInt32" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>現在の JSON 数値を <see cref="T:System.UInt64" /> として取得します。</summary>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値を <see cref="T:System.UInt64" /> として表すことはできません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>
        <see cref="T:System.UInt64" /> としての現在の JSON 数値。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>値の型に適した現在の値の文字列表現を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>値の型に適した現在の値の文字列表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>現在の JSON 数値を <see cref="T:System.Byte" /> として表現しようと試みます。</summary>
      <param name="value">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価のバイトが格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Byte" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Base64 でエンコードされていると想定として、現在の JSON 文字列をバイト配列として表現しようとします。</summary>
      <param name="value">メソッドが成功した場合、Base64 テキストのデコードされたバイナリ表現が含まれます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>トークン値全体が有効な Base64 テキストとしてエンコードされ、正常にバイトにデコードできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>現在の JSON 文字列を <see cref="T:System.DateTime" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 文字列と同等の日時の値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>文字列を <see cref="T:System.DateTime" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>現在の JSON 文字列を <see cref="T:System.DateTimeOffset" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 文字列と同等の日時が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>文字列を <see cref="T:System.DateTimeOffset" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>現在の JSON 数値を <see cref="T:System.Decimal" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値の 10 進数に相当するものが格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Decimal" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>現在の JSON 数値を <see cref="T:System.Double" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値と同等の倍精度浮動小数点値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Double" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>現在の JSON 文字列を <see cref="T:System.Guid" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 文字列と同等の GUID が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>文字列を <see cref="T:System.Guid" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>現在の JSON 数値を <see cref="T:System.Int16" /> として表現しようと試みます。</summary>
      <param name="value">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価の 16 ビット整数が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Int16" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>現在の JSON 数値を <see cref="T:System.Int32" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値と同等の 32 ビット整数値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Int32" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>現在の JSON 数値を <see cref="T:System.Int64" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値と同等の 64 ビット整数値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Int64" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>現在のオブジェクトで <paramref name="utf8PropertyName" /> という名前のプロパティを探し、そのようなプロパティが存在するかどうかを示す値を返します。 プロパティが存在する場合、メソッドではその値を <paramref name="value" /> 引数に割り当てます。</summary>
      <param name="utf8PropertyName">返されるプロパティの名前の UTF-8 (バイト オーダー マーク (BOM) なし) 表現。</param>
      <param name="value">特定されたプロパティの値を受け取ります。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>プロパティが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>現在のオブジェクトで <paramref name="propertyName" /> という名前のプロパティを探し、そのようなプロパティが存在するかどうかを示す値を返します。 プロパティが存在する場合、メソッドではその値を <paramref name="value" /> 引数に割り当てます。</summary>
      <param name="propertyName">検索するプロパティの名前。</param>
      <param name="value">このメソッドから戻るときに、指定したプロパティの値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>プロパティが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>現在のオブジェクトで <paramref name="propertyName" /> という名前のプロパティを探し、そのようなプロパティが存在するかどうかを示す値を返します。 プロパティが存在する場合、その値は <paramref name="value" /> 引数に割り当てられています。</summary>
      <param name="propertyName">検索するプロパティの名前。</param>
      <param name="value">このメソッドから戻るときに、指定したプロパティの値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Object" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>プロパティが見つかった場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>現在の JSON 数値を <see cref="T:System.SByte" /> として表現しようと試みます。</summary>
      <param name="value">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価の符号付きバイトが格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.SByte" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>現在の JSON 数値を <see cref="T:System.Single" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値と同等の単精度浮動小数点値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.Single" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>現在の JSON 数値を <see cref="T:System.UInt16" /> として表現しようと試みます。</summary>
      <param name="value">メソッドから制御が戻る時点で、変換が成功した場合は、現在の JSON 数値と等価の符号なし 16 ビット整数が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.UInt16" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>現在の JSON 数値を <see cref="T:System.UInt32" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値と同等の 32 ビット符号なし整数値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.UInt32" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>現在の JSON 数値を <see cref="T:System.UInt64" /> として表現しようと試みます。</summary>
      <param name="value">このメソッドから戻るときに、現在の JSON 数値と同等の 64 ビット符号なし整数値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Number" /> ではありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>数値を <see cref="T:System.UInt64" /> として表現できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>UTF-8 でエンコードされたバイト スパンによって表されるテキストを、この要素の文字列値と比較します。</summary>
      <param name="utf8Text">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <returns>この要素の文字列値に <paramref name="utf8Text" /> と同じ UTF-8 エンコードがある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>指定された読み取り専用の文字スパンを、この要素の文字列値と比較します。</summary>
      <param name="text">比較対象のテキスト。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <returns>この要素の文字列値が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>指定された文字列を、この要素の文字列値と比較します。</summary>
      <param name="text">比較対象のテキスト。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.String" /> ではありません。</exception>
      <returns>この要素の文字列値が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>要素を指定されたライターに JSON 値として書き込みます。</summary>
      <param name="writer">要素を書き込むライター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Undefined" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>現在の値が <see cref="F:System.Text.Json.JsonValueKind.Array" /> の場合、指定されたインデックスの値を取得します。</summary>
      <param name="index">項目のインデックス。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は <see cref="F:System.Text.Json.JsonValueKind.Array" /> ではありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> が [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()) という範囲内にありません。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>指定したインデックス位置にある値。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>現在の JSON 値の型を取得します。</summary>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
      <returns>現在の JSON 値の型。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>JSON 配列のコンテンツの列挙子を表します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>この <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" /> インスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>配列の反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>列挙子をコレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる <see cref="T:System.Text.Json.JsonElement" /> の配列の列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>JSON オブジェクトのプロパティの列挙子を表します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>この <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" /> インスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>オブジェクトのプロパティを反復処理する列挙子を返します。</summary>
      <returns>オブジェクトの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>列挙子をコレクションの次の要素に進めます。</summary>
      <returns>列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>このコレクションの反復処理に使用できる <see cref="T:System.Text.Json.JsonProperty" /> オブジェクトの列挙子。</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>列挙子の現在位置にあるコレクション内の要素を取得します。</summary>
      <returns>コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>UTF-8 または UTF-16 でエンコードされたテキストを JSON に最適なフォームに変換するメソッドを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>UTF-8 テキスト値を JSON 文字列としてエンコードします。</summary>
      <param name="utf8Value">JSON でエンコードされたテキストに変換するための UTF-8 でエンコードされたテキスト。</param>
      <param name="encoder">文字列をエスケープするときに使用するエンコーダー、または既定のエンコーダーを使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> が大きすぎます。

- または -

<paramref name="utf8Value" /> に無効な UTF-8 バイトが含まれています。</exception>
      <returns>エンコードされた JSON テキスト。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>指定されたテキスト値を JSON 文字列としてエンコードします。</summary>
      <param name="value">JSON でエンコードされたテキストに変換する値。</param>
      <param name="encoder">文字列をエスケープするときに使用するエンコーダー、または既定のエンコーダーを使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が大きすぎます。

- または -

<paramref name="value" /> に無効な UTF-16 文字が含まれています。</exception>
      <returns>エンコードされた JSON テキスト。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>JSON 文字列として文字列テキスト値をエンコードします。</summary>
      <param name="value">JSON でエンコードされたテキストに変換する値。</param>
      <param name="encoder">文字列をエスケープするときに使用するエンコーダー、または既定のエンコーダーを使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が大きすぎます。

- または -

<paramref name="value" /> に無効な UTF-16 文字が含まれています。</exception>
      <returns>エンコードされた JSON テキスト。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>このインスタンスと、指定したオブジェクトの値が同一かどうかを判断します。<see cref="T:System.Text.Json.JsonEncodedText" /> インスタンスを指定する必要があります。</summary>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
      <returns>現在のインスタンスと <paramref name="obj" /> が等しい場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>このインスタンスと、指定した別の <see cref="T:System.Text.Json.JsonEncodedText" /> インスタンスの値が同一かどうかを判断します。</summary>
      <param name="other">このインスタンスと比較するオブジェクト。</param>
      <returns>このインスタンスの値と <paramref name="other" /> の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>この <see cref="T:System.Text.Json.JsonEncodedText" /> のハッシュ コードを返します。</summary>
      <returns>対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>このインスタンスの値を <see cref="T:System.String" /> に変換します。</summary>
      <returns>基になる UTF-16 でエンコードされた文字列。</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>事前にエンコードされた JSON テキストを UTF-8 でエンコードした表現を取得します。</summary>
      <returns>事前にエンコードされた JSON テキストの UTF-8 でエンコードされた表現。</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>無効な JSON テキストが見つかったとき、定義された最大深度が渡されたとき、あるいはオブジェクトのプロパティの型と JSON テキストの間に互換性がないときにスローされるカスタムの例外オブジェクトを定義します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>
        <see cref="T:System.Text.Json.JsonException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使用して新しい例外オブジェクトを作成します。</summary>
      <param name="info">スローされた例外に関するシリアル化されたオブジェクト データ。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報を含むオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Text.Json.JsonException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">コンテキスト固有のエラー メッセージ。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと、この例外の原因である内部例外への参照を使用して、<see cref="T:System.Text.Json.JsonException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">コンテキスト固有のエラー メッセージ。</param>
      <param name="innerException">現在の例外を引き起こした例外。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>ユーザーにエラー情報を伝えるための新しい例外オブジェクトを作成します。</summary>
      <param name="message">コンテキスト固有のエラー メッセージ。</param>
      <param name="path">無効な JSON が検出されたパス。</param>
      <param name="lineNumber">逆シリアル化したとき、無効な JSON が見つかった行番号 (0 から開始)。</param>
      <param name="bytePositionInLine">無効な JSON が見つかった現在の行 (0 から開始) 内のバイト数。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>指定の内部例外が含まれ、ユーザーにエラー情報を伝える新しい例外オブジェクトを作成します。</summary>
      <param name="message">コンテキスト固有のエラー メッセージ。</param>
      <param name="path">無効な JSON が検出されたパス。</param>
      <param name="lineNumber">逆シリアル化したとき、無効な JSON が見つかった行番号 (0 から開始)。</param>
      <param name="bytePositionInLine">無効な JSON が見つかった現在の行 (0 から開始) 内のバイト数。</param>
      <param name="innerException">現在の例外を引き起こした例外。</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>例外に関する情報を含む <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info">スローされた例外に関するシリアル化されたオブジェクト データ。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報を含むオブジェクト。</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>例外発生前に現在の行から読み取られたバイト数 (0 から開始) を取得します。</summary>
      <returns>例外の前に現在の行で読み取られたバイト数の0から始まる数。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>例外発生前に読み取られた行数 (0 から開始) を取得します。</summary>
      <returns>例外の前に読み取られた、0から始まる行数。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>現在の例外を説明するメッセージを取得します。</summary>
      <returns>現在の例外を説明するエラー メッセージ。</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>例外が発生した JSON 内のパスを取得します。</summary>
      <returns>例外が発生した JSON 内のパス。</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>文字列ベースの名前を、キャメルケース形式などの別の形式に変換するために使用される、名前付けポリシーを決定します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>
        <see cref="T:System.Text.Json.JsonNamingPolicy" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>派生クラスでオーバーライドされると、ポリシーに従って指定された名前を変換します。</summary>
      <param name="name">変換対象の名前。</param>
      <returns>変換された名前。</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>キャメルケース形式の名前付けポリシーを取得します。</summary>
      <returns>Camel 形式の文字種の名前付けポリシー。</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>JSON オブジェクトの単一のプロパティを表します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>指定された UTF-8 でエンコードされたテキストを、このプロパティの名前と比較します。</summary>
      <param name="utf8Text">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="T:System.Type" /> は <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません。</exception>
      <returns>このプロパティの名前が <paramref name="utf8Text" /> と同じ UTF-8 エンコードである場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>指定されたテキストを文字スパンとして、このプロパティの名前と比較します。</summary>
      <param name="text">比較対象のテキスト。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="T:System.Type" /> は <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません。</exception>
      <returns>このプロパティの名前が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>指定された文字列を、このプロパティの名前と比較します。</summary>
      <param name="text">比較対象のテキスト。</param>
      <exception cref="T:System.InvalidOperationException">この値の <see cref="T:System.Type" /> は <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません。</exception>
      <returns>このプロパティの名前が <paramref name="text" /> と一致する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>デバッグ目的でプロパティの文字列表現を指定します。</summary>
      <returns>宣言の開始の引用符から始まり、値の一部である最後の文字で終わる、プロパティの解釈されていない値を含む文字列。</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>プロパティを、名前付き JSON オブジェクト プロパティとして提供されたライターに書き込みます。</summary>
      <param name="writer">プロパティを書き込むライター。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> は大きすぎるため JSON オブジェクトプロパティとはなりません。</exception>
      <exception cref="T:System.InvalidOperationException">この JSON プロパティの <see cref="P:System.Text.Json.JsonProperty.Value" /> の <see cref="P:System.Text.Json.JsonElement.ValueKind" /> は無効な JSON となることがあります。</exception>
      <exception cref="T:System.ObjectDisposedException">親 <see cref="T:System.Text.Json.JsonDocument" /> は破棄されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>このプロパティの名前を取得します。</summary>
      <returns>このプロパティの名前。</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>このプロパティの値を取得します。</summary>
      <returns>このプロパティの値。</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>JSON の読み取り時にカスタム動作を定義する機能をユーザーに提供します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>読み取られる JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを定義する値を取得または設定します。</summary>
      <returns>
        <see langword="true" /> 追加のコンマが許可される場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>JSON データを読み取るときに <see cref="T:System.Text.Json.Utf8JsonReader" /> がコメントを処理する方法を決定する値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙のメンバーではない値にプロパティを設定しようとしています。</exception>
      <returns>コメントの処理方法を示す列挙値の1つ。</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>JSON の読み取り時に許可される最大深度を取得または設定します。既定値 (つまり 0) は、最大深度が 64 であることを示します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">最大深度を負の値に設定しようとしています。</exception>
      <returns>JSON を読み取るときに許可される最大深度。</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>関連するすべての状態情報を保持および保存する不透明な型を定義します。これは、不完全なデータを処理した後で読み取りを続行する場合に、<see cref="T:System.Text.Json.Utf8JsonReader" /> に指定する必要があります。</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>新しい <see cref="T:System.Text.Json.JsonReaderState" /> インスタンスを作成します。</summary>
      <param name="options">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従い (JSON 内のコメントは無効です)、最大 64 の深度まで読み取ります。</param>
      <exception cref="T:System.ArgumentException">最大深度が、正でない値 (&lt; 0) に設定されています。</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>JSON 仕様への厳格な準拠 (これが既定の動作) から逸脱する場合がある <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体を使用して JSON データを読み取る際に使用するカスタム動作を取得します。</summary>
      <returns>JSON データを読み取るときに使用するカスタム動作。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>オブジェクトまたは値型を JSON にシリアル化したり、JSON をオブジェクトまたは値型に逆シリアル化したりする機能を提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに解析します。</summary>
      <param name="utf8Json">解析対象の JSON テキスト。</param>
      <param name="returnType">変換元または変換先のオブジェクトの型。</param>
      <param name="options">解析中の動作を制御するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。

- または -

<typeparamref name="returnType" /> は JSON と互換性がありません。

- または -

1 つの JSON 値を超えるデータがスパンに残っています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <paramref name="returnType" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>単一の JSON 値を表すテキストを、指定された型のインスタンスに解析します。</summary>
      <param name="json">解析対象の JSON テキスト。</param>
      <param name="returnType">変換元または変換先のオブジェクトの型。</param>
      <param name="options">解析中の動作を制御するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。
          
- または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

- または -

1 つの JSON 値を超えるデータが文字列に残っています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <paramref name="returnType" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>提供されたリーダーから 1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取り、それを指定された型のインスタンスに変換します。</summary>
      <param name="reader">JSON の読み取り元のリーダー。</param>
      <param name="returnType">変換元または変換先のオブジェクトの型。</param>
      <param name="options">読み取り中にシリアライザーの動作を制御するオプション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。
          
- または -

<typeparamref name="returnType" /> は JSON と互換性がありません。

- または -

リーダーから値を読み取ることができませんでした。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> で、サポートされていないオプションが使用されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <paramref name="returnType" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</summary>
      <param name="utf8Json">解析対象の JSON テキスト。</param>
      <param name="options">解析中の動作を制御するオプション。</param>
      <typeparam name="TValue">UTF-8 でエンコードされたテキストの対象の型。</typeparam>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。

- または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

- または -

1 つの JSON 値を超えるデータがスパンに残っています。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <typeparamref name="TValue" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>単一の JSON 値を表すテキストを、ジェネリック型パラメーターで指定された型のインスタンスに解析します。</summary>
      <param name="json">解析対象の JSON テキスト。</param>
      <param name="options">解析中の動作を制御するオプション。</param>
      <typeparam name="TValue">JSON 値の対象の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。

- または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

- または -

1 つの JSON 値を超えるデータが文字列に残っています。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <typeparamref name="TValue" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>提供されたリーダーから、ジェネリック型パラメーターで指定された型のインスタンスに、1 つの JSON 値 (オブジェクトまたは配列を含む) を読み取ります。</summary>
      <param name="reader">JSON の読み取り元のリーダー。</param>
      <param name="options">読み取り中にシリアライザーの動作を制御するオプション。</param>
      <typeparam name="TValue">JSON 値の対象の型。</typeparam>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。

- または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

- または -

リーダーから値を読み取ることができませんでした。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> で、サポートされていないオプションが使用されています。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <typeparamref name="TValue" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>単一の JSON 値を表す UTF-8 エンコード テキストを、指定された型のインスタンスに、非同期に読み取ります。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json">解析対象の JSON データ。</param>
      <param name="returnType">変換元または変換先のオブジェクトの型。</param>
      <param name="options">読み取り中の動作を制御するオプション。</param>
      <param name="cancellationToken">読み取り操作を取り消すために使用できるキャンセル トークン。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> または <paramref name="returnType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。

- または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

- または -

ストリームにデータが残っています。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="returnType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>JSON 値の <paramref name="returnType" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>単一の JSON 値を表す UTF-8 エンコード テキストを、ジェネリック型パラメーターで指定された型のインスタンスに、非同期に読み取ります。 ストリームは最後まで読み取られます。</summary>
      <param name="utf8Json">解析対象の JSON データ。</param>
      <param name="options">読み取り中の動作を制御するオプション。</param>
      <param name="cancellationToken">読み取り操作を取り消すために使用できるトークン。</param>
      <typeparam name="TValue">JSON 値の対象の型。</typeparam>
      <exception cref="T:System.Text.Json.JsonException">JSON が無効です。

- または -

<typeparamref name="TValue" /> は JSON と互換性がありません。

- または -

ストリームにデータが残っています。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> は <see langword="null" /> です。</exception>
      <returns>JSON 値の <typeparamref name="TValue" /> 表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>指定した型の値を JSON 文字列に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="inputType">変換対象の <paramref name="value" /> の型。</param>
      <param name="options">変換動作を制御するオプション。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> は <paramref name="value" /> と互換性がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>値の JSON 文字列表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>指定された型の JSON 表現を指定されたライターに書き込みます。</summary>
      <param name="writer">書き込み先の JSON ライター。</param>
      <param name="value">変換して書き込む値。</param>
      <param name="inputType">変換対象の <paramref name="value" /> の型。</param>
      <param name="options">シリアル化動作を制御するオプション。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> は <paramref name="value" /> と互換性がありません</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> または <paramref name="inputType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>ジェネリック型パラメーターで指定された型の値を JSON 文字列に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="options">シリアル化動作を制御するオプション。</param>
      <typeparam name="TValue">シリアル化する値の型。</typeparam>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>値の JSON 文字列表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>ジェネリック型パラメーターで指定された型の JSON 表現を指定されたライターに書き込みます。</summary>
      <param name="writer">書き込み先の JSON ライター。</param>
      <param name="value">変換して書き込む値。</param>
      <param name="options">シリアル化動作を制御するオプション。</param>
      <typeparam name="TValue">シリアル化する値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、指定されたストリームに書き込みます。</summary>
      <param name="utf8Json">書き込み先の UTF-8 ストリーム。</param>
      <param name="value">変換する値。</param>
      <param name="inputType">変換対象の <paramref name="value" /> の型。</param>
      <param name="options">シリアル化動作を制御するオプション。</param>
      <param name="cancellationToken">書き込み操作を取り消すために使用できるトークン。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> は <paramref name="value" /> と互換性がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> または <paramref name="inputType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>ジェネリック型パラメーターによって指定された型の値を UTF-8 でエンコードされた JSON テキストに非同期に変換し、ストリームに書き込みます。</summary>
      <param name="utf8Json">書き込み先の UTF-8 ストリーム。</param>
      <param name="value">変換する値。</param>
      <param name="options">シリアル化動作を制御するオプション。</param>
      <param name="cancellationToken">書き込み操作を取り消すために使用できるトークン。</param>
      <typeparam name="TValue">シリアル化する値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>非同期の書き込み操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>指定された型の値を、UTF-8 バイトとしてエンコードされた JSON 文字列に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="inputType">変換対象の <paramref name="value" /> の型。</param>
      <param name="options">変換動作を制御するオプション。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> は <paramref name="value" /> と互換性がありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="inputType" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>ジェネリック型パラメーターで指定された型の値を、UTF-8 バイト形式でエンコードされた JSON 文字列に変換します。</summary>
      <param name="value">変換する値。</param>
      <param name="options">変換動作を制御するオプション。</param>
      <typeparam name="TValue">値の型。</typeparam>
      <exception cref="T:System.NotSupportedException">
        <typeparamref name="TValue" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>UTF-8 バイト形式でエンコードされた値の JSON 文字列表現。</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary>
        <see cref="T:System.Text.Json.JsonSerializerOptions" /> によって使用される既定のオプションを指定します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary>汎用の値を使用する必要があることを指定します。 これらは、<see cref="T:System.Text.Json.JsonSerializerDefaults" /> が指定されていない場合に適用される設定と同じです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary>Web ベースのシナリオにより適した値を使用する必要があることを指定します。</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>
        <see cref="T:System.Text.Json.JsonSerializer" /> で使用されるオプションを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>
        <see cref="T:System.Text.Json.JsonSerializerOptions" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary>指定された <see cref="T:System.Text.Json.JsonSerializerOptions" /> によって決定されるオプションの定義済みのセットを使用して、<see cref="T:System.Text.Json.JsonSerializerDefaults" /> の新しいインスタンスを構築します。</summary>
      <param name="defaults">判断する <see cref="T:System.Text.Json.JsonSerializerDefaults" />。</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary>オプションを <see cref="T:System.Text.Json.JsonSerializerOptions" /> インスタンスから新しいインスタンスにコピーします。</summary>
      <param name="options">オプションのコピー元のオプション インスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>指定された型のコンバーターを返します。</summary>
      <param name="typeToConvert">コンバーターを返す型。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="typeToConvert" /> に対して構成された <see cref="System.Text.Json.Serialization.JsonConverter" /> から無効なコンバーターが返されました。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="typeToConvert" /> またはそのシリアル化可能なメンバーに対して互換性のある <see cref="System.Text.Json.Serialization.JsonConverter" /> はありません。</exception>
      <returns>指定された型をサポートする最初のコンバーター。コンバーターがない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>逆シリアル化される JSON ペイロード内でオブジェクトまたは配列の JSON 値の一覧の終わりにある余分なコンマが許可 (および無視) されるかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <returns>
        <see langword="true" /> オブジェクトまたは配列内の JSON 値の一覧の末尾に余分なコンマがある場合 (無視されます)。 <see langword="false" /> それ以外の場合は。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>登録されたユーザー定義のコンバーターの一覧を取得します。</summary>
      <returns>カスタムコンバーターの一覧。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>一時バッファーの作成時に使用する、既定のバッファー サイズ (バイト単位) を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException">バッファー サイズは 1 未満です。</exception>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <returns>既定のバッファーサイズ (バイト単位)。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary>シリアル化または逆シリアル化の間に既定値を持つプロパティを無視するかどうかを決定する条件を指定します。
既定値は <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" /> です。</summary>
      <exception cref="T:System.ArgumentException">このプロパティは <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" /> に設定されています。</exception>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されます。

- または -

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> が <see langword="true" /> に設定されています。 これらのプロパティを一緒に使用することはできません。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> キーの名前を、camel 形式などの別の形式に変換するために使用されるポリシーを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" />キーの名前を別の形式に変換するために使用されるポリシー。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>文字列をエスケープするときに使用するエンコーダーを取得または設定します。既定のエンコーダーを使用する場合は <see langword="null" /> を設定します。</summary>
      <returns>JavaScript 文字エンコーディング。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>シリアル化および逆シリアル化の間に <see langword="null" /> 値を無視するかどうかを決定する値を取得または設定します。 既定値は <see langword="false" /> です。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。

- または -

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> が既定値以外の値に設定されています。 これらのプロパティを一緒に使用することはできません。</exception>
      <returns>
        <see langword="true" /> シリアル化および逆シリアル化中に null 値を無視する場合は。それ以外の場合は、「langword = "false"/」を参照してください &gt; 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary>シリアル化の間に読み取り専用フィールドを無視するかどうかを指定します。 <see langword="readonly" /> キーワードでマークされていないプロパティは、読み取り専用です。 既定値は <see langword="false" /> です。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されます。</exception>
      <returns>
        <see langword="true" /> シリアル化中に読み取り専用フィールドを無視する場合は。 <see langword="false" /> それ以外の場合は。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>シリアル化中に読み取り専用プロパティを無視するかどうかを決定する値を取得します。 既定値は <see langword="false" /> です。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <returns>
        <see langword="true" /> シリアル化中に読み取り専用プロパティを無視する場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary>フィールドがシリアル化と逆シリアル化で処理されるかどうかを決定します。
既定値は <see langword="false" /> です。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されます。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>JSON をシリアル化または逆シリアル化するときに許容される最大の深さを取得または設定します。既定値は 0 で、最大の深さが 64 であることを示します。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">最大深度が負の値に設定されています。</exception>
      <returns>JSON をシリアル化または逆シリアル化するときに許容される最大の深さ。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary>シリアル化または逆シリアル化のときに数値型を処理する方法を指定します。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されます。</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>逆シリアル化中に、プロパティの名前で大文字と小文字を区別しない比較が使用されるかどうかを決定する値を取得または設定します。 既定値は <see langword="false" /> です。</summary>
      <returns>
        <see langword="true" /> 大文字と小文字を区別しない比較を使用してプロパティ名を比較するにはそれ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>オブジェクトのプロパティの名前を、キャメルケース形式などの別の形式に変換するために使用されるポリシーを指定する値を取得または設定するか、プロパティ名を変更しない場合は <see langword="null" /> にします。</summary>
      <returns>プロパティの名前付けポリシー <see langword="null" /> 。プロパティ名を変更しない場合は。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>逆シリアル化中にコメントを処理する方法を定義する値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">コメント処理列挙型が、サポートされていない (または <see cref="T:System.Text.Json.JsonCommentHandling" /> 列挙型の範囲内ではない) 値に設定されています。</exception>
      <returns>コメントを許可するか、禁止するか、またはスキップするかを示す値。</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary>JSON の読み取りおよび書き込み時に、オブジェクト参照がどのように処理されるかを構成します。</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>JSON で整形出力を使用する必要があるかどうかを定義する値を取得または設定します。 既定では、JSON は余分な空白なしでシリアル化されます。</summary>
      <exception cref="T:System.InvalidOperationException">このプロパティは、シリアル化または逆シリアル化が発生した後に設定されました。</exception>
      <returns>
        <see langword="true" /> JSON がシリアル化で非常に印刷される必要がある場合は。それ以外の場合は <see langword="false" /> 。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>JSON テキストを構成するさまざまな JSON トークンを定義します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>トークン型はコメント文字列です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>トークン型は JSON 配列の終わりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>トークン型は JSON オブジェクトの終わりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>トークン型は JSON リテラル false です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>(<see cref="F:System.Text.Json.JsonTokenType.Null" /> とは異なり) 値がありません。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>トークン型は JSON リテラル null です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>トークン型は JSON 番号です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>トークン型は JSON プロパティ名です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>トークン型は JSON 配列の始まりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>トークン型は JSON オブジェクトの始まりです。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>トークン型は JSON 文字列です。</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>トークン型は JSON リテラル true です。</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>JSON 値のデータ型を指定します。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>JSON 配列。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>JSON 値の false。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>JSON 値の null。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>JSON の数値。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>JSON のオブジェクト。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>JSON の文字列。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>JSON 値の true。</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>(<see cref="F:System.Text.Json.JsonValueKind.Null" /> とは異なり) 値がありません。</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> を使用して JSON を書き込む際のカスタム動作をユーザーが定義することができます。</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>文字列をエスケープするときに使用するエンコーダーを取得または設定します。既定のエンコーダーを使用する場合は <see langword="null" /> を設定します。</summary>
      <returns>エスケープ動作をオーバーライドするために使用される JavaScript 文字エンコーダー。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> が JSON 出力を書式設定する必要があるかどうかを示す値を、取得または設定します。この書式設定には、入れ子になった JSON トークンのインデント、新規行の追加、プロパティ名と値の間への空白の挿入などが含まれます。</summary>
      <returns>
        <see langword="true" /> JSON 出力を書式設定するには <see langword="false" /> 余分な空白を使用せずに書き込む場合は。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> が構造検証をスキップし、無効な JSON の書き込みをユーザーに許可する必要があるかどうかを示す値を、取得または設定します。</summary>
      <returns>
        <see langword="true" /> 構造検証をスキップして無効な JSON を許可するには <see langword="false" /><see cref="T:System.InvalidOperationException" /> 無効な JSON の書き込みを試行したときにをスローする場合は。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>シリアル化属性のための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonAttribute" /> の新しいインスタンスを作成します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary>コンストラクターに配置されると、逆シリアル化時にコンストラクターを使用して型のインスタンスを作成する必要があることを示します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>オブジェクトまたは値と JSON の間で変換を行います。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>派生クラスでオーバーライドされた場合、コンバーター インスタンスで指定されたオブジェクト型を変換できるかどうかを判断します。</summary>
      <param name="typeToConvert">このコンバーター インスタンスで変換できるかどうかを確認するオブジェクトの型。</param>
      <returns>インスタンスで指定されたオブジェクト型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>オブジェクトまたは値と JSON の間で変換を行います。</summary>
      <typeparam name="T">コンバーターによって処理されるオブジェクトまたは値の型。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>新しい <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> インスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>指定した型を変換できるかどうかを判断します。</summary>
      <param name="typeToConvert">比較対象の型。</param>
      <returns>型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>JSON を読み取り、<typeparamref name="T" /> 型に変換します。</summary>
      <param name="reader">リーダー。</param>
      <param name="typeToConvert">変換する型。</param>
      <param name="options">使用するシリアル化オプションを指定するオブジェクト。</param>
      <returns>変換された値。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>指定された値を JSON として書き込みます。</summary>
      <param name="writer">書き込み先のライター。</param>
      <param name="value">JSON に変換する値。</param>
      <param name="options">使用するシリアル化オプションを指定するオブジェクト。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary>シリアル化時に <see langword="null" /> をコンバーターに渡必要があるかどうか、および逆シリアル化時に <see cref="F:System.Text.Json.JsonTokenType.Null" /> を渡す必要があるかどうかを示します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>プロパティまたは型に配置された場合、使用するコンバーターの型が指定されます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>指定したコンバーターの型を使用して、<see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="converterType">コンバーターの型。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>派生クラスでオーバーライドされ、<see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> が <see langword="null" /> である場合、追加の状態を渡すために、派生クラスが <see cref="T:System.Text.Json.Serialization.JsonConverter" /> を作成するのを許可します。</summary>
      <param name="typeToConvert">コンバーターの型。</param>
      <returns>カスタム コンバーター。</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> の型を取得します。型を指定せずに作成されている場合は <see langword="null" /> を取得します。</summary>
      <returns>の型 <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /><see langword="null" /> 。型を指定せずに作成された場合は。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>ファクトリ パターンを使用して複数の型の変換をサポートします。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>派生クラスでオーバーライドされた場合、<see cref="T:System.Text.Json.Serialization.JsonConverterFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>指定された型のコンバーターを作成します。</summary>
      <param name="typeToConvert">コンバーターによって処理される型。</param>
      <param name="options">使用するシリアル化オプション。</param>
      <returns>
        <typeparamref name="T" /> が <paramref name="typeToConvert" /> と互換性のあるコンバーター。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>型 <see cref="T:System.Collections.Generic.IDictionary`2" /> のプロパティに置かれているとき、一致するメンバーがないプロパティは逆シリアル化中にそのディクショナリに追加され、シリアル化中に書き込まれます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> クラスの新しいインスタンスを生成します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>プロパティのシリアル化または逆シリアル化を防ぎます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary>プロパティが無視される前に満たす必要がある条件を指定します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary>シリアル化および逆シリアル化時に <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> によりプロパティを無視する方法を制御します。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary>プロパティは常に無視されます。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary>プロパティは、<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> の構成に関係なく、常にシリアル化および逆シリアル化されます。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary>
        <see langword="null" /> の場合にのみプロパティは無視されます。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary>値が <see langword="null" /> である場合、プロパティはシリアル化の間無視されます。 これは、参照型のプロパティとフィールドにのみ適用されます。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary>シリアル化および逆シリアル化のためにメンバーが含まれる必要があることを示します。</summary>
      <exception cref="T:System.InvalidOperationException">属性は、パブリックでないプロパティに適用されます。</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary>シリアル化および逆シリアル化のときに、<see cref="T:System.Text.Json.JsonSerializer" /> で数値を処理する方法を決定します。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary>"NaN"、"Infinity"、"-Infinity" の各 <see cref="F:System.Text.Json.JsonTokenType.String" /> トークンは浮動小数点定数として読み取ることができ、これらの定数の <see cref="T:System.Single" /> と <see cref="T:System.Double" /> の値は、対応する JSON 文字列形式として書き込まれます。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary>数値は <see cref="F:System.Text.Json.JsonTokenType.String" /> トークンから読み取ることができます。 <see cref="F:System.Text.Json.JsonTokenType.Number" /> トークンから数値を読み取ることを禁止しません。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary>数値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> トークンからのみ読み取られ、JSON の数値としてのみ書き込まれます (引用符は含まれません)。</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary>数値は、JSON の数値ではなく、JSON 文字列 (引用符を含みます) として書き込まれます。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary>型、プロパティ、またはフィールドに対して指定すると、数値をシリアル化または逆シリアル化するときに使用する必要がある <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" /> の設定を示します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary>
        <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="handling">シリアル化または逆シリアル化するときの数値型の処理方法を指定する列挙値のビットごとの組み合わせ。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary>数値をシリアル化または逆シリアル化するときに使用する設定を示します。</summary>
      <returns>シリアル化および逆シリアル化の設定の数を決定するオブジェクト。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>シリアル化または逆シリアル化の際、JSON に存在するプロパティ名を指定します。 これにより、<see cref="T:System.Text.Json.JsonNamingPolicy" /> によって指定された名前付けポリシーがオーバーライドされます。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>指定したプロパティ名を使用し、<see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> の新しいインスタンスを初期化します。</summary>
      <param name="name">プロパティの名前。</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>プロパティの名前を取得します。</summary>
      <returns>プロパティの名前。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>列挙値と文字列の間の変換を行います。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>整数値を許可する既定の名前付けポリシーを使用して、<see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> クラスのインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>指定された名前付けポリシーと、未定義の列挙値を許可するかどうかを示す値を使用して、<see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" /> クラスのインスタンスを初期化します。</summary>
      <param name="namingPolicy">列挙値を書き込むためのオプションの名前付けポリシー。</param>
      <param name="allowIntegerValues">未定義の列挙値を許可する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 <see langword="true" /> のとき、列挙値が定義されていない場合は、文字列ではなく数値として出力されます。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>指定された型を列挙型に変換できるかどうかを決定します。</summary>
      <param name="typeToConvert">確認する型。</param>
      <returns>型を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>指定された型のコンバーターを作成します。</summary>
      <param name="typeToConvert">コンバーターによって処理される型。</param>
      <param name="options">使用するシリアル化オプション。</param>
      <returns>
        <typeparamref name="T" /> が <paramref name="typeToConvert" /> と互換性のあるコンバーター。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary>このクラスでは、シリアル化および逆シリアル化での <see cref="T:System.Text.Json.JsonSerializer" /> による参照の処理方法が定義されています。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.ReferenceHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary>各シリアル化の呼び出しに使用される <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> を返します。</summary>
      <returns>シリアル化および逆シリアル化に使用する競合回避モジュール。</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary>メタデータ プロパティは、JSON オブジェクトと配列を参照型に逆シリアル化するときに使用され、参照型をシリアル化するときに書き込まれます。 これは、サイクルまたは重複する参照が含まれるオブジェクトからラウンドトリップ可能な JSON を作成するために必要です。</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary>このクラスでは、シリアル化および逆シリアル化での <see cref="T:System.Text.Json.JsonSerializer" /> による参照の処理方法が定義されています。</summary>
      <typeparam name="T">
        <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />各シリアル化または逆シリアル化呼び出しに作成するの型。</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary>指定した <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> インスタンスを作成できる <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" /> ジェネリック クラスの新しいインスタンスを初期化します <typeparam name="T" />。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary>各シリアル化の呼び出しに使用される <typeparamref name="T" /> 型の新しい <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> を作成します。</summary>
      <returns>シリアル化および逆シリアル化に使用する新しい競合回避モジュール。</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary>このクラスでは、シリアル化および逆シリアル化での <see cref="T:System.Text.Json.JsonSerializer" /> による参照の処理方法が定義されています。
シリアル化および逆シリアル化で参照を維持するための主要な動作を定義します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary>
        <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary>指定された ID と値を使用して、参照のバッグにエントリを追加します。
このメソッドは、JSON オブジェクトからの $id メタデータ プロパティが読み取られるときに呼び出されます。</summary>
      <param name="referenceId">JSON オブジェクトまたは配列の識別子。</param>
      <param name="value">JSON オブジェクトの解析結果である CLR 参照型オブジェクトの値。</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary>存在する場合は、指定された値の参照識別子を取得します。それ以外の場合は、新しい ID が割り当てられます。
このメソッドは、CLR オブジェクトが書き込まれる前に呼び出されます。そのため、$id を書き込んでそのプロパティの残りの部分を列挙するか、$ref にして次のオブジェクトにステップインするかを決定できます。</summary>
      <param name="value">ID の取得対象である CLR 参照型オブジェクトの値。</param>
      <param name="alreadyExists">このメソッドから戻った時点で、値への参照が既に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns>指定されたオブジェクトに対する参照 ID。</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary>指定された参照 ID に関連する CLR 参照型オブジェクトを返します。このメソッドは、$ref メタデータプロパティが読み取られるときに呼び出されます。</summary>
      <param name="referenceId">返されたオブジェクトに関連する参照 ID。</param>
      <returns>指定された参照 ID に関連する参照型オブジェクト。</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>UTF-8 でエンコードされた JSON テキストに対する前方参照、読み取り専用のアクセスのための高パフォーマンスの API です。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>UTF-8 でエンコードされたテキストの読み取り専用のシーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</summary>
      <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="isFinalBlock">処理対象のデータ全体が入力シーケンスに含まれていることを示すには <see langword="true" />。後続するデータがある部分的なデータが入力スパンに含まれていることを示すには <see langword="false" />。</param>
      <param name="state">リーダーの状態を格納するオブジェクト。 これがコンストラクターの最初の呼び出しである場合は、既定の状態を渡します。それ以外の場合は、<see cref="T:System.Text.Json.Utf8JsonReader" /> の前のインスタンスから <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> プロパティの値を渡します。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用シーケンスを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="options">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>UTF-8 でエンコードされたテキストの読み取り専用のスパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化し、処理するすべてのテキストが入力に含まれるかどうかを示します。</summary>
      <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="isFinalBlock">処理対象のデータ全体が入力シーケンスに含まれていることを示すには <see langword="true" />。後続するデータがある部分的なデータが入力スパンに含まれていることを示すには <see langword="false" />。</param>
      <param name="state">リーダーの状態を格納するオブジェクト。 これがコンストラクターの最初の呼び出しである場合は、既定の状態を渡します。それ以外の場合は、<see cref="T:System.Text.Json.Utf8JsonReader" /> の前のインスタンスから <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" /> プロパティの値を渡します。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>指定したオプションを使用し、UTF-8 でエンコードされたテキストの読み取り専用スパンを処理する <see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="jsonData">UTF-8 でエンコードされた、処理対象の JSON テキスト。</param>
      <param name="options">JSON RFC とは異なる <see cref="T:System.Text.Json.Utf8JsonReader" /> のカスタマイズされた動作を定義します (たとえば、コメントの処理方法、読み取り時に許容される最大深度など)。 既定で、<see cref="T:System.Text.Json.Utf8JsonReader" /> は JSON RFC に厳密に従います。JSON 内のコメントは無効で、最大深度は 64 です。</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>次の JSON トークン値をソースから <see cref="T:System.Boolean" /> として読み取ります。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンの値はブール値 (つまり、<see cref="F:System.Text.Json.JsonTokenType.True" /> または <see cref="F:System.Text.Json.JsonTokenType.False" />) ではありません。</exception>
      <returns>
        <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.True" /> の場合は <see langword="true" />。<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.False" /> の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>現在の JSON トークン値をソースから <see cref="T:System.Byte" /> として解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
- または -

JSON トークン値は、<see cref="F:System.Byte.MinValue" /> 未満の数値、または <see cref="F:System.Byte.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>UTF-8 でエンコードされたトークンの値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードします。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンの型が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">値は Base64 テキストとしてエンコードされていないため、バイトにデコードできません。

- または -

値に無効な、または 3 つ以上の埋め込み文字が含まれています。

- または -

値が不完全です。 つまり、JSON 文字列の長さが 4 の倍数ではありません。</exception>
      <returns>現在の JSON トークン値を表すバイト配列。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>ソースからの現在の JSON トークン値をコメントとして解析し、<see cref="T:System.String" /> としてトランスコードします。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンがコメントではありません。</exception>
      <returns>現在の JSON トークン値を表すコメント。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTime" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値を <see cref="T:System.DateTime" /> として読み取ることはできません。
        
- または - 
UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTime" /> 値に解析することはできません。

- または -

JSON トークン値がサポートされていない形式です。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時の値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.DateTimeOffset" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値を <see cref="T:System.DateTimeOffset" /> として読み取ることはできません。

- または - 
UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTimeOffset" /> 値に解析することはできません。

- または -

JSON トークン値がサポートされていない形式です。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は日時のオフセット。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Decimal" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値は、<see cref="F:System.Decimal.MinValue" /> 未満の数値、または <see cref="F:System.Decimal.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.Decimal" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Double" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値は、<see cref="F:System.Double.MinValue" /> 未満の数値、または <see cref="F:System.Double.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.Double" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Guid" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値は、GUID でサポートされていない形式です。
        
- または -

UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Guid" /> 値に解析することはできません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を正常に解析できる場合は GUID の値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>現在の JSON トークン値をソースから <see cref="T:System.Int16" /> として解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
- または -

JSON トークン値は、<see cref="F:System.Int16.MinValue" /> 未満の数値、または <see cref="F:System.Int16.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.Int16" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int32" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
            
- または -

JSON トークン値は、<see cref="F:System.Int32.MinValue" /> 未満の数値、または <see cref="F:System.Int32.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.Int32" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Int64" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
            
- または -

JSON トークン値は、<see cref="F:System.Int64.MinValue" /> 未満の数値、または <see cref="F:System.Int64.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.Int64" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>現在の JSON トークン値をソースから <see cref="T:System.SByte" /> として解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
- または -

JSON トークン値は、<see cref="F:System.SByte.MinValue" /> 未満の数値、または <see cref="F:System.SByte.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.SByte" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.Single" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値は、<see cref="F:System.Single.MinValue" /> 未満の数値、または <see cref="F:System.Single.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.Single" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>次の JSON トークン値をソースから読み取り、エスケープ解除し、文字列としてトランスコードします。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" />、<see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> または <see cref="F:System.Text.Json.JsonTokenType.Null" /> ではない)。

- または -

JSON 文字列に無効な UTF-8 バイトまたは無効な UTF-16 サロゲートが含まれています。</exception>
      <returns>文字列に解析されたトークン値。または、<see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> が <see cref="F:System.Text.Json.JsonTokenType.Null" /> の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>現在の JSON トークン値をソースから <see cref="T:System.UInt16" /> として解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークンの値が <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が不正です (たとえば、小数点値が含まれているか、指数表記で記述されています)。
          
- または -

JSON トークン値は、<see cref="F:System.UInt16.MinValue" /> 未満の数値、または <see cref="F:System.UInt16.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.UInt16" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt32" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。

- または -

JSON トークン値は、<see cref="F:System.UInt32.MinValue" /> 未満の数値、または <see cref="F:System.UInt32.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.UInt32" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>次の JSON トークン値をソースから読み取り、それを <see cref="T:System.UInt64" /> に解析します。</summary>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <exception cref="T:System.FormatException">JSON トークン値の数値形式が正しくありません。 たとえば、それに 10 進数が含まれている場合や、それが科学的表記法で記述されている場合が挙げられます。
            
- または -

JSON トークン値は、<see cref="F:System.UInt64.MinValue" /> 未満の数値、または <see cref="F:System.UInt64.MaxValue" /> より大きい数値を表しています。</exception>
      <returns>
        <see cref="T:System.UInt64" /> に解析された、UTF-8 でエンコードされたトークン値。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>次の JSON トークンを入力ソースから読み取ります。</summary>
      <exception cref="T:System.Text.Json.JsonException">JSON RFC では無効な JSON トークンが検出されました。
        
- または -

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
      <returns>トークンが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>現在の JSON トークンの子をスキップします。</summary>
      <exception cref="T:System.InvalidOperationException">リーダーに与えられたデータは一部であり、この後にデータが続きます (つまり、<see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> は <see langword="false" /> です)。</exception>
      <exception cref="T:System.Text.Json.JsonException">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。

- または -

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Byte" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Byte" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>ソースから現在の JSON トークン値を解析し、Base64 でエンコードされた JSON 文字列をバイト配列としてデコードし、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドが返される場合、Base64 テキストの (デコードされた) バイナリ表現が含まれます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークンが <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <returns>トークン値全体が有効な Base64 テキストとしてエンコードされ、正常にバイトにデコードできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.DateTime" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTime" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.DateTimeOffset" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.DateTimeOffset" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Decimal" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Decimal" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Double" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Double" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Guid" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値が <see cref="F:System.Text.Json.JsonTokenType.String" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Guid" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Int16" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int16" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Int32" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int32" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Int64" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Int64" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.SByte" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.SByte" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.Single" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.Single" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.UInt16" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt16" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.UInt32" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt32" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>ソースから現在の JSON トークン値を <see cref="T:System.UInt64" /> として解析し、操作が成功したかどうかを示す値を返します。</summary>
      <param name="value">このメソッドから戻るときに、解析された値が格納されます。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークン値は <see cref="F:System.Text.Json.JsonTokenType.Number" /> ではありません。</exception>
      <returns>UTF-8 でエンコードされたトークン値全体を <see cref="T:System.UInt64" /> に正常に解析できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>現在の JSON トークンの子のスキップを試行します。</summary>
      <exception cref="T:System.Text.Json.JsonException">JSON RFC に基づき、スキップ中、無効な JSON トークンが検出されました。
          
または

現在の深度が、最大深度によって設定された再帰の限度を超えています。</exception>
      <returns>子を正常にスキップできるだけの十分なデータがあった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>読み取り専用バイト スパン内の UTF-8 でエンコードされたテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
      <param name="utf8Text">比較対象の UTF-8 でエンコードされたテキスト。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</exception>
      <returns>ソースの JSON トークン値が UTF-8 でエンコードされた検索テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用文字スパン内のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
      <param name="text">比較対象のテキスト。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</exception>
      <returns>ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>文字列のテキストをソース内のエスケープされていない JSON トークン値と比較し、一致するかどうかを示す値を返します。</summary>
      <param name="text">比較対象のテキスト。</param>
      <exception cref="T:System.InvalidOperationException">JSON トークンは JSON 文字列ではありません (つまり、<see cref="F:System.Text.Json.JsonTokenType.String" /> または <see cref="F:System.Text.Json.JsonTokenType.PropertyName" /> ではありません)。</exception>
      <returns>ソースの JSON トークン値が参照テキストと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスでこれまで消費された合計バイト数を取得します。</summary>
      <returns>これまでに使用されたバイト数の合計です。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>現在のトークンの深度を取得します。</summary>
      <returns>現在のトークンの深さ。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>
        <see cref="T:System.Text.Json.Utf8JsonReader" /> コンストラクターにより多くのデータを渡すのに、<see cref="T:System.Text.Json.Utf8JsonReader" /> の現在の状態を取得します。</summary>
      <returns>現在のリーダーの状態。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>トークン値を取得するために使用する <c>Value</c> プロパティを示す値を取得します。</summary>
      <returns>
        <see langword="true" />
        <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" />トークン値を取得するためにを使用する必要がある場合は <see langword="false" /><see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> 。代わりにを使用する必要がある場合は。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>すべての JSON データが与えられたか、あるいは他にもデータが入ってくるのかを示す <see cref="T:System.Text.Json.Utf8JsonReader" /> のこのインスタンスのモードを取得します。</summary>
      <returns>
        <see langword="true" /> 処理する JSON データ全体を含む入力範囲またはシーケンスを使用してリーダーが構築された場合は。 <see langword="false" /> 入力範囲またはシーケンスを使用してリーダーが構築され、その後に続くデータを含む部分的な JSON データが含まれている場合。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>指定された UTF-8 でエンコードされた入力 ReadOnlySequence&lt;byte&gt; 内の現在の <see cref="T:System.SequencePosition" /> を取得します。<see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan&lt;byte&gt; で構築されている場合は既定の <see cref="T:System.SequencePosition" /> を取得します。</summary>
      <returns>指定した <see cref="T:System.SequencePosition" /> utf-8 でエンコードされた入力 ReadOnlySequence &lt; バイト、 &gt; または <see cref="T:System.SequencePosition" /><see cref="T:System.Text.Json.Utf8JsonReader" /> 構造体が ReadOnlySpan バイトを使用して構築された場合は &lt; 既定値で &gt; ある、現在の。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>最後に処理された JSON トークンの (UTF-8 でエンコードされた指定の入力テキスト内の) 開始位置となるインデックスを取得します。空白はスキップされます。</summary>
      <returns>指定した UTF-8 でエンコードされた入力テキスト内で最後に処理された JSON トークンの開始インデックス。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>UTF-8 でエンコードされた JSON テキスト内で最後に処理された JSON トークンの種類を取得します。</summary>
      <returns>最後に処理された JSON トークンの型。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>トークンが複数のセグメントに含まれている場合にのみ、最後に処理されたトークンの生の値を入力ペイロードの ReadOnlySequence&lt;byte&gt; スライスとして取得します。</summary>
      <returns>バイト読み取り専用シーケンス。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>トークンが 1 つのセグメントに収まる場合、またはリーダーが ReadOnlySpan&lt;byte&gt; に含まれる JSON ペイロードを使用して構築された場合、最後に処理されたトークンの生の値を入力ペイロードの ReadOnlySpan&lt;byte&gt; スライスとして取得します。</summary>
      <returns>バイト型の読み取り専用スパン。</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>UTF-8 でエンコードされた JSON テキストの前方参照、非キャッシュの書き込みのために、高パフォーマンスの API を提供します。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>出力の書き込み先に指定された <see cref="T:System.Buffers.IBufferWriter`1" /> とカスタマイズ オプションを使用して、<see cref="T:System.Text.Json.Utf8JsonWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bufferWriter">JSON テキストの書き込み先。</param>
      <param name="options">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。 既定では、(余分な空白を含まない) 最小限の JSON が書き込まれ、記述されている JSON が JSON RFC に従って構造的に有効であることが検証されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>出力の書き込み先に指定されたストリームとカスタマイズ オプションを使用して、<see cref="T:System.Text.Json.Utf8JsonWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="utf8Json">JSON テキストの書き込み先。</param>
      <param name="options">
        <see cref="T:System.Text.Json.Utf8JsonWriter" /> のカスタマイズされた動作を定義します。 既定では、(余分な空白を含まない) 最小限の JSON が書き込まれ、記述されている JSON が JSON RFC に従って構造的に有効であることが検証されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>まだフラッシュされていない残りの JSON テキストがあればそれをコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>まだフラッシュされていない残りの JSON テキストがあればそれを非同期的にコミットし、現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
      <returns>非同期の破棄操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>これまでに書き込まれた JSON テキストをコミットします。これにより出力先で表示できるようになります。</summary>
      <exception cref="T:System.ObjectDisposedException">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>これまでに書き込まれた JSON テキストを非同期的にコミットします。これにより出力先で表示できるようになります。</summary>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン。 既定値は <see cref="P:System.Threading.CancellationToken.None" /> です。</param>
      <exception cref="T:System.ObjectDisposedException">このインスタンスは破棄されています。</exception>
      <returns>非同期のフラッシュ操作を表すタスク。</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>このインスタンスの内部状態をリセットして、それを再利用できるようにします。</summary>
      <exception cref="T:System.ObjectDisposedException">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>このインスタンスの内部状態をリセットして、<see cref="T:System.Buffers.IBufferWriter`1" /> の新しいインスタンスで再利用できるようにします。</summary>
      <param name="bufferWriter">JSON テキストの書き込み先。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>このインスタンスの内部状態をリセットして、<see cref="T:System.IO.Stream" /> の新しいインスタンスで再利用できるようにします。</summary>
      <param name="utf8Json">JSON テキストの書き込み先。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ObjectDisposedException">このインスタンスは破棄されています。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込むプロパティの UTF-8 でエンコードされた名前。</param>
      <param name="bytes">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="bytes">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、プロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="bytes">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と生バイト値 (Base64 でエンコードされた JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">書き込むプロパティの JSON でエンコードされた名前。</param>
      <param name="bytes">Base64 でエンコードされたテキストとして書き込むバイナリ データ。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>JSON 配列の要素として、Base64 でエンコードされた JSON 文字列として生バイト値を書き込みます。</summary>
      <param name="bytes">JSON 配列の Base64 でエンコードされた JSON 文字列要素として書き込まれるバイナリ データ。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、読み取り専用のバイト範囲として指定されたプロパティ名と <see cref="T:System.Boolean" /> 値 (json リテラル true または false) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、読み取り専用の文字範囲として指定されたプロパティ名と <see cref="T:System.Boolean" /> 値 (json リテラル true または false) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、文字列として指定されたプロパティ名と <see cref="T:System.Boolean" /> 値 (json リテラル true または false) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Boolean" /> 値 (JSON リテラル true または false) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>Json <see cref="T:System.Boolean" /> 配列の要素として値 (json リテラル true または false) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON リテラル true または false として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>UTF-8 テキスト値を JSON コメントとして書き込みます。</summary>
      <param name="utf8Value">JSON コメントとして書き込まれる UTF-8 で<c> / *..* / エンコードされた値...</c></param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。
        
- または -

<paramref name="utf8Value" /> コメントの区切り記号 (つまり、) が含まれてい <c>*/</c> ます。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>UTF-16 テキスト値を JSON コメントとして書き込みます。</summary>
      <param name="value">Utf-8 でエンコードされた JSON コメントとして書き込まれる UTF-16 エンコードされた値<c> / *..* / .</c>..</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。
        
- または -

<paramref name="value" /> コメントの区切り記号 (つまり、) が含まれてい <c>*/</c> ます。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>文字列テキスト値を JSON コメントとして書き込みます。</summary>
      <param name="value">Utf-8 でエンコードされた JSON コメントとして書き込まれる UTF-16 エンコードされた値<c> / *..* / .</c>..</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。
        
- または -

<paramref name="value" /> コメントの区切り記号 (つまり、) が含まれてい <c>*/</c> ます。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>JSON 配列の終了を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>JSON オブジェクトの終了を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、読み取り専用のバイト範囲として指定されたプロパティ名と JSON リテラル null を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、読み取り専用の文字範囲として指定されたプロパティ名と JSON リテラル null を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、文字列として指定されたプロパティ名と JSON リテラル null を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と JSON リテラル null を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>JSON 配列の要素として、JSON リテラル null を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.Double" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.Int32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.Int64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.Single" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Decimal" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Double" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int32" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Int64" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Single" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt32" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.UInt64" /> 値 (JSON 番号) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>JSON 配列の要素として、<see cref="T:System.Decimal" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>JSON 配列の要素として、<see cref="T:System.Double" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>JSON 配列の要素として、<see cref="T:System.Int32" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>JSON 配列の要素として、<see cref="T:System.Int64" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>JSON 配列の要素として、<see cref="T:System.Single" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>JSON 配列の要素として、<see cref="T:System.UInt32" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>JSON 配列の要素として、<see cref="T:System.UInt64" /> 値 (JSON 数値として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 数値として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの最初の部分として、UTF-8 プロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>JSON オブジェクトの名前/値ペアの最初の部分として、プロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの名前/値ペアの最初の部分として、事前にエンコードされたプロパティ名 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>JSON 配列の先頭を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。

- または -

検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON 配列の UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。

- または -
       
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。

- または -
       
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>文字列として指定されたプロパティ名を含む JSON 配列の先頭をキーとして書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。

- または -
       
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>JSON 配列の先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON 配列の JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。
    
- または -

検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>JSON オブジェクトの先頭を書き込みます。</summary>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。

- または -

検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>バイト型の読み取り専用スパンとして指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。 

- または -
       
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。 

- または -
       
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>文字列として指定されたプロパティ名を含む JSON オブジェクトの先頭をキーとして書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。 

- または -
       
検証が有効化されると、この書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの先頭を、事前にエンコードされたプロパティ名をキーとして書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <exception cref="T:System.InvalidOperationException">JSON の深度が、最大深度 1,000 を超えています。
          
- または -

検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="utf8Value">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-8 プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="utf8PropertyName">書き込み対象の JSON オブジェクトの UTF-8 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、このメソッドによって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>読み取り専用の文字範囲として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-8 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="utf8Value">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と UTF-16 テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、UTF-16 プロパティ名と文字列テキスト値 (JSON 文字列として) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>文字列として指定されたプロパティ名と、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>文字列として指定されたプロパティ名と、UTF-8 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="utf8Value">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>文字列として指定されたプロパティ名と、UTF-16 テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>文字列として指定されたプロパティ名と、文字列テキスト値 (JSON 文字列として) を、JSON オブジェクトの名前/値ペアの一部として書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの UTF-16 でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名または値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、プロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトのプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定されたプロパティ名が長すぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTime" /> 値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と <see cref="T:System.Guid" /> 値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と UTF-8 テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="utf8Value">名前/値ペアの一部として、JSON 文字列として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名とテキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と文字列テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>JSON オブジェクトの名前/値ペアの一部として、事前にエンコードされたプロパティ名と事前にエンコードされた値 (JSON 文字列) を書き込みます。</summary>
      <param name="propertyName">UTF-8 としてトランスコードおよび書き込み対象の JSON オブジェクトの JSON でエンコードされたプロパティ名。</param>
      <param name="value">名前/値ペアの一部として、UTF-8 でトランスコードされた JSON 文字列として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>JSON 配列の要素として、<see cref="T:System.DateTime" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>JSON 配列の要素として、<see cref="T:System.DateTimeOffset" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>JSON 配列の要素として、<see cref="T:System.Guid" /> 値 (JSON 文字列として) を書き込みます。</summary>
      <param name="value">JSON 配列の一部として、JSON 文字列として書き込まれる値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、操作によって無効な JSON の書き込みが行われる場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>JSON 配列の要素として、UTF-8 テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="utf8Value">JSON 配列の JSON 文字列要素として書き込まれる UTF-8 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>JSON 配列の要素として、UTF-16 テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="value">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>JSON 配列の要素として、文字列テキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="value">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる UTF-16 でエンコードされた値。</param>
      <exception cref="T:System.ArgumentException">指定した値が大きすぎます。</exception>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>JSON 配列の要素として、事前にエンコードされたテキスト値 (JSON 文字列) を書き込みます。</summary>
      <param name="value">JSON 配列の UTF-8 でトランスコードされた JSON 文字列要素として書き込まれる JSON でエンコードされた値。</param>
      <exception cref="T:System.InvalidOperationException">検証が有効化されると、書き込み操作によって無効な JSON が生成される場合があります。</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>現在のインスタンスによってこれまで出力にコミットされた合計バイト数を取得します。</summary>
      <returns>これまでにによって出力にコミットされたバイトの合計数 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>これまでに <see cref="T:System.Text.Json.Utf8JsonWriter" /> によって書き込まれたバイト数のうち、まだ出力にフラッシュされてコミットされていないバイト数を取得します。</summary>
      <returns>がこれまでに書き込まれたバイト数 <see cref="T:System.Text.Json.Utf8JsonWriter" /> 。出力にフラッシュされず、コミットされていません。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>現在のトークンの深度を取得します。</summary>
      <returns>現在のトークンの深さ。</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>このインスタンスを使用して JSON を書き込む際のカスタム動作を取得します。これによって、書き込み中に出力をフォーマットするかどうか、JSON の構造検証をスキップするかどうか、およびエスケープする文字が示されます。</summary>
      <returns>書式設定、検証、およびエスケープを行うライターのこのインスタンスのカスタム動作。</returns>
    </member>
  </members>
</doc>